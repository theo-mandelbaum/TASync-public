{"version":3,"file":"ej2-treegrid.min.js","sources":["../../src/treegrid/utils.js","../../src/treegrid/actions/crud-actions.js","../../src/treegrid/models/column.js","../../src/treegrid/models/loading-indicator.js","../../src/treegrid/models/filter-settings.js","../../src/treegrid/models/textwrap-settings.js","../../src/treegrid/actions/logger.js","../../src/treegrid/actions/clipboard.js","../../src/treegrid/base/constant.js","../../src/treegrid/actions/selection.js","../../src/treegrid/actions/print.js","../../src/treegrid/models/search-settings.js","../../src/treegrid/models/selection-settings.js","../../src/treegrid/renderer/render.js","../../src/treegrid/base/data.js","../../src/treegrid/enum.js","../../src/treegrid/models/page-settings.js","../../src/treegrid/models/summary.js","../../src/treegrid/models/edit-settings.js","../../src/treegrid/models/sort-settings.js","../../src/treegrid/models/infinite-scroll-settings.js","../../src/treegrid/base/treegrid.js","../../src/treegrid/actions/reorder.js","../../src/treegrid/actions/resize.js","../../src/treegrid/actions/rowdragdrop.js","../../src/treegrid/models/rowdrop-settings.js","../../src/treegrid/renderer/virtual-row-model-generator.js","../../src/treegrid/actions/filter.js","../../src/treegrid/actions/excel-export.js","../../src/treegrid/actions/pdf-export.js","../../src/treegrid/actions/page.js","../../src/treegrid/actions/toolbar.js","../../src/treegrid/actions/summary.js","../../src/treegrid/actions/sort.js","../../src/treegrid/actions/column-menu.js","../../src/treegrid/actions/context-menu.js","../../src/treegrid/actions/batch-edit.js","../../src/treegrid/actions/edit.js","../../src/treegrid/actions/command-column.js","../../src/treegrid/actions/detail-row.js","../../src/treegrid/renderer/virtual-tree-content-render.js","../../src/treegrid/actions/virtual-scroll.js","../../src/treegrid/actions/freeze-column.js","../../src/treegrid/actions/column-chooser.js","../../src/treegrid/actions/infinite-scroll.js","../../src/global.js"],"sourcesContent":["import { getObject } from '@syncfusion/ej2-grids';\nimport { DataManager, ODataAdaptor, UrlAdaptor } from '@syncfusion/ej2-data';\nimport { WebApiAdaptor, WebMethodAdaptor, CacheAdaptor } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Specifies whether remote data binding\n */\nexport function isRemoteData(parent) {\n    if (parent.dataSource instanceof DataManager) {\n        var adaptor = parent.dataSource.adaptor;\n        return (adaptor instanceof ODataAdaptor ||\n            (adaptor instanceof WebApiAdaptor) || (adaptor instanceof WebMethodAdaptor) ||\n            (adaptor instanceof CacheAdaptor) || adaptor instanceof UrlAdaptor);\n    }\n    return false;\n}\n/**\n * @param {TreeGrid | IGrid} parent - Tree Grid or Grid instance\n * @returns {boolean} - Returns whether custom binding\n */\nexport function isCountRequired(parent) {\n    if (parent.dataSource && 'result' in parent.dataSource) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns whether checkbox column is enabled\n */\nexport function isCheckboxcolumn(parent) {\n    for (var i = 0; i < parent.columns.length; i++) {\n        if (parent.columns[parseInt(i.toString(), 10)].showCheckbox) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns whether filtering and searching done\n */\nexport function isFilterChildHierarchy(parent) {\n    if ((!isNullOrUndefined(parent.grid.searchSettings.key) && parent.grid.searchSettings.key !== '' &&\n        (parent.searchSettings.hierarchyMode === 'Child' || parent.searchSettings.hierarchyMode === 'None')) ||\n        (parent.allowFiltering && parent.grid.filterSettings.columns.length &&\n            (parent.filterSettings.hierarchyMode === 'Child' || parent.filterSettings.hierarchyMode === 'None'))) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {Object} records - Define records for which parent records has to be found\n * @hidden\n * @returns {Object} - Returns parent records collection\n */\nexport function findParentRecords(records) {\n    var datas = [];\n    var recordsLength = Object.keys(records).length;\n    for (var i = 0, len = recordsLength; i < len; i++) {\n        var hasChild = getObject('hasChildRecords', records[parseInt(i.toString(), 10)]);\n        if (hasChild) {\n            datas.push(records[parseInt(i.toString(), 10)]);\n        }\n    }\n    return datas;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns the expand status of record\n * @param {ITreeData} record - Define the record for which expand status has be found\n * @param {ITreeData[]} parents - Parent Data collection\n * @hidden\n */\nexport function getExpandStatus(parent, record, parents) {\n    var parentRecord = isNullOrUndefined(record.parentItem) ? null :\n        getParentData(parent, record.parentItem.uniqueID);\n    var childParent;\n    if (parentRecord != null) {\n        if (parent.initialRender && !isNullOrUndefined(parentRecord[parent.expandStateMapping])\n            && !parentRecord[parent.expandStateMapping]) {\n            parentRecord.expanded = false;\n            return false;\n        }\n        else if (parentRecord.expanded === false) {\n            return false;\n        }\n        else if (parentRecord.parentItem) {\n            childParent = getParentData(parent, parentRecord.parentItem.uniqueID);\n            if (childParent && parent.initialRender && !isNullOrUndefined(childParent[parent.expandStateMapping])\n                && !childParent[parent.expandStateMapping]) {\n                childParent.expanded = false;\n                return false;\n            }\n            if (childParent && childParent.expanded === false) {\n                return false;\n            }\n            else if (childParent) {\n                return getExpandStatus(parent, childParent, parents);\n            }\n            return true;\n        }\n        else {\n            return true;\n        }\n    }\n    else {\n        return true;\n    }\n}\n/**\n * @param {ITreeData} records - Define the record for which child records has to be found\n * @returns {Object[]} - Returns child records collection\n * @hidden\n */\nexport function findChildrenRecords(records) {\n    var datas = [];\n    if (isNullOrUndefined(records) || (!records.hasChildRecords && !isNullOrUndefined(records.childRecords)\n        && !records.childRecords.length)) {\n        return [];\n    }\n    if (!isNullOrUndefined(records.childRecords)) {\n        var childRecords = records.childRecords.filter(function (item) { return !item.isSummaryRow; });\n        var keys = Object.keys(childRecords);\n        for (var i = 0, len = keys.length; i < len; i++) {\n            datas.push(childRecords[parseInt(i.toString(), 10)]);\n            if (childRecords[parseInt(i.toString(), 10)].hasChildRecords ||\n                (!isNullOrUndefined(childRecords[parseInt(i.toString(), 10)].childRecords) &&\n                    childRecords[parseInt(i.toString(), 10)].childRecords.length)) {\n                datas = datas.concat(findChildrenRecords(childRecords[parseInt(i.toString(), 10)]));\n            }\n        }\n    }\n    return datas;\n}\n/**\n * @param {TreeGrid} parent - Tree Grid instance\n * @returns {boolean} - Returns whether local data binding\n */\nexport function isOffline(parent) {\n    if (isRemoteData(parent)) {\n        var dm = parent.dataSource;\n        return !isNullOrUndefined(dm.ready);\n    }\n    return true;\n}\n/**\n * @param {Object[]} array - Defines the array to be cloned\n * @returns {Object[]} - Returns cloned array collection\n */\nexport function extendArray(array) {\n    var objArr = [];\n    var obj;\n    var keys;\n    for (var i = 0; array && i < array.length; i++) {\n        keys = Object.keys(array[parseInt(i.toString(), 10)]);\n        obj = {};\n        for (var j = 0; j < keys.length; j++) {\n            obj[keys[parseInt(j.toString(), 10)]] = array[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]];\n        }\n        objArr.push(obj);\n    }\n    return objArr;\n}\n/**\n * @param {ITreeData} value - Defined the dirty data to be cleaned\n * @returns {ITreeData} - Returns cleaned original data\n */\nexport function getPlainData(value) {\n    delete value.hasChildRecords;\n    delete value.childRecords;\n    delete value.index;\n    delete value.parentItem;\n    delete value.level;\n    delete value.taskData;\n    delete value.uniqueID;\n    return value;\n}\n/**\n * @param {TreeGrid} parent - TreeGrid instance\n * @param {string} value - IdMapping field name\n * @param {boolean} requireFilter - Specified whether treegrid data is filtered\n * @returns {ITreeData} - Returns IdMapping matched record\n */\nexport function getParentData(parent, value, requireFilter) {\n    if (requireFilter) {\n        var idFilter = 'uniqueIDFilterCollection';\n        return parent[\"\" + idFilter][\"\" + value];\n    }\n    else {\n        var id = 'uniqueIDCollection';\n        return parent[\"\" + id][\"\" + value];\n    }\n}\n/**\n * @param {HTMLTableRowElement} el - Row element\n * @returns {boolean} - Returns whether hidden\n */\nexport function isHidden(el) {\n    var style = window.getComputedStyle(el);\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\n}\n","import { isNullOrUndefined, extend, getValue } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { extendArray, getPlainData, getParentData } from '../utils';\n/**\n * Performs CRUD update to Tree Grid data source\n *\n * @param {{value: ITreeData, action: string }} details - Gets modified record value and CRUD action type\n * @param {TreeGrid} details.value - Gets modified record value\n * @param {string} details.action - CRUD action type\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Denotes whether Self Referential data binding\n * @param {number} addRowIndex - New add row index\n * @param {number} selectedIndex - Selected Row index\n * @param {string} columnName - Column field name\n * @param {ITreeData} addRowRecord - Newly added record\n * @returns {void}\n */\nexport function editAction(details, control, isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord) {\n    var value = details.value;\n    var action = details.action;\n    var changedRecords = 'changedRecords';\n    var i;\n    var j;\n    var addedRecords = 'addedRecords';\n    var batchChanges;\n    var key = control.grid.getPrimaryKeyFieldNames()[0];\n    var treeData = control.dataSource instanceof DataManager ?\n        control.dataSource.dataSource.json : control.dataSource;\n    var modifiedData = [];\n    var originalData = value;\n    var isSkip = false;\n    if (control.editSettings.mode === 'Batch') {\n        batchChanges = control.grid.editModule.getBatchChanges();\n    }\n    if (action === 'add' || (action === 'batchsave' && (control.editSettings.mode === 'Batch'\n        && batchChanges[\"\" + addedRecords].length))) {\n        var addAct = addAction(details, treeData, control, isSelfReference, addRowIndex, selectedIndex, addRowRecord);\n        value = addAct.value;\n        isSkip = addAct.isSkip;\n    }\n    if (value instanceof Array) {\n        modifiedData = extendArray(value);\n    }\n    else {\n        modifiedData.push(extend({}, value));\n    }\n    if (!isSkip && (action !== 'add' ||\n        (control.editSettings.newRowPosition !== 'Top' && control.editSettings.newRowPosition !== 'Bottom'))) {\n        for (var k = 0; k < modifiedData.length; k++) {\n            if (typeof (modifiedData[parseInt(k.toString(), 10)][\"\" + key]) === 'object') {\n                modifiedData[parseInt(k.toString(), 10)] = modifiedData[parseInt(k.toString(), 10)][\"\" + key];\n            }\n            var keys = modifiedData[parseInt(k.toString(), 10)].taskData ?\n                Object.keys(modifiedData[parseInt(k.toString(), 10)].taskData) :\n                Object.keys(modifiedData[parseInt(k.toString(), 10)]);\n            i = treeData.length;\n            var _loop_1 = function () {\n                if (treeData[parseInt(i.toString(), 10)][\"\" + key] === modifiedData[parseInt(k.toString(), 10)][\"\" + key]) {\n                    if (action === 'delete') {\n                        var currentData_1 = treeData[parseInt(i.toString(), 10)];\n                        treeData.splice(i, 1);\n                        if (isSelfReference) {\n                            if (!isNullOrUndefined(currentData_1[\"\" + control.parentIdMapping])) {\n                                var parentData = control.flatData.filter(function (e) {\n                                    return e[\"\" + control.idMapping] === currentData_1[\"\" + control.parentIdMapping];\n                                })[0];\n                                var childRecords = parentData ? parentData[\"\" + control.childMapping] : [];\n                                for (var p = childRecords.length - 1; p >= 0; p--) {\n                                    if (childRecords[parseInt(p.toString(), 10)][\"\" + control.idMapping] === currentData_1[\"\" + control.idMapping]) {\n                                        if (!control.enableImmutableMode && parentData.childRecords.length === parentData['Children'].length) {\n                                            parentData['childRecords'].splice(p, 1);\n                                        }\n                                        childRecords.splice(p, 1);\n                                        if (!childRecords.length) {\n                                            parentData.hasChildRecords = false;\n                                            updateParentRow(key, parentData, action, control, isSelfReference);\n                                        }\n                                        break;\n                                    }\n                                }\n                            }\n                            return \"break\";\n                        }\n                    }\n                    else {\n                        if (action === 'edit') {\n                            for (j = 0; j < keys.length; j++) {\n                                if (Object.prototype.hasOwnProperty.call(treeData[parseInt(i.toString(), 10)], keys[parseInt(j.toString(), 10)]) && ((control.editSettings.mode !== 'Cell'\n                                    || (!isNullOrUndefined(batchChanges) && batchChanges[\"\" + changedRecords].length === 0))\n                                    || keys[parseInt(j.toString(), 10)] === columnName)) {\n                                    var editedData = getParentData(control, modifiedData[parseInt(k.toString(), 10)].uniqueID);\n                                    treeData[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]] =\n                                        modifiedData[parseInt(k.toString(), 10)][keys[parseInt(j.toString(), 10)]];\n                                    if (editedData && editedData.taskData) {\n                                        editedData.taskData[keys[parseInt(j.toString(), 10)]] = editedData[keys[parseInt(j.toString(), 10)]]\n                                            = treeData[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]];\n                                    }\n                                }\n                            }\n                        }\n                        else if (action === 'add' || action === 'batchsave') {\n                            var index = void 0;\n                            if (control.editSettings.newRowPosition === 'Child') {\n                                if (isSelfReference) {\n                                    originalData.taskData[\"\" + control.parentIdMapping] = treeData[parseInt(i.toString(), 10)][\"\" + control.idMapping];\n                                    treeData.splice(i + 1, 0, originalData.taskData);\n                                }\n                                else {\n                                    if (!Object.prototype.hasOwnProperty.call(treeData[parseInt(i.toString(), 10)], control.childMapping)) {\n                                        treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping] = [];\n                                    }\n                                    treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping].push(originalData.taskData);\n                                    updateParentRow(key, treeData[parseInt(i.toString(), 10)], action, control, isSelfReference, originalData);\n                                }\n                            }\n                            else if (control.editSettings.newRowPosition === 'Below') {\n                                treeData.splice(i + 1, 0, originalData.taskData);\n                                if (!isNullOrUndefined(originalData.parentItem)) {\n                                    updateParentRow(key, treeData[i + 1], action, control, isSelfReference, originalData);\n                                }\n                            }\n                            else if (!addRowIndex) {\n                                index = 0;\n                                treeData.splice(index, 0, originalData.taskData);\n                            }\n                            else if (control.editSettings.newRowPosition === 'Above') {\n                                treeData.splice(i, 0, originalData.taskData);\n                                if (!isNullOrUndefined(originalData.parentItem)) {\n                                    updateParentRow(key, treeData[parseInt(i.toString(), 10)], action, control, isSelfReference, originalData);\n                                }\n                            }\n                        }\n                        return \"break\";\n                    }\n                }\n                else if (!isNullOrUndefined(treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping])) {\n                    if (removeChildRecords(treeData[parseInt(i.toString(), 10)][\"\" + control.childMapping], modifiedData[parseInt(k.toString(), 10)], action, key, control, isSelfReference, originalData, columnName)) {\n                        updateParentRow(key, treeData[parseInt(i.toString(), 10)], action, control, isSelfReference);\n                    }\n                }\n            };\n            while (i-- && i >= 0) {\n                var state_1 = _loop_1();\n                if (state_1 === \"break\")\n                    break;\n            }\n        }\n    }\n}\n/**\n * Performs Add action to Tree Grid data source\n *\n * @param {{value: ITreeData, action: string }} details - Gets modified record value and CRUD action type\n * @param {TreeGrid} details.value - Gets modified record value\n * @param {string} details.action - CRUD action type\n * @param {Object[]} treeData - Tree Grid data source\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Denotes whether Self Referential data binding\n * @param {number} addRowIndex - New add row index\n * @param {number} selectedIndex - Selected Row index\n * @param {ITreeData} addRowRecord - Newly added record\n * @returns {void}\n */\nexport function addAction(details, treeData, control, isSelfReference, addRowIndex, selectedIndex, addRowRecord) {\n    var value;\n    var isSkip = false;\n    var currentViewRecords = control.grid.getCurrentViewRecords();\n    value = extend({}, details.value);\n    value = getPlainData(value);\n    switch (control.editSettings.newRowPosition) {\n        case 'Top':\n            treeData.unshift(value);\n            isSkip = true;\n            break;\n        case 'Bottom':\n            treeData.push(value);\n            isSkip = true;\n            break;\n        case 'Above':\n            if (!isNullOrUndefined(addRowRecord)) {\n                value = extend({}, addRowRecord);\n                value = getPlainData(value);\n            }\n            else {\n                value = extend({}, currentViewRecords[addRowIndex + 1]);\n                value = getPlainData(value);\n            }\n            break;\n        case 'Below':\n        case 'Child':\n            if (!isNullOrUndefined(addRowRecord)) {\n                value = extend({}, addRowRecord);\n                value = getPlainData(value);\n            }\n            else {\n                var primaryKeys = control.grid.getPrimaryKeyFieldNames()[0];\n                var currentdata = currentViewRecords[parseInt(addRowIndex.toString(), 10)];\n                if (!isNullOrUndefined(currentdata) && currentdata[\"\" + primaryKeys] === details.value[\"\" + primaryKeys] || selectedIndex !== -1) {\n                    value = extend({}, currentdata);\n                }\n                else {\n                    value = extend({}, details.value);\n                }\n                value = getPlainData(value);\n                var internalProperty = 'internalProperties';\n                control.editModule[\"\" + internalProperty].taskData = value;\n            }\n            if (selectedIndex === -1) {\n                treeData.unshift(value);\n                isSkip = true;\n            }\n    }\n    return { value: value, isSkip: isSkip };\n}\n/**\n * @param {ITreeData[]} childRecords - Child Records collection\n * @param {Object} modifiedData - Modified data in crud action\n * @param {string} action - crud action type\n * @param {string} key - Primary key field name\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Specified whether Self Referential data binding\n * @param {ITreeData} originalData - Non updated data from data source, of edited data\n * @param {string} columnName - column field name\n * @returns {boolean} Returns whether child records exists\n */\nexport function removeChildRecords(childRecords, modifiedData, action, key, control, isSelfReference, originalData, columnName) {\n    var isChildAll = false;\n    var j = childRecords.length;\n    while (j-- && j >= 0) {\n        if (childRecords[parseInt(j.toString(), 10)][\"\" + key] === modifiedData[\"\" + key] ||\n            (isSelfReference && childRecords[parseInt(j.toString(), 10)][control.parentIdMapping] === modifiedData[control.idMapping])) {\n            if (action === 'edit') {\n                var keys = Object.keys(modifiedData);\n                var editedData = getParentData(control, modifiedData.uniqueID);\n                for (var i = 0; i < keys.length; i++) {\n                    if (Object.prototype.hasOwnProperty.call(childRecords[parseInt(j.toString(), 10)], keys[parseInt(i.toString(), 10)]) &&\n                        (control.editSettings.mode !== 'Cell' || keys[parseInt(i.toString(), 10)] === columnName)) {\n                        editedData[keys[parseInt(i.toString(), 10)]] =\n                            editedData.taskData[keys[parseInt(i.toString(), 10)]] =\n                                childRecords[parseInt(j.toString(), 10)][keys[parseInt(i.toString(), 10)]] =\n                                    modifiedData[keys[parseInt(i.toString(), 10)]];\n                        if (control.grid.editSettings.mode === 'Normal' && control.editSettings.mode === 'Cell' && !isNullOrUndefined(control.grid.editModule)) {\n                            var editModule = 'editModule';\n                            control.grid.editModule[\"\" + editModule].editRowIndex = modifiedData.index;\n                            control.grid.editModule[\"\" + editModule].updateCurrentViewData(modifiedData);\n                        }\n                    }\n                }\n                break;\n            }\n            else if (action === 'add' || action === 'batchsave') {\n                if (control.editSettings.newRowPosition === 'Child') {\n                    if (isSelfReference) {\n                        originalData[\"\" + control.parentIdMapping] = childRecords[parseInt(j.toString(), 10)][control.idMapping];\n                        childRecords.splice(j + 1, 0, originalData);\n                        updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n                    }\n                    else {\n                        if (!Object.prototype.hasOwnProperty.call(childRecords[parseInt(j.toString(), 10)], control.childMapping)) {\n                            childRecords[parseInt(j.toString(), 10)][control.childMapping] = [];\n                        }\n                        childRecords[parseInt(j.toString(), 10)][control.childMapping].push(originalData.taskData);\n                        updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n                    }\n                }\n                else if (control.editSettings.newRowPosition === 'Above') {\n                    childRecords.splice(j, 0, originalData.taskData);\n                    if (!isNullOrUndefined(originalData.parentItem)) {\n                        updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n                    }\n                }\n                else if (control.editSettings.newRowPosition === 'Below') {\n                    childRecords.splice(j + 1, 0, originalData.taskData);\n                    if (!isNullOrUndefined(originalData.parentItem)) {\n                        updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference, originalData);\n                    }\n                }\n            }\n            else {\n                childRecords.splice(j, 1);\n                if (!childRecords.length) {\n                    isChildAll = true;\n                }\n            }\n        }\n        else if (!isNullOrUndefined(childRecords[parseInt(j.toString(), 10)][control.childMapping])) {\n            if (removeChildRecords(childRecords[parseInt(j.toString(), 10)][control.childMapping], modifiedData, action, key, control, isSelfReference, originalData, columnName)) {\n                updateParentRow(key, childRecords[parseInt(j.toString(), 10)], action, control, isSelfReference);\n            }\n        }\n    }\n    return isChildAll;\n}\n/**\n * @param {string} key - Primary key field name\n * @param {ITreeData} record - Parent Record which has to be updated\n * @param {string} action - CRUD action type\n * @param {TreeGrid} control - Tree Grid instance\n * @param {boolean} isSelfReference - Specified whether self referential data binding\n * @param {ITreeData} child - Specifies child record\n * @returns {void}\n */\nexport function updateParentRow(key, record, action, control, isSelfReference, child) {\n    if ((control.editSettings.newRowPosition === 'Above' || control.editSettings.newRowPosition === 'Below')\n        && ((action === 'add' || action === 'batchsave')) && !isNullOrUndefined(child.parentItem)) {\n        var parentData = getParentData(control, child.parentItem.uniqueID);\n        parentData.childRecords.push(child);\n    }\n    else {\n        var currentRecords = control.grid.getCurrentViewRecords();\n        var index_1;\n        currentRecords.map(function (e, i) { if (e[\"\" + key] === record[\"\" + key]) {\n            index_1 = i;\n            return;\n        } });\n        if (control.enableVirtualization && isNullOrUndefined(index_1)) {\n            var updatedParent = getValue('uniqueIDCollection.' + child.parentUniqueID, control);\n            record = updatedParent;\n        }\n        if (!isNullOrUndefined(index_1)) {\n            record = currentRecords[parseInt(index_1.toString(), 10)];\n        }\n        if (control.enableVirtualization && isNullOrUndefined(record) && !isNullOrUndefined(child)) {\n            record = getValue('uniqueIDCollection.' + child.parentUniqueID, control);\n        }\n        if (!isSelfReference && !isNullOrUndefined(record.childRecords) && record.childRecords.length) {\n            record.hasChildRecords = true;\n        }\n        else {\n            record.hasChildRecords = false;\n        }\n        if (action === 'add' || action === 'batchsave') {\n            record.expanded = true;\n            record.hasChildRecords = true;\n            if (control.sortSettings.columns.length && isNullOrUndefined(child)) {\n                child = currentRecords.filter(function (e) {\n                    if (e.parentUniqueID === record.uniqueID) {\n                        return e;\n                    }\n                    else {\n                        return null;\n                    }\n                });\n            }\n            var childRecords = child ? child instanceof Array ? child[0] : child : currentRecords[index_1 + 1];\n            if (control.editSettings.newRowPosition !== 'Below') {\n                if (!Object.prototype.hasOwnProperty.call(record, 'childRecords')) {\n                    record.childRecords = [];\n                }\n                else {\n                    if (!isNullOrUndefined(child) && record[\"\" + key] !== child[\"\" + key]) {\n                        record.childRecords.push(child);\n                    }\n                }\n                if (record.childRecords.indexOf(childRecords) === -1 && record[\"\" + key] !== child[\"\" + key]) {\n                    record.childRecords.unshift(childRecords);\n                }\n                if (isSelfReference) {\n                    if (!Object.prototype.hasOwnProperty.call(record, control.childMapping)) {\n                        record[control.childMapping] = [];\n                    }\n                    if (record[\"\" + control.childMapping].indexOf(childRecords) === -1 && record[\"\" + key] !== child[\"\" + key]) {\n                        record[control.childMapping].unshift(childRecords);\n                    }\n                }\n            }\n        }\n        var primaryKeys = control.grid.getPrimaryKeyFieldNames()[0];\n        var data = control.grid.dataSource instanceof DataManager ?\n            control.grid.dataSource.dataSource.json : control.grid.dataSource;\n        for (var i = 0; i < data.length; i++) {\n            if (data[parseInt(i.toString(), 10)][\"\" + primaryKeys] === record[\"\" + primaryKeys]) {\n                data[parseInt(i.toString(), 10)] = record;\n                break;\n            }\n        }\n        control.grid.setRowData(key, record);\n        var row = control.getRowByIndex(index_1);\n        if (control.editSettings.mode === 'Batch') {\n            if (action === 'add') {\n                row = control.getRows()[control.grid.getCurrentViewRecords().indexOf(record)];\n            }\n            else {\n                row = control.getRows()[control.grid.getRowIndexByPrimaryKey(record[\"\" + key])];\n            }\n        }\n        var movableRow = void 0;\n        if (control.frozenRows || control.getFrozenColumns()) {\n            movableRow = control.getRowByIndex(index_1);\n        }\n        if (!control.enableVirtualization && !isNullOrUndefined(row) || !isNullOrUndefined(movableRow)) {\n            var index_2 = control.treeColumnIndex;\n            if (control.allowRowDragAndDrop && control.enableImmutableMode) {\n                index_2 = index_2 + 1;\n            }\n            control.renderModule.cellRender({\n                data: record, cell: row.cells[parseInt(index_2.toString(), 10)] ? row.cells[parseInt(index_2.toString(), 10)]\n                    : movableRow.cells[index_2 - control.getFrozenColumns()],\n                column: control.grid.getColumns()[control.treeColumnIndex],\n                requestType: action\n            });\n            if (control.enableImmutableMode && control['action'] === 'indenting' || control['action'] === 'outdenting') {\n                control.renderModule.RowModifier({\n                    data: record, row: row\n                });\n            }\n        }\n    }\n}\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { merge, Property } from '@syncfusion/ej2-base';\n/**\n * Represents the \"Column\" model class for TreeGrid, defining essential properties and functionalities of a column.\n */\nvar Column = /** @class */ (function () {\n    function Column(options) {\n        /**\n         * Allows or disallows editing of the column. Set to `false` to make a column non-editable.\n         * By default, all columns are editable.\n         *\n         * @default true\n         */\n        this.allowEditing = true;\n        /**\n         * Customization options for the edit cell.\n         *\n         * @default {}\n         */\n        this.edit = {};\n        /**\n         * When set to `true`, encodes HTML content in headers and cells to prevent HTML injection.\n         *\n         * @default true\n         */\n        this.disableHtmlEncode = true;\n        /**\n         * Disables column reordering if set to `false`. By default, columns can be reordered.\n         *\n         * @default true\n         */\n        this.allowReordering = true;\n        /**\n         * Disables column menu for the column if set to `false`. By default, column menus are enabled for all columns.\n         *\n         * @default true\n         */\n        this.showColumnMenu = true;\n        /**\n         * Disables filtering for the column if set to `false`. By default, columns are filterable.\n         *\n         * @default true\n         */\n        this.allowFiltering = true;\n        /**\n         * Disables sorting for the column if set to `false`. By default, columns are sortable.\n         *\n         * @default true\n         */\n        this.allowSorting = true;\n        /**\n         * Disables resizing for the column if set to `false`. By default, columns can be resized.\n         *\n         * @default true\n         */\n        this.allowResizing = true;\n        /**\n         * Customize default filter options for a specific column, providing types and UI definitions for custom components.\n         *\n         * @default null\n         */\n        this.filter = {};\n        merge(this, options);\n    }\n    /**\n     * Reflects state changes for TreeGrid column directives, particularly in React.\n     *\n     * @param {Column} column - The column to update.\n     * @returns {void}\n     * @hidden\n     */\n    Column.prototype.setProperties = function (column) {\n        var keys = Object.keys(column);\n        for (var i = 0; i < keys.length; i++) {\n            this[keys[parseInt(i.toString(), 10)]] = column[keys[parseInt(i.toString(), 10)]];\n            if (this.parent && this.parent['isReact'] && keys[parseInt(i.toString(), 10)] === 'template') {\n                var refreshReactColumnTemplateByUid = 'refreshReactColumnTemplateByUid';\n                this.parent.clipboardModule['treeGridParent'].renderModule[\"\" + refreshReactColumnTemplateByUid](this.uid);\n            }\n        }\n    };\n    return Column;\n}());\nexport { Column };\n/**\n * Defines TreeGrid column\n */\nvar TreeGridColumn = /** @class */ (function (_super) {\n    __extends(TreeGridColumn, _super);\n    function TreeGridColumn() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(null)\n    ], TreeGridColumn.prototype, \"columns\", void 0);\n    return TreeGridColumn;\n}(Column));\nexport { TreeGridColumn };\n/**\n * Defines stacked tree grid column\n */\nvar StackedColumn = /** @class */ (function (_super) {\n    __extends(StackedColumn, _super);\n    function StackedColumn() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return StackedColumn;\n}(TreeGridColumn));\nexport { StackedColumn };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Configures the loading indicator for the Tree Grid, allowing you to display a visual indicator during data loading operations to enhance user experience.\n */\nvar LoadingIndicator = /** @class */ (function (_super) {\n    __extends(LoadingIndicator, _super);\n    function LoadingIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('Spinner')\n    ], LoadingIndicator.prototype, \"indicatorType\", void 0);\n    return LoadingIndicator;\n}(ChildProperty));\nexport { LoadingIndicator };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Collection, Property, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Represents the filter configuration for a column in the TreeGrid.\n */\nvar Predicate = /** @class */ (function (_super) {\n    __extends(Predicate, _super);\n    function Predicate() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], Predicate.prototype, \"field\", void 0);\n    __decorate([\n        Property()\n    ], Predicate.prototype, \"operator\", void 0);\n    __decorate([\n        Property()\n    ], Predicate.prototype, \"value\", void 0);\n    __decorate([\n        Property()\n    ], Predicate.prototype, \"matchCase\", void 0);\n    __decorate([\n        Property()\n    ], Predicate.prototype, \"ignoreAccent\", void 0);\n    __decorate([\n        Property()\n    ], Predicate.prototype, \"predicate\", void 0);\n    __decorate([\n        Property({})\n    ], Predicate.prototype, \"actualFilterValue\", void 0);\n    __decorate([\n        Property({})\n    ], Predicate.prototype, \"actualOperator\", void 0);\n    __decorate([\n        Property()\n    ], Predicate.prototype, \"type\", void 0);\n    __decorate([\n        Property()\n    ], Predicate.prototype, \"ejpredicate\", void 0);\n    __decorate([\n        Property()\n    ], Predicate.prototype, \"uid\", void 0);\n    __decorate([\n        Property()\n    ], Predicate.prototype, \"isForeignKey\", void 0);\n    return Predicate;\n}(ChildProperty));\nexport { Predicate };\n/**\n * Configures the filtering behavior of the TreeGrid, enabling complex data filtering capabilities.\n */\nvar FilterSettings = /** @class */ (function (_super) {\n    __extends(FilterSettings, _super);\n    function FilterSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Collection([], Predicate)\n    ], FilterSettings.prototype, \"columns\", void 0);\n    __decorate([\n        Property('FilterBar')\n    ], FilterSettings.prototype, \"type\", void 0);\n    __decorate([\n        Property()\n    ], FilterSettings.prototype, \"mode\", void 0);\n    __decorate([\n        Property(true)\n    ], FilterSettings.prototype, \"showFilterBarStatus\", void 0);\n    __decorate([\n        Property(1500)\n    ], FilterSettings.prototype, \"immediateModeDelay\", void 0);\n    __decorate([\n        Property()\n    ], FilterSettings.prototype, \"operators\", void 0);\n    __decorate([\n        Property(false)\n    ], FilterSettings.prototype, \"ignoreAccent\", void 0);\n    __decorate([\n        Property('Parent')\n    ], FilterSettings.prototype, \"hierarchyMode\", void 0);\n    return FilterSettings;\n}(ChildProperty));\nexport { FilterSettings };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Configures the text wrapping behavior of the TreeGrid.\n */\nvar TextWrapSettings = /** @class */ (function (_super) {\n    __extends(TextWrapSettings, _super);\n    function TextWrapSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('Both')\n    ], TextWrapSettings.prototype, \"wrapMode\", void 0);\n    return TextWrapSettings;\n}(ChildProperty));\nexport { TextWrapSettings };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Logger as GridLogger, Grid, detailLists } from '@syncfusion/ej2-grids';\n/**\n * Logger module for TreeGrid\n *\n * @hidden\n */\nvar DOC_URL = 'https://ej2.syncfusion.com/documentation/treegrid';\nvar BASE_DOC_URL = 'https://ej2.syncfusion.com/documentation';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar WARNING = '[EJ2TreeGrid.Warning]';\nvar ERROR = '[EJ2TreeGrid.Error]';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar INFO = '[EJ2TreeGrid.Info]';\nvar IsRowDDEnabled = false;\nvar Logger = /** @class */ (function (_super) {\n    __extends(Logger, _super);\n    function Logger(parent) {\n        var _this = this;\n        Grid.Inject(GridLogger);\n        _this = _super.call(this, parent) || this;\n        return _this;\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} - Returns Logger module name\n     */\n    Logger.prototype.getModuleName = function () {\n        return 'logger';\n    };\n    Logger.prototype.log = function (types, args) {\n        if (!(types instanceof Array)) {\n            types = [types];\n        }\n        var type = types;\n        for (var i = 0; i < type.length; i++) {\n            var item = detailLists[type[parseInt(i.toString(), 10)]];\n            var cOp = item.check(args, this.parent);\n            if (cOp.success) {\n                var message = item.generateMessage(args, this.parent, cOp.options);\n                message = message.replace('EJ2Grid', 'EJ2TreeGrid').replace('* Hierarchy Grid', '').replace('* Grouping', '');\n                if (IsRowDDEnabled && type[parseInt(i.toString(), 10)] === 'primary_column_missing') {\n                    message = message.replace('Editing', 'Row DragAndDrop');\n                    IsRowDDEnabled = false;\n                }\n                var index = message.indexOf('https');\n                var gridurl = message.substring(index);\n                if (type[parseInt(i.toString(), 10)] === 'module_missing') {\n                    message = message.replace(gridurl, DOC_URL + '/modules');\n                }\n                else if (type[parseInt(i.toString(), 10)] === 'primary_column_missing' || type[parseInt(i.toString(), 10)] === 'selection_key_missing') {\n                    message = message.replace(gridurl, BASE_DOC_URL + '/api/treegrid/column/#isprimarykey');\n                }\n                else if (type[parseInt(i.toString(), 10)] === 'grid_remote_edit') {\n                    message = message.replace(gridurl, DOC_URL + '/edit');\n                }\n                else if (type[parseInt(i.toString(), 10)] === 'virtual_height') {\n                    message = message.replace(gridurl, DOC_URL + '/virtual');\n                }\n                else if (type[parseInt(i.toString(), 10)] === 'check_datasource_columns') {\n                    message = message.replace(gridurl, DOC_URL + '/columns');\n                }\n                else if (type[parseInt(i.toString(), 10)] === 'locale_missing') {\n                    message = message.replace(gridurl, DOC_URL + '/global-local/#localization');\n                }\n                if (type[parseInt(i.toString(), 10)] === 'datasource_syntax_mismatch') {\n                    if (!isNullOrUndefined(this.treeGridObj) && !isNullOrUndefined(this.treeGridObj.dataStateChange)) {\n                        // eslint-disable-next-line no-console\n                        console[item.logType](message);\n                    }\n                }\n                else {\n                    // eslint-disable-next-line no-console\n                    console[item.logType](message);\n                }\n            }\n        }\n    };\n    Logger.prototype.treeLog = function (types, args, treeGrid) {\n        this.treeGridObj = treeGrid;\n        if (!(types instanceof Array)) {\n            types = [types];\n        }\n        var type = types;\n        if (treeGrid.allowRowDragAndDrop && !treeGrid.columns.filter(function (column) { return column.isPrimaryKey; }).length) {\n            IsRowDDEnabled = true;\n            this.log('primary_column_missing', args);\n        }\n        for (var i = 0; i < type.length; i++) {\n            var item = treeGridDetails[type[parseInt(i.toString(), 10)]];\n            var cOp = item.check(args, treeGrid);\n            if (cOp.success) {\n                var message = item.generateMessage(args, treeGrid, cOp.options);\n                // eslint-disable-next-line no-console\n                console[item.logType](message);\n            }\n        }\n    };\n    return Logger;\n}(GridLogger));\nexport { Logger };\nexport var treeGridDetails = {\n    // eslint-disable-next-line camelcase\n    mapping_fields_missing: {\n        type: 'mapping_fields_missing',\n        logType: 'error',\n        check: function (args, parent) {\n            var opt = { success: false };\n            if ((isNullOrUndefined(parent.idMapping) && isNullOrUndefined(parent.childMapping)\n                && isNullOrUndefined(parent.parentIdMapping)) ||\n                (!isNullOrUndefined(parent.idMapping) && isNullOrUndefined(parent.parentIdMapping)) ||\n                (isNullOrUndefined(parent.idMapping) && !isNullOrUndefined(parent.parentIdMapping))) {\n                opt = { success: true };\n            }\n            return opt;\n        },\n        generateMessage: function () {\n            return ERROR + ':' + ' MAPPING FIELDS MISSING \\n' + 'One of the following fields is missing. It is ' +\n                'required for the hierarchical relationship of records in TreeGrid:\\n' +\n                '* childMapping\\n' + '* idMapping\\n' + '* parentIdMapping\\n' +\n                'Refer to the following documentation links for more details.\\n' +\n                (BASE_DOC_URL + \"/api/treegrid#childmapping\") + '\\n' +\n                (BASE_DOC_URL + \"/api/treegrid#idmapping\") + '\\n' +\n                (BASE_DOC_URL + \"/api/treegrid#$parentidmapping\");\n        }\n    }\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as events from '../base/constant';\nimport { isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport { Clipboard as GridClipboard } from '@syncfusion/ej2-grids';\n/**\n * The `Clipboard` module is used to handle clipboard copy action.\n *\n * @hidden\n */\nvar TreeClipboard = /** @class */ (function (_super) {\n    __extends(TreeClipboard, _super);\n    function TreeClipboard(parent, serviceLocator) {\n        var _this = _super.call(this, parent.grid, serviceLocator) || this;\n        _this.treeCopyContent = '';\n        _this.copiedUniqueIdCollection = [];\n        _this.treeGridParent = parent;\n        _this.serviceLocator = serviceLocator;\n        return _this;\n    }\n    TreeClipboard.prototype.setCopyData = function (withHeader) {\n        var copyContent = 'copyContent';\n        var getCopyData = 'getCopyData';\n        var isSelect = 'isSelect';\n        var uniqueID = 'uniqueID';\n        var currentRecords = this.treeGridParent.getCurrentViewRecords();\n        if (window.getSelection().toString() === '') {\n            this.clipBoardTextArea.value = this[\"\" + copyContent] = '';\n            var rows = this.treeGridParent.grid.getRows();\n            if (this.treeGridParent.selectionSettings.mode !== 'Cell') {\n                var selectedIndexes = this.treeGridParent.getSelectedRowIndexes().sort(function (a, b) {\n                    return a - b;\n                });\n                for (var i = 0; i < selectedIndexes.length; i++) {\n                    if (i > 0) {\n                        this.treeCopyContent += '\\n';\n                    }\n                    if (!rows[selectedIndexes[parseInt(i.toString(), 10)]].classList.contains('e-summaryrow')) {\n                        var cells = [].slice.call(rows[selectedIndexes[parseInt(i.toString(), 10)]].querySelectorAll('.e-rowcell'));\n                        var uniqueid = this.treeGridParent.getSelectedRecords()[parseInt(i.toString(), 10)][\"\" + uniqueID];\n                        if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n                            if (this.treeGridParent.copyHierarchyMode === 'Parent' || this.treeGridParent.copyHierarchyMode === 'Both') {\n                                this.parentContentData(currentRecords, selectedIndexes[parseInt(i.toString(), 10)], rows, withHeader, i);\n                            }\n                            this[\"\" + getCopyData](cells, false, '\\t', withHeader);\n                            this.treeCopyContent += this[\"\" + copyContent];\n                            this.copiedUniqueIdCollection.push(uniqueid);\n                            this[\"\" + copyContent] = '';\n                            if (this.treeGridParent.copyHierarchyMode === 'Child' || this.treeGridParent.copyHierarchyMode === 'Both') {\n                                this.childContentData(currentRecords, selectedIndexes[parseInt(i.toString(), 10)], rows, withHeader);\n                            }\n                        }\n                    }\n                }\n                if (withHeader) {\n                    var headerTextArray = [];\n                    for (var i = 0; i < this.treeGridParent.getVisibleColumns().length; i++) {\n                        headerTextArray[parseInt(i.toString(), 10)] =\n                            this.treeGridParent.getVisibleColumns()[parseInt(i.toString(), 10)].headerText;\n                    }\n                    this[\"\" + getCopyData](headerTextArray, false, '\\t', withHeader);\n                    this.treeCopyContent = this[\"\" + copyContent] + '\\n' + this.treeCopyContent;\n                }\n                var args = {\n                    data: this.treeCopyContent,\n                    cancel: false\n                };\n                this.treeGridParent.trigger(events.beforeCopy, args);\n                if (args.cancel) {\n                    return;\n                }\n                this.clipBoardTextArea.value = this[\"\" + copyContent] = args.data;\n                if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {\n                    this.clipBoardTextArea.select();\n                }\n                else {\n                    this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);\n                }\n                this[\"\" + isSelect] = true;\n                this.copiedUniqueIdCollection = [];\n                this.treeCopyContent = '';\n            }\n            else {\n                _super.prototype.setCopyData.call(this, withHeader);\n            }\n        }\n    };\n    TreeClipboard.prototype.parentContentData = function (currentRecords, selectedIndex, rows, withHeader, index) {\n        var getCopyData = 'getCopyData';\n        var copyContent = 'copyContent';\n        var parentItem = 'parentItem';\n        var uniqueID = 'uniqueID';\n        var level = 'level';\n        if (!isNullOrUndefined(currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem])) {\n            var treeLevel = currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem][\"\" + level];\n            for (var i = 0; i < treeLevel + 1; i++) {\n                for (var j = 0; j < currentRecords.length; j++) {\n                    if (!isNullOrUndefined(currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem]) &&\n                        currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID] === currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + parentItem][\"\" + uniqueID]) {\n                        selectedIndex = j;\n                        var cells = [].slice.call(rows[parseInt(selectedIndex.toString(), 10)].querySelectorAll('.e-rowcell'));\n                        var uniqueid = currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID];\n                        if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n                            this[\"\" + getCopyData](cells, false, '\\t', withHeader);\n                            if (index > 0) {\n                                this.treeCopyContent = this.treeCopyContent + this[\"\" + copyContent] + '\\n';\n                            }\n                            else {\n                                this.treeCopyContent = this[\"\" + copyContent] + '\\n' + this.treeCopyContent;\n                            }\n                            this.copiedUniqueIdCollection.push(uniqueid);\n                            this[\"\" + copyContent] = '';\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    TreeClipboard.prototype.copy = function (withHeader) {\n        _super.prototype.copy.call(this, withHeader);\n    };\n    TreeClipboard.prototype.paste = function (data, rowIndex, colIndex) {\n        _super.prototype.paste.call(this, data, rowIndex, colIndex);\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns clipboard module name\n     */\n    TreeClipboard.prototype.getModuleName = function () {\n        return 'clipboard';\n    };\n    /**\n     * To destroy the clipboard\n     *\n     * @returns {void}\n     * @hidden\n     */\n    TreeClipboard.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    TreeClipboard.prototype.childContentData = function (currentRecords, selectedIndex, rows, withHeader) {\n        var getCopyData = 'getCopyData';\n        var copyContent = 'copyContent';\n        var childRecords = 'childRecords';\n        var hasChildRecords = 'hasChildRecords';\n        var uniqueID = 'uniqueID';\n        if (currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + hasChildRecords]) {\n            var childData = currentRecords[parseInt(selectedIndex.toString(), 10)][\"\" + childRecords];\n            for (var i = 0; i < childData.length; i++) {\n                for (var j = 0; j < currentRecords.length; j++) {\n                    if (!isNullOrUndefined(childData[parseInt(i.toString(), 10)][\"\" + uniqueID]) && currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID] === childData[parseInt(i.toString(), 10)][\"\" + uniqueID]) {\n                        if ((!isNullOrUndefined(rows[parseInt(j.toString(), 10)])) && !rows[parseInt(j.toString(), 10)].classList.contains('e-summaryrow')) {\n                            var cells = [].slice.call(rows[parseInt(j.toString(), 10)].querySelectorAll('.e-rowcell'));\n                            var uniqueid = currentRecords[parseInt(j.toString(), 10)][\"\" + uniqueID];\n                            if (this.copiedUniqueIdCollection.indexOf(uniqueid) === -1) {\n                                this[\"\" + getCopyData](cells, false, '\\t', withHeader);\n                                this.treeCopyContent += ('\\n' + this[\"\" + copyContent]);\n                                this[\"\" + copyContent] = '';\n                                this.copiedUniqueIdCollection.push(uniqueid);\n                                this.childContentData(currentRecords, j, rows, withHeader);\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    return TreeClipboard;\n}(GridClipboard));\nexport { TreeClipboard };\n","/**\n *  @hidden\n */\nexport var load = 'load';\n/** @hidden */\nexport var rowDataBound = 'rowDataBound';\n/** @hidden */\nexport var dataBound = 'dataBound';\n/** @hidden */\nexport var queryCellInfo = 'queryCellInfo';\n/** @hidden */\nexport var beforeDataBound = 'beforeDataBound';\n/** @hidden */\nexport var actionBegin = 'actionBegin';\n/** @hidden */\nexport var dataStateChange = 'dataStateChange';\n/** @hidden */\nexport var actionComplete = 'actionComplete';\n/** @hidden */\nexport var rowSelecting = 'rowSelecting';\n/** @hidden */\nexport var rowSelected = 'rowSelected';\n/** @hidden */\nexport var checkboxChange = 'checkboxChange';\n/** @hidden */\nexport var rowDeselected = 'rowDeselected';\n/** @hidden */\nexport var toolbarClick = 'toolbarClick';\n/** @hidden */\nexport var beforeExcelExport = 'beforeExcelExport';\n/** @hidden */\nexport var beforePdfExport = 'beforePdfExport';\n/** @hidden */\nexport var resizeStop = 'resizeStop';\n/** @hidden */\nexport var expanded = 'expanded';\n/** @hidden */\nexport var expanding = 'expanding';\n/** @hidden */\nexport var collapsed = 'collapsed';\n/** @hidden */\nexport var collapsing = 'collapsing';\n/** @hidden */\nexport var remoteExpand = 'remoteExpand';\n/** @hidden */\nexport var localPagedExpandCollapse = 'localPagedExpandCollapse';\n/** @hidden */\nexport var pagingActions = 'pagingActions';\n/** @hidden */\nexport var printGridInit = 'printGrid-Init';\n/** @hidden */\nexport var contextMenuOpen = 'contextMenuOpen';\n/** @hidden */\nexport var contextMenuClick = 'contextMenuClick';\n/** @hidden */\nexport var beforeCopy = 'beforeCopy';\n/** @hidden */\nexport var beforePaste = 'beforePaste';\n/** @hidden */\nexport var savePreviousRowPosition = 'savePreviousRowPosition';\n/** @hidden */\nexport var crudAction = 'crudAction';\n/** @hidden */\nexport var beginEdit = 'beginEdit';\n/** @hidden */\nexport var beginAdd = 'beginAdd';\n/** @hidden */\nexport var recordDoubleClick = 'recordDoubleClick';\n/** @hidden */\nexport var cellSave = 'cellSave';\n/** @hidden */\nexport var cellSaved = 'cellSaved';\n/** @hidden */\nexport var cellEdit = 'cellEdit';\n/** @hidden */\nexport var batchDelete = 'batchDelete';\n/** @hidden */\nexport var batchCancel = 'batchCancel';\n/** @hidden */\nexport var batchAdd = 'batchAdd';\n/** @hidden */\nexport var beforeBatchDelete = 'beforeBatchDelete';\n/** @hidden */\nexport var beforeBatchAdd = 'beforeBatchAdd';\n/** @hidden */\nexport var beforeBatchSave = 'beforeBatchSave';\n/** @hidden */\nexport var batchSave = 'batchSave';\n/** @hidden */\nexport var keyPressed = 'key-pressed';\n/** @hidden */\nexport var updateData = 'update-data';\n/** @hidden */\nexport var doubleTap = 'double-tap';\n/** @hidden */\nexport var virtualColumnIndex = 'virtualColumnIndex';\n/** @hidden */\nexport var virtualActionArgs = 'virtual-action-args';\n/** @hidden */\nexport var destroy = 'destroy';\n/** @hidden */\nexport var dataListener = 'data-listener';\n/** @hidden */\nexport var indexModifier = 'index-modifier';\n/** @hidden */\nexport var beforeStartEdit = 'edit-form';\n/** @hidden */\nexport var beforeBatchCancel = 'before-batch-cancel';\n/** @hidden */\nexport var batchEditFormRendered = 'batcheditform-rendered';\n/** @hidden */\nexport var detailDataBound = 'detailDataBound';\n/** @hidden */\nexport var rowDrag = 'rowDrag';\n/** @hidden */\nexport var rowDragStartHelper = 'rowDragStartHelper';\n/** @hidden */\nexport var rowDrop = 'rowDrop';\n/** @hidden */\nexport var rowDragStart = 'rowDragStart';\n/** @hidden */\nexport var rowsAdd = 'rows-add';\n/** @hidden */\nexport var rowsRemove = 'rows-remove';\n/** @hidden */\nexport var rowdraging = 'row-draging';\n/** @hidden */\nexport var rowDropped = 'row-dropped';\n/** @hidden */\nexport var autoCol = 'auto-col';\n/** @hidden */\nexport var rowDeselecting = 'rowDeselecting';\n/** @hidden */\nexport var headerContent = 'e-headercontent';\n/** @hidden */\nexport var movableContent = 'e-movablecontent';\n/** @hidden */\nexport var movableHeader = 'e-movableheader';\n/** @hidden */\nexport var frozenContent = 'e-frozencontent';\n/** @hidden */\nexport var frozenHeader = 'e-frozenheader';\n/** @hidden */\nexport var content = 'e-content';\n/** @hidden */\nexport var table = 'e-table';\n/** @hidden */\nexport var leftRight = 'Left-Right';\n/** @hidden */\nexport var frozenRight = 'frozen-right';\n/** @hidden */\nexport var frozenLeft = 'frozen-left';\n/** @hidden */\nexport var ariaColIndex = 'aria-colindex';\n/** @hidden */\nexport var ariaRowIndex = 'aria-rowindex';\n/** @hidden */\nexport var actionFailure = 'actionFailure';\n","import { isNullOrUndefined, removeClass } from '@syncfusion/ej2-base';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { parentsUntil, getObject } from '@syncfusion/ej2-grids';\nimport * as events from '../base/constant';\nimport { getParentData, isRemoteData, isCheckboxcolumn, findChildrenRecords } from '../utils';\n/**\n * TreeGrid Selection module\n *\n * @hidden\n */\nvar Selection = /** @class */ (function () {\n    /**\n     * Constructor for Selection module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Selection(parent) {\n        this.parent = parent;\n        this.selectedItems = [];\n        this.selectedIndexes = [];\n        this.filteredList = [];\n        this.searchingRecords = [];\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Selection module name\n     */\n    Selection.prototype.getModuleName = function () {\n        return 'selection';\n    };\n    Selection.prototype.addEventListener = function () {\n        this.parent.on('dataBoundArg', this.headerCheckbox, this);\n        this.parent.on('columnCheckbox', this.columnCheckbox, this);\n        this.parent.on('updateGridActions', this.updateGridActions, this);\n        this.parent.grid.on('colgroup-refresh', this.headerCheckbox, this);\n        this.parent.on('checkboxSelection', this.checkboxSelection, this);\n    };\n    Selection.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('dataBoundArg', this.headerCheckbox);\n        this.parent.off('columnCheckbox', this.columnCheckbox);\n        this.parent.grid.off('colgroup-refresh', this.headerCheckbox);\n        this.parent.off('checkboxSelection', this.checkboxSelection);\n        this.parent.off('updateGridActions', this.updateGridActions);\n    };\n    /**\n     * To destroy the Selection\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Selection.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    Selection.prototype.checkboxSelection = function (args) {\n        var _a;\n        var target = getObject('target', args);\n        var checkWrap = parentsUntil(target, 'e-checkbox-wrapper');\n        var checkBox;\n        if (checkWrap && checkWrap.querySelectorAll('.e-treecheckselect').length > 0) {\n            checkBox = checkWrap.querySelector('input[type=\"checkbox\"]');\n            var rowIndex = [];\n            rowIndex.push(target.closest('tr').rowIndex);\n            this.selectCheckboxes(rowIndex);\n            this.triggerChkChangeEvent(checkBox, checkBox.nextElementSibling.classList.contains('e-check'), target.closest('tr'));\n        }\n        else if (checkWrap && checkWrap.querySelectorAll('.e-treeselectall').length > 0 && this.parent.autoCheckHierarchy) {\n            var checkBoxvalue = !checkWrap.querySelector('.e-frame').classList.contains('e-check')\n                && !checkWrap.querySelector('.e-frame').classList.contains('e-stop');\n            this.headerSelection(checkBoxvalue);\n            checkBox = checkWrap.querySelector('input[type=\"checkbox\"]');\n            this.triggerChkChangeEvent(checkBox, checkBoxvalue, target.closest('tr'));\n        }\n        if (!isNullOrUndefined(this.parent['parentQuery']) && this.parent.selectionSettings.persistSelection\n            && this.parent['columnModel'].filter(function (col) { return col.type === 'checkbox'; }).length > 0\n            && isRemoteData(this.parent)) {\n            if (this.parent['parentQuery'].length > 0) {\n                (_a = this.parent.query.queries).push.apply(_a, this.parent['parentQuery']);\n                this.parent['parentQuery'] = [];\n            }\n        }\n    };\n    Selection.prototype.triggerChkChangeEvent = function (checkBox, checkState, rowElement) {\n        var data = this.parent.getCurrentViewRecords()[rowElement.rowIndex];\n        var args = { checked: checkState, target: checkBox, rowElement: rowElement,\n            rowData: checkBox.classList.contains('e-treeselectall')\n                ? this.parent.getCheckedRecords() : data };\n        this.parent.trigger(events.checkboxChange, args);\n    };\n    Selection.prototype.getCheckboxcolumnIndex = function () {\n        var mappingUid;\n        var columnIndex;\n        var stackedHeader = 'stackedHeader';\n        var columnModel = 'columnModel';\n        var columns = this.parent[\"\" + stackedHeader] ? this.parent[\"\" + columnModel] : (this.parent.columns);\n        for (var col = 0; col < columns.length; col++) {\n            if (columns[parseInt(col.toString(), 10)].showCheckbox) {\n                mappingUid = columns[parseInt(col.toString(), 10)].uid;\n            }\n        }\n        var headerCelllength = this.parent.getHeaderContent().querySelectorAll('.e-headercelldiv').length;\n        for (var j = 0; j < headerCelllength; j++) {\n            var headercell = this.parent.getHeaderContent().querySelectorAll('.e-headercelldiv')[parseInt(j.toString(), 10)];\n            if (headercell.getAttribute('e-mappinguid') === mappingUid) {\n                columnIndex = j;\n            }\n        }\n        return columnIndex;\n    };\n    Selection.prototype.headerCheckbox = function () {\n        this.columnIndex = this.getCheckboxcolumnIndex();\n        if (this.columnIndex > -1 && this.parent.getHeaderContent().querySelectorAll('.e-treeselectall').length === 0) {\n            var headerElement = this.parent.getHeaderContent().querySelectorAll('.e-headercelldiv')[this.columnIndex];\n            var value = false;\n            var rowChkBox = this.parent.createElement('input', { className: 'e-treeselectall', attrs: { 'type': 'checkbox' } });\n            var checkWrap = createCheckBox(this.parent.createElement, false, { checked: value, label: ' ' });\n            checkWrap.classList.add('e-hierarchycheckbox');\n            checkWrap.insertBefore(rowChkBox.cloneNode(), checkWrap.firstChild);\n            if (!isNullOrUndefined(headerElement)) {\n                headerElement.insertBefore(checkWrap, headerElement.firstChild);\n            }\n            if (this.parent.autoCheckHierarchy) {\n                this.headerSelection();\n            }\n        }\n        else if (this.columnIndex > -1 && this.parent.getHeaderContent().querySelectorAll('.e-treeselectall').length > 0) {\n            var checkWrap = this.parent.getHeaderContent().querySelectorAll('.e-checkbox-wrapper')[0];\n            var checkBoxvalue = checkWrap.querySelector('.e-frame').classList.contains('e-check');\n            if (this.parent.autoCheckHierarchy && checkBoxvalue) {\n                this.headerSelection(checkBoxvalue);\n            }\n        }\n    };\n    Selection.prototype.renderColumnCheckbox = function (args) {\n        var rowChkBox = this.parent.createElement('input', { className: 'e-treecheckselect', attrs: { 'type': 'checkbox', 'aria-label': 'checkbox' } });\n        var data = args.data;\n        args.cell.classList.add('e-treegridcheckbox');\n        args.cell.setAttribute('aria-label', 'checkbox');\n        var value = (isNullOrUndefined(data.checkboxState) || data.checkboxState === 'uncheck') ? false : true;\n        var checkWrap = createCheckBox(this.parent.createElement, false, { checked: value, label: ' ' });\n        checkWrap.classList.add('e-hierarchycheckbox');\n        if (this.parent.allowTextWrap) {\n            checkWrap.querySelector('.e-frame').style.width = '18px';\n        }\n        if (data.checkboxState === 'indeterminate') {\n            var checkbox = checkWrap.querySelectorAll('.e-frame')[0];\n            removeClass([checkbox], ['e-check', 'e-stop', 'e-uncheck']);\n            checkWrap.querySelector('.e-frame').classList.add('e-stop');\n        }\n        checkWrap.insertBefore(rowChkBox.cloneNode(), checkWrap.firstChild);\n        return checkWrap;\n    };\n    Selection.prototype.columnCheckbox = function (container) {\n        var checkWrap = this.renderColumnCheckbox(container);\n        var containerELe = container.cell.querySelector('.e-treecolumn-container');\n        if (!isNullOrUndefined(containerELe)) {\n            if (!container.cell.querySelector('.e-hierarchycheckbox')) {\n                containerELe.insertBefore(checkWrap, containerELe.querySelectorAll('.e-treecell')[0]);\n            }\n        }\n        else {\n            var spanEle = this.parent.createElement('span', { className: 'e-treecheckbox' });\n            var data = container.cell.innerHTML;\n            container.cell.innerHTML = '';\n            spanEle.innerHTML = data;\n            var divEle = this.parent.createElement('div', { className: 'e-treecheckbox-container' });\n            divEle.appendChild(checkWrap);\n            divEle.appendChild(spanEle);\n            container.cell.appendChild(divEle);\n        }\n    };\n    Selection.prototype.selectCheckboxes = function (rowIndexes) {\n        if (isNullOrUndefined(rowIndexes)) {\n            var error = 'The provided value for the rowIndexes is undefined. Please ensure the rowIndexes contains number.';\n            this.parent.trigger(events.actionFailure, { error: error });\n        }\n        for (var i = 0; i < rowIndexes.length; i++) {\n            var record = this.parent.getCurrentViewRecords()[rowIndexes[parseInt(i.toString(), 10)]];\n            var flatRecord = getParentData(this.parent, record.uniqueID);\n            record = flatRecord;\n            var checkboxState = (record.checkboxState === 'uncheck') ? 'check' : 'uncheck';\n            record.checkboxState = checkboxState;\n            var keys = Object.keys(record);\n            for (var j = 0; j < keys.length; j++) {\n                if (Object.prototype.hasOwnProperty.call(flatRecord, keys[parseInt(j.toString(), 10)])) {\n                    flatRecord[keys[parseInt(j.toString(), 10)]] = record[keys[parseInt(j.toString(), 10)]];\n                }\n            }\n            this.traverSelection(record, checkboxState, false);\n            if (this.parent.autoCheckHierarchy) {\n                this.headerSelection();\n            }\n        }\n    };\n    Selection.prototype.traverSelection = function (record, checkboxState, ischildItem) {\n        var length = 0;\n        this.updateSelectedItems(record, checkboxState);\n        if (!ischildItem && record.parentItem && this.parent.autoCheckHierarchy) {\n            this.updateParentSelection(record.parentItem);\n        }\n        if (record.childRecords && this.parent.autoCheckHierarchy) {\n            var childRecords = record.childRecords;\n            if (!isNullOrUndefined(this.parent.filterModule) &&\n                this.parent.filterModule.filteredResult.length > 0 && this.parent.autoCheckHierarchy) {\n                childRecords = this.getFilteredChildRecords(childRecords);\n            }\n            length = childRecords.length;\n            for (var count = 0; count < length; count++) {\n                if (!childRecords[parseInt(count.toString(), 10)].isSummaryRow) {\n                    if (childRecords[parseInt(count.toString(), 10)].hasChildRecords) {\n                        this.traverSelection(childRecords[parseInt(count.toString(), 10)], checkboxState, true);\n                    }\n                    else {\n                        this.updateSelectedItems(childRecords[parseInt(count.toString(), 10)], checkboxState);\n                    }\n                }\n            }\n        }\n    };\n    Selection.prototype.getFilteredChildRecords = function (childRecords) {\n        var _this = this;\n        var filteredChildRecords = childRecords.filter(function (e) {\n            return _this.parent.filterModule.filteredResult.indexOf(e) > -1;\n        });\n        return filteredChildRecords;\n    };\n    Selection.prototype.updateParentSelection = function (parentRecord) {\n        var length = 0;\n        var childRecords = [];\n        var record = getParentData(this.parent, parentRecord.uniqueID);\n        if (record && record.childRecords) {\n            childRecords = record.childRecords;\n        }\n        if (!isNullOrUndefined(this.parent.filterModule) &&\n            this.parent.filterModule.filteredResult.length > 0 && this.parent.autoCheckHierarchy) {\n            childRecords = this.getFilteredChildRecords(childRecords);\n        }\n        length = childRecords && childRecords.length;\n        var indeter = 0;\n        var checkChildRecords = 0;\n        if (!isNullOrUndefined(record)) {\n            for (var i = 0; i < childRecords.length; i++) {\n                var currentRecord = getParentData(this.parent, childRecords[parseInt(i.toString(), 10)].uniqueID);\n                var checkBoxRecord = currentRecord;\n                if (!isNullOrUndefined(checkBoxRecord)) {\n                    if (checkBoxRecord.checkboxState === 'indeterminate') {\n                        indeter++;\n                    }\n                    else if (checkBoxRecord.checkboxState === 'check') {\n                        checkChildRecords++;\n                    }\n                }\n            }\n            if (indeter > 0 || (checkChildRecords > 0 && checkChildRecords !== length)) {\n                record.checkboxState = 'indeterminate';\n            }\n            else if (checkChildRecords === 0 && (!record.hasFilteredChildRecords || isNullOrUndefined(record.hasFilteredChildRecords)) && !isNullOrUndefined(this.parent['dataResults']['actionArgs']) &&\n                (this.parent['dataResults']['actionArgs'].requestType === 'searching' || this.parent['dataResults']['actionArgs'].requestType === 'filtering') && record.checkboxState === 'check') {\n                record.checkboxState = 'check';\n            }\n            else if ((checkChildRecords === 0 && indeter === 0) || (checkChildRecords === 0 && record.hasFilteredChildRecords && !isNullOrUndefined(this.parent['dataResults']['actionArgs']) &&\n                (this.parent['dataResults']['actionArgs'].requestType === 'searching' || this.parent['dataResults']['actionArgs'].requestType === 'filtering') && record.checkboxState === 'check')) {\n                record.checkboxState = 'uncheck';\n            }\n            else {\n                record.checkboxState = 'check';\n            }\n            this.updateSelectedItems(record, record.checkboxState);\n            if (record.parentItem) {\n                this.updateParentSelection(record.parentItem);\n            }\n        }\n    };\n    Selection.prototype.headerSelection = function (checkAll) {\n        var _this = this;\n        var index = -1;\n        var length = 0;\n        //This property used to maintain the check state of the currentview data after clear filtering\n        var multiFilterCheckState = false;\n        if (!isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length > 0) {\n            var filterResult = this.parent.filterModule.filteredResult;\n            if (this.filteredList.length === 0) {\n                this.filteredList = filterResult;\n            }\n            if (this.parent.grid.searchSettings.key.length) {\n                this.searchingRecords = filterResult;\n            }\n            else {\n                if (this.filteredList !== filterResult) {\n                    this.filteredList = filterResult;\n                    multiFilterCheckState = true;\n                }\n                else {\n                    multiFilterCheckState = false;\n                }\n            }\n        }\n        if (this.filteredList.length > 0) {\n            if (!this.parent.filterSettings.columns.length && this.filteredList.length && !this.parent.grid.searchSettings.key.length) {\n                this.filteredList = [];\n            }\n            if (this.searchingRecords.length && !isNullOrUndefined(checkAll)) {\n                this.filteredList = this.searchingRecords;\n            }\n        }\n        var data;\n        if (!(isNullOrUndefined(this.parent.filterModule)) &&\n            this.parent.filterModule.filteredResult.length === 0 && this.parent.getCurrentViewRecords().length === 0 &&\n            this.parent.filterSettings.columns.length > 0) {\n            data = this.filteredList;\n        }\n        else {\n            data = (!isNullOrUndefined(this.parent.filterModule) &&\n                (this.filteredList.length > 0)) ? this.filteredList : this.parent.flatData;\n        }\n        data = isRemoteData(this.parent) ? this.parent.getCurrentViewRecords() : data;\n        if (!isNullOrUndefined(checkAll)) {\n            for (var i = 0; i < data.length; i++) {\n                if (checkAll) {\n                    if (data[parseInt(i.toString(), 10)].checkboxState === 'check') {\n                        continue;\n                    }\n                    if (multiFilterCheckState) {\n                        continue;\n                    }\n                    data[parseInt(i.toString(), 10)].checkboxState = 'check';\n                    this.updateSelectedItems(data[parseInt(i.toString(), 10)], data[parseInt(i.toString(), 10)].checkboxState);\n                }\n                else {\n                    index = this.selectedItems.indexOf(data[parseInt(i.toString(), 10)]);\n                    if (index > -1) {\n                        data[parseInt(i.toString(), 10)].checkboxState = 'uncheck';\n                        this.updateSelectedItems(data[parseInt(i.toString(), 10)], data[parseInt(i.toString(), 10)].checkboxState);\n                        if (this.parent.autoCheckHierarchy) {\n                            this.updateParentSelection(data[parseInt(i.toString(), 10)]);\n                        }\n                    }\n                }\n            }\n        }\n        if (checkAll === false && this.parent.enableVirtualization) {\n            this.selectedItems = [];\n            this.selectedIndexes = [];\n            data.filter(function (rec) {\n                rec.checkboxState = 'uncheck';\n                _this.updateSelectedItems(rec, rec.checkboxState);\n            });\n        }\n        length = this.selectedItems.length;\n        var checkbox = this.parent.getHeaderContent().querySelectorAll('.e-frame')[0];\n        if (length > 0 && data.length > 0) {\n            if (length !== data.length && !checkAll) {\n                removeClass([checkbox], ['e-check']);\n                checkbox.classList.add('e-stop');\n            }\n            else {\n                removeClass([checkbox], ['e-stop']);\n                checkbox.classList.add('e-check');\n            }\n        }\n        else {\n            removeClass([checkbox], ['e-check', 'e-stop']);\n        }\n    };\n    Selection.prototype.updateSelectedItems = function (currentRecord, checkState) {\n        var record = this.parent.grid.currentViewData.filter(function (e) {\n            return e.uniqueID === currentRecord.uniqueID;\n        });\n        var checkedRecord;\n        var recordIndex = this.parent.grid.currentViewData.indexOf(record[0]);\n        var checkboxRecord = getParentData(this.parent, currentRecord.uniqueID);\n        var tr = this.parent.getRows()[parseInt(recordIndex.toString(), 10)];\n        var checkbox;\n        if (recordIndex > -1) {\n            var movableTr = void 0;\n            if (this.parent.frozenRows || this.parent.getFrozenColumns()) {\n                movableTr = this.parent.getDataRows()[parseInt(recordIndex.toString(), 10)];\n            }\n            checkbox = tr.querySelectorAll('.e-hierarchycheckbox .e-frame')[0] ? tr.querySelectorAll('.e-hierarchycheckbox .e-frame')[0]\n                : movableTr.querySelectorAll('.e-hierarchycheckbox .e-frame')[0];\n            if (!isNullOrUndefined(checkbox)) {\n                removeClass([checkbox], ['e-check', 'e-stop', 'e-uncheck']);\n            }\n        }\n        checkedRecord = checkboxRecord;\n        if (isNullOrUndefined(checkedRecord)) {\n            checkedRecord = currentRecord;\n        }\n        checkedRecord.checkboxState = checkState;\n        if (checkState === 'check' && isNullOrUndefined(currentRecord.isSummaryRow)) {\n            if (recordIndex !== -1 && this.selectedIndexes.indexOf(recordIndex) === -1) {\n                this.selectedIndexes.push(recordIndex);\n            }\n            if (this.selectedItems.indexOf(checkedRecord) === -1 && (recordIndex !== -1 &&\n                (!isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length > 0))) {\n                this.selectedItems.push(checkedRecord);\n            }\n            if (this.selectedItems.indexOf(checkedRecord) === -1 && (this.parent.enableVirtualization || this.parent.allowPaging) && ((!isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length > 0))) {\n                this.selectedItems.push(checkedRecord);\n            }\n            if (this.selectedItems.indexOf(checkedRecord) === -1 && (!isNullOrUndefined(this.parent.filterModule) &&\n                this.parent.filterModule.filteredResult.length === 0)) {\n                this.selectedItems.push(checkedRecord);\n            }\n            if (this.selectedItems.indexOf(checkedRecord) === -1 && isNullOrUndefined(this.parent.filterModule)) {\n                this.selectedItems.push(checkedRecord);\n            }\n        }\n        else if ((checkState === 'uncheck' || checkState === 'indeterminate') && isNullOrUndefined(currentRecord.isSummaryRow)) {\n            var index = this.selectedItems.indexOf(checkedRecord);\n            if (index !== -1) {\n                this.selectedItems.splice(index, 1);\n            }\n            if (this.selectedIndexes.indexOf(recordIndex) !== -1) {\n                var checkedIndex = this.selectedIndexes.indexOf(recordIndex);\n                this.selectedIndexes.splice(checkedIndex, 1);\n            }\n        }\n        var checkBoxclass = checkState === 'indeterminate' ? 'e-stop' : 'e-' + checkState;\n        if (recordIndex > -1) {\n            if (!isNullOrUndefined(checkbox)) {\n                checkbox.classList.add(checkBoxclass);\n                tr.querySelector('.e-treecheckselect').setAttribute('aria-checked', checkState === 'check' ? 'true' : checkState === 'uncheck' ? 'false' : 'mixed');\n            }\n        }\n    };\n    Selection.prototype.updateGridActions = function (args) {\n        var _this = this;\n        var requestType = args.requestType;\n        var childData;\n        var childLength;\n        if (isCheckboxcolumn(this.parent)) {\n            if (this.parent.autoCheckHierarchy) {\n                if ((requestType === 'sorting' || requestType === 'paging')) {\n                    var rows = this.parent.grid.getRows();\n                    childData = this.parent.getCurrentViewRecords();\n                    childLength = childData.length;\n                    this.selectedIndexes = [];\n                    for (var i = 0; i < childLength; i++) {\n                        if (!rows[parseInt(i.toString(), 10)].classList.contains('e-summaryrow')) {\n                            this.updateSelectedItems(childData[parseInt(i.toString(), 10)], childData[parseInt(i.toString(), 10)].checkboxState);\n                        }\n                    }\n                }\n                else if (requestType === 'delete' || args.action === 'add') {\n                    var updatedData = [];\n                    if (requestType === 'delete') {\n                        updatedData = args.data;\n                    }\n                    else {\n                        updatedData.push(args.data);\n                    }\n                    for (var i = 0; i < updatedData.length; i++) {\n                        if (requestType === 'delete') {\n                            var index = this.parent.flatData.indexOf(updatedData[parseInt(i.toString(), 10)]);\n                            var checkedIndex = this.selectedIndexes.indexOf(index);\n                            this.selectedIndexes.splice(checkedIndex, 1);\n                            this.updateSelectedItems(updatedData[parseInt(i.toString(), 10)], 'uncheck');\n                        }\n                        if (!isNullOrUndefined(updatedData[parseInt(i.toString(), 10)].parentItem)) {\n                            this.updateParentSelection(updatedData[parseInt(i.toString(), 10)].parentItem);\n                        }\n                    }\n                }\n                else if (args.requestType === 'add' && this.parent.autoCheckHierarchy) {\n                    args.data.checkboxState = 'uncheck';\n                }\n                else if (requestType === 'filtering' || requestType === 'searching' || requestType === 'refresh'\n                    && !isRemoteData(this.parent)) {\n                    this.selectedItems = [];\n                    this.selectedIndexes = [];\n                    childData = (!isNullOrUndefined(this.parent.filterModule) && this.parent.filterModule.filteredResult.length > 0) ?\n                        this.parent.filterModule.filteredResult : this.parent.flatData;\n                    childData.forEach(function (record) {\n                        if (_this.parent.enableVirtualization) {\n                            if (record.hasChildRecords && record.childRecords.length > 0) {\n                                _this.updateParentSelection(record);\n                            }\n                            else {\n                                _this.updateSelectedItems(record, record.checkboxState);\n                            }\n                            var child = findChildrenRecords(record);\n                            child = _this.getFilteredChildRecords(child);\n                            for (var i = 0; i < child.length; i++) {\n                                if (child[parseInt(i.toString(), 10)].hasChildRecords) {\n                                    _this.updateParentSelection(child[parseInt(i.toString(), 10)]);\n                                }\n                                else if (!(child[parseInt(i.toString(), 10)].hasChildRecords) &&\n                                    !isNullOrUndefined(child[parseInt(i.toString(), 10)])) {\n                                    _this.updateSelectedItems(child[parseInt(i.toString(), 10)], child[parseInt(i.toString(), 10)].checkboxState);\n                                }\n                            }\n                        }\n                        else {\n                            if (record.hasChildRecords) {\n                                _this.updateParentSelection(record);\n                            }\n                            else {\n                                _this.updateSelectedItems(record, record.checkboxState);\n                            }\n                        }\n                    });\n                    this.headerSelection();\n                }\n            }\n        }\n    };\n    Selection.prototype.getCheckedrecords = function () {\n        return this.selectedItems;\n    };\n    Selection.prototype.getCheckedRowIndexes = function () {\n        return this.selectedIndexes;\n    };\n    return Selection;\n}());\nexport { Selection };\n","import * as events from '../base/constant';\nimport { Grid, getObject, Print as GridPrint } from '@syncfusion/ej2-grids';\nimport { addClass } from '@syncfusion/ej2-base';\n/**\n * TreeGrid Print module\n *\n * @hidden\n */\nvar Print = /** @class */ (function () {\n    /**\n     * Constructor for Print module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Print(parent) {\n        this.parent = parent;\n        Grid.Inject(GridPrint);\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Print module name\n     */\n    Print.prototype.getModuleName = function () {\n        return 'print';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Print.prototype.addEventListener = function () {\n        this.parent.grid.on(events.printGridInit, this.printTreeGrid, this);\n    };\n    Print.prototype.removeEventListener = function () {\n        this.parent.grid.off(events.printGridInit, this.printTreeGrid);\n    };\n    Print.prototype.printTreeGrid = function (printGrid) {\n        var grid = getObject('printgrid', printGrid);\n        var gridElement = getObject('element', printGrid);\n        grid.addEventListener(events.queryCellInfo, this.parent.grid.queryCellInfo);\n        grid.addEventListener(events.rowDataBound, this.parent.grid.rowDataBound);\n        grid.addEventListener(events.beforeDataBound, this.parent.grid.beforeDataBound);\n        addClass([gridElement], 'e-treegrid');\n    };\n    Print.prototype.print = function () {\n        this.parent.grid.print();\n    };\n    /**\n     * To destroy the Print\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Print.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return Print;\n}());\nexport { Print };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Configures the searching behavior of the TreeGrid.\n */\nvar SearchSettings = /** @class */ (function (_super) {\n    __extends(SearchSettings, _super);\n    function SearchSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], SearchSettings.prototype, \"fields\", void 0);\n    __decorate([\n        Property(false)\n    ], SearchSettings.prototype, \"ignoreCase\", void 0);\n    __decorate([\n        Property('contains')\n    ], SearchSettings.prototype, \"operator\", void 0);\n    __decorate([\n        Property()\n    ], SearchSettings.prototype, \"key\", void 0);\n    __decorate([\n        Property()\n    ], SearchSettings.prototype, \"hierarchyMode\", void 0);\n    return SearchSettings;\n}(ChildProperty));\nexport { SearchSettings };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Configures the selection behavior of the TreeGrid.\n */\nvar SelectionSettings = /** @class */ (function (_super) {\n    __extends(SelectionSettings, _super);\n    function SelectionSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('Row')\n    ], SelectionSettings.prototype, \"mode\", void 0);\n    __decorate([\n        Property('Flow')\n    ], SelectionSettings.prototype, \"cellSelectionMode\", void 0);\n    __decorate([\n        Property('Single')\n    ], SelectionSettings.prototype, \"type\", void 0);\n    __decorate([\n        Property(false)\n    ], SelectionSettings.prototype, \"persistSelection\", void 0);\n    __decorate([\n        Property('Default')\n    ], SelectionSettings.prototype, \"checkboxMode\", void 0);\n    __decorate([\n        Property(false)\n    ], SelectionSettings.prototype, \"checkboxOnly\", void 0);\n    __decorate([\n        Property(true)\n    ], SelectionSettings.prototype, \"enableToggle\", void 0);\n    return SelectionSettings;\n}(ChildProperty));\nexport { SelectionSettings };\n","import { getObject, appendChildren } from '@syncfusion/ej2-grids';\nimport { templateCompiler, extend, CellRenderer } from '@syncfusion/ej2-grids';\nimport { addClass, createElement, isNullOrUndefined, getValue } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { isRemoteData, isOffline, getExpandStatus, isFilterChildHierarchy } from '../utils';\n/**\n * TreeGrid render module\n *\n * @hidden\n */\nvar Render = /** @class */ (function () {\n    /**\n     * Constructor for render module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Render(parent) {\n        this.parent = parent;\n        this.templateResult = null;\n        this.parent.grid.on('template-result', this.columnTemplateResult, this);\n        this.parent.grid.on('reactTemplateRender', this.reactTemplateRender, this);\n    }\n    /**\n     * Updated row elements for TreeGrid\n     *\n     * @param {RowDataBoundEventArgs} args - Row details before its bound to DOM\n     * @returns {void}\n     */\n    Render.prototype.RowModifier = function (args) {\n        if (!args.data) {\n            return;\n        }\n        var data = args.data;\n        var parentData = data.parentItem;\n        if (!isNullOrUndefined(data.parentItem) && !isFilterChildHierarchy(this.parent) &&\n            (!(this.parent.allowPaging && !(this.parent.pageSettings.pageSizeMode === 'Root')) ||\n                (isRemoteData(this.parent) && !isOffline(this.parent)))) {\n            var collapsed = (this.parent.initialRender && (!(isNullOrUndefined(parentData[this.parent.expandStateMapping]) ||\n                parentData[this.parent.expandStateMapping]) || this.parent.enableCollapseAll)) ||\n                !getExpandStatus(this.parent, args.data, this.parent.grid.getCurrentViewRecords());\n            if (collapsed && !isNullOrUndefined(args.row)) {\n                this.parent['toggleRowVisibility'](args.row, 'e-childrow-hidden');\n                var rowsObj = this.parent.grid.getRowsObject();\n                if (!this.parent.grid.isFrozenGrid() && !isNullOrUndefined(args.row.getAttribute('data-uid'))) {\n                    rowsObj.filter(function (e) { return e.uid === args.row.getAttribute('data-uid'); })[0].visible = false;\n                }\n            }\n        }\n        if (isRemoteData(this.parent) && !isOffline(this.parent)) {\n            var proxy_1 = this.parent;\n            var parentrec = this.parent.getCurrentViewRecords().filter(function (rec) {\n                return getValue(proxy_1.idMapping, rec) === getValue(proxy_1.parentIdMapping, data);\n            });\n            if (parentrec.length > 0 && !parentrec[0].isSummaryRow && !isNullOrUndefined(args.row)) {\n                var display = parentrec[0].expanded ? 'e-childrow-visible' : 'e-childrow-hidden';\n                this.parent['toggleRowVisibility'](args.row, display);\n            }\n        }\n        //addClass([args.row], 'e-gridrowindex' + index + 'level' + (<ITreeData>args.data).level);\n        var summaryRow = getObject('isSummaryRow', args.data);\n        if (summaryRow) {\n            addClass([args.row], 'e-summaryrow');\n        }\n        if (!isNullOrUndefined(args.row)) {\n            if (args.row.querySelector('.e-treegridexpand')) {\n                args.row.setAttribute('aria-expanded', 'true');\n            }\n            else if (args.row.querySelector('.e-treegridcollapse')) {\n                args.row.setAttribute('aria-expanded', 'false');\n            }\n            if (this.parent.enableCollapseAll && this.parent.initialRender) {\n                if (!isNullOrUndefined(data.parentItem)) {\n                    this.parent['toggleRowVisibility'](args.row, 'e-childrow-hidden');\n                }\n            }\n        }\n        var dragStartData = 'dragStartData';\n        var draggedRecord = 'draggedRecord';\n        if (this.parent.rowDragAndDropModule && this.parent.grid.rowDragAndDropModule && (this.parent.grid.rowDragAndDropModule[\"\" + dragStartData] ||\n            this.parent.rowDragAndDropModule[\"\" + draggedRecord]) && this.parent.getContentTable().scrollHeight <= this.parent.getContent().clientHeight) {\n            var lastRowBorder = 'lastRowBorder';\n            var lastVisualData = this.parent.getVisibleRecords()[this.parent.getVisibleRecords().length - 1];\n            if (lastVisualData.uniqueID === args.data.uniqueID && !isNullOrUndefined(args.row) && !args.row.cells[0].classList.contains('e-lastrowcell')) {\n                this.parent[\"\" + lastRowBorder](args.row, true);\n            }\n        }\n        if (this.parent.isReact) {\n            var renderReactTemplates = 'renderReactTemplates';\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            var thisRef_1 = this;\n            // tslint:disable-next-line:typedef\n            thisRef_1.parent[\"\" + renderReactTemplates](function () {\n                thisRef_1.parent.trigger(events.rowDataBound, args);\n            });\n        }\n        else {\n            this.parent.trigger(events.rowDataBound, args);\n        }\n    };\n    /**\n     * cell renderer for tree column index cell\n     *\n     * @param {QueryCellInfoEventArgs} args - Cell detail before its bound to DOM\n     * @returns {void}\n     */\n    Render.prototype.cellRender = function (args) {\n        if (!args.data) {\n            return;\n        }\n        var grid = this.parent.grid;\n        var data = args.data;\n        var index;\n        var ispadfilter = isNullOrUndefined(data.filterLevel);\n        var pad = ispadfilter ? data.level : data.filterLevel;\n        var totalIconsWidth = 0;\n        var cellElement;\n        var column = this.parent.getColumnByUid(args.column.uid);\n        var summaryRow = data.isSummaryRow;\n        var frozenColumns = this.parent.getFrozenColumns();\n        if (!isNullOrUndefined(data.parentItem)) {\n            index = data.parentItem.index;\n        }\n        else {\n            index = data.index;\n        }\n        var columnIndex;\n        var getVirtualColIndexByUid = 'getVirtualColIndexByUid';\n        if (this.parent.enableColumnVirtualization && !this.parent.initialRender) {\n            columnIndex = this.parent[\"\" + getVirtualColIndexByUid](args.column.uid);\n        }\n        else {\n            columnIndex = grid.getColumnIndexByUid(args.column.uid);\n        }\n        if (columnIndex === this.parent.treeColumnIndex && (args.requestType === 'add' || args.requestType\n            === 'rowDragAndDrop' || args.requestType === 'delete' || isNullOrUndefined(args.cell.querySelector('.e-treecell')))) {\n            var container = createElement('div', { className: 'e-treecolumn-container' });\n            var emptyExpandIcon = createElement('span', { className: 'e-icons e-none' });\n            emptyExpandIcon.style.width = '10px';\n            emptyExpandIcon.style.display = 'inline-block';\n            for (var n = 0; n < pad; n++) {\n                totalIconsWidth += 10;\n                container.appendChild(emptyExpandIcon.cloneNode());\n            }\n            var iconRequired = !isNullOrUndefined(data.hasFilteredChildRecords)\n                ? data.hasFilteredChildRecords : data.hasChildRecords;\n            if (iconRequired && !isNullOrUndefined(data.childRecords)) {\n                if (this.parent['isFromGantt'] && this.parent.loadChildOnDemand) {\n                    iconRequired = data.hasChildRecords;\n                }\n                else {\n                    iconRequired = !(data.childRecords.length === 0);\n                }\n            }\n            if (iconRequired) {\n                addClass([args.cell], 'e-treerowcell');\n                args.cell.setAttribute('aria-expanded', data.expanded ? 'true' : 'false');\n                var expandIcon = createElement('span', { className: 'e-icons' });\n                var expand = void 0;\n                if (this.parent.initialRender) {\n                    expand = data.expanded &&\n                        (isNullOrUndefined(data[this.parent.expandStateMapping]) || data[this.parent.expandStateMapping]) &&\n                        !this.parent.enableCollapseAll;\n                }\n                else {\n                    expand = !(!data.expanded || !getExpandStatus(this.parent, data, this.parent.grid.getCurrentViewRecords()));\n                }\n                addClass([expandIcon], (expand) ? 'e-treegridexpand' : 'e-treegridcollapse');\n                totalIconsWidth += 18;\n                container.appendChild(expandIcon);\n                emptyExpandIcon.style.width = '4px';\n                totalIconsWidth += 7;\n                container.appendChild(emptyExpandIcon.cloneNode());\n            }\n            else if (pad || !pad && !data.level) {\n                // icons width\n                totalIconsWidth += 20;\n                container.appendChild(emptyExpandIcon.cloneNode());\n                container.appendChild(emptyExpandIcon.cloneNode());\n            }\n            //should add below code when paging funcitonality implemented\n            // if (data.hasChildRecords) {\n            //     addClass([expandIcon], data.expanded ? 'e-treegridexpand' : 'e-treegridcollapse');\n            // }\n            cellElement = createElement('span', { className: 'e-treecell' });\n            if (this.parent.allowTextWrap) {\n                cellElement.style.width = 'Calc(100% - ' + totalIconsWidth + 'px)';\n            }\n            addClass([args.cell], 'e-gridrowindex' + index + 'level' + data.level);\n            this.updateTreeCell(args, cellElement);\n            container.appendChild(cellElement);\n            args.cell.appendChild(container);\n        }\n        else if (this.templateResult) {\n            this.templateResult = null;\n        }\n        var freeze = (grid.getFrozenLeftColumnsCount() > 0 || grid.getFrozenRightColumnsCount() > 0) ? true : false;\n        if (!freeze) {\n            if (frozenColumns > this.parent.treeColumnIndex && frozenColumns > 0 &&\n                grid.getColumnIndexByUid(args.column.uid) === frozenColumns) {\n                addClass([args.cell], 'e-gridrowindex' + index + 'level' + data.level);\n            }\n            else if (frozenColumns < this.parent.treeColumnIndex && frozenColumns > 0 &&\n                (grid.getColumnIndexByUid(args.column.uid) === frozenColumns\n                    || grid.getColumnIndexByUid(args.column.uid) === frozenColumns - 1)) {\n                addClass([args.cell], 'e-gridrowindex' + index + 'level' + data.level);\n            }\n            else if (frozenColumns === this.parent.treeColumnIndex && frozenColumns > 0 &&\n                grid.getColumnIndexByUid(args.column.uid) === this.parent.treeColumnIndex - 1) {\n                addClass([args.cell], 'e-gridrowindex' + index + 'level' + data.level);\n            }\n        }\n        else {\n            var freezerightColumns = grid.getFrozenRightColumns();\n            var freezeLeftColumns = grid.getFrozenLeftColumns();\n            var movableColumns = grid.getMovableColumns();\n            if ((freezerightColumns.length > 0) && freezerightColumns[0].field === args.column.field) {\n                addClass([args.cell], 'e-gridrowindex' + index + 'level' + data.level);\n            }\n            else if ((freezeLeftColumns.length > 0) && freezeLeftColumns[0].field === args.column.field) {\n                addClass([args.cell], 'e-gridrowindex' + index + 'level' + data.level);\n            }\n            else if ((movableColumns.length > 0) && movableColumns[0].field === args.column.field) {\n                addClass([args.cell], 'e-gridrowindex' + index + 'level' + data.level);\n            }\n        }\n        if (!isNullOrUndefined(column) && column.showCheckbox) {\n            this.parent.notify('columnCheckbox', args);\n            if (this.parent.allowTextWrap) {\n                var checkboxElement = args.cell.querySelectorAll('.e-frame')[0];\n                var width = parseInt(checkboxElement.style.width, 16);\n                totalIconsWidth += width;\n                totalIconsWidth += 10;\n                if (grid.getColumnIndexByUid(args.column.uid) === this.parent.treeColumnIndex) {\n                    cellElement = args.cell.querySelector('.e-treecell');\n                }\n                else {\n                    cellElement = args.cell.querySelector('.e-treecheckbox');\n                }\n                cellElement.style.width = 'Calc(100% - ' + totalIconsWidth + 'px)';\n            }\n        }\n        if (summaryRow) {\n            addClass([args.cell], 'e-summarycell');\n            var summaryData = getObject(args.column.field, args.data);\n            summaryData = isNullOrUndefined(summaryData) ? null : summaryData;\n            if (args.cell.querySelector('.e-treecell') != null) {\n                args.cell.querySelector('.e-treecell').innerHTML = summaryData;\n            }\n            else {\n                if (args.column.template) {\n                    args.cell.innerHTML = null;\n                }\n                else {\n                    args.cell.innerHTML = summaryData;\n                }\n            }\n        }\n        this.parent['args'] = args;\n        var columnModel = getValue('columnModel', this.parent);\n        var treeColumn = columnModel[this.parent.treeColumnIndex];\n        if ((isNullOrUndefined(this.parent.rowTemplate) && !(this.parent.isReact))\n            || ((this.parent.isReact) &&\n                !args.column['template'])) {\n            this.parent.trigger(events.queryCellInfo, args);\n        }\n        else if (((this.parent.isReact) &&\n            treeColumn.field !== args.column.field)) {\n            var renderReactTemplates = 'renderReactTemplates';\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            var thisRef_2 = this;\n            // tslint:disable-next-line:typedef\n            thisRef_2.parent[\"\" + renderReactTemplates](function () {\n                thisRef_2.parent.trigger(events.queryCellInfo, args);\n            });\n        }\n    };\n    Render.prototype.updateTreeCell = function (args, cellElement) {\n        var columnModel = getValue('columnModel', this.parent);\n        var treeColumn = columnModel[this.parent.treeColumnIndex];\n        var templateFn = 'templateFn';\n        var colindex = args.column.index;\n        if (isNullOrUndefined(treeColumn.field)) {\n            args.cell.setAttribute('aria-colindex', (colindex + 1) + '');\n        }\n        if (treeColumn.field === args.column.field && !isNullOrUndefined(treeColumn.template)) {\n            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n            args.column.template = treeColumn.template;\n            args.column[\"\" + templateFn] = templateCompiler(args.column.template);\n            args.cell.classList.add('e-templatecell');\n        }\n        var textContent = args.cell.querySelector('.e-treecell') != null ?\n            args.cell.querySelector('.e-treecell').innerHTML : args.cell.innerHTML;\n        if (typeof (args.column.template) === 'object' && this.templateResult) {\n            appendChildren(cellElement, this.templateResult);\n            this.templateResult = null;\n            args.cell.innerHTML = '';\n        }\n        else if (args.cell.classList.contains('e-templatecell')) {\n            var len = args.cell.children.length;\n            var tempID = this.parent.element.id + args.column.uid;\n            if (treeColumn.field === args.column.field && !isNullOrUndefined(treeColumn.template)) {\n                var portals = 'portals';\n                var renderReactTemplates = 'renderReactTemplates';\n                if (this.parent.isReact && typeof (args.column.template) !== 'string') {\n                    args.column[\"\" + templateFn](args.data, this.parent, 'columnTemplate', tempID, null, null, cellElement);\n                    if (isNullOrUndefined(this.parent.grid[\"\" + portals])) {\n                        this.parent.grid[\"\" + portals] = this.parent[\"\" + portals];\n                    }\n                    this.parent.notify('renderReactTemplate', this.parent[\"\" + portals]);\n                    // eslint-disable-next-line @typescript-eslint/no-this-alias\n                    var thisRef_3 = this;\n                    // tslint:disable-next-line:typedef\n                    thisRef_3.parent[\"\" + renderReactTemplates](function () {\n                        thisRef_3.parent.trigger(events.queryCellInfo, args);\n                    });\n                }\n                else {\n                    var str = 'isStringTemplate';\n                    var result = args.column[\"\" + templateFn](extend({ 'index': '' }, args.data), this.parent, 'template', tempID, this.parent[\"\" + str]);\n                    appendChildren(cellElement, result);\n                }\n                delete args.column.template;\n                delete args.column[\"\" + templateFn];\n                args.cell.innerHTML = '';\n            }\n            else {\n                for (var i = 0; i < len; len = args.cell.children.length) {\n                    cellElement.appendChild(args.cell.children[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n        else {\n            cellElement.innerHTML = textContent;\n            args.cell.innerHTML = '';\n        }\n    };\n    /**\n     * @param {string} columnUid - Defines column uid\n     * @returns {void}\n     * @hidden\n     */\n    Render.prototype.refreshReactColumnTemplateByUid = function (columnUid) {\n        var _this = this;\n        if (this.parent.isReact) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.parent.clearTemplate(['columnTemplate'], undefined, function () {\n                var cells = 'cells';\n                var rowIdx = 'index';\n                var rowsObj = _this.parent.grid.getRowsObject();\n                var rows = _this.parent.getDataRows();\n                var indent = _this.parent.grid.getIndentCount();\n                var cellIndex = _this.parent.grid.getNormalizedColumnIndex(columnUid);\n                if (rows.length !== 0) {\n                    for (var j = 0; j < rowsObj.length; j++) {\n                        if (rowsObj[parseInt(j.toString(), 10)].isDataRow\n                            && !isNullOrUndefined(rowsObj[parseInt(j.toString(), 10)].index)) {\n                            var cell = rowsObj[parseInt(j.toString(), 10)][\"\" + cells][parseInt(cellIndex.toString(), 10)];\n                            var cellRenderer = new CellRenderer(_this.parent.grid, _this.parent.grid.serviceLocator);\n                            var td = rows.length >= rowsObj.length\n                                ? _this.parent.getCellFromIndex(rowsObj[parseInt(j.toString(), 10)].index, cellIndex - indent)\n                                : rows[rowsObj[parseInt(j.toString(), 10)].index].querySelector('.e-templatecell');\n                            cellRenderer.refreshTD(td, cell, rowsObj[parseInt(j.toString(), 10)].data, { index: rowsObj[parseInt(j.toString(), 10)][\"\" + rowIdx] });\n                            var treecell = _this.parent.getRows()[parseInt(j.toString(), 10)]\n                                .cells[parseInt(cellIndex.toString(), 10)];\n                            _this.cellRender({ data: rowsObj[parseInt(j.toString(), 10)].data, cell: treecell, column: cell.column });\n                        }\n                    }\n                }\n            });\n        }\n    };\n    Render.prototype.columnTemplateResult = function (args) {\n        this.templateResult = args.template;\n    };\n    // eslint-disable-next-line\n    Render.prototype.reactTemplateRender = function (args, callBack) {\n        var renderReactTemplates = 'renderReactTemplates';\n        var portals = 'portals';\n        this.parent[\"\" + portals] = args;\n        this.parent.notify('renderReactTemplate', this.parent[\"\" + portals]);\n        this.parent[\"\" + renderReactTemplates](callBack);\n    };\n    Render.prototype.destroy = function () {\n        this.parent.grid.off('template-result', this.columnTemplateResult);\n        this.parent.grid.off('reactTemplateRender', this.reactTemplateRender);\n    };\n    return Render;\n}());\nexport { Render };\n","import { extend, isNullOrUndefined, setValue, getValue, addClass, removeClass } from '@syncfusion/ej2-base';\nimport { DataManager, Query, DataUtil } from '@syncfusion/ej2-data';\nimport { showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nimport { getObject, getUid } from '@syncfusion/ej2-grids';\nimport { isRemoteData, isOffline, isCountRequired, getExpandStatus } from '../utils';\nimport * as events from './constant';\n/**\n * Internal dataoperations for tree grid\n *\n * @hidden\n */\nvar DataManipulation = /** @class */ (function () {\n    function DataManipulation(grid) {\n        this.addedRecords = 'addedRecords';\n        this.parent = grid;\n        this.parentItems = [];\n        this.taskIds = [];\n        this.hierarchyData = [];\n        this.storedIndex = -1;\n        this.sortedData = [];\n        this.isSortAction = false;\n        this.addEventListener();\n        this.dataResults = {};\n        this.isSelfReference = !isNullOrUndefined(this.parent.parentIdMapping);\n    }\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    DataManipulation.prototype.addEventListener = function () {\n        this.parent.on('updateRemoteLevel', this.updateParentRemoteData, this);\n        this.parent.grid.on('sorting-begin', this.beginSorting, this);\n        this.parent.on('updateAction', this.updateData, this);\n        this.parent.on(events.remoteExpand, this.collectExpandingRecs, this);\n        this.parent.on('dataProcessor', this.dataProcessor, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    DataManipulation.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.remoteExpand, this.collectExpandingRecs);\n        this.parent.off('updateRemoteLevel', this.updateParentRemoteData);\n        this.parent.off('updateAction', this.updateData);\n        this.parent.off('dataProcessor', this.dataProcessor);\n        this.parent.grid.off('sorting-begin', this.beginSorting);\n    };\n    /**\n     * To destroy the dataModule\n     *\n     * @returns {void}\n     * @hidden\n     */\n    DataManipulation.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @hidden\n     * @returns {boolean} -Returns whether remote data binding\n     */\n    DataManipulation.prototype.isRemote = function () {\n        if (!(this.parent.dataSource instanceof DataManager)) {\n            return false;\n        }\n        return true;\n        // let gridData:  DataManager = <DataManager>this.parent.dataSource;\n        // return gridData.dataSource.offline !== true && gridData.dataSource.url !== undefined;\n    };\n    /**\n     * Function to manipulate datasource\n     *\n     * @param {Object} data - Provide tree grid datasource to convert to flat data\n     * @hidden\n     * @returns {void}\n     */\n    DataManipulation.prototype.convertToFlatData = function (data) {\n        var _this = this;\n        this.parent.flatData = (!isNullOrUndefined(data) && Object.keys(data).length === 0\n            && !(this.parent.dataSource instanceof DataManager) ?\n            this.parent.dataSource : []);\n        this.parent.parentData = [];\n        if ((isRemoteData(this.parent) && !isOffline(this.parent)) && data instanceof DataManager && !(data instanceof Array)) {\n            var dm = this.parent.dataSource;\n            if (this.parent.parentIdMapping) {\n                this.parent.query = isNullOrUndefined(this.parent.query) ?\n                    new Query() : this.parent.query;\n                if (this.parent.parentIdMapping) {\n                    var filterKey = this.parent.query.params.filter(function (param) { return param.key === 'IdMapping'; });\n                    if (this.parent.initialRender && !filterKey.length) {\n                        this.parent.query.where(this.parent.parentIdMapping, 'equal', null);\n                        this.parent.query.addParams('IdMapping', this.parent.idMapping);\n                    }\n                }\n                if (!this.parent.hasChildMapping) {\n                    var qry = this.parent.query.clone();\n                    qry.queries = [];\n                    qry = qry.select([this.parent.parentIdMapping]);\n                    qry.isCountRequired = true;\n                    dm.executeQuery(qry).then(function (e) {\n                        _this.parentItems = DataUtil.distinct(e.result, _this.parent.parentIdMapping, false);\n                        var req;\n                        if (e.result) {\n                            req = 0;\n                        }\n                        else {\n                            req = 1;\n                        }\n                        if (req === 0) {\n                            setValue('grid.contentModule.isLoaded', true, _this.parent);\n                            if (!isNullOrUndefined(_this.zerothLevelData)) {\n                                setValue('cancel', false, _this.zerothLevelData);\n                                getValue('grid.renderModule', _this.parent).dataManagerSuccess(_this.zerothLevelData);\n                                _this.zerothLevelData = null;\n                            }\n                            _this.parent.grid.hideSpinner();\n                        }\n                    });\n                }\n            }\n        }\n        else if (data instanceof Array) {\n            this.convertJSONData(data);\n        }\n    };\n    DataManipulation.prototype.convertJSONData = function (data) {\n        this.hierarchyData = [];\n        this.taskIds = [];\n        if (!this.parent.idMapping) {\n            this.hierarchyData = data;\n        }\n        else {\n            var keys = Object.keys(data);\n            for (var i = 0; i < keys.length; i++) {\n                var tempData = data[parseInt(i.toString(), 10)];\n                this.hierarchyData.push(extend({}, tempData));\n                if (!isNullOrUndefined(tempData[this.parent.idMapping])) {\n                    this.taskIds.push(tempData[this.parent.idMapping]);\n                }\n            }\n        }\n        if (this.isSelfReference) {\n            var selfData = [];\n            var mappingData = new DataManager(this.hierarchyData).executeLocal(new Query()\n                .group(this.parent.parentIdMapping));\n            for (var i = 0; i < mappingData.length; i++) {\n                var groupData = mappingData[parseInt(i.toString(), 10)];\n                var index = this.taskIds.indexOf(groupData.key);\n                if (!isNullOrUndefined(groupData.key)) {\n                    if (index > -1) {\n                        var childData = (groupData.items);\n                        this.hierarchyData[parseInt(index.toString(), 10)][this.parent.childMapping] = childData;\n                        continue;\n                    }\n                }\n                selfData.push.apply(selfData, groupData.items);\n            }\n            this.hierarchyData = this.selfReferenceUpdate(selfData);\n        }\n        if (!Object.keys(this.hierarchyData).length) {\n            var isGantt = 'isGantt';\n            var referenceData = !(this.parent.dataSource instanceof DataManager) && this.parent[\"\" + isGantt];\n            this.parent.flatData = referenceData ? (this.parent.dataSource) : [];\n        }\n        else {\n            this.createRecords(this.hierarchyData);\n        }\n        this.storedIndex = -1;\n    };\n    // private crudActions(): void {\n    //   if (this.parent.dataSource instanceof DataManager && (this.parent.dataSource.adaptor instanceof RemoteSaveAdaptor)) {\n    //     let oldUpdate: Function = this.parent.dataSource.adaptor.update;\n    //     this.parent.dataSource.adaptor.update =\n    //         function (dm: DataManager, keyField: string, value: Object, tableName?: string, query?: Query, original?: Object): Object {\n    //                value = getPlainData(value);\n    //                return oldUpdate.apply(this, [dm, keyField, value, tableName, query, original]);\n    //              }\n    //   }\n    // }\n    DataManipulation.prototype.selfReferenceUpdate = function (selfData) {\n        var result = [];\n        while (this.hierarchyData.length > 0 && selfData.length > 0) {\n            var index = selfData.indexOf(this.hierarchyData[0]);\n            if (index === -1) {\n                this.hierarchyData.shift();\n            }\n            else {\n                result.push(this.hierarchyData.shift());\n                selfData.splice(index, 1);\n            }\n        }\n        return result;\n    };\n    /**\n     * Function to update the zeroth level parent records in remote binding\n     *\n     * @param {BeforeDataBoundArgs} args - contains data before its bounds to tree grid\n     * @hidden\n     * @returns {void}\n     */\n    DataManipulation.prototype.updateParentRemoteData = function (args) {\n        var _this = this;\n        var actionArgs = 'actionArgs';\n        if (isRemoteData(this.parent) && this.parent.enableVirtualization && args[\"\" + actionArgs].requestType === 'virtualscroll') {\n            this.parent.hideSpinner();\n        }\n        var records = args.result;\n        if (isRemoteData(this.parent) && this.parent.enableVirtualization && (args[\"\" + actionArgs].requestType === 'virtualscroll' || args[\"\" + actionArgs].action === 'clearFilter' || args[\"\" + actionArgs].searchString === '')) {\n            this.parent.query.expands = [];\n        }\n        if (!this.parent.hasChildMapping && !this.parentItems.length &&\n            (this.parent.loadChildOnDemand)) {\n            this.zerothLevelData = args;\n            setValue('cancel', true, args);\n        }\n        else {\n            if (this.parent.loadChildOnDemand) {\n                var index = 0;\n                var _loop_1 = function (rec) {\n                    if (isCountRequired(this_1.parent) && records[parseInt(rec.toString(), 10)].hasChildRecords &&\n                        this_1.parent.initialRender) {\n                        records[parseInt(rec.toString(), 10)].expanded = false;\n                    }\n                    if (isRemoteData(this_1.parent) && this_1.parent.enableVirtualization) {\n                        var childRecords_1 = [];\n                        var parent_1 = this_1.parent;\n                        records.filter(function (e) {\n                            if (e[\"\" + parent_1.parentIdMapping] === records[parseInt(rec.toString(), 10)][\"\" + parent_1.idMapping]) {\n                                childRecords_1.push(e);\n                            }\n                        });\n                        if (childRecords_1.length) {\n                            records[parseInt(rec.toString(), 10)].expanded = true;\n                        }\n                        else if (records[parseInt(rec.toString(), 10)].hasChildRecords) {\n                            records[parseInt(rec.toString(), 10)].expanded = false;\n                        }\n                    }\n                    if (isNullOrUndefined(records[parseInt(rec.toString(), 10)].index)) {\n                        records[parseInt(rec.toString(), 10)].taskData = extend({}, records[parseInt(rec.toString(), 10)]);\n                        records[parseInt(rec.toString(), 10)].uniqueID = getUid(this_1.parent.element.id + '_data_');\n                        setValue('uniqueIDCollection.' + records[parseInt(rec.toString(), 10)].uniqueID, records[parseInt(rec.toString(), 10)], this_1.parent);\n                        if (isRemoteData(this_1.parent) && this_1.parent.enableVirtualization && records[parseInt(rec.toString(), 10)][\"\" + this_1.parent.parentIdMapping] && (isNullOrUndefined(records[parseInt(rec.toString(), 10)].level) || records[parseInt(rec.toString(), 10)].level === 0)) {\n                            var parentID_1 = records[parseInt(rec.toString(), 10)][\"\" + this_1.parent.parentIdMapping];\n                            var parentRec = records.find(function (record) { return record[\"\" + _this.parent.idMapping] === parentID_1; });\n                            if (parentRec) {\n                                records[parseInt(rec.toString(), 10)].level = parentRec.level + 1;\n                            }\n                        }\n                        else {\n                            records[parseInt(rec.toString(), 10)].level = 0;\n                        }\n                        records[parseInt(rec.toString(), 10)].index = index;\n                        if ((records[parseInt(rec.toString(), 10)][this_1.parent.hasChildMapping] ||\n                            this_1.parentItems.indexOf(records[parseInt(rec.toString(), 10)][this_1.parent.idMapping]) !== -1)) {\n                            records[parseInt(rec.toString(), 10)].hasChildRecords = true;\n                        }\n                        records[parseInt(rec.toString(), 10)].checkboxState = 'uncheck';\n                    }\n                    index++;\n                };\n                var this_1 = this;\n                for (var rec = 0; rec < records.length; rec++) {\n                    _loop_1(rec);\n                }\n            }\n            else {\n                var dataResults = 'dataResults';\n                var expandRecord = 'expandRecord';\n                if (!isNullOrUndefined(records) && !((!this.parent.loadChildOnDemand) && isCountRequired(this.parent) && !isNullOrUndefined(this.parent[\"\" + dataResults][\"\" + expandRecord])) &&\n                    !(isRemoteData(this.parent) && !this.parent.loadChildOnDemand && args[\"\" + actionArgs].isExpandCollapse && this.parent.enableVirtualization)) {\n                    this.convertToFlatData(records);\n                }\n            }\n        }\n        if (isRemoteData(this.parent) && !this.parent.loadChildOnDemand && args[\"\" + actionArgs].isExpandCollapse && this.parent.enableVirtualization) {\n            args.result = records;\n        }\n        else if (isRemoteData(this.parent) && this.parent.enableVirtualization && this.parent.loadChildOnDemand) {\n            args.result = records;\n        }\n        else {\n            args.result = !this.parent.loadChildOnDemand ? this.parent.flatData : records;\n        }\n        this.UpdateIndexLevel(args.result);\n        if (isRemoteData(this.parent) && this.parent.enableVirtualization && !this.parent.loadChildOnDemand\n            && this.parent.grid.aggregates.length && this.parent.grid.sortSettings.columns.length === 0\n            && this.parent.grid.filterSettings.columns.length === 0 && !this.parent.grid.searchSettings.key.length) {\n            var query = 'query';\n            var summaryQuery = args[\"\" + query].queries.filter(function (q) { return q.fn === 'onAggregates'; });\n            args.result = this.parent.summaryModule.calculateSummaryValue(summaryQuery, this.parent.flatData, true);\n        }\n        this.parent.notify('updateResults', args);\n    };\n    /**\n     * Updates the index level for the given data array.\n     *\n     * @param {object[]} data - An array of objects representing the data whose index levels need to be updated.\n     * @returns {void}\n     */\n    DataManipulation.prototype.UpdateIndexLevel = function (data) {\n        var i = 0;\n        var level = 0;\n        data.forEach(function (item) {\n            var record = item;\n            var parentItem = record.parentItem;\n            if (parentItem != null) {\n                var parentLevel = parentItem.level;\n                record.level = parentLevel + 1;\n            }\n            else {\n                record.level = level;\n            }\n            record.index = i;\n            i++;\n        });\n    };\n    /**\n     * Function to manipulate datasource\n     *\n     * @param {{record: ITreeData, rows: HTMLTableRowElement[], parentRow: HTMLTableRowElement}} rowDetails - Row details for which child rows has to be fetched\n     * @param {ITreeData} rowDetails.record - current expanding record\n     * @param {HTMLTableRowElement[]} rowDetails.rows - Expanding Row element\n     * @param {HTMLTableRowElement} rowDetails.parentRow  - Curent expanding row element\n     * @param {boolean} isChild - Specified whether current record is already a child record\n     * @hidden\n     * @returns {void}\n     */\n    DataManipulation.prototype.collectExpandingRecs = function (rowDetails, isChild) {\n        var gridRows = this.parent.getRows();\n        var name = 'name';\n        if (this.parent.rowTemplate) {\n            var rows = this.parent.getContentTable().rows;\n            gridRows = [].slice.call(rows);\n        }\n        var childRecord;\n        if (rowDetails.rows.length > 0) {\n            if (!isChild) {\n                rowDetails.record.expanded = true;\n            }\n            for (var i = 0; i < rowDetails.rows.length; i++) {\n                this.parent['toggleRowVisibility'](rowDetails.rows[parseInt(i.toString(), 10)], 'e-childrow-visible');\n                if (!this.parent.loadChildOnDemand) {\n                    var targetEle = rowDetails.rows[parseInt(i.toString(), 10)].getElementsByClassName('e-treegridcollapse')[0];\n                    childRecord = this.parent.rowTemplate ?\n                        this.parent.grid.getCurrentViewRecords()[rowDetails.rows[parseInt(i.toString(), 10)].rowIndex] :\n                        this.parent.grid.getRowObjectFromUID(rowDetails.rows[parseInt(i.toString(), 10)].getAttribute('data-Uid')).data;\n                    if (!isNullOrUndefined(targetEle) && childRecord.expanded) {\n                        addClass([targetEle], 'e-treegridexpand');\n                        removeClass([targetEle], 'e-treegridcollapse');\n                    }\n                    var childRows = [];\n                    childRows = gridRows.filter(function (r) {\n                        return r.querySelector('.e-gridrowindex' + childRecord.index + 'level' + (childRecord.level + 1));\n                    });\n                    if (childRows.length && childRecord.expanded) {\n                        this.collectExpandingRecs({ record: childRecord, rows: childRows, parentRow: rowDetails.parentRow }, true);\n                    }\n                }\n                var expandingTd = rowDetails.rows[parseInt(i.toString(), 10)].querySelector('.e-detailrowcollapse');\n                if (!isNullOrUndefined(expandingTd)) {\n                    this.parent.grid.detailRowModule.expand(expandingTd);\n                }\n            }\n            this.parent.grid.pageSettings.totalRecordsCount += rowDetails.rows.length;\n        }\n        else {\n            this.fetchRemoteChildData({ action: rowDetails[\"\" + name], record: rowDetails.record, rows: rowDetails.rows, parentRow: rowDetails.parentRow });\n        }\n    };\n    DataManipulation.prototype.fetchRemoteChildData = function (rowDetails) {\n        var _this = this;\n        var args = { row: rowDetails.parentRow, data: rowDetails.record };\n        var dm = this.parent.dataSource;\n        var qry = this.parent.grid.getDataModule().generateQuery();\n        var clonequries = qry.queries.filter(function (e) { return e.fn !== 'onPage' && e.fn !== 'onWhere'; });\n        qry.queries = clonequries;\n        qry.isCountRequired = true;\n        var idMappingValue = parseInt(rowDetails.record[this.parent.idMapping], 10);\n        if (isNaN(idMappingValue)) {\n            idMappingValue = rowDetails.record[this.parent.idMapping].toString();\n        }\n        if (this.parent.enableVirtualization && rowDetails.action === 'remoteExpand') {\n            qry.take(this.parent.pageSettings.pageSize);\n            var expandDetail = [];\n            expandDetail.push('ExpandingAction', idMappingValue.toString());\n            qry.expand(expandDetail);\n        }\n        else if (this.parent.enableVirtualization && rowDetails.action === 'collapse') {\n            qry.take(this.parent.grid.pageSettings.pageSize);\n            var expandDetail = [];\n            expandDetail.push('CollapsingAction', idMappingValue.toString());\n            qry.expand(expandDetail);\n        }\n        qry.where(this.parent.parentIdMapping, 'equal', rowDetails.record[this.parent.idMapping]);\n        if (rowDetails.action === 'remoteExpand' && this.parent.grid.filterSettings && this.parent.grid.filterSettings.columns.length) {\n            var filterqry = this.parent.grid.getDataModule().generateQuery().queries.filter(function (e) { return e.fn !== 'onPage' && typeof e.e.predicates !== 'undefined'; });\n            qry.queries.push(filterqry[0]);\n        }\n        showSpinner(this.parent.element);\n        dm.executeQuery(qry).then(function (e) {\n            var remoteExpandedData = 'remoteExpandedData';\n            var remoteCollapsedData = 'remoteCollapsedData';\n            var level = 'level';\n            var datas = _this.parent.grid.currentViewData.slice();\n            var inx;\n            var idMapping = _this.parent.idMapping;\n            if (_this.parent['isGantt'] && _this.parent.loadChildOnDemand && _this.parent.hasChildMapping) {\n                for (var i = 0; i < _this.parent.grid.currentViewData.length; i++) {\n                    if (rowDetails.record[idMapping] === _this.parent.grid.currentViewData[i][idMapping]) {\n                        inx = i;\n                        break;\n                    }\n                }\n            }\n            else {\n                inx = datas.indexOf(rowDetails.record);\n            }\n            if (_this.parent.enableVirtualization && (rowDetails.action === 'collapse' || rowDetails.action === 'remoteExpand')) {\n                datas = [];\n                for (var i = 0; i < inx; i++) {\n                    datas.push(_this.parent.grid.currentViewData[parseInt(i.toString(), 10)]);\n                }\n            }\n            if (inx === -1) {\n                _this.parent.grid.getRowsObject().forEach(function (rows) {\n                    if (rows.data.uniqueID === rowDetails.record.uniqueID) {\n                        inx = rows.index;\n                    }\n                });\n            }\n            var haveChild = getObject('actual.nextLevel', e);\n            var result = e.result;\n            var resultChildData = [];\n            if (rowDetails.action === 'remoteExpand' && _this.parent.grid.filterModule && _this.parent.grid.filterModule['value']) {\n                for (var i = 0; i < datas.length; i++) {\n                    if (Object.prototype.hasOwnProperty.call(datas[parseInt(i.toString(), 10)], _this.parent.parentIdMapping) && datas[parseInt(i.toString(), 10)]['' + _this.parent.parentIdMapping] !== null && datas[parseInt(i.toString(), 10)].level === 0) {\n                        datas.splice(i, 1);\n                        i--;\n                    }\n                }\n                for (var i = 0; i < result.length; i++) {\n                    if (rowDetails.record['' + _this.parent.idMapping] !== result[parseInt(i.toString(), 10)]['' + _this.parent.idMapping] &&\n                        rowDetails.record['' + _this.parent.idMapping] === result[parseInt(i.toString(), 10)]['' + _this.parent.parentIdMapping]) {\n                        if (Object.prototype.hasOwnProperty.call(result, i)) {\n                            resultChildData.push(result[parseInt(i.toString(), 10)]);\n                        }\n                    }\n                }\n                result = resultChildData;\n            }\n            if (_this.parent.enableVirtualization && rowDetails.action === 'remoteExpand') {\n                rowDetails.record.childRecords = [];\n                for (var i = 0; i < result.length; i++) {\n                    if (rowDetails.record['' + _this.parent.idMapping] !== result[parseInt(i.toString(), 10)]['' + _this.parent.idMapping] &&\n                        rowDetails.record['' + _this.parent.idMapping] === result[parseInt(i.toString(), 10)]['' + _this.parent.parentIdMapping] && Object.prototype.hasOwnProperty.call(result, i)) {\n                        rowDetails.record.childRecords.push(result[parseInt(i.toString(), 10)]);\n                    }\n                }\n            }\n            else {\n                rowDetails.record.childRecords = result;\n            }\n            for (var r = 0; r < result.length; r++) {\n                var record = result[parseInt(r.toString(), 10)];\n                if (_this.parent.enableVirtualization && record[\"\" + _this.parent.idMapping] === rowDetails.record[\"\" + _this.parent.idMapping] && rowDetails.action === 'remoteExpand') {\n                    _this.parent[\"\" + remoteExpandedData].push(rowDetails.record);\n                }\n                else if (_this.parent.enableVirtualization && record[\"\" + _this.parent.idMapping] === rowDetails.record[\"\" + _this.parent.idMapping] && rowDetails.action === 'collapse') {\n                    for (var i = 0; i < _this.parent[\"\" + remoteExpandedData].length; i++) {\n                        if (rowDetails.record[\"\" + _this.parent.idMapping] === _this.parent[\"\" + remoteExpandedData][parseInt(i.toString(), 10)][\"\" + _this.parent.idMapping]) {\n                            _this.parent[\"\" + remoteExpandedData].splice(i, 1);\n                        }\n                    }\n                }\n                record.taskData = extend({}, record);\n                if (record[\"\" + _this.parent.parentIdMapping] && _this.parent.enableVirtualization && _this.parent[\"\" + remoteExpandedData].length) {\n                    for (var i = 0; i < _this.parent[\"\" + remoteExpandedData].length; i++) {\n                        if (record[\"\" + _this.parent.parentIdMapping] === _this.parent[\"\" + remoteExpandedData][parseInt(i.toString(), 10)][\"\" + _this.parent.idMapping]) {\n                            record.level = _this.parent[\"\" + remoteExpandedData][parseInt(i.toString(), 10)][\"\" + level] + 1;\n                            var parentData = _this.parent[\"\" + remoteExpandedData][parseInt(i.toString(), 10)];\n                            delete parentData.childRecords;\n                            record.parentItem = parentData;\n                            record.parentUniqueID = parentData.uniqueID;\n                        }\n                    }\n                }\n                else if (_this.parent.enableVirtualization) {\n                    if ((record[\"\" + _this.parent.hasChildMapping] ||\n                        _this.parentItems.indexOf(record[\"\" + _this.parent.idMapping]) !== -1)\n                        && !(haveChild && !haveChild[parseInt(r.toString(), 10)])) {\n                        if (isNullOrUndefined(record[\"\" + _this.parent.parentIdMapping])) {\n                            record.level = 0;\n                            if (rowDetails.action === 'remoteExpand') {\n                                record.childRecords = [];\n                                record.childRecords = rowDetails.record.childRecords;\n                            }\n                        }\n                        else {\n                            record.level = rowDetails.record.level;\n                        }\n                    }\n                    else {\n                        var parentData = extend({}, rowDetails.record);\n                        delete parentData.childRecords;\n                        record.parentItem = parentData;\n                        record.parentUniqueID = rowDetails.record.uniqueID;\n                    }\n                }\n                else {\n                    record.level = rowDetails.record.level + 1;\n                    var parentData = extend({}, rowDetails.record);\n                    delete parentData.childRecords;\n                    record.parentItem = parentData;\n                    record.parentUniqueID = rowDetails.record.uniqueID;\n                }\n                if (isNullOrUndefined(record.index) && !isNullOrUndefined(record.parentItem)) {\n                    if (record[\"\" + _this.parent.parentIdMapping]) {\n                        record.index = record.parentItem.index;\n                    }\n                }\n                record.uniqueID = getUid(_this.parent.element.id + '_data_');\n                if (rowDetails.record[\"\" + _this.parent.idMapping] === record[\"\" + _this.parent.idMapping]) {\n                    rowDetails.record.uniqueID = record.uniqueID;\n                }\n                record.checkboxState = 'uncheck';\n                if (_this.parent.enableVirtualization && isNullOrUndefined(record.level)) {\n                    for (var p = 0; p < _this.parent.grid.currentViewData.length; p++) {\n                        if (_this.parent.grid.currentViewData[parseInt(p.toString(), 10)][\"\" + _this.parent.idMapping] === record[\"\" + _this.parent.parentIdMapping]) {\n                            record.level = _this.parent.grid.currentViewData[parseInt(p.toString(), 10)]['level'] + 1;\n                        }\n                    }\n                }\n                setValue('uniqueIDCollection.' + record.uniqueID, record, _this.parent);\n                // delete result[r].parentItem.childRecords;\n                if ((record[\"\" + _this.parent.hasChildMapping] ||\n                    _this.parentItems.indexOf(record[\"\" + _this.parent.idMapping]) !== -1)\n                    && !(haveChild && !haveChild[parseInt(r.toString(), 10)])) {\n                    record.hasChildRecords = true;\n                    if (_this.parent.enableVirtualization && !_this.parent.loadChildOnDemand) {\n                        for (var i = 0; i < _this.parent[\"\" + remoteCollapsedData].length; i++) {\n                            if (record[\"\" + _this.parent.idMapping] === _this.parent[\"\" + remoteCollapsedData][parseInt(i.toString(), 10)][\"\" + _this.parent.idMapping]) {\n                                record.expanded = _this.parent[\"\" + remoteCollapsedData][parseInt(i.toString(), 10)]['expanded'];\n                            }\n                        }\n                        if (rowDetails.action === 'collapse' && record[\"\" + _this.parent.idMapping] !== rowDetails.record[\"\" + _this.parent.idMapping] && record.expanded !== false) {\n                            record.expanded = true;\n                        }\n                        else if (rowDetails.action === 'collapse' && record[\"\" + _this.parent.idMapping] === rowDetails.record[\"\" + _this.parent.idMapping]) {\n                            record.expanded = false;\n                            _this.parent[\"\" + remoteCollapsedData].push(rowDetails.record);\n                        }\n                        else if (rowDetails.action === 'remoteExpand') {\n                            for (var i = 0; i < _this.parent.grid.currentViewData.length; i++) {\n                                if (_this.parent.grid.currentViewData[parseInt(i.toString(), 10)][\"\" + _this.parent.idMapping] === record[\"\" + _this.parent.idMapping]) {\n                                    result.splice(r, 1, _this.parent.grid.currentViewData[parseInt(i.toString(), 10)]);\n                                }\n                            }\n                            if (record[_this.parent.idMapping] === rowDetails.record[\"\" + _this.parent.idMapping]) {\n                                for (var i = 0; i < _this.parent[\"\" + remoteCollapsedData].length; i++) {\n                                    if (rowDetails.record[\"\" + _this.parent.idMapping] === _this.parent[\"\" + remoteCollapsedData][parseInt(i.toString(), 10)][\"\" + _this.parent.idMapping]) {\n                                        _this.parent[\"\" + remoteCollapsedData].splice(i, 1);\n                                    }\n                                }\n                            }\n                            if (record.expanded !== false) {\n                                record.expanded = true;\n                            }\n                        }\n                    }\n                    else if (_this.parent.enableVirtualization && record[\"\" + _this.parent.idMapping] === rowDetails.record[\"\" + _this.parent.idMapping] && rowDetails.action !== 'collapse') {\n                        record.expanded = true;\n                    }\n                    else if (!(_this.parent.enableVirtualization && !_this.parent.loadChildOnDemand)) {\n                        record.expanded = false;\n                    }\n                }\n                datas.splice(inx + r + 1, 0, record);\n            }\n            setValue('result', datas, e);\n            setValue('action', 'beforecontentrender', e);\n            _this.parent.trigger(events.actionComplete, e);\n            hideSpinner(_this.parent.element);\n            if (_this.parent.grid.aggregates.length > 0 && !_this.parent.enableVirtualization) {\n                var gridQuery = getObject('query', e);\n                var result_1 = 'result';\n                if (isNullOrUndefined(gridQuery)) {\n                    gridQuery = getValue('grid.renderModule.data', _this.parent).aggregateQuery(new Query());\n                }\n                if (!isNullOrUndefined(gridQuery)) {\n                    var summaryQuery = gridQuery.queries.filter(function (q) { return q.fn === 'onAggregates'; });\n                    e[\"\" + result_1] = _this.parent.summaryModule.calculateSummaryValue(summaryQuery, e[\"\" + result_1], true);\n                }\n            }\n            if (rowDetails.action === 'remoteExpand' && _this.parent.allowPaging && _this.parent.pageSettings.pageSizeMode === 'All') {\n                _this.parent.grid.pageSettings.totalRecordsCount = _this.parent.grid.pageSettings.totalRecordsCount + result.length;\n            }\n            if (_this.parent.enableVirtualization) {\n                _this.parent.grid.pageSettings.totalRecordsCount = e.count;\n            }\n            e.count = _this.parent.grid.pageSettings.totalRecordsCount;\n            var virtualArgs = {};\n            if (_this.parent.enableVirtualization) {\n                _this.remoteVirtualAction(virtualArgs);\n            }\n            var notifyArgs = { index: inx, childData: result };\n            if (_this.parent.enableInfiniteScrolling) {\n                _this.parent.notify('infinite-remote-expand', notifyArgs);\n            }\n            else {\n                getValue('grid.renderModule', _this.parent).dataManagerSuccess(e, virtualArgs);\n            }\n            _this.parent.trigger(events.expanded, args);\n        });\n    };\n    DataManipulation.prototype.remoteVirtualAction = function (virtualArgs) {\n        virtualArgs.requestType = 'refresh';\n        setValue('isExpandCollapse', true, virtualArgs);\n        var contentModule = getValue('grid.contentModule', this.parent);\n        var currentInfo = getValue('currentInfo', contentModule);\n        var prevInfo = getValue('prevInfo', contentModule);\n        if (currentInfo.loadNext && this.parent.grid.pageSettings.currentPage === currentInfo.nextInfo.page) {\n            this.parent.grid.pageSettings.currentPage = prevInfo.page;\n        }\n    };\n    DataManipulation.prototype.beginSorting = function () {\n        this.isSortAction = true;\n        if (isRemoteData(this.parent) && this.parent.enableVirtualization) {\n            var index = this.parent.query.queries.indexOf(this.parent.query.queries.filter(function (q) { return q.fn === 'onSortBy'; })[0]);\n            if (index !== -1) {\n                this.parent.query.queries.splice(index, 1);\n            }\n            if (this.parent.grid.sortSettings.columns.length === 0) {\n                this.parent.query.sortBy(null, null);\n            }\n        }\n    };\n    DataManipulation.prototype.createRecords = function (data, parentRecords) {\n        var treeGridData = [];\n        var keys = Object.keys(data);\n        for (var i = 0, len = keys.length; i < len; i++) {\n            var currentData = extend({}, data[parseInt(i.toString(), 10)]);\n            currentData.taskData = data[parseInt(i.toString(), 10)];\n            var level = 0;\n            this.storedIndex++;\n            if (!Object.prototype.hasOwnProperty.call(currentData, 'index')) {\n                currentData.index = this.storedIndex;\n            }\n            var childMapping = currentData[this.parent.childMapping];\n            var hasChildren = !isNullOrUndefined(childMapping) && childMapping.length > 0;\n            var shouldCount = isCountRequired(this.parent);\n            var hasChildMapping = currentData[this.parent.hasChildMapping];\n            if ((hasChildren && !shouldCount) || (hasChildMapping && shouldCount)) {\n                currentData.hasChildRecords = true;\n            }\n            else {\n                currentData.hasChildRecords = false;\n            }\n            if ((!isNullOrUndefined(childMapping) && !shouldCount) ||\n                (hasChildMapping) && shouldCount) {\n                if (this.parent.enableCollapseAll || !isNullOrUndefined(this.parent.dataStateChange)\n                    && isNullOrUndefined(childMapping)) {\n                    currentData.expanded = false;\n                }\n                else {\n                    currentData.expanded = !isNullOrUndefined(currentData[this.parent.expandStateMapping])\n                        ? currentData[this.parent.expandStateMapping] : true;\n                }\n            }\n            if (!Object.prototype.hasOwnProperty.call(currentData, 'index')) {\n                currentData.index = currentData.hasChildRecords ? this.storedIndex : this.storedIndex;\n            }\n            if (this.isSelfReference && isNullOrUndefined(currentData[this.parent.parentIdMapping])) {\n                this.parent.parentData.push(currentData);\n            }\n            currentData.uniqueID = getUid(this.parent.element.id + '_data_');\n            setValue('uniqueIDCollection.' + currentData.uniqueID, currentData, this.parent);\n            if (!isNullOrUndefined(parentRecords)) {\n                var parentData = extend({}, parentRecords);\n                delete parentData.childRecords;\n                delete parentData[this.parent.childMapping];\n                if (this.isSelfReference) {\n                    delete parentData.taskData[this.parent.childMapping];\n                }\n                currentData.parentItem = parentData;\n                currentData.parentUniqueID = parentData.uniqueID;\n                level = parentRecords.level + 1;\n            }\n            if (!Object.prototype.hasOwnProperty.call(currentData, 'level')) {\n                currentData.level = level;\n            }\n            currentData.checkboxState = 'uncheck';\n            var remoteCollapsedData = 'remoteCollapsedData';\n            if (this.parent.enableVirtualization && !this.parent.loadChildOnDemand && isRemoteData(this.parent)\n                && !this.parent.initialRender) {\n                if (!currentData.hasChildRecords && isNullOrUndefined(currentData[\"\" + this.parent.parentIdMapping])) {\n                    currentData.hasChildRecords = true;\n                    for (var c = 0; c < this.parent[\"\" + remoteCollapsedData].length; c++) {\n                        if (this.parent[\"\" + remoteCollapsedData][parseInt(c.toString(), 10)][\"\" + this.parent.idMapping] === currentData[\"\" + this.parent.idMapping]) {\n                            currentData.expanded = false;\n                        }\n                    }\n                }\n                else if (currentData.level === 0 && isNullOrUndefined(parentRecords) && !currentData.hasChildRecords) {\n                    currentData.level = currentData.level + 1;\n                }\n                if (currentData[\"\" + this.parent.hasChildMapping] && !isNullOrUndefined(currentData[\"\" + this.parent.expandStateMapping])) {\n                    currentData.expanded = currentData[\"\" + this.parent.expandStateMapping];\n                    currentData.hasChildRecords = true;\n                }\n                this.parent.flatData.push(currentData);\n            }\n            else if (isNullOrUndefined(currentData[\"\" + this.parent.parentIdMapping]) || currentData.parentItem) {\n                if (!isNullOrUndefined(this.parent.rowDropSettings.targetID)) {\n                    if (!this.parent.rowDragAndDropModule['isDuplicateData'](currentData)) {\n                        this.parent.flatData.push(currentData);\n                    }\n                }\n                else {\n                    this.parent.flatData.push(currentData);\n                }\n                this.parent['infiniteScrollData'].push(currentData);\n            }\n            if (!this.isSelfReference && currentData.level === 0) {\n                this.parent.parentData.push(currentData);\n            }\n            if (!isNullOrUndefined(currentData[this.parent.childMapping] && currentData[this.parent.childMapping].length)) {\n                var record = this.createRecords(currentData[this.parent.childMapping], currentData);\n                currentData.childRecords = record;\n            }\n            treeGridData.push(currentData);\n        }\n        return treeGridData;\n    };\n    /**\n     * Function to perform filtering/sorting action for local data\n     *\n     * @param {BeforeDataBoundArgs} args - data details to be processed before binding to grid\n     * @hidden\n     * @returns {void}\n     */\n    DataManipulation.prototype.dataProcessor = function (args) {\n        var isExport = getObject('isExport', args);\n        var expresults = getObject('expresults', args);\n        var exportType = getObject('exportType', args);\n        var isPrinting = getObject('isPrinting', args);\n        var dataObj;\n        var actionArgs = getObject('actionArgs', args);\n        var requestType = getObject('requestType', args);\n        var actionData = getObject('data', args);\n        var action = getObject('action', args);\n        var actionAddArgs = actionArgs;\n        var primaryKeyColumnName = this.parent.getPrimaryKeyFieldNames()[0];\n        var dataValue = getObject('data', actionAddArgs);\n        if ((!isNullOrUndefined(actionAddArgs)) && (!isNullOrUndefined(actionAddArgs.action)) && (actionAddArgs.action === 'add')\n            && (!isNullOrUndefined(actionAddArgs.data)) && isNullOrUndefined(actionAddArgs.data[\"\" + primaryKeyColumnName])) {\n            actionAddArgs.data[\"\" + primaryKeyColumnName] = args.result[actionAddArgs.index][\"\" + primaryKeyColumnName];\n            dataValue.taskData[\"\" + primaryKeyColumnName] = args.result[actionAddArgs.index][\"\" + primaryKeyColumnName];\n        }\n        if ((!isNullOrUndefined(actionArgs) && Object.keys(actionArgs).length) || requestType === 'save') {\n            requestType = requestType ? requestType : actionArgs.requestType;\n            actionData = actionData ? actionData : getObject('data', actionArgs);\n            action = action ? action : getObject('action', actionArgs);\n            if (this.parent.editSettings.mode === 'Batch') {\n                this.batchChanges = this.parent.grid.editModule.getBatchChanges();\n            }\n            if (this.parent.isLocalData) {\n                this.updateAction(actionData, action, requestType);\n            }\n        }\n        if (isExport && !isNullOrUndefined(expresults)) {\n            dataObj = expresults;\n        }\n        else {\n            dataObj = isCountRequired(this.parent) ? getValue('result', this.parent.grid.dataSource)\n                : this.parent.grid.dataSource;\n        }\n        var results = dataObj instanceof DataManager ? dataObj.dataSource.json : dataObj;\n        var count = isCountRequired(this.parent) ? getValue('count', this.parent.dataSource)\n            : results.length;\n        var qry = new Query();\n        var gridQuery = getObject('query', args);\n        var filterQuery;\n        var searchQuery;\n        if (!isNullOrUndefined(gridQuery)) {\n            filterQuery = gridQuery.queries.filter(function (q) { return q.fn === 'onWhere'; });\n            searchQuery = gridQuery.queries.filter(function (q) { return q.fn === 'onSearch'; });\n        }\n        if ((this.parent.grid.allowFiltering && this.parent.grid.filterSettings.columns.length) ||\n            (this.parent.grid.searchSettings.key.length > 0) || (!isNullOrUndefined(gridQuery) &&\n            (filterQuery.length || searchQuery.length) && this.parent.isLocalData)) {\n            if (isNullOrUndefined(gridQuery)) {\n                gridQuery = new Query();\n                gridQuery = getValue('grid.renderModule.data', this.parent).filterQuery(gridQuery);\n                gridQuery = getValue('grid.renderModule.data', this.parent).searchQuery(gridQuery);\n            }\n            var fltrQuery = gridQuery.queries.filter(function (q) { return q.fn === 'onWhere'; });\n            var srchQuery = gridQuery.queries.filter(function (q) { return q.fn === 'onSearch'; });\n            qry.queries = fltrQuery.concat(srchQuery);\n            var filteredData = new DataManager(results).executeLocal(qry);\n            this.parent.notify('updateFilterRecs', { data: filteredData });\n            results = this.dataResults.result;\n            this.dataResults.result = null;\n            if (this.parent.grid.aggregates.length > 0) {\n                var query = getObject('query', args);\n                if (isNullOrUndefined(gridQuery)) {\n                    gridQuery = getValue('grid.renderModule.data', this.parent).aggregateQuery(new Query());\n                }\n                if (!isNullOrUndefined(query)) {\n                    var summaryQuery = query.queries.filter(function (q) { return q.fn === 'onAggregates'; });\n                    results = this.parent.summaryModule.calculateSummaryValue(summaryQuery, results, true);\n                }\n            }\n        }\n        if (this.parent.grid.aggregates.length && this.parent.grid.sortSettings.columns.length === 0\n            && this.parent.grid.filterSettings.columns.length === 0 && !this.parent.grid.searchSettings.key.length) {\n            var gridQuery_1 = getObject('query', args);\n            if (isNullOrUndefined(gridQuery_1)) {\n                gridQuery_1 = getValue('grid.renderModule.data', this.parent).aggregateQuery(new Query());\n            }\n            var summaryQuery = gridQuery_1.queries.filter(function (q) { return q.fn === 'onAggregates'; });\n            results = this.parent.summaryModule.calculateSummaryValue(summaryQuery, this.parent.flatData, true);\n        }\n        if (this.parent.grid.sortSettings.columns.length > 0 || this.isSortAction) {\n            this.isSortAction = false;\n            var parentData = this.parent.parentData;\n            var query = getObject('query', args);\n            var srtQry = new Query();\n            for (var srt = this.parent.grid.sortSettings.columns.length - 1; srt >= 0; srt--) {\n                var getColumnByField = 'getColumnByField';\n                var col = this.parent.grid.renderModule.data[\"\" + getColumnByField](this.parent.grid.\n                    sortSettings.columns[parseInt(srt.toString(), 10)].field);\n                var compFun = col.sortComparer && isOffline(this.parent) ?\n                    col.sortComparer.bind(col) :\n                    this.parent.grid.sortSettings.columns[parseInt(srt.toString(), 10)].direction;\n                srtQry.sortBy(this.parent.grid.sortSettings.columns[parseInt(srt.toString(), 10)].field, compFun);\n            }\n            var modifiedData = new DataManager(parentData).executeLocal(srtQry);\n            if (this.parent.allowRowDragAndDrop && !isNullOrUndefined(this.parent.rowDragAndDropModule['draggedRecord']) &&\n                this.parent.rowDragAndDropModule['droppedRecord'].hasChildRecords && this.parent.rowDragAndDropModule['dropPosition'] !== 'middleSegment') {\n                var dragdIndex = modifiedData.indexOf(this.parent.rowDragAndDropModule['draggedRecord']);\n                modifiedData.splice(dragdIndex, 1);\n                var dropdIndex = modifiedData.indexOf(this.parent.rowDragAndDropModule['droppedRecord']);\n                if (this.parent.rowDragAndDropModule['droppedRecord'].hasChildRecords && this.parent.rowDragAndDropModule['dropPosition'] === 'topSegment') {\n                    modifiedData.splice(dropdIndex, 0, this.parent.rowDragAndDropModule['draggedRecord']);\n                }\n                else if (this.parent.rowDragAndDropModule['dropPosition'] === 'bottomSegment') {\n                    modifiedData.splice(dropdIndex + 1, 0, this.parent.rowDragAndDropModule['draggedRecord']);\n                }\n            }\n            var sortArgs = { modifiedData: modifiedData, filteredData: results, srtQry: srtQry };\n            this.parent.notify('createSort', sortArgs);\n            results = sortArgs.modifiedData;\n            this.dataResults.result = null;\n            this.sortedData = results;\n            this.parent.notify('updateModel', {});\n            if (this.parent.grid.aggregates.length > 0 && !isNullOrUndefined(query)) {\n                var isSort = false;\n                var query_1 = getObject('query', args);\n                var summaryQuery = query_1.queries.filter(function (q) { return q.fn === 'onAggregates'; });\n                results = this.parent.summaryModule.calculateSummaryValue(summaryQuery, this.sortedData, isSort);\n            }\n        }\n        count = isCountRequired(this.parent) ? getValue('count', this.parent.dataSource)\n            : results.length;\n        var temp = this.paging(results, count, isExport, isPrinting, exportType, args);\n        results = temp.result;\n        count = temp.count;\n        args.result = results;\n        args.count = count;\n        this.parent.notify('updateResults', args);\n    };\n    DataManipulation.prototype.paging = function (results, count, isExport, isPrinting, exportType, args) {\n        if (this.parent.allowPaging && (!isExport || exportType === 'CurrentPage')\n            && (!isPrinting || this.parent.printMode === 'CurrentPage')) {\n            this.parent.notify(events.pagingActions, { result: results, count: count, actionArgs: args });\n            results = this.dataResults.result;\n            count = isCountRequired(this.parent) ? getValue('count', this.parent.dataSource)\n                : this.dataResults.count;\n        }\n        else if ((this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) && (!isExport || exportType === 'CurrentPage')\n            && getValue('requestType', args) !== 'save') {\n            var actArgs = this.parent.enableInfiniteScrolling ? args : getValue('actionArgs', args);\n            this.parent.notify(events.pagingActions, { result: results, count: count, actionArgs: actArgs });\n            results = this.dataResults.result;\n            count = this.dataResults.count;\n        }\n        var isPdfExport = 'isPdfExport';\n        var isCollapsedStatePersist = 'isCollapsedStatePersist';\n        if ((isPrinting === true || (args[\"\" + isPdfExport] && (isNullOrUndefined(args[\"\" + isCollapsedStatePersist])\n            || args[\"\" + isCollapsedStatePersist]))) && this.parent.printMode === 'AllPages') {\n            var actualResults = [];\n            for (var i = 0; i < results.length; i++) {\n                var expandStatus = getExpandStatus(this.parent, results[parseInt(i.toString(), 10)], this.parent.parentData);\n                if (expandStatus) {\n                    actualResults.push(results[parseInt(i.toString(), 10)]);\n                }\n            }\n            results = actualResults;\n            count = results.length;\n        }\n        var value = { result: results, count: count };\n        return value;\n    };\n    DataManipulation.prototype.updateData = function (dataResult) {\n        this.dataResults = dataResult;\n    };\n    DataManipulation.prototype.updateAction = function (actionData, action, requestType) {\n        if ((requestType === 'delete' || requestType === 'save')) {\n            this.parent.notify(events.crudAction, { value: actionData, action: action || requestType });\n        }\n        if (requestType === 'batchsave' && this.parent.editSettings.mode === 'Batch') {\n            this.parent.notify(events.batchSave, {});\n        }\n    };\n    return DataManipulation;\n}());\nexport { DataManipulation };\n","/**\n * Defines enumerable toolbar items for programmatic access.\n *\n * @hidden\n */\nexport var ToolbarItem;\n(function (ToolbarItem) {\n    ToolbarItem[ToolbarItem[\"Add\"] = 0] = \"Add\";\n    ToolbarItem[ToolbarItem[\"Edit\"] = 1] = \"Edit\";\n    ToolbarItem[ToolbarItem[\"Update\"] = 2] = \"Update\";\n    ToolbarItem[ToolbarItem[\"Delete\"] = 3] = \"Delete\";\n    ToolbarItem[ToolbarItem[\"Cancel\"] = 4] = \"Cancel\";\n    ToolbarItem[ToolbarItem[\"Search\"] = 5] = \"Search\";\n    ToolbarItem[ToolbarItem[\"ExpandAll\"] = 6] = \"ExpandAll\";\n    ToolbarItem[ToolbarItem[\"CollapseAll\"] = 7] = \"CollapseAll\";\n    ToolbarItem[ToolbarItem[\"ExcelExport\"] = 8] = \"ExcelExport\";\n    ToolbarItem[ToolbarItem[\"PdfExport\"] = 9] = \"PdfExport\";\n    ToolbarItem[ToolbarItem[\"CsvExport\"] = 10] = \"CsvExport\";\n    ToolbarItem[ToolbarItem[\"Print\"] = 11] = \"Print\";\n    ToolbarItem[ToolbarItem[\"RowIndent\"] = 12] = \"RowIndent\";\n    ToolbarItem[ToolbarItem[\"RowOutdent\"] = 13] = \"RowOutdent\";\n})(ToolbarItem || (ToolbarItem = {}));\n/**\n * Enumerates detailed context menu items used for menu configurations.\n *\n * @hidden\n */\nexport var ContextMenuItems;\n(function (ContextMenuItems) {\n    ContextMenuItems[ContextMenuItems[\"AutoFit\"] = 0] = \"AutoFit\";\n    ContextMenuItems[ContextMenuItems[\"AutoFitAll\"] = 1] = \"AutoFitAll\";\n    ContextMenuItems[ContextMenuItems[\"SortAscending\"] = 2] = \"SortAscending\";\n    ContextMenuItems[ContextMenuItems[\"SortDescending\"] = 3] = \"SortDescending\";\n    ContextMenuItems[ContextMenuItems[\"Edit\"] = 4] = \"Edit\";\n    ContextMenuItems[ContextMenuItems[\"Delete\"] = 5] = \"Delete\";\n    ContextMenuItems[ContextMenuItems[\"Save\"] = 6] = \"Save\";\n    ContextMenuItems[ContextMenuItems[\"Cancel\"] = 7] = \"Cancel\";\n    ContextMenuItems[ContextMenuItems[\"PdfExport\"] = 8] = \"PdfExport\";\n    ContextMenuItems[ContextMenuItems[\"ExcelExport\"] = 9] = \"ExcelExport\";\n    ContextMenuItems[ContextMenuItems[\"CsvExport\"] = 10] = \"CsvExport\";\n    ContextMenuItems[ContextMenuItems[\"FirstPage\"] = 11] = \"FirstPage\";\n    ContextMenuItems[ContextMenuItems[\"PrevPage\"] = 12] = \"PrevPage\";\n    ContextMenuItems[ContextMenuItems[\"LastPage\"] = 13] = \"LastPage\";\n    ContextMenuItems[ContextMenuItems[\"NextPage\"] = 14] = \"NextPage\";\n    ContextMenuItems[ContextMenuItems[\"AddRow\"] = 15] = \"AddRow\";\n    ContextMenuItems[ContextMenuItems[\"RowIndent\"] = 16] = \"RowIndent\";\n    ContextMenuItems[ContextMenuItems[\"RowOutdent\"] = 17] = \"RowOutdent\";\n})(ContextMenuItems || (ContextMenuItems = {}));\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Configures the paging behavior of the TreeGrid, enabling you to manage and display data efficiently across multiple pages.\n */\nvar PageSettings = /** @class */ (function (_super) {\n    __extends(PageSettings, _super);\n    function PageSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(12)\n    ], PageSettings.prototype, \"pageSize\", void 0);\n    __decorate([\n        Property(8)\n    ], PageSettings.prototype, \"pageCount\", void 0);\n    __decorate([\n        Property(1)\n    ], PageSettings.prototype, \"currentPage\", void 0);\n    __decorate([\n        Property()\n    ], PageSettings.prototype, \"totalRecordsCount\", void 0);\n    __decorate([\n        Property(false)\n    ], PageSettings.prototype, \"enableQueryString\", void 0);\n    __decorate([\n        Property(false)\n    ], PageSettings.prototype, \"pageSizes\", void 0);\n    __decorate([\n        Property(null)\n    ], PageSettings.prototype, \"template\", void 0);\n    __decorate([\n        Property('All')\n    ], PageSettings.prototype, \"pageSizeMode\", void 0);\n    return PageSettings;\n}(ChildProperty));\nexport { PageSettings };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty, Collection, getEnumValue, compile } from '@syncfusion/ej2-base';\nimport { Internationalization } from '@syncfusion/ej2-base';\nimport { CellType } from '@syncfusion/ej2-grids';\n/**\n * Configures the aggregate column for the TreeGrid.\n */\nvar AggregateColumn = /** @class */ (function (_super) {\n    __extends(AggregateColumn, _super);\n    function AggregateColumn() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.intl = new Internationalization();\n        _this.templateFn = {};\n        return _this;\n    }\n    /**\n     * Custom format function\n     *\n     * @hidden\n     * @param {string} cultureName - culture name to format\n     * @returns {void}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    AggregateColumn.prototype.setFormatter = function (cultureName) {\n        if (this.format && (this.format.skeleton || this.format.format)) {\n            this.formatFn = this.getFormatFunction(this.format);\n        }\n    };\n    /**\n     * @param {NumberFormatOptions | DateFormatOptions} format - formatting options for number and date values\n     * @hidden\n     * @returns {Function} - return formatter function\n     */\n    AggregateColumn.prototype.getFormatFunction = function (format) {\n        if (format.type) {\n            return this.intl.getDateFormat(format);\n        }\n        else {\n            return this.intl.getNumberFormat(format);\n        }\n    };\n    /**\n     * @hidden\n     * @returns {Function} - Returns formatter function\n     */\n    AggregateColumn.prototype.getFormatter = function () {\n        return this.formatFn;\n    };\n    /**\n     * @param {Object} helper - Specified the helper\n     * @hidden\n     * @returns {void}\n     */\n    AggregateColumn.prototype.setTemplate = function (helper) {\n        if (helper === void 0) { helper = {}; }\n        if (this.footerTemplate !== undefined) {\n            this.templateFn[getEnumValue(CellType, CellType.Summary)] = { fn: compile(this.footerTemplate, helper),\n                property: 'footerTemplate' };\n        }\n    };\n    /**\n     * @param {CellType} type - specifies the cell type\n     * @returns {Object} returns the object\n     * @hidden\n     */\n    AggregateColumn.prototype.getTemplate = function (type) {\n        return this.templateFn[getEnumValue(CellType, type)];\n    };\n    /**\n     * @param {Object} prop - updates aggregate properties without change detection\n     * @hidden\n     * @returns {void}\n     */\n    AggregateColumn.prototype.setPropertiesSilent = function (prop) {\n        this.setProperties(prop, true);\n    };\n    __decorate([\n        Property()\n    ], AggregateColumn.prototype, \"type\", void 0);\n    __decorate([\n        Property()\n    ], AggregateColumn.prototype, \"footerTemplate\", void 0);\n    __decorate([\n        Property()\n    ], AggregateColumn.prototype, \"field\", void 0);\n    __decorate([\n        Property()\n    ], AggregateColumn.prototype, \"format\", void 0);\n    __decorate([\n        Property()\n    ], AggregateColumn.prototype, \"columnName\", void 0);\n    __decorate([\n        Property()\n    ], AggregateColumn.prototype, \"customAggregate\", void 0);\n    return AggregateColumn;\n}(ChildProperty));\nexport { AggregateColumn };\n/**\n * Configures the aggregate rows in the TreeGrid.\n */\nvar AggregateRow = /** @class */ (function (_super) {\n    __extends(AggregateRow, _super);\n    function AggregateRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Collection([], AggregateColumn)\n    ], AggregateRow.prototype, \"columns\", void 0);\n    __decorate([\n        Property(true)\n    ], AggregateRow.prototype, \"showChildSummary\", void 0);\n    return AggregateRow;\n}(ChildProperty));\nexport { AggregateRow };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ChildProperty, Property } from '@syncfusion/ej2-base';\n/**\n * Configures the edit behavior of the TreeGrid, defining how records can be added, modified, or deleted.\n */\nvar EditSettings = /** @class */ (function (_super) {\n    __extends(EditSettings, _super);\n    function EditSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(false)\n    ], EditSettings.prototype, \"allowAdding\", void 0);\n    __decorate([\n        Property(false)\n    ], EditSettings.prototype, \"allowEditing\", void 0);\n    __decorate([\n        Property(false)\n    ], EditSettings.prototype, \"allowDeleting\", void 0);\n    __decorate([\n        Property('Cell')\n    ], EditSettings.prototype, \"mode\", void 0);\n    __decorate([\n        Property('Top')\n    ], EditSettings.prototype, \"newRowPosition\", void 0);\n    __decorate([\n        Property(true)\n    ], EditSettings.prototype, \"allowEditOnDblClick\", void 0);\n    __decorate([\n        Property(true)\n    ], EditSettings.prototype, \"showConfirmDialog\", void 0);\n    __decorate([\n        Property(false)\n    ], EditSettings.prototype, \"showDeleteConfirmDialog\", void 0);\n    __decorate([\n        Property('')\n    ], EditSettings.prototype, \"template\", void 0);\n    __decorate([\n        Property({})\n    ], EditSettings.prototype, \"dialog\", void 0);\n    __decorate([\n        Property(false)\n    ], EditSettings.prototype, \"allowNextRowEdit\", void 0);\n    return EditSettings;\n}(ChildProperty));\nexport { EditSettings };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ChildProperty, Property, Collection } from '@syncfusion/ej2-base';\n/**\n * Represents the field name and direction of a sort column in the TreeGrid.\n */\nvar SortDescriptor = /** @class */ (function (_super) {\n    __extends(SortDescriptor, _super);\n    function SortDescriptor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], SortDescriptor.prototype, \"field\", void 0);\n    __decorate([\n        Property()\n    ], SortDescriptor.prototype, \"direction\", void 0);\n    return SortDescriptor;\n}(ChildProperty));\nexport { SortDescriptor };\n/**\n * Configures the sorting behavior of the TreeGrid.\n */\nvar SortSettings = /** @class */ (function (_super) {\n    __extends(SortSettings, _super);\n    function SortSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Collection([], SortDescriptor)\n    ], SortSettings.prototype, \"columns\", void 0);\n    __decorate([\n        Property(true)\n    ], SortSettings.prototype, \"allowUnsort\", void 0);\n    return SortSettings;\n}(ChildProperty));\nexport { SortSettings };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Configures the infinite scroll behavior of the Tree Grid.\n */\nvar InfiniteScrollSettings = /** @class */ (function (_super) {\n    __extends(InfiniteScrollSettings, _super);\n    function InfiniteScrollSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property(false)\n    ], InfiniteScrollSettings.prototype, \"enableCache\", void 0);\n    __decorate([\n        Property(3)\n    ], InfiniteScrollSettings.prototype, \"maxBlocks\", void 0);\n    __decorate([\n        Property(3)\n    ], InfiniteScrollSettings.prototype, \"initialBlocks\", void 0);\n    return InfiniteScrollSettings;\n}(ChildProperty));\nexport { InfiniteScrollSettings };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, addClass, createElement, EventHandler, isNullOrUndefined, extend, merge, SanitizeHtmlHelper } from '@syncfusion/ej2-base';\nimport { removeClass, Complex, Collection, getValue } from '@syncfusion/ej2-base';\nimport { Event, Property, NotifyPropertyChanges, setValue, KeyboardEvents, L10n } from '@syncfusion/ej2-base';\nimport { Column } from '../models/column';\nimport { getNumberFormat } from '@syncfusion/ej2-grids';\nimport { Freeze as FreezeColumn } from '@syncfusion/ej2-grids';\nimport { RowDropSettings, getUid, parentsUntil } from '@syncfusion/ej2-grids';\nimport { LoadingIndicator } from '../models/loading-indicator';\nimport { FilterSettings } from '../models/filter-settings';\nimport { TextWrapSettings } from '../models/textwrap-settings';\nimport { Logger as TreeLogger } from '../actions/logger';\nimport { TreeClipboard } from '../actions/clipboard';\nimport { Selection as TreeGridSelection } from '../actions/selection';\nimport { Print } from '../actions/print';\nimport * as events from '../base/constant';\nimport { SearchSettings } from '../models/search-settings';\nimport { SelectionSettings } from '../models/selection-settings';\nimport { getActualProperties, getObject } from '@syncfusion/ej2-grids';\nimport { DataManager, RemoteSaveAdaptor, Query, JsonAdaptor, Deferred, UrlAdaptor } from '@syncfusion/ej2-data';\nimport { createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport { isRemoteData, isOffline, extendArray, isCountRequired, findChildrenRecords } from '../utils';\nimport { Grid, Logger } from '@syncfusion/ej2-grids';\nimport { Render } from '../renderer/render';\nimport { DataManipulation } from './data';\nimport { iterateArrayOrObject } from '@syncfusion/ej2-grids';\nimport { ToolbarItem, ContextMenuItems } from '../enum';\nimport { PageSettings } from '../models/page-settings';\nimport { AggregateRow } from '../models/summary';\nimport { EditSettings } from '../models/edit-settings';\nimport { SortSettings } from '../models/sort-settings';\nimport { isHidden, getExpandStatus } from '../utils';\nimport { editAction } from '../actions/crud-actions';\nimport { InfiniteScrollSettings } from '../models/infinite-scroll-settings';\nimport * as literals from '../base/constant';\n/**\n * Represents the TreeGrid component.\n * ```html\n * <div id='treegrid'></div>\n * <script>\n *  var treegridObj = new TreeGrid({ allowPaging: true });\n *  treegridObj.appendTo('#treegrid');\n * </script>\n * ```\n */\nvar TreeGrid = /** @class */ (function (_super) {\n    __extends(TreeGrid, _super);\n    function TreeGrid(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.dataResults = {};\n        _this.uniqueIDCollection = {};\n        _this.uniqueIDFilterCollection = {};\n        _this.changedRecords = 'changedRecords';\n        _this.deletedRecords = 'deletedRecords';\n        _this.addedRecords = 'addedRecords';\n        _this.indentOutdentAction = 'indentOutdentAction';\n        _this.isFromChartSide = false;\n        _this.modifiedRecords = [];\n        _this.stackedHeader = false;\n        _this.objectEqualityChecker = function (old, current) {\n            if (old) {\n                var keys = Object.keys(old);\n                var isEqual = true;\n                var excludeKeys = ['Children', 'childRecords', 'taskData', 'uniqueID', 'parentItem', 'parentUniqueID', 'index'];\n                for (var i = 0; i < keys.length; i++) {\n                    if (old[keys[parseInt(i.toString(), 10)]] !== current[keys[parseInt(i.toString(), 10)]] &&\n                        excludeKeys.indexOf(keys[parseInt(i.toString(), 10)]) === -1) {\n                        var isDate = old[keys[parseInt(i.toString(), 10)]] instanceof Date &&\n                            current[keys[parseInt(i.toString(), 10)]] instanceof Date;\n                        if (!isDate || (old[keys[parseInt(i.toString(), 10)]].getTime() !==\n                            current[keys[parseInt(i.toString(), 10)]].getTime())) {\n                            isEqual = false;\n                            break;\n                        }\n                    }\n                }\n                return isEqual;\n            }\n            else {\n                return false;\n            }\n        };\n        TreeGrid_1.Inject(TreeGridSelection, TreeLogger);\n        setValue('mergePersistData', _this.mergePersistTreeGridData, _this);\n        var logger = 'Logger';\n        if (!isNullOrUndefined(_this.injectedModules[\"\" + logger])) {\n            Grid.Inject(Logger);\n        }\n        var freezeModulePresent = _this.injectedModules.filter(function (e) {\n            if (e.prototype.getModuleName() === 'freeze') {\n                Grid.Inject(FreezeColumn);\n            }\n        });\n        _this.grid = new Grid();\n        return _this;\n    }\n    TreeGrid_1 = TreeGrid;\n    /**\n     * Exports the TreeGrid data to an Excel file (.xlsx).\n     *\n     * @param {ExcelExportProperties | TreeGridExcelExportProperties} excelExportProperties - The properties used to configure the Excel export.\n     * @param {boolean} isMultipleExport - Indicates whether multiple exporting is enabled.\n     * @param {workbook} workbook - The workbook instance used for multiple exports.\n     * @param {boolean} isBlob - If set to true, the result will be returned as blob data.\n     * @returns {Promise<any>} - Returns a promise that resolves with the result of the export action.\n     */\n    /* eslint-disable */\n    TreeGrid.prototype.excelExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n        /* eslint-enable */\n        return this.excelExportModule.Map(excelExportProperties, isMultipleExport, workbook, isBlob, false);\n    };\n    /**\n     * Exports the TreeGrid data to a CSV file.\n     *\n     * @param {ExcelExportProperties} excelExportProperties - The properties used to configure the CSV export.\n     * @param {boolean} isMultipleExport - Indicates whether multiple exporting is enabled.\n     * @param {workbook} workbook - The workbook instance used for multiple exports.\n     * @param {boolean} isBlob - If set to true, the result will be returned as blob data.\n     * @returns {Promise<any>} - Returns a promise that resolves with the result of the export action.\n     */\n    /* eslint-disable */\n    TreeGrid.prototype.csvExport = function (excelExportProperties, isMultipleExport, workbook, isBlob) {\n        /* eslint-enable */\n        return this.excelExportModule.Map(excelExportProperties, isMultipleExport, workbook, isBlob, true);\n    };\n    /**\n     * Exports the TreeGrid data to a PDF document.\n     *\n     * @param {PdfExportProperties | TreeGridPdfExportProperties} pdfExportProperties - The properties used to configure the PDF export.\n     * @param {boolean} isMultipleExport - Indicates whether multiple exporting is enabled.\n     * @param {Object} pdfDoc - The PDF document instance used for multiple exports.\n     * @param {boolean} isBlob - If set to true, the result will be returned as blob data.\n     * @returns {Promise<any>} - Returns a promise that resolves with the result of the export action.\n     */\n    TreeGrid.prototype.pdfExport = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n        return this.pdfExportModule.Map(pdfExportProperties, isMultipleExport, pdfDoc, isBlob);\n    };\n    /**\n     * Sends a POST request to export the TreeGrid to an Excel file on the server side.\n     *\n     * @param {string} url - The URL for the server-side Excel export action.\n     * @returns {void}\n     */\n    TreeGrid.prototype.serverExcelExport = function (url) {\n        this.isExcel = true;\n        this.exportTreeGrid(url);\n    };\n    /**\n     * Sends a POST request to export the TreeGrid to a PDF document on the server side.\n     *\n     * @param {string} url - The URL for the server-side PDF export action.\n     * @returns {void}\n     */\n    TreeGrid.prototype.serverPdfExport = function (url) {\n        this.isExcel = false;\n        this.exportTreeGrid(url);\n    };\n    /**\n     * Sends a POST request to export the TreeGrid to a CSV file on the server side.\n     *\n     * @param {string} url - The URL for the server-side CSV export action.\n     * @returns {void}\n     */\n    TreeGrid.prototype.serverCsvExport = function (url) {\n        this.isExcel = true;\n        this.exportTreeGrid(url);\n    };\n    /**\n     * Exports the TreeGrid data to the specified URL using a POST request.\n     *\n     * @param {string} url - Defines exporting url\n     * @returns {void}\n     */\n    TreeGrid.prototype.exportTreeGrid = function (url) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var treegrid = this;\n        var query = treegrid.grid.getDataModule().generateQuery(true);\n        var state = new UrlAdaptor().processQuery(new DataManager({ url: '' }), query);\n        var queries = JSON.parse(state.data);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var treeGridModel = JSON.parse(this.addOnPersist(['allowPaging', 'pageSettings', 'sortSettings', 'allowPdfExport', 'allowExcelExport', 'aggregates',\n            'filterSettings', 'columns', 'locale', 'searchSettings', 'idMapping', 'parentIdMapping', 'childMapping', 'treeColumnIndex']));\n        var include = ['field', 'headerText', 'type', 'format', 'visible',\n            'template', 'index', 'width', 'textAlign', 'headerTextAlign', 'columns'];\n        treeGridModel.filterSettings.columns = queries.where;\n        treeGridModel.searchSettings.fields = queries.search && queries.search[0]['fields'] || [];\n        treeGridModel.sortSettings.columns = queries.sorted;\n        treeGridModel.columns = this.setHeaderText(treeGridModel.columns, include);\n        var form = this.createElement('form', { id: 'ExportForm' });\n        form.style.display = 'none';\n        var treeGridInput = this.createElement('input', { id: 'treeGridInput', attrs: { name: 'treeGridModel' } });\n        treeGridInput.value = JSON.stringify(treeGridModel);\n        form.method = 'POST';\n        form.action = url;\n        form.appendChild(treeGridInput);\n        document.body.appendChild(form);\n        form.submit();\n        form.remove();\n    };\n    /**\n     * Sets the header text and other properties for an array of columns based on specified criteria.\n     *\n     * @param {Column[]} columns - Defines array of columns\n     * @param {string[]} include - Defines array of sting\n     * @returns {Column[]} returns array of columns\n     */\n    TreeGrid.prototype.setHeaderText = function (columns, include) {\n        for (var i = 0; i < columns.length; i++) {\n            var column = this.getColumnByUid(columns[parseInt(i.toString(), 10)].uid);\n            if (this.stackedHeader && isNullOrUndefined(column)) {\n                column = !isNullOrUndefined(columns[parseInt(i.toString(), 10)].field) ?\n                    this.getColumnByField(columns[parseInt(i.toString(), 10)].field) : columns[parseInt(i.toString(), 10)];\n            }\n            columns[parseInt(i.toString(), 10)].headerText = column.headerText;\n            if (!isNullOrUndefined(column.template)) {\n                columns[parseInt(i.toString(), 10)].template = 'true';\n            }\n            if (columns[parseInt(i.toString(), 10)].format) {\n                columns[parseInt(i.toString(), 10)].format = getNumberFormat(this.getFormat(column.format), column.type, false, this.currencyCode);\n                if (!this.isExcel && (column.type === 'datetime' || column.type === 'date')) {\n                    columns[parseInt(i.toString(), 10)].format = columns[parseInt(i.toString(), 10)].format.toString().replace('AM/PM', 'tt');\n                }\n                columns[parseInt(i.toString(), 10)].type = column.type;\n            }\n            if (columns[parseInt(i.toString(), 10)].columns) {\n                this.setHeaderText(columns[parseInt(i.toString(), 10)].columns, include);\n            }\n            var keys = Object.keys(columns[parseInt(i.toString(), 10)]);\n            for (var j = 0; j < keys.length; j++) {\n                if (include.indexOf(keys[parseInt(j.toString(), 10)]) < 0) {\n                    delete columns[parseInt(i.toString(), 10)][keys[parseInt(j.toString(), 10)]];\n                }\n            }\n        }\n        return columns;\n    };\n    /**\n     * Retrieves the appropriate format string from the given format options.\n     *\n     * @param {string | NumberFormatOptions | DateFormatOptions} format - The format options to retrieve the format string from.\n     * @returns {string} The format string extracted from the provided format options.\n     */\n    TreeGrid.prototype.getFormat = function (format) {\n        return typeof (format) === 'object' ? !isNullOrUndefined(format.format) ?\n            format.format : format.skeleton : format;\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns TreeGrid module name\n     */\n    TreeGrid.prototype.getModuleName = function () {\n        return 'treegrid';\n    };\n    /**\n     * For internal use only - Initialize the event handler;\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.preRender = function () {\n        this.TreeGridLocale();\n        this.initProperties();\n        this.defaultLocale = {\n            Above: 'Above',\n            Below: 'Below',\n            Child: 'Child',\n            AddRow: 'Add Row',\n            ExpandAll: 'Expand All',\n            CollapseAll: 'Collapse All',\n            RowIndent: 'Indent',\n            RowOutdent: 'Outdent'\n        };\n        this.l10n = new L10n('treegrid', this.defaultLocale, this.locale);\n        if (this.isSelfReference && isNullOrUndefined(this.childMapping)) {\n            this.childMapping = 'Children';\n        }\n    };\n    /**\n     * Sorts a column with the specified options.\n     *\n     * @param {string} columnName - The name of the column to be sorted.\n     * @param {SortDirection} direction - The direction of the sorting operation.\n     * @param {boolean} isMultiSort - Specifies whether previous sorted columns should be maintained during sorting.\n     * @returns {void}\n     */\n    TreeGrid.prototype.sortByColumn = function (columnName, direction, isMultiSort) {\n        if (this.sortModule) {\n            this.sortModule.sortColumn(columnName, direction, isMultiSort);\n        }\n    };\n    /**\n     * Clears all the sorted columns in the TreeGrid.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.clearSorting = function () {\n        if (this.sortModule) {\n            this.sortModule.clearSorting();\n        }\n    };\n    /**\n     * Removes the sorted state from a column specified by the field name.\n     *\n     * @param {string} field - The field name of the column from which the sort state should be removed.\n     * @returns {void}\n     * @hidden\n     */\n    TreeGrid.prototype.removeSortColumn = function (field) {\n        if (this.sortModule) {\n            this.sortModule.removeSortColumn(field);\n        }\n    };\n    /**\n     * Searches for TreeGrid records using a specified search string.\n     * Customize the search behavior through the [searchSettings](./#searchsettings/).\n     *\n     * @param {string} searchString - The string used as the search key.\n     * @returns {void}\n     */\n    TreeGrid.prototype.search = function (searchString) {\n        this.grid.search(searchString);\n    };\n    /**\n     * Adjusts column widths to fit their content, ensuring content is displayed without wrapping or truncation.\n     * - Hidden columns are ignored by this method.\n     * - Use the `autoFitColumns` method during the `dataBound` event for initial rendering.\n     *\n     * @param {string | string[]} fieldNames - The name(s) of the column(s) to be auto-fitted.\n     * @returns {void}\n     */\n    TreeGrid.prototype.autoFitColumns = function (fieldNames) {\n        this.resizeModule.autoFitColumns(fieldNames);\n        this.updateColumnModel();\n    };\n    /**\n     * Reorders TreeGrid columns by specifying their field names.\n     *\n     * @param {string | string[]} fromFName - The field name(s) of the column(s) to be moved.\n     * @param {string} toFName - The destination field name to place the moved columns.\n     * @returns {void}\n     */\n    TreeGrid.prototype.reorderColumns = function (fromFName, toFName) {\n        this.grid.reorderColumns(fromFName, toFName);\n    };\n    TreeGrid.prototype.TreeGridLocale = function () {\n        if (!isNullOrUndefined(this.locale)) {\n            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n            var locale = L10n.locale;\n            var localeObject = {};\n            setValue(this.locale, {}, localeObject);\n            var gridLocale = void 0;\n            gridLocale = {};\n            gridLocale = getObject(this.locale, locale);\n            var treeGridLocale = void 0;\n            treeGridLocale = {};\n            treeGridLocale = getObject(this.getModuleName(), gridLocale);\n            setValue('grid', treeGridLocale, getObject(this.locale, localeObject));\n            L10n.load(localeObject);\n        }\n    };\n    /**\n     * Prints all the pages of the TreeGrid and hides the pager by default.\n     * Customize print options using the [printMode](./#printmode).\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.print = function () {\n        this.printModule.print();\n    };\n    TreeGrid.prototype.treeGridkeyActionHandler = function (e) {\n        if (this.allowKeyboard) {\n            var target = void 0;\n            var parentTarget = void 0;\n            var column = void 0;\n            var row = void 0;\n            var summaryElement = void 0;\n            switch (e.action) {\n                case 'ctrlDownArrow':\n                    this.expandAll();\n                    break;\n                case 'ctrlUpArrow':\n                    this.collapseAll();\n                    break;\n                case 'ctrlShiftUpArrow':\n                    target = e.target;\n                    column = target.closest('.e-rowcell');\n                    if (!isNullOrUndefined(column)) {\n                        row = column.closest('tr');\n                        if (!isNullOrUndefined(row) && !(isNullOrUndefined(row.getElementsByClassName('e-treegridexpand')[0]))) {\n                            this.expandCollapseRequest(row.querySelector('.e-treegridexpand'));\n                        }\n                    }\n                    break;\n                case 'ctrlShiftDownArrow':\n                    target = e.target;\n                    column = target.closest('.e-rowcell');\n                    if (!isNullOrUndefined(column)) {\n                        row = column.closest('tr');\n                        if (!isNullOrUndefined(row) && !(isNullOrUndefined(row.getElementsByClassName('e-treegridcollapse')[0]))) {\n                            this.expandCollapseRequest(row.querySelector('.e-treegridcollapse'));\n                        }\n                    }\n                    break;\n                case 'downArrow':\n                    if (!this.enableVirtualization && isNullOrUndefined(this.rowTemplate)) {\n                        target = e.target;\n                        if (!isNullOrUndefined(target.querySelectorAll('.e-rowcell'))) {\n                            target = parentsUntil(target, 'e-rowcell');\n                        }\n                        if (!isNullOrUndefined(target)) {\n                            parentTarget = target.parentElement;\n                            if (!isNullOrUndefined(parentTarget)) {\n                                var cellIndex = parentTarget.cellIndex;\n                                if (this.grid.getColumnByIndex(cellIndex).editType === 'dropdownedit' && isNullOrUndefined(this.grid.getColumnByIndex(cellIndex).edit['obj'])) {\n                                    parentTarget = target;\n                                }\n                                summaryElement = this.findnextRowElement(parentTarget);\n                                if (summaryElement !== null) {\n                                    var cellIndex_1 = target.cellIndex;\n                                    var row_1 = summaryElement.children[parseInt(cellIndex_1.toString(), 10)];\n                                    if (!isNullOrUndefined(row_1) && !this.grid.isEdit) {\n                                        addClass([row_1], 'e-focused');\n                                        addClass([row_1], 'e-focus');\n                                    }\n                                }\n                                else {\n                                    this.clearSelection();\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 'upArrow':\n                    if (!this.enableVirtualization && isNullOrUndefined(this.rowTemplate)) {\n                        target = e.target;\n                        if (!isNullOrUndefined(target.querySelectorAll('.e-rowcell'))) {\n                            target = parentsUntil(target, 'e-rowcell');\n                        }\n                        if (!isNullOrUndefined(target)) {\n                            parentTarget = target.parentElement;\n                            if (!isNullOrUndefined(parentTarget)) {\n                                var cellIndex = parentTarget.cellIndex;\n                                if (this.grid.getColumnByIndex(cellIndex).editType === 'dropdownedit' && isNullOrUndefined(this.grid.getColumnByIndex(cellIndex).edit['obj'])) {\n                                    parentTarget = target;\n                                }\n                                summaryElement = this.findPreviousRowElement(parentTarget);\n                                if (summaryElement !== null) {\n                                    var cellIndex_2 = target.cellIndex;\n                                    if (!isNullOrUndefined(cellIndex_2)) {\n                                        var row_2 = summaryElement.children[parseInt(cellIndex_2.toString(), 10)];\n                                        if (!isNullOrUndefined(row_2) && !this.grid.isEdit) {\n                                            addClass([row_2], 'e-focused');\n                                            addClass([row_2], 'e-focus');\n                                        }\n                                    }\n                                }\n                                else {\n                                    this.clearSelection();\n                                }\n                            }\n                        }\n                    }\n            }\n        }\n    };\n    // Get Proper Row Element from the summary\n    TreeGrid.prototype.findnextRowElement = function (summaryRowElement) {\n        var rowElement = summaryRowElement.nextElementSibling;\n        if (rowElement !== null && (rowElement.className.indexOf('e-summaryrow') !== -1 ||\n            rowElement.classList.contains('e-childrow-hidden'))) {\n            rowElement = this.findnextRowElement(rowElement);\n        }\n        return rowElement;\n    };\n    // Get Proper Row Element from the summary\n    TreeGrid.prototype.findPreviousRowElement = function (summaryRowElement) {\n        var rowElement = summaryRowElement.previousElementSibling;\n        if (rowElement !== null && (rowElement.className.indexOf('e-summaryrow') !== -1 ||\n            rowElement.classList.contains('e-childrow-hidden'))) {\n            rowElement = this.findPreviousRowElement(rowElement);\n        }\n        return rowElement;\n    };\n    TreeGrid.prototype.initProperties = function () {\n        this.defaultLocale = {};\n        this.flatData = [];\n        this.infiniteScrollData = [];\n        this.remoteCollapsedData = [];\n        this.remoteExpandedData = [];\n        this.parentData = [];\n        this.columnModel = [];\n        this.isExpandAll = false;\n        this.isCollapseAll = false;\n        this.keyConfigs = {\n            ctrlDownArrow: 'ctrl+downarrow',\n            ctrlUpArrow: 'ctrl+uparrow',\n            ctrlShiftUpArrow: 'ctrl+shift+uparrow',\n            ctrlShiftDownArrow: 'ctrl+shift+downarrow',\n            downArrow: 'downArrow',\n            upArrow: 'upArrow'\n        };\n        this.isLocalData = (!(this.dataSource instanceof DataManager) || this.dataSource.dataSource.offline\n            || (!isNullOrUndefined(this.dataSource.ready)) || this.dataSource.adaptor instanceof RemoteSaveAdaptor);\n        this.isSelfReference = !isNullOrUndefined(this.parentIdMapping);\n    };\n    /**\n     * Attaches event handlers to the necessary elements during the component's initialization.\n     *\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.wireEvents = function () {\n        EventHandler.add(this.grid.element, 'click', this.mouseClickHandler, this);\n        EventHandler.add(this.element, 'touchend', this.mouseClickHandler, this);\n        this.keyboardModule = new KeyboardEvents(this.element, {\n            keyAction: this.treeGridkeyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown'\n        });\n        if (this.allowKeyboard) {\n            this.element.tabIndex = this.element.tabIndex === -1 ? 0 : this.element.tabIndex;\n        }\n    };\n    /**\n     * Provides a list of the modules that are required for rendering the TreeGrid component.\n     *\n     * This method is essential for ensuring that all dependent modules are loaded and available\n     * during the component's lifecycle, enabling full functionality.\n     *\n     * @returns {ModuleDeclaration[]} - Returns an array of the required TreeGrid module declarations.\n     * @hidden\n     */\n    TreeGrid.prototype.requiredModules = function () {\n        var modules = [];\n        var splitFrozenCount = 'splitFrozenCount';\n        if (isNullOrUndefined(this['changedProperties'].columns)) {\n            this.grid[\"\" + splitFrozenCount](this.getColumns());\n        }\n        if (this.isDestroyed) {\n            return modules;\n        }\n        modules.push({\n            member: 'filter', args: [this, this.filterSettings],\n            name: 'Filter'\n        });\n        if (!isNullOrUndefined(this.toolbar)) {\n            modules.push({\n                member: 'toolbar',\n                args: [this],\n                name: 'Toolbar'\n            });\n        }\n        if (this.contextMenuItems) {\n            modules.push({\n                member: 'contextMenu',\n                args: [this],\n                name: 'ContextMenu'\n            });\n        }\n        if (this.allowPaging) {\n            modules.push({\n                member: 'pager',\n                args: [this, this.pageSettings],\n                name: 'Page'\n            });\n        }\n        if (this.allowReordering) {\n            modules.push({\n                member: 'reorder',\n                args: [this],\n                name: 'Reorder'\n            });\n        }\n        if (this.allowSorting) {\n            modules.push({\n                member: 'sort',\n                args: [this],\n                name: 'Sort'\n            });\n        }\n        if (this.aggregates.length > 0) {\n            modules.push({\n                member: 'summary', args: [this],\n                name: 'Aggregate'\n            });\n        }\n        if (this.resizeCheck()) {\n            modules.push({\n                member: 'resize', args: [this],\n                name: 'Resize'\n            });\n        }\n        if (this.allowExcelExport) {\n            modules.push({\n                member: 'ExcelExport', args: [this],\n                name: 'ExcelExport'\n            });\n        }\n        var freezePresent = this.injectedModules.filter(function (e) {\n            return e.prototype.getModuleName() === 'freeze';\n        });\n        var hasFreezeProp = Array.isArray(this.columns) &&\n            this.columns.some(function (col) { return !!col.freeze; });\n        if ((this.frozenColumns || this.frozenRows || this.getFrozenColumns() ||\n            hasFreezeProp) && freezePresent.length > 0) {\n            modules.push({\n                member: 'freeze', args: [this],\n                name: 'Freeze'\n            });\n        }\n        if (this.detailTemplate) {\n            modules.push({\n                member: 'detailRow', args: [this],\n                name: 'DetailRow'\n            });\n        }\n        if (this.allowPdfExport) {\n            modules.push({\n                member: 'PdfExport', args: [this],\n                name: 'PdfExport'\n            });\n        }\n        if (this.showColumnMenu) {\n            modules.push({\n                member: 'columnMenu', args: [this],\n                name: 'ColumnMenu'\n            });\n        }\n        if (this.showColumnChooser) {\n            modules.push({\n                member: 'ColumnChooser', args: [this],\n                name: 'ColumnChooser'\n            });\n        }\n        this.extendRequiredModules(modules);\n        return modules;\n    };\n    TreeGrid.prototype.resizeCheck = function () {\n        var columnMenu = this.showColumnMenu && (!this.columnMenuItems || this.columnMenuItems\n            .filter(function (c) { return c === 'AutoFit' || c === 'AutoFitAll'; }).length) ? true : false;\n        var contextMenu = this.contextMenuItems && this.contextMenuItems\n            .filter(function (c) { return c === 'AutoFit' || c === 'AutoFitAll'; }).length ? true : false;\n        return this.allowResizing || columnMenu || contextMenu;\n    };\n    TreeGrid.prototype.extendRequiredModules = function (modules) {\n        var IsRowDDInjected = this.injectedModules.filter(function (e) {\n            return e.prototype.getModuleName() === 'rowDragAndDrop';\n        });\n        if (this.allowRowDragAndDrop || IsRowDDInjected.length) {\n            if ((!isNullOrUndefined(this.toolbar) && (this.toolbar['includes']('Indent') ||\n                this.toolbar['includes']('Outdent')))) {\n                this.isIndentEnabled = true;\n            }\n            modules.push({\n                member: 'rowDragAndDrop',\n                args: [this],\n                name: 'RowDD'\n            });\n        }\n        if (this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) {\n            modules.push({\n                member: 'edit',\n                args: [this],\n                name: 'Edit'\n            });\n        }\n        if (!isNullOrUndefined(this.columns) && this.isCommandColumn(this.columns)) {\n            modules.push({\n                member: 'commandColumn',\n                args: [this],\n                name: 'CommandColumn'\n            });\n        }\n        if (this.allowSelection) {\n            modules.push({\n                member: 'selection',\n                args: [this],\n                name: 'Selection'\n            });\n        }\n        if (this.enableVirtualization) {\n            modules.push({\n                member: 'virtualScroll',\n                args: [this],\n                name: 'VirtualScroll'\n            });\n        }\n        if (this.enableInfiniteScrolling) {\n            modules.push({\n                member: 'infiniteScroll',\n                args: [this],\n                name: 'InfiniteScroll'\n            });\n        }\n        modules.push({\n            member: 'logger',\n            args: [this.grid]\n        });\n    };\n    TreeGrid.prototype.isCommandColumn = function (columns) {\n        var _this = this;\n        return columns.some(function (col) {\n            if (col.columns) {\n                return _this.isCommandColumn(col.columns);\n            }\n            return !!(col.commands || col.commandsTemplate);\n        });\n    };\n    /**\n     * Unbinding events from the element while component destroy.\n     *\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.unwireEvents = function () {\n        if (this.grid && this.grid.element) {\n            EventHandler.remove(this.grid.element, 'click', this.mouseClickHandler);\n        }\n        if (this.element) {\n            EventHandler.remove(this.element, 'touchend', this.mouseClickHandler);\n            if (this.keyboardModule) {\n                this.keyboardModule.destroy();\n                this.keyboardModule = null;\n            }\n            if (this.allowKeyboard) {\n                this.element.removeAttribute('tabIndex');\n            }\n        }\n    };\n    /**\n     * Logs tree grid error message on console\n     *\n     * @param {string | string[]} types - Tree Grid error type\n     * @param {object} args - Error details\n     * @hidden\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.log = function (types, args) {\n        if (this.loggerModule) {\n            this.loggerModule.treeLog(types, args, this);\n        }\n    };\n    /**\n     * For internal use only - To Initialize the component rendering.\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.render = function () {\n        var _this = this;\n        if (this.isReact) {\n            this.grid.isReact = true;\n            this.grid.portals = [];\n        }\n        if (this.isVue) {\n            this.grid.isVue = true;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.grid.vueInstance = this.vueInstance;\n        }\n        createSpinner({ target: this.element }, this.createElement);\n        this.log(['mapping_fields_missing']);\n        this.renderModule = new Render(this);\n        this.dataModule = new DataManipulation(this);\n        this.printModule = new Print(this);\n        this.trigger(events.load);\n        this.autoGenerateColumns();\n        this.initialRender = true;\n        if (!isNullOrUndefined(this.dataSource)) {\n            this.convertTreeData(this.dataSource);\n        }\n        this.loadGrid();\n        if (this.element.classList.contains('e-treegrid') && this.rowDropSettings.targetID) {\n            this.grid.rowDropSettings.targetID += '_gridcontrol';\n        }\n        this.addListener();\n        var gridContainer = createElement('div', { id: this.element.id + '_gridcontrol', className: 'e-treelistgrid' });\n        addClass([this.element], 'e-treegrid');\n        if (!isNullOrUndefined(this.height) && typeof (this.height) === 'string' && this.height.indexOf('%') !== -1) {\n            this.element.style.height = this.height;\n        }\n        if (!isNullOrUndefined(this.width) && typeof (this.width) === 'string' && this.width.indexOf('%') !== -1) {\n            this.element.style.width = this.width;\n        }\n        this.element.appendChild(gridContainer);\n        var gridRequiredModules = this.grid.requiredModules;\n        this.grid.requiredModules = function () {\n            var modules = [];\n            modules = gridRequiredModules.apply(this);\n            for (var i = 0; i < modules.length; i++) {\n                if (modules[parseInt(i.toString(), 10)].member === 'virtualscroll') {\n                    modules[parseInt(i.toString(), 10)].member = 'treeVirtualScroll';\n                }\n            }\n            return modules;\n        };\n        var root = 'root';\n        this.grid[\"\" + root] = this[\"\" + root] ? this[\"\" + root] : this;\n        this.grid.appendTo(gridContainer);\n        this.actionFailureHandler();\n        var gridContent = this.element.getElementsByClassName('e-gridcontent')[0].childNodes[0];\n        gridContent.setAttribute('tabindex', '0');\n        var contentTable = this.element.getElementsByClassName('e-content')[0].querySelector('.e-table');\n        if (!isNullOrUndefined(contentTable)) {\n            contentTable.setAttribute('role', 'treegrid');\n        }\n        if (this.isIndentEnabled) {\n            this.refreshToolbarItems();\n        }\n        this.wireEvents();\n        this.renderComplete();\n        var destroyTemplate = 'destroyTemplate';\n        var destroyTemplateFn = this.grid[\"\" + destroyTemplate];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.grid[\"\" + destroyTemplate] = function (args, index) {\n            destroyTemplateFn.apply(_this.grid);\n            var portals = 'portals';\n            if (!(_this.isReact && isNullOrUndefined(_this[\"\" + portals]))) {\n                _this.clearTemplate(args, index);\n            }\n        };\n    };\n    TreeGrid.prototype.actionFailureHandler = function () {\n        var _this = this;\n        var failureCases = [];\n        var primaryKeyFieldNames = this.getPrimaryKeyFieldNames();\n        var RecordsCount = this.flatData.length;\n        if ((this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing)\n            && primaryKeyFieldNames.length === 0 && RecordsCount !== 0) {\n            failureCases.push('For the CRUD actions, it is necessary to enable Primary Key field for the unique data column.');\n        }\n        if (this.allowRowDragAndDrop && primaryKeyFieldNames.length === 0 && RecordsCount !== 0) {\n            failureCases.push('For the Row Drag and Drop actions, it is necessary to enable Primary Key field for the unique data column.');\n        }\n        if (this.allowPaging && this.enableVirtualization) {\n            failureCases.push('Paging is not allowed in virtualization case.');\n        }\n        if (RecordsCount === 0 && this.columns.length === 0) {\n            failureCases.push('Either of the Data source or columns should be given.');\n        }\n        if (this.frozenColumns > 0 && this.columnModel.filter(function (col) { return col.isFrozen; })) {\n            failureCases.push('Use only one attribute for Frozen either IsFrozen or FrozenColumns.');\n        }\n        if (this.enableVirtualization && !isNullOrUndefined(this.detailTemplate)) {\n            failureCases.push('Virtual scrolling is not compatible with the detail template');\n        }\n        if ((this.frozenColumns > 0 || this.frozenRows > 0 || this.columnModel.filter(function (col) { return col.isFrozen; }))\n            && (!isNullOrUndefined(this.detailTemplate) || !isNullOrUndefined(this.rowTemplate))) {\n            failureCases.push('Frozen rows and columns are not supported with the Detail template and row template.');\n        }\n        if ((this.frozenColumns > 0 || this.columnModel.filter(function (col) { return col.isFrozen; }).length > 0 || this.frozenRows > 0) && this.editSettings.mode === 'Cell') {\n            failureCases.push('Frozen rows and columns are not supported with cell editing.');\n        }\n        if (this.allowSelection && !isNullOrUndefined(this.rowTemplate)) {\n            failureCases.push('Selection is not supported in RowTemplate');\n        }\n        if (this.treeColumnIndex >= this.columns.length) {\n            failureCases.push('TreeColumnIndex value should not exceed the total column count.');\n        }\n        if (this.enableVirtualization &&\n            (this.columnModel.some(function (col) { return /%$/.test(col.width); }) ||\n                /%$/.test(this.height.toString()))) {\n            failureCases.push('column width and height should be in pixels');\n        }\n        if ((this.childMapping !== 'Children') && !isNullOrUndefined(this.idMapping)) {\n            failureCases.push('Both IdMapping and ChildMapping should not be used together for tree grid rendering.');\n        }\n        if ((!isNullOrUndefined(this.idMapping) && (isNullOrUndefined(this.parentIdMapping))) ||\n            ((isNullOrUndefined(this.idMapping) && (!isNullOrUndefined(this.parentIdMapping))))) {\n            failureCases.push('IdMapping and ParentIdMapping properties should be defined and vice versa.');\n        }\n        var checkboxColumn = this.columnModel.filter(function (col) { return col.showCheckbox; });\n        var treeColumn = this.columns[this.treeColumnIndex];\n        if (checkboxColumn.length !== 0) {\n            if (checkboxColumn !== treeColumn) {\n                failureCases.push('ShowCheckbox column should not be defined other than the tree column.');\n            }\n            if (checkboxColumn.length > 1) {\n                failureCases.push('Only one column can have the ShowCheckbox option enabled.');\n            }\n        }\n        var alignColumn;\n        if (this.treeColumnIndex !== null && this.treeColumnIndex !== -1) {\n            alignColumn = this.columnModel.filter(function (col) { return col.textAlign === 'Right' && col.field === _this.columnModel[_this.treeColumnIndex].field; });\n            if (alignColumn.length !== 0) {\n                failureCases.push('TextAlign right for the tree column is not applicable.');\n            }\n        }\n        if (failureCases.length > 0) {\n            var failureEventArgs_1 = {\n                error: {}\n            };\n            failureCases.forEach(function (failureCase, index) {\n                failureEventArgs_1.error[parseInt(index.toString(), 10)] = failureCase;\n            });\n            this.trigger(events.actionFailure, failureEventArgs_1);\n        }\n    };\n    TreeGrid.prototype.refreshToolbarItems = function () {\n        var toolbarElement = this.toolbarModule.getToolbar();\n        var indentID = this.element.id + '_gridcontrol_indent';\n        var outdentID = this.element.id + '_gridcontrol_outdent';\n        var indentElement = toolbarElement.querySelector('#' + indentID).parentElement;\n        var outdentElement = toolbarElement.querySelector('#' + outdentID).parentElement;\n        indentElement.classList.add('e-hidden');\n        outdentElement.classList.add('e-hidden');\n    };\n    TreeGrid.prototype.afterGridRender = function () {\n        if (!isNullOrUndefined(this.grid.clipboardModule)) {\n            this.grid.clipboardModule.destroy();\n        }\n        this.clipboardModule = this.grid.clipboardModule = new TreeClipboard(this, this.grid.serviceLocator);\n    };\n    TreeGrid.prototype.convertTreeData = function (data) {\n        var _this = this;\n        if (isCountRequired(this)) {\n            data = getValue('result', data);\n        }\n        if (data instanceof Array && data.length > 0 && Object.prototype.hasOwnProperty.call(data[0], 'level')) {\n            this.flatData = data;\n            this.flatData.filter(function (e) {\n                setValue('uniqueIDCollection.' + e.uniqueID, e, _this);\n                if (e.level === 0 && !_this.parentData.some(function (record) { return record.uniqueID === e.uniqueID; })) {\n                    _this.parentData.push(e);\n                }\n            });\n        }\n        else {\n            if (isCountRequired(this)) {\n                var griddata = getValue('result', this.dataSource);\n                this.dataModule.convertToFlatData(griddata);\n            }\n            else {\n                this.dataModule.convertToFlatData(data);\n            }\n        }\n    };\n    // private getGridData(): Object {\n    //   if (isRemoteData(this)) {\n    //     return this.dataSource;\n    //   } else if (this.isLocalData && this.dataSource instanceof DataManager) {\n    //     this.dataSource.dataSource.json = this.flatData;\n    //     return this.dataSource;\n    //   }\n    //   return this.flatData;\n    // }\n    TreeGrid.prototype.bindGridProperties = function () {\n        this.bindedDataSource();\n        this.grid.enableRtl = this.enableRtl;\n        this.grid.allowKeyboard = this.allowKeyboard;\n        this.grid.columns = this.getGridColumns(this.columns);\n        this.grid.allowExcelExport = this.allowExcelExport;\n        this.grid.allowPdfExport = this.allowPdfExport;\n        this.grid.query = this.query;\n        this.grid.columnQueryMode = this.columnQueryMode;\n        this.grid.allowPaging = this.allowPaging;\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.pageSettings = getActualProperties(this.pageSettings);\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.pagerTemplate = this.pagerTemplate;\n        this.grid.showColumnMenu = this.showColumnMenu;\n        this.grid.allowSorting = this.allowSorting;\n        this.grid.allowFiltering = this.allowFiltering;\n        this.grid.enableVirtualization = this.enableVirtualization;\n        this.grid.enableColumnVirtualization = this.enableColumnVirtualization;\n        this.grid.enableInfiniteScrolling = this.enableInfiniteScrolling;\n        this.grid.infiniteScrollSettings = this.infiniteScrollSettings;\n        this.grid.enableVirtualMaskRow = this.enableVirtualMaskRow;\n        this.grid.loadingIndicator = this.loadingIndicator;\n        this.grid.width = this.width;\n        this.grid.height = this.height;\n        this.grid.enableAltRow = this.enableAltRow;\n        this.grid.allowReordering = this.allowReordering;\n        this.grid.allowTextWrap = this.allowTextWrap;\n        this.grid.allowResizing = this.allowResizing;\n        this.grid.enableHover = this.enableHover;\n        this.grid.enableAutoFill = this.enableAutoFill;\n        this.grid.enableAdaptiveUI = this.enableAdaptiveUI;\n        this.grid.enableImmutableMode = this.enableImmutableMode;\n        this.grid.allowRowDragAndDrop = this.allowRowDragAndDrop;\n        this.grid.rowDropSettings = getActualProperties(this.rowDropSettings);\n        this.grid.rowHeight = this.rowHeight;\n        this.grid.gridLines = this.gridLines;\n        this.grid.allowSelection = this.allowSelection;\n        this.grid.toolbar = getActualProperties(this.getGridToolbar());\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.toolbarTemplate = this.toolbarTemplate;\n        this.grid.showColumnChooser = this.showColumnChooser;\n        this.grid.filterSettings = getActualProperties(this.filterSettings);\n        this.grid.selectionSettings = getActualProperties(this.selectionSettings);\n        this.grid.sortSettings = getActualProperties(this.sortSettings);\n        this.grid.searchSettings = getActualProperties(this.searchSettings);\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.aggregates = getActualProperties(this.aggregates);\n        this.grid.textWrapSettings = getActualProperties(this.textWrapSettings);\n        this.grid.printMode = getActualProperties(this.printMode);\n        this.grid.locale = getActualProperties(this.locale);\n        this.grid.selectedRowIndex = this.selectedRowIndex;\n        this.grid.contextMenuItems = getActualProperties(this.getContextMenu());\n        this.grid.columnMenuItems = getActualProperties(this.columnMenuItems);\n        this.grid.editSettings = this.getGridEditSettings();\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.rowTemplate = getActualProperties(this.rowTemplate);\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        this.grid.detailTemplate = getActualProperties(this.detailTemplate);\n        this.grid.frozenRows = this.frozenRows;\n        this.grid.frozenColumns = this.frozenColumns;\n        this.grid.clipMode = getActualProperties(this.clipMode);\n        var templateInstance = 'templateDotnetInstance';\n        this.grid[\"\" + templateInstance] = this[\"\" + templateInstance];\n        var isJsComponent = 'isJsComponent';\n        this.grid[\"\" + isJsComponent] = true;\n        var enableHtmlSanitizer = 'enableHtmlSanitizer';\n        this.grid[\"\" + enableHtmlSanitizer] = this.enableHtmlSanitizer;\n    };\n    TreeGrid.prototype.triggerEvents = function (args) {\n        this.trigger(getObject('name', args), args);\n    };\n    TreeGrid.prototype.IsExpandCollapseClicked = function (args) {\n        if (!this.isFromChartSide && !isNullOrUndefined(args.target) && (args.target.classList.contains('e-treegridexpand')\n            || args.target.classList.contains('e-treegridcollapse') || args.target.classList.contains('e-summarycell'))\n            && !this.selectionSettings.checkboxOnly) {\n            if ((!isNullOrUndefined(args.data) && args.data['hasChildRecords']) || (args.rowIndex !== -1 && isNullOrUndefined(args.data))) {\n                args.cancel = true;\n                return;\n            }\n        }\n    };\n    TreeGrid.prototype.bindGridEvents = function () {\n        var _this = this;\n        this.grid.rowSelecting = function (args) {\n            _this.IsExpandCollapseClicked(args);\n            if (!isNullOrUndefined(args.data) && _this.selectionSettings.persistSelection\n                && _this.columnModel.filter(function (col) { return col.type === 'checkbox'; }).length > 0 && isRemoteData(_this)) {\n                if (!isNullOrUndefined(args.data.parentItem) || args.isHeaderCheckboxClicked) {\n                    _this.parentQuery = _this.query.queries.filter(function (q) { return q.e.field === _this.parentIdMapping; });\n                    _this.query.queries = _this.query.queries.slice(0, 0);\n                }\n            }\n            if (_this.pageSettings.pageSizeMode === 'Root') {\n                _this.grid.selectionModule['totalRecordsCount'] = _this.grid.currentViewData.length;\n            }\n            if (!args.cancel) {\n                _this.trigger(events.rowSelecting, args);\n            }\n        };\n        this.grid.rowDeselecting = function (args) {\n            _this.IsExpandCollapseClicked(args);\n            if (!isNullOrUndefined(args.data) && _this.selectionSettings.persistSelection\n                && _this.columnModel.filter(function (col) { return col.type === 'checkbox'; }).length > 0 && isRemoteData(_this)) {\n                _this.parentQuery = _this.query.queries.filter(function (q) { return q.e.field === _this.parentIdMapping; });\n                _this.query.queries = _this.query.queries.slice(0, 0);\n            }\n            _this.trigger(events.rowDeselecting, args);\n        };\n        this.grid.rowSelected = function (args) {\n            if (_this.enableVirtualization) {\n                _this.virtualScrollModule.updateSelection(args);\n            }\n            _this.selectedRowIndex = _this.grid.selectedRowIndex;\n            _this.notify(events.rowSelected, args);\n            _this.trigger(events.rowSelected, args);\n        };\n        this.grid.rowDeselected = function (args) {\n            _this.selectedRowIndex = _this.grid.selectedRowIndex;\n            if (!isNullOrUndefined(args.data)) {\n                _this.notify(events.rowDeselected, args);\n            }\n            _this.trigger(events.rowDeselected, args);\n        };\n        this.grid.resizeStop = function (args) {\n            _this.updateColumnModel();\n            _this.trigger(events.resizeStop, args);\n        };\n        this.grid.excelQueryCellInfo = function (args) {\n            _this.notify('excelCellInfo', args);\n            args = _this.dataResults;\n        };\n        this.grid.pdfQueryCellInfo = function (args) {\n            _this.notify('pdfCellInfo', args);\n            args = _this.dataResults;\n        };\n        this.grid.checkBoxChange = function (args) {\n            _this.trigger(events.checkboxChange, args);\n        };\n        this.grid.pdfExportComplete = this.triggerEvents.bind(this);\n        this.grid.excelExportComplete = this.triggerEvents.bind(this);\n        this.grid.excelHeaderQueryCellInfo = this.triggerEvents.bind(this);\n        this.grid.pdfHeaderQueryCellInfo = this.triggerEvents.bind(this);\n        this.grid.dataSourceChanged = this.triggerEvents.bind(this);\n        this.grid.recordDoubleClick = this.triggerEvents.bind(this);\n        this.grid.cellDeselected = this.triggerEvents.bind(this);\n        this.grid.cellDeselecting = this.triggerEvents.bind(this);\n        this.grid.columnMenuOpen = this.triggerEvents.bind(this);\n        this.grid.columnMenuClick = this.triggerEvents.bind(this);\n        this.grid.cellSelected = this.triggerEvents.bind(this);\n        this.grid.headerCellInfo = this.triggerEvents.bind(this);\n        this.grid.resizeStart = this.triggerEvents.bind(this);\n        this.grid.resizing = this.triggerEvents.bind(this);\n        this.grid.columnDrag = this.triggerEvents.bind(this);\n        this.grid.columnDragStart = this.triggerEvents.bind(this);\n        this.grid.columnDrop = this.triggerEvents.bind(this);\n        this.grid.beforePrint = this.triggerEvents.bind(this);\n        this.grid.beforeCopy = this.triggerEvents.bind(this);\n        this.grid.beforePaste = function (args) {\n            var rows = _this.getRows();\n            var rowIndex = 'rowIndex';\n            while (rows[args[\"\" + rowIndex]].classList.contains('e-summaryrow')) {\n                args[\"\" + rowIndex]++;\n            }\n            _this.trigger(events.beforePaste, args);\n        };\n        this.grid.load = function () {\n            _this.grid.on('initial-end', _this.afterGridRender, _this);\n            if (!isNullOrUndefined(_this.loggerModule)) {\n                var loggerModule = 'loggerModule';\n                _this.loggerModule = _this.grid[\"\" + loggerModule] = new TreeLogger(_this.grid);\n            }\n        };\n        this.grid.printComplete = this.triggerEvents.bind(this);\n        this.grid.actionFailure = function (args) {\n            _this.trigger(events.actionFailure, args);\n        };\n        this.extendedGridDataBoundEvent();\n        this.extendedGridEvents();\n        this.extendedGridActionEvents();\n        this.extendedGridEditEvents();\n        this.bindGridDragEvents();\n        this.bindCallBackEvents();\n    };\n    TreeGrid.prototype.lastRowBorder = function (visiblerow, isAddBorder) {\n        for (var j = 0; j < visiblerow.cells.length; j++) {\n            if (isAddBorder) {\n                addClass([visiblerow.cells[parseInt(j.toString(), 10)]], 'e-lastrowcell');\n            }\n            else {\n                removeClass([visiblerow.cells[parseInt(j.toString(), 10)]], 'e-lastrowcell');\n            }\n        }\n    };\n    TreeGrid.prototype.isPixelHeight = function () {\n        if (this.height !== 'auto' && this.height.toString().indexOf('%') === -1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    TreeGrid.prototype.extendedGridDataBoundEvent = function () {\n        var _this = this;\n        this.grid.dataBound = function (args) {\n            _this.updateRowTemplate();\n            _this.updateColumnModel();\n            _this.updateAltRow(_this.getRows());\n            _this.notify('dataBoundArg', args);\n            if (isRemoteData(_this) && !isOffline(_this) && !_this.hasChildMapping) {\n                var req = void 0;\n                if (_this.dataResults.result) {\n                    req = 0;\n                }\n                else {\n                    req = 1;\n                }\n                setValue('grid.contentModule.isLoaded', !(req > 0), _this);\n            }\n            if (_this.isPixelHeight() && _this.initialRender) {\n                var rows = _this.getContentTable().rows;\n                var totalRows = [].slice.call(rows);\n                for (var i = totalRows.length - 1; i > 0; i--) {\n                    if (!isHidden(totalRows[parseInt(i.toString(), 10)])) {\n                        if (totalRows[parseInt(i.toString(), 10)].nextElementSibling) {\n                            _this.lastRowBorder(totalRows[parseInt(i.toString(), 10)], true);\n                        }\n                        break;\n                    }\n                }\n            }\n            var action = 'action';\n            if (_this.enableVirtualization && _this.selectionSettings.persistSelection && (_this.dataResults[\"\" + action] === 'expand' || _this.dataResults[\"\" + action] === 'collapse')) {\n                var refreshPersistSelection = 'refreshPersistSelection';\n                _this.grid.selectionModule[\"\" + refreshPersistSelection]();\n                if (_this.grid.selectionSettings.type === 'Single') {\n                    var updateRowSelection = 'updateRowSelection';\n                    var index = _this.getCurrentViewRecords().indexOf(_this.grid.selectionModule['data']);\n                    _this.grid.selectionModule[\"\" + updateRowSelection](_this.getRows()[parseInt(index.toString(), 10)], index);\n                }\n            }\n            if (_this.enableVirtualization && _this.selectionSettings.persistSelection\n                && !isNullOrUndefined(_this.virtualScrollModule.prevSelectedRecord)) {\n                for (var i = 0; i < _this.virtualScrollModule.prevSelectedRecord.length; i++) {\n                    var updateRowSelection = 'updateRowSelection';\n                    var index = \n                    // eslint-disable-next-line max-len\n                    _this.getCurrentViewRecords().indexOf(_this.virtualScrollModule.prevSelectedRecord[parseInt(i.toString(), 10)]);\n                    _this.grid.selectionModule[\"\" + updateRowSelection](_this.getRows()[parseInt(index.toString(), 10)], index);\n                }\n            }\n            _this.trigger(events.dataBound, args);\n            _this.initialRender = false;\n        };\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var treeGrid = this;\n        this.grid.beforeDataBound = function (args) {\n            var dataSource = 'dataSource';\n            var requestType = getObject('action', args);\n            if (((isRemoteData(treeGrid) && !isOffline(treeGrid)) || isCountRequired(this)) && requestType !== 'edit') {\n                treeGrid.notify('updateRemoteLevel', args);\n                args = (treeGrid.dataResults);\n            }\n            else if (treeGrid.flatData.length === 0 && isOffline(treeGrid) && treeGrid.dataSource instanceof DataManager) {\n                var dm = treeGrid.dataSource;\n                treeGrid.dataModule.convertToFlatData(dm.dataSource.json);\n                args.result = treeGrid.grid.dataSource[\"\" + dataSource].json = treeGrid.flatData;\n            }\n            if (!isRemoteData(treeGrid) && !isCountRequired(this) && !isNullOrUndefined(treeGrid.dataSource)) {\n                if (this.isPrinting) {\n                    setValue('isPrinting', true, args);\n                }\n                treeGrid.notify('dataProcessor', args);\n                //args = treeGrid.dataModule.dataProcessor(args);\n            }\n            extend(args, treeGrid.dataResults);\n            if (treeGrid.enableImmutableMode) {\n                args.result = args.result.slice();\n            }\n            if (treeGrid.initialRender) {\n                this.contentModule.objectEqualityChecker = treeGrid.objectEqualityChecker;\n            }\n            // treeGrid.notify(events.beforeDataBound, args);\n            if (!this.isPrinting) {\n                var callBackPromise_1 = new Deferred();\n                treeGrid.trigger(events.beforeDataBound, args, function (beforeDataBoundArgs) {\n                    callBackPromise_1.resolve(beforeDataBoundArgs);\n                });\n                return callBackPromise_1;\n            }\n        };\n        this.grid.log = function (type, args) {\n            if (_this.loggerModule) {\n                _this.loggerModule.log(type, args);\n            }\n        };\n    };\n    TreeGrid.prototype.bindCallBackEvents = function () {\n        var _this = this;\n        this.grid.toolbarClick = function (args) {\n            if ((args.item.id === _this.grid.element.id + '_excelexport' && _this.allowExcelExport === false) ||\n                (args.item.id === _this.grid.element.id + '_pdfexport' && _this.allowPdfExport === false) ||\n                (args.item.id === _this.grid.element.id + '_csvexport' && _this.allowExcelExport === false)) {\n                return;\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(events.toolbarClick, args, function (toolbarargs) {\n                if (!toolbarargs.cancel) {\n                    _this.notify(events.toolbarClick, args);\n                }\n                callBackPromise.resolve(toolbarargs);\n            });\n            return callBackPromise;\n        };\n        this.grid.cellSelecting = function (args) {\n            var actualTarget = 'actualTarget';\n            var target = _this.grid.selectionModule[\"\" + actualTarget];\n            if (!isNullOrUndefined(target) && (target.classList.contains('e-treegridexpand') || target.classList.contains('e-treegridcollapse'))) {\n                args.cancel = true;\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(getObject('name', args), args, function (cellselectingArgs) {\n                callBackPromise.resolve(cellselectingArgs);\n            });\n            return callBackPromise;\n        };\n        this.grid.beginEdit = function (args) {\n            if (!isNullOrUndefined(args.row) && args.row.classList.contains('e-summaryrow')) {\n                args.cancel = true;\n                return;\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(events.beginEdit, args, function (begineditArgs) {\n                callBackPromise.resolve(begineditArgs);\n            });\n            return callBackPromise;\n        };\n    };\n    TreeGrid.prototype.extendedGridEditEvents = function () {\n        var _this = this;\n        this.grid.dataStateChange = function (args) {\n            if (_this.isExpandRefresh) {\n                _this.isExpandRefresh = false;\n                _this.grid.dataSource = { result: _this.flatData, count: getValue('count', _this.grid.dataSource) };\n            }\n            else {\n                if (args.action.requestType !== 'infiniteScroll') {\n                    _this.infiniteScrollData = [];\n                }\n                _this.trigger(events.dataStateChange, args);\n            }\n        };\n        this.grid.cellSave = function (args) {\n            if (_this.grid.isContextMenuOpen()) {\n                var contextitems = _this.grid.contextMenuModule.contextMenu.element.getElementsByClassName('e-selected')[0];\n                if ((isNullOrUndefined(contextitems) || contextitems.id !== _this.element.id + '_gridcontrol_cmenu_Save')) {\n                    args.cancel = true;\n                }\n            }\n            var callBackPromise = new Deferred();\n            _this.trigger(events.cellSave, args, function (cellsaveArgs) {\n                if (!cellsaveArgs.cancel) {\n                    _this.notify(events.cellSave, cellsaveArgs);\n                }\n                callBackPromise.resolve(cellsaveArgs);\n            });\n            return callBackPromise;\n        };\n        this.grid.cellSaved = function (args) {\n            _this.trigger(events.cellSaved, args);\n            _this.notify(events.cellSaved, args);\n        };\n        this.grid.cellEdit = function (args) {\n            var prom = 'promise';\n            var promise = new Deferred();\n            args[\"\" + prom] = promise;\n            _this.notify(events.cellEdit, args);\n            return promise;\n        };\n        this.grid.batchAdd = function (args) {\n            _this.trigger(events.batchAdd, args);\n            _this.notify(events.batchAdd, args);\n        };\n        this.grid.beforeBatchSave = function (args) {\n            _this.trigger(events.beforeBatchSave, args);\n            _this.notify(events.beforeBatchSave, args);\n        };\n        this.grid.beforeBatchAdd = function (args) {\n            _this.trigger(events.beforeBatchAdd, args);\n            _this.notify(events.beforeBatchAdd, args);\n        };\n        this.grid.batchDelete = function (args) {\n            _this.trigger(events.batchDelete, args);\n            _this.notify(events.batchDelete, args);\n        };\n        this.grid.beforeBatchDelete = function (args) {\n            _this.trigger(events.beforeBatchDelete, args);\n            _this.notify(events.beforeBatchDelete, args);\n        };\n        this.grid.batchCancel = function (args) {\n            if (_this.editSettings.mode !== 'Cell') {\n                _this.trigger(events.batchCancel, args);\n            }\n            _this.notify(events.batchCancel, args);\n        };\n    };\n    TreeGrid.prototype.updateRowTemplate = function () {\n        var _this = this;\n        if (this.rowTemplate) {\n            if (this.isReact && this.getContentTable().rows.length === 0) {\n                setTimeout(function () {\n                    _this.treeColumnRowTemplate();\n                    if (_this.enableCollapseAll) {\n                        var currentData = _this.getCurrentViewRecords();\n                        var rows = _this.getContentTable().rows;\n                        for (var i = 0; i < rows.length; i++) {\n                            var args = { data: currentData[parseInt(i.toString(), 10)],\n                                row: rows[parseInt(i.toString(), 10)] };\n                            _this.renderModule.RowModifier(args);\n                        }\n                    }\n                }, 0);\n            }\n            else {\n                this.treeColumnRowTemplate();\n            }\n        }\n    };\n    TreeGrid.prototype.bindedDataSource = function () {\n        var dataSource = 'dataSource';\n        var isDataAvailable = 'isDataAvailable';\n        var adaptor = 'adaptor';\n        var ready = 'ready';\n        if (this.dataSource && isCountRequired(this)) {\n            var data = this.flatData;\n            var datacount = getValue('count', this.dataSource);\n            this.grid.dataSource = { result: data, count: datacount };\n        }\n        else {\n            this.grid.dataSource = !(this.dataSource instanceof DataManager) ?\n                this.flatData : new DataManager(this.dataSource.dataSource, this.dataSource.defaultQuery, this.dataSource.adaptor);\n        }\n        if (this.dataSource instanceof DataManager && (this.dataSource.dataSource.offline || this.dataSource.ready)) {\n            this.grid.dataSource[\"\" + dataSource].json = extendArray(this.dataSource[\"\" + dataSource].json);\n            this.grid.dataSource[\"\" + ready] = this.dataSource.ready;\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            var proxy_1 = this;\n            if (!isNullOrUndefined(this.grid.dataSource[\"\" + ready])) {\n                this.grid.dataSource[\"\" + ready].then(function (e) {\n                    var dm = proxy_1.grid.dataSource;\n                    dm[\"\" + dataSource].offline = true;\n                    dm[\"\" + isDataAvailable] = true;\n                    dm[\"\" + dataSource].json = e.result;\n                    dm[\"\" + adaptor] = new JsonAdaptor();\n                });\n            }\n        }\n    };\n    TreeGrid.prototype.extendedGridActionEvents = function () {\n        var _this = this;\n        this.grid.actionBegin = function (args) {\n            if (args.requestType === 'sorting' && args.target && args.target.parentElement &&\n                args.target.parentElement.classList.contains('e-hierarchycheckbox')) {\n                args.cancel = true;\n            }\n            var requestType = getObject('requestType', args);\n            if (requestType === 'reorder') {\n                _this.notify('getColumnIndex', {});\n            }\n            if (isRemoteData(_this) && _this.enableVirtualization) {\n                if (args.requestType === 'virtualscroll') {\n                    _this.query.expand('VirtualScrollingAction');\n                    _this.showSpinner();\n                }\n                else if (args.requestType === 'searching' && args.searchString === '') {\n                    _this.query.expand('ClearSearchingAction');\n                }\n                else if (args.action === 'clearFilter') {\n                    _this.query.expand('ClearFilteringAction');\n                }\n            }\n            _this.notify('actionBegin', { editAction: args });\n            if (!isRemoteData(_this) && !isNullOrUndefined(_this.filterModule) && !isCountRequired(_this)\n                && (_this.grid.filterSettings.columns.length === 0 && _this.grid.searchSettings.key.length === 0)) {\n                _this.notify('clearFilters', { flatData: _this.grid.dataSource });\n                _this.grid.setProperties({ dataSource: _this.dataResults.result }, true);\n                if (isNullOrUndefined(_this.grid['changedProperties'].dataSource)) {\n                    _this.grid.renderModule.data.dataManager = _this.grid.dataSource instanceof DataManager ?\n                        _this.grid.dataSource :\n                        (isNullOrUndefined(_this.grid.dataSource) ? new DataManager() : new DataManager(_this.grid.dataSource));\n                    _this.grid.renderModule.data.isQueryInvokedFromData = true;\n                    _this.grid.query = _this.grid.query instanceof Query ? _this.grid.query : new Query();\n                }\n            }\n            if (_this.action !== 'indenting' && _this.action !== 'outdenting') {\n                var callBackPromise_2 = new Deferred();\n                _this.trigger(events.actionBegin, args, function (actionArgs) {\n                    if (!actionArgs.cancel) {\n                        _this.notify(events.beginEdit, actionArgs);\n                    }\n                    callBackPromise_2.resolve(actionArgs);\n                });\n                return callBackPromise_2;\n            }\n        };\n        this.grid.actionComplete = function (args) {\n            _this.notify('actioncomplete', args);\n            _this.updateColumnModel();\n            _this.updateTreeGridModel();\n            if (args.requestType === 'reorder') {\n                _this.notify('setColumnIndex', {});\n            }\n            _this.notify('actionComplete', { editAction: args });\n            if (args.requestType === 'add' && (_this.editSettings.newRowPosition !== 'Top' && _this.editSettings.newRowPosition !== 'Bottom')) {\n                _this.notify(events.beginAdd, args);\n            }\n            if (args.requestType === 'batchsave') {\n                _this.notify(events.batchSave, args);\n            }\n            _this.notify('updateGridActions', args);\n            if (args.requestType === 'save' && _this.aggregates.map(function (ag) { return ag.showChildSummary === true; }).length) {\n                _this.grid.refresh();\n            }\n            if (args.action === 'filter') {\n                if (_this.filterModule['currentFilterObject'] !== '' && _this.enableVirtualization && !_this.initialRender && !(isRemoteData(_this) && _this.enableVirtualization)) {\n                    _this.expandAll();\n                }\n            }\n            if (args.requestType === 'searching') {\n                if (_this.searchSettings.key !== '' && _this.enableVirtualization && !_this.initialRender && !(isRemoteData(_this) && _this.enableVirtualization)) {\n                    _this.expandAll();\n                }\n            }\n            if (args.action === 'clearFilter' && _this.enableCollapseAll) {\n                _this.collapseAll();\n            }\n            if (_this.action === 'indenting' || _this.action === 'outdenting') {\n                _this.action = _this.action === 'indenting' ? 'indented' : 'outdented';\n                var selectedItem_1 = [_this.selectedRecords];\n                var actionArgs = {\n                    data: selectedItem_1,\n                    dropIndex: _this.dropIndex,\n                    dropPosition: _this.dropPosition,\n                    modifiedRecords: _this.modifiedRecords,\n                    requestType: _this.action,\n                    row: _this.selectedRows\n                };\n                _this.trigger(events.actionComplete, actionArgs);\n                var currentPageItem = _this.getCurrentViewRecords().filter(function (e) {\n                    return e.uniqueID === selectedItem_1[0].uniqueID;\n                });\n                if (!currentPageItem.length) {\n                    _this.refreshToolbarItems();\n                }\n                _this.action = '';\n                _this.selectedRecords = _this.selectedRows = _this.modifiedRecords = [];\n            }\n            else {\n                if (_this.grid.isFrozenGrid() && _this.enableVirtualization && args['tableName'] === 'movable') {\n                    var movableContent = _this.grid.element.querySelector('.' + literals.movableContent);\n                    var frozenContent = _this.grid.element.querySelector('.' + literals.frozenContent);\n                    movableContent.style.height = frozenContent.style.height = 'auto';\n                }\n                _this.trigger(events.actionComplete, args);\n            }\n        };\n    };\n    TreeGrid.prototype.extendedGridEvents = function () {\n        var _this = this;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var treeGrid = this;\n        this.grid.recordDoubleClick = function (args) {\n            _this.trigger(events.recordDoubleClick, args);\n            _this.notify(events.recordDoubleClick, args);\n        };\n        this.grid.detailDataBound = function (args) {\n            _this.notify('detaildataBound', args);\n            _this.trigger(events.detailDataBound, args);\n        };\n        this.grid.rowDataBound = function (args) {\n            if (isNullOrUndefined(this.isPrinting)) {\n                setValue('isPrinting', false, args);\n            }\n            else {\n                setValue('isPrinting', this.isPrinting, args);\n            }\n            treeGrid.renderModule.RowModifier(args);\n        };\n        this.grid.queryCellInfo = function (args) {\n            if (isNullOrUndefined(this.isPrinting)) {\n                setValue('isPrinting', false, args);\n            }\n            else {\n                setValue('isPrinting', this.isPrinting, args);\n            }\n            treeGrid.renderModule.cellRender(args);\n        };\n        this.grid.contextMenuClick = function (args) {\n            _this.notify(events.contextMenuClick, args);\n            _this.trigger(events.contextMenuClick, args);\n        };\n        this.grid.contextMenuOpen = function (args) {\n            _this.notify(events.contextMenuOpen, args);\n            _this.trigger(events.contextMenuOpen, args);\n        };\n        this.grid.queryCellInfo = function (args) {\n            _this.renderModule.cellRender(args);\n        };\n    };\n    TreeGrid.prototype.bindGridDragEvents = function () {\n        var _this = this;\n        this.grid.rowDragStartHelper = function (args) {\n            _this.trigger(events.rowDragStartHelper, args);\n        };\n        this.grid.rowDragStart = function (args) {\n            _this.trigger(events.rowDragStart, args);\n        };\n        this.grid.rowDrag = function (args) {\n            if (_this.grid.isEdit) {\n                args.cancel = true;\n                return;\n            }\n            _this.notify(events.rowdraging, args);\n            _this.trigger(events.rowDrag, args);\n        };\n        this.grid.rowDrop = function (args) {\n            if (_this.grid.isEdit) {\n                args.cancel = true;\n                return;\n            }\n            _this.notify(events.rowDropped, args);\n            args.cancel = true;\n        };\n    };\n    /**\n     * Renders TreeGrid component\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeGrid.prototype.loadGrid = function () {\n        this.bindGridProperties();\n        this.bindGridEvents();\n        setValue('registeredTemplate', this.registeredTemplate, this.grid);\n        var ref = 'viewContainerRef';\n        setValue('viewContainerRef', this[\"\" + ref], this.grid);\n    };\n    /**\n     * AutoGenerate TreeGrid columns from first record\n     *\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.autoGenerateColumns = function () {\n        if (!this.columns.length && (!this.dataModule.isRemote() && Object.keys(this.dataSource).length)) {\n            this.columns = [];\n            // if (this.dataSource instanceof DataManager) {\n            //   record = (<DataManager>this.dataSource).dataSource.json[0];\n            // } else {\n            var record = this.dataSource[0];\n            // }\n            var keys = Object.keys(record);\n            for (var i = 0; i < keys.length; i++) {\n                if ([this.childMapping, this.parentIdMapping].indexOf(keys[parseInt(i.toString(), 10)]) === -1) {\n                    this.columns.push(keys[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n    };\n    TreeGrid.prototype.getGridEditSettings = function () {\n        var edit = {};\n        var guid = 'guid';\n        edit.allowAdding = this.editSettings.allowAdding;\n        edit.allowEditing = this.editSettings.allowEditing;\n        edit.allowDeleting = this.editSettings.allowDeleting;\n        edit.newRowPosition = this.editSettings.newRowPosition === 'Bottom' ? 'Bottom' : 'Top';\n        edit.allowEditOnDblClick = this.editSettings.allowEditOnDblClick;\n        edit.showConfirmDialog = this.editSettings.showConfirmDialog;\n        edit.template = this.editSettings.template;\n        edit.showDeleteConfirmDialog = this.editSettings.showDeleteConfirmDialog;\n        edit.allowNextRowEdit = this.editSettings.allowNextRowEdit;\n        edit[\"\" + guid] = this.editSettings[\"\" + guid];\n        edit.dialog = this.editSettings.dialog;\n        switch (this.editSettings.mode) {\n            case 'Dialog':\n                edit.mode = this.editSettings.mode;\n                break;\n            case 'Batch':\n                edit.mode = this.editSettings.mode;\n                break;\n            case 'Row':\n                edit.mode = 'Normal';\n                break;\n            case 'Cell':\n                edit.mode = 'Normal';\n                edit.showConfirmDialog = false;\n                break;\n        }\n        return edit;\n    };\n    /**\n     * Defines grid toolbar from treegrid toolbar model\n     *\n     * @hidden\n     * @returns {Object[]} - returns context menu items\n     */\n    TreeGrid.prototype.getContextMenu = function () {\n        if (this.contextMenuItems) {\n            var items = [];\n            for (var i = 0; i < this.contextMenuItems.length; i++) {\n                switch (this.contextMenuItems[parseInt(i.toString(), 10)]) {\n                    case 'AddRow':\n                    case ContextMenuItems.AddRow:\n                        items.push({ text: this.l10n.getConstant('AddRow'),\n                            target: '.e-content', id: this.element.id + '_gridcontrol_cmenu_AddRow',\n                            items: [{ text: this.l10n.getConstant('Above'), id: 'Above' }, { text: this.l10n.getConstant('Below'), id: 'Below' }, { text: this.l10n.getConstant('Child'), id: 'Child' }] });\n                        break;\n                    case 'Indent':\n                    case ContextMenuItems.RowIndent:\n                        items.push({ text: this.l10n.getConstant('RowIndent'),\n                            target: '.e-content', iconCss: 'e-indent e-icons', id: this.element.id + '_gridcontrol_cmenu_Indent' });\n                        break;\n                    case 'Outdent':\n                    case ContextMenuItems.RowOutdent:\n                        items.push({ text: this.l10n.getConstant('RowOutdent'),\n                            target: '.e-content', iconCss: 'e-outdent e-icons', id: this.element.id + '_gridcontrol_cmenu_Outdent' });\n                        break;\n                    default:\n                        items.push(this.contextMenuItems[parseInt(i.toString(), 10)]);\n                }\n            }\n            return items;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Defines grid toolbar from treegrid toolbar model\n     *\n     * @hidden\n     * @returns {Object[]} - Returns toolbar items\n     */\n    TreeGrid.prototype.getGridToolbar = function () {\n        if (this.toolbar) {\n            this.l10n = new L10n('treegrid', this.defaultLocale, this.locale);\n            var items = [];\n            var tooltipText = void 0;\n            for (var i = 0; i < this.toolbar.length; i++) {\n                switch (this.toolbar[parseInt(i.toString(), 10)]) {\n                    case 'Search':\n                    case ToolbarItem.Search:\n                        items.push('Search');\n                        break;\n                    case 'Print':\n                    case ToolbarItem.Print:\n                        items.push('Print');\n                        break;\n                    case 'ExpandAll':\n                    case ToolbarItem.ExpandAll:\n                        tooltipText = this.l10n.getConstant('ExpandAll');\n                        items.push({ text: tooltipText, tooltipText: tooltipText,\n                            prefixIcon: 'e-expand', id: this.element.id + '_gridcontrol_expandall' });\n                        break;\n                    case 'CollapseAll':\n                    case ToolbarItem.CollapseAll:\n                        tooltipText = this.l10n.getConstant('CollapseAll');\n                        items.push({ text: tooltipText,\n                            tooltipText: tooltipText, prefixIcon: 'e-collapse', id: this.element.id + '_gridcontrol_collapseall'\n                        });\n                        break;\n                    case 'Indent':\n                    case ToolbarItem.RowIndent:\n                        tooltipText = this.l10n.getConstant('RowIndent');\n                        items.push({\n                            text: tooltipText, tooltipText: tooltipText,\n                            prefixIcon: 'e-indent', id: this.element.id + '_gridcontrol_indent'\n                        });\n                        break;\n                    case 'Outdent':\n                    case ToolbarItem.RowOutdent:\n                        tooltipText = this.l10n.getConstant('RowOutdent');\n                        items.push({\n                            text: tooltipText, tooltipText: tooltipText,\n                            prefixIcon: 'e-outdent', id: this.element.id + '_gridcontrol_outdent'\n                        });\n                        break;\n                    default:\n                        items.push(this.toolbar[parseInt(i.toString(), 10)]);\n                }\n            }\n            return items;\n        }\n        else {\n            return null;\n        }\n    };\n    TreeGrid.prototype.getGridColumns = function (columns, isEmptyColumnModel, index) {\n        if (isEmptyColumnModel === void 0) { isEmptyColumnModel = true; }\n        if (index === void 0) { index = 0; }\n        var column = columns;\n        var stackedColumn = 'columns';\n        if (isEmptyColumnModel) {\n            this.columnModel = [];\n        }\n        var treeGridColumn;\n        var gridColumn;\n        if (this.columnModel.length === 0) {\n            index = index === 0 ? -1 : index;\n        }\n        var gridColumnCollection = [];\n        for (var i = 0; i < column.length; i++) {\n            index = index + 1;\n            var treeColumn = this.grid.getColumnByUid(column[parseInt(i.toString(), 10)].uid);\n            gridColumn = treeColumn ? treeColumn : {};\n            treeGridColumn = {};\n            if (typeof this.columns[parseInt(i.toString(), 10)] === 'string') {\n                gridColumn.field = treeGridColumn.field = this.columns[parseInt(i.toString(), 10)];\n            }\n            else {\n                for (var _i = 0, _a = Object.keys(column[parseInt(i.toString(), 10)]); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    if (index === this.treeColumnIndex && prop === 'template') {\n                        treeGridColumn[\"\" + prop] = column[parseInt(i.toString(), 10)][\"\" + prop];\n                    }\n                    else if (prop === 'columns' && !isNullOrUndefined(column[parseInt(i.toString(), 10)][\"\" + prop])) {\n                        gridColumn[\"\" + prop] = this.getGridColumns(column[parseInt(i.toString(), 10)][\"\" + prop], false, this.columnModel.length - 1);\n                        treeGridColumn[\"\" + prop] = column[parseInt(i.toString(), 10)][\"\" + prop];\n                    }\n                    else if (this.initialRender && !isNullOrUndefined(treeColumn) && this.enablePersistence && prop === 'edit') {\n                        gridColumn[\"\" + prop] = treeGridColumn[\"\" + prop] = treeColumn[\"\" + prop];\n                    }\n                    else if (!(treeColumn) || prop !== 'sortComparer') {\n                        gridColumn[\"\" + prop] = treeGridColumn[\"\" + prop] = column[parseInt(i.toString(), 10)][\"\" + prop];\n                    }\n                }\n            }\n            if (!treeGridColumn[\"\" + stackedColumn]) {\n                this.columnModel.push(new Column(treeGridColumn));\n            }\n            gridColumnCollection.push(gridColumn);\n            if (!isNullOrUndefined(this.columnModel[this.treeColumnIndex]) && this.enableRtl) {\n                if (gridColumn.field === this.columnModel[this.treeColumnIndex].field) {\n                    if (isNullOrUndefined(this.treeColumnTextAlign)) {\n                        this.treeColumnTextAlign = this.columnModel[this.treeColumnIndex].textAlign;\n                        this.treeColumnField = this.columnModel[this.treeColumnIndex].field;\n                    }\n                    gridColumn.textAlign = 'Right';\n                }\n            }\n        }\n        return gridColumnCollection;\n    };\n    TreeGrid.prototype.lastRowCellBorderUpdated = function () {\n        var rows = this.getContentTable().querySelectorAll('tr.e-row');\n        var visibleRows = Array.from(rows).filter(function (row) { return !row.classList.contains('e-childrow-hidden'); });\n        if (visibleRows.length > 0) {\n            var lastVisibleRow = visibleRows[visibleRows.length - 1];\n            this.lastRowBorder(lastVisibleRow, true);\n        }\n    };\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param {TreeGridModel} newProp - properties details which has to be modified\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.onPropertyChanged = function (newProp) {\n        var properties = Object.keys(newProp);\n        var requireRefresh = false;\n        if (properties.indexOf('columns') > -1 && !isNullOrUndefined(newProp.columns)) {\n            this.refreshColumns();\n        }\n        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n            var prop = properties_1[_i];\n            switch (prop) {\n                case 'treeColumnIndex':\n                    this.grid.refreshColumns();\n                    break;\n                case 'allowPaging':\n                    this.grid.allowPaging = this.allowPaging;\n                    break;\n                case 'pageSettings':\n                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                    this.grid.pageSettings = getActualProperties(this.pageSettings);\n                    requireRefresh = true;\n                    break;\n                case 'enableVirtualization':\n                    this.grid.enableVirtualization = this.enableVirtualization;\n                    break;\n                case 'enableColumnVirtualization':\n                    this.grid.enableColumnVirtualization = this.enableColumnVirtualization;\n                    break;\n                case 'toolbar':\n                    this.grid.toolbar = this.getGridToolbar();\n                    break;\n                case 'allowSelection':\n                    this.grid.allowSelection = this.allowSelection;\n                    break;\n                case 'selectionSettings':\n                    this.grid.selectionSettings = getActualProperties(this.selectionSettings);\n                    break;\n                case 'allowSorting':\n                    this.grid.allowSorting = this.allowSorting;\n                    break;\n                case 'allowMultiSorting':\n                    this.grid.allowMultiSorting = this.allowMultiSorting;\n                    break;\n                case 'sortSettings':\n                    this.grid.sortSettings = getActualProperties(this.sortSettings);\n                    break;\n                case 'searchSettings':\n                    this.grid.searchSettings = getActualProperties(this.searchSettings);\n                    break;\n                case 'allowFiltering':\n                    this.grid.allowFiltering = this.allowFiltering;\n                    break;\n                case 'filterSettings':\n                    if (!this.initialRender) {\n                        this.grid.filterSettings = getActualProperties(this.filterSettings);\n                    }\n                    break;\n                case 'showColumnMenu':\n                    this.grid.showColumnMenu = this.showColumnMenu;\n                    break;\n                case 'allowRowDragAndDrop':\n                    this.grid.allowRowDragAndDrop = this.allowRowDragAndDrop;\n                    break;\n                case 'aggregates':\n                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                    this.grid.aggregates = getActualProperties(this.aggregates);\n                    break;\n                case 'enableInfiniteScrolling':\n                    this.grid.enableInfiniteScrolling = this.enableInfiniteScrolling;\n                    break;\n                case 'dataSource':\n                    this.isLocalData = (!(this.dataSource instanceof DataManager) || (!isNullOrUndefined(this.dataSource.ready))\n                        || this.dataSource.adaptor instanceof RemoteSaveAdaptor);\n                    this.convertTreeData(this.dataSource);\n                    if (this.isLocalData) {\n                        if (isCountRequired(this)) {\n                            var count = getValue('count', this.dataSource);\n                            this.grid.dataSource = { result: this.flatData, count: count };\n                        }\n                        else {\n                            var data = this.dataSource;\n                            this.grid.dataSource = !(data instanceof DataManager) ?\n                                this.flatData : new DataManager(data.dataSource, data.defaultQuery, data.adaptor);\n                        }\n                        if (this.enableVirtualization) {\n                            this.grid.contentModule.isDataSourceChanged = true;\n                        }\n                    }\n                    else {\n                        this.bindedDataSource();\n                        if (this.enableVirtualization) {\n                            this.grid.contentModule.removeEventListener();\n                            this.grid.contentModule.eventListener('on');\n                            this.grid.contentModule.renderTable();\n                        }\n                    }\n                    break;\n                case 'query':\n                    this.grid.query = this.query;\n                    break;\n                case 'enableCollapseAll':\n                    if (newProp[\"\" + prop]) {\n                        this.collapseAll();\n                    }\n                    else {\n                        this.expandAll();\n                    }\n                    break;\n                case 'expandStateMapping':\n                    this.grid.refresh();\n                    break;\n                case 'gridLines':\n                    this.grid.gridLines = this.gridLines;\n                    break;\n                case 'rowTemplate':\n                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                    this.grid.rowTemplate = getActualProperties(this.rowTemplate);\n                    break;\n                case 'frozenRows':\n                    this.grid.frozenRows = this.frozenRows;\n                    break;\n                case 'frozenColumns':\n                    this.grid.frozenColumns = this.frozenColumns;\n                    break;\n                case 'rowHeight':\n                    this.grid.rowHeight = this.rowHeight;\n                    break;\n                case 'height':\n                    if (!isNullOrUndefined(this.height) && typeof (this.height) === 'string' && this.height.indexOf('%') !== -1) {\n                        this.element.style.height = this.height;\n                    }\n                    this.grid.height = this.height;\n                    break;\n                case 'width':\n                    if (!isNullOrUndefined(this.width) && typeof (this.width) === 'string' && this.width.indexOf('%') !== -1) {\n                        this.element.style.width = this.width;\n                    }\n                    this.grid.width = this.width;\n                    break;\n                case 'locale':\n                    this.grid.locale = this.locale;\n                    this.TreeGridLocale();\n                    this.grid.toolbar = this.getGridToolbar();\n                    this.grid.contextMenuItems = this.getContextMenu();\n                    break;\n                case 'selectedRowIndex':\n                    this.grid.selectedRowIndex = this.selectedRowIndex;\n                    break;\n                case 'enableAltRow':\n                    this.grid.enableAltRow = this.enableAltRow;\n                    break;\n                case 'enableHover':\n                    this.grid.enableHover = this.enableHover;\n                    break;\n                case 'enableAutoFill':\n                    this.grid.enableAutoFill = this.enableAutoFill;\n                    break;\n                case 'enableAdaptiveUI':\n                    this.grid.enableAdaptiveUI = this.enableAdaptiveUI;\n                    break;\n                case 'enableImmutableMode':\n                    this.grid.enableImmutableMode = this.enableImmutableMode;\n                    break;\n                case 'allowExcelExport':\n                    this.grid.allowExcelExport = this.allowExcelExport;\n                    break;\n                case 'allowPdfExport':\n                    this.grid.allowPdfExport = this.allowPdfExport;\n                    break;\n                case 'enableRtl':\n                    if (!isNullOrUndefined(this.treeColumnField)) {\n                        this.updateTreeColumnTextAlign();\n                    }\n                    this.grid.enableRtl = this.enableRtl;\n                    break;\n                case 'allowReordering':\n                    this.grid.allowReordering = this.allowReordering;\n                    break;\n                case 'allowResizing':\n                    this.grid.allowResizing = this.allowResizing;\n                    break;\n                case 'textWrapSettings':\n                    this.grid.textWrapSettings = getActualProperties(this.textWrapSettings);\n                    break;\n                case 'allowTextWrap':\n                    this.grid.allowTextWrap = getActualProperties(this.allowTextWrap);\n                    this.grid.refresh();\n                    break;\n                case 'contextMenuItems':\n                    this.grid.contextMenuItems = this.getContextMenu();\n                    break;\n                case 'showColumnChooser':\n                    this.grid.showColumnChooser = this.showColumnChooser;\n                    break;\n                case 'detailTemplate':\n                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                    this.grid.detailTemplate = getActualProperties(this.detailTemplate);\n                    break;\n                case 'columnMenuItems':\n                    this.grid.columnMenuItems = getActualProperties(this.columnMenuItems);\n                    break;\n                case 'editSettings':\n                    if (this.grid.isEdit && this.grid.editSettings.mode === 'Normal' && newProp[\"\" + prop].mode &&\n                        (newProp[\"\" + prop].mode === 'Cell' || newProp[\"\" + prop].mode === 'Row')) {\n                        this.grid.closeEdit();\n                    }\n                    this.grid.editSettings = this.getGridEditSettings();\n                    break;\n            }\n            if (requireRefresh) {\n                this.grid.refresh();\n            }\n        }\n    };\n    TreeGrid.prototype.updateTreeColumnTextAlign = function () {\n        var gridColumn = this.grid.getColumnByField(this.treeColumnField);\n        gridColumn.textAlign = this.enableRtl ? 'Right' : this.treeColumnTextAlign;\n        this.grid.refreshColumns();\n    };\n    /**\n     * Destroys the TreeGrid component by detaching event handlers,\n     * removing attributes and classes, and clearing the component's DOM elements.\n     *\n     * This method ensures that all resources used by the TreeGrid are properly released\n     * and the component is cleaned up from the DOM to prevent memory leaks.\n     *\n     * @method destroy\n     * @returns {void}\n     */\n    TreeGrid.prototype.destroy = function () {\n        var treeGridElement = this.element;\n        if (!treeGridElement) {\n            return;\n        }\n        var hasTreeGridChild = treeGridElement.querySelector('.' + 'e-gridheader') &&\n            treeGridElement.querySelector('.' + 'e-gridcontent') ? true : false;\n        if (hasTreeGridChild) {\n            this.unwireEvents();\n        }\n        this.removeListener();\n        if (hasTreeGridChild) {\n            _super.prototype.destroy.call(this);\n        }\n        if (this.grid) {\n            this.grid.destroy();\n        }\n        if (this.dataModule) {\n            this.dataModule.destroy();\n        }\n        var modules = ['dataModule', 'sortModule', 'renderModule', 'filterModule', 'printModule', 'clipboardModule',\n            'excelExportModule', 'pdfExportModule', 'toolbarModule', 'summaryModule', 'reorderModule', 'resizeModule',\n            'pagerModule', 'keyboardModule', 'columnMenuModule', 'contextMenuModule', 'editModule', 'virtualScrollModule',\n            'selectionModule', 'detailRow', 'rowDragAndDropModule', 'freezeModule'];\n        for (var i = 0; i < modules.length; i++) {\n            if (this[modules[parseInt(i.toString(), 10)]]) {\n                this[modules[parseInt(i.toString(), 10)]] = null;\n            }\n        }\n        this.element.innerHTML = '';\n        this.grid = null;\n    };\n    /**\n     * Updates the TreeGrid model and ensures that the underlying Grid's data model is in sync with TreeGrid.\n     * This method binds current data and settings to the TreeGrid.\n     *\n     * @method dataBind\n     * @returns {void}\n     * @private\n     */\n    TreeGrid.prototype.dataBind = function () {\n        if (isNullOrUndefined(this.grid)) {\n            return;\n        }\n        if (!isNullOrUndefined(this.rowDropSettings.targetID) &&\n            isNullOrUndefined(document.getElementById(this.grid.rowDropSettings.targetID))) {\n            document.getElementById(this.rowDropSettings.targetID).id = this.grid.rowDropSettings.targetID;\n            this.rowDropSettings.targetID = this.grid.rowDropSettings.targetID;\n        }\n        _super.prototype.dataBind.call(this);\n        this.grid.dataBind();\n    };\n    /**\n     * Retrieves the properties of the TreeGrid that should be retained and persisted between sessions.\n     *\n     * The method ensures that user preferences and important settings like paging, sorting, filtering,\n     * column configurations, etc., are preserved and can be restored when the component is re-initialized.\n     *\n     * @returns {string} - Returns persist properties details\n     * @hidden\n     */\n    TreeGrid.prototype.getPersistData = function () {\n        var keyEntity = ['pageSettings', 'sortSettings',\n            'filterSettings', 'columns', 'searchSettings', 'selectedRowIndex', 'treeColumnIndex', 'scrollPosition'];\n        var ignoreOnPersist = {\n            pageSettings: ['template', 'pageSizes', 'pageSizeMode', 'enableQueryString', 'totalRecordsCount', 'pageCount'],\n            filterSettings: ['type', 'mode', 'showFilterBarStatus', 'immediateModeDelay', 'ignoreAccent', 'hierarchyMode'],\n            searchSettings: ['fields', 'operator', 'ignoreCase'],\n            sortSettings: [], columns: [], selectedRowIndex: [], scrollPosition: []\n        };\n        var ignoreOnColumn = ['filter', 'edit', 'filterBarTemplate', 'headerTemplate', 'template',\n            'commandTemplate', 'commands', 'dataSource'];\n        for (var i = 0; i < keyEntity.length; i++) {\n            var currentObject = this[keyEntity[parseInt(i.toString(), 10)]];\n            for (var k = 0, val = ignoreOnPersist[keyEntity[parseInt(i.toString(), 10)]]; (!isNullOrUndefined(val) && k < val.length); k++) {\n                var objVal = val[parseInt(k.toString(), 10)];\n                delete currentObject[\"\" + objVal];\n            }\n        }\n        this.ignoreInArrays(ignoreOnColumn, this.columns);\n        return this.addOnPersist(keyEntity);\n    };\n    TreeGrid.prototype.ignoreInArrays = function (ignoreOnColumn, columns) {\n        for (var i = 0; i < columns.length; i++) {\n            if (columns[parseInt(i.toString(), 10)].columns) {\n                this.ignoreInColumn(ignoreOnColumn, columns[parseInt(i.toString(), 10)]);\n                this.ignoreInArrays(ignoreOnColumn, columns[parseInt(i.toString(), 10)].columns);\n            }\n            else {\n                this.ignoreInColumn(ignoreOnColumn, columns[parseInt(i.toString(), 10)]);\n            }\n        }\n    };\n    TreeGrid.prototype.ignoreInColumn = function (ignoreOnColumn, column) {\n        if (isNullOrUndefined(column.template)) {\n            for (var i = 0; i < ignoreOnColumn.length; i++) {\n                delete column[ignoreOnColumn[parseInt(i.toString(), 10)]];\n                column.filter = {};\n            }\n        }\n    };\n    TreeGrid.prototype.mouseClickHandler = function (e) {\n        var _this = this;\n        if (!isNullOrUndefined(e.touches)) {\n            return;\n        }\n        var target = e.target;\n        if ((target.classList.contains('e-treegridexpand') ||\n            target.classList.contains('e-treegridcollapse')) && (!this.isEditCollapse && !this.grid.isEdit)) {\n            this.expandCollapseRequest(target);\n        }\n        var isEllipsisTooltip = 'isEllipsisTooltip';\n        if ((target.classList.contains('e-treegridexpand') || target.classList.contains('e-treegridcollapse')) &&\n            (this.grid[\"\" + isEllipsisTooltip]())) {\n            this.grid['toolTipObj'].close();\n        }\n        this.isEditCollapse = false;\n        this.notify('checkboxSelection', { target: target });\n        if (this.grid.isCheckBoxSelection && !this.grid.isPersistSelection) {\n            if (this.aggregates.map(function (ag) { return ag.showChildSummary === true; }).length) {\n                var checkedTarget = this.grid.getHeaderContent().querySelector('.e-checkselectall');\n                var checkedLen = this.grid.getSelectedRowIndexes().length;\n                var totalRecords = this.getCurrentViewRecords().length;\n                if (checkedLen === totalRecords) {\n                    var spanEle = checkedTarget.nextElementSibling;\n                    removeClass([spanEle], ['e-stop', 'e-uncheck']);\n                    addClass([spanEle], ['e-check']);\n                }\n            }\n        }\n        if (((target.classList.contains('e-flmenu-cancelbtn') || target.classList.contains('e-flmenu-okbtn')\n            || target.classList.contains('e-content') || target.classList.contains('e-rowcell'))\n            && !isNullOrUndefined(this.grid.filterModule) && this.isReact)) {\n            if (!isNullOrUndefined(this.grid.filterModule['column'])) {\n                if (this.grid.filterModule['column'].filterTemplate) {\n                    var elem = document.getElementById(this.grid.filterModule.filterModule['dlgObj'].element.id);\n                    this.grid.filterModule['fltrDlgDetails'].isOpen = false;\n                    if (this.grid.filterModule.filterModule['dlgObj'] && !this.grid.filterModule.filterModule['dlgObj'].isDestroyed && elem) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        this.clearTemplate(['filterTemplate'], undefined, function () {\n                            _this.grid.filterModule.filterModule['dlgObj'].destroy();\n                        });\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Retrieves all the TreeGrid row elements.\n     *\n     * This method is useful for accessing the HTML representation of the rows for further manipulation or inspection.\n     *\n     * @returns {HTMLTableRowElement[]} - Returns row elements collection\n     */\n    TreeGrid.prototype.getRows = function () {\n        return this.grid.getRows();\n    };\n    /**\n     * Obtains the pager element of the TreeGrid.\n     *\n     * The pager enables navigation between pages when the TreeGrid displays paginated data.\n     *\n     * @returns {Element} - Returns pager element\n     */\n    TreeGrid.prototype.getPager = function () {\n        return this.grid.getPager(); //get element from pager\n    };\n    /**\n     * Adds a new record to the TreeGrid at the specified position or default location.\n     *\n     * @param {Object} data - Object containing the data for the new record. If omitted, an empty row is added.\n     * @param {number} index - The index at which the new row should be added.\n     * @param {RowPosition} position - Specifies the position of the new row (e.g., before, after or child).\n     *\n     * > Requires `editSettings.allowAdding` to be true.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.addRecord = function (data, index, position) {\n        if (this.editModule) {\n            var isAddedRowByMethod = 'isAddedRowByMethod';\n            this.editModule[\"\" + isAddedRowByMethod] = true;\n            this.editModule.addRecord(data, index, position);\n        }\n    };\n    /**\n     * Cancels the current edit operation on the TreeGrid.\n     *\n     * This method discards changes made to the row and exits the edit mode without saving.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.closeEdit = function () {\n        if (this.grid.editModule) {\n            this.editModule['closeEdit']();\n        }\n    };\n    /**\n     * Saves the current cell value changes without committing to the data source.\n     *\n     * This operation persists the changes in the UI but not in the underlying data model.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.saveCell = function () {\n        if (this.grid.editModule) {\n            this.grid.editModule.saveCell();\n        }\n    };\n    /**\n     * Updates the value of a specific cell directly, bypassing the edit mode.\n     *\n     * This method provides a quick way to update the UI and data without user interaction.\n     *\n     * @param {number} rowIndex Defines the row index.\n     * @param {string} field Defines the column field.\n     * @param {string | number | boolean | Date} value - Defines the value to be changed.\n     * @returns {void}\n     */\n    TreeGrid.prototype.updateCell = function (rowIndex, field, value) {\n        if (this.grid.editModule) {\n            this.grid.editModule.updateCell(rowIndex, field, value);\n        }\n    };\n    /**\n     * Updates a specific row with given values directly, skipping the edit state.\n     *\n     * This method allows for bulk updates of row data programmatically.\n     *\n     * @param {number} index - The index of the row to update.\n     * @param {Object} data - The data object containing updated field values.\n     * @returns {void}\n     */\n    TreeGrid.prototype.updateRow = function (index, data) {\n        if (this.grid.editModule) {\n            if (!isNullOrUndefined(index)) {\n                var griddata = this.grid.getCurrentViewRecords()[parseInt(index.toString(), 10)];\n                extend(griddata, data);\n                this.grid.editModule.updateRow(index, griddata);\n            }\n            else {\n                this.grid.editModule.updateRow(index, data);\n            }\n        }\n    };\n    /**\n     * Deletes a record based on specified criteria or the selected record if none specified.\n     *\n     * @param {string} fieldName - The name of the primary key field.\n     * @param {Object} data - The data object representing the record to delete.\n     * @returns {void}\n     *\n     * > Requires `editSettings.allowDeleting` to be true.\n     */\n    TreeGrid.prototype.deleteRecord = function (fieldName, data) {\n        if ((isNullOrUndefined(fieldName) && (isNullOrUndefined(data)) || (this.getSelectedRecords().length <= 0))) {\n            var error = 'The provided value for the fieldName and data is undefined. Please ensure the fieldName and data contains number.';\n            this.trigger(events.actionFailure, { error: error });\n        }\n        if (this.grid.editModule) {\n            this.grid.editModule.deleteRecord(fieldName, data);\n        }\n    };\n    /**\n     * Initiates editing for a specific row using its HTML element.\n     *\n     * This allows for manual control of which row enters edit mode through the UI.\n     *\n     * @param {HTMLTableRowElement} row - The table row element to enter into edit mode.\n     * @returns {void}\n     */\n    TreeGrid.prototype.startEdit = function (row) {\n        if (this.grid.editModule) {\n            this.grid.editModule.startEdit(row);\n        }\n    };\n    /**\n     * Begins editing of a specific cell using row and field indices.\n     *\n     * Customers can programmatically specify which cell to edit without user input.\n     *\n     * @param {number} rowIndex - The index of the row containing the cell.\n     * @param {string} field - The field name of the cell to edit.\n     * @returns {void}\n     */\n    TreeGrid.prototype.editCell = function (rowIndex, field) {\n        if (this.editModule) {\n            this.editModule.editCell(rowIndex, field);\n        }\n    };\n    /**\n     * Enables or disables specified ToolBar items within the TreeGrid.\n     *\n     * This facilitates dynamic control of toolbar actions based on application logic.\n     *\n     * @param {string[]} items - Array of ToolBar item IDs to enable or disable.\n     * @param {boolean} isEnable - Boolean flag to determine whether to enable (true) or disable (false) items.\n     * @returns {void}\n     */\n    TreeGrid.prototype.enableToolbarItems = function (items, isEnable) {\n        if (this.grid.toolbarModule) {\n            this.grid.toolbarModule.enableItems(items, isEnable);\n        }\n    };\n    /**\n     * Commits the edits made to a record in edit mode, updating the data source.\n     *\n     * Use this method to finalize changes for rows in edit mode, ensuring persistence.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.endEdit = function () {\n        if (this.grid.editModule) {\n            this.grid.editModule.endEdit();\n        }\n    };\n    /**\n     * Displays the column chooser at a specified screen position.\n     *\n     * Useful for customizing the visibility of columns interactively via the UI.\n     *\n     * @param {number} x - The X-axis position of the column chooser.\n     * @param {number} y - The Y-axis position of the column chooser.\n     * @returns {void}\n     */\n    TreeGrid.prototype.openColumnChooser = function (x, y) {\n        if (this.columnChooserModule) {\n            this.columnChooserModule.openColumnChooser(x, y);\n        }\n    };\n    /**\n     * Deletes a visible row from the TreeGrid using its HTML element.\n     *\n     * Apply this method when handling row deletions through DOM manipulations.\n     *\n     * @param {HTMLTableRowElement} tr - The table row element to remove.\n     * @returns {void}\n     */\n    TreeGrid.prototype.deleteRow = function (tr) {\n        if (this.grid.editModule) {\n            this.grid.editModule.deleteRow(tr);\n        }\n    };\n    /**\n     * Retrieves the primary key field names used in the TreeGrid.\n     *\n     * This information is crucial for identifying and manipulating unique rows.\n     *\n     * @returns {string[]} - Returns an array of primary key field names.\n     */\n    TreeGrid.prototype.getPrimaryKeyFieldNames = function () {\n        return this.grid.getPrimaryKeyFieldNames();\n    };\n    /**\n     * Updates the value of a specific cell using its primary key for identification.\n     *\n     * Useful for targeted updates that leverage unique identifiers to ensure accuracy.\n     *\n     * @param {string| number} key - The primary key value of the row containing the cell.\n     * @param {string} field - The field name of the cell to update.\n     * @param {string | number | boolean | Date} value - The new value to assign to the specified cell.\n     * @returns {void}\n     */\n    TreeGrid.prototype.setCellValue = function (key, field, value) {\n        this.grid.setCellValue(key, field, value);\n        var rowIndex = this.grid.getRowIndexByPrimaryKey(key);\n        var record = this.getCurrentViewRecords()[parseInt(rowIndex.toString(), 10)];\n        editAction({ value: record, action: 'edit' }, this, this.isSelfReference, record.index, this.grid.selectedRowIndex, field);\n    };\n    /**\n     * Updates the data for a specific row identified by its primary key and refreshes the display.\n     *\n     * Important for keeping the displayed data consistent with the source database or dataset.\n     *\n     * @param {string| number} key - The primary key value of the row to update.\n     * @param {Object} rowData - The new data to apply to the row.\n     * @returns {void}\n     */\n    TreeGrid.prototype.setRowData = function (key, rowData) {\n        var currentRecords = this.getCurrentViewRecords();\n        var primaryKey = this.grid.getPrimaryKeyFieldNames()[0];\n        var level = 0;\n        var record = {};\n        currentRecords.some(function (value) {\n            if (value[\"\" + primaryKey] === key) {\n                record = value;\n                return true;\n            }\n            else {\n                return false;\n            }\n        });\n        level = record.level;\n        rowData.level = level;\n        rowData.index = record.index;\n        rowData.childRecords = record.childRecords;\n        rowData.taskData = record.taskData;\n        rowData.uniqueID = record.uniqueID;\n        rowData.parentItem = record.parentItem;\n        rowData.checkboxState = record.checkboxState;\n        rowData.hasChildRecords = record.hasChildRecords;\n        rowData.parentUniqueID = record.parentUniqueID;\n        rowData.expanded = record.expanded;\n        this.grid.setRowData(key, rowData);\n        var visibleRecords = this.getVisibleRecords();\n        if (visibleRecords.length > 0 && key === (visibleRecords[visibleRecords.length - 1])[\"\" + primaryKey]) {\n            var table = this.getContentTable();\n            var sHeight = table.scrollHeight;\n            var clientHeight = this.getContent().clientHeight;\n            this.lastRowBorder(this.getRows()[currentRecords.indexOf(record)], sHeight <= clientHeight);\n        }\n    };\n    /**\n     * Navigates to a specified page number within the TreeGrid pagination.\n     *\n     * This can be used to programmatically change the page being viewed,\n     * allowing for scripted navigation through data.\n     *\n     * @param {number} pageNo - The page number to navigate to. Must be within valid page range.\n     * @returns {void}\n     */\n    TreeGrid.prototype.goToPage = function (pageNo) {\n        if (this.grid.pagerModule) {\n            this.grid.pagerModule.goToPage(pageNo);\n        }\n    };\n    /**\n     * Updates the external message displayed within the pager component.\n     *\n     * This is useful for showing custom messages or additional information\n     * related to the data set or pagination status.\n     *\n     * @param {string} message - The custom message to display in the pager.\n     * @returns {void}\n     */\n    TreeGrid.prototype.updateExternalMessage = function (message) {\n        if (this.pagerModule) {\n            this.grid.pagerModule.updateExternalMessage(message);\n        }\n    };\n    /**\n     * Retrieves a cell element based on its row and column indices in the TreeGrid.\n     *\n     * This method is helpful for accessing cell-level elements for custom\n     * operations or styling.\n     *\n     * @param {number} rowIndex - The index of the row containing the cell.\n     * @param {number} columnIndex - The index of the column containing the cell.\n     * @returns {Element} - Returns the HTML element of the specified cell.\n     */\n    TreeGrid.prototype.getCellFromIndex = function (rowIndex, columnIndex) {\n        return this.grid.getCellFromIndex(rowIndex, columnIndex);\n    };\n    /**\n     * Retrieves a column object by the column's field name.\n     *\n     * This is typically used for obtaining the details of a column for\n     * configuration or data manipulation purposes.\n     *\n     * @param {string} field - The field name of the column.\n     * @returns {Column} - Returns the column object corresponding to the field.\n     */\n    TreeGrid.prototype.getColumnByField = function (field) {\n        return iterateArrayOrObject(this.columnModel, function (item) {\n            if (item.field === field) {\n                return item;\n            }\n            return undefined;\n        })[0];\n    };\n    /**\n     * Fetches a column object using the column's unique identifier (UID).\n     *\n     * Useful in scenarios where columns do not have unique field names but\n     * are uniquely identifiable via UID.\n     *\n     * @param {string} uid - The unique identifier for the column.\n     * @returns {Column} - Returns the column object for the given UID.\n     */\n    TreeGrid.prototype.getColumnByUid = function (uid) {\n        var Columns = this.initialRender ? this.grid.columns : this.columns;\n        var columnModel = 'columnModel';\n        if (this.grid.columns.length !== this.columnModel.length) {\n            Columns = this.grid[\"\" + columnModel];\n        }\n        return iterateArrayOrObject(Columns, function (item) {\n            if (item.uid === uid) {\n                return item;\n            }\n            return undefined;\n        })[0];\n    };\n    /**\n     * Retrieves the names of all column fields in the TreeGrid.\n     *\n     * This method provides a list of field names useful for dynamic operations\n     * or configuration where fields need to be enumerated or manipulated.\n     *\n     * @returns {string[]} - Returns an array of column field names.\n     */\n    TreeGrid.prototype.getColumnFieldNames = function () {\n        return this.grid.getColumnFieldNames();\n    };\n    /**\n     * Retrieves the footer content element of the TreeGrid, usually for styling or custom manipulation.\n     *\n     * This can be used to access the footer for adding custom functionality\n     * or styling purposes to enhance user interaction at the bottom of the grid.\n     *\n     * @returns {Element} - Returns the footer content HTML element.\n     */\n    TreeGrid.prototype.getFooterContent = function () {\n        return this.grid.getFooterContent();\n    };\n    /**\n     * Acquires the footer table element of the TreeGrid for layout management.\n     *\n     * Useful for manipulating the table's structure or style beneath the grid content.\n     *\n     * @returns {Element} - Returns the footer table HTML element.\n     */\n    TreeGrid.prototype.getFooterContentTable = function () {\n        return this.grid.getFooterContentTable();\n    };\n    /**\n     * Shows one or more columns based on the specified column names.\n     *\n     * This is useful for dynamically adjusting the visibility of columns\n     * based on user actions or application logic.\n     *\n     * @param {string|string[]} keys - A single column name or an array of column names to show.\n     * @param {string} showBy - Key to determine visibility either as field name or header text.\n     * @returns {void}\n     */\n    TreeGrid.prototype.showColumns = function (keys, showBy) {\n        this.grid.showColumns(keys, showBy);\n        this.updateColumnModel();\n    };\n    /**\n     * Hides one or more columns based on the specified column names.\n     *\n     * Utilized to dynamically reduce the visibility of columns based on\n     * user roles or preferences.\n     *\n     * @param {string|string[]} keys - A single column name or an array of column names to hide.\n     * @param {string} hideBy - Key to evaluate columns either as field name or header text.\n     * @returns {void}\n     */\n    TreeGrid.prototype.hideColumns = function (keys, hideBy) {\n        this.grid.hideColumns(keys, hideBy);\n        this.updateColumnModel();\n    };\n    /**\n     * Retrieves a column header element based on the field name of the column.\n     *\n     * This method helps to directly manipulate headers, such as applying custom styles.\n     *\n     * @param {string} field - The field name of the desired column.\n     * @returns {Element} - Returns the HTML element of the column header.\n     */\n    TreeGrid.prototype.getColumnHeaderByField = function (field) {\n        return this.grid.getColumnHeaderByField(field);\n    };\n    /**\n     * Acquires the column header element using the column's index.\n     *\n     * Suitable for situations where direct column index is available\n     * and header access is needed for operations.\n     *\n     * @param {number} index - The index of the column.\n     * @returns {Element} - Returns the HTML element of the specified column header.\n     */\n    TreeGrid.prototype.getColumnHeaderByIndex = function (index) {\n        return this.grid.getColumnHeaderByIndex(index);\n    };\n    /**\n     * Retrieves a column header element utilizing the column's UID.\n     *\n     * Useful for precision access to header elements when UIDs are used\n     * uniquely to manage column identities.\n     *\n     * @param {string} uid - The UID of the column.\n     * @returns {Element} - Returns the HTML element of the column header.\n     */\n    TreeGrid.prototype.getColumnHeaderByUid = function (uid) {\n        return this.grid.getColumnHeaderByUid(uid);\n    };\n    /**\n     * Determines the column index by the specified field name.\n     *\n     * Helpful in converting field names to indices for operations that require\n     * numeric input for array or collection indexing.\n     *\n     * @param {string} field - The field name of the column.\n     * @returns {number} - Returns the index of the column.\n     */\n    TreeGrid.prototype.getColumnIndexByField = function (field) {\n        return this.grid.getColumnIndexByField(field);\n    };\n    TreeGrid.prototype.getVirtualColIndexByUid = function (uid) {\n        var columnModel = 'columnModel';\n        var index = iterateArrayOrObject(this.grid[\"\" + columnModel], function (item, index) {\n            if (item.uid === uid) {\n                return index;\n            }\n            return undefined;\n        })[0];\n        return !isNullOrUndefined(index) ? index : -1;\n    };\n    /**\n     * Determines the column index based on the unique identifier (UID).\n     *\n     * This can be crucial in scenarios that involve dynamic column management\n     * where UID provides an accurate reference.\n     *\n     * @param {string} uid - The UID of the column.\n     * @returns {number} - Returns the column index.\n     */\n    TreeGrid.prototype.getColumnIndexByUid = function (uid) {\n        return this.grid.getColumnIndexByUid(uid);\n    };\n    /**\n     * Fetches a collection of columns from the TreeGrid optionally refreshing the column model.\n     *\n     * Use this method to retrieve and optionally refresh the list of columns\n     * to ensure up-to-date configurations and settings.\n     *\n     * @param {boolean} isRefresh - Determines whether to refresh the grid's column model.\n     * @returns {Column[]} - Returns an array of TreeGrid column objects.\n     */\n    TreeGrid.prototype.getColumns = function (isRefresh) {\n        this.updateColumnModel(this.grid.getColumns(isRefresh));\n        return this.columnModel;\n    };\n    TreeGrid.prototype.updateColumnModel = function (column) {\n        var temp;\n        var field;\n        var gridColumns = isNullOrUndefined(column) ? this.grid.getColumns() : column;\n        if (this.treeColumnIndex !== -1 && this.columnModel[this.treeColumnIndex] &&\n            !isNullOrUndefined(this.columnModel[this.treeColumnIndex].template)) {\n            temp = this.columnModel[this.treeColumnIndex].template;\n            field = this.columnModel[this.treeColumnIndex].field;\n        }\n        var gridColumn;\n        if (!this.enableColumnVirtualization || (this.enableColumnVirtualization && this.columnModel.length === gridColumns.length)) {\n            this.columnModel = [];\n            for (var i = 0; i < gridColumns.length; i++) {\n                gridColumn = {};\n                for (var _i = 0, _a = Object.keys(gridColumns[parseInt(i.toString(), 10)]); _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    gridColumn[\"\" + prop] = gridColumns[parseInt(i.toString(), 10)][\"\" + prop];\n                }\n                this.columnModel.push(new Column(gridColumn));\n                if (field === this.columnModel[parseInt(i.toString(), 10)].field && this.columnModel[parseInt(i.toString(), 10)].type !== 'checkbox' && (!isNullOrUndefined(temp) && temp !== '')) {\n                    this.columnModel[parseInt(i.toString(), 10)].template = temp;\n                }\n            }\n        }\n        var deepMerge = 'deepMerge';\n        this[\"\" + deepMerge] = ['columns']; // Workaround for blazor updateModel\n        if (this.grid.columns.length !== this.columnModel.length) {\n            this.stackedHeader = true;\n        }\n        if (this.stackedHeader && !isNullOrUndefined(this.detailTemplate)) {\n            var error = 'Stacked header is not compatible with the detail template';\n            this.trigger(events.actionFailure, { error: error });\n        }\n        if (this.stackedHeader && this.allowResizing && !isNullOrUndefined(this.columns)) {\n            this.updateColumnsWidth(this.columns);\n        }\n        if (!this.stackedHeader && !isNullOrUndefined(this.columns)) {\n            merge(this.columns, this.columnModel);\n        }\n        this[\"\" + deepMerge] = undefined; // Workaround for blazor updateModel\n        return this.columnModel;\n    };\n    TreeGrid.prototype.updateColumnsWidth = function (columns) {\n        var _this = this;\n        columns.forEach(function (column) {\n            if (!isNullOrUndefined(column) && column.columns) {\n                _this.updateColumnsWidth(column.columns);\n            }\n            else if (!isNullOrUndefined(column) && column.field) {\n                var currentColumn = _this.grid.getColumnByField(column.field);\n                if (!isNullOrUndefined(currentColumn)) {\n                    column.width = currentColumn.width;\n                }\n            }\n        });\n    };\n    /**\n     * Retrieves the main content area of the TreeGrid.\n     *\n     * This method allows access to the main content DIV, which can\n     * be used for layout adjustments or adding custom elements.\n     *\n     * @returns {Element} - Returns the TreeGrid content HTML element.\n     */\n    TreeGrid.prototype.getContent = function () {\n        return this.grid.getContent();\n    };\n    TreeGrid.prototype.mergePersistTreeGridData = function () {\n        var persist1 = 'mergePersistGridData';\n        this.grid[\"\" + persist1].apply(this);\n    };\n    TreeGrid.prototype.mergeColumns = function (storedColumn, columns) {\n        var persist2 = 'mergeColumns';\n        this.grid[\"\" + persist2].apply(this, [storedColumn, columns]);\n    };\n    TreeGrid.prototype.setFrozenCount = function () {\n        var persist3 = 'setFrozenCount';\n        this.grid[\"\" + persist3].apply(this.grid);\n    };\n    TreeGrid.prototype.splitFrozenCount = function (columns) {\n        var persist4 = 'splitFrozenCount';\n        this.grid[\"\" + persist4].apply(this.grid, [columns]);\n    };\n    TreeGrid.prototype.isFrozenGrid = function () {\n        return this.grid.isFrozenGrid();\n    };\n    TreeGrid.prototype.updateTreeGridModel = function () {\n        this.setProperties({ filterSettings: getObject('properties', this.grid.filterSettings) }, true);\n        this.setProperties({ pageSettings: getObject('properties', this.grid.pageSettings) }, true);\n        this.setProperties({ searchSettings: getObject('properties', this.grid.searchSettings) }, true);\n        this.setProperties({ sortSettings: getObject('properties', this.grid.sortSettings) }, true);\n    };\n    /**\n     * Retrieves the content table element of the TreeGrid.\n     *\n     * This table contains the main data display area, allowing for\n     * interaction and data manipulation directly within the TreeGrid.\n     *\n     * @returns {Element} - Returns the HTML element representing the content table.\n     */\n    TreeGrid.prototype.getContentTable = function () {\n        return this.grid.getContentTable();\n    };\n    /**\n     * Obtains all data row elements from the TreeGrid, excluding summary rows.\n     *\n     * Provides a way to access the visual representation of data for purposes\n     * like custom formatting or event binding.\n     *\n     * @returns {Element[]} - Returns an array of data row elements.\n     */\n    TreeGrid.prototype.getDataRows = function () {\n        var dRows = [];\n        var rows = this.grid.getDataRows();\n        for (var i = 0, len = rows.length; i < len; i++) {\n            if (!rows[parseInt(i.toString(), 10)].classList.contains('e-summaryrow')) {\n                dRows.push(rows[parseInt(i.toString(), 10)]);\n            }\n        }\n        return dRows;\n    };\n    /**\n     * Retrieves the current set of records that are visible in the TreeGrid view.\n     *\n     * This method excludes any summary rows to focus on the main data set\n     * currently being viewed by the user.\n     *\n     * @returns {Object[]} - Returns an array of the current view records.\n     * @isGenericType true\n     */\n    TreeGrid.prototype.getCurrentViewRecords = function () {\n        var isSummaryRow = 'isSummaryRow';\n        return this.grid.currentViewData.filter(function (e) { return isNullOrUndefined(e[\"\" + isSummaryRow]); });\n    };\n    /**\n     * Collects data changes (added, edited, and deleted) that have not been saved in batch mode.\n     *\n     * This allows you to view pending changes awaiting a commit to the data source.\n     *\n     * @returns {Object} - Returns an object detailing batch changes.\n     */\n    TreeGrid.prototype.getBatchChanges = function () {\n        return this.grid.editModule.getBatchChanges();\n    };\n    /**\n     * Retrieves the header content element of the TreeGrid.\n     *\n     * Mainly used for interacting with the header section, which includes\n     * column headers and any applied header styling or events.\n     *\n     * @returns {Element} - Returns the HTML element for header content.\n     */\n    TreeGrid.prototype.getHeaderContent = function () {\n        return this.grid.getHeaderContent();\n    };\n    /**\n     * Retrieves the header table element of the TreeGrid.\n     *\n     * This method is useful for direct access to the table structure\n     * where column headers are defined.\n     *\n     * @returns {Element} - Returns the HTML element for the header table.\n     */\n    TreeGrid.prototype.getHeaderTable = function () {\n        return this.grid.getHeaderTable();\n    };\n    /**\n     * Fetches a specific row element based on its index in the TreeGrid.\n     *\n     * This provides a way to directly access and manipulate a row using its index.\n     *\n     * @param {number} index - The index of the desired row.\n     * @returns {Element} - Returns the HTML element of the specified row.\n     */\n    TreeGrid.prototype.getRowByIndex = function (index) {\n        return this.grid.getRowByIndex(index);\n    };\n    /**\n     * Provides detailed information about a row based on a specified target element.\n     *\n     * Integral for retrieving metadata such as row index or data object\n     * when working with events or complex tree structures.\n     *\n     * @param {Element | EventTarget} target - The target element or event triggering the request.\n     * @returns {RowInfo} - Returns an object containing row information.\n     */\n    TreeGrid.prototype.getRowInfo = function (target) {\n        return this.grid.getRowInfo(target);\n    };\n    /**\n     * Finds the unique identifier (UID) for a column based on its field name.\n     *\n     * UIDs are essential for precise identification and manipulation within complex grids.\n     *\n     * @param {string} field - The field name of the column.\n     * @returns {string} - Returns the unique identifier for the specified column.\n     */\n    TreeGrid.prototype.getUidByColumnField = function (field) {\n        return this.grid.getUidByColumnField(field);\n    };\n    /**\n     * Retrieves all the columns that are currently set to be visible within the TreeGrid.\n     *\n     * Helps in understanding the user's current view and can be used to dynamically\n     * adjust the visible columns.\n     *\n     * @returns {Column[]} - Returns an array of visible column objects.\n     */\n    TreeGrid.prototype.getVisibleColumns = function () {\n        var cols = [];\n        for (var _i = 0, _a = this.columnModel; _i < _a.length; _i++) {\n            var col = _a[_i];\n            if (col.visible) {\n                cols.push(col);\n            }\n        }\n        return cols;\n    };\n    /**\n     * Displays a loading spinner overlay across the TreeGrid for any data action or long-running process.\n     *\n     * This can be manually invoked to indicate processing, enhancing user experience by providing feedback.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.showSpinner = function () {\n        showSpinner(this.element);\n    };\n    /**\n     * Hides a manually shown loading spinner overlay from the TreeGrid.\n     *\n     * Ensures that any long-running process indication is removed after completion\n     * to manage user interface aesthetics.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.hideSpinner = function () {\n        hideSpinner(this.element);\n    };\n    /**\n     * Refreshes the visual appearance and data of the TreeGrid, updating header and content.\n     *\n     * This is crucial for synchronizing the displayed data with the underlying data source,\n     * ensuring the view reflects current data.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.refresh = function () {\n        this.uniqueIDCollection = {};\n        this.convertTreeData(this.dataSource);\n        if (!isCountRequired(this)) {\n            if (!(this.dataSource instanceof DataManager)) {\n                this.grid.dataSource = this.flatData;\n            }\n            else {\n                this.grid.setProperties({\n                    dataSource: new DataManager(this.dataSource.dataSource, this.dataSource.defaultQuery, this.dataSource.adaptor)\n                }, true);\n            }\n        }\n        this.grid.refresh();\n    };\n    /**\n     * Retrieves the records associated with rows that have their checkboxes checked.\n     *\n     * Facilitates operations that require information about specifically selected or\n     * interacted rows within the grid.\n     *\n     * @returns {Object[]} - Returns an array of checked row data objects.\n     * @isGenericType true\n     */\n    TreeGrid.prototype.getCheckedRecords = function () {\n        return this.selectionModule.getCheckedrecords();\n    };\n    /**\n     * Retrieves currently visible records according to the TreeGrid's visual state.\n     *\n     * It considers row expansion and collapse states to return only those records\n     * that a user can currently interact with.\n     *\n     * @returns {Object[]} - Returns visible records reflecting the TreeGrid's current view.\n     * @isGenericType true\n     */\n    TreeGrid.prototype.getVisibleRecords = function () {\n        var visibleRecords = [];\n        var currentViewRecords = this.getCurrentViewRecords();\n        if (!this.allowPaging) {\n            for (var i = 0; i < currentViewRecords.length; i++) {\n                visibleRecords.push(currentViewRecords[parseInt(i.toString(), 10)]);\n                if (!currentViewRecords[parseInt(i.toString(), 10)].expanded) {\n                    i += findChildrenRecords(currentViewRecords[parseInt(i.toString(), 10)]).length;\n                }\n            }\n        }\n        else {\n            visibleRecords = currentViewRecords;\n        }\n        return visibleRecords;\n    };\n    /**\n     * Retrieves the indices of rows that have their checkboxes checked.\n     *\n     * This can assist in programatically assessing which rows have been selected\n     * by checkbox interaction for further processing.\n     *\n     * @returns {number[]} - Returns an array of indices corresponding to checked rows.\n     */\n    TreeGrid.prototype.getCheckedRowIndexes = function () {\n        return this.selectionModule.getCheckedRowIndexes();\n    };\n    /**\n     * Selects rows in the TreeGrid using row indices, checking their associated checkboxes.\n     *\n     * This method provides automation for selecting or highlighting specific rows,\n     * useful in scenarios needing pre-selection or default selections.\n     *\n     * @param {number[]} indexes - An array of row indices to be marked as selected.\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectCheckboxes = function (indexes) {\n        this.selectionModule.selectCheckboxes(indexes);\n    };\n    /**\n     * Updates and refreshes the TreeGrid's column definitions and layout.\n     *\n     * Ensures that the latest column settings are displayed, either refreshing the UI\n     * or adjusting internal configurations to match current data or configuration updates.\n     *\n     * @param {boolean} refreshUI - A flag indicating whether the DOM should be updated.\n     * @returns {void}\n     */\n    TreeGrid.prototype.refreshColumns = function (refreshUI) {\n        if (isNullOrUndefined(refreshUI) || refreshUI) {\n            this.grid.columns = this.getGridColumns(this.columns);\n            this.getTreeColumn();\n            this.grid.refreshColumns();\n        }\n        else {\n            this.grid.setProperties({ columns: this.getGridColumns(this.columns) }, true);\n        }\n    };\n    TreeGrid.prototype.getTreeColumn = function () {\n        var columnModel = 'columnModel';\n        var treeColumn = this[\"\" + columnModel][this.treeColumnIndex];\n        var treeIndex;\n        var updatedCols = this.getColumns();\n        for (var f = 0; f < updatedCols.length; f++) {\n            var treeColumnfield = getObject('field', treeColumn);\n            var parentColumnfield = getObject('field', updatedCols[parseInt(f.toString(), 10)]);\n            if (treeColumnfield === parentColumnfield) {\n                treeIndex = f;\n                break;\n            }\n        }\n        this.setProperties({ treeColumnIndex: treeIndex }, true);\n    };\n    /**\n     * Refreshes the header section of the TreeGrid to reflect any structural or data changes.\n     *\n     * This method is useful when there are dynamic updates or layout adjustments\n     * needed in the header portion to ensure it aligns with current grid data or settings.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.refreshHeader = function () {\n        this.grid.refreshHeader();\n    };\n    /**\n     * Expands or collapse child records\n     *\n     * @param {HTMLElement} target - Expand collapse icon cell as target element\n     * @returns {void}\n     * @hidden\n     */\n    TreeGrid.prototype.expandCollapseRequest = function (target) {\n        if (this.editSettings.mode === 'Batch') {\n            var obj = 'dialogObj';\n            var showDialog = 'showDialog';\n            if ((this.getBatchChanges()[this.changedRecords].length || this.getBatchChanges()[this.deletedRecords].length ||\n                this.getBatchChanges()[this.addedRecords].length) && this.editSettings.showConfirmDialog) {\n                var dialogObj = this.grid.editModule[\"\" + obj];\n                this.grid.editModule[\"\" + showDialog]('CancelEdit', dialogObj);\n                this.targetElement = target;\n                return;\n            }\n        }\n        if (this.rowTemplate) {\n            var rowInfo = target.closest('.e-treerowcell').parentElement;\n            var record = this.getCurrentViewRecords()[rowInfo.rowIndex];\n            if (target.classList.contains('e-treegridexpand')) {\n                this.collapseRow(rowInfo, record);\n            }\n            else {\n                this.expandRow(rowInfo, record);\n            }\n        }\n        else {\n            var rowInfo_1 = this.grid.getRowInfo(target);\n            var record = rowInfo_1.rowData;\n            if (this.grid.isFrozenGrid() && this.enableVirtualization && !Object.keys(record).length) {\n                var freezeRows = 'freezeRows';\n                record = this.grid.contentModule[\"\" + freezeRows].filter(function (e) { return e.uid === rowInfo_1.row.getAttribute('data-uid'); })[0].data;\n            }\n            if (this.enableImmutableMode) {\n                record = this.getCurrentViewRecords()[rowInfo_1.rowIndex];\n            }\n            if (target.classList.contains('e-treegridexpand')) {\n                this.collapseRow(rowInfo_1.row, record);\n            }\n            else {\n                this.expandRow(rowInfo_1.row, record);\n            }\n        }\n    };\n    /**\n     * Expands the specified parent row within the TreeGrid to reveal its nested data.\n     *\n     * This method is useful for programmatically expanding rows to display their\n     * hierarchical children, providing detailed views for nested data structures.\n     *\n     * @param {HTMLTableRowElement} row - The table row element that should be expanded.\n     * @param {Object} record - Optional. Represents the data record associated with the row to be expanded.\n     * @param {Object} key - Optional. The primary key value that uniquely identifies the record.\n     * @param {number} level - Optional. Indicates the hierarchical level of the record within the TreeGrid.\n     * @returns {void}\n     */\n    TreeGrid.prototype.expandRow = function (row, record, key, level) {\n        var _this = this;\n        this.isCollapseAll = false;\n        var parentRec = this.parentData;\n        if (!this.enableVirtualization) {\n            parentRec = this.flatData.filter(function (e) {\n                return e.hasChildRecords;\n            });\n        }\n        record = this.getCollapseExpandRecords(row, record);\n        if (isNullOrUndefined(row) && isNullOrUndefined(record)) {\n            return;\n        }\n        if (!isNullOrUndefined(row) && row.cells[0].classList.contains('e-lastrowcell')) {\n            this.lastRowBorder(row, false);\n        }\n        if (this.isExpandAll && !isRemoteData(this)) {\n            var args = { data: parentRec, row: row, cancel: false };\n            var pagerValuePresent = false;\n            if (this.grid.pagerModule && !isNullOrUndefined(this.grid.pagerModule.pagerObj.pagerdropdownModule)) {\n                pagerValuePresent = this.grid.pagerModule.pagerObj.pagerdropdownModule['dropDownListObject'].value ? true : false;\n            }\n            if (!this.isExpandingEventTriggered) {\n                this.trigger(events.expanding, args, function (expandingArgs) {\n                    _this.expandAllPrevent = expandingArgs.cancel;\n                    if (!expandingArgs.cancel && !isNullOrUndefined(record)) {\n                        if (expandingArgs.expandAll) {\n                            _this.expandCollapseAllChildren(record, 'expand', key, level);\n                        }\n                        _this.expandRows(row, record, parentRec);\n                    }\n                });\n            }\n            else if ((!this.allowPaging || (pagerValuePresent && this.grid.pagerModule.pagerObj.pagerdropdownModule['dropDownListObject'].value === 'All')) &&\n                !this.expandAllPrevent && this.isExpandingEventTriggered) {\n                this.expandRows(row, record, parentRec);\n            }\n            this.isExpandingEventTriggered = true;\n        }\n        else if (!this.isExpandAll || (this.isExpandAll && isRemoteData(this))) {\n            var args = { data: record, row: row, cancel: false };\n            this.trigger(events.expanding, args, function (expandingArgs) {\n                if (!expandingArgs.cancel) {\n                    if (expandingArgs.expandAll) {\n                        _this.expandCollapseAllChildren(record, 'expand', key, level);\n                    }\n                    _this.expandRows(row, record, parentRec);\n                }\n            });\n        }\n    };\n    // Internal method to handle the rows expand\n    TreeGrid.prototype.expandRows = function (row, record, parentRec) {\n        this.expandCollapse('expand', row, record);\n        var children = 'Children';\n        if (!(isRemoteData(this) && !isOffline(this)) && (!isCountRequired(this) || !isNullOrUndefined(record[\"\" + children]))) {\n            var expandArgs = { data: record, row: row };\n            if (!isNullOrUndefined(this.expandStateMapping)) {\n                this.updateExpandStateMapping(expandArgs.data, true);\n            }\n            if (this.isExpandAll && !this.isExpandedEventTriggered) {\n                this.isExpandedEventTriggered = true;\n                expandArgs = { data: parentRec, row: row };\n                this.trigger(events.expanded, expandArgs);\n            }\n            else if (!this.isExpandAll && this.enableVirtualization && this.selectionSettings.persistSelection\n                && !isNullOrUndefined(this.virtualScrollModule.prevSelectedRecord)) {\n                this.virtualScrollModule.prevSelectedRecord = [];\n            }\n            else if (!this.isExpandAll) {\n                this.trigger(events.expanded, expandArgs);\n            }\n        }\n    };\n    TreeGrid.prototype.expandCollapseAllChildren = function (record, action, key, level) {\n        if ((!isNullOrUndefined(key) && record[this.getPrimaryKeyFieldNames()[0]] !== key) ||\n            (!isNullOrUndefined(level) && level !== record.level)) {\n            return;\n        }\n        var records = findChildrenRecords(record).filter(function (e) {\n            return e.hasChildRecords;\n        });\n        records.unshift(record);\n        for (var i = 0; i < records.length; i++) {\n            this.expandCollapse(action, null, records[parseInt(i.toString(), 10)]);\n        }\n    };\n    TreeGrid.prototype.getCollapseExpandRecords = function (row, record) {\n        if (this.allowPaging && this.pageSettings.pageSizeMode === 'All' && this.isExpandAll && isNullOrUndefined(record) &&\n            !isRemoteData(this)) {\n            record = this.flatData.filter(function (e) {\n                return e.hasChildRecords;\n            });\n        }\n        else if (isNullOrUndefined(record) && !isNullOrUndefined(row)) {\n            if (this.detailTemplate) {\n                record = this.grid.getCurrentViewRecords()[parseInt(row.getAttribute('aria-rowindex'), 10) - 1];\n            }\n            else {\n                if (this.enableVirtualization && (this.isCollapseAll || this.isExpandAll)) {\n                    if (row.rowIndex === -1) {\n                        record = this.grid.getCurrentViewRecords()[parseInt(row.getAttribute('aria-rowindex'), 10) - 1];\n                    }\n                    else {\n                        record = this.grid.getCurrentViewRecords()[row.rowIndex];\n                    }\n                }\n                else if (this.rowTemplate) {\n                    record = this.grid.getCurrentViewRecords()[row.rowIndex];\n                }\n                else {\n                    record = this.grid.getCurrentViewRecords()[parseInt(row.getAttribute('aria-rowindex'), 10) - 1];\n                }\n            }\n        }\n        return record;\n    };\n    /**\n     * Collapses the specified parent row in the TreeGrid.\n     *\n     * This method collapses the row associated with the provided HTMLTableRowElement,\n     * hiding any of its displayed child rows. It is typically used to manage the\n     * visibility of hierarchical data within a tree structure.\n     *\n     * @param {HTMLTableRowElement} row - The HTMLTableRowElement representing the parent row\n     *                                    whose child rows are to be collapsed.\n     * @param {Object} record - (Optional) The data record associated with the row being collapsed.\n     *                            This can be used to access or manipulate the underlying data\n     *                            when collapsing the row.\n     * @param {Object} key - (Optional) The primary key value of the record. It can be used to identify\n     *                         the target record uniquely when collapsing the row, especially in cases\n     *                         where the row or record data needs to be referenced or logged.\n     * @returns {void}\n     */\n    TreeGrid.prototype.collapseRow = function (row, record, key) {\n        var _this = this;\n        this.isExpandAll = false;\n        var parentRec = this.parentData;\n        if (!this.enableVirtualization) {\n            parentRec = this.flatData.filter(function (e) {\n                return e.hasChildRecords;\n            });\n        }\n        record = this.getCollapseExpandRecords(row, record);\n        if (isNullOrUndefined(row) && isNullOrUndefined(record)) {\n            return;\n        }\n        if (this.isCollapseAll && !isRemoteData(this)) {\n            var args = { data: parentRec, row: row, cancel: false };\n            if (!this.isCollapsingEventTriggered) {\n                this.trigger(events.collapsing, args, function (collapsingArgs) {\n                    _this.collapseAllPrevent = collapsingArgs.cancel;\n                    if (!collapsingArgs.cancel) {\n                        if (collapsingArgs.collapseAll) {\n                            _this.expandCollapseAllChildren(record, 'collapse', key);\n                        }\n                        _this.collapseRows(row, record, parentRec);\n                    }\n                });\n            }\n            else if (!this.allowPaging && !this.collapseAllPrevent && this.isCollapsingEventTriggered) {\n                this.collapseRows(row, record, parentRec);\n            }\n            this.isCollapsingEventTriggered = true;\n        }\n        else if (!this.isCollapseAll || (this.isCollapseAll && isRemoteData(this))) {\n            var args = { data: record, row: row, cancel: false };\n            this.trigger(events.collapsing, args, function (collapsingArgs) {\n                if (!collapsingArgs.cancel) {\n                    _this.collapseRows(row, record, parentRec);\n                }\n            });\n        }\n    };\n    // Internal method for handling the rows collapse\n    TreeGrid.prototype.collapseRows = function (row, record, parentRec) {\n        this.expandCollapse('collapse', row, record);\n        var collapseArgs = { data: record, row: row };\n        if (!isRemoteData(this)) {\n            if (!isNullOrUndefined(this.expandStateMapping)) {\n                this.updateExpandStateMapping(collapseArgs.data, false);\n            }\n            if (this.isCollapseAll && !this.isCollapsedEventTriggered) {\n                this.isCollapsedEventTriggered = true;\n                collapseArgs = { data: parentRec, row: row };\n                this.trigger(events.collapsed, collapseArgs);\n            }\n            else if (!this.isCollapseAll) {\n                this.trigger(events.collapsed, collapseArgs);\n            }\n            if (this.enableInfiniteScrolling) {\n                var scrollHeight = this.grid.getContent().firstElementChild.scrollHeight;\n                var scrollTop = this.grid.getContent().firstElementChild.scrollTop;\n                if ((scrollHeight - scrollTop) < this.grid.getRowHeight() + +this.height) {\n                    this.grid.getContent().firstElementChild.scrollBy(0, this.grid.getRowHeight());\n                }\n            }\n        }\n    };\n    TreeGrid.prototype.updateExpandStateMapping = function (record, state) {\n        var totalRecords = record;\n        if (totalRecords.length) {\n            for (var i = 0; i < totalRecords.length; i++) {\n                totalRecords[parseInt(i.toString(), 10)][this.expandStateMapping] = state;\n                editAction({ value: totalRecords[parseInt(i.toString(), 10)], action: 'edit' }, this, this.isSelfReference, totalRecords[parseInt(i.toString(), 10)].index, this.grid.selectedRowIndex, this.expandStateMapping);\n            }\n        }\n        else {\n            record[\"\" + this.expandStateMapping] = state;\n            editAction({ value: record, action: 'edit' }, this, this.isSelfReference, record.index, this.grid.selectedRowIndex, this.expandStateMapping);\n        }\n    };\n    /**\n     * Expands all the records at the specified hierarchical level within the TreeGrid.\n     *\n     * This method is useful for visually expanding data at a certain depth, making\n     * all parent rows visible at the given level and their child rows accessible.\n     *\n     * @param {number} level - The hierarchical level at which parent rows should be expanded.\n     * @returns {void}\n     */\n    TreeGrid.prototype.expandAtLevel = function (level) {\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization) && !isRemoteData(this)) {\n            var rec = this.grid.dataSource.filter(function (e) {\n                if (e.hasChildRecords && e.level === level) {\n                    e.expanded = true;\n                }\n                return e.hasChildRecords && e.level === level;\n            });\n            this.expandAction(rec, null, level, true);\n        }\n        else {\n            var rec = this.getRecordDetails(level);\n            var record = getObject('records', rec);\n            this.expandAction(record, null, level);\n        }\n    };\n    /**\n     * Expands a specific record identified by the provided primary key value.\n     *\n     * This method is useful for expanding particular node in the TreeGrid when\n     * the parent rows need to be targeted individually by their unique key.\n     *\n     * @param {Object} key - The primary key value of the record to be expanded.\n     * @returns {void}\n     */\n    TreeGrid.prototype.expandByKey = function (key) {\n        this.expandCollapseActionByKey(key, 'Expand');\n    };\n    TreeGrid.prototype.expandAction = function (record, key, level, isPaging) {\n        if (isPaging === void 0) { isPaging = false; }\n        var _loop_1 = function (i) {\n            if (!isNullOrUndefined(record[parseInt(i.toString(), 10)].parentItem)) {\n                var puniqueID_1 = record[parseInt(i.toString(), 10)].parentItem.uniqueID;\n                var parentItem = this_1.flatData.filter(function (e) {\n                    return e.uniqueID === puniqueID_1;\n                });\n                if (isRemoteData(this_1)) {\n                    parentItem = this_1.getCurrentViewRecords().filter(function (e) {\n                        return e.uniqueID === puniqueID_1;\n                    });\n                }\n                if (parentItem[0].expanded === false) {\n                    record.push(parentItem[0]);\n                    parentItem[0].expanded = true;\n                }\n                else {\n                    if (!getExpandStatus(this_1, parentItem[0], this_1.parentData)) {\n                        if (parentItem[0].expanded && parentItem[0].parentItem !== undefined) {\n                            record.push(parentItem[0]);\n                        }\n                    }\n                }\n            }\n            if (!isPaging) {\n                this_1.expandRow(null, record[parseInt(i.toString(), 10)], key, level);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < record.length; i++) {\n            _loop_1(i);\n        }\n        if (isPaging) {\n            this.expandRow(null, record, key, level);\n        }\n    };\n    TreeGrid.prototype.getRecordDetails = function (level) {\n        var rows = this.getRows().filter(function (e) {\n            return (e.className.indexOf('level' + level) !== -1\n                && (e.querySelector('.e-treegridcollapse') || e.querySelector('.e-treegridexpand')));\n        });\n        var records = this.getCurrentViewRecords().filter(function (e) {\n            return e.level === level && e.hasChildRecords;\n        });\n        var obj = { records: records, rows: rows };\n        return obj;\n    };\n    /**\n     * Collapses all the records at the specified hierarchical level within the TreeGrid.\n     *\n     * This function helps in hiding child rows for all parent nodes at a given level,\n     * effectively reducing the visible depth of the hierarchical structure.\n     *\n     * @param {number} level - The hierarchical level at which parent rows should be collapsed.\n     * @returns {void}\n     */\n    TreeGrid.prototype.collapseAtLevel = function (level) {\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization) && !isRemoteData(this)) {\n            var record = this.grid.dataSource.filter(function (e) {\n                if (e.hasChildRecords && e.level === level) {\n                    e.expanded = false;\n                }\n                return e.hasChildRecords && e.level === level;\n            });\n            this.collapseAction(record, null, true);\n        }\n        else {\n            var rec = this.getRecordDetails(level);\n            var records = getObject('records', rec);\n            this.collapseAction(records);\n        }\n    };\n    /**\n     * Collapses a specific record identified by the provided primary key value.\n     *\n     * This method is useful for collapsing particular node in the TreeGrid when\n     * the parent rows need to be targeted individually by their unique key.\n     *\n     * @param {Object} key - The primary key value of the record to be collapsed.\n     * @returns {void}\n     */\n    TreeGrid.prototype.collapseByKey = function (key) {\n        this.expandCollapseActionByKey(key, 'Collapse');\n    };\n    TreeGrid.prototype.expandCollapseActionByKey = function (key, action) {\n        var primaryKeyField = this.getPrimaryKeyFieldNames()[0];\n        var dataSource = isRemoteData(this) ? this.getCurrentViewRecords() : this.grid.dataSource;\n        if (!isNullOrUndefined(primaryKeyField)) {\n            var rec = dataSource.filter(function (e) {\n                return e[\"\" + primaryKeyField].toString() === key.toString();\n            });\n            if (action === 'Expand') {\n                this.expandAction(rec, key, null);\n            }\n            else {\n                this.collapseAction(rec, key);\n            }\n        }\n    };\n    TreeGrid.prototype.collapseAction = function (record, key, isPaging) {\n        if (isPaging === void 0) { isPaging = false; }\n        if (isPaging) {\n            this.collapseRow(null, record);\n        }\n        else {\n            for (var i = 0; i < record.length; i++) {\n                this.collapseRow(null, record[parseInt(i.toString(), 10)], key);\n            }\n        }\n        if (!this.grid.contentModule.isDataSourceChanged && this.enableVirtualization && this.getRows()\n            && this.parentData.length === this.getRows().length) {\n            var endIndex = 'endIndex';\n            this.grid.contentModule.startIndex = -1;\n            this.grid.contentModule[\"\" + endIndex] = -1;\n        }\n    };\n    /**\n     * Expands all rows in the TreeGrid, making the full hierarchy visible.\n     *\n     * This method should be used with caution on large datasets, as it makes\n     * all nodes and their child rows visible, which might affect performance.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.expandAll = function () {\n        if (this.getCurrentViewRecords().length === 0) {\n            var error = 'The provided value for the datasource is undefined. Please ensure to add the dataSource.';\n            this.trigger(events.actionFailure, { error: error });\n        }\n        this.isExpandedEventTriggered = false;\n        this.isExpandingEventTriggered = false;\n        this.expandCollapseAll('expand');\n    };\n    /**\n     * Collapses all rows in the TreeGrid, hiding all child rows and leaving only parent nodes visible.\n     *\n     * This method can be used to quickly minimize the view to only top-level data,\n     * which is helpful for summarizing or performing broad overviews of the dataset.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.collapseAll = function () {\n        if (this.getCurrentViewRecords().length === 0) {\n            var error = 'The provided value for the datasource is undefined. Please ensure to add the dataSource.';\n            this.trigger(events.actionFailure, { error: error });\n        }\n        this.isCollapsedEventTriggered = false;\n        this.isCollapsingEventTriggered = false;\n        this.expandCollapseAll('collapse');\n    };\n    TreeGrid.prototype.expandCollapseAll = function (action) {\n        var rows;\n        if (this.rowTemplate) {\n            rows = [].slice.call(this.grid.getContentTable().querySelectorAll('tr')).filter(function (e) {\n                return e.querySelector('.e-treegrid' + (action === 'expand' ? 'collapse' : 'expand'));\n            });\n        }\n        else {\n            rows = this.getRows().filter(function (e) {\n                return e.querySelector('.e-treegrid' + (action === 'expand' ? 'collapse' : 'expand'));\n            });\n        }\n        if (!rows.length && this.getRows().length) {\n            rows.push(this.getRows()[0]);\n        }\n        this.isExpandAll = true;\n        this.isCollapseAll = true;\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization || this.enableInfiniteScrolling) && !isRemoteData(this)) {\n            this.flatData.filter(function (e) {\n                if (e.hasChildRecords) {\n                    e.expanded = action === 'collapse' ? false : true;\n                }\n            });\n            if (rows.length) {\n                for (var i = 0; i < rows.length; i++) {\n                    if (action === 'collapse') {\n                        if (!isNullOrUndefined(this.getCurrentViewRecords()[rows[parseInt(i.toString(), 10)].rowIndex])) {\n                            this.collapseRow(rows[parseInt(i.toString(), 10)]);\n                        }\n                    }\n                    else {\n                        if (!this.enableVirtualization) {\n                            this.expandRow(rows[parseInt(i.toString(), 10)]);\n                        }\n                        else if (rows[0].getAttribute('aria-expanded') !== 'true') {\n                            this.expandRow(rows[0]);\n                        }\n                    }\n                }\n            }\n            else if (this.allowPaging) {\n                var isExpandCollapseall = this.enableCollapseAll;\n                this.setProperties({ enableCollapseAll: true }, true);\n                this.grid.pagerModule.goToPage(1);\n                this.setProperties({ enableCollapseAll: isExpandCollapseall }, true);\n            }\n        }\n        else {\n            for (var i = 0; i < rows.length; i++) {\n                if (action === 'collapse') {\n                    this.collapseRow(rows[parseInt(i.toString(), 10)]);\n                }\n                else {\n                    this.expandRow(rows[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n        this.isExpandAll = false;\n        this.isCollapseAll = false;\n    };\n    TreeGrid.prototype.expandCollapse = function (action, row, record, isChild) {\n        var _this = this;\n        var expandingArgs = { row: row, data: record, childData: [], requestType: action };\n        var childRecords = this.grid.currentViewData.filter(function (e) {\n            return e.parentUniqueID === record.uniqueID;\n        });\n        var targetEle;\n        if ((!isRemoteData(this) && action === 'expand' && this.isSelfReference && isCountRequired(this) && !childRecords.length) || (action === 'collapse' || (this.isExpandAll && !this.loadChildOnDemand) && !isRemoteData(this) && this.isSelfReference && isCountRequired(this))) {\n            this.updateChildOnDemand(expandingArgs);\n        }\n        var gridRows = this.getRows();\n        if (this.rowTemplate) {\n            var rows = this.getContentTable().rows;\n            gridRows = [].slice.call(rows);\n        }\n        var rowIndex;\n        if (isNullOrUndefined(row)) {\n            rowIndex = this.grid.currentViewData.indexOf(record);\n            row = gridRows[parseInt(rowIndex.toString(), 10)];\n        }\n        else {\n            rowIndex = +row.getAttribute('aria-rowindex') - 1;\n        }\n        if (!isNullOrUndefined(row)) {\n            row.setAttribute('aria-expanded', action === 'expand' ? 'true' : 'false');\n        }\n        if (((this.allowPaging && this.pageSettings.pageSizeMode === 'All') || this.enableVirtualization) && !isRemoteData(this)\n            && !isCountRequired(this)) {\n            this.notify(events.localPagedExpandCollapse, { action: action, row: row, record: record });\n        }\n        else {\n            var displayAction = void 0;\n            if (action === 'expand') {\n                displayAction = 'e-childrow-visible';\n                if (!isChild) {\n                    record.expanded = true;\n                    this.uniqueIDCollection[record.uniqueID].expanded = record.expanded;\n                }\n                if (!isNullOrUndefined(row)) {\n                    targetEle = row.getElementsByClassName('e-treegridcollapse')[0];\n                }\n                if (isChild && !isNullOrUndefined(record[this.expandStateMapping]) &&\n                    record[this.expandStateMapping] && isNullOrUndefined(targetEle)) {\n                    targetEle = row.getElementsByClassName('e-treegridexpand')[0];\n                }\n                if (isNullOrUndefined(targetEle)) {\n                    return;\n                }\n                if (!targetEle.classList.contains('e-treegridexpand')) {\n                    addClass([targetEle], 'e-treegridexpand');\n                }\n                removeClass([targetEle], 'e-treegridcollapse');\n            }\n            else {\n                displayAction = 'e-childrow-hidden';\n                if (!isChild || isCountRequired(this)) {\n                    record.expanded = false;\n                    this.uniqueIDCollection[record.uniqueID].expanded = record.expanded;\n                }\n                if (!isNullOrUndefined(row)) {\n                    targetEle = row.getElementsByClassName('e-treegridexpand')[0];\n                }\n                if (isChild && !isNullOrUndefined(record[this.expandStateMapping]) &&\n                    !record[this.expandStateMapping] && isNullOrUndefined(targetEle)) {\n                    targetEle = row.getElementsByClassName('e-treegridcollapse')[0];\n                }\n                if (isNullOrUndefined(targetEle)) {\n                    return;\n                }\n                if (!targetEle.classList.contains('e-treegridcollapse')) {\n                    addClass([targetEle], 'e-treegridcollapse');\n                }\n                removeClass([targetEle], 'e-treegridexpand');\n            }\n            row.querySelectorAll('.e-treerowcell')[0].setAttribute('aria-expanded', action === 'expand' ? 'true' : 'false');\n            var detailrows = gridRows.filter(function (r) {\n                return r.classList.contains('e-griddetailrowindex' + record.index + 'level' + (record.level + 1));\n            });\n            if (isRemoteData(this) && !isOffline(this)) {\n                this.remoteExpand(action, row, record);\n            }\n            else {\n                if ((!isCountRequired(this) || childRecords.length) || action === 'collapse') {\n                    this.localExpand(action, row, record);\n                }\n                var lastrowIdx = this.getVisibleRecords()[this.getVisibleRecords().length - 1]['index'];\n                var lastRow = this.getRowByIndex(lastrowIdx);\n                if (this.grid.getContentTable().clientHeight <= this.grid.getContent().clientHeight && !isNullOrUndefined(lastRow) && !lastRow.cells[0].classList.contains('e-lastrowcell')) {\n                    this.lastRowBorder(lastRow, true);\n                }\n            }\n            if (isCountRequired(this) && action === 'expand') {\n                var currentData = this.getCurrentViewRecords();\n                var visibleRecords = currentData.filter(function (e) {\n                    return getExpandStatus(_this, e, _this.parentData);\n                });\n                this.dataResults.result = visibleRecords;\n            }\n            if (!isNullOrUndefined(targetEle) && targetEle.closest('.e-treerowcell').classList.contains('e-cellselectionbackground')) {\n                targetEle.closest('.e-treerowcell').classList.remove('e-cellselectionbackground');\n                targetEle.closest('.e-treerowcell').removeAttribute('aria-selected');\n            }\n            if (this.isPixelHeight() && !row.cells[0].classList.contains('e-lastrowcell')) {\n                var totalRows = this.getRows();\n                var rows = this.getContentTable().rows;\n                totalRows = [].slice.call(rows);\n                for (var i = totalRows.length - 1; i >= 0; i--) {\n                    if (!isHidden(totalRows[parseInt(i.toString(), 10)])) {\n                        var table = this.getContentTable();\n                        var sHeight = table.scrollHeight;\n                        var clientHeight = this.getContent().clientHeight;\n                        this.lastRowBorder(totalRows[parseInt(i.toString(), 10)], sHeight <= clientHeight);\n                        break;\n                    }\n                }\n            }\n            this.notify('rowExpandCollapse', { detailrows: detailrows, action: displayAction, record: record, row: row });\n            this.updateAltRow(gridRows);\n        }\n    };\n    TreeGrid.prototype.updateChildOnDemand = function (expandingArgs) {\n        var _this = this;\n        if (expandingArgs.requestType === 'collapse' && isCountRequired(this)) {\n            var flatDataRecords = this.flatData.slice();\n            for (var i = 0; i < flatDataRecords.length; i++) {\n                if (flatDataRecords[parseInt(i.toString(), 10)]['parentUniqueID'] === expandingArgs.data['uniqueID']) {\n                    flatDataRecords.splice(i, 1);\n                    i = i - 1;\n                }\n            }\n            this.dataResults.result = flatDataRecords;\n            return;\n        }\n        var deff = new Deferred();\n        var childDataBind = 'childDataBind';\n        expandingArgs[\"\" + childDataBind] = deff.resolve;\n        var record = expandingArgs.data;\n        this.trigger(events.dataStateChange, expandingArgs);\n        deff.promise.then(function () {\n            if (expandingArgs.childData.length) {\n                if (isCountRequired(_this)) {\n                    _this.flatData = _this.dataResults.result;\n                }\n                if (_this.enableInfiniteScrolling && isCountRequired(_this)) {\n                    _this.flatData = _this.infiniteScrollData;\n                }\n                var currentData = (_this.flatData);\n                var index = 0;\n                for (var i = 0; i < currentData.length; i++) {\n                    if (currentData[parseInt(i.toString(), 10)].taskData === record.taskData) {\n                        index = i;\n                        break;\n                    }\n                }\n                var data_1 = getValue('result', _this.dataSource);\n                var childData = extendArray(expandingArgs.childData);\n                var length_1 = record[_this.childMapping] ? record[_this.childMapping].length > childData.length ?\n                    record[_this.childMapping].length : childData.length : childData.length;\n                for (var i = 0; i < length_1; i++) {\n                    if (record[_this.childMapping]) {\n                        data_1.filter(function (e, i) {\n                            if (e[_this.parentIdMapping] === record[_this.idMapping]) {\n                                data_1.splice(i, 1);\n                            }\n                        });\n                    }\n                    if (childData[parseInt(i.toString(), 10)]) {\n                        childData[parseInt(i.toString(), 10)].level = record.level + 1;\n                        childData[parseInt(i.toString(), 10)].index = Math.ceil(Math.random() * 1000);\n                        childData[parseInt(i.toString(), 10)].parentItem = extend({}, record);\n                        childData[parseInt(i.toString(), 10)].taskData = extend({}, childData[parseInt(i.toString(), 10)]);\n                        delete childData[parseInt(i.toString(), 10)].parentItem.childRecords;\n                        delete childData[parseInt(i.toString(), 10)].taskData.parentItem;\n                        childData[parseInt(i.toString(), 10)].parentUniqueID = record.uniqueID;\n                        childData[parseInt(i.toString(), 10)].uniqueID = getUid(_this.element.id + '_data_');\n                        setValue('uniqueIDCollection.' + childData[parseInt(i.toString(), 10)].uniqueID, childData[parseInt(i.toString(), 10)], _this);\n                        if (!isNullOrUndefined(childData[parseInt(i.toString(), 10)][_this.childMapping]) ||\n                            (childData[parseInt(i.toString(), 10)][_this.hasChildMapping] && isCountRequired(_this))) {\n                            childData[parseInt(i.toString(), 10)].hasChildRecords = true;\n                        }\n                        if (isCountRequired(_this) && record[_this.childMapping] && record[_this.childMapping][parseInt(i.toString(), 10)]) {\n                            currentData.splice(index + 1 + i, 0, childData[parseInt(i.toString(), 10)]);\n                        }\n                        else {\n                            currentData.splice(index + 1 + i, record[_this.childMapping] &&\n                                record[_this.childMapping][parseInt(i.toString(), 10)] ? 1 : 0, childData[parseInt(i.toString(), 10)]);\n                        }\n                    }\n                    else {\n                        currentData.splice(index + 1 + i, 1);\n                    }\n                }\n                currentData[parseInt(index.toString(), 10)][\"\" + _this.childMapping] = childData;\n                currentData[parseInt(index.toString(), 10)].childRecords = childData;\n                currentData[parseInt(index.toString(), 10)].expanded = true;\n                setValue('uniqueIDCollection.' + currentData[parseInt(index.toString(), 10)].uniqueID, currentData[parseInt(index.toString(), 10)], _this);\n                for (var j = 0; j < expandingArgs.childData.length; j++) {\n                    data_1.push(expandingArgs.childData[parseInt(j.toString(), 10)]);\n                }\n            }\n            if (isCountRequired(_this) && !_this.loadChildOnDemand && expandingArgs.requestType === 'expand') {\n                _this.dataResults['expandRecord'] = {};\n                _this.dataResults['expandRecord'] = expandingArgs.data;\n            }\n            _this.isExpandRefresh = true;\n            var scrollHeightBeforeRefresh = _this.getContentTable().parentElement.scrollTop;\n            _this.grid.refresh();\n            if (_this.enableInfiniteScrolling) {\n                _this.getContentTable().parentElement.scrollTop = scrollHeightBeforeRefresh;\n            }\n            _this.trigger(events.expanded, expandingArgs);\n        });\n    };\n    TreeGrid.prototype.remoteExpand = function (action, row, record) {\n        var gridRows = this.getRows();\n        var fetchRemoteChildData = 'fetchRemoteChildData';\n        if (this.rowTemplate) {\n            var rows_1 = this.getContentTable().rows;\n            gridRows = [].slice.call(rows_1);\n        }\n        var args = { data: record, row: row };\n        var rows = [];\n        rows = gridRows.filter(function (r) {\n            return ((r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1))) || (r.querySelector('.e-gridrowindex' + record.index + 'level0' + '.e-summarycell')));\n        });\n        if (action === 'expand') {\n            this.notify(events.remoteExpand, { record: record, rows: rows, parentRow: row });\n            var args_1 = { row: row, data: record };\n            if (rows.length > 0) {\n                this.trigger(events.expanded, args_1);\n            }\n        }\n        else if (action === 'collapse' && this.enableVirtualization) {\n            this.dataModule[\"\" + fetchRemoteChildData]({ action: action, record: args.data, rows: null, parentRow: args.row });\n        }\n        else {\n            this.collapseRemoteChild({ record: record, rows: rows });\n            this.trigger(events.collapsed, args);\n        }\n    };\n    TreeGrid.prototype.localExpand = function (action, row, record) {\n        var rows;\n        var childRecords = this.grid.currentViewData.filter(function (e) {\n            return e.parentUniqueID === record.uniqueID;\n        });\n        if (this.isPixelHeight() && row.cells[0].classList.contains('e-lastrowcell')) {\n            this.lastRowBorder(row, false);\n        }\n        var movableRows;\n        var freezeRightRows;\n        var gridRows = this.getRows();\n        if (this.rowTemplate) {\n            var rows_2 = this.getContentTable().rows;\n            gridRows = [].slice.call(rows_2);\n        }\n        var displayAction = (action === 'expand') ? 'e-childrow-visible' : 'e-childrow-hidden';\n        var primaryKeyField = this.getPrimaryKeyFieldNames()[0];\n        if (this.enableImmutableMode && !this.allowPaging) {\n            rows = [];\n            for (var i = 0; i < childRecords.length; i++) {\n                var rowIndex = this.grid.getRowIndexByPrimaryKey(childRecords[parseInt(i.toString(), 10)][\"\" + primaryKeyField]);\n                rows.push(this.getRows()[parseInt(rowIndex.toString(), 10)]);\n            }\n        }\n        else {\n            rows = gridRows.filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n            });\n        }\n        var freeze = (this.grid.getFrozenLeftColumnsCount() > 0 || this.grid.getFrozenRightColumnsCount() > 0) ? true : false;\n        if (this.frozenRows || this.frozenColumns || this.getFrozenColumns() || freeze) {\n            movableRows = this.getRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n            });\n        }\n        if (freeze) {\n            freezeRightRows = this.getRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + record.index + 'level' + (record.level + 1));\n            });\n        }\n        var gridRowsObject = this.grid.getRowsObject();\n        var currentViewData = this.grid.currentViewData;\n        var currentRecord = currentViewData.filter(function (e) {\n            return e.uniqueID === record.uniqueID;\n        });\n        var currentIndex = currentViewData.indexOf(currentRecord[0]);\n        if (!isNullOrUndefined(gridRowsObject[parseInt(currentIndex.toString(), 10)].visible) &&\n            gridRowsObject[parseInt(currentIndex.toString(), 10)].visible !== false) {\n            gridRowsObject[parseInt(currentIndex.toString(), 10)].visible = true;\n        }\n        var detailrows = gridRows.filter(function (r) {\n            return r.classList.contains('e-griddetailrowindex' + record.index + 'level' + (record.level + 1));\n        });\n        for (var i = 0; i < rows.length; i++) {\n            if (!isNullOrUndefined(rows[parseInt(i.toString(), 10)])) {\n                this.toggleRowVisibility(rows[parseInt(i.toString(), 10)], displayAction);\n            }\n            if (!isNullOrUndefined(rows[parseInt(i.toString(), 10)]) && !this.allowPaging && !(this.enableVirtualization\n                || this.enableInfiniteScrolling || isRemoteData(this) || isCountRequired(this))) {\n                if (!isNullOrUndefined(gridRowsObject[rows[parseInt(i.toString(), 10)].rowIndex])) {\n                    gridRowsObject[rows[parseInt(i.toString(), 10)].rowIndex].visible = displayAction !== 'e-childrow-hidden' ? true : false;\n                }\n                var parentRecord = currentViewData.filter(function (e) {\n                    return e.uniqueID === currentRecord[0].parentUniqueID;\n                });\n                if (!isNullOrUndefined(parentRecord[0]) && gridRows[currentViewData.indexOf(parentRecord[0])].getElementsByClassName('e-treegridcollapse').length) {\n                    gridRowsObject[parseInt(currentIndex.toString(), 10)].visible = false;\n                }\n            }\n            if (!isNullOrUndefined(movableRows)) {\n                this.toggleRowVisibility(movableRows[parseInt(i.toString(), 10)], displayAction);\n            }\n            if (!isNullOrUndefined(freezeRightRows)) {\n                this.toggleRowVisibility(freezeRightRows[parseInt(i.toString(), 10)], displayAction);\n            }\n            this.notify('childRowExpand', { row: rows[parseInt(i.toString(), 10)] });\n            if ((!isNullOrUndefined(childRecords)) && (!isNullOrUndefined(childRecords[parseInt(i.toString(), 10)].childRecords) && childRecords[parseInt(i.toString(), 10)].childRecords.length > 0) && (action !== 'expand' ||\n                isNullOrUndefined(childRecords[parseInt(i.toString(), 10)].expanded) || childRecords[parseInt(i.toString(), 10)].expanded)) {\n                this.expandCollapse(action, rows[parseInt(i.toString(), 10)], childRecords[parseInt(i.toString(), 10)], true);\n                if (this.frozenColumns <= this.treeColumnIndex && !isNullOrUndefined(movableRows)) {\n                    this.expandCollapse(action, movableRows[parseInt(i.toString(), 10)], childRecords[parseInt(i.toString(), 10)], true);\n                }\n            }\n        }\n        for (var i = 0; i < detailrows.length; i++) {\n            if (!isNullOrUndefined(detailrows[parseInt(i.toString(), 10)]) && !this.allowPaging && !(this.enableVirtualization ||\n                this.enableInfiniteScrolling || isRemoteData(this) || isCountRequired(this))) {\n                gridRowsObject[detailrows[parseInt(i.toString(), 10)].rowIndex].visible = displayAction !== 'e-childrow-hidden' ? true : false;\n                this.toggleRowVisibility(detailrows[parseInt(i.toString(), 10)], displayAction);\n            }\n        }\n        if (!this.allowPaging && !(this.enableVirtualization || this.enableInfiniteScrolling || isRemoteData(this)\n            || isCountRequired(this))) {\n            this.grid.notify('refresh-Expand-and-Collapse', { rows: this.grid.getRowsObject() });\n        }\n    };\n    TreeGrid.prototype.toggleRowVisibility = function (row, displayAction) {\n        if (row) {\n            row.classList.remove('e-childrow-hidden', 'e-childrow-visible', 'e-hide');\n            row.classList.add(displayAction);\n        }\n    };\n    TreeGrid.prototype.updateAltRow = function (rows) {\n        if (this.enableAltRow && !this.rowTemplate) {\n            var visibleRowCount = 0;\n            for (var i = 0; rows && i < rows.length; i++) {\n                var gridRow = rows[parseInt(i.toString(), 10)];\n                if (!gridRow.classList.contains('e-childrow-hidden')) {\n                    if (gridRow.classList.contains('e-altrow')) {\n                        removeClass([gridRow], 'e-altrow');\n                    }\n                    if (visibleRowCount % 2 !== 0 && !gridRow.classList.contains('e-summaryrow') && !gridRow.classList.contains('e-detailrow')) {\n                        addClass([gridRow], 'e-altrow');\n                    }\n                    if (!gridRow.classList.contains('e-summaryrow') && !gridRow.classList.contains('e-detailrow')) {\n                        visibleRowCount++;\n                    }\n                }\n            }\n        }\n    };\n    TreeGrid.prototype.treeColumnRowTemplate = function () {\n        var rows = this.getContentTable().rows;\n        rows = [].slice.call(rows);\n        var rowsObject = this.grid.getRowsObject();\n        for (var i = 0; i < rows.length; i++) {\n            var rcell = this.grid.getContentTable().rows[parseInt(i.toString(), 10)]\n                .cells[this.treeColumnIndex];\n            var row = rows[parseInt(i.toString(), 10)];\n            var rowData = rowsObject.length !== 0 ? rowsObject[parseInt(i.toString(), 10)].data : new Object();\n            var arg = { data: rowData, row: row, cell: rcell, column: this.getColumns()[this.treeColumnIndex] };\n            this.renderModule.cellRender(arg);\n        }\n    };\n    TreeGrid.prototype.collapseRemoteChild = function (rowDetails, isChild) {\n        if (!isNullOrUndefined(isChild) && !isChild && this.loadChildOnDemand) {\n            rowDetails.record.expanded = false;\n        }\n        var rows = rowDetails.rows;\n        var row;\n        var childRecord;\n        var movablerows = [];\n        var rightrows = [];\n        var freeze = (this.getFrozenLeftColumnsCount() > 0 || this.getFrozenRightColumnsCount() > 0) ? true : false;\n        if (freeze) {\n            movablerows = this.getRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + rowDetails.record.index + 'level' + (rowDetails.record.level + 1));\n            });\n            rightrows = this.getRows().filter(function (r) {\n                return r.querySelector('.e-gridrowindex' + rowDetails.record.index + 'level' + (rowDetails.record.level + 1));\n            });\n        }\n        for (var i = 0; i < rows.length; i++) {\n            this.toggleRowVisibility(rows[parseInt(i.toString(), 10)], 'e-childrow-hidden');\n            row = rows[parseInt(i.toString(), 10)];\n            var collapsingTd = rows[parseInt(i.toString(), 10)].querySelector('.e-detailrowexpand');\n            if (!isNullOrUndefined(collapsingTd)) {\n                this.grid.detailRowModule.collapse(collapsingTd);\n            }\n            if (freeze) {\n                this.toggleRowVisibility(movablerows[parseInt(i.toString(), 10)], 'e-childrow-hidden');\n                this.toggleRowVisibility(rightrows[parseInt(i.toString(), 10)], 'e-childrow-hidden');\n                if (!rows[parseInt(i.toString(), 10)].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                    if (movablerows[parseInt(i.toString(), 10)].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                        row = movablerows[parseInt(i.toString(), 10)];\n                    }\n                    else if (rightrows[parseInt(i.toString(), 10)].querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                        row = rightrows[parseInt(i.toString(), 10)];\n                    }\n                }\n            }\n            if (row.querySelector('.e-treecolumn-container .e-treegridexpand')) {\n                var expandElement = row.querySelector('.e-treecolumn-container .e-treegridexpand');\n                childRecord = this.rowTemplate ? this.grid.getCurrentViewRecords()[rows[parseInt(i.toString(), 10)].rowIndex] :\n                    this.grid.getRowObjectFromUID(rows[parseInt(i.toString(), 10)].getAttribute('data-Uid')).data;\n                if (!isNullOrUndefined(expandElement) && childRecord.expanded) {\n                    removeClass([expandElement], 'e-treegridexpand');\n                    addClass([expandElement], 'e-treegridcollapse');\n                }\n                var cRow = [];\n                var eRows = this.getRows();\n                for (var i_1 = 0; i_1 < eRows.length; i_1++) {\n                    if (eRows[parseInt(i_1.toString(), 10)].querySelector('.e-gridrowindex' + childRecord.index + 'level' + (childRecord.level + 1))) {\n                        cRow.push(eRows[parseInt(i_1.toString(), 10)]);\n                    }\n                }\n                if (cRow.length && childRecord.expanded) {\n                    this.collapseRemoteChild({ record: childRecord, rows: cRow }, false);\n                }\n            }\n        }\n        this.grid.pageSettings.totalRecordsCount -= rows.length;\n    };\n    /**\n     * Method to sanitize html element\n     *\n     * @param {any} value - Specifies the html value to sanitize\n     * @returns {any} Returns the sanitized html value\n     * @hidden\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    TreeGrid.prototype.sanitize = function (value) {\n        if (this.enableHtmlSanitizer && typeof (value) === 'string') {\n            return SanitizeHtmlHelper.sanitize(value);\n        }\n        return value;\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.addListener = function () {\n        this.on('updateResults', this.updateResultModel, this);\n        this.grid.on('initial-end', this.afterGridRender, this);\n        this.grid.on('last-rowcell-border-updated', this.lastRowCellBorderUpdated, this);\n    };\n    TreeGrid.prototype.updateResultModel = function (returnResult) {\n        this.dataResults = returnResult;\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    TreeGrid.prototype.removeListener = function () {\n        if (this.isDestroyed) {\n            return;\n        }\n        this.off('updateResults', this.updateResultModel);\n        this.grid.off('initial-end', this.afterGridRender);\n        this.grid.off('last-rowcell-border-updated', this.lastRowCellBorderUpdated);\n    };\n    /**\n     * Filters the TreeGrid rows based on a specified column and filter criteria.\n     *\n     * This method allows for dynamic filtering against column data using various\n     * operators and values, supporting case-sensitive filtering and accent sensitivity.\n     *\n     * @param {string} fieldName - The name of the column to apply the filter on.\n     * @param {string} filterOperator - The operator used to perform the filter (e.g., 'equals', 'startswith').\n     * @param {string | number | Date | boolean } filterValue - The value to filter against.\n     * @param {string} predicate - The logical operator ('AND'/'OR') to combine this filter with others.\n     * @param {boolean} matchCase - If true, the filter performs a case-sensitive match.\n     * @param {boolean} ignoreAccent - If true, the filter ignores diacritical marks.\n     * @param {string} actualFilterValue - The original value used for filtering, useful for distinguishing displayed and actual values.\n     * @param {string} actualOperator - The actual operator that is applied when different from the displayed operator.\n     * @returns {void}\n     */\n    TreeGrid.prototype.filterByColumn = function (fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {\n        this.grid.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);\n    };\n    /**\n     * Clears all filters applied to the TreeGrid, restoring the view to show all records.\n     *\n     * This method is useful for resetting the grid to its unfiltered state.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.clearFiltering = function () {\n        this.grid.clearFiltering();\n    };\n    /**\n     * Removes filtered column by field name.\n     *\n     * @param  {string} field - Defines column field name to remove filter.\n     * @param  {boolean} isClearFilterBar -  Specifies whether the filter bar value needs to be cleared.\n     * @returns {void}\n     * @hidden\n     */\n    TreeGrid.prototype.removeFilteredColsByField = function (field, isClearFilterBar) {\n        this.grid.removeFilteredColsByField(field, isClearFilterBar);\n    };\n    /**\n     * Selects a row in the TreeGrid by its index.\n     *\n     * Use this method to highlight a specific row; useful for programmatically navigating data.\n     *\n     * @param {number} index - Index of the row to select.\n     * @param {boolean} isToggle - If true, toggles the selection state of the row.\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectRow = function (index, isToggle) {\n        this.grid.selectRow(index, isToggle);\n    };\n    /**\n     * Selects multiple rows in the TreeGrid given an array of row indexes.\n     *\n     * Useful for batch operations where multiple row selections are necessary.\n     *\n     * @param {number[]} rowIndexes - Array of row index numbers to select.\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectRows = function (rowIndexes) {\n        this.grid.selectRows(rowIndexes);\n    };\n    /**\n     * Deselects all selected rows and cells within the TreeGrid.\n     *\n     * Resets the selection state of the grid, which is useful after bulk operations.\n     *\n     * @returns {void}\n     */\n    TreeGrid.prototype.clearSelection = function () {\n        if (!isNullOrUndefined(this.grid.selectionModule)) {\n            this.grid.selectionModule['actualTarget'] = null;\n        }\n        this.grid.clearSelection();\n    };\n    /**\n     * Copies the data of selected rows or cells to the clipboard.\n     *\n     * This method supports including headers for better context when pasting elsewhere.\n     *\n     * @param {boolean} withHeader - (Optional) If true, includes column headers in the copied data.\n     * @returns {void}\n     */\n    TreeGrid.prototype.copy = function (withHeader) {\n        this.clipboardModule.copy(withHeader);\n    };\n    /**\n     * Pastes data into the selected cells from the clipboard.\n     *\n     * Automatically places the pasted data starting from the specified indices.\n     *\n     * @param {string} data - The clipboard data to paste.\n     * @param {number} rowIndex - The starting row index for pasting.\n     * @param {number} colIndex - The starting column index for pasting.\n     * @returns {void}\n     */\n    TreeGrid.prototype.paste = function (data, rowIndex, colIndex) {\n        this.clipboardModule.paste(data, rowIndex, colIndex);\n    };\n    /**\n     * Selects a cell by its index position in the TreeGrid.\n     *\n     * Useful for navigating or highlighting specific data cells within the grid.\n     *\n     * @param {IIndex} cellIndex - An object specifying the row and column indexes.\n     * @param {boolean} isToggle - (Optional) If true, toggles the selection state of the cell.\n     * @returns {void}\n     */\n    TreeGrid.prototype.selectCell = function (cellIndex, isToggle) {\n        this.grid.selectCell(cellIndex, isToggle);\n    };\n    /**\n     * Retrieves the currently selected rows.\n     *\n     * Useful for obtaining the selected data elements for downstream processing.\n     *\n     * @returns {Element[]} - An array of Element objects representing the selected rows.\n     */\n    TreeGrid.prototype.getSelectedRows = function () {\n        return this.grid.getSelectedRows();\n    };\n    /**\n     * Gets a movable table cell by row and column index.\n     *\n     * @param  {number} rowIndex - Specifies the row index.\n     * @param  {number} columnIndex - Specifies the column index.\n     * @returns {Element} - Returns movable cell element from the indexes passed\n     *\n     * @deprecated This method is deprecated. Use getCellFromIndex method instead.\n     */\n    TreeGrid.prototype.getMovableCellFromIndex = function (rowIndex, columnIndex) {\n        return this.grid.getCellFromIndex(rowIndex, columnIndex);\n    };\n    /**\n     * Gets all the TreeGrid's movable table data rows.\n     *\n     * @returns {Element[]} - Returns element collection of movable rows\n     *\n     * @deprecated This method is deprecated. Use getDataRows method instead.\n     */\n    TreeGrid.prototype.getMovableDataRows = function () {\n        return this.grid.getDataRows();\n    };\n    /**\n     * Gets a movable tables row by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     * @returns {Element} - Returns movable row based on index passed\n     *\n     * @deprecated This method is deprecated. Use getRowByIndex method instead.\n     */\n    TreeGrid.prototype.getMovableRowByIndex = function (index) {\n        return this.grid.getRowByIndex(index);\n    };\n    /**\n     * Gets the TreeGrid's movable content rows from frozen treegrid.\n     *\n     * @returns {Element[]}: Returns movable row element\n     * @deprecated This method is deprecated. Use getRows method instead.\n     */\n    TreeGrid.prototype.getMovableRows = function () {\n        return this.grid.getRows();\n    };\n    /**\n     * Gets a frozen right tables row element by index.\n     *\n     * @param  {number} index - Specifies the row index.\n     * @returns {Element} returns the element\n     *\n     * @deprecated This method is deprecated. Use getRowByIndex method instead.\n     */\n    TreeGrid.prototype.getFrozenRightRowByIndex = function (index) {\n        return this.grid.getRowByIndex(index);\n    };\n    /**\n     * Gets the Tree Grid's frozen right content rows from frozen Tree Grid.\n     *\n     * @returns {Element[]} returns the element\n     *\n     * @deprecated This method is deprecated. Use getRows method instead.\n     */\n    TreeGrid.prototype.getFrozenRightRows = function () {\n        return this.grid.getRows();\n    };\n    /**\n     * Gets all the Tree Grid's frozen right table data rows.\n     *\n     * @returns {Element[]} Returns the Element\n     *\n     * @deprecated This method is deprecated. Use getDataRows method instead.\n     */\n    TreeGrid.prototype.getFrozenRightDataRows = function () {\n        return this.grid.getDataRows();\n    };\n    /**\n     * Gets a frozen right table cell by row and column index.\n     *\n     * @param  {number} rowIndex - Specifies the row index.\n     * @param  {number} columnIndex - Specifies the column index.\n     * @returns {Element} Returns the Element\n     *\n     * @deprecated This method is deprecated. Use getCellFromIndex method instead.\n     */\n    TreeGrid.prototype.getFrozenRightCellFromIndex = function (rowIndex, columnIndex) {\n        return this.grid.getCellFromIndex(rowIndex, columnIndex);\n    };\n    /**\n     * Gets a frozen left column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     *\n     * @deprecated This method is deprecated. Use getColumnHeaderByIndex method instead.\n     */\n    TreeGrid.prototype.getFrozenLeftColumnHeaderByIndex = function (index) {\n        return this.grid.getColumnHeaderByIndex(index);\n    };\n    /**\n     * Gets a frozen right column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     *\n     * @deprecated This method is deprecated. Use getColumnHeaderByIndex method instead.\n     */\n    TreeGrid.prototype.getFrozenRightColumnHeaderByIndex = function (index) {\n        return this.grid.getColumnHeaderByIndex(index);\n    };\n    /**\n     * Gets a movable column header by column index.\n     *\n     * @param  {number} index - Specifies the column index.\n     * @returns {Element} Returns the Element\n     *\n     * @deprecated This method is deprecated. Use getColumnHeaderByIndex method instead.\n     */\n    TreeGrid.prototype.getMovableColumnHeaderByIndex = function (index) {\n        return this.grid.getColumnHeaderByIndex(index);\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the movable column count\n     */\n    TreeGrid.prototype.getMovableColumnsCount = function () {\n        return this.grid.getMovableColumnsCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the Frozen Left column\n     */\n    TreeGrid.prototype.getFrozenLeftColumnsCount = function () {\n        return this.grid.getFrozenLeftColumnsCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the Frozen Right column count\n     */\n    TreeGrid.prototype.getFrozenRightColumnsCount = function () {\n        return this.grid.getFrozenRightColumnsCount();\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    TreeGrid.prototype.getFrozenLeftColumns = function () {\n        this.updateColumnModel(this.grid.getFrozenLeftColumns());\n        return this.columnModel;\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    TreeGrid.prototype.getFrozenRightColumns = function () {\n        this.updateColumnModel(this.grid.getFrozenRightColumns());\n        return this.columnModel;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible movable count\n     */\n    TreeGrid.prototype.getVisibleMovableCount = function () {\n        return this.grid.getVisibleMovableCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible Frozen Right count\n     */\n    TreeGrid.prototype.getVisibleFrozenRightCount = function () {\n        return this.grid.getVisibleFrozenRightCount();\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns the visible Frozen left count\n     */\n    TreeGrid.prototype.getVisibleFrozenLeftCount = function () {\n        return this.grid.getVisibleFrozenLeftCount();\n    };\n    /**\n     * @hidden\n     * @returns {Column[]} Returns the column\n     */\n    TreeGrid.prototype.getMovableColumns = function () {\n        this.updateColumnModel(this.grid.getMovableColumns());\n        return this.columnModel;\n    };\n    /**\n     * Gets the number of frozen column in tree grid\n     *\n     * @hidden\n     * @returns {number} - Returns frozen column count\n     */\n    TreeGrid.prototype.getFrozenColumns = function () {\n        return this.getFrozenCount(!isNullOrUndefined(this.columns) && this.columns, 0) + this.frozenColumns;\n    };\n    TreeGrid.prototype.getFrozenCount = function (cols, cnt) {\n        for (var j = 0, len = cols.length; j < len; j++) {\n            if (cols[parseInt(j.toString(), 10)].columns) {\n                cnt = this.getFrozenCount(cols[parseInt(j.toString(), 10)].columns, cnt);\n            }\n            else {\n                if (cols[parseInt(j.toString(), 10)].isFrozen) {\n                    cnt++;\n                }\n            }\n        }\n        return cnt;\n    };\n    /**\n     * Retrieves the indexes of the currently selected rows in the TreeGrid.\n     *\n     * This method is useful when you need to perform actions based on the selected rows,\n     * such as retrieving data or changing the selection.\n     *\n     * @returns {number[]} - An array of numbers representing the indexes of selected rows.\n     */\n    TreeGrid.prototype.getSelectedRowIndexes = function () {\n        return this.grid.getSelectedRowIndexes();\n    };\n    /**\n     * Retrieves the indexes of the selected cells within the selected rows.\n     *\n     * This can be useful for handling cell-specific operations, such as\n     * applying styles or editing values programmatically.\n     *\n     * @returns {ISelectedCell[]} - An array of objects representing the selected cells' indexes.\n     */\n    TreeGrid.prototype.getSelectedRowCellIndexes = function () {\n        return this.grid.getSelectedRowCellIndexes();\n    };\n    /**\n     * Retrieves the data records corresponding to the currently selected rows.\n     *\n     * This method provides the full record data for the selected rows,\n     * which is useful for data manipulation or extraction operations.\n     *\n     * @isGenericType true\n     * @returns {Object[]} - An array of data objects representing the selected records.\n     */\n    TreeGrid.prototype.getSelectedRecords = function () {\n        return this.grid.getSelectedRecords();\n    };\n    /**\n     * Obtains the data handling modules used by the TreeGrid.\n     *\n     * This includes both the base data module for standard grid operations and the tree module\n     * for handling hierarchical data, giving complete access to data management capabilities.\n     *\n     * @returns {{baseModule: Data, treeModule: DataManipulation}} - An object containing both grid and tree data modules.\n     */\n    TreeGrid.prototype.getDataModule = function () {\n        return { baseModule: this.grid.getDataModule(), treeModule: this.dataModule };\n    };\n    /**\n     * Reorders rows in the TreeGrid based on specified source indexes and a target position.\n     *\n     * This functionality allows for dynamic rearrangement of rows, such as moving selected\n     * rows to a new position as siblings or children.\n     *\n     * @param {number[]} fromIndexes - An array indicating the source indexes of the rows to be moved.\n     * @param {number} toIndex - The target index where the rows should be moved.\n     * @param {string} position - The position relative to the target index ('above', 'below', 'child').\n     * @returns {void}\n     */\n    TreeGrid.prototype.reorderRows = function (fromIndexes, toIndex, position) {\n        if (!isNullOrUndefined(this.rowDragAndDropModule)) {\n            this.rowDragAndDropModule.reorderRows(fromIndexes, toIndex, position);\n        }\n    };\n    /**\n     * Indents a specified record, promoting it to one level deeper in the hierarchy.\n     *\n     * This function moves the selected row to become the last child of its preceding row,\n     * altering the visual and hierarchical data structure.\n     *\n     * @param {Object} record - (Optional) The record to be indented. If omitted, the currently selected row is used.\n     * @returns {void}\n     */\n    TreeGrid.prototype.indent = function (record) {\n        if (!isNullOrUndefined(this.rowDragAndDropModule)) {\n            record = record;\n            this.rowDragAndDropModule[this.indentOutdentAction](record, 'indent');\n        }\n    };\n    /**\n     * Outdents a specified record, moving it one level up in the hierarchy.\n     *\n     * This method repositions the selected row to be a sibling of its parent, impacting\n     * its display and the hierarchical relationships within the TreeGrid.\n     *\n     * @param {Object} record - (Optional) The record to be outdented. If omitted, the currently selected row is used.\n     * @returns {void}\n     */\n    TreeGrid.prototype.outdent = function (record) {\n        if (!isNullOrUndefined(this.rowDragAndDropModule)) {\n            record = record;\n            this.rowDragAndDropModule[this.indentOutdentAction](record, 'outdent');\n        }\n    };\n    var TreeGrid_1;\n    __decorate([\n        Property(0)\n    ], TreeGrid.prototype, \"frozenRows\", void 0);\n    __decorate([\n        Property(0)\n    ], TreeGrid.prototype, \"frozenColumns\", void 0);\n    __decorate([\n        Property('Ellipsis')\n    ], TreeGrid.prototype, \"clipMode\", void 0);\n    __decorate([\n        Property([])\n    ], TreeGrid.prototype, \"columns\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"childMapping\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"hasChildMapping\", void 0);\n    __decorate([\n        Property(0)\n    ], TreeGrid.prototype, \"treeColumnIndex\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"idMapping\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"parentIdMapping\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableCollapseAll\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"expandStateMapping\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowRowDragAndDrop\", void 0);\n    __decorate([\n        Property([])\n    ], TreeGrid.prototype, \"dataSource\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"query\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"cloneQuery\", void 0);\n    __decorate([\n        Property('AllPages')\n    ], TreeGrid.prototype, \"printMode\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowPaging\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"loadChildOnDemand\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowTextWrap\", void 0);\n    __decorate([\n        Complex({}, TextWrapSettings)\n    ], TreeGrid.prototype, \"textWrapSettings\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowReordering\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowResizing\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"autoCheckHierarchy\", void 0);\n    __decorate([\n        Complex({}, PageSettings)\n    ], TreeGrid.prototype, \"pageSettings\", void 0);\n    __decorate([\n        Complex({}, RowDropSettings)\n    ], TreeGrid.prototype, \"rowDropSettings\", void 0);\n    __decorate([\n        Property('USD')\n    ], TreeGrid.prototype, \"currencyCode\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"pagerTemplate\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"showColumnMenu\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"showColumnChooser\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowSorting\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"allowMultiSorting\", void 0);\n    __decorate([\n        Complex({}, SortSettings)\n    ], TreeGrid.prototype, \"sortSettings\", void 0);\n    __decorate([\n        Collection([], AggregateRow)\n    ], TreeGrid.prototype, \"aggregates\", void 0);\n    __decorate([\n        Complex({}, EditSettings)\n    ], TreeGrid.prototype, \"editSettings\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowFiltering\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"detailTemplate\", void 0);\n    __decorate([\n        Complex({}, FilterSettings)\n    ], TreeGrid.prototype, \"filterSettings\", void 0);\n    __decorate([\n        Complex({}, SearchSettings)\n    ], TreeGrid.prototype, \"searchSettings\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"toolbar\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"toolbarTemplate\", void 0);\n    __decorate([\n        Property('Default')\n    ], TreeGrid.prototype, \"gridLines\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"contextMenuItems\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"columnMenuItems\", void 0);\n    __decorate([\n        Property()\n    ], TreeGrid.prototype, \"rowTemplate\", void 0);\n    __decorate([\n        Property('Parent')\n    ], TreeGrid.prototype, \"copyHierarchyMode\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeGrid.prototype, \"rowHeight\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"enableAltRow\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"allowKeyboard\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableHover\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableAutoFill\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableAdaptiveUI\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableImmutableMode\", void 0);\n    __decorate([\n        Property('auto')\n    ], TreeGrid.prototype, \"height\", void 0);\n    __decorate([\n        Property('auto')\n    ], TreeGrid.prototype, \"width\", void 0);\n    __decorate([\n        Complex({}, LoadingIndicator)\n    ], TreeGrid.prototype, \"loadingIndicator\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"enableVirtualMaskRow\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableVirtualization\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableColumnVirtualization\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"enableInfiniteScrolling\", void 0);\n    __decorate([\n        Complex({}, InfiniteScrollSettings)\n    ], TreeGrid.prototype, \"infiniteScrollSettings\", void 0);\n    __decorate([\n        Property('All')\n    ], TreeGrid.prototype, \"columnQueryMode\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeGrid.prototype, \"allowSelection\", void 0);\n    __decorate([\n        Property(-1)\n    ], TreeGrid.prototype, \"selectedRowIndex\", void 0);\n    __decorate([\n        Complex({}, SelectionSettings)\n    ], TreeGrid.prototype, \"selectionSettings\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowExcelExport\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeGrid.prototype, \"allowPdfExport\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"load\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"expanding\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"expanded\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"collapsing\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"collapsed\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSave\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSaved\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"actionBegin\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"actionComplete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beginEdit\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"batchAdd\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"batchDelete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"batchCancel\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeBatchAdd\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeBatchDelete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeBatchSave\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellEdit\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"actionFailure\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"dataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"dataSourceChanged\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"dataStateChange\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"recordDoubleClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"detailDataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"queryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowSelecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowSelected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDeselecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDeselected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"headerCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSelecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnMenuOpen\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnMenuClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellSelected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellDeselecting\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"cellDeselected\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"resizeStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"resizing\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"resizeStop\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnDragStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnDrag\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"columnDrop\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"checkboxChange\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"printComplete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforePrint\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"toolbarClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeDataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"contextMenuOpen\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"contextMenuClick\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeCopy\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforePaste\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDrag\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDragStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDragStartHelper\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"rowDrop\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"pdfQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"pdfHeaderQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"excelQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"excelHeaderQueryCellInfo\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforeExcelExport\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"excelExportComplete\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"beforePdfExport\", void 0);\n    __decorate([\n        Event()\n    ], TreeGrid.prototype, \"pdfExportComplete\", void 0);\n    TreeGrid = TreeGrid_1 = __decorate([\n        NotifyPropertyChanges\n    ], TreeGrid);\n    return TreeGrid;\n}(Component));\nexport { TreeGrid };\n","import { Grid, Reorder as GridReorder } from '@syncfusion/ej2-grids';\n/**\n * TreeGrid Reorder module\n *\n * @hidden\n */\nvar Reorder = /** @class */ (function () {\n    /**\n     * Constructor for Reorder module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Reorder(parent) {\n        Grid.Inject(GridReorder);\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Reorder module name\n     */\n    Reorder.prototype.getModuleName = function () {\n        return 'reorder';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Reorder.prototype.addEventListener = function () {\n        this.parent.on('getColumnIndex', this.updateTreeColumn, this);\n    };\n    Reorder.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('getColumnIndex', this.updateTreeColumn);\n    };\n    /**\n     * To destroy the Reorder\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Reorder.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    Reorder.prototype.updateTreeColumn = function () {\n        this.parent['getTreeColumn']();\n    };\n    return Reorder;\n}());\nexport { Reorder };\n","import { Grid, Resize as GridResize } from '@syncfusion/ej2-grids';\n/**\n * TreeGrid Resize module\n *\n * @hidden\n */\nvar Resize = /** @class */ (function () {\n    /**\n     * Constructor for Resize module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Resize(parent) {\n        Grid.Inject(GridResize);\n        this.parent = parent;\n    }\n    /**\n     * Resize by field names.\n     *\n     * @param  {string|string[]} fName - Defines the field name.\n     * @returns {void}\n     */\n    Resize.prototype.autoFitColumns = function (fName) {\n        this.parent.grid.autoFitColumns(fName);\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Resize module name\n     */\n    Resize.prototype.getModuleName = function () {\n        return 'resize';\n    };\n    /**\n     * Destroys the Resize.\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    Resize.prototype.destroy = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.grid.resizeModule.destroy();\n    };\n    return Resize;\n}());\nexport { Resize };\n","import { Grid, RowDD as GridDragDrop, parentsUntil } from '@syncfusion/ej2-grids';\nimport { getObject, Scroll } from '@syncfusion/ej2-grids';\nimport { closest, isNullOrUndefined, setValue, extend, getValue, removeClass, addClass, setStyleAttribute } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport * as events from '../base/constant';\nimport { editAction } from './crud-actions';\nimport { getParentData, findChildrenRecords, isRemoteData, isOffline, isCountRequired } from '../utils';\n/**\n * TreeGrid RowDragAndDrop module\n *\n * @hidden\n */\nvar RowDD = /** @class */ (function () {\n    /**\n     * Constructor for render module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function RowDD(parent) {\n        /** @hidden\n         * Indicates whether a row can be dropped into the current target position during a drag-and-drop operation.\n         */\n        this.canDrop = true;\n        /** @hidden\n         * Indicates whether the current drag operation includes child records of the dragged item.\n         */\n        this.isDraggedWithChild = false;\n        /** @hidden\n         * Indicates whether multiple TreeGrid instances are being managed or displayed.\n         */\n        this.modifiedRecords = 'modifiedRecords';\n        /** @hidden\n         * Represents the currently selected item in the TreeGrid.\n         */\n        this.selectedRecords = 'selectedRecords';\n        /** @hidden\n         * Holds an array of currently selected records in the TreeGrid.\n         */\n        this.selectedRows = 'selectedRows';\n        /** @hidden\n         * Indicates whether there is a droppable item in the TreeGrid.\n         */\n        this.hasDropItem = true;\n        /** @hidden\n         * Indicates whether the item is being added to the bottom of the TreeGrid.\n         */\n        this.isaddtoBottom = false;\n        Grid.Inject(GridDragDrop);\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * Retrieves child records for a specified parent ID in the TreeGrid.\n     *\n     * @param {string} id - The unique ID of the parent record for which to retrieve child records.\n     * @returns {ITreeData[]} An array of child records corresponding to the specified parent ID.\n     */\n    RowDD.prototype.getChildrecordsByParentID = function (id) {\n        var treeGridDataSource;\n        if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n            treeGridDataSource = this.parent.grid.dataSource.dataSource.json;\n        }\n        else {\n            treeGridDataSource = this.parent.grid.dataSource;\n        }\n        var record = treeGridDataSource.filter(function (e) {\n            return e.uniqueID === id;\n        });\n        return record;\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    RowDD.prototype.addEventListener = function () {\n        this.parent.on(events.rowdraging, this.Rowdraging, this);\n        this.parent.on(events.rowDropped, this.rowDropped, this);\n        this.parent.on(events.rowsAdd, this.rowsAdded, this);\n        this.parent.on(events.rowsRemove, this.rowsRemoved, this);\n    };\n    /**\n     * Reorder the rows based on given indexes and position\n     *\n     * @returns {void}\n     * @param {number[]} fromIndexes - source indexes of rows to be re-ordered\n     * @param {number} toIndex - Destination row index\n     * @param {string} position - Drop position as above or below or child\n     */\n    RowDD.prototype.reorderRows = function (fromIndexes, toIndex, position) {\n        var tObj = this.parent;\n        if (fromIndexes[0] === toIndex || ['above', 'below', 'child'].indexOf(position) === -1) {\n            return;\n        }\n        var action = 'action';\n        var dropPosition = 'dropPosition';\n        if (fromIndexes[0] !== toIndex && ['above', 'below', 'child'].indexOf(position) !== -1) {\n            if (position === 'above') {\n                this.dropPosition = 'topSegment';\n            }\n            if (position === 'below') {\n                this.dropPosition = 'bottomSegment';\n            }\n            if (position === 'child') {\n                this.dropPosition = 'middleSegment';\n            }\n            this.parent[\"\" + dropPosition] = this.dropPosition;\n            var data = [];\n            for (var i = 0; i < fromIndexes.length; i++) {\n                var index = this.parent.getRowByIndex(fromIndexes[parseInt(i.toString(), 10)]).rowIndex;\n                data[parseInt(i.toString(), 10)] = this.parent.getCurrentViewRecords()[parseInt(index.toString(), 10)];\n            }\n            var isByMethod = true;\n            var args = {\n                data: data,\n                dropIndex: toIndex\n            };\n            if (!isCountRequired(this.parent)) {\n                this.dropRows(args, isByMethod);\n            }\n            //this.refreshGridDataSource();\n            if (tObj.isLocalData) {\n                tObj.flatData = this.orderToIndex(tObj.flatData);\n            }\n            if (this.parent[\"\" + action] === 'outdenting') {\n                if (!isNullOrUndefined(data[0].parentItem)) {\n                    data[0].level = data[0].parentItem.level + 1;\n                }\n            }\n            this.parent.grid.refresh();\n            if (this.parent.enableImmutableMode && this.dropPosition === 'middleSegment') {\n                var index = this.parent.allowRowDragAndDrop\n                    ? this.parent.treeColumnIndex + 1\n                    : (this.parent[\"\" + action] === 'indenting' ? this.parent.treeColumnIndex : undefined);\n                var row = this.parent.getRows()[fromIndexes[0]];\n                var dropData = args.data[0];\n                var totalRecord = [];\n                var rows = [];\n                totalRecord.push(dropData);\n                rows.push(row);\n                var parentUniqueID = 'parentUniqueID';\n                var parentData = getParentData(this.parent, args.data[0][\"\" + parentUniqueID]);\n                var parentrow = this.parent.getRows()[parseInt(toIndex.toString(), 10)];\n                totalRecord.push(parentData);\n                rows.push(parentrow);\n                this.updateRowAndCellElements(totalRecord, rows, index);\n            }\n            if (this.parent.enableImmutableMode && this.parent[\"\" + action] === 'outdenting') {\n                var index = this.parent.allowRowDragAndDrop\n                    ? this.parent.treeColumnIndex + 1\n                    : (this.parent[\"\" + action] === 'outdenting' ? this.parent.treeColumnIndex : undefined);\n                var record = args.data[0];\n                var row = this.parent.getRows()[fromIndexes[0]];\n                var totalRecord = [];\n                var rows = [];\n                totalRecord.push(record);\n                rows.push(row);\n                this.updateRowAndCellElements(totalRecord, rows, index);\n            }\n        }\n    };\n    /**\n     * Updates the rows and cells\n     *\n     * @param {Object[]} records - Updates the given records\n     * @param {HTMLTableRowElement[]} rows - Updates the given rows\n     * @param {number} index -  Updates the given cell index\n     * @returns {void}\n     */\n    RowDD.prototype.updateRowAndCellElements = function (records, rows, index) {\n        for (var i = 0; i < records.length; i++) {\n            this.parent.renderModule.cellRender({\n                data: records[parseInt(i.toString(), 10)], cell: rows[parseInt(i.toString(), 10)].cells[parseInt(index.toString(), 10)],\n                column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n                requestType: 'rowDragAndDrop'\n            });\n            if (this.parent['action'] === 'indenting' || this.parent['action'] === 'outdenting') {\n                this.parent.renderModule.RowModifier({\n                    data: records[parseInt(i.toString(), 10)], row: rows[parseInt(i.toString(), 10)]\n                });\n            }\n        }\n    };\n    /**\n     * Performs indent or outdent actions on selected records in the TreeGrid.\n     *\n     * @param {ITreeData} [record] - The record to be indented or outdented. If undefined, the method operates on the currently selected record.\n     * @param {string} [request] - The action to perform, either 'indent' or 'outdent'.\n     * @returns {void}\n     */\n    RowDD.prototype.indentOutdentAction = function (record, request) {\n        var tObj = this.parent;\n        var action = 'action';\n        var droppedIndex = 'dropIndex';\n        var selectedItemIndex = -1;\n        if (isNullOrUndefined(record) && this.parent.selectedRowIndex === -1) {\n            return;\n        }\n        else {\n            if (this.parent.enableVirtualization && this.parent.selectedRowIndex !== -1) {\n                selectedItemIndex = this.parent.getSelectedRows()[0].rowIndex;\n            }\n            else if (this.parent.selectedRowIndex !== -1) {\n                selectedItemIndex = this.parent.selectedRowIndex;\n            }\n            this.selectedItem = isNullOrUndefined(record) ?\n                tObj.getCurrentViewRecords()[parseInt(selectedItemIndex.toString(), 10)] : record;\n            var primaryKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n            var rowIndex = this.parent.grid.getRowIndexByPrimaryKey(this.selectedItem[\"\" + primaryKeyField]);\n            this.selectedRow = this.parent[this.selectedRows] = selectedItemIndex !== -1 ?\n                this.parent.getSelectedRows()[0]\n                : this.parent.grid.getRowByIndex(rowIndex);\n            this.selectedRecord = this.parent[this.selectedRecords] = selectedItemIndex !== -1 ?\n                tObj.getCurrentViewRecords()[parseInt(selectedItemIndex.toString(), 10)]\n                : this.selectedItem;\n            if (request === 'indent') {\n                var record_1 = tObj.getCurrentViewRecords()[this.selectedRow.rowIndex - 1];\n                var dropIndex = void 0;\n                if (this.selectedRow.rowIndex === 0 || this.selectedRow.rowIndex === -1 ||\n                    tObj.getCurrentViewRecords()[this.selectedRow.rowIndex].level - record_1.level === 1) {\n                    return;\n                }\n                if (record_1.level > this.selectedRecord.level) {\n                    for (var i = 0; i < tObj.getCurrentViewRecords().length; i++) {\n                        if (tObj.getCurrentViewRecords()[parseInt(i.toString(), 10)].taskData ===\n                            record_1.parentItem.taskData) {\n                            dropIndex = i;\n                            if (tObj.enableVirtualization) {\n                                dropIndex = parseInt(tObj.getRows()[parseInt(i.toString(), 10)].getAttribute('aria-rowindex'), 10) - 1;\n                            }\n                        }\n                    }\n                }\n                else {\n                    dropIndex = this.selectedRow.rowIndex - 1;\n                }\n                if (this.parent.enableVirtualization && this.selectedRecord && !(record_1.level > this.selectedRecord.level)) {\n                    dropIndex = parseInt(this.selectedRow.getAttribute('aria-rowindex'), 10) - 2;\n                }\n                tObj[\"\" + action] = 'indenting';\n                tObj[\"\" + droppedIndex] = dropIndex;\n                this.eventTrigger('indenting', dropIndex);\n            }\n            else if (request === 'outdent') {\n                var isInvalidSelection = this.selectedRow.rowIndex === -1 || this.selectedRow.rowIndex === 0;\n                var isRootLevel = tObj.getCurrentViewRecords()[this.selectedRow.rowIndex].level === 0;\n                if (isInvalidSelection || isRootLevel) {\n                    return;\n                }\n                var parentItem_1 = this.selectedRecord.parentItem;\n                var records = tObj.getCurrentViewRecords();\n                var dropIndex = records.findIndex(function (record) { return record.uniqueID === parentItem_1.uniqueID; });\n                if (dropIndex === -1) {\n                    return;\n                }\n                if (this.parent.enableVirtualization && this.selectedRecord) {\n                    var ariaRowIndex = this.parent.getRows()[parseInt(dropIndex.toString(), 10)].getAttribute('aria-rowindex');\n                    dropIndex = parseInt(ariaRowIndex, 10) - 1;\n                }\n                tObj[\"\" + action] = 'outdenting';\n                tObj[\"\" + droppedIndex] = dropIndex;\n                this.eventTrigger('outdenting', dropIndex);\n            }\n        }\n    };\n    /**\n     * Triggers a specified event for the TreeGrid, notifying subscribers about the event occurrence.\n     *\n     * @param {string} action - The action to be triggered, either 'indenting' or 'outdenting'.\n     * @param {number} dropIndex - The index at which the row should be dropped.\n     * @returns {void}\n     */\n    RowDD.prototype.eventTrigger = function (action, dropIndex) {\n        var _this = this;\n        var actionArgs = {\n            action: action,\n            cancel: false,\n            data: [this.parent[this.selectedRecords]],\n            row: this.parent[this.selectedRows]\n        };\n        this.parent.trigger(events.actionBegin, actionArgs, function (actionArgs) {\n            if (!actionArgs.cancel) {\n                if (actionArgs.action === 'indenting') {\n                    if (_this.parent.enableVirtualization) {\n                        _this.reorderRows([parseInt(_this.selectedRow.getAttribute('aria-rowindex'), 10) - 1], dropIndex, 'child');\n                    }\n                    else {\n                        _this.reorderRows([_this.selectedRow.rowIndex], dropIndex, 'child');\n                    }\n                }\n                else if (actionArgs.action === 'outdenting') {\n                    if (_this.parent.enableVirtualization) {\n                        _this.reorderRows([parseInt(_this.selectedRow.getAttribute('aria-rowindex'), 10) - 1], dropIndex, 'below');\n                    }\n                    else {\n                        _this.reorderRows([_this.selectedRow.rowIndex], dropIndex, 'below');\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * Reorders the flat data array of the TreeGrid and updates the index of each record.\n     *\n     * @param {ITreeData[]} currentData - The array of tree data records to reorder.\n     * @returns {ITreeData[]} The updated array of tree data records with indices set.\n     */\n    RowDD.prototype.orderToIndex = function (currentData) {\n        for (var i = 0; i < currentData.length; i++) {\n            currentData[parseInt(i.toString(), 10)].index = i;\n            if (!isNullOrUndefined(currentData[parseInt(i.toString(), 10)].parentItem)) {\n                var updatedParent = getValue('uniqueIDCollection.' + currentData[parseInt(i.toString(), 10)].parentUniqueID, this.parent);\n                currentData[parseInt(i.toString(), 10)].parentItem.index = updatedParent.index;\n            }\n        }\n        return currentData;\n    };\n    /**\n     * Handles the addition of new rows to the TreeGrid.\n     *\n     * @param {Object} e - The event object containing information about the rows being added.\n     * @param {number} e.toIndex - The index at which the new rows should be added in the TreeGrid.\n     * @param {Object[]} e.records - An array of the records to be added to the TreeGrid.\n     *\n     * @returns {void} This function does not return any value.\n     */\n    RowDD.prototype.rowsAdded = function (e) {\n        var draggedRecord;\n        var dragRecords = e.records;\n        for (var i = e.records.length - 1; i > -1; i--) {\n            draggedRecord = dragRecords[parseInt(i.toString(), 10)];\n            if (draggedRecord.parentUniqueID) {\n                var record = dragRecords.filter(function (data) {\n                    return data.uniqueID === draggedRecord.parentUniqueID;\n                });\n                if (record.length) {\n                    var index = record[0].childRecords.indexOf(draggedRecord);\n                    var parentRecord = record[0];\n                    if (index !== -1) {\n                        if (isNullOrUndefined(this.parent.idMapping)) {\n                            parentRecord.childRecords.splice(index, 1);\n                            if (!parentRecord.childRecords.length) {\n                                parentRecord.hasChildRecords = false;\n                                parentRecord.hasFilteredChildRecords = false;\n                            }\n                        }\n                        this.isDraggedWithChild = true;\n                    }\n                }\n            }\n        }\n        if (isNullOrUndefined(this.parent.dataSource) || !this.parent.dataSource.length) {\n            var tObj = this.parent;\n            var draggedRecord_1;\n            var dragRecords_1 = e.records;\n            var dragLength = e.records.length;\n            for (var i = dragLength - 1; i > -1; i--) {\n                draggedRecord_1 = dragRecords_1[parseInt(i.toString(), 10)];\n                if (!i && draggedRecord_1.hasChildRecords) {\n                    draggedRecord_1.taskData[this.parent.parentIdMapping] = null;\n                }\n                var recordIndex1 = 0;\n                if (!isNullOrUndefined(tObj.parentIdMapping)) {\n                    tObj.childMapping = null;\n                }\n                if (!isNullOrUndefined(draggedRecord_1.taskData) && !isNullOrUndefined(tObj.childMapping) &&\n                    !Object.prototype.hasOwnProperty.call(draggedRecord_1.taskData, tObj.childMapping)) {\n                    draggedRecord_1.taskData[tObj.childMapping] = [];\n                }\n                if (!isNullOrUndefined(draggedRecord_1[tObj.childMapping])) {\n                    if (Object.prototype.hasOwnProperty.call(draggedRecord_1, tObj.childMapping) &&\n                        (draggedRecord_1[tObj.childMapping]).length && !this.isDraggedWithChild &&\n                        !isNullOrUndefined(tObj.parentIdMapping)) {\n                        var childData = (draggedRecord_1[tObj.childMapping]);\n                        for (var j = 0; j < childData.length; j++) {\n                            if (dragRecords_1.indexOf(childData[parseInt(j.toString(), 10)]) === -1) {\n                                dragRecords_1.splice(j, 0, childData[parseInt(j.toString(), 10)]);\n                                childData[parseInt(j.toString(), 10)].taskData = extend({}, childData[parseInt(j.toString(), 10)]);\n                                i += 1;\n                            }\n                        }\n                    }\n                }\n                if (Object.prototype.hasOwnProperty.call(draggedRecord_1, tObj.parentIdMapping)\n                    && draggedRecord_1[tObj.parentIdMapping] !== null\n                    && !this.isDraggedWithChild) {\n                    draggedRecord_1.taskData[tObj.parentIdMapping] = null;\n                    delete draggedRecord_1.parentItem;\n                    delete draggedRecord_1.parentUniqueID;\n                }\n                if (isNullOrUndefined(tObj.dataSource)) {\n                    tObj.dataSource = [];\n                }\n                tObj.dataSource.splice(recordIndex1, 0, draggedRecord_1.taskData);\n            }\n            tObj.setProperties({ dataSource: tObj.dataSource }, false);\n        }\n        else {\n            for (var i = 0; i < dragRecords.length; i++) {\n                setValue('uniqueIDCollection.' + dragRecords[parseInt(i.toString(), 10)].uniqueID, dragRecords[parseInt(i.toString(), 10)], this.parent);\n            }\n            var args = { data: e.records, dropIndex: e.toIndex };\n            if (this.parent.dataSource instanceof DataManager) {\n                this.treeGridData = this.parent.dataSource.dataSource.json;\n                this.treeData = this.parent.dataSource.dataSource.json;\n            }\n            else {\n                this.treeGridData = this.parent.grid.dataSource;\n                this.treeData = this.parent.dataSource;\n            }\n            if (isNullOrUndefined(this.dropPosition)) {\n                this.dropPosition = 'bottomSegment';\n                args.dropIndex = this.parent.getCurrentViewRecords().length > 1 ? this.parent.getCurrentViewRecords().length - 1 :\n                    args.dropIndex;\n                args.data = args.data.map(function (i) {\n                    if (i.hasChildRecords && isNullOrUndefined(i.parentItem)) {\n                        i.level = 0;\n                        return i;\n                    }\n                    else {\n                        delete i.parentItem;\n                        delete i.parentUniqueID;\n                        i.level = 0;\n                        return i;\n                    }\n                });\n            }\n            this.dropRows(args);\n        }\n    };\n    /**\n     * Handles the removal of specified rows from the TreeGrid.\n     *\n     * @param {Object} e - The event object containing information about the removed rows.\n     * @param {number[]} e.indexes - An array of indexes of the rows that were removed.\n     * @param {Object[]} e.records - An array of the records corresponding to the removed rows.\n     *\n     * @returns {void} This function does not return any value.\n     */\n    RowDD.prototype.rowsRemoved = function (e) {\n        for (var i = 0; i < e.records.length; i++) {\n            this.draggedRecord = e.records[parseInt(i.toString(), 10)];\n            if (this.draggedRecord.hasChildRecords || this.draggedRecord.parentItem &&\n                this.parent.grid.dataSource.\n                    indexOf(this.getChildrecordsByParentID(this.draggedRecord.parentUniqueID)[0]) !== -1 ||\n                this.draggedRecord.level === 0) {\n                this.deleteDragRow();\n            }\n        }\n    };\n    /**\n     * Refreshes the data source of the TreeGrid.\n     *\n     * @returns {void} This function does not return any value.\n     */\n    RowDD.prototype.refreshGridDataSource = function () {\n        var draggedRecord = this.draggedRecord;\n        var droppedRecord = this.droppedRecord;\n        var proxy = this.parent;\n        var temporaryDataSource;\n        var indexOfDroppedRecord;\n        if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n            temporaryDataSource = proxy.dataSource.dataSource.json;\n        }\n        else {\n            temporaryDataSource = proxy.dataSource;\n        }\n        if (temporaryDataSource && (!isNullOrUndefined(droppedRecord) && !droppedRecord.parentItem)\n            && !isNullOrUndefined(droppedRecord.taskData)) {\n            var keys = Object.keys(temporaryDataSource);\n            for (var i = 0; i < keys.length; i++) {\n                if (temporaryDataSource[parseInt(i.toString(), 10)][this.parent.childMapping] ===\n                    droppedRecord.taskData[this.parent.childMapping]) {\n                    indexOfDroppedRecord = i;\n                }\n            }\n            if (!this.parent.idMapping) {\n                var positionAdjustment = this.dropPosition === 'topSegment' ? 0 : 1;\n                if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n                    temporaryDataSource.splice(indexOfDroppedRecord + positionAdjustment, 0, draggedRecord.taskData);\n                }\n            }\n        }\n        else if (!this.parent.parentIdMapping && (!isNullOrUndefined(droppedRecord) && droppedRecord.parentItem)) {\n            if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n                var record = this.getChildrecordsByParentID(droppedRecord.parentUniqueID)[0];\n                var childRecords = record.childRecords;\n                for (var i = 0; i < childRecords.length; i++) {\n                    droppedRecord.parentItem.taskData[this.parent.childMapping][parseInt(i.toString(), 10)]\n                        = childRecords[parseInt(i.toString(), 10)].taskData;\n                }\n            }\n        }\n        if (this.parent.parentIdMapping) {\n            if (draggedRecord.parentItem) {\n                if (this.dropPosition === 'topSegment' || this.dropPosition === 'bottomSegment') {\n                    draggedRecord[this.parent.parentIdMapping] = droppedRecord[this.parent.parentIdMapping];\n                    draggedRecord.taskData[this.parent.parentIdMapping] = droppedRecord[this.parent.parentIdMapping];\n                }\n                else {\n                    draggedRecord[this.parent.parentIdMapping] = droppedRecord[this.parent.idMapping];\n                    draggedRecord.taskData[this.parent.parentIdMapping] = droppedRecord[this.parent.idMapping];\n                }\n            }\n            else {\n                draggedRecord.taskData[this.parent.parentIdMapping] = null;\n                draggedRecord[this.parent.parentIdMapping] = null;\n            }\n        }\n    };\n    /**\n     * Removes the border from the first row of the TreeGrid.\n     *\n     * @param {HTMLTableRowElement} element - The table row element from which to remove the border.\n     * @returns {void} This function does not return any value.\n     */\n    RowDD.prototype.removeFirstrowBorder = function (element) {\n        var canremove = this.dropPosition === 'bottomSegment';\n        if (this.parent.element.getElementsByClassName('e-firstrow-border').length > 0 && element &&\n            (element.rowIndex !== 0 || canremove)) {\n            this.parent.element.getElementsByClassName('e-firstrow-border')[0].remove();\n        }\n    };\n    /**\n     * Removes the border from the last row of the TreeGrid.\n     *\n     * @param {HTMLTableRowElement} element - The row element from which to remove the last row border.\n     * @returns {void}\n     */\n    RowDD.prototype.removeLastrowBorder = function (element) {\n        if (!element) {\n            return;\n        }\n        var isEmptyRow = element.classList.contains('e-emptyrow') ||\n            element.classList.contains('e-columnheader') ||\n            element.classList.contains('e-detailrow');\n        if (isEmptyRow) {\n            return;\n        }\n        var lastRow = this.parent.enableVirtualization ?\n            this.parent.getRows()[this.parent.getCurrentViewRecords().length - 1] :\n            this.parent.getRowByIndex(this.parent.getCurrentViewRecords().length - 1);\n        var isNotLastRow = lastRow.getAttribute('data-uid') !== element.getAttribute('data-uid');\n        var canRemove = isNotLastRow || this.dropPosition === 'topSegment';\n        var lastRowBorderElement = this.parent.element.getElementsByClassName('e-lastrow-border')[0];\n        if (lastRowBorderElement && canRemove) {\n            lastRowBorderElement.remove();\n        }\n    };\n    /**\n     * Updates the icons associated with the specified rows in the TreeGrid.\n     *\n     * @param {Element[]} row - The array of row elements to update the icons for.\n     * @param {number} index - The index of the row being updated.\n     * @param {RowDragEventArgs} args - The event arguments associated with the row drag operation.\n     * @returns {string} The drop position ('topSegment', 'middleSegment', 'bottomSegment', or 'Invalid').\n     */\n    RowDD.prototype.updateIcon = function (row, index, args) {\n        var rowEle = args.target ? closest(args.target, 'tr') : null;\n        this.dropPosition = undefined;\n        var rowPositionHeight = 0;\n        this.removeFirstrowBorder(rowEle);\n        this.removeLastrowBorder(rowEle);\n        for (var i = 0; i < args.rows.length; i++) {\n            if (!isNullOrUndefined(rowEle) && rowEle.getAttribute('data-uid') === args.rows[parseInt(i.toString(), 10)].getAttribute('data-uid')\n                || !parentsUntil(args.target, 'e-gridcontent')) {\n                this.dropPosition = 'Invalid';\n                this.addErrorElem();\n                if (isNullOrUndefined(this.parent.rowDropSettings.targetID)) {\n                    this.removetopOrBottomBorder();\n                    this.removeChildBorder();\n                }\n            }\n        }\n        // To get the corresponding drop position related to mouse position\n        var tObj = this.parent;\n        var rowTop = 0;\n        var roundOff = 0;\n        var toolHeight = tObj.toolbar && tObj.toolbar.length ?\n            document.getElementById(tObj.element.id + '_gridcontrol_toolbarItems').offsetHeight : 0;\n        // tObj.lastRow = tObj.getRowByIndex(tObj.getCurrentViewRecords().length - 1);\n        var positionOffSet = this.getOffset(tObj.element);\n        // let contentHeight1: number = (tObj.element.offsetHeight  - (tObj.getContent() as HTMLElement).offsetHeight) + positionOffSet.top;\n        var contentHeight = tObj.getHeaderContent().offsetHeight + positionOffSet.top + toolHeight;\n        var scrollTop = tObj.getContent().firstElementChild.scrollTop;\n        if (!isNullOrUndefined(rowEle)) {\n            rowPositionHeight = rowEle.offsetTop - scrollTop;\n        }\n        // let scrollTop = (tObj.grid.scrollModule as any).content.scrollTop;\n        if (this.parent.enableVirtualization) {\n            rowTop = rowEle.getBoundingClientRect().top;\n        }\n        else {\n            rowTop = rowPositionHeight + contentHeight + roundOff;\n        }\n        var rowBottom = row[0].offsetHeight !== 0 && isNullOrUndefined(rowEle) ?\n            rowTop + row[0].offsetHeight : rowTop + rowEle.offsetHeight;\n        var difference = rowBottom - rowTop;\n        var divide = difference / 3;\n        var topRowSegment = rowTop + divide;\n        var middleRowSegment = topRowSegment + divide;\n        var bottomRowSegment = middleRowSegment + divide;\n        var mouseEvent = getObject('originalEvent.event', args);\n        var touchEvent = getObject('originalEvent.event', args);\n        var posy = (mouseEvent.type === 'mousemove') ? mouseEvent.pageY : ((!isNullOrUndefined(touchEvent) &&\n            !isNullOrUndefined(touchEvent.changedTouches)) ? touchEvent.changedTouches[0].pageY : null);\n        if (this.parent.enableVirtualization) {\n            posy = (mouseEvent.type === 'mousemove') ? mouseEvent.clientY : ((!isNullOrUndefined(touchEvent) &&\n                !isNullOrUndefined(touchEvent.changedTouches)) ? touchEvent.changedTouches[0].clientY : null);\n        }\n        var isTopSegment = posy <= topRowSegment;\n        var isMiddleRowSegment = (posy > topRowSegment && posy <= middleRowSegment);\n        var isBottomRowSegment = (posy > middleRowSegment && posy <= bottomRowSegment);\n        var isBorderNeed = true;\n        if (isTopSegment || isMiddleRowSegment || isBottomRowSegment) {\n            if (isTopSegment && this.dropPosition !== 'Invalid') {\n                this.removeChildBorder();\n                this.dropPosition = 'topSegment';\n                this.removetopOrBottomBorder();\n                this.addFirstrowBorder(rowEle);\n                this.removeErrorElem();\n                this.removeLastrowBorder(rowEle);\n            }\n            if (isMiddleRowSegment && this.dropPosition !== 'Invalid') {\n                this.removetopOrBottomBorder();\n                this.dropPosition = 'middleSegment';\n                this.addLastRowborder(rowEle);\n                this.addFirstrowBorder(rowEle);\n            }\n            if (isBottomRowSegment && this.dropPosition !== 'Invalid') {\n                this.removeErrorElem();\n                this.removetopOrBottomBorder();\n                this.removeChildBorder();\n                this.dropPosition = 'bottomSegment';\n                this.addLastRowborder(rowEle);\n                this.removeFirstrowBorder(rowEle);\n            }\n            if ((isTopSegment || isBottomRowSegment) && this.dropPosition !== 'Invalid') {\n                isBorderNeed = this.updateBorderStatus(row, index);\n                this.topOrBottomBorder(args.target, isBorderNeed);\n            }\n            else if (isMiddleRowSegment && this.dropPosition !== 'Invalid') {\n                var rowElement = [];\n                var element = closest(args.target, 'tr');\n                rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));\n                isBorderNeed = this.updateBorderStatus(row, index);\n                if (rowElement.length > 0 && isBorderNeed) {\n                    this.addRemoveClasses(rowElement, true, 'e-childborder');\n                }\n            }\n        }\n        return this.dropPosition;\n    };\n    /**\n     * Updates the border status for a specified row and index.\n     *\n     * @private\n     * @param {Element[]} row - The array of row elements to be updated.\n     * @param {number} index - The index of the row element for which the border status is to be updated.\n     * @returns {boolean} - Returns true if the border status was successfully updated, otherwise false.\n     */\n    RowDD.prototype.updateBorderStatus = function (row, index) {\n        var _this = this;\n        var isBorderNeed = true;\n        var rows = this.parent.grid.getRows();\n        var childRows = [];\n        var hasDetailTemplate = false;\n        if (!isNullOrUndefined(this.parent.detailTemplate)) {\n            rows = this.parent.getDataRows();\n            hasDetailTemplate = true;\n        }\n        var treegridColumnIndex = this.parent.treeColumnIndex;\n        var treeColIndex = this.parent.allowRowDragAndDrop ?\n            (hasDetailTemplate ? treegridColumnIndex + 2 : treegridColumnIndex + 1) :\n            (hasDetailTemplate ? treegridColumnIndex + 1 : treegridColumnIndex);\n        if (!isNullOrUndefined(this.parent.rowDropSettings.targetID)) {\n            treeColIndex = treegridColumnIndex;\n        }\n        var dragRows = row;\n        var targetRow = [rows[\"\" + index]];\n        if (this.dropPosition === 'topSegment') {\n            row.filter(function (e) {\n                if (isNullOrUndefined(e) || isNullOrUndefined(e.cells) || isNullOrUndefined(targetRow[0]) ||\n                    isNullOrUndefined(targetRow[0].cells)) {\n                    return true;\n                }\n                var regex = /index(\\d+)|level(\\d+)/g;\n                var parentIndexLevel = e === null || e === undefined ? undefined : e.cells[\"\" + treeColIndex].className.match(regex);\n                var dropIndexLevel = targetRow[0].cells[\"\" + treeColIndex].className.match(regex);\n                if (isNullOrUndefined(dropIndexLevel) || isNullOrUndefined(dropIndexLevel)) {\n                    return true;\n                }\n                var parentLevel = +parentIndexLevel[1].match(/\\d+/)[0];\n                var dropParentLevel = +dropIndexLevel[1].match(/\\d+/)[0];\n                var InDraggedRowIndex = false;\n                if (parentLevel !== 0 && parentLevel !== dropParentLevel) {\n                    return true;\n                }\n                for (var i = 0; i < rows.length; i++) {\n                    if (rows[parseInt(i.toString(), 10)] === dragRows[0]) {\n                        InDraggedRowIndex = true;\n                    }\n                    if (InDraggedRowIndex && rows[parseInt(i.toString(), 10)] !== dragRows[0]) {\n                        var parentIndexLevelInRow = rows[parseInt(i.toString(), 10)].cells[\"\" + treeColIndex].className.match(regex);\n                        var parentLevelInRow = +parentIndexLevelInRow[1].match(/\\d+/)[0];\n                        if (parentLevelInRow !== parentLevel && parentLevelInRow > parentLevel) {\n                            childRows.push(rows[parseInt(i.toString(), 10)]);\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n                if (parentLevel === dropParentLevel && ((childRows.length > 0 && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index - (childRows.length + 1)) || (childRows.length === 0 && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index - 1))) {\n                    isBorderNeed = false;\n                }\n                return true;\n            });\n            isBorderNeed = (!isNullOrUndefined(row) && childRows.length === 0 && !isNullOrUndefined(row[0].getAttribute('aria-rowindex')) && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index - 1) && isNullOrUndefined(row[0]) ? false : isBorderNeed;\n        }\n        if (this.dropPosition === 'bottomSegment') {\n            targetRow.filter(function (e) {\n                if (isNullOrUndefined(e) || isNullOrUndefined(e.cells) || isNullOrUndefined(dragRows[0]) ||\n                    isNullOrUndefined(dragRows[0].cells)) {\n                    return true;\n                }\n                var regex = /index(\\d+)|level(\\d+)/g;\n                var parentIndexLevel = e === null || e === undefined ? undefined : e.cells[\"\" + treeColIndex].className.match(regex);\n                var dragIndexLevel = dragRows[0].cells[\"\" + treeColIndex].className.match(regex);\n                if (isNullOrUndefined(dragIndexLevel) || isNullOrUndefined(parentIndexLevel)) {\n                    return true;\n                }\n                var parentLevel = +parentIndexLevel[1].match(/\\d+/)[0];\n                var dragParentLevel = +dragIndexLevel[1].match(/\\d+/)[0];\n                var InDraggedRowIndex = false;\n                if (parentLevel !== 0 && parentLevel !== dragParentLevel) {\n                    return true;\n                }\n                for (var i = 0; i < rows.length; i++) {\n                    if (rows[parseInt(i.toString(), 10)] === targetRow[0]) {\n                        InDraggedRowIndex = true;\n                    }\n                    if (InDraggedRowIndex && rows[parseInt(i.toString(), 10)] !== targetRow[0]) {\n                        var parentIndexLevelInRow = rows[parseInt(i.toString(), 10)].cells[\"\" + treeColIndex].className.match(regex);\n                        var parentLevelInRow = +parentIndexLevelInRow[1].match(/\\d+/)[0];\n                        if (parentLevelInRow !== parentLevel && parentLevelInRow > parentLevel) {\n                            childRows.push(rows[parseInt(i.toString(), 10)]);\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n                if (!isNullOrUndefined(row) && parentLevel === dragParentLevel && ((childRows.length > 0 && !isNullOrUndefined(row[0].getAttribute('aria-rowindex')) && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index + (childRows.length + 1)) || (childRows.length === 0 && !isNullOrUndefined(row[0].getAttribute('aria-rowindex')) && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index + 1))) {\n                    isBorderNeed = false;\n                }\n                return true;\n            });\n            isBorderNeed = (!isNullOrUndefined(row) && childRows.length === 0 && !isNullOrUndefined(row[0].getAttribute('aria-rowindex')) && parseInt(row[0].getAttribute('aria-rowindex'), 10) - 1 === index + 1) && isNullOrUndefined(row[0]) ? false : isBorderNeed;\n        }\n        if (this.dropPosition === 'middleSegment') {\n            targetRow.filter(function (e) {\n                if (isNullOrUndefined(e) || isNullOrUndefined(e.cells) || isNullOrUndefined(dragRows[0]) ||\n                    isNullOrUndefined(dragRows[0].cells)) {\n                    return true;\n                }\n                for (var i = 0; i < dragRows.length; i++) {\n                    var regex = /index(\\d+)|level(\\d+)/g;\n                    var dropActualIndex = targetRow[0].rowIndex;\n                    var dragIndexLevel = dragRows[parseInt(i.toString(), 10)].cells[\"\" + treeColIndex].className.match(regex);\n                    if (!dragIndexLevel) {\n                        return true;\n                    }\n                    var dragIndex = parseInt(dragIndexLevel.find(function (item) { return item.includes('index'); }).match(/\\d+/)[0] || '0', 10);\n                    if (hasDetailTemplate) {\n                        dropActualIndex = dropActualIndex / 2;\n                    }\n                    if (dragIndex === dropActualIndex) {\n                        isBorderNeed = false;\n                    }\n                    else {\n                        isBorderNeed = true;\n                        break;\n                    }\n                }\n                if (!isBorderNeed) {\n                    _this.dropPosition = 'Invalid';\n                    _this.addErrorElem();\n                }\n                return isBorderNeed;\n            });\n        }\n        this.canDrop = isBorderNeed;\n        return isBorderNeed;\n    };\n    /**\n     * Removes the visual border from all child rows within the TreeGrid.\n     *\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.removeChildBorder = function () {\n        var borderElem = [];\n        borderElem = [].slice.call(this.parent.element.querySelectorAll('.e-childborder'));\n        if (borderElem.length > 0) {\n            this.addRemoveClasses(borderElem, false, 'e-childborder');\n        }\n    };\n    /**\n     * Adds a visual border to the first row of the TreeGrid.\n     *\n     * @param {HTMLTableRowElement} targetRow - The target row element to which the border will be added, if it is the first row.\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.addFirstrowBorder = function (targetRow) {\n        var node = this.parent.element;\n        var tObj = this.parent;\n        if (targetRow && targetRow.rowIndex === 0 && !targetRow.classList.contains('e-emptyrow')) {\n            var div = this.parent.createElement('div', { className: 'e-firstrow-border' });\n            var gridheaderEle = this.parent.getHeaderContent();\n            var toolbarHeight = 0;\n            if (tObj.toolbar) {\n                toolbarHeight = tObj.toolbarModule.getToolbar().offsetHeight;\n            }\n            var multiplegrid = !isNullOrUndefined(this.parent.rowDropSettings.targetID);\n            if (multiplegrid) {\n                div.style.top = this.parent.grid.element.getElementsByClassName('e-gridheader')[0].offsetHeight\n                    + toolbarHeight + 'px';\n            }\n            div.style.width = multiplegrid ? node.offsetWidth + 'px' :\n                node.offsetWidth - this.getScrollWidth() + 'px';\n            if (!gridheaderEle.querySelectorAll('.e-firstrow-border').length) {\n                gridheaderEle.appendChild(div);\n            }\n        }\n    };\n    /**\n     * Adds a visual border to the last row of the TreeGrid.\n     *\n     * @param {HTMLTableRowElement} trElement - The table row element to which the border will be added, if it is the last row.\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.addLastRowborder = function (trElement) {\n        if (!trElement) {\n            return;\n        }\n        var isEmptyRow = trElement && (trElement.classList.contains('e-emptyrow') ||\n            trElement.classList.contains('e-columnheader') || trElement.classList.contains('e-detailrow'));\n        if (isEmptyRow) {\n            return;\n        }\n        if (trElement && !isEmptyRow && this.parent.getRows()[this.parent.getCurrentViewRecords().length - 1].getAttribute('data-uid') ===\n            trElement.getAttribute('data-uid')) {\n            var bottomborder = this.parent.createElement('div', { className: 'e-lastrow-border' });\n            var gridcontentEle = this.parent.getContent();\n            bottomborder.style.width = this.parent.element.offsetWidth - this.getScrollWidth() + 'px';\n            if (!gridcontentEle.querySelectorAll('.e-lastrow-border').length) {\n                gridcontentEle.classList.add('e-treegrid-relative');\n                gridcontentEle.appendChild(bottomborder);\n                bottomborder.style.bottom = this.getScrollWidth() + 'px';\n            }\n        }\n    };\n    /**\n     * Retrieves the total scroll width of the TreeGrid content area.\n     *\n     * @returns {number} The width of the scrollbar if content overflows, otherwise 0.\n     */\n    RowDD.prototype.getScrollWidth = function () {\n        var scrollElem = this.parent.getContent().firstElementChild;\n        return scrollElem.scrollWidth > scrollElem.offsetWidth ? Scroll.getScrollBarWidth() : 0;\n    };\n    /**\n     * Adds an error element to the dragged row element during a row drag-and-drop operation.\n     *\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.addErrorElem = function () {\n        var dragelem = document.getElementsByClassName('e-cloneproperties')[0];\n        var errorelemCount = dragelem.querySelectorAll('.e-errorelem').length;\n        var sanitize = 'sanitize';\n        if (!errorelemCount && !this.parent.rowDropSettings.targetID) {\n            var errorContainer = document.createElement('div');\n            errorContainer.classList.add('e-errorcontainer', 'e-icons', 'e-errorelem');\n            var rowCell = dragelem.querySelector('.e-rowcell');\n            var errorVal = dragelem.querySelector('.errorValue');\n            var content = rowCell.innerHTML;\n            if (errorVal) {\n                content = this.parent[\"\" + sanitize](errorVal.innerHTML);\n                errorVal.parentNode.removeChild(errorVal);\n            }\n            rowCell.innerHTML = '';\n            var spanContent = document.createElement('span');\n            spanContent.className = 'errorValue';\n            spanContent.style.paddingLeft = '16px';\n            spanContent.innerHTML = this.parent[\"\" + sanitize](content);\n            rowCell.appendChild(errorContainer);\n            rowCell.appendChild(spanContent);\n            var dropItemSpan = document.querySelector('.e-dropitemscount');\n            if (this.hasDropItem && dropItemSpan) {\n                var dropItemLeft = parseInt(dropItemSpan.style.left, 10) + errorContainer.offsetWidth + 16;\n                var spanLeft = !this.parent.enableRtl ? dropItemLeft : 0;\n                dropItemSpan.style.left = spanLeft + \"px\";\n                this.hasDropItem = false;\n            }\n        }\n    };\n    /**\n     * Removes the error element from the DOM and adjusts the position of the drop item count if necessary.\n     *\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.removeErrorElem = function () {\n        var errorelem = document.querySelector('.e-errorelem');\n        var errorValue = document.querySelector('.errorValue');\n        var dropItemSpan = document.querySelector('.e-dropitemscount');\n        if (errorelem) {\n            if (dropItemSpan) {\n                var dropItemLeft = parseInt(dropItemSpan.style.left, 10) - errorelem.offsetWidth - 16;\n                setStyleAttribute(errorValue, {\n                    paddingLeft: '0px'\n                });\n                if (!this.parent.enableRtl) {\n                    setStyleAttribute(dropItemSpan, {\n                        left: dropItemLeft + \"px\"\n                    });\n                }\n            }\n            errorelem.remove();\n        }\n        this.hasDropItem = true;\n    };\n    /**\n     * Applies drop border styles to row elements based on the current drop position ('topSegment' or 'bottomSegment').\n     *\n     * @param {Element} target - The target element where the drop action is taking place.\n     * @param {boolean} [isBorderNeed=true] - Indicates whether a border is needed during the drop action. Defaults to `true`.\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.topOrBottomBorder = function (target, isBorderNeed) {\n        if (isBorderNeed === void 0) { isBorderNeed = true; }\n        var element = closest(target, 'tr');\n        var rowElements = element ?\n            Array.from(element.querySelectorAll('.e-rowcell, .e-rowdragdrop, .e-detailrowcollapse')) : [];\n        if (!rowElements.length) {\n            return;\n        }\n        var classAction = isBorderNeed ? this.addRemoveClasses.bind(this, rowElements, true) : this.addRemoveClasses.bind(this, rowElements, false, 'e-dragborder');\n        if (this.dropPosition === 'topSegment') {\n            classAction('e-droptop');\n            var lastRowDragBorder = this.parent.element.querySelector('.e-lastrow-dragborder');\n            if (lastRowDragBorder) {\n                lastRowDragBorder.remove();\n            }\n        }\n        if (this.dropPosition === 'bottomSegment') {\n            classAction('e-dropbottom');\n        }\n    };\n    /**\n     * Removes the drop border classes ('e-dropbottom' and 'e-droptop') from the parent element if present.\n     *\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.removetopOrBottomBorder = function () {\n        var border = [];\n        border = [].slice.call(this.parent.element.querySelectorAll('.e-dropbottom, .e-droptop'));\n        if (border.length) {\n            this.addRemoveClasses(border, false, 'e-dropbottom');\n            this.addRemoveClasses(border, false, 'e-droptop');\n        }\n    };\n    /**\n     * Adds or removes a specified class from a list of HTML elements.\n     *\n     * @param {Element[]} cells - The list of HTML elements to which the class will be added or removed.\n     * @param {boolean} add - A flag indicating whether to add (`true`) or remove (`false`) the class.\n     * @param {string} className - The class name to be added or removed from each element in `cells`.\n     * @returns {void} No return value.\n     */\n    RowDD.prototype.addRemoveClasses = function (cells, add, className) {\n        for (var i = 0, len = cells.length; i < len; i++) {\n            if (add) {\n                cells[parseInt(i.toString(), 10)].classList.add(className);\n            }\n            else {\n                cells[parseInt(i.toString(), 10)].classList.remove(className);\n            }\n        }\n    };\n    /**\n     * Calculates the offset position of the specified HTML element relative to the document.\n     *\n     * @param {Element} element - The HTML element for which the offset position is calculated.\n     * @returns {PositionOffSet} The offset position containing `top` and `left` values.\n     */\n    RowDD.prototype.getOffset = function (element) {\n        var box = element.getBoundingClientRect();\n        var body = document.body;\n        var docElem = document.documentElement;\n        var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;\n        var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;\n        var clientTop = docElem.clientTop || body.clientTop || 0;\n        var clientLeft = docElem.clientLeft || body.clientLeft || 0;\n        var top = box.top + scrollTop - clientTop;\n        var left = box.left + scrollLeft - clientLeft;\n        return { top: Math.round(top), left: Math.round(left) };\n    };\n    /**\n     * Handles the dragging of rows in the TreeGrid.\n     *\n     * @param {RowDragEventArgs} args - The event arguments for the row drag action.\n     * @returns {void} This function does not return a value.\n     */\n    RowDD.prototype.Rowdraging = function (args) {\n        var tObj = this.parent;\n        var cloneElement = this.parent.element.querySelector('.e-cloneproperties');\n        if (!cloneElement) {\n            return;\n        }\n        cloneElement.style.cursor = '';\n        var rowEle = args.target ? closest(args.target, 'tr') : null;\n        var rowIdx = -1;\n        if (!isNullOrUndefined(this.parent.detailTemplate)) {\n            rowIdx = rowEle ? this.parent.getDataRows().indexOf(rowEle) : -1;\n        }\n        else {\n            rowIdx = rowEle ? rowEle.rowIndex : -1;\n        }\n        if (rowIdx === -1) {\n            this.canDrop = false;\n            this.addErrorElem();\n            this.removetopOrBottomBorder();\n            this.removeChildBorder();\n            return;\n        }\n        var dragRecords = Array.isArray(args.data) ? args.data : [args.data];\n        var droppedRecord = tObj.getCurrentViewRecords()[parseInt(rowIdx.toString(), 10)];\n        this.removeErrorElem();\n        this.canDrop = true;\n        this.ensuredropPosition(dragRecords, droppedRecord);\n        if (!tObj.rowDropSettings.targetID && this.canDrop && !isNullOrUndefined(args.rows[0])) {\n            tObj.rowDragAndDropModule.updateIcon(args.rows, rowIdx, args);\n        }\n        if (tObj.rowDropSettings.targetID) {\n            var dropElement = parentsUntil(args.target, 'e-treegrid');\n            if (dropElement && dropElement.id === this.parent.rowDropSettings.targetID) {\n                var srcControl = dropElement.ej2_instances[0];\n                srcControl.rowDragAndDropModule.updateIcon(args.rows, rowIdx, args);\n            }\n        }\n        if (args.target && closest(args.target, '#' + tObj.rowDropSettings.targetID)) {\n            var dropElement = parentsUntil(args.target, 'e-treegrid');\n            if (!dropElement) {\n                cloneElement.style.cursor = 'default';\n            }\n        }\n    };\n    /**\n     * Handles the row drop event for the TreeGrid.\n     *\n     * @param {RowDropEventArgs} args - The event arguments for the row drop action.\n     * @returns {void} This function does not return a value.\n     */\n    RowDD.prototype.rowDropped = function (args) {\n        var tObj = this.parent;\n        var parentItem = 'parentItem';\n        if (!tObj.rowDropSettings.targetID) {\n            if (parentsUntil(args.target, 'e-content') || (this.dropPosition === 'Invalid' || !this.canDrop)) {\n                if (this.parent.element.querySelector('.e-errorelem') || !this.canDrop) {\n                    this.dropPosition = 'Invalid';\n                }\n                setValue('dropPosition', this.dropPosition, args);\n                tObj.trigger(events.rowDrop, args);\n                if (!args.cancel) {\n                    if (!isCountRequired(this.parent) && (this.dropPosition === 'Invalid' && !this.canDrop)) {\n                        return;\n                    }\n                    if (!isCountRequired(this.parent)) {\n                        this.dropRows(args);\n                    }\n                    if (tObj.isLocalData) {\n                        tObj.flatData = this.orderToIndex(tObj.flatData);\n                    }\n                    tObj.grid.refresh();\n                    this.removeRowBorders();\n                }\n            }\n        }\n        else {\n            if (args.target && closest(args.target, '#' + tObj.rowDropSettings.targetID) || parentsUntil(args.target, 'e-treegrid') &&\n                parentsUntil(args.target, 'e-treegrid').id === tObj.rowDropSettings.targetID || args.target && document.getElementById(tObj.rowDropSettings.targetID)) {\n                if (!this.canDrop) {\n                    this.dropPosition = 'Invalid';\n                }\n                setValue('dropPosition', this.dropPosition, args);\n                tObj.trigger(events.rowDrop, args);\n                if (!args.cancel && tObj.rowDropSettings.targetID) {\n                    if (this.dropPosition === 'Invalid' && !this.canDrop) {\n                        return;\n                    }\n                    this.dragDropGrid(args);\n                    if (tObj.isLocalData) {\n                        tObj.flatData = this.orderToIndex(tObj.flatData);\n                    }\n                }\n            }\n        }\n        this.removetopOrBottomBorder();\n        this.removeChildBorder();\n        this.removeRowBorders();\n        if (this.parent.enableImmutableMode && !this.parent.allowPaging && !isNullOrUndefined(args.data[0][\"\" + parentItem])) {\n            var index = this.parent.treeColumnIndex;\n            index = index + 1;\n            var primaryKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n            var rowIndex = this.parent.grid.getRowIndexByPrimaryKey(args.data[0][\"\" + primaryKeyField]);\n            var row = this.parent.getRows()[parseInt(rowIndex.toString(), 10)];\n            var data = args.data[0];\n            if (this.dropPosition === 'middleSegment') {\n                var record = [];\n                var rows = [];\n                record.push(data);\n                rows.push(row);\n                var parentUniqueID = 'parentUniqueID';\n                data = getParentData(this.parent, args.data[0][\"\" + parentUniqueID]);\n                rowIndex = this.parent.grid.getRowIndexByPrimaryKey(data[\"\" + primaryKeyField]);\n                var parentrow = this.parent.getRows()[parseInt(rowIndex.toString(), 10)];\n                record.push(data);\n                rows.push(parentrow);\n                for (var i = 0; i < record.length; i++) {\n                    this.parent.renderModule.cellRender({\n                        data: record[parseInt(i.toString(), 10)],\n                        cell: rows[parseInt(i.toString(), 10)].cells[parseInt(index.toString(), 10)],\n                        column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n                        requestType: 'rowDragAndDrop'\n                    });\n                }\n                var targetEle = parentrow.getElementsByClassName('e-treegridcollapse')[0];\n                if (!isNullOrUndefined(targetEle)) {\n                    removeClass([targetEle], 'e-treegridcollapse');\n                    addClass([targetEle], 'e-treegridexpand');\n                }\n            }\n            else {\n                this.parent.renderModule.cellRender({\n                    data: data, cell: row.cells[parseInt(index.toString(), 10)],\n                    column: this.parent.grid.getColumns()[this.parent.treeColumnIndex],\n                    requestType: 'rowDragAndDrop'\n                });\n            }\n        }\n    };\n    /**\n     * Removes the border elements for the first and last rows of the TreeGrid.\n     *\n     * @returns {void} This function does not return a value.\n     */\n    RowDD.prototype.removeRowBorders = function () {\n        var _this = this;\n        ['e-firstrow-border', 'e-lastrow-border'].forEach(function (className) {\n            var element = _this.parent.element.getElementsByClassName(className)[0];\n            if (element) {\n                element.remove();\n            }\n        });\n    };\n    /**\n     * Handles the drag-and-drop operation between TreeGrids, updating the source and target grids.\n     *\n     * @param {RowDropEventArgs} args - The arguments related to the row drop event, including target information and data being dropped.\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.dragDropGrid = function (args) {\n        var tObj = this.parent;\n        var targetRow = closest(args.target, 'tr');\n        var targetIndex = isNaN(this.getTargetIdx(targetRow)) ? 0 : this.getTargetIdx(targetRow);\n        var dropElement = parentsUntil(args.target, 'e-treegrid');\n        var srcControl;\n        if (dropElement && dropElement.id === this.parent.rowDropSettings.targetID && !isRemoteData(this.parent)\n            && !isCountRequired(this.parent)) {\n            srcControl = dropElement.ej2_instances[0];\n            var records = tObj.getSelectedRecords();\n            var indexes = [];\n            for (var i = 0; i < records.length; i++) {\n                indexes[parseInt(i.toString(), 10)] = records[parseInt(i.toString(), 10)].index;\n            }\n            var data = srcControl.dataSource;\n            if (this.parent.idMapping !== null && (isNullOrUndefined(this.dropPosition) || this.dropPosition === 'bottomSegment' || this.dropPosition === 'Invalid') && !(data.length)) {\n                var actualData = [];\n                for (var i = 0; i < records.length; i++) {\n                    if (records[parseInt(i.toString(), 10)].hasChildRecords) {\n                        actualData.push(records[parseInt(i.toString(), 10)]);\n                        var child = findChildrenRecords(records[parseInt(i.toString(), 10)]);\n                        for (var i_1 = 0; i_1 < child.length; i_1++) {\n                            actualData.push(child[parseInt(i_1.toString(), 10)]); // push child records to drop the parent record along with its child records\n                        }\n                    }\n                }\n                if (actualData.length) {\n                    records = actualData;\n                }\n            }\n            tObj.notify(events.rowsRemove, { indexes: indexes, records: records });\n            srcControl.notify(events.rowsAdd, { toIndex: targetIndex, records: records });\n            var srcControlFlatData = srcControl.rowDragAndDropModule.treeGridData;\n            if (!isNullOrUndefined(srcControlFlatData)) {\n                for (var i = 0; i < srcControlFlatData.length; i++) {\n                    srcControlFlatData[parseInt(i.toString(), 10)].index = i;\n                    if (!isNullOrUndefined(srcControlFlatData[parseInt(i.toString(), 10)].parentItem)) {\n                        var actualIndex = getValue('uniqueIDCollection.' + srcControlFlatData[parseInt(i.toString(), 10)].parentUniqueID + '.index', srcControl);\n                        srcControlFlatData[parseInt(i.toString(), 10)].parentItem.index = actualIndex;\n                    }\n                }\n            }\n            tObj.grid.refresh();\n            srcControl.grid.refresh();\n            if (srcControl.grid.dataSource.length > 1) {\n                srcControl.grid.refresh();\n                if (!isNullOrUndefined(srcControl.getHeaderContent().querySelector('.e-firstrow-border'))) {\n                    srcControl.getHeaderContent().querySelector('.e-firstrow-border').remove();\n                }\n                if (!isNullOrUndefined(srcControl.getContent().querySelector('.e-lastrow-border'))) {\n                    srcControl.getContent().querySelector('.e-lastrow-border').remove();\n                }\n            }\n        }\n        if (isCountRequired(this.parent)) {\n            srcControl = dropElement.ej2_instances[0];\n            tObj.grid.refresh();\n            srcControl.grid.refresh();\n        }\n    };\n    /**\n     * Retrieves the index of the target row based on its 'aria-rowindex' attribute.\n     *\n     * @param {Element} targetRow - The target row element from which to retrieve the index.\n     * @returns {number} - The index of the target row, or 0 if the targetRow is null or undefined.\n     */\n    RowDD.prototype.getTargetIdx = function (targetRow) {\n        return targetRow ? parseInt(targetRow.getAttribute('aria-rowindex'), 10) - 1 : 0;\n    };\n    /**\n     * Retrieves the parent data of a given record during a row drag-and-drop operation.\n     *\n     * @param {ITreeData} record - The record for which to retrieve the parent data.\n     * @param {Object[]} [data] - Optional data array containing additional information related to the drop operation.\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.getParentData = function (record, data) {\n        var parentItem = record.parentItem;\n        var selectedItemIndex = -1;\n        if (this.parent.enableVirtualization && this.parent.selectedRowIndex !== -1) {\n            selectedItemIndex = this.parent.getSelectedRows()[0].rowIndex;\n        }\n        else if (this.parent.selectedRowIndex !== -1) {\n            selectedItemIndex = this.parent.selectedRowIndex;\n        }\n        if (this.dropPosition === 'bottomSegment') {\n            var primaryKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n            var rowIndex = selectedItemIndex === -1 ?\n                (this.parent.grid.getRowIndexByPrimaryKey(data[0][\"\" + primaryKeyField]))\n                : this.parent.getSelectedRowIndexes()[0];\n            var selectedRecord = this.parent.getCurrentViewRecords()[parseInt(rowIndex.toString(), 10)];\n            this.droppedRecord = getParentData(this.parent, selectedRecord.parentItem.uniqueID);\n        }\n        if (this.dropPosition === 'middleSegment') {\n            var level = this.parent.getCurrentViewRecords()[parseInt(selectedItemIndex.toString(), 10)].level;\n            if (level === parentItem.level) {\n                this.droppedRecord = getParentData(this.parent, parentItem.uniqueID);\n            }\n            else {\n                this.getParentData(parentItem);\n            }\n        }\n    };\n    /**\n     * Handles the row drop operation for the tree grid.\n     *\n     * @param {RowDropEventArgs} args - The event arguments containing details about the drop operation, including the target index and data.\n     * @param {boolean} [isByMethod=false] - Optional flag indicating if the drop operation is triggered by a method.\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.dropRows = function (args, isByMethod) {\n        if (this.dropPosition !== 'Invalid' && !isRemoteData(this.parent)) {\n            var tObj = this.parent;\n            var draggedRecord_2;\n            var droppedRecord = void 0;\n            if (isNullOrUndefined(args.dropIndex)) {\n                var primaryKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n                var rowIndex = tObj.selectedRowIndex === -1 ?\n                    (this.parent.grid.getRowIndexByPrimaryKey(args.data[0][\"\" + primaryKeyField])) - 1\n                    : tObj.getSelectedRowIndexes()[0] - 1;\n                var record = tObj.getCurrentViewRecords()[parseInt(rowIndex.toString(), 10)];\n                this.getParentData(record, args.data);\n            }\n            else {\n                args.dropIndex = args.dropIndex === args.fromIndex ? this.getTargetIdx(args.target.parentElement) : args.dropIndex;\n                if (this.parent.enableVirtualization) {\n                    var index = this.parent.getRowByIndex(args.dropIndex).rowIndex;\n                    this.droppedRecord = tObj.getCurrentViewRecords()[parseInt(index.toString(), 10)];\n                }\n                else {\n                    if (!isNullOrUndefined(this.parent.rowDropSettings.targetID)) {\n                        var rowsObject = this.parent.grid.getRowsObject();\n                        this.droppedRecord = rowsObject[args.dropIndex].data;\n                    }\n                    else {\n                        this.droppedRecord = tObj.getCurrentViewRecords()[args.dropIndex];\n                    }\n                }\n            }\n            var dragRecords = [];\n            droppedRecord = this.droppedRecord;\n            if (!args.data[0]) {\n                dragRecords.push(args.data);\n            }\n            else {\n                dragRecords = args.data;\n            }\n            this.parent[this.modifiedRecords].push(args.data[0], droppedRecord);\n            var count = 0;\n            var multiplegrid = this.parent.rowDropSettings.targetID;\n            this.isMultipleGrid = multiplegrid;\n            if (!multiplegrid) {\n                this.ensuredropPosition(dragRecords, droppedRecord);\n            }\n            else {\n                this.isaddtoBottom = multiplegrid && this.isDraggedWithChild;\n            }\n            var dragLength = dragRecords.length;\n            if (!isNullOrUndefined(this.parent.idMapping)) {\n                dragRecords.reverse();\n            }\n            var _loop_1 = function (i) {\n                draggedRecord_2 = dragRecords[parseInt(i.toString(), 10)];\n                this_1.draggedRecord = draggedRecord_2;\n                if (!this_1.draggedRecord.hasChildRecords) {\n                    for (var _i = 0, dragRecords_2 = dragRecords; _i < dragRecords_2.length; _i++) {\n                        var dragRecord = dragRecords_2[_i];\n                        if (!isNullOrUndefined(dragRecord.childRecords) &&\n                            dragRecord.childRecords.indexOf(this_1.draggedRecord) !== -1) {\n                            this_1.draggedRecord = undefined;\n                        }\n                    }\n                }\n                if (!isNullOrUndefined(this_1.draggedRecord)) {\n                    if (this_1.dropPosition !== 'Invalid' && !isNullOrUndefined(this_1.droppedRecord)) {\n                        if (!tObj.rowDropSettings.targetID || isByMethod) {\n                            this_1.deleteDragRow();\n                        }\n                        if (this_1.draggedRecord === this_1.droppedRecord) {\n                            var correctIndex = this_1.getTargetIdx(args.target.offsetParent.parentElement);\n                            if (isNaN(correctIndex)) {\n                                correctIndex = this_1.getTargetIdx(args.target.parentElement);\n                            }\n                            args.dropIndex = correctIndex;\n                            droppedRecord = this_1.droppedRecord = this_1.parent.getCurrentViewRecords()[args.dropIndex];\n                        }\n                        if (droppedRecord.parentItem || this_1.dropPosition === 'middleSegment') {\n                            var parentRecords = tObj.parentData;\n                            var newParentIndex = parentRecords.indexOf(this_1.draggedRecord);\n                            if (newParentIndex !== -1) {\n                                parentRecords.splice(newParentIndex, 1);\n                            }\n                        }\n                        var recordIndex1 = this_1.treeGridData.indexOf(droppedRecord);\n                        this_1.dropAtTop(recordIndex1);\n                        if (this_1.dropPosition === 'bottomSegment') {\n                            if (!droppedRecord.hasChildRecords) {\n                                if (this_1.parent.parentIdMapping) {\n                                    this_1.treeData.splice(recordIndex1 + 1, 0, this_1.draggedRecord.taskData);\n                                }\n                                this_1.treeGridData.splice(recordIndex1 + 1, 0, this_1.draggedRecord);\n                            }\n                            else {\n                                count = this_1.getChildCount(droppedRecord, 0);\n                                if (this_1.parent.parentIdMapping) {\n                                    this_1.treeData.splice(recordIndex1 + count + 1, 0, this_1.draggedRecord.taskData);\n                                }\n                                this_1.treeGridData.splice(recordIndex1 + count + 1, 0, this_1.draggedRecord);\n                            }\n                            if (isNullOrUndefined(droppedRecord.parentItem)) {\n                                delete draggedRecord_2.parentItem;\n                                delete draggedRecord_2.parentUniqueID;\n                                draggedRecord_2.level = 0;\n                                if (this_1.parent.parentIdMapping) {\n                                    draggedRecord_2[this_1.parent.parentIdMapping] = null;\n                                }\n                            }\n                            if (droppedRecord.parentItem) {\n                                var rec = this_1.getChildrecordsByParentID(droppedRecord.parentUniqueID);\n                                var childRecords = rec[0].childRecords;\n                                var droppedRecordIndex = childRecords.indexOf(droppedRecord) + 1;\n                                childRecords.splice(droppedRecordIndex, 0, draggedRecord_2);\n                                draggedRecord_2.parentItem = droppedRecord.parentItem;\n                                draggedRecord_2.parentUniqueID = droppedRecord.parentUniqueID;\n                                draggedRecord_2.level = droppedRecord.level;\n                                if (this_1.parent.parentIdMapping) {\n                                    draggedRecord_2[this_1.parent.parentIdMapping] = droppedRecord[this_1.parent.parentIdMapping];\n                                    draggedRecord_2.parentItem = droppedRecord.parentItem;\n                                    draggedRecord_2.level = droppedRecord.level;\n                                }\n                            }\n                            if (draggedRecord_2.hasChildRecords) {\n                                var level = 1;\n                                this_1.updateChildRecordLevel(draggedRecord_2, level);\n                                this_1.updateChildRecord(draggedRecord_2, recordIndex1 + count + 1);\n                            }\n                        }\n                        this_1.dropMiddle(recordIndex1);\n                    }\n                    if (isNullOrUndefined(draggedRecord_2.parentItem)) {\n                        var parentRecords = tObj.parentData;\n                        var newParentIndex = parentRecords.indexOf(this_1.droppedRecord);\n                        var nonRepeat_1 = 0;\n                        parentRecords.filter(function (e) {\n                            if (draggedRecord_2.uniqueID === e.uniqueID) {\n                                nonRepeat_1++;\n                            }\n                        });\n                        if (this_1.dropPosition === 'bottomSegment' && nonRepeat_1 === 0) {\n                            parentRecords.splice(newParentIndex + 1, 0, draggedRecord_2);\n                        }\n                        else if (this_1.dropPosition === 'topSegment' && nonRepeat_1 === 0) {\n                            parentRecords.splice(newParentIndex, 0, draggedRecord_2);\n                        }\n                    }\n                    tObj.rowDragAndDropModule.refreshGridDataSource();\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < dragLength; i++) {\n                _loop_1(i);\n            }\n        }\n    };\n    /**\n     * Handles the logic for inserting a dragged record into the middle of a parent record's child records.\n     *\n     * @param {number} recordIndex - The index at which to insert the dragged record relative to the parent record's child records.\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.dropMiddle = function (recordIndex) {\n        var tObj = this.parent;\n        var childRecords = findChildrenRecords(this.droppedRecord);\n        var childRecordsLength = (isNullOrUndefined(childRecords) ||\n            childRecords.length === 0) ? recordIndex + 1 :\n            childRecords.length + recordIndex + 1;\n        if (this.dropPosition === 'middleSegment') {\n            if (tObj.parentIdMapping) {\n                this.treeData.splice(childRecordsLength, 0, this.draggedRecord.taskData);\n                this.treeGridData.splice(childRecordsLength, 0, this.draggedRecord);\n            }\n            else {\n                this.treeGridData.splice(childRecordsLength, 0, this.draggedRecord);\n            }\n            this.recordLevel();\n            if (this.draggedRecord.hasChildRecords) {\n                this.updateChildRecord(this.draggedRecord, childRecordsLength);\n            }\n        }\n    };\n    /**\n     * Handles the logic for inserting a dragged record at the top of a parent record's child records.\n     *\n     * @param {number} recordIndex1 - The index at which to insert the dragged record in the tree grid data.\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.dropAtTop = function (recordIndex1) {\n        var tObj = this.parent;\n        if (this.dropPosition === 'topSegment') {\n            if (tObj.parentIdMapping) {\n                this.treeData.splice(recordIndex1, 0, this.draggedRecord.taskData);\n            }\n            var targetRecord = this.treeGridData[parseInt(recordIndex1.toString(), 10)];\n            this.draggedRecord.parentItem = targetRecord.parentItem;\n            this.draggedRecord.parentUniqueID = targetRecord.parentUniqueID;\n            this.draggedRecord.level = targetRecord.level;\n            // Insert dragged record into the grid data\n            this.treeGridData.splice(parseInt(recordIndex1.toString(), 10), 0, this.draggedRecord);\n            if (this.draggedRecord.hasChildRecords) {\n                var level = 1;\n                this.updateChildRecord(this.draggedRecord, recordIndex1);\n                this.updateChildRecordLevel(this.draggedRecord, level);\n            }\n            if (this.droppedRecord.parentItem) {\n                var rec = this.getChildrecordsByParentID(this.droppedRecord.parentUniqueID);\n                var childRecords = rec[0].childRecords;\n                var droppedRecordIndex = childRecords.indexOf(this.droppedRecord);\n                // Insert the dragged record into the child records at the appropriate position\n                childRecords.splice(droppedRecordIndex, 0, this.draggedRecord);\n            }\n        }\n    };\n    /**\n     * Updates the level and hierarchy of the dragged record based on the drop position.\n     *\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.recordLevel = function () {\n        var tObj = this.parent;\n        var draggedRecord = this.draggedRecord;\n        var droppedRecord = this.droppedRecord;\n        var childItem = tObj.childMapping;\n        if (!droppedRecord.hasChildRecords) {\n            droppedRecord.hasChildRecords = true;\n            droppedRecord.hasFilteredChildRecords = true;\n            if (isNullOrUndefined(droppedRecord.childRecords) || droppedRecord.childRecords.length === 0) {\n                droppedRecord.childRecords = [];\n                if (!tObj.parentIdMapping && isNullOrUndefined(droppedRecord.taskData[\"\" + childItem])) {\n                    droppedRecord.taskData[\"\" + childItem] = [];\n                }\n            }\n        }\n        if (this.dropPosition === 'middleSegment') {\n            var parentItem = extend({}, droppedRecord);\n            delete parentItem.childRecords;\n            draggedRecord.parentItem = parentItem;\n            draggedRecord.parentUniqueID = droppedRecord.uniqueID;\n            droppedRecord.childRecords.splice(droppedRecord.childRecords.length, 0, draggedRecord);\n            setValue('uniqueIDCollection.' + draggedRecord.uniqueID, draggedRecord, tObj);\n            var isSelfReference = 'isSelfReference';\n            if (tObj[\"\" + isSelfReference]) {\n                droppedRecord[tObj.childMapping] = [];\n                droppedRecord[tObj.childMapping].splice(droppedRecord[tObj.childMapping].length, 0, draggedRecord);\n            }\n            if (!isNullOrUndefined(draggedRecord) && !tObj.parentIdMapping && !isNullOrUndefined(droppedRecord.taskData[\"\" + childItem])) {\n                droppedRecord.taskData[tObj.childMapping].splice(droppedRecord.childRecords.length, 0, draggedRecord.taskData);\n            }\n            if (!draggedRecord.hasChildRecords) {\n                draggedRecord.level = droppedRecord.level + 1;\n            }\n            else {\n                var level = 1;\n                draggedRecord.level = droppedRecord.level + 1;\n                this.updateChildRecordLevel(draggedRecord, level);\n            }\n            droppedRecord.expanded = true;\n        }\n    };\n    /**\n     * Deletes the currently dragged row from the TreeGrid.\n     *\n     * @returns {void} - This function does not return any value.\n     */\n    RowDD.prototype.deleteDragRow = function () {\n        if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n            this.treeGridData = this.parent.grid.dataSource.dataSource.json;\n            this.treeData = this.parent.dataSource.dataSource.json;\n        }\n        else {\n            this.treeGridData = this.parent.grid.dataSource;\n            this.treeData = this.parent.dataSource;\n        }\n        var deletedRow = getParentData(this.parent, this.draggedRecord.uniqueID);\n        if (!isNullOrUndefined(deletedRow.childRecords) && deletedRow.childRecords.length) {\n            deletedRow.hasChildRecords = true;\n        }\n        this.removeRecords(deletedRow);\n    };\n    /**\n     * Updates the child records of a specified parent record in the TreeGrid.\n     *\n     * @param {ITreeData} record - The parent record whose child records will be updated.\n     * @param {number} count - The initial count to keep track of record positioning.\n     * @returns {number} - The updated count after processing all child records.\n     */\n    RowDD.prototype.updateChildRecord = function (record, count) {\n        var currentRecord;\n        var tObj = this.parent;\n        var length = 0;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        length = record.childRecords.length;\n        for (var i = 0; i < length; i++) {\n            if (!this.isMultipleGrid) {\n                currentRecord = getValue('uniqueIDCollection.' + record.childRecords[parseInt(i.toString(), 10)].uniqueID, tObj);\n            }\n            else {\n                currentRecord = record.childRecords[parseInt(i.toString(), 10)];\n            }\n            count++;\n            tObj.flatData.splice(count, 0, currentRecord);\n            setValue('uniqueIDCollection.' + currentRecord.uniqueID, currentRecord, this.parent);\n            if (tObj.parentIdMapping) {\n                this.treeData.splice(count, 0, currentRecord.taskData);\n            }\n            if (currentRecord.hasChildRecords) {\n                count = this.updateChildRecord(currentRecord, count);\n            }\n        }\n        return count;\n    };\n    /**\n     * Updates the level of child records for a specified parent record in the TreeGrid.\n     *\n     * @param {ITreeData} record - The parent record whose child records' levels will be updated.\n     * @param {number} level - The current level of the parent record.\n     * @returns {number} - The updated level after processing all child records.\n     */\n    RowDD.prototype.updateChildRecordLevel = function (record, level) {\n        var length = 0;\n        var currentRecord;\n        level++;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        length = record.childRecords.length;\n        for (var i = 0; i < length; i++) {\n            if (!this.isMultipleGrid) {\n                currentRecord = getValue('uniqueIDCollection.' + record.childRecords[parseInt(i.toString(), 10)].uniqueID, this.parent);\n            }\n            else {\n                currentRecord = record.childRecords[parseInt(i.toString(), 10)];\n            }\n            var parentData = void 0;\n            if (record.parentItem) {\n                parentData = getParentData(this.parent, record.parentItem.uniqueID);\n            }\n            if (isNullOrUndefined(parentData) && !isNullOrUndefined(record.parentItem)) {\n                parentData = record.parentItem;\n            }\n            currentRecord.level = record.parentItem ? parentData.level + level : record.level + 1;\n            if (currentRecord.hasChildRecords) {\n                level--;\n                level = this.updateChildRecordLevel(currentRecord, level);\n            }\n        }\n        return level;\n    };\n    /**\n     * Removes specified records from the TreeGrid data source.\n     *\n     * @param {ITreeData} record - The record to be removed, including any child records if applicable.\n     * @returns {void} - This method does not return a value.\n     */\n    RowDD.prototype.removeRecords = function (record) {\n        var tObj = this.parent;\n        var dataSource;\n        if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n            dataSource = this.parent.dataSource.dataSource.json;\n        }\n        else {\n            dataSource = this.parent.dataSource;\n        }\n        var deletedRow = record;\n        var isSelfReference = !isNullOrUndefined(tObj.parentIdMapping);\n        var flatParentData = this.getChildrecordsByParentID(deletedRow.parentUniqueID)[0];\n        if (deletedRow) {\n            if (deletedRow.parentItem) {\n                var childRecords = flatParentData ? flatParentData.childRecords : [];\n                var childIndex = 0;\n                if (childRecords && childRecords.length > 0) {\n                    childIndex = childRecords.indexOf(deletedRow);\n                    flatParentData.childRecords.splice(childIndex, 1);\n                    if (!this.parent.parentIdMapping || tObj.enableImmutableMode) {\n                        editAction({ value: deletedRow, action: 'delete' }, this.parent, isSelfReference, deletedRow.index, deletedRow.index);\n                    }\n                }\n            }\n            if (tObj.parentIdMapping) {\n                if (deletedRow.hasChildRecords && deletedRow.childRecords.length > 0) {\n                    this.removeChildItem(deletedRow);\n                }\n                var idx = void 0;\n                var idz = void 0;\n                var treeGridData = dataSource;\n                for (var i = 0; i < treeGridData.length; i++) {\n                    if (treeGridData[parseInt(i.toString(), 10)][this.parent.idMapping] === deletedRow.taskData[this.parent.idMapping]) {\n                        idx = i;\n                    }\n                }\n                for (var i = 0; i < this.treeGridData.length; i++) {\n                    if (this.treeGridData[parseInt(i.toString(), 10)][this.parent.idMapping]\n                        === deletedRow.taskData[this.parent.idMapping]) {\n                        idz = i;\n                    }\n                }\n                if (idx !== -1 && !isNullOrUndefined(idx)) {\n                    dataSource.splice(idx, 1);\n                }\n                if (idz !== -1 && !isNullOrUndefined(idz)) {\n                    this.treeGridData.splice(idz, 1);\n                }\n            }\n            var recordIndex = this.treeGridData.indexOf(deletedRow);\n            if (!tObj.parentIdMapping) {\n                var parentIndex = this.parent.parentData.indexOf(deletedRow);\n                if (parentIndex !== -1) {\n                    tObj.parentData.splice(parentIndex, 1);\n                    dataSource.splice(parentIndex, 1);\n                }\n            }\n            if (recordIndex === -1 && !tObj.parentIdMapping) {\n                var primaryKeyField = tObj.getPrimaryKeyFieldNames()[0];\n                for (var j = 0; j < this.treeGridData.length; j++) {\n                    if (this.treeGridData[parseInt(j.toString(), 10)][\"\" + primaryKeyField] === deletedRow[\"\" + primaryKeyField]) {\n                        recordIndex = j;\n                    }\n                }\n            }\n            if (!tObj.parentIdMapping) {\n                var deletedRecordCount = this.getChildCount(deletedRow, 0);\n                this.treeGridData.splice(recordIndex, deletedRecordCount + 1);\n            }\n            if (deletedRow.parentItem && flatParentData && flatParentData.childRecords && !flatParentData.childRecords.length) {\n                flatParentData.expanded = false;\n                flatParentData.hasChildRecords = false;\n                flatParentData.hasFilteredChildRecords = false;\n            }\n            if (this.parent[this.modifiedRecords].indexOf(flatParentData) === -1 && !isNullOrUndefined(flatParentData)) {\n                this.parent[this.modifiedRecords].push(flatParentData);\n            }\n            if (!isNullOrUndefined(flatParentData)) {\n                this.updateModifiedRecords(flatParentData);\n            }\n        }\n    };\n    /**\n     * Updates the records in the TreeGrid data source that have been modified.\n     *\n     * @param {ITreeData} record - The record to update, along with its parent records if applicable.\n     * @returns {void} - This method does not return a value.\n     */\n    RowDD.prototype.updateModifiedRecords = function (record) {\n        var parentData = getParentData(this.parent, record.parentUniqueID);\n        if (!isNullOrUndefined(parentData)) {\n            this.parent[this.modifiedRecords].push(parentData);\n            this.updateModifiedRecords(parentData);\n        }\n    };\n    /**\n     * Recursively removes child records from the specified record and updates the data source.\n     *\n     * @param {ITreeData} record - The parent record whose child records are to be removed.\n     * @returns {void} - This method does not return a value.\n     */\n    RowDD.prototype.removeChildItem = function (record) {\n        var currentRecord;\n        var idx;\n        var idz;\n        var dataSource;\n        if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n            dataSource = this.parent.dataSource.dataSource.json;\n        }\n        else {\n            dataSource = this.parent.dataSource;\n        }\n        for (var i = 0; i < record.childRecords.length; i++) {\n            currentRecord = record.childRecords[parseInt(i.toString(), 10)];\n            if (!isNullOrUndefined(currentRecord.childRecords) && currentRecord.childRecords.length) {\n                currentRecord.hasChildRecords = true;\n            }\n            var treeGridData = void 0;\n            if (this.parent.dataSource instanceof DataManager && isOffline(this.parent)) {\n                treeGridData = this.parent.dataSource.dataSource.json;\n            }\n            else {\n                treeGridData = this.parent.dataSource;\n            }\n            for (var i_2 = 0; i_2 < treeGridData.length; i_2++) {\n                if (treeGridData[parseInt(i_2.toString(), 10)][this.parent.idMapping] === currentRecord.taskData[this.parent.idMapping]) {\n                    idx = i_2;\n                }\n            }\n            for (var i_3 = 0; i_3 < this.treeGridData.length; i_3++) {\n                if (this.treeGridData[parseInt(i_3.toString(), 10)][this.parent.idMapping]\n                    === currentRecord.taskData[this.parent.idMapping]) {\n                    idz = i_3;\n                    break;\n                }\n            }\n            if (idx !== -1 && !isNullOrUndefined(idx)) {\n                dataSource.splice(idx, 1);\n            }\n            if (idz !== -1 && !isNullOrUndefined(idz)) {\n                this.treeGridData.splice(idz, 1);\n            }\n            if (currentRecord.hasChildRecords) {\n                this.removeChildItem(currentRecord);\n            }\n        }\n    };\n    /**\n     * Retrieves the count of child records associated with the specified parent record.\n     *\n     * @param {ITreeData} record - The parent record for which child count is to be calculated.\n     * @param {number} count - The initial count to start with, usually passed as 0.\n     * @returns {number} - The total count of child records.\n     */\n    RowDD.prototype.getChildCount = function (record, count) {\n        var currentRecord;\n        if (!record.hasChildRecords) {\n            return 0;\n        }\n        for (var i = 0; i < record.childRecords.length; i++) {\n            currentRecord = record.childRecords[parseInt(i.toString(), 10)];\n            count++;\n            if (currentRecord.hasChildRecords) {\n                count = this.getChildCount(currentRecord, count);\n            }\n        }\n        return count;\n    };\n    /**\n     * Ensures the validity of the drop position for the dragged records by verifying the hierarchy and position constraints.\n     * If the current record is found in the dragged records' children, sets the drop position to 'Invalid'.\n     *\n     * @param {ITreeData[]} draggedRecords - The array of dragged records being verified.\n     * @param {ITreeData} currentRecord - The current record to check against dragged records.\n     * @returns {void} - This function does not return a value.\n     */\n    RowDD.prototype.ensuredropPosition = function (draggedRecords, currentRecord) {\n        var _this = this;\n        draggedRecords.filter(function (e) {\n            if (e.hasChildRecords && !isNullOrUndefined(e.childRecords)) {\n                var valid = e.childRecords.indexOf(currentRecord);\n                if (valid === -1) {\n                    _this.ensuredropPosition(e.childRecords, currentRecord);\n                }\n                else {\n                    _this.dropPosition = 'Invalid';\n                    _this.addErrorElem();\n                    _this.canDrop = false;\n                    if (isNullOrUndefined(_this.parent.rowDropSettings.targetID)) {\n                        _this.removetopOrBottomBorder();\n                        _this.removeChildBorder();\n                    }\n                    return;\n                }\n            }\n        });\n    };\n    RowDD.prototype.isDuplicateData = function (currentData) {\n        var primaryKeys = this.parent.getPrimaryKeyFieldNames();\n        if (primaryKeys.length === 0) {\n            return false;\n        }\n        return this.parent.flatData.some(function (data) {\n            // eslint-disable-next-line\n            return primaryKeys.every(function (key) { return data[key] === currentData[key]; });\n        });\n    };\n    /**\n     * Cleans up resources, event listeners, and DOM elements when the TreeGrid component is destroyed.\n     *\n     * @returns {void}\n     */\n    RowDD.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    RowDD.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.rowdraging, this.Rowdraging);\n        this.parent.off(events.rowDropped, this.rowDropped);\n        this.parent.off(events.rowsAdd, this.rowsAdded);\n        this.parent.off(events.rowsRemove, this.rowsRemoved);\n    };\n    /**\n     * hidden\n     */\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns RowDragAndDrop module name\n     */\n    RowDD.prototype.getModuleName = function () {\n        return 'rowDragAndDrop';\n    };\n    return RowDD;\n}());\nexport { RowDD };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Property, ChildProperty } from '@syncfusion/ej2-base';\n/**\n * Configures the settings for row dragging and dropping within the TreeGrid, allowing for enhanced user interaction and data manipulation capabilities.\n */\nvar RowDropSettings = /** @class */ (function (_super) {\n    __extends(RowDropSettings, _super);\n    function RowDropSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property()\n    ], RowDropSettings.prototype, \"targetID\", void 0);\n    return RowDropSettings;\n}(ChildProperty));\nexport { RowDropSettings };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { VirtualRowModelGenerator } from '@syncfusion/ej2-grids';\nimport * as events from '../base/constant';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { isCountRequired } from '../utils';\n/**\n * RowModelGenerator is used to generate grid data rows.\n *\n * @hidden\n */\nvar TreeVirtualRowModelGenerator = /** @class */ (function (_super) {\n    __extends(TreeVirtualRowModelGenerator, _super);\n    function TreeVirtualRowModelGenerator(parent) {\n        var _this = _super.call(this, parent) || this;\n        _this.addEventListener();\n        return _this;\n    }\n    TreeVirtualRowModelGenerator.prototype.addEventListener = function () {\n        this.parent.on(events.dataListener, this.getDatas, this);\n    };\n    TreeVirtualRowModelGenerator.prototype.getDatas = function (args) {\n        this.visualData = args.data;\n    };\n    TreeVirtualRowModelGenerator.prototype.getDataInfo = function () {\n        return _super.prototype.getData.call(this);\n    };\n    TreeVirtualRowModelGenerator.prototype.generateRows = function (data, notifyArgs) {\n        if (!isNullOrUndefined(notifyArgs.virtualInfo) && notifyArgs.virtualInfo.loadNext &&\n            notifyArgs.virtualInfo.nextInfo.page !== this.parent.pageSettings.currentPage) {\n            this.parent.setProperties({ pageSettings: { currentPage: notifyArgs.virtualInfo.nextInfo.page } }, true);\n        }\n        else if (!isNullOrUndefined(notifyArgs.virtualInfo) && !notifyArgs.virtualInfo.loadNext &&\n            notifyArgs.virtualInfo.page !== this.parent.pageSettings.currentPage) {\n            this.parent.setProperties({ pageSettings: { currentPage: notifyArgs.virtualInfo.page } }, true);\n        }\n        var info = this.getDataInfo();\n        if (!isNullOrUndefined(notifyArgs.virtualInfo)) {\n            if (notifyArgs.virtualInfo.direction !== 'right' && notifyArgs.virtualInfo.direction !== 'left') {\n                if (!((this.parent.dataSource instanceof DataManager && this.parent.dataSource.dataSource.url !== undefined\n                    && !this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || isCountRequired(this.parent))\n                    || notifyArgs.virtualInfo.blockIndexes.length === 1) {\n                    notifyArgs.virtualInfo.blockIndexes = info.blockIndexes;\n                }\n            }\n            else {\n                notifyArgs.virtualInfo.blockIndexes = this.getBlockIndexes(notifyArgs.virtualInfo.page);\n            }\n        }\n        if ((this.parent.dataSource instanceof DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && !this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || isCountRequired(this.parent)) {\n            return _super.prototype.generateRows.call(this, data, notifyArgs);\n        }\n        else {\n            if (!isNullOrUndefined(notifyArgs.requestType) && notifyArgs.requestType.toString() === 'collapseAll') {\n                notifyArgs.requestType = 'refresh';\n            }\n            var rows = _super.prototype.generateRows.call(this, data, notifyArgs);\n            if (!isNullOrUndefined((this.visualData))) {\n                for (var r = 0; r < rows.length; r++) {\n                    rows[parseInt(r.toString(), 10)].index\n                        = (this.visualData).indexOf(rows[parseInt(r.toString(), 10)].data);\n                }\n            }\n            return rows;\n        }\n    };\n    TreeVirtualRowModelGenerator.prototype.checkAndResetCache = function (action) {\n        var clear = ['paging', 'refresh', 'sorting', 'filtering', 'searching', 'reorder',\n            'save', 'delete'].some(function (value) { return action === value; });\n        if ((this.parent.dataSource instanceof DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && !this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || isCountRequired(this.parent)) {\n            var model = 'model';\n            var currentPage = this[\"\" + model].currentPage;\n            if (clear) {\n                this.cache = {};\n                /*this.movableCache = {};\n                this.frozenRightCache = {};*/\n                this.data = {};\n                this.groups = {};\n            }\n            else if (action === 'virtualscroll' && this.cache[parseInt(currentPage.toString(), 10)] &&\n                this.cache[parseInt(currentPage.toString(), 10)].length >\n                    (this.parent.contentModule).getBlockSize()) {\n                delete this.cache[parseInt(currentPage.toString(), 10)];\n            }\n        }\n        else {\n            if (clear || action === 'virtualscroll') {\n                this.cache = {};\n                this.data = {};\n                this.groups = {};\n                /*this.movableCache = {};\n                this.frozenRightCache = {};*/\n            }\n        }\n        return clear;\n    };\n    return TreeVirtualRowModelGenerator;\n}(VirtualRowModelGenerator));\nexport { TreeVirtualRowModelGenerator };\n","import { getObject, Filter as GridFilter, Grid } from '@syncfusion/ej2-grids';\nimport { isNullOrUndefined, setValue, getValue } from '@syncfusion/ej2-base';\nimport { getParentData } from '../utils';\n/**\n * TreeGrid Filter module will handle filtering action\n *\n * @hidden\n */\nvar Filter = /** @class */ (function () {\n    /**\n     * Constructor for Filter module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Filter(parent) {\n        Grid.Inject(GridFilter);\n        this.parent = parent;\n        this.isHierarchyFilter = false;\n        this.filteredResult = [];\n        this.flatFilteredData = [];\n        this.filteredParentRecs = [];\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Filter module name\n     */\n    Filter.prototype.getModuleName = function () {\n        return 'filter';\n    };\n    /**\n     * To destroy the Filter module\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Filter.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Filter.prototype.addEventListener = function () {\n        this.parent.on('updateFilterRecs', this.updatedFilteredRecord, this);\n        this.parent.on('clearFilters', this.clearFilterLevel, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Filter.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updateFilterRecs', this.updatedFilteredRecord);\n        this.parent.off('clearFilters', this.clearFilterLevel);\n    };\n    /**\n     * Function to update filtered records\n     *\n     * @param {{data: Object} } dataDetails - Filtered data collection\n     * @param {Object} dataDetails.data - Fliltered data collection\n     * @hidden\n     * @returns {void}\n     */\n    Filter.prototype.updatedFilteredRecord = function (dataDetails) {\n        setValue('uniqueIDFilterCollection', {}, this.parent);\n        this.flatFilteredData = dataDetails.data;\n        this.filteredParentRecs = [];\n        this.filteredResult = [];\n        this.isHierarchyFilter = false;\n        for (var f = 0; f < this.flatFilteredData.length; f++) {\n            var rec = this.flatFilteredData[parseInt(f.toString(), 10)];\n            this.addParentRecord(rec);\n            var hierarchyMode = this.parent.grid.searchSettings.key === '' ? this.parent.filterSettings.hierarchyMode\n                : this.parent.searchSettings.hierarchyMode;\n            if (((hierarchyMode === 'Child' || hierarchyMode === 'None') &&\n                (this.parent.grid.filterSettings.columns.length !== 0 || this.parent.grid.searchSettings.key !== ''))) {\n                this.isHierarchyFilter = true;\n            }\n            var ischild = getObject('childRecords', rec);\n            if (!isNullOrUndefined(ischild) && ischild.length) {\n                setValue('hasFilteredChildRecords', this.checkChildExsist(rec), rec);\n            }\n            var parent_1 = getObject('parentItem', rec);\n            if (!isNullOrUndefined(parent_1)) {\n                var parRecord = getParentData(this.parent, rec.parentItem.uniqueID, true);\n                //let parRecord: Object = this.flatFilteredData.filter((e: ITreeData) => {\n                //          return e.uniqueID === rec.parentItem.uniqueID; })[0];\n                setValue('hasFilteredChildRecords', true, parRecord);\n                if (parRecord && parRecord.parentItem) {\n                    this.updateParentFilteredRecord(parRecord);\n                }\n            }\n        }\n        if (this.flatFilteredData.length > 0 && this.isHierarchyFilter) {\n            this.updateFilterLevel();\n        }\n        this.parent.notify('updateAction', { result: this.filteredResult });\n    };\n    Filter.prototype.updateParentFilteredRecord = function (record) {\n        var parRecord = getParentData(this.parent, record.parentItem.uniqueID, true);\n        var uniqueIDValue = getValue('uniqueIDFilterCollection', this.parent);\n        if (parRecord && Object.prototype.hasOwnProperty.call(uniqueIDValue, parRecord.uniqueID)) {\n            setValue('hasFilteredChildRecords', true, parRecord);\n        }\n        if (parRecord && parRecord.parentItem) {\n            this.updateParentFilteredRecord(parRecord);\n        }\n    };\n    Filter.prototype.addParentRecord = function (record) {\n        var parent = getParentData(this.parent, record.parentUniqueID);\n        //let parent: Object = this.parent.flatData.filter((e: ITreeData) => {return e.uniqueID === record.parentUniqueID; })[0];\n        var hierarchyMode = this.parent.grid.searchSettings.key === '' ? this.parent.filterSettings.hierarchyMode\n            : this.parent.searchSettings.hierarchyMode;\n        if (hierarchyMode === 'None' && (this.parent.grid.filterSettings.columns.length !== 0\n            || this.parent.grid.searchSettings.key !== '')) {\n            if (isNullOrUndefined(parent)) {\n                if (this.flatFilteredData.indexOf(record) !== -1) {\n                    if (this.filteredResult.indexOf(record) === -1) {\n                        this.filteredResult.push(record);\n                        setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n                        record.hasFilteredChildRecords = true;\n                    }\n                    return;\n                }\n            }\n            else {\n                this.addParentRecord(parent);\n                if (this.flatFilteredData.indexOf(parent) !== -1 || this.filteredResult.indexOf(parent) !== -1) {\n                    if (this.filteredResult.indexOf(record) === -1) {\n                        this.filteredResult.push(record);\n                        setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n                    }\n                }\n                else {\n                    if (this.filteredResult.indexOf(record) === -1 && this.flatFilteredData.indexOf(record) !== -1) {\n                        this.filteredResult.push(record);\n                        setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n                    }\n                }\n            }\n        }\n        else {\n            if (!isNullOrUndefined(parent)) {\n                var hierarchyMode_1 = this.parent.grid.searchSettings.key === '' ?\n                    this.parent.filterSettings.hierarchyMode : this.parent.searchSettings.hierarchyMode;\n                if (hierarchyMode_1 === 'Child' && (this.parent.grid.filterSettings.columns.length !== 0\n                    || this.parent.grid.searchSettings.key !== '')) {\n                    if (this.flatFilteredData.indexOf(parent) !== -1) {\n                        this.addParentRecord(parent);\n                    }\n                }\n                else {\n                    this.addParentRecord(parent);\n                }\n            }\n            if (this.filteredResult.indexOf(record) === -1) {\n                this.filteredResult.push(record);\n                setValue('uniqueIDFilterCollection.' + record.uniqueID, record, this.parent);\n            }\n        }\n    };\n    Filter.prototype.checkChildExsist = function (records) {\n        var childRec = getObject('childRecords', records);\n        var isExist = false;\n        for (var count = 0; count < childRec.length; count++) {\n            var ischild = childRec[parseInt(count.toString(), 10)].childRecords;\n            var hierarchyMode = this.parent.grid.searchSettings.key === '' ?\n                this.parent.filterSettings.hierarchyMode : this.parent.searchSettings.hierarchyMode;\n            if (((hierarchyMode === 'Child' || hierarchyMode === 'Both') && (this.parent.grid.filterSettings.columns.length !== 0\n                || this.parent.grid.searchSettings.key !== ''))) {\n                var uniqueIDValue = getValue('uniqueIDFilterCollection', this.parent);\n                if (!Object.prototype.hasOwnProperty.call(uniqueIDValue, childRec[parseInt(count.toString(), 10)].uniqueID)) {\n                    this.filteredResult.push(childRec[parseInt(count.toString(), 10)]);\n                    setValue('uniqueIDFilterCollection.' + childRec[parseInt(count.toString(), 10)].uniqueID, childRec[parseInt(count.toString(), 10)], this.parent);\n                    isExist = true;\n                }\n            }\n            if ((hierarchyMode === 'None')\n                && (this.parent.grid.filterSettings.columns.length !== 0 || this.parent.grid.searchSettings.key !== '')) {\n                if (this.flatFilteredData.indexOf(childRec[parseInt(count.toString(), 10)]) !== -1) {\n                    isExist = true;\n                    break;\n                }\n            }\n            if (!isNullOrUndefined(ischild) && ischild.length) {\n                isExist = this.checkChildExsist(childRec[parseInt(count.toString(), 10)]);\n            }\n            if ((hierarchyMode === 'Child' || hierarchyMode === 'Both') && childRec.length) {\n                isExist = true;\n            }\n        }\n        return isExist;\n    };\n    Filter.prototype.updateFilterLevel = function () {\n        var record = this.filteredResult;\n        var len = this.filteredResult.length;\n        for (var c = 0; c < len; c++) {\n            var parent_2 = getParentData(this.parent, record[parseInt(c.toString(), 10)].parentUniqueID);\n            var isPrst = record.indexOf(parent_2) !== -1;\n            if (isPrst) {\n                var parent_3 = getParentData(this.parent, record[parseInt(c.toString(), 10)].parentUniqueID, true);\n                record[parseInt(c.toString(), 10)].filterLevel = parent_3.filterLevel + 1;\n            }\n            else {\n                record[parseInt(c.toString(), 10)].filterLevel = 0;\n                this.filteredParentRecs.push(record[parseInt(c.toString(), 10)]);\n            }\n        }\n    };\n    Filter.prototype.clearFilterLevel = function (data) {\n        var count = 0;\n        var flatData = data.flatData;\n        var len = flatData.length;\n        var currentRecord;\n        for (count; count < len; count++) {\n            currentRecord = flatData[parseInt(count.toString(), 10)];\n            var fLevel = currentRecord.filterLevel;\n            if (fLevel || fLevel === 0 || !isNullOrUndefined(currentRecord.hasFilteredChildRecords)) {\n                currentRecord.hasFilteredChildRecords = null;\n                currentRecord.filterLevel = null;\n            }\n        }\n        this.filteredResult = [];\n        this.parent.notify('updateResults', { result: flatData, count: flatData.length });\n    };\n    return Filter;\n}());\nexport { Filter };\n","import { getObject, Grid, ExcelExport as GridExcel, ExportHelper } from '@syncfusion/ej2-grids';\nimport { Data } from '@syncfusion/ej2-grids';\nimport { isRemoteData, isOffline, getParentData, getExpandStatus } from '../utils';\nimport { isNullOrUndefined, setValue, extend } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport * as event from '../base/constant';\n/**\n * TreeGrid Excel Export module\n *\n * @hidden\n */\nvar ExcelExport = /** @class */ (function () {\n    /**\n     * Constructor for Excel Export module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function ExcelExport(parent) {\n        this.isCollapsedStatePersist = false;\n        Grid.Inject(GridExcel);\n        this.parent = parent;\n        this.dataResults = {};\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns ExcelExport module name\n     */\n    ExcelExport.prototype.getModuleName = function () {\n        return 'ExcelExport';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    ExcelExport.prototype.addEventListener = function () {\n        this.parent.on('updateResults', this.updateExcelResultModel, this);\n        this.parent.on('excelCellInfo', this.excelQueryCellInfo, this);\n        this.parent.grid.on('export-RowDataBound', this.exportRowDataBound, this);\n        this.parent.grid.on('finalPageSetup', this.finalPageSetup, this);\n    };\n    /**\n     * To destroy the Excel Export\n     *\n     * @returns {void}\n     * @hidden\n     */\n    ExcelExport.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    ExcelExport.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updateResults', this.updateExcelResultModel);\n        this.parent.off('excelCellInfo', this.excelQueryCellInfo);\n        this.parent.grid.off('export-RowDataBound', this.exportRowDataBound);\n        this.parent.grid.off('finalPageSetup', this.finalPageSetup);\n    };\n    ExcelExport.prototype.updateExcelResultModel = function (returnResult) {\n        this.dataResults = returnResult;\n    };\n    ExcelExport.prototype.Map = function (excelExportProperties, \n    /* eslint-disable-next-line */\n    isMultipleExport, workbook, isBlob, isCsv) {\n        var _this = this;\n        var dataSource = this.parent.dataSource;\n        var data = new Data(this.parent.grid);\n        var property = Object();\n        setValue('isCsv', isCsv, property);\n        setValue('cancel', false, property);\n        if (!isNullOrUndefined(excelExportProperties)) {\n            this.isCollapsedStatePersist = excelExportProperties.isCollapsedStatePersist;\n        }\n        if (!isNullOrUndefined(excelExportProperties)) {\n            if (!isNullOrUndefined(excelExportProperties.dataSource) && !excelExportProperties.dataSource['dataSource']) {\n                return this.parent.grid.excelExportModule.Map(this.parent.grid, excelExportProperties, isMultipleExport, workbook, isCsv, isBlob);\n            }\n            if (excelExportProperties.exportType === 'CurrentPage') {\n                excelExportProperties.dataSource = this.parent.getCurrentViewRecords();\n                return this.parent.grid.excelExportModule.Map(this.parent.grid, excelExportProperties, isMultipleExport, workbook, isCsv, isBlob);\n            }\n        }\n        return new Promise(function (resolve) {\n            var dm = _this.isLocal() && !(dataSource instanceof DataManager) ? new DataManager(dataSource)\n                : _this.parent.dataSource;\n            var query = new Query();\n            if (!_this.isLocal()) {\n                query = _this.generateQuery(query);\n                query.queries = _this.parent.grid.getDataModule().generateQuery().queries;\n                query = ExportHelper.getQuery(_this.parent.grid, data);\n                if (isNullOrUndefined(_this.parent.filterModule)) {\n                    query.queries = query.queries.slice(1, 2);\n                    query.params = query.params.slice(0, 0);\n                }\n                setValue('query', query, property);\n            }\n            _this.parent.trigger(event.beforeExcelExport, extend(property, excelExportProperties));\n            if (getObject('cancel', property)) {\n                return null;\n            }\n            dm.executeQuery(query).then(function (e) {\n                var customData = null;\n                if (!isNullOrUndefined(excelExportProperties) && !isNullOrUndefined(excelExportProperties.dataSource)) {\n                    customData = excelExportProperties.dataSource;\n                }\n                excelExportProperties = _this.manipulateExportProperties(excelExportProperties, dataSource, e);\n                return _this.parent.grid.excelExportModule.Map(_this.parent.grid, excelExportProperties, isMultipleExport, workbook, isCsv, isBlob).then(function (book) {\n                    if (customData != null) {\n                        excelExportProperties.dataSource = customData;\n                    }\n                    else {\n                        delete excelExportProperties.dataSource;\n                    }\n                    resolve(book);\n                });\n            });\n        });\n    };\n    ExcelExport.prototype.generateQuery = function (query, property) {\n        if (!isNullOrUndefined(property) && property.exportType === 'CurrentPage'\n            && this.parent.allowPaging) {\n            property.exportType = 'AllPages';\n            query.addParams('ExportType', 'CurrentPage');\n            query.where(this.parent.parentIdMapping, 'equal', null);\n            query = getObject('grid.renderModule.data.pageQuery', this.parent)(query);\n        }\n        return query;\n    };\n    ExcelExport.prototype.manipulateExportProperties = function (property, dtSrc, queryResult) {\n        //count not required for this query\n        var args = Object();\n        if (!isNullOrUndefined(this.parent.grid.getDataModule())) {\n            setValue('query', this.parent.grid.getDataModule().generateQuery(true), args);\n        }\n        setValue('isExport', true, args);\n        if (!isNullOrUndefined(property) && !isNullOrUndefined(property.exportType)) {\n            setValue('exportType', property.exportType, args);\n        }\n        if (!this.isLocal()) {\n            this.parent.parentData = [];\n            this.parent.dataModule.convertToFlatData(getObject('result', queryResult));\n            setValue('expresults', this.parent.flatData, args);\n        }\n        this.parent.notify('dataProcessor', args);\n        //args = this.parent.dataModule.dataProcessor(args);\n        args = this.dataResults;\n        dtSrc = isNullOrUndefined(args.result) ? this.parent.flatData.slice(0) : args.result;\n        if (!this.isLocal()) {\n            this.parent.flatData = [];\n        }\n        if (property && property.dataSource) {\n            var flatsData = this.parent.flatData;\n            var dataSrc = property.dataSource instanceof DataManager ? property.dataSource.dataSource.json : property.dataSource;\n            this.parent.dataModule.convertToFlatData(dataSrc);\n            dtSrc = this.parent.flatData;\n            this.parent.flatData = flatsData;\n        }\n        property = isNullOrUndefined(property) ? Object() : property;\n        property.dataSource = new DataManager({ json: dtSrc });\n        if (this.parent.aggregates.length > 0) {\n            property.query = args['query'];\n        }\n        return property;\n    };\n    /**\n     * TreeGrid Excel Export cell modifier\n     *\n     * @param {ExcelQueryCellInfoEventArgs} args - current cell details\n     * @hidden\n     * @returns {void}\n     */\n    ExcelExport.prototype.excelQueryCellInfo = function (args) {\n        if (this.parent.grid.getColumnIndexByUid(args.column.uid) === this.parent.treeColumnIndex) {\n            var style = {};\n            var data = args.data;\n            var ispadfilter = isNullOrUndefined(data.filterLevel);\n            var pad = ispadfilter ? data.level : data.filterLevel;\n            style.indent = pad;\n            args.style = style;\n        }\n        this.parent.notify('updateResults', args);\n        this.parent.trigger('excelQueryCellInfo', args);\n    };\n    ExcelExport.prototype.exportRowDataBound = function (excelRow) {\n        if (excelRow.type === 'excel') {\n            var excelrowobj = excelRow.rowObj.data;\n            var filtercolumnlength = this.parent.grid.filterSettings.columns.length;\n            var rowlength = excelRow.excelRows.length;\n            var rowlevel = excelrowobj.level;\n            if (excelrowobj.parentItem && getParentData(this.parent, excelrowobj.parentItem.uniqueID, Boolean(filtercolumnlength))) {\n                var expandedStatus = false;\n                var sublevelState = false;\n                var state = getExpandStatus(this.parent, excelrowobj, this.parent.parentData);\n                if (this.isCollapsedStatePersist && (!state || !this.parent.isLocalData)) {\n                    expandedStatus = true;\n                    sublevelState = excelrowobj.expanded ? false : true;\n                }\n                excelRow.excelRows[rowlength - 1].grouping = { outlineLevel: rowlevel, isCollapsed: sublevelState,\n                    isHidden: expandedStatus };\n            }\n            else if (excelrowobj.hasChildRecords && isNullOrUndefined(excelrowobj.parentItem)) {\n                excelRow.excelRows[rowlength - 1].grouping = { outlineLevel: rowlevel };\n            }\n        }\n    };\n    /* eslint-disable-next-line */\n    ExcelExport.prototype.finalPageSetup = function (workbook) {\n        for (var i = 0; i < workbook.worksheets.length; i++) {\n            if (workbook.worksheets[parseInt(i.toString(), 10)].rows) {\n                workbook.worksheets[parseInt(i.toString(), 10)].pageSetup = { isSummaryRowBelow: false };\n            }\n        }\n    };\n    ExcelExport.prototype.isLocal = function () {\n        return !isRemoteData(this.parent) && isOffline(this.parent);\n    };\n    return ExcelExport;\n}());\nexport { ExcelExport };\n","import { getObject, PdfExport as GridPdf, Grid } from '@syncfusion/ej2-grids';\nimport { isRemoteData, isOffline } from '../utils';\nimport { isNullOrUndefined, setValue, extend, getValue } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport * as event from '../base/constant';\n/**\n * TreeGrid PDF Export module\n *\n * @hidden\n */\nvar PdfExport = /** @class */ (function () {\n    /**\n     * Constructor for PDF export module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function PdfExport(parent) {\n        Grid.Inject(GridPdf);\n        this.parent = parent;\n        this.dataResults = {};\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} PdfExport module name\n     */\n    PdfExport.prototype.getModuleName = function () {\n        return 'PdfExport';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    PdfExport.prototype.addEventListener = function () {\n        this.parent.on('pdfCellInfo', this.pdfQueryCellInfo, this);\n        this.parent.on('updateResults', this.updatePdfResultModel, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    PdfExport.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('pdfCellInfo', this.pdfQueryCellInfo);\n        this.parent.off('updateResults', this.updatePdfResultModel);\n    };\n    /**\n     * To destroy the PDF Export\n     *\n     * @returns {void}\n     * @hidden\n     */\n    PdfExport.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    PdfExport.prototype.updatePdfResultModel = function (returnResult) {\n        this.dataResults = returnResult;\n    };\n    PdfExport.prototype.Map = function (pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {\n        var _this = this;\n        var dtSrc = this.parent.dataSource;\n        var prop = Object();\n        var isLocal = !isRemoteData(this.parent) && isOffline(this.parent);\n        setValue('cancel', false, prop);\n        return new Promise(function (resolve) {\n            var dm = isLocal && !(dtSrc instanceof DataManager) ? new DataManager(dtSrc)\n                : _this.parent.dataSource;\n            var query = new Query();\n            if (!isLocal) {\n                query = _this.generateQuery(query);\n                setValue('query', query, prop);\n            }\n            _this.parent.trigger(event.beforePdfExport, extend(prop, pdfExportProperties));\n            if (getObject('cancel', prop)) {\n                return null;\n            }\n            dm.executeQuery(query).then(function (e) {\n                var customsData = null;\n                if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.dataSource)) {\n                    customsData = pdfExportProperties.dataSource;\n                }\n                pdfExportProperties = _this.manipulatePdfProperties(pdfExportProperties, dtSrc, e);\n                return _this.parent.grid.pdfExportModule.Map(_this.parent.grid, pdfExportProperties, isMultipleExport, pdfDoc, isBlob).then(function (document) {\n                    if (customsData != null) {\n                        pdfExportProperties.dataSource = customsData;\n                    }\n                    else {\n                        delete pdfExportProperties.dataSource;\n                    }\n                    resolve(document);\n                });\n            });\n        });\n    };\n    PdfExport.prototype.generateQuery = function (query, prop) {\n        if (!isNullOrUndefined(prop) && prop.exportType === 'CurrentPage'\n            && this.parent.allowPaging) {\n            prop.exportType = 'AllPages';\n            query.addParams('ExportType', 'CurrentPage');\n            query.where(this.parent.parentIdMapping, 'equal', null);\n            query = getObject('grid.renderModule.data.pageQuery', this.parent)(query);\n        }\n        return query;\n    };\n    PdfExport.prototype.manipulatePdfProperties = function (prop, dtSrc, queryResult) {\n        var args = {};\n        //count not required for this query\n        var isLocal = !isRemoteData(this.parent) && isOffline(this.parent);\n        setValue('query', this.parent.grid.getDataModule().generateQuery(true), args);\n        setValue('isExport', true, args);\n        setValue('isPdfExport', true, args);\n        if (!isNullOrUndefined(prop) && !isNullOrUndefined(prop.isCollapsedStatePersist)) {\n            setValue('isCollapsedStatePersist', prop.isCollapsedStatePersist, args);\n        }\n        if (!isNullOrUndefined(prop) && !isNullOrUndefined(prop.exportType)) {\n            setValue('exportType', prop.exportType, args);\n        }\n        if (!isLocal) {\n            this.parent.parentData = [];\n            this.parent.dataModule.convertToFlatData(getValue('result', queryResult));\n            setValue('expresults', this.parent.flatData, args);\n        }\n        this.parent.notify('dataProcessor', args);\n        //args = this.parent.dataModule.dataProcessor(args);\n        args = this.dataResults;\n        dtSrc = isNullOrUndefined(args.result) ? this.parent.flatData.slice(0) : args.result;\n        if (!isLocal) {\n            this.parent.flatData = [];\n        }\n        if (prop && prop.dataSource && isLocal) {\n            var flatDatas = this.parent.flatData;\n            var dataSrc = prop.dataSource instanceof DataManager ? prop.dataSource.dataSource.json : prop.dataSource;\n            this.parent.dataModule.convertToFlatData(dataSrc);\n            dtSrc = this.parent.flatData;\n            this.parent.flatData = flatDatas;\n        }\n        prop = isNullOrUndefined(prop) ? {} : prop;\n        prop.dataSource = new DataManager({ json: dtSrc });\n        prop.query = args['query'];\n        return prop;\n    };\n    /**\n     * TreeGrid PDF Export cell modifier\n     *\n     * @param {PdfQueryCellInfoEventArgs} args - Current cell details\n     * @hidden\n     * @returns {void}\n     */\n    PdfExport.prototype.pdfQueryCellInfo = function (args) {\n        if (this.parent.grid.getColumnIndexByUid(args.column.uid) === this.parent.treeColumnIndex) {\n            var style = {};\n            var data = getObject('data', args);\n            var ispadfilter = isNullOrUndefined(data.filterLevel);\n            var pad = ispadfilter ? data.level : data.filterLevel;\n            style.paragraphIndent = pad * 3;\n            args.style = style;\n        }\n        this.parent.notify('updateResults', args);\n        this.parent.trigger('pdfQueryCellInfo', args);\n    };\n    return PdfExport;\n}());\nexport { PdfExport };\n","import { Grid } from '@syncfusion/ej2-grids';\nimport { Page as GridPage } from '@syncfusion/ej2-grids';\nimport * as events from '../base/constant';\nimport { DataManager, Query, Predicate } from '@syncfusion/ej2-data';\nimport { getValue, isNullOrUndefined, addClass, removeClass } from '@syncfusion/ej2-base';\nimport { getExpandStatus, isFilterChildHierarchy } from '../utils';\n/**\n * The `Page` module is used to render pager and handle paging action.\n *\n * @hidden\n */\nvar Page = /** @class */ (function () {\n    function Page(parent) {\n        Grid.Inject(GridPage);\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Page.prototype.addEventListener = function () {\n        this.parent.on(events.localPagedExpandCollapse, this.collapseExpandPagedchilds, this);\n        this.parent.on(events.pagingActions, this.pageAction, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Page.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.localPagedExpandCollapse, this.collapseExpandPagedchilds);\n        this.parent.off(events.pagingActions, this.pageAction);\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Pager module name\n     */\n    Page.prototype.getModuleName = function () {\n        return 'pager';\n    };\n    /**\n     * Refreshes the page count, pager information, and external message.\n     *\n     * @returns {void}\n     */\n    Page.prototype.refresh = function () {\n        this.parent.grid.pagerModule.refresh();\n    };\n    /**\n     * To destroy the pager\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Page.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * Navigates to the target page according to the given number.\n     *\n     * @param  {number} pageNo - Defines the page number to navigate.\n     * @returns {void}\n     */\n    Page.prototype.goToPage = function (pageNo) {\n        this.parent.grid.pagerModule.goToPage(pageNo);\n    };\n    /**\n     * Defines the text of the external message.\n     *\n     * @param  {string} message - Defines the message to update.\n     * @returns {void}\n     */\n    Page.prototype.updateExternalMessage = function (message) {\n        if (isNullOrUndefined(message)) {\n            var error = 'The provided value for the message is undefined. Please ensure the message contains string.';\n            this.parent.trigger(events.actionFailure, { error: error });\n        }\n        this.parent.grid.pagerModule.updateExternalMessage(message);\n    };\n    /**\n     * @param {{action: string, row: HTMLTableRowElement, record: ITreeData, args: RowCollapsedEventArgs}} rowDetails - Expand Collapse details arguments\n     * @param {string} rowDetails.action - Expand Collapse action type\n     * @param {HTMLTableRowElement} rowDetails.row - Row element\n     * @param {ITreeData} rowDetails.record - Row object data\n     * @param {RowCollapsedEventArgs} rowDetails.args - Expand Collapse event arguments\n     * @hidden\n     * @returns {void}\n     */\n    Page.prototype.collapseExpandPagedchilds = function (rowDetails) {\n        rowDetails.record.expanded = rowDetails.action === 'collapse' ? false : true;\n        this.parent.flatData.map(function (e) { return e.expanded = e.uniqueID === rowDetails.record.uniqueID &&\n            e.expanded !== rowDetails.record.expanded ? rowDetails.record.expanded : e.expanded; });\n        if (this.parent.enableImmutableMode) {\n            var primaryKeyField_1 = this.parent.getPrimaryKeyFieldNames()[0];\n            var record = this.parent.flatData.filter(function (e) {\n                return e[\"\" + primaryKeyField_1] === rowDetails.record[\"\" + primaryKeyField_1];\n            });\n            if (record.length) {\n                record[0].expanded = rowDetails.record.expanded;\n            }\n        }\n        var ret = {\n            result: this.parent.flatData,\n            row: rowDetails.row,\n            action: rowDetails.action,\n            record: rowDetails.record,\n            count: this.parent.flatData.length\n        };\n        getValue('grid.renderModule', this.parent).dataManagerSuccess(ret);\n        if (this.parent.enableImmutableMode) {\n            var row = 'row';\n            var action = 'action';\n            var targetEle = void 0;\n            if (ret[\"\" + action] === 'collapse') {\n                targetEle = ret[\"\" + row].getElementsByClassName('e-treegridexpand')[0];\n                if (!isNullOrUndefined(targetEle)) {\n                    removeClass([targetEle], 'e-treegridexpand');\n                    addClass([targetEle], 'e-treegridcollapse');\n                }\n            }\n            else if (ret[\"\" + action] === 'expand') {\n                targetEle = ret[\"\" + row].getElementsByClassName('e-treegridcollapse')[0];\n                if (!isNullOrUndefined(targetEle)) {\n                    removeClass([targetEle], 'e-treegridcollapse');\n                    addClass([targetEle], 'e-treegridexpand');\n                }\n            }\n        }\n    };\n    Page.prototype.pageRoot = function (pagedResults, temp, result) {\n        var newResults = isNullOrUndefined(result) ? [] : result;\n        var _loop_1 = function (t) {\n            newResults.push(temp[parseInt(t.toString(), 10)]);\n            var res = [];\n            if (temp[parseInt(t.toString(), 10)].hasChildRecords) {\n                res = pagedResults.filter(function (e) {\n                    return temp[parseInt(t.toString(), 10)].uniqueID === e.parentUniqueID;\n                });\n                newResults = this_1.pageRoot(pagedResults, res, newResults);\n            }\n        };\n        var this_1 = this;\n        for (var t = 0; t < temp.length; t++) {\n            _loop_1(t);\n        }\n        return newResults;\n    };\n    Page.prototype.updatePageSize = function (pageingDetails) {\n        var updateSize = pageingDetails.count;\n        var gridPagerModule = this.parent.grid.pagerModule;\n        if (this.parent.pageSettings.pageSizes === true) {\n            if (gridPagerModule.pagerObj.pagerdropdownModule['dropDownListObject'].value === gridPagerModule.pagerObj.getLocalizedLabel('All')) {\n                gridPagerModule['pagerObj'].totalRecordsCount = updateSize;\n                this.parent.grid.pageSettings.pageSize = updateSize;\n            }\n        }\n    };\n    Page.prototype.pageAction = function (pageingDetails) {\n        var _this = this;\n        var dm = new DataManager(pageingDetails.result);\n        if (this.parent.pageSettings.pageSizeMode === 'Root') {\n            var temp = [];\n            var propname = (this.parent.grid.filterSettings.columns.length > 0) &&\n                (this.parent.filterSettings.hierarchyMode === 'Child' || this.parent.filterSettings.hierarchyMode === 'None') ?\n                'filterLevel' : 'level';\n            var query = new Query().where(propname, 'equal', 0);\n            temp = dm.executeLocal(query);\n            pageingDetails.count = temp.length;\n            var size = this.parent.grid.pageSettings.pageSize;\n            var current = this.parent.grid.pageSettings.currentPage;\n            var skip = size * (current - 1);\n            query = query.skip(skip).take(size);\n            temp = dm.executeLocal(query);\n            var newResults = this.pageRoot(pageingDetails.result, temp);\n            pageingDetails.result = newResults;\n        }\n        else {\n            var dm_1 = new DataManager(pageingDetails.result);\n            var expanded = new Predicate('expanded', 'notequal', null).or('expanded', 'notequal', undefined);\n            var parents_1 = dm_1.executeLocal(new Query().where(expanded));\n            var visualData = void 0;\n            if (isFilterChildHierarchy(this.parent) && (pageingDetails.actionArgs.action !== 'collapse' &&\n                pageingDetails.actionArgs.action !== 'expand')) {\n                visualData = parents_1;\n            }\n            else {\n                visualData = parents_1.filter(function (e) {\n                    return getExpandStatus(_this.parent, e, parents_1);\n                });\n            }\n            pageingDetails.count = visualData.length;\n            var query = new Query();\n            var size = this.parent.grid.pageSettings.pageSize;\n            this.updatePageSize(pageingDetails);\n            var current = this.parent.grid.pageSettings.currentPage;\n            if (visualData.length < (current * size)) {\n                current = (Math.floor(visualData.length / size)) + ((visualData.length % size) ? 1 : 0);\n                current = current ? current : 1;\n                this.parent.grid.setProperties({ pageSettings: { currentPage: current } }, true);\n            }\n            var skip = size * (current - 1);\n            query = query.skip(skip).take(size);\n            dm_1.dataSource.json = visualData;\n            pageingDetails.result = dm_1.executeLocal(query);\n        }\n        this.parent.notify('updateAction', pageingDetails);\n    };\n    return Page;\n}());\nexport { Page };\n","import { Grid, Toolbar as tool } from '@syncfusion/ej2-grids';\nimport * as events from '../base/constant';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * Toolbar Module for TreeGrid\n *\n * @hidden\n */\nvar Toolbar = /** @class */ (function () {\n    function Toolbar(parent) {\n        Grid.Inject(tool);\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} - Returns Toolbar module name\n     */\n    Toolbar.prototype.getModuleName = function () {\n        return 'toolbar';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Toolbar.prototype.addEventListener = function () {\n        this.parent.on(events.rowSelected, this.refreshToolbar, this);\n        this.parent.on(events.rowDeselected, this.refreshToolbar, this);\n        this.parent.on(events.toolbarClick, this.toolbarClickHandler, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Toolbar.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.rowSelected, this.refreshToolbar);\n        this.parent.off(events.rowDeselected, this.refreshToolbar);\n        this.parent.off(events.toolbarClick, this.toolbarClickHandler);\n    };\n    Toolbar.prototype.refreshToolbar = function (args) {\n        var toolbarElement = this.parent.grid.toolbarModule.getToolbar();\n        if (!isNullOrUndefined(toolbarElement)) {\n            var tObj = this.parent;\n            var indentElement = void 0;\n            var outdentElement = void 0;\n            var indentID = tObj.element.id + '_gridcontrol_indent';\n            var outdentID = tObj.element.id + '_gridcontrol_outdent';\n            var indentEle = toolbarElement.querySelector('#' + indentID);\n            var outdentEle = toolbarElement.querySelector('#' + outdentID);\n            var row = args.row;\n            var selectedrow = tObj.getSelectedRows()[0];\n            if (!isNullOrUndefined(row[0])) {\n                row = row[0];\n            }\n            row = (!isNullOrUndefined(selectedrow) && selectedrow.rowIndex !== row.rowIndex) ? selectedrow : row;\n            if (indentEle !== null && outdentEle !== null) {\n                indentElement = toolbarElement.querySelector('#' + indentID).parentElement;\n                outdentElement = toolbarElement.querySelector('#' + outdentID).parentElement;\n                if (row.rowIndex === 0 || tObj.getSelectedRowIndexes().length > 1) {\n                    indentElement.classList.add('e-hidden');\n                    outdentElement.classList.add('e-hidden');\n                }\n                else if (args['name'] !== 'rowDeselected' || (!isNullOrUndefined(selectedrow) && tObj.grid.isCheckBoxSelection)) {\n                    var selectedItem = tObj.getCurrentViewRecords()[row.rowIndex];\n                    if (!isNullOrUndefined(selectedItem)) {\n                        if ((selectedItem.level > tObj.getCurrentViewRecords()[row.rowIndex - 1].level)) {\n                            indentElement.classList.add('e-hidden');\n                        }\n                        else {\n                            indentElement.classList.remove('e-hidden');\n                        }\n                        if (selectedItem.level === tObj.getCurrentViewRecords()[row.rowIndex - 1].level) {\n                            indentElement.classList.remove('e-hidden');\n                        }\n                        if (selectedItem.level === 0) {\n                            outdentElement.classList.add('e-hidden');\n                        }\n                        if (selectedItem.level !== 0) {\n                            outdentElement.classList.remove('e-hidden');\n                        }\n                    }\n                }\n                if (args['name'] === 'rowDeselected' && isNullOrUndefined(selectedrow) && !tObj.grid.isCheckBoxSelection) {\n                    if (this.parent.toolbar['includes']('Indent')) {\n                        indentElement.classList.add('e-hidden');\n                    }\n                    if (this.parent.toolbar['includes']('Outdent')) {\n                        outdentElement.classList.add('e-hidden');\n                    }\n                }\n            }\n        }\n    };\n    Toolbar.prototype.toolbarClickHandler = function (args) {\n        var tObj = this.parent;\n        var indentOutdentAction = 'indentOutdentAction';\n        if (this.parent.editSettings.mode === 'Cell' && this.parent.grid.editSettings.mode === 'Batch' &&\n            args.item.id === this.parent.grid.element.id + '_update') {\n            args.cancel = true;\n            this.parent.grid.editModule.saveCell();\n        }\n        if (args.item.id === this.parent.grid.element.id + '_expandall') {\n            this.parent.expandAll();\n        }\n        if (args.item.id === this.parent.grid.element.id + '_collapseall') {\n            this.parent.collapseAll();\n        }\n        if (args.item.id === tObj.grid.element.id + '_indent' && tObj.getSelectedRecords().length\n            && !isNullOrUndefined(tObj.rowDragAndDropModule)) {\n            this.parent.rowDragAndDropModule[\"\" + indentOutdentAction](null, 'indent');\n        }\n        if (args.item.id === tObj.grid.element.id + '_outdent' && tObj.getSelectedRecords().length\n            && !isNullOrUndefined(tObj.rowDragAndDropModule)) {\n            this.parent.rowDragAndDropModule[\"\" + indentOutdentAction](null, 'outdent');\n        }\n    };\n    /**\n     * Gets the toolbar of the TreeGrid.\n     *\n     * @returns {Element} - Returns Toolbar element\n     * @hidden\n     */\n    Toolbar.prototype.getToolbar = function () {\n        return this.parent.grid.toolbarModule.getToolbar();\n    };\n    /**\n     * Enables or disables ToolBar items.\n     *\n     * @param {string[]} items - Defines the collection of itemID of ToolBar items.\n     * @param {boolean} isEnable - Defines the items to be enabled or disabled.\n     * @returns {void}\n     * @hidden\n     */\n    Toolbar.prototype.enableItems = function (items, isEnable) {\n        this.parent.grid.toolbarModule.enableItems(items, isEnable);\n    };\n    /**\n     * Destroys the ToolBar.\n     *\n     * @method destroy\n     * @returns {void}\n     */\n    Toolbar.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return Toolbar;\n}());\nexport { Toolbar };\n","import { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getObject, calculateAggregate, Aggregate as GridAggregate, Grid, appendChildren } from '@syncfusion/ej2-grids';\nimport { findParentRecords } from '../utils';\nimport { isNullOrUndefined, setValue, createElement, extend } from '@syncfusion/ej2-base';\n/**\n * TreeGrid Aggregate module\n *\n * @hidden\n */\nvar Aggregate = /** @class */ (function () {\n    /**\n     * Constructor for Aggregate module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Aggregate(parent) {\n        Grid.Inject(GridAggregate);\n        this.parent = parent;\n        this.flatChildRecords = [];\n        this.summaryQuery = [];\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Summary module name\n     */\n    Aggregate.prototype.getModuleName = function () {\n        return 'summary';\n    };\n    Aggregate.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n    };\n    /**\n     * Function to calculate summary values\n     *\n     * @param {QueryOptions[]} summaryQuery - DataManager query for aggregate operations\n     * @param {Object[]} filteredData - Filtered data collection\n     * @param {boolean} isSort - Specified whether sorting operation performed\n     * @hidden\n     * @returns {Object[]} -  return flat records with summary values\n     */\n    Aggregate.prototype.calculateSummaryValue = function (summaryQuery, filteredData, isSort) {\n        this.summaryQuery = summaryQuery;\n        var parentRecord;\n        var parentDataLength = Object.keys(filteredData).length;\n        var parentData = [];\n        for (var p = 0, len = parentDataLength; p < len; p++) {\n            var summaryRow = getObject('isSummaryRow', filteredData[parseInt(p.toString(), 10)]);\n            if (!summaryRow) {\n                parentData.push(filteredData[parseInt(p.toString(), 10)]);\n            }\n        }\n        var parentRecords = findParentRecords(parentData);\n        var flatRecords = parentData.slice();\n        var summaryLength = Object.keys(this.parent.aggregates).length;\n        var dataLength = Object.keys(parentRecords).length;\n        var childRecordsLength;\n        var columns = this.parent.getColumns();\n        if (this.parent.aggregates.filter(function (x) { return x.showChildSummary; }).length) {\n            for (var i = 0, len = dataLength; i < len; i++) {\n                parentRecord = parentRecords[parseInt(i.toString(), 10)];\n                childRecordsLength = this.getChildRecordsLength(parentRecord, flatRecords);\n                if (childRecordsLength) {\n                    var _loop_1 = function (summaryRowIndex, len_1) {\n                        var item = void 0;\n                        item = {};\n                        for (var i_1 = 0; i_1 < columns.length; i_1++) {\n                            var field = (isNullOrUndefined(getObject('field', columns[parseInt(i_1.toString(), 10)]))) ?\n                                columns[parseInt(i_1.toString(), 10)] : getObject('field', (columns[parseInt(i_1.toString(), 10)]));\n                            item[\"\" + field] = null;\n                        }\n                        if (this_1.parent.aggregates[summaryRowIndex - 1].showChildSummary) {\n                            var idx_1;\n                            flatRecords.map(function (e, i) {\n                                if (e.uniqueID === parentRecord.uniqueID) {\n                                    idx_1 = i;\n                                    return;\n                                }\n                            });\n                            var currentIndex = idx_1 + childRecordsLength + summaryRowIndex;\n                            item = this_1.createSummaryItem(item, this_1.parent.aggregates[summaryRowIndex - 1], currentIndex);\n                            var summaryParent = extend({}, parentRecord);\n                            delete summaryParent.childRecords;\n                            delete summaryParent[this_1.parent.childMapping];\n                            setValue('parentItem', summaryParent, item);\n                            var level = getObject('level', summaryParent);\n                            setValue('level', level + 1, item);\n                            setValue('isSummaryRow', true, item);\n                            setValue('parentUniqueID', summaryParent.uniqueID, item);\n                            if (isSort) {\n                                var childRecords = getObject('childRecords', parentRecord);\n                                if (childRecords.length) {\n                                    childRecords.push(item);\n                                }\n                            }\n                            flatRecords.splice(currentIndex, 0, item);\n                        }\n                        else {\n                            item = this_1.createSummaryItem(item, this_1.parent.aggregates[summaryRowIndex - 1]);\n                            return \"continue\";\n                        }\n                    };\n                    var this_1 = this;\n                    for (var summaryRowIndex = 1, len_1 = summaryLength; summaryRowIndex <= len_1; summaryRowIndex++) {\n                        _loop_1(summaryRowIndex, len_1);\n                    }\n                    this.flatChildRecords = [];\n                }\n            }\n        }\n        else {\n            var items = {};\n            for (var columnIndex = 0, length_1 = columns.length; columnIndex < length_1; columnIndex++) {\n                var fields = isNullOrUndefined(getObject('field', columns[parseInt(columnIndex.toString(), 10)])) ?\n                    columns[parseInt(columnIndex.toString(), 10)] : getObject('field', columns[parseInt(columnIndex.toString(), 10)]);\n                items[\"\" + fields] = null;\n            }\n            for (var summaryRowIndex = 1, length_2 = summaryLength; summaryRowIndex <= length_2; summaryRowIndex++) {\n                this.createSummaryItem(items, this.parent.aggregates[summaryRowIndex - 1]);\n            }\n        }\n        return flatRecords;\n    };\n    Aggregate.prototype.getChildRecordsLength = function (parentData, flatData) {\n        var recordLength = Object.keys(flatData).length;\n        var record;\n        for (var i = 0, len = recordLength; i < len; i++) {\n            record = flatData[parseInt(i.toString(), 10)];\n            var parent_1 = isNullOrUndefined(record.parentItem) ? null :\n                flatData.filter(function (e) { return e.uniqueID === record.parentItem.uniqueID; })[0];\n            if (parentData === parent_1) {\n                this.flatChildRecords.push(record);\n                var hasChild = getObject('hasChildRecords', record);\n                if (hasChild) {\n                    this.getChildRecordsLength(record, flatData);\n                }\n                else {\n                    continue;\n                }\n            }\n        }\n        return this.flatChildRecords.length;\n    };\n    Aggregate.prototype.createSummaryItem = function (itemData, summary, rowIndex) {\n        var summaryColumnLength = Object.keys(summary.columns).length;\n        for (var i = 0, len = summaryColumnLength; i < len; i++) {\n            var displayColumn = isNullOrUndefined(summary.columns[parseInt(i.toString(), 10)].columnName) ?\n                summary.columns[parseInt(i.toString(), 10)].field : summary.columns[parseInt(i.toString(), 10)].columnName;\n            var keys = Object.keys(itemData);\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var key = keys_1[_i];\n                if (key === displayColumn) {\n                    if (this.flatChildRecords.length) {\n                        itemData[\"\" + key] = this.getSummaryValues(summary.columns[parseInt(i.toString(), 10)], this.flatChildRecords, rowIndex);\n                    }\n                    else if (this.parent.isLocalData) {\n                        var data = this.parent.dataSource instanceof DataManager ? this.parent.dataSource.dataSource.json\n                            : this.parent.flatData;\n                        itemData[\"\" + key] = this.getSummaryValues(summary.columns[parseInt(i.toString(), 10)], data, rowIndex);\n                    }\n                }\n                else {\n                    continue;\n                }\n            }\n        }\n        return itemData;\n    };\n    Aggregate.prototype.getSummaryValues = function (summaryColumn, summaryData, rowIndex) {\n        var qry = new Query();\n        var single = {};\n        var helper = {};\n        var type = !isNullOrUndefined(summaryColumn.field) ?\n            this.parent.getColumnByField(summaryColumn.field).type : undefined;\n        summaryColumn.setPropertiesSilent({ format: this.getFormatFromType(summaryColumn.format, type) });\n        summaryColumn.setFormatter(this.parent.grid.locale);\n        var formatFn = summaryColumn.getFormatter() || (function () { return function (a) { return a; }; })();\n        summaryColumn.setTemplate(helper);\n        var tempObj = summaryColumn.getTemplate(2);\n        qry.queries = this.summaryQuery;\n        qry.requiresCount();\n        var sumData = new DataManager(summaryData).executeLocal(qry);\n        var types = summaryColumn.type;\n        var summaryKey;\n        types = [summaryColumn.type];\n        for (var i = 0; i < types.length; i++) {\n            summaryKey = types[parseInt(i.toString(), 10)];\n            var key = summaryColumn.field + ' - ' + types[parseInt(i.toString(), 10)].toLowerCase();\n            var val = types[parseInt(i.toString(), 10)] !== 'Custom' ? getObject('aggregates', sumData) :\n                /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n                calculateAggregate(types[parseInt(i.toString(), 10)], sumData, summaryColumn, this.parent);\n            var disp = summaryColumn.columnName;\n            var value_1 = types[parseInt(i.toString(), 10)] !== 'Custom' ? val[\"\" + key] : val;\n            single[\"\" + disp] = single[\"\" + disp] || {};\n            single[\"\" + disp][\"\" + key] = value_1;\n            single[\"\" + disp][types[parseInt(i.toString(), 10)]] = !isNullOrUndefined(val) ? formatFn(value_1) : ' ';\n        }\n        helper.format = summaryColumn.getFormatter();\n        var cellElement = createElement('td', {\n            className: 'e-summary'\n        });\n        if (this.parent.isReact) {\n            var renderReactTemplates = 'renderReactTemplates';\n            tempObj.fn(single[summaryColumn.columnName], this.parent, tempObj.property, '', null, null, cellElement);\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            var thisRef_1 = this;\n            var colIndex_1 = this.parent.getColumnIndexByField(summaryColumn.field);\n            // tslint:disable-next-line:typedef\n            this.parent[\"\" + renderReactTemplates](function () {\n                setTimeout(function () {\n                    var td = thisRef_1.parent.getCellFromIndex(rowIndex, colIndex_1);\n                    if (thisRef_1.parent.treeColumnIndex === colIndex_1) {\n                        var treeCell = td.querySelector('.e-treecell');\n                        if (treeCell) {\n                            treeCell.innerHTML = cellElement.innerHTML;\n                        }\n                    }\n                    else {\n                        td.innerHTML = cellElement.innerHTML;\n                    }\n                }, 0);\n            });\n        }\n        else {\n            appendChildren(cellElement, tempObj.fn(single[summaryColumn.columnName], this.parent, tempObj.property));\n        }\n        var value = single[\"\" + summaryColumn.columnName][\"\" + summaryKey];\n        var summaryValue;\n        if (cellElement.innerHTML.indexOf(value) === -1) {\n            summaryValue = cellElement.innerHTML + value;\n            return summaryValue;\n        }\n        else {\n            return cellElement.innerHTML;\n        }\n    };\n    Aggregate.prototype.getFormatFromType = function (summaryformat, type) {\n        if (isNullOrUndefined(type) || typeof summaryformat !== 'string') {\n            return summaryformat;\n        }\n        var obj;\n        switch (type) {\n            case 'number':\n                obj = { format: summaryformat };\n                break;\n            case 'datetime':\n                obj = { type: 'dateTime', skeleton: summaryformat };\n                break;\n            case 'date':\n                obj = { type: type, skeleton: summaryformat };\n                break;\n        }\n        return obj;\n    };\n    /**\n     * To destroy the Aggregate module\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Aggregate.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return Aggregate;\n}());\nexport { Aggregate };\n","import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { Sort as GridSort, Grid, getActualProperties } from '@syncfusion/ej2-grids';\nimport { getParentData } from '../utils';\n/**\n * Internal dataoperations for TreeGrid\n *\n * @hidden\n */\nvar Sort = /** @class */ (function () {\n    function Sort(grid) {\n        Grid.Inject(GridSort);\n        this.parent = grid;\n        this.taskIds = [];\n        this.flatSortedData = [];\n        this.storedIndex = -1;\n        this.isSelfReference = !isNullOrUndefined(this.parent.parentIdMapping);\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Sort module name\n     */\n    Sort.prototype.getModuleName = function () {\n        return 'sort';\n    };\n    /**\n     * @hidden\n     */\n    Sort.prototype.addEventListener = function () {\n        this.parent.on('updateModel', this.updateModel, this);\n        this.parent.on('createSort', this.createdSortedRecords, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Sort.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('updateModel', this.updateModel);\n        this.parent.off('createSort', this.createdSortedRecords);\n    };\n    Sort.prototype.createdSortedRecords = function (sortParams) {\n        var data = sortParams.modifiedData;\n        var srtQry = sortParams.srtQry;\n        this.iterateSort(data, srtQry);\n        this.storedIndex = -1;\n        sortParams.modifiedData = this.flatSortedData;\n        this.flatSortedData = [];\n    };\n    Sort.prototype.iterateSort = function (data, srtQry) {\n        for (var d = 0; d < data.length; d++) {\n            if (this.parent.grid.filterSettings.columns.length > 0 || this.parent.grid.searchSettings.key !== '') {\n                if (!isNullOrUndefined(getParentData(this.parent, data[parseInt(d.toString(), 10)].uniqueID, true))) {\n                    this.storedIndex++;\n                    this.flatSortedData[this.storedIndex] = data[parseInt(d.toString(), 10)];\n                }\n            }\n            else {\n                this.storedIndex++;\n                this.flatSortedData[this.storedIndex] = data[parseInt(d.toString(), 10)];\n            }\n            if (data[parseInt(d.toString(), 10)].hasChildRecords) {\n                var childSort = (new DataManager(data[parseInt(d.toString(), 10)].childRecords)\n                    .executeLocal(srtQry));\n                if (this.parent.allowRowDragAndDrop && data[parseInt(d.toString(), 10)].childRecords.indexOf(this.parent.rowDragAndDropModule['draggedRecord']) !== -1 && this.parent.rowDragAndDropModule['dropPosition'] !== 'middleSegment') {\n                    var dragdIndex = childSort.indexOf(this.parent.rowDragAndDropModule['draggedRecord']);\n                    childSort.splice(dragdIndex, 1);\n                    var dropdIndex = childSort.indexOf(this.parent.rowDragAndDropModule['droppedRecord']);\n                    if (this.parent.rowDragAndDropModule['dropPosition'] === 'topSegment') {\n                        childSort.splice(dropdIndex, 0, this.parent.rowDragAndDropModule['draggedRecord']);\n                    }\n                    else if (this.parent.rowDragAndDropModule['dropPosition'] === 'bottomSegment') {\n                        childSort.splice(dropdIndex + 1, 0, this.parent.rowDragAndDropModule['draggedRecord']);\n                    }\n                }\n                this.iterateSort(childSort, srtQry);\n            }\n        }\n    };\n    /**\n     * Sorts a column with the given options.\n     *\n     * @param {string} columnName - Defines the column name to be sorted.\n     * @param {SortDirection} direction - Defines the direction of sorting field.\n     * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.\n     * @returns {void}\n     */\n    Sort.prototype.sortColumn = function (columnName, direction, isMultiSort) {\n        this.parent.grid.sortColumn(columnName, direction, isMultiSort);\n    };\n    Sort.prototype.removeSortColumn = function (field) {\n        this.parent.grid.removeSortColumn(field);\n    };\n    /**\n     * The function used to update sortSettings of TreeGrid.\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Sort.prototype.updateModel = function () {\n        this.parent.setProperties({ sortSettings: getActualProperties(this.parent.grid.sortSettings) }, true);\n    };\n    /**\n     * Clears all the sorted columns of the TreeGrid.\n     *\n     * @returns {void}\n     */\n    Sort.prototype.clearSorting = function () {\n        this.parent.grid.clearSorting();\n        this.updateModel();\n    };\n    /**\n     * Destroys the Sorting of TreeGrid.\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    Sort.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return Sort;\n}());\nexport { Sort };\n","import { Grid, ColumnMenu as GridColumnMenu } from '@syncfusion/ej2-grids';\n/**\n * TreeGrid ColumnMenu module\n *\n * @hidden\n */\nvar ColumnMenu = /** @class */ (function () {\n    /**\n     * Constructor for render module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function ColumnMenu(parent) {\n        Grid.Inject(GridColumnMenu);\n        this.parent = parent;\n    }\n    ColumnMenu.prototype.getColumnMenu = function () {\n        return this.parent.grid.columnMenuModule.getColumnMenu();\n    };\n    ColumnMenu.prototype.destroy = function () {\n        //this.parent.grid.columnMenuModule.destroy();\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns ColumnMenu module name\n     */\n    ColumnMenu.prototype.getModuleName = function () {\n        return 'columnMenu';\n    };\n    return ColumnMenu;\n}());\nexport { ColumnMenu };\n","import { Grid, ContextMenu as cmenu } from '@syncfusion/ej2-grids';\nimport { isNullOrUndefined, select } from '@syncfusion/ej2-base';\n/**\n * ContextMenu Module for TreeGrid\n *\n * @hidden\n */\nvar ContextMenu = /** @class */ (function () {\n    function ContextMenu(parent) {\n        Grid.Inject(cmenu);\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    ContextMenu.prototype.addEventListener = function () {\n        this.parent.on('contextMenuOpen', this.contextMenuOpen, this);\n        this.parent.on('contextMenuClick', this.contextMenuClick, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    ContextMenu.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('contextMenuOpen', this.contextMenuOpen);\n        this.parent.off('contextMenuClick', this.contextMenuClick);\n    };\n    ContextMenu.prototype.contextMenuOpen = function (args) {\n        var addRow = select('#' + this.parent.element.id + '_gridcontrol_cmenu_AddRow', args.element);\n        var editRecord = select('#' + this.parent.element.id + '_gridcontrol_cmenu_Edit', args.element);\n        var indent = select('#' + this.parent.element.id + '_gridcontrol_cmenu_Indent', args.element);\n        var outdent = select('#' + this.parent.element.id + '_gridcontrol_cmenu_Outdent', args.element);\n        if (addRow) {\n            if (this.parent.grid.editSettings.allowAdding === false || this.parent.grid.isEdit) {\n                addRow.style.display = 'none';\n            }\n            else {\n                addRow.style.display = 'block';\n            }\n        }\n        if ((this.parent.editSettings.mode === 'Cell' || this.parent.editSettings.mode === 'Batch')\n            && !(isNullOrUndefined(editRecord)) && !(editRecord.classList.contains('e-menu-hide'))) {\n            editRecord.style.display = 'none';\n        }\n        var tObj = this.parent;\n        var selectedrow = tObj.getSelectedRows()[0];\n        if ((indent || outdent) && !isNullOrUndefined(selectedrow)) {\n            var targetElement = args.event.target.closest('td');\n            if (isNullOrUndefined(targetElement) || (!isNullOrUndefined(targetElement) && (!targetElement.classList.contains('e-rowcell') ||\n                targetElement.querySelectorAll('.e-gridform').length !== 0))) {\n                for (var _i = 0, _a = args.items; _i < _a.length; _i++) {\n                    var items = _a[_i];\n                    if (items.text === 'Outdent' || items.text === 'Indent') {\n                        tObj.grid.contextMenuModule['hiddenItems'].push(items.text);\n                    }\n                }\n                tObj.grid.contextMenuModule.contextMenu.hideItems(tObj.grid.contextMenuModule['hiddenItems']);\n                indent.style.display = outdent.style.display = 'none';\n            }\n            else {\n                if (selectedrow.rowIndex === 0 || tObj.getSelectedRowIndexes().length > 1) {\n                    indent.style.display = outdent.style.display = 'none';\n                }\n                else if (args['name'] !== 'rowDeselected' || (!isNullOrUndefined(selectedrow) && tObj.grid.isCheckBoxSelection)) {\n                    var selectedItem = tObj.getCurrentViewRecords()[selectedrow.rowIndex];\n                    if (!isNullOrUndefined(selectedItem)) {\n                        if ((selectedItem.level > tObj.getCurrentViewRecords()[selectedrow.rowIndex - 1].level)) {\n                            indent.style.display = 'none';\n                        }\n                        else {\n                            indent.style.display = 'block';\n                        }\n                        if ((selectedItem.level === tObj.getCurrentViewRecords()[selectedrow.rowIndex - 1].level)) {\n                            indent.style.display = 'block';\n                        }\n                        if ((selectedItem.level === 0)) {\n                            outdent.style.display = 'none';\n                        }\n                        else {\n                            outdent.style.display = 'block';\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (((indent || outdent) || tObj.grid.isEdit) && isNullOrUndefined(selectedrow)) {\n                for (var _b = 0, _c = args.items; _b < _c.length; _b++) {\n                    var items = _c[_b];\n                    if (items.text === 'Outdent' || items.text === 'Indent') {\n                        if (!tObj.grid.contextMenuModule['hiddenItems'].includes(items.text)) {\n                            tObj.grid.contextMenuModule['hiddenItems'].push(items.text);\n                        }\n                    }\n                }\n                tObj.grid.contextMenuModule.contextMenu.hideItems(tObj.grid.contextMenuModule['hiddenItems']);\n                indent.style.display = outdent.style.display = 'none';\n            }\n        }\n    };\n    ContextMenu.prototype.contextMenuClick = function (args) {\n        if (args.item.id === 'Above' || args.item.id === 'Below' || args.item.id === 'Child') {\n            this.parent.notify('savePreviousRowPosition', args);\n            this.parent.setProperties({ editSettings: { newRowPosition: args.item.id } }, true);\n            this.parent.editModule['isAddedRowByContextMenu'] = true;\n            this.parent.addRecord();\n        }\n        if (args.item.id === this.parent.element.id + '_gridcontrol_cmenu_Indent' || args.item.id === this.parent.element.id + '_gridcontrol_cmenu_Outdent') {\n            if (!isNullOrUndefined(this.parent.rowDragAndDropModule)) {\n                var indentOutdentAction = 'indentOutdentAction';\n                var action = args.item.id === this.parent.element.id + '_gridcontrol_cmenu_Indent' ? 'indent' : 'outdent';\n                this.parent.rowDragAndDropModule[\"\" + indentOutdentAction](null, action);\n            }\n        }\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns ContextMenu module name\n     */\n    ContextMenu.prototype.getModuleName = function () {\n        return 'contextMenu';\n    };\n    /**\n     * Destroys the ContextMenu.\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    ContextMenu.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * Gets the context menu element from the TreeGrid.\n     *\n     * @returns {Element} Return Context Menu root element.\n     */\n    ContextMenu.prototype.getContextMenu = function () {\n        return this.parent.grid.contextMenuModule.getContextMenu();\n    };\n    return ContextMenu;\n}());\nexport { ContextMenu };\n","import { isNullOrUndefined, extend, setValue, getValue } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { findChildrenRecords, getParentData, extendArray } from '../utils';\nimport { getUid } from '@syncfusion/ej2-grids';\nimport { updateParentRow, editAction } from './crud-actions';\nimport { classList } from '@syncfusion/ej2-base';\n/**\n * `BatchEdit` module is used to handle batch editing actions.\n *\n * @hidden\n */\nvar BatchEdit = /** @class */ (function () {\n    function BatchEdit(parent) {\n        this.batchChildCount = 0;\n        this.addedRecords = 'addedRecords';\n        this.deletedRecords = 'deletedRecords';\n        this.batchAddedRecords = [];\n        this.batchDeletedRecords = [];\n        this.batchAddRowRecord = [];\n        this.parent = parent;\n        this.isSelfReference = !isNullOrUndefined(parent.parentIdMapping);\n        this.batchRecords = [];\n        this.currentViewRecords = [];\n        this.isAdd = false;\n        this.addEventListener();\n    }\n    BatchEdit.prototype.addEventListener = function () {\n        this.parent.on(events.cellSaved, this.cellSaved, this);\n        this.parent.on(events.batchAdd, this.batchAdd, this);\n        this.parent.on(events.beforeBatchAdd, this.beforeBatchAdd, this);\n        this.parent.on(events.batchSave, this.batchSave, this);\n        this.parent.on(events.beforeBatchDelete, this.beforeBatchDelete, this);\n        this.parent.on(events.beforeBatchSave, this.beforeBatchSave, this);\n        this.parent.on('batchPageAction', this.batchPageAction, this);\n        this.parent.on('batchCancelAction', this.batchCancelAction, this);\n        this.parent.grid.on('immutable-batch-cancel', this.immutableBatchAction, this);\n        this.parent.grid.on('next-cell-index', this.nextCellIndex, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    BatchEdit.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.cellSaved, this.cellSaved);\n        this.parent.off(events.batchAdd, this.batchAdd);\n        this.parent.off(events.batchSave, this.batchSave);\n        this.parent.off(events.beforeBatchAdd, this.beforeBatchAdd);\n        this.parent.off(events.beforeBatchDelete, this.beforeBatchDelete);\n        this.parent.off(events.beforeBatchSave, this.beforeBatchSave);\n        this.parent.off('batchPageAction', this.batchPageAction);\n        this.parent.off('batchCancelAction', this.batchCancelAction);\n        this.parent.grid.off('immutable-batch-cancel', this.immutableBatchAction);\n        this.parent.grid.off('next-cell-index', this.nextCellIndex);\n    };\n    /**\n     * To destroy the editModule\n     *\n     * @returns {void}\n     * @hidden\n     */\n    BatchEdit.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @hidden\n     * @returns {Object[]} Returns modified records in batch editing.\n     */\n    BatchEdit.prototype.getBatchRecords = function () {\n        return this.batchRecords;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns index of newly add row\n     */\n    BatchEdit.prototype.getAddRowIndex = function () {\n        return this.addRowIndex;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns selected row index\n     */\n    BatchEdit.prototype.getSelectedIndex = function () {\n        return this.selectedIndex;\n    };\n    /**\n     * @hidden\n     * @returns {number} Returns newly added child count\n     */\n    BatchEdit.prototype.getBatchChildCount = function () {\n        return this.batchChildCount;\n    };\n    BatchEdit.prototype.batchPageAction = function () {\n        var data = (this.parent.grid.dataSource instanceof DataManager ?\n            this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n        var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        var index;\n        if (!isNullOrUndefined(this.batchAddedRecords) && this.batchAddedRecords.length) {\n            for (var i = 0; i < this.batchAddedRecords.length; i++) {\n                index = data.map(function (e) { return e[\"\" + primaryKey]; }).indexOf(this.batchAddedRecords[parseInt(i.toString(), 10)][\"\" + primaryKey]);\n                data.splice(index, 1);\n            }\n        }\n        this.batchAddedRecords = this.batchRecords = this.batchAddRowRecord = this.batchDeletedRecords = this.currentViewRecords = [];\n    };\n    BatchEdit.prototype.cellSaved = function (args) {\n        var actualCellIndex = args.column.index;\n        if (actualCellIndex === this.parent.treeColumnIndex) {\n            this.parent.renderModule.cellRender({ data: args.rowData, cell: args.cell,\n                column: this.parent.grid.getColumnByIndex(args.column.index)\n            });\n        }\n        if (this.isAdd && this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.newRowPosition !== 'Bottom') {\n            var data = (this.parent.grid.dataSource instanceof DataManager ?\n                this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n            var added = void 0;\n            var level = 'level';\n            var primaryKey_1 = this.parent.grid.getPrimaryKeyFieldNames()[0];\n            var currentDataIndex = void 0;\n            var indexvalue = void 0;\n            var parentItem = 'parentItem';\n            var uniqueID = 'uniqueID';\n            var parentRecord = this.selectedIndex > -1 ? this.batchRecords[parseInt(this.addRowIndex.toString(), 10)][\"\" + parentItem] : null;\n            var idMapping = void 0;\n            var parentUniqueID = void 0;\n            var parentIdMapping = void 0;\n            var rowObjectIndex = this.parent.editSettings.newRowPosition === 'Top' || this.selectedIndex === -1 ? 0 :\n                this.parent.editSettings.newRowPosition === 'Above' ? this.addRowIndex\n                    : this.addRowIndex + 1;\n            rowObjectIndex = this.getActualRowObjectIndex(rowObjectIndex);\n            if (this.newBatchRowAdded) {\n                if (this.batchRecords.length) {\n                    idMapping = this.batchRecords[this.addRowIndex][this.parent.idMapping];\n                    parentIdMapping = this.batchRecords[this.addRowIndex][this.parent.parentIdMapping];\n                    if (this.batchRecords[parseInt(this.addRowIndex.toString(), 10)][\"\" + parentItem]) {\n                        parentUniqueID = this.batchRecords[parseInt(this.addRowIndex.toString(), 10)][\"\" + parentItem][\"\" + uniqueID];\n                    }\n                }\n                this.batchAddedRecords = extendArray(this.batchAddedRecords);\n                this.batchAddRowRecord = extendArray(this.batchAddRowRecord);\n                this.batchAddRowRecord.push(this.batchRecords[this.addRowIndex]);\n                added = this.parent.grid.getRowsObject()[parseInt(rowObjectIndex.toString(), 10)].changes;\n                if (!isNullOrUndefined(added)) {\n                    added.uniqueID = getUid(this.parent.element.id + '_data_');\n                    setValue('uniqueIDCollection.' + added.uniqueID, added, this.parent);\n                    if (!Object.prototype.hasOwnProperty.call(added, 'level')) {\n                        this.batchIndex = this.selectedIndex === -1 ? 0 : this.batchIndex;\n                        if (this.parent.editSettings.newRowPosition === 'Child') {\n                            added.primaryParent = parentRecord;\n                            if (this.selectedIndex > -1) {\n                                added.parentItem = extend({}, this.batchRecords[this.addRowIndex]);\n                                added.parentUniqueID = added.parentItem.uniqueID;\n                                delete added.parentItem.childRecords;\n                                delete added.parentItem[this.parent.childMapping];\n                                added.level = added.parentItem.level + 1;\n                                added.index = this.batchIndex;\n                                var childRecordCount = findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                                var record = findChildrenRecords(this.batchRecords[this.addRowIndex])[childRecordCount - 1];\n                                record = isNullOrUndefined(record) ? this.batchRecords[this.addRowIndex] : record;\n                                currentDataIndex = data.map(function (e) { return e[\"\" + primaryKey_1]; }).indexOf(record[\"\" + primaryKey_1]);\n                                if (this.isSelfReference) {\n                                    added[this.parent.parentIdMapping] = idMapping;\n                                }\n                                updateParentRow(primaryKey_1, added.parentItem, 'add', this.parent, this.isSelfReference, added);\n                            }\n                        }\n                        else if ((this.parent.editSettings.newRowPosition === 'Above' || this.parent.editSettings.newRowPosition === 'Below')\n                            && !isNullOrUndefined(this.batchRecords[this.addRowIndex])) {\n                            added.level = this.batchRecords[parseInt(this.addRowIndex.toString(), 10)][\"\" + level];\n                            if (added.level && this.selectedIndex > -1) {\n                                added.parentItem = parentRecord;\n                                added.parentUniqueID = parentUniqueID;\n                                delete added.parentItem.childRecords;\n                                delete added.parentItem[this.parent.childMapping];\n                            }\n                            added.index = this.parent.editSettings.newRowPosition === 'Below' ? this.batchIndex : this.batchIndex - 1;\n                            if (this.parent.editSettings.newRowPosition === 'Below' && this.selectedIndex > -1) {\n                                var childRecordCount = findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                                var record = findChildrenRecords(this.batchRecords[this.addRowIndex])[childRecordCount - 1];\n                                record = isNullOrUndefined(record) ? this.batchRecords[this.addRowIndex] : record;\n                                currentDataIndex = data.map(function (e) { return e[\"\" + primaryKey_1]; }).indexOf(record[\"\" + primaryKey_1]);\n                            }\n                            if (this.parent.editSettings.newRowPosition === 'Above' && this.selectedIndex > -1) {\n                                var record = this.batchRecords[this.addRowIndex];\n                                currentDataIndex = data.map(function (e) { return e[\"\" + primaryKey_1]; }).indexOf(record[\"\" + primaryKey_1]);\n                            }\n                            if (this.isSelfReference) {\n                                added[this.parent.parentIdMapping] = parentIdMapping;\n                            }\n                        }\n                        added.index = added.index === -1 ? 0 : added.index;\n                        added.hasChildRecords = false;\n                        added.childRecords = [];\n                        this.batchRecords.splice(added.index, 0, added);\n                        this.currentViewRecords.splice(added.index, 0, added);\n                        if (currentDataIndex) {\n                            indexvalue = currentDataIndex;\n                        }\n                        else {\n                            indexvalue = added.index;\n                        }\n                        if (this.parent.editSettings.newRowPosition !== 'Above') {\n                            indexvalue = added.index === 0 ? indexvalue : indexvalue + 1;\n                        }\n                        data.splice(indexvalue, 0, added);\n                        this.batchAddedRecords.push(added);\n                    }\n                }\n                this.parent.grid.getRowsObject()[parseInt(rowObjectIndex.toString(), 10)].data = added;\n                this.newBatchRowAdded = false;\n            }\n        }\n    };\n    BatchEdit.prototype.beforeBatchAdd = function (e) {\n        var isTabLastRow = 'isTabLastRow';\n        if (this.parent.editSettings.mode === 'Cell' && this.parent.editModule[\"\" + isTabLastRow]) {\n            e.cancel = true;\n            this.parent.editModule[\"\" + isTabLastRow] = false;\n            return;\n        }\n        if (this.parent.editModule['isAddedRowByMethod'] && !isNullOrUndefined(this.parent.editModule['addRowIndex']) &&\n            !this.parent.editModule['isAddedRowByContextMenu'] && (this.parent.grid.selectedRowIndex === -1 || this.parent.editModule['batchEditModule'].isAdd)) {\n            this.selectedIndex = this.parent.editModule['selectedIndex'];\n            this.addRowIndex = this.parent.editModule['addRowIndex'];\n            this.addRowRecord = this.batchRecords.length ? this.batchRecords[this.selectedIndex]\n                : this.parent.getCurrentViewRecords()[this.selectedIndex];\n        }\n        else {\n            this.selectedIndex = this.parent.grid.selectedRowIndex;\n            this.addRowIndex = this.parent.grid.selectedRowIndex > -1 ? this.parent.grid.selectedRowIndex : 0;\n            this.parent.editModule['addRowIndex'] = this.parent.grid.selectedRowIndex > -1 ? this.parent.grid.selectedRowIndex : 0;\n            this.addRowRecord = this.parent.getSelectedRecords()[0];\n        }\n    };\n    BatchEdit.prototype.batchAdd = function (e) {\n        if (this.parent.editSettings.newRowPosition !== 'Bottom') {\n            this.isAdd = true;\n            this.newBatchRowAdded = true;\n            var actualIndex = 0;\n            if (!this.batchRecords.length) {\n                this.batchAddedRecords = [];\n                this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n                this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n            }\n            if (this.parent.editModule['isAddedRowByMethod'] && !isNullOrUndefined(this.parent.editModule['addRowIndex'])) {\n                classList(this.parent.grid.getDataRows()[0], ['e-batchrow'], []);\n            }\n            if (this.parent.editSettings.newRowPosition !== 'Top') {\n                var records = this.parent.grid.getCurrentViewRecords();\n                if (this.parent.editSettings.mode === 'Batch' && (this.parent.getBatchChanges()[this.addedRecords].length > 1\n                    || this.parent.getBatchChanges()[this.deletedRecords].length)) {\n                    records = this.batchRecords;\n                }\n                this.updateChildCount(records);\n                this.parent.notify(events.beginAdd, {});\n                this.batchChildCount = 0;\n            }\n            this.updateRowIndex();\n            // update focus module, need to refix this once grid source modified.\n            var focusModule = getValue('focusModule', this.parent.grid);\n            var table = this.parent.getContentTable();\n            if (this.parent.getBatchChanges()[this.deletedRecords].length && this.parent.editSettings.newRowPosition === 'Above') {\n                actualIndex = e.row.rowIndex;\n                focusModule.getContent().matrix.matrix = this.matrix;\n            }\n            else {\n                actualIndex = table.getElementsByClassName('e-batchrow')[0].rowIndex;\n                // if (this.parent.frozenRows || this.parent.frozenColumns) {\n                //   actualIndex = this.batchIndex;\n                // }\n            }\n            focusModule.getContent().matrix.current = [actualIndex, focusModule.getContent().matrix.current[1]];\n            if (this.parent.editModule['isAddedRowByMethod'] && !isNullOrUndefined(this.parent.editModule['addRowIndex']) && !this.parent.editModule['isAddedRowByContextMenu']) {\n                var newlyAddedRecords = this.parent.getBatchChanges()['addedRecords'];\n                var index = parseInt(this.parent.getContentTable().getElementsByClassName('e-insertedrow')[newlyAddedRecords.length - 1].getAttribute('aria-rowindex'), 10) - 1;\n                this.batchRecords.splice(index, 0, newlyAddedRecords[newlyAddedRecords.length - 1]);\n            }\n        }\n    };\n    BatchEdit.prototype.beforeBatchDelete = function (args) {\n        if (!this.batchRecords.length) {\n            this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n            this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n        }\n        var focusModule = getValue('focusModule', this.parent.grid);\n        this.matrix = focusModule.getContent().matrix.matrix;\n        var row = [];\n        var records = [];\n        var primarykey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        var data;\n        var childs;\n        var uid;\n        var rowElement = Array.isArray(args.row) ? args.row[0] : args.row;\n        if (!isNullOrUndefined(rowElement) && this.parent.getSelectedRows().indexOf(rowElement) === -1) {\n            data = args.rowData;\n            childs = findChildrenRecords(data);\n            uid = rowElement.getAttribute('data-uid');\n        }\n        else {\n            data = this.parent.grid.getSelectedRecords()[this.parent.grid.getSelectedRecords().length - 1];\n            childs = findChildrenRecords(data);\n            uid = this.parent.getSelectedRows()[0].getAttribute('data-uid');\n        }\n        var parentRowIndex = parseInt(this.parent.grid.getRowElementByUID(uid).getAttribute('aria-rowindex'), 10) - 1;\n        if (childs.length) {\n            var totalCount = parentRowIndex + childs.length;\n            var firstChildIndex = parentRowIndex + 1;\n            for (var i = firstChildIndex; i <= totalCount; i++) {\n                row.push(this.parent.grid.getDataRows()[parseInt(i.toString(), 10)]);\n                if (this.parent.frozenRows || this.parent.frozenColumns || this.parent.getFrozenColumns()) {\n                    row.push(this.parent.grid.getHeaderContent()[parseInt(i.toString(), 10)]);\n                }\n            }\n        }\n        if (!isNullOrUndefined(data.parentItem)) {\n            var parentItem = getParentData(this.parent, data.parentItem.uniqueID);\n            if (!isNullOrUndefined(parentItem) && parentItem.hasChildRecords) {\n                var childIndex = parentItem.childRecords.indexOf(data);\n                parentItem.childRecords.splice(childIndex, 1);\n            }\n            this.batchDeletedRecords = extendArray(this.batchDeletedRecords);\n            this.batchDeletedRecords.push(data);\n        }\n        childs.push(data);\n        records = childs;\n        for (var i = 0; i < records.length; i++) {\n            var indexvalue = this.batchRecords.map(function (e) { return e[\"\" + primarykey]; }).indexOf(records[parseInt(i.toString(), 10)][\"\" + primarykey]);\n            if (indexvalue !== -1) {\n                this.batchRecords.splice(indexvalue, 1);\n            }\n        }\n        for (var i = 0; i < row.length; i++) {\n            if (!isNullOrUndefined(row[parseInt(i.toString(), 10)])) {\n                this.parent.grid.selectionModule.selectedRecords.push(row[parseInt(i.toString(), 10)]);\n            }\n        }\n    };\n    BatchEdit.prototype.updateRowIndex = function () {\n        var rows = this.parent.grid.getDataRows();\n        for (var i = 0; i < rows.length; i++) {\n            rows[parseInt(i.toString(), 10)].setAttribute('aria-rowindex', (i + 1).toString());\n        }\n    };\n    BatchEdit.prototype.updateChildCount = function (records) {\n        var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        var addedRecords = 'addedRecords';\n        var parentItem = this.parent.editSettings.newRowPosition === 'Child' ? 'primaryParent' : 'parentItem';\n        for (var i = 0; i < this.parent.getBatchChanges()[\"\" + addedRecords].length; i++) {\n            if (!isNullOrUndefined(this.parent.getBatchChanges()[\"\" + addedRecords][parseInt(i.toString(), 10)][\"\" + parentItem])) {\n                if (this.parent.getBatchChanges()[\"\" + addedRecords][parseInt(i.toString(), 10)][\"\" + parentItem][\"\" + primaryKey] === records[parseInt(this.addRowIndex.toString(), 10)][\"\" + primaryKey]) {\n                    this.batchChildCount = this.batchChildCount + 1;\n                }\n            }\n        }\n    };\n    BatchEdit.prototype.beforeBatchSave = function (e) {\n        var changeRecords = 'changedRecords';\n        var deleterecords = 'deletedRecords';\n        var changedRecords = e.batchChanges[\"\" + changeRecords];\n        if (e.batchChanges[\"\" + changeRecords].length) {\n            var columnName = void 0;\n            for (var i = 0; i < changedRecords.length; i++) {\n                editAction({ value: changedRecords[parseInt(i.toString(), 10)], action: 'edit' }, this.parent, this.isSelfReference, this.addRowIndex, this.selectedIndex, columnName);\n            }\n        }\n        if (e.batchChanges[\"\" + deleterecords].length) {\n            var deletedRecords = e.batchChanges[\"\" + deleterecords];\n            var record = deletedRecords;\n            for (var i = 0; i < record.length; i++) {\n                this.deleteUniqueID(record[parseInt(i.toString(), 10)].uniqueID);\n                var childs = findChildrenRecords(record[parseInt(i.toString(), 10)]);\n                for (var c = 0; c < childs.length; c++) {\n                    this.deleteUniqueID(childs[parseInt(c.toString(), 10)].uniqueID);\n                }\n                e.batchChanges[\"\" + deleterecords] = e.batchChanges[\"\" + deleterecords].concat(childs);\n            }\n        }\n        this.isAdd = false;\n    };\n    BatchEdit.prototype.deleteUniqueID = function (value) {\n        var idFilter = 'uniqueIDFilterCollection';\n        delete this.parent[\"\" + idFilter][\"\" + value];\n        var id = 'uniqueIDCollection';\n        delete this.parent[\"\" + id][\"\" + value];\n    };\n    BatchEdit.prototype.batchCancelAction = function () {\n        var targetElement = 'targetElement';\n        var index;\n        var parentItem = 'parentItem';\n        var indexvalue = 'index';\n        var currentViewRecords = this.parent.grid.getCurrentViewRecords();\n        var childRecords = 'childRecords';\n        var data = (this.parent.grid.dataSource instanceof DataManager ?\n            this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n        var primaryKey = this.parent.grid.getPrimaryKeyFieldNames()[0];\n        if (!isNullOrUndefined(this.batchAddedRecords)) {\n            for (var i = 0; i < this.batchAddedRecords.length; i++) {\n                index = data.map(function (e) { return e[\"\" + primaryKey]; }).indexOf(this.batchAddedRecords[parseInt(i.toString(), 10)][\"\" + primaryKey]);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n                if (this.parent.editSettings.newRowPosition === 'Child') {\n                    index = currentViewRecords.map(function (e) { return e[\"\" + primaryKey]; })\n                        .indexOf(this.batchAddedRecords[parseInt(i.toString(), 10)][\"\" + parentItem] ? this.batchAddedRecords[parseInt(i.toString(), 10)][\"\" + parentItem][\"\" + primaryKey]\n                        : this.batchAddedRecords[parseInt(i.toString(), 10)][\"\" + primaryKey]);\n                    if (!isNullOrUndefined(currentViewRecords[parseInt(index.toString(), 10)])) {\n                        var children = currentViewRecords[parseInt(index.toString(), 10)][\"\" + childRecords];\n                        for (var j = 0; children && j < children.length; j++) {\n                            if (children[parseInt(j.toString(), 10)][\"\" + primaryKey] === this.batchAddedRecords[parseInt(i.toString(), 10)][\"\" + primaryKey]) {\n                                currentViewRecords[parseInt(index.toString(), 10)][\"\" + childRecords].splice(j, 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (!isNullOrUndefined(this.parent[\"\" + targetElement])) {\n            var row = this.parent[\"\" + targetElement].closest('tr');\n            this.parent.collapseRow(row);\n            this.parent[\"\" + targetElement] = null;\n        }\n        if (!isNullOrUndefined(this.batchDeletedRecords)) {\n            for (var i = 0; i < this.batchDeletedRecords.length; i++) {\n                if (!isNullOrUndefined(this.batchDeletedRecords[parseInt(i.toString(), 10)][\"\" + parentItem])) {\n                    index = currentViewRecords.map(function (e) { return e[\"\" + primaryKey]; })\n                        .indexOf(this.batchDeletedRecords[parseInt(i.toString(), 10)][\"\" + parentItem][\"\" + primaryKey]);\n                    var positionIndex = this.batchDeletedRecords[parseInt(i.toString(), 10)][\"\" + indexvalue] === 0 ? this.batchDeletedRecords[parseInt(i.toString(), 10)][\"\" + indexvalue] :\n                        this.batchDeletedRecords[parseInt(i.toString(), 10)][\"\" + indexvalue] - 1;\n                    if (!isNullOrUndefined(currentViewRecords[parseInt(index.toString(), 10)])) {\n                        currentViewRecords[parseInt(index.toString(), 10)][\"\" + childRecords].splice(positionIndex, 0, this.batchDeletedRecords[parseInt(i.toString(), 10)]);\n                    }\n                }\n            }\n        }\n        this.batchAddedRecords = this.batchRecords = this.batchAddRowRecord = this.currentViewRecords = [];\n        this.batchRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n        this.batchIndex = 0;\n        this.currentViewRecords = extendArray(this.parent.grid.getCurrentViewRecords());\n        this.batchDeletedRecords = [];\n        this.parent.grid.renderModule.refresh();\n    };\n    BatchEdit.prototype.batchSave = function (args) {\n        if (this.parent.editSettings.mode === 'Batch') {\n            var i = void 0;\n            var batchChanges = Object.hasOwnProperty.call(args, 'updatedRecords') ? args.updatedRecords : this.parent.getBatchChanges();\n            var deletedRecords = 'deletedRecords';\n            var addedRecords = 'addedRecords';\n            var index = 'index';\n            var uniqueID = 'uniqueID';\n            var data = (this.parent.grid.dataSource instanceof DataManager ?\n                this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n            var currentViewRecords = this.parent.grid.getCurrentViewRecords();\n            var primarykey_1 = this.parent.grid.getPrimaryKeyFieldNames()[0];\n            var level = 'level';\n            var addRecords = batchChanges[\"\" + addedRecords];\n            var parentItem = 'parentItem';\n            var selectedIndex = void 0;\n            var addRowIndex = void 0;\n            var columnName = void 0;\n            var addRowRecord = void 0;\n            var childRecords = 'childRecords';\n            if (addRecords.length > 1 && this.parent.editSettings.newRowPosition !== 'Bottom') {\n                addRecords.reverse();\n            }\n            if (this.parent.editSettings.newRowPosition !== 'Bottom' && !Object.hasOwnProperty.call(args, 'updatedRecords')) {\n                data.splice(data.length - addRecords.length, addRecords.length);\n                if (this.parent.editModule['isAddedRowByMethod'] && addRecords.length && !isNullOrUndefined(this.parent.editModule['addRowIndex']) && !this.parent.editModule['isAddedRowByContextMenu']) {\n                    addRecords.reverse();\n                    for (var i_1 = 0; i_1 < addRecords.length; i_1++) {\n                        var index_1 = parseInt(this.parent.getContentTable().getElementsByClassName('e-insertedrow')[parseInt(i_1.toString(), 10)].getAttribute('aria-rowindex'), 10) - 1;\n                        data.splice(index_1, 0, addRecords[parseInt(i_1.toString(), 10)]);\n                    }\n                }\n                if (!this.parent.allowPaging && data.length !== currentViewRecords.length) {\n                    if (currentViewRecords.length > addRecords.length) {\n                        currentViewRecords.splice(currentViewRecords.length - addRecords.length, addRecords.length);\n                    }\n                }\n                else {\n                    var totalRecords = extendArray(data);\n                    if (totalRecords.length) {\n                        var startIndex = totalRecords.map(function (e) { return e[\"\" + primarykey_1]; })\n                            .indexOf(currentViewRecords[0][\"\" + primarykey_1]);\n                        var endIndex = startIndex + this.parent.grid.pageSettings.pageSize;\n                        currentViewRecords = totalRecords.splice(startIndex, endIndex);\n                    }\n                }\n            }\n            if (this.batchAddRowRecord.length === 0) {\n                this.batchAddRowRecord.push(this.parent.flatData[args.index]);\n            }\n            if (this.parent.editModule['isAddedRowByContextMenu']) {\n                addRecords.reverse();\n            }\n            for (i = 0; i < addRecords.length; i++) {\n                var taskData = extend({}, addRecords[parseInt(i.toString(), 10)]);\n                delete taskData.parentItem;\n                delete taskData.uniqueID;\n                delete taskData.index;\n                delete taskData.level;\n                delete taskData.hasChildRecords;\n                delete taskData.childRecords;\n                delete taskData.parentUniqueID;\n                if (!isNullOrUndefined(taskData.primaryParent)) {\n                    delete taskData.primaryParent;\n                }\n                if (addRecords.length > 1 && this.parent.editModule['isAddedRowByContextMenu']) {\n                    var rowPosition = this.parent.editSettings.newRowPosition;\n                    this.parent.editSettings.newRowPosition = this.parent.editModule['previousNewRowPosition'];\n                    this.parent.editModule['previousNewRowPosition'] = rowPosition;\n                }\n                addRecords[parseInt(i.toString(), 10)].taskData = taskData;\n                addRowRecord = this.batchAddRowRecord[parseInt(i.toString(), 10)];\n                if (isNullOrUndefined(addRowRecord)) {\n                    addRowRecord = this.batchAddRowRecord[i - 1];\n                }\n                if (this.isSelfReference) {\n                    if (!isNullOrUndefined(addRecords[parseInt(i.toString(), 10)].parentItem)) {\n                        updateParentRow(primarykey_1, addRecords[parseInt(i.toString(), 10)].parentItem, 'add', this.parent, this.isSelfReference, addRecords[parseInt(i.toString(), 10)]);\n                    }\n                }\n                if (!isNullOrUndefined(addRowRecord)) {\n                    addRowIndex = addRowRecord.index;\n                }\n                if (isNullOrUndefined(addRecords[parseInt(i.toString(), 10)].index)) {\n                    addRowIndex = 0;\n                }\n                if (this.parent.editSettings.newRowPosition !== 'Top' && this.parent.editSettings.newRowPosition !== 'Bottom') {\n                    if (isNullOrUndefined(addRecords[parseInt(i.toString(), 10)].parentItem) && this.selectedIndex === -1) {\n                        selectedIndex = -1;\n                        addRowRecord = null;\n                    }\n                }\n                editAction({ value: addRecords[parseInt(i.toString(), 10)], action: 'add' }, this.parent, this.isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord);\n                selectedIndex = null;\n                if (this.parent.editSettings.newRowPosition === 'Child' && !isNullOrUndefined(addRecords[parseInt(i.toString(), 10)][\"\" + parentItem]) &&\n                    (isNullOrUndefined(this.parent.editModule['addRowIndex']) || this.isSelfReference)) {\n                    var indexValue = currentViewRecords.map(function (e) { return e[\"\" + primarykey_1]; })\n                        .indexOf(addRecords[parseInt(i.toString(), 10)][\"\" + parentItem][\"\" + primarykey_1]);\n                    var children = currentViewRecords[parseInt(indexValue.toString(), 10)][\"\" + childRecords];\n                    for (var j = 0; j < children.length; j++) {\n                        if (children[parseInt(j.toString(), 10)][\"\" + primarykey_1] === addRecords[parseInt(i.toString(), 10)][\"\" + primarykey_1]) {\n                            currentViewRecords[parseInt(indexValue.toString(), 10)][\"\" + childRecords].splice(j, 1);\n                        }\n                    }\n                }\n            }\n            if (batchChanges[\"\" + deletedRecords].length) {\n                for (i = 0; i < batchChanges[\"\" + deletedRecords].length; i++) {\n                    editAction({ value: batchChanges[\"\" + deletedRecords][parseInt(i.toString(), 10)], action: 'delete' }, this.parent, this.isSelfReference, addRowIndex, selectedIndex, columnName, addRowRecord);\n                }\n            }\n            this.parent.parentData = [];\n            for (var i_2 = 0; i_2 < data.length; i_2++) {\n                data[parseInt(i_2.toString(), 10)][\"\" + index] = i_2;\n                setValue('uniqueIDCollection.' + data[parseInt(i_2.toString(), 10)][\"\" + uniqueID] + '.index', i_2, this.parent);\n                if (!data[parseInt(i_2.toString(), 10)][\"\" + level]) {\n                    this.parent.parentData.push(data[parseInt(i_2.toString(), 10)]);\n                }\n            }\n        }\n        this.batchAddRowRecord = this.batchAddedRecords = this.batchRecords = this.batchDeletedRecords = this.currentViewRecords = [];\n        if (this.parent.editModule['isAddedRowByContextMenu']) {\n            this.parent.editModule['isAddedRowByContextMenu'] = false;\n        }\n    };\n    BatchEdit.prototype.getActualRowObjectIndex = function (index) {\n        var rows = this.parent.grid.getDataRows();\n        if ((this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child')\n            && this.selectedIndex > -1) {\n            if (!isNullOrUndefined(this.batchRecords[this.addRowIndex]) && this.batchRecords[this.addRowIndex].expanded) {\n                if (this.parent.getBatchChanges()[this.addedRecords].length > 1\n                    || this.parent.getBatchChanges()[this.deletedRecords].length) {\n                    index += findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                    if (this.parent.editSettings.newRowPosition !== 'Child') {\n                        var batchChildCount = this.getBatchChildCount();\n                        index = index + batchChildCount;\n                    }\n                }\n                else {\n                    index += findChildrenRecords(this.batchRecords[this.addRowIndex]).length;\n                }\n            }\n            if (index >= rows.length) {\n                index = rows.length - 1;\n            }\n            this.updateChildCount(this.parent.grid.getCurrentViewRecords());\n            if (this.batchChildCount) {\n                index += this.batchChildCount;\n            }\n            this.batchChildCount = 0;\n        }\n        return index;\n    };\n    BatchEdit.prototype.immutableBatchAction = function (e) {\n        e.args.cancel = true;\n        var changes = this.parent.grid.getBatchChanges();\n        var addedRecords = [];\n        var index = 'index';\n        if (Object.keys(changes).length) {\n            addedRecords = changes.addedRecords;\n        }\n        for (var i = 0; i < addedRecords.length; i++) {\n            e.rows.splice(addedRecords[parseInt(i.toString(), 10)][\"\" + index], 1);\n        }\n    };\n    BatchEdit.prototype.nextCellIndex = function (args) {\n        var index = 'index';\n        var rowIndex = 'rowIndex';\n        if (this.parent.getSelectedRows().length) {\n            args[\"\" + index] = this.parent.getSelectedRows()[0][\"\" + rowIndex];\n        }\n        else {\n            args[\"\" + index] = this.batchIndex;\n        }\n    };\n    return BatchEdit;\n}());\nexport { BatchEdit };\n","import { Grid, Edit as GridEdit, getUid, getObject, resetRowIndex } from '@syncfusion/ej2-grids';\nimport { parentsUntil } from '@syncfusion/ej2-grids';\nimport * as events from '../base/constant';\nimport { isNullOrUndefined, extend, setValue, removeClass, addClass, getValue } from '@syncfusion/ej2-base';\nimport { DataManager, RemoteSaveAdaptor } from '@syncfusion/ej2-data';\nimport { findChildrenRecords, getParentData, isCountRequired, isRemoteData } from '../utils';\nimport { editAction, updateParentRow } from './crud-actions';\nimport { BatchEdit } from './batch-edit';\n/**\n * TreeGrid Edit Module\n * The `Edit` module is used to handle editing actions.\n */\nvar Edit = /** @class */ (function () {\n    /**\n     * Constructor for Edit module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Edit(parent) {\n        this.addedRecords = 'addedRecords';\n        this.deletedRecords = 'deletedRecords';\n        this.prevAriaRowIndex = '-1';\n        this.isAddedRowByMethod = false;\n        this.isAddedRowByContextMenu = false;\n        Grid.Inject(GridEdit);\n        this.parent = parent;\n        this.isSelfReference = !isNullOrUndefined(parent.parentIdMapping);\n        this.previousNewRowPosition = null;\n        this.internalProperties = {};\n        this.batchEditModule = new BatchEdit(this.parent);\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Edit module name\n     */\n    Edit.prototype.getModuleName = function () {\n        return 'edit';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Edit.prototype.addEventListener = function () {\n        this.parent.on(events.crudAction, this.crudAction, this);\n        this.parent.on(events.beginEdit, this.beginEdit, this);\n        this.parent.on(events.beginAdd, this.beginAdd, this);\n        this.parent.on(events.recordDoubleClick, this.recordDoubleClick, this);\n        this.parent.on(events.cellSave, this.cellSave, this);\n        this.parent.on(events.batchCancel, this.batchCancel, this);\n        this.parent.grid.on(events.keyPressed, this.keyPressed, this);\n        this.parent.grid.on('batchedit-form', this.lastCellTab, this);\n        this.parent.grid.on('content-ready', this.contentready, this);\n        this.parent.on(events.cellEdit, this.cellEdit, this);\n        this.parent.on('actionBegin', this.editActionEvents, this);\n        this.parent.on('actionComplete', this.editActionEvents, this);\n        this.parent.grid.on(events.doubleTap, this.recordDoubleClick, this);\n        this.parent.grid.on('dblclick', this.gridDblClick, this);\n        this.parent.grid.on('recordAdded', this.customCellSave, this);\n        this.parent.on('savePreviousRowPosition', this.savePreviousRowPosition, this);\n        // this.parent.on(events.beforeDataBound, this.beforeDataBound, this);\n        this.parent.grid.on(events.beforeStartEdit, this.beforeStartEdit, this);\n        this.parent.grid.on(events.beforeBatchCancel, this.beforeBatchCancel, this);\n        this.parent.grid.on('reset-edit-props', this.resetIsOnBatch, this);\n        this.parent.grid.on('get-row-position', this.getRowPosition, this);\n    };\n    Edit.prototype.gridDblClick = function (e) {\n        this.doubleClickTarget = e.target;\n        if (e.target.classList.contains('e-frame') && this.parent.getCurrentViewRecords().length === 0) {\n            this.doubleClickTarget = null;\n        }\n        if (e.target.classList.contains('e-treegridcollapse') || e.target.classList.contains('e-treegridexpand')) {\n            var tr = parentsUntil(e.target, 'e-row');\n            var rowIndex = tr && parseInt(tr.getAttribute('aria-rowindex'), 10) - 1;\n            if (!isNullOrUndefined(rowIndex) && rowIndex >= 0 && this.parent.allowPaging) {\n                /* eslint-disable-next-line */\n                this.parent.grid.getDataRows()[rowIndex].dataset.uid = this.parent.grid.contentModule.getRows()[rowIndex].uid;\n            }\n        }\n    };\n    Edit.prototype.getRowPosition = function (addArgs) {\n        addArgs.newRowPosition = this.parent.editSettings.newRowPosition;\n        addArgs.addRowIndex = this.addRowIndex;\n        addArgs.dataRowIndex = +this.prevAriaRowIndex;\n    };\n    Edit.prototype.beforeStartEdit = function (args) {\n        if (this.parent.editSettings.mode === 'Cell') {\n            this.parent.trigger(events.actionBegin, args);\n        }\n    };\n    Edit.prototype.beforeBatchCancel = function (args) {\n        if (this.parent.editSettings.mode === 'Cell') {\n            args['requestType'] = 'cancel';\n            this.parent.trigger(events.actionComplete, args);\n        }\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Edit.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.crudAction, this.crudAction);\n        this.parent.off(events.beginEdit, this.beginEdit);\n        this.parent.off(events.beginAdd, this.beginAdd);\n        this.parent.off(events.recordDoubleClick, this.recordDoubleClick);\n        this.parent.off(events.batchCancel, this.batchCancel);\n        this.parent.grid.off(events.keyPressed, this.keyPressed);\n        this.parent.grid.off('batchedit-form', this.lastCellTab);\n        this.parent.grid.off('content-ready', this.contentready);\n        this.parent.off(events.cellEdit, this.cellEdit);\n        this.parent.off('actionBegin', this.editActionEvents);\n        this.parent.off('actionComplete', this.editActionEvents);\n        this.parent.grid.off('recordAdded', this.customCellSave);\n        this.parent.grid.off(events.doubleTap, this.recordDoubleClick);\n        this.parent.off('savePreviousRowPosition', this.savePreviousRowPosition);\n        this.parent.grid.off(events.beforeStartEdit, this.beforeStartEdit);\n        this.parent.grid.off(events.beforeBatchCancel, this.beforeBatchCancel);\n        this.parent.grid.off('dblclick', this.gridDblClick);\n        this.parent.grid.off('reset-edit-props', this.resetIsOnBatch);\n        this.parent.grid.off('get-row-position', this.getRowPosition);\n        //this.parent.grid.off('click', this.gridSingleClick);\n    };\n    /**\n     * To destroy the editModule\n     *\n     * @returns {void}\n     * @hidden\n     */\n    Edit.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * @param {Column[]} cols - Column property Collection\n     * @hidden\n     * @returns {void}\n     */\n    Edit.prototype.applyFormValidation = function (cols) {\n        this.parent.grid.editModule.applyFormValidation(cols);\n    };\n    Edit.prototype.editActionEvents = function (args) {\n        var eventArgs = getObject('editAction', args);\n        var eventName = getObject('name', eventArgs);\n        var treeObj = this.parent;\n        var adaptor = !isNullOrUndefined(treeObj.dataSource)\n            && treeObj.dataSource.adaptor;\n        if (!isNullOrUndefined(adaptor) && (isRemoteData(treeObj) || adaptor instanceof RemoteSaveAdaptor) &&\n            (eventArgs.requestType === 'save' && eventArgs.action === 'add') &&\n            (treeObj.editSettings.newRowPosition === 'Child' || treeObj.editSettings.newRowPosition === 'Below'\n                || treeObj.editSettings.newRowPosition === 'Above')) {\n            if (eventName === 'actionBegin') {\n                var rowIndex = isNullOrUndefined(eventArgs.row) || !Object.keys(eventArgs.row).length ? this.selectedIndex :\n                    eventArgs.row.rowIndex - 1;\n                var keyData = (!isNullOrUndefined(rowIndex) && rowIndex !== -1) ?\n                    treeObj.getCurrentViewRecords()[parseInt(rowIndex.toString(), 10)][treeObj.getPrimaryKeyFieldNames()[0]] : -1;\n                treeObj.grid.query.addParams('relationalKey', keyData);\n            }\n            else if (eventName === 'actionComplete') {\n                var paramsLength = treeObj.grid.query.params.length;\n                for (var i = 0; i < paramsLength; i++) {\n                    if (treeObj.grid.query.params[parseInt(i.toString(), 10)].key === 'relationalKey') {\n                        treeObj.grid.query.params.splice(i);\n                    }\n                }\n            }\n        }\n        if (this.parent.enableInfiniteScrolling && eventName === 'actionComplete') {\n            this.infiniteAddAction(eventArgs);\n        }\n        if (this.parent.editSettings.mode === 'Batch' && eventArgs.requestType === 'paging') {\n            this.parent.notify('batchPageAction', {});\n        }\n    };\n    Edit.prototype.infiniteAddAction = function (args) {\n        if ((args.requestType === 'save' && args.action === 'add') || args.requestType === 'delete') {\n            if (this.parent.editSettings.newRowPosition !== 'Top' && this.selectedIndex !== -1\n                && (args.requestType === 'save' && args.action === 'add')) {\n                var rowObjects = this.parent.grid.getRowsObject();\n                var newRowObject = rowObjects.splice(0, 1)[0];\n                var newRowObjectIndex = this.addRowIndex;\n                var currentData = this.parent.getCurrentViewRecords();\n                if (this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child') {\n                    newRowObjectIndex += findChildrenRecords(currentData[newRowObjectIndex + 1]).length;\n                }\n                newRowObjectIndex = this.parent.editSettings.newRowPosition === 'Below' ? newRowObjectIndex + 1 : newRowObjectIndex;\n                rowObjects.splice(newRowObjectIndex, 0, newRowObject);\n                var newRecord = currentData.splice(0, 1)[0];\n                currentData.splice(newRowObjectIndex, 0, newRecord);\n                this.updateInfiniteCurrentViewData(newRecord, this.addRowIndex);\n            }\n            var movableRows = this.parent.grid.getRows();\n            var movableRowsObject = this.parent.grid.getRowsObject();\n            var isCache = this.parent.infiniteScrollSettings.enableCache;\n            if (!isCache) {\n                resetRowIndex(this.parent.grid, this.parent.grid.getRowsObject(), this.parent.grid.getRows(), 0);\n                this.updateIndex(this.parent.grid.dataSource, this.parent.getRows(), this.parent.getCurrentViewRecords());\n            }\n            if (!isCache && this.parent.getFrozenColumns() > 0) {\n                resetRowIndex(this.parent.grid, movableRowsObject, movableRows, 0);\n                this.updateIndex(this.parent.grid.dataSource, movableRows, this.parent.getCurrentViewRecords());\n            }\n        }\n    };\n    Edit.prototype.updateInfiniteCurrentViewData = function (newRecord, newRowIndex) {\n        var _this = this;\n        var infiniteData = 'infiniteCurrentViewData';\n        var updateCurrentViewData = 'updateCurrentViewData';\n        var size = Math.ceil(newRowIndex / this.parent.grid.pageSettings.pageSize);\n        var page = size > 0 ? size : 1;\n        var dataIndex = newRowIndex - ((page - 1) * this.parent.pageSettings.pageSize);\n        var infiniteCurrentViewData = this.parent.grid.infiniteScrollModule[\"\" + infiniteData];\n        infiniteCurrentViewData[1].splice(0, 1);\n        var data = infiniteCurrentViewData[parseInt(page.toString(), 10)];\n        if (!isNullOrUndefined(this.addRowRecord)) {\n            data.filter(function (e, index) {\n                if (e.uniqueID === _this.addRowRecord.uniqueID) {\n                    dataIndex = index;\n                }\n            });\n            if (this.addRowRecord.hasChildRecords && this.addRowRecord.childRecords.length &&\n                this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child') {\n                dataIndex += findChildrenRecords(this.addRowRecord).length;\n            }\n        }\n        if (dataIndex >= this.parent.pageSettings.pageSize) {\n            page += 1;\n            data = infiniteCurrentViewData[parseInt(page.toString(), 10)];\n            dataIndex = dataIndex - this.parent.pageSettings.pageSize >= 0 ? dataIndex - this.parent.pageSettings.pageSize : 0;\n        }\n        dataIndex = this.parent.editSettings.newRowPosition === 'Below' ? dataIndex + 1 : dataIndex;\n        data.splice(dataIndex, 0, newRecord);\n        this.parent.grid.infiniteScrollModule[\"\" + updateCurrentViewData]();\n    };\n    Edit.prototype.recordDoubleClick = function (args) {\n        var target = args.target;\n        if (isNullOrUndefined(target.closest('td.e-rowcell'))) {\n            return;\n        }\n        if (!(this.parent.grid.editSettings.allowEditing) || this.parent.grid.isEdit) {\n            return;\n        }\n        var column = this.parent.grid.getColumnByIndex(+target.closest('td.e-rowcell').getAttribute('aria-colindex') - 1);\n        if (this.parent.editSettings.mode === 'Cell' && !this.isOnBatch && column && !column.isPrimaryKey &&\n            this.parent.editSettings.allowEditing && column.allowEditing && !(target.classList.contains('e-treegridexpand') ||\n            target.classList.contains('e-treegridcollapse')) && this.parent.editSettings.allowEditOnDblClick) {\n            this.isOnBatch = true;\n            this.parent.grid.setProperties({ selectedRowIndex: args.rowIndex }, true);\n            if (this.parent.enableVirtualization) {\n                var tr = parentsUntil(args.target, 'e-row');\n                this.prevAriaRowIndex = tr.getAttribute('aria-rowindex');\n                tr.setAttribute('aria-rowindex', (tr.rowIndex + 1) + '');\n            }\n            this.updateGridEditMode('Batch');\n        }\n        else if (this.parent.editSettings.mode === 'Cell' && (!column.allowEditing || column.isPrimaryKey)) {\n            this.isOnBatch = true;\n            this.updateGridEditMode('Batch');\n        }\n    };\n    Edit.prototype.updateGridEditMode = function (mode) {\n        this.parent.grid.setProperties({ editSettings: { mode: mode } }, true);\n        var updateMethod = getObject('updateEditObj', this.parent.grid.editModule);\n        updateMethod.apply(this.parent.grid.editModule);\n        this.parent.grid.isEdit = false;\n    };\n    Edit.prototype.resetIsOnBatch = function () {\n        if (this.parent.enableVirtualization && this.parent.editSettings.mode === 'Cell') {\n            this.isOnBatch = false;\n            this.updateGridEditMode('Normal');\n        }\n    };\n    Edit.prototype.keyPressed = function (args) {\n        if (this.isOnBatch) {\n            this.keyPress = args.action;\n        }\n        if (args.action === 'f2') {\n            this.recordDoubleClick(args);\n        }\n        if (args.action === 'escape') {\n            this.closeEdit();\n        }\n    };\n    Edit.prototype.deleteUniqueID = function (value) {\n        var idFilter = 'uniqueIDFilterCollection';\n        delete this.parent[\"\" + idFilter][\"\" + value];\n        var id = 'uniqueIDCollection';\n        delete this.parent[\"\" + id][\"\" + value];\n    };\n    Edit.prototype.cellEdit = function (args) {\n        var _this = this;\n        var promise = 'promise';\n        var prom = args[\"\" + promise];\n        delete args[\"\" + promise];\n        if (this.parent.enableVirtualization && !isNullOrUndefined(this.prevAriaRowIndex) && this.prevAriaRowIndex !== '-1') {\n            args.row.setAttribute('aria-rowindex', this.prevAriaRowIndex);\n            this.prevAriaRowIndex = undefined;\n        }\n        if (this.keyPress !== 'enter') {\n            this.parent.trigger(events.cellEdit, args, function (celleditArgs) {\n                if (!celleditArgs.cancel && _this.parent.editSettings.mode === 'Cell') {\n                    _this.enableToolbarItems('edit');\n                }\n                else if (celleditArgs.cancel && _this.parent.editSettings.mode === 'Cell') {\n                    _this.isOnBatch = false;\n                    _this.updateGridEditMode('Normal');\n                }\n                if (!isNullOrUndefined(prom)) {\n                    prom.resolve(celleditArgs);\n                }\n            });\n        }\n        if (this.doubleClickTarget && (this.doubleClickTarget.classList.contains('e-treegridexpand') ||\n            this.doubleClickTarget.classList.contains('e-treegridcollapse') || this.doubleClickTarget.classList.contains('e-summarycell'))) {\n            args.cancel = true;\n            this.doubleClickTarget = null;\n            return;\n        }\n        if (this.parent.editSettings.mode === 'Cell') {\n            if (this.keyPress === 'tab' || this.keyPress === 'shiftTab') {\n                this.keyPress = null;\n            }\n            else if (this.keyPress === 'enter') {\n                args.cancel = true;\n                this.keyPress = null;\n                setValue('isEditCollapse', false, this.parent);\n            }\n            if (!args.columnObject.allowEditing) {\n                args.cancel = true;\n            }\n        }\n        if (this.parent.enableVirtualization) {\n            this.parent.grid.contentModule['editedRowIndex'] = this.parent.grid.editModule.editModule['index'];\n        }\n        // if (this.isAdd && this.parent.editSettings.mode === 'Batch' && !args.cell.parentElement.classList.contains('e-insertedrow')) {\n        //   this.isAdd = false;\n        // }\n    };\n    Edit.prototype.enableToolbarItems = function (request) {\n        if (!isNullOrUndefined(this.parent.grid.toolbarModule)) {\n            var toolbarID = this.parent.element.id + '_gridcontrol_';\n            this.parent.grid.toolbarModule.enableItems([toolbarID + 'add', toolbarID + 'edit', toolbarID + 'delete'], request === 'save');\n            this.parent.grid.toolbarModule.enableItems([toolbarID + 'update', toolbarID + 'cancel'], request === 'edit');\n        }\n    };\n    Edit.prototype.batchCancel = function () {\n        if (this.parent.editSettings.mode === 'Cell') {\n            var cellDetails = getValue('editModule.cellDetails', this.parent.grid.editModule);\n            if (!isNullOrUndefined(this.editedRowIndex)) {\n                cellDetails.rowIndex = this.editedRowIndex;\n            }\n            var treeCell = this.parent.getCellFromIndex(cellDetails.rowIndex, this.parent.treeColumnIndex);\n            this.parent.renderModule.cellRender({\n                data: cellDetails.rowData,\n                cell: treeCell,\n                column: this.parent.grid.getColumns()[this.parent.treeColumnIndex]\n            });\n            this.updateGridEditMode('Normal');\n            this.isOnBatch = false;\n        }\n        if (this.parent.editSettings.mode === 'Batch') {\n            this.parent.notify('batchCancelAction', {});\n        }\n    };\n    Edit.prototype.customCellSave = function (args) {\n        if (isCountRequired(this.parent) && this.parent.editSettings.mode === 'Cell' && args.action === 'edit') {\n            this.updateCell(args, args.rowIndex);\n            this.afterCellSave(args, args.row);\n        }\n    };\n    Edit.prototype.cellSave = function (args) {\n        var _this = this;\n        if (this.parent.editSettings.mode === 'Cell' && this.parent.element.querySelector('form')) {\n            args.cancel = true;\n            var editModule = 'editModule';\n            setValue('isEditCollapse', true, this.parent);\n            args.rowData[args.columnName] = args.value;\n            var row_1;\n            if (isNullOrUndefined(args.cell)) {\n                row_1 = this.parent.grid.editModule[\"\" + editModule].form.parentElement.parentNode;\n            }\n            else {\n                row_1 = args.cell.parentNode;\n            }\n            var rowIndex_1;\n            var primaryKeys_1 = this.parent.getPrimaryKeyFieldNames();\n            if (isNullOrUndefined(row_1)) {\n                this.parent.grid.getCurrentViewRecords().filter(function (e, i) {\n                    if (e[primaryKeys_1[0]] === args.rowData[primaryKeys_1[0]]) {\n                        rowIndex_1 = i;\n                        return;\n                    }\n                });\n            }\n            else {\n                var freeze = (this.parent.getFrozenLeftColumnsCount() > 0 ||\n                    this.parent.getFrozenRightColumnsCount() > 0) ? true : false;\n                if (freeze) {\n                    if (this.parent.getRows().indexOf(row_1) !== -1) {\n                        rowIndex_1 = this.parent.getRows().indexOf(row_1);\n                    }\n                    else {\n                        rowIndex_1 = this.parent.getRows().indexOf(row_1);\n                    }\n                }\n                else {\n                    rowIndex_1 = (this.parent.getRows().indexOf(row_1) === -1 && (this.parent.getFrozenColumns() > 0)) ?\n                        this.parent.grid.getRows().indexOf(row_1) : this.parent.getRows().indexOf(row_1);\n                }\n            }\n            var arg = {};\n            extend(arg, args);\n            arg.cancel = false;\n            arg.type = 'save';\n            row_1 = this.parent.grid.getRows()[row_1.rowIndex];\n            this.parent.trigger(events.actionBegin, arg);\n            if (!arg.cancel) {\n                if ((row_1.rowIndex === this.parent.getCurrentViewRecords().length - 1) && this.keyPress === 'tab') {\n                    this.isTabLastRow = true;\n                }\n                if (!isRemoteData(this.parent) &&\n                    !(this.parent.dataSource instanceof DataManager && this.parent.dataSource.adaptor instanceof RemoteSaveAdaptor)) {\n                    if (isCountRequired(this.parent)) {\n                        var eventPromise = 'eventPromise';\n                        var editArgs = { requestType: 'save', data: args.rowData, action: 'edit', row: row_1,\n                            rowIndex: rowIndex_1, rowData: args.rowData, columnName: args.columnName,\n                            filterChoiceCount: null, excelSearchOperator: null };\n                        this.parent.grid.getDataModule()[\"\" + eventPromise](editArgs, this.parent.grid.query);\n                    }\n                    else {\n                        this.updateCell(args, rowIndex_1);\n                        setValue('isEdit', false, this.parent.grid);\n                        this.afterCellSave(args, row_1);\n                    }\n                }\n                else if (isRemoteData(this.parent) ||\n                    (this.parent.dataSource instanceof DataManager && this.parent.dataSource.adaptor instanceof RemoteSaveAdaptor)) {\n                    var query = this.parent.grid.query;\n                    if (this.parent['isGantt'] && this.parent.loadChildOnDemand) {\n                        this.updateCell(args, rowIndex_1);\n                        setValue('isEdit', false, this.parent.grid);\n                        this.afterCellSave(args, row_1);\n                    }\n                    else {\n                        var crud = null;\n                        crud = this.parent.grid.dataSource.update(primaryKeys_1[0], args.rowData, query.fromTable, query, args.previousValue);\n                        crud.then(function (e) {\n                            if (!isNullOrUndefined(e)) {\n                                args.rowData[args.columnName] = e[args.columnName];\n                            }\n                            _this.updateCell(args, rowIndex_1);\n                            setValue('isEdit', false, _this.parent.grid);\n                            _this.afterCellSave(args, row_1);\n                        });\n                    }\n                }\n            }\n            else {\n                this.parent.grid.isEdit = true;\n            }\n        }\n        if (this.parent.enableVirtualization) {\n            this.parent.grid.contentModule['virtualData'] = {};\n        }\n    };\n    Edit.prototype.afterCellSave = function (args, row) {\n        if (this.parent.grid.aggregateModule) {\n            this.parent.grid.aggregateModule.refresh(args.rowData);\n        }\n        this.parent.grid.editModule.destroyWidgets([this.parent.grid.getColumnByField(args.columnName)]);\n        this.parent.grid.editModule.formObj.destroy();\n        if (this.keyPress !== 'tab' && this.keyPress !== 'shiftTab') {\n            this.updateGridEditMode('Normal');\n            this.isOnBatch = false;\n        }\n        this.enableToolbarItems('save');\n        removeClass([row], ['e-editedrow', 'e-batchrow']);\n        removeClass(row.querySelectorAll('.e-rowcell'), ['e-editedbatchcell', 'e-updatedtd']);\n        if (this.parent['isCellSaveFocus'] !== false) {\n            this.parent.grid.focusModule.restoreFocus();\n        }\n        editAction({ value: args.rowData, action: 'edit' }, this.parent, this.isSelfReference, this.addRowIndex, this.selectedIndex, args.columnName);\n        if ((row.rowIndex === this.parent.getCurrentViewRecords().length - 1) && this.keyPress === 'enter') {\n            this.keyPress = null;\n        }\n        var saveArgs = {\n            type: 'save', column: this.parent.getColumnByField(args.columnName), data: args.rowData,\n            previousData: args.previousValue, row: row, target: args.cell\n        };\n        if (this.parent.aggregates.map(function (ag) { return ag.showChildSummary === true; }).length) {\n            this.parent.grid.refresh();\n        }\n        this.parent.trigger(events.actionComplete, saveArgs);\n    };\n    Edit.prototype.lastCellTab = function () {\n        if (!this.parent.grid.isEdit && this.isOnBatch && this.keyPress === 'tab' && this.parent.editSettings.mode === 'Cell') {\n            if (!this.parent.editSettings.allowNextRowEdit) {\n                this.updateGridEditMode('Normal');\n                this.isOnBatch = false;\n                this.keyPress = null;\n            }\n            else {\n                this.enableToolbarItems('edit');\n            }\n        }\n    };\n    Edit.prototype.updateCell = function (args, rowIndex) {\n        this.parent.grid.editModule.updateCell(rowIndex, args.columnName, args.rowData[args.columnName]);\n        this.parent.grid.getRowsObject()[parseInt(rowIndex.toString(), 10)].data = args.rowData;\n    };\n    Edit.prototype.crudAction = function (details, columnName) {\n        editAction(details, this.parent, this.isSelfReference, this.addRowIndex, this.selectedIndex, columnName, this.addRowRecord);\n        this.parent.parentData = [];\n        var data = this.parent.grid.dataSource instanceof DataManager ?\n            this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource;\n        for (var i = 0; i < data.length; i++) {\n            data[parseInt(i.toString(), 10)].index = i;\n            var key = this.parent.grid.getPrimaryKeyFieldNames()[0];\n            if (details.value[\"\" + key] === data[parseInt(i.toString(), 10)][\"\" + key]) {\n                if (details.action === 'add') {\n                    data[parseInt(i.toString(), 10)].level = this.internalProperties.level;\n                    data[parseInt(i.toString(), 10)].taskData = this.internalProperties.taskData;\n                    data[parseInt(i.toString(), 10)].uniqueID = this.internalProperties.uniqueID;\n                    if (!isNullOrUndefined(this.internalProperties.parentItem)) {\n                        data[parseInt(i.toString(), 10)].parentItem = this.internalProperties.parentItem;\n                        data[parseInt(i.toString(), 10)].parentUniqueID = this.internalProperties.parentUniqueID;\n                    }\n                    data[parseInt(i.toString(), 10)].childRecords = this.internalProperties.childRecords;\n                }\n            }\n            setValue('uniqueIDCollection.' + data[parseInt(i.toString(), 10)].uniqueID + '.index', i, this.parent);\n            var adaptor = this.parent.dataSource.adaptor;\n            if ((isRemoteData(this.parent) || adaptor instanceof RemoteSaveAdaptor)) {\n                setValue('uniqueIDCollection.' + data[parseInt(i.toString(), 10)].uniqueID, data[parseInt(i.toString(), 10)], this.parent);\n            }\n            if (!data[parseInt(i.toString(), 10)].level) {\n                this.parent.parentData.push(data[parseInt(i.toString(), 10)]);\n            }\n        }\n        if (!this.parent.enableInfiniteScrolling) {\n            if (details.action === 'add' && this.previousNewRowPosition != null) {\n                this.parent.setProperties({ editSettings: { newRowPosition: this.previousNewRowPosition } }, true);\n                this.previousNewRowPosition = null;\n            }\n        }\n    };\n    Edit.prototype.updateIndex = function (data, rows, records) {\n        for (var j = 0; j < this.parent.getDataRows().length; j++) {\n            var data1 = records[parseInt(j.toString(), 10)];\n            if (!isNullOrUndefined(data1)) {\n                var index = getValue('uniqueIDCollection.' + data1.uniqueID + '.index', this.parent);\n                data1.index = index;\n                if (!isNullOrUndefined(data1.parentItem)) {\n                    var parentIndex = getValue('uniqueIDCollection.' + data1.parentItem.uniqueID + '.index', this.parent);\n                    data1.parentItem.index = parentIndex;\n                }\n            }\n        }\n        var count = -1;\n        var treeColIndex = this.parent.treeColumnIndex;\n        if (this.parent.getFrozenColumns() > 0) {\n            var cells = rows[0].querySelectorAll('.e-rowcell');\n            for (var l = 0; l < cells.length; l++) {\n                if (cells[parseInt(l.toString(), 10)].classList.contains('e-gridrowindex0level0')) {\n                    treeColIndex = l;\n                    break;\n                }\n            }\n        }\n        for (var k = 0; k < this.parent.getRows().length; k++) {\n            if (!rows[parseInt(k.toString(), 10)].classList.contains('e-detailrow')) {\n                count++;\n            }\n            var data2 = records[parseInt(count.toString(), 10)];\n            if (!isNullOrUndefined(data2)) {\n                var index = data2.index;\n                var level = data2.level;\n                var row = rows[parseInt(k.toString(), 10)];\n                if (!isNullOrUndefined(data2.parentItem)) {\n                    index = getValue('uniqueIDCollection.' + data2.parentItem.uniqueID + '.index', this.parent);\n                }\n                var treecell = row.cells[parseInt(treeColIndex.toString(), 10)];\n                if (!isNullOrUndefined(treecell)) {\n                    for (var l = 0; l < treecell.classList.length; l++) {\n                        var value = treecell.classList[parseInt(l.toString(), 10)];\n                        var remove = /e-gridrowindex/i;\n                        var removed = /e-griddetailrowindex/i;\n                        var result = value.match(remove);\n                        var results = value.match(removed);\n                        if (result != null) {\n                            removeClass([treecell], value);\n                        }\n                        if (results != null) {\n                            removeClass([treecell], value);\n                        }\n                    }\n                    if (!rows[parseInt(k.toString(), 10)].classList.contains('e-detailrow')) {\n                        addClass([treecell], 'e-gridrowindex' + index + 'level' + level);\n                    }\n                    else {\n                        addClass([treecell], 'e-griddetailrowindex' + index + 'level' + level);\n                    }\n                }\n            }\n        }\n    };\n    Edit.prototype.beginAdd = function () {\n        var position;\n        var index = this.addRowIndex;\n        var records = this.parent.grid.getCurrentViewRecords();\n        if (this.parent.editSettings.mode === 'Batch') {\n            index = this.batchEditModule.getAddRowIndex();\n            this.selectedIndex = this.batchEditModule.getSelectedIndex();\n            if (this.parent.getBatchChanges()[this.addedRecords].length > 1\n                || this.parent.getBatchChanges()[this.deletedRecords].length) {\n                records = this.batchEditModule.getBatchRecords();\n            }\n        }\n        var rows = this.parent.grid.getDataRows();\n        var firstAriaIndex = rows.length ? +rows[0].getAttribute('aria-rowindex') - 1 : 0;\n        var lastAriaIndex = rows.length ? +rows[rows.length - 1].getAttribute('aria-rowindex') - 1 : 0;\n        var withinRange = this.selectedIndex >= firstAriaIndex && this.selectedIndex <= lastAriaIndex;\n        var isVirtualization = this.parent.enableVirtualization && this.addRowIndex > -1 && this.prevAriaRowIndex !== '-1';\n        if (this.parent.editSettings.mode !== 'Dialog') {\n            if (this.parent.editSettings.newRowPosition === 'Above') {\n                position = 'before';\n            }\n            else if ((this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child')\n                && (this.selectedIndex > -1 || isVirtualization) && withinRange) {\n                position = 'after';\n                if (!isNullOrUndefined(records[parseInt(index.toString(), 10)]) &&\n                    records[parseInt(index.toString(), 10)].expanded) {\n                    if (this.parent.editSettings.mode === 'Batch' && (this.parent.getBatchChanges()[this.addedRecords].length > 1\n                        || this.parent.getBatchChanges()[this.deletedRecords].length)) {\n                        index += findChildrenRecords(records[parseInt(index.toString(), 10)]).length;\n                        if (this.parent.editSettings.newRowPosition !== 'Child') {\n                            var batchChildCount = this.batchEditModule.getBatchChildCount();\n                            index = index + batchChildCount;\n                        }\n                    }\n                    else if (!this.parent.enableVirtualization) {\n                        index += findChildrenRecords(records[parseInt(index.toString(), 10)]).length;\n                    }\n                }\n            }\n            if ((this.selectedIndex > -1 || isVirtualization) && withinRange\n                && (index || (this.parent.editSettings.newRowPosition === 'Child'\n                    || this.parent.editSettings.newRowPosition === 'Below'))) {\n                if (index >= rows.length - 1) {\n                    index = rows.length - 2;\n                }\n                var r = 'rows';\n                var newRowObject = this.parent.grid.contentModule[\"\" + r][0];\n                var focussedElement = document.activeElement;\n                rows[index + 1][\"\" + position](rows[0]);\n                setValue('batchIndex', index + 1, this.batchEditModule);\n                var rowObjectIndex = this.parent.editSettings.newRowPosition === 'Above' ? index : index + 1;\n                if (this.parent.editSettings.mode === 'Batch') {\n                    this.parent.grid.contentModule[\"\" + r].splice(0, 1);\n                    this.parent.grid.contentModule[\"\" + r].splice(rowObjectIndex, 0, newRowObject);\n                }\n                if (this.parent.editSettings.mode === 'Row' || this.parent.editSettings.mode === 'Cell') {\n                    var errors = this.parent.grid.getContentTable().querySelectorAll('.e-griderror');\n                    for (var i = 0; i < errors.length; i++) {\n                        errors[parseInt(i.toString(), 10)].remove();\n                    }\n                    setValue('errorRules', [], this.parent.grid.editModule.formObj);\n                }\n                if (isVirtualization) {\n                    this.prevAriaRowIndex = '-1';\n                }\n                if (!this.parent.enableVirtualization || this.parent.enableVirtualization) {\n                    this.isScrollByFocus = true;\n                    focussedElement.focus();\n                }\n                if (this.parent.enableVirtualization && !Object.keys(this.parent.grid.contentModule['emptyRowData']).length) {\n                    this.parent.grid.contentModule['createEmptyRowdata']();\n                }\n            }\n        }\n        if (this.parent.editSettings.mode === 'Batch' && !isNullOrUndefined(this.addRowIndex) && this.addRowIndex !== -1 && this['isAddedRowByMethod'] && !this.isAddedRowByContextMenu) {\n            index = this.batchEditModule.getAddRowIndex();\n            this.selectedIndex = this.batchEditModule.getSelectedIndex();\n            var batchAddedRecords = this.parent.getBatchChanges()['addedRecords'];\n            var newlyAddedRecord = void 0;\n            if (batchAddedRecords.length) {\n                for (var i = 0; i < batchAddedRecords.length; i++) {\n                    if (isNullOrUndefined(batchAddedRecords[parseInt(i.toString(), 10)].uniqueID)) {\n                        newlyAddedRecord = batchAddedRecords[parseInt(i.toString(), 10)];\n                    }\n                }\n            }\n            var args = {\n                action: 'add',\n                data: newlyAddedRecord,\n                index: index,\n                seletedRow: 0\n            };\n            this.beginAddEdit(args);\n            this.batchEditModule['batchAddRowRecord'].push(this.batchEditModule['addRowRecord']);\n            this.batchEditModule['batchAddedRecords'].push(args['data']);\n        }\n    };\n    // private beforeDataBound(args: BeforeDataBoundArgs): void {\n    //   if (this.parent.grid.isEdit && this.parent.dataSource instanceof DataManager &&\n    //         this.parent.dataSource.adaptor instanceof RemoteSaveAdaptor) {\n    //     let action: string = getValue('action', args);\n    //     let data: Object = getValue('data', args);\n    //     if (action === 'edit' && !isNullOrUndefined(this.editedData)) {\n    //       data = extend(this.editedData, data);\n    //       this.editedData = null;\n    //     }\n    //     if (!isNullOrUndefined(this.addedData)) {\n    //       let addedData: Object = args.result[args.result.length - 1];\n    //       addedData = extend(this.addedData, addedData);\n    //       this.addedData = null;\n    //       args.result.splice(this.addedIndex, 0, addedData);\n    //       args.result.splice(args.result.length, 1);\n    //     }\n    //   }\n    // }\n    Edit.prototype.beginEdit = function (args) {\n        if (args.requestType === 'refresh' && this.isOnBatch) {\n            args.cancel = true;\n            return;\n        }\n        if (this.parent.editSettings.mode === 'Cell' && args.requestType === 'beginEdit') {\n            args.cancel = true;\n            return;\n        }\n        if (this.doubleClickTarget && args.requestType !== 'delete' && (this.doubleClickTarget.classList.contains('e-treegridexpand') ||\n            this.doubleClickTarget.classList.contains('e-treegridcollapse') || this.doubleClickTarget.classList.contains('e-frame'))) {\n            args.cancel = true;\n            this.doubleClickTarget = null;\n            return;\n        }\n        if (args.requestType === 'delete') {\n            var data_1 = args.data;\n            if (isNullOrUndefined(args.data[0].uniqueID)) {\n                var primaryKeys_2 = this.parent.getPrimaryKeyFieldNames();\n                var _loop_1 = function (i) {\n                    this_1.parent.flatData.filter(function (e) {\n                        if (e[\"\" + primaryKeys_2[0]] === args.data[parseInt(i.toString(), 10)][primaryKeys_2[0]]) {\n                            data_1[parseInt(i.toString(), 10)] = e;\n                        }\n                    });\n                };\n                var this_1 = this;\n                for (var i = 0; i < data_1.length; i++) {\n                    _loop_1(i);\n                }\n            }\n            for (var i = 0; i < data_1.length; i++) {\n                this.deleteUniqueID(data_1[parseInt(i.toString(), 10)].uniqueID);\n                var childs = findChildrenRecords(data_1[parseInt(i.toString(), 10)]);\n                for (var c = 0; c < childs.length; c++) {\n                    this.deleteUniqueID(childs[parseInt(c.toString(), 10)].uniqueID);\n                }\n                args.data = args.data.concat(childs);\n            }\n        }\n        if (args.requestType === 'add' || (this.isAddedRowByMethod && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling))) {\n            if (!(this.parent.grid.selectedRowIndex === -1 && this.isAddedRowByMethod)\n                && args.index === this.parent.grid.selectedRowIndex || args.index === 0) {\n                this.selectedIndex = this.parent.grid.selectedRowIndex;\n            }\n            if (this.parent.enableVirtualization) {\n                var selector = '.e-row[aria-rowindex=\"' + (this.selectedIndex + 1) + '\"]';\n                var row = void 0;\n                if (this.selectedIndex > -1 && this.parent.editSettings.newRowPosition !== 'Top' &&\n                    this.parent.editSettings.newRowPosition !== 'Bottom') {\n                    this.prevAriaRowIndex = this.selectedIndex.toString();\n                    row = this.parent.getContent().querySelector(selector);\n                    this.addRowIndex = row ? row.rowIndex : 0;\n                }\n                else {\n                    if (this.prevAriaRowIndex && this.prevAriaRowIndex !== '-1') {\n                        selector = '.e-row[aria-rowindex=\"' + (this.prevAriaRowIndex + 1) + '\"]';\n                        row = this.parent.getContent().querySelector(selector);\n                        this.addRowIndex = row ? row.rowIndex : 0;\n                    }\n                    else {\n                        this.addRowIndex = 0;\n                    }\n                }\n            }\n            else {\n                if (this.isAddedRowByMethod && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {\n                    if (args.index !== 0) {\n                        this.addRowIndex = args.index;\n                    }\n                    else {\n                        this.addRowIndex = this.parent.grid.selectedRowIndex;\n                    }\n                }\n                else {\n                    this.addRowIndex = this.parent.grid.selectedRowIndex > -1 ? this.parent.grid.selectedRowIndex : 0;\n                }\n            }\n            var selectedRecords = this.parent.getSelectedRecords()[0];\n            if ((this.isAddedRowByMethod || (this.isAddedRowByContextMenu && this.parent.grid.selectedRowIndex !== -1)) &&\n                (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {\n                this.addRowRecord = this.parent.flatData[this.parent.grid.selectedRowIndex];\n                if (this.parent.enableVirtualization && this.isAddedRowByContextMenu) {\n                    this.addRowRecord = this.parent.getCurrentViewRecords()[this.addRowIndex];\n                }\n            }\n            else if (!isNullOrUndefined(selectedRecords)) {\n                this.addRowRecord = selectedRecords;\n            }\n        }\n        if (this.isAddedRowByMethod && args.index !== 0) {\n            this.addRowRecord = this.parent.flatData[args.index];\n            this.addRowIndex = args.index;\n        }\n        if (this.parent.editSettings.newRowPosition === 'Child' &&\n            !isNullOrUndefined(this.parent.getSelectedRecords()[0])) {\n            this.addRowRecord = this.parent.getSelectedRecords()[0];\n        }\n        if (isNullOrUndefined(this.addRowRecord) && this.parent.getCurrentViewRecords().length > this.addRowIndex &&\n            args.requestType === 'save' && this.parent.getSelectedRecords().length !== 0) {\n            this.addRowRecord = this.parent.getCurrentViewRecords()[this.addRowIndex];\n        }\n        this.isAddedRowByMethod = false;\n        args = this.beginAddEdit(args);\n        // if (args.requestType === 'save' &&\n        //    ((this.parent.dataSource instanceof DataManager && this.parent.dataSource.adaptor instanceof RemoteSaveAdaptor))) {\n        //      if (args.action === 'edit') {\n        //           this.editedData = args.data;\n        //      } else if (args.action === 'add') {\n        //           this.addedData = value;\n        //      }\n        // }\n    };\n    Edit.prototype.savePreviousRowPosition = function () {\n        if (this.previousNewRowPosition === null) {\n            this.previousNewRowPosition = this.parent.editSettings.newRowPosition;\n        }\n    };\n    Edit.prototype.beginAddEdit = function (args) {\n        var value = args.data;\n        if (args.action === 'add') {\n            var key = this.parent.grid.getPrimaryKeyFieldNames()[0];\n            var position = null;\n            value.taskData = isNullOrUndefined(value.taskData) ? extend({}, args.data) : value.taskData;\n            var currentData = void 0;\n            if (this.parent.enableVirtualization && args.index !== 0) {\n                currentData = this.parent.flatData;\n            }\n            else if (this.parent.editSettings.mode === 'Batch' && this['isAddedRowByMethod'] && !isNullOrUndefined(this.addRowIndex)) {\n                currentData = this.batchEditModule['batchRecords'];\n            }\n            else {\n                currentData = this.parent.grid.getCurrentViewRecords();\n            }\n            if (this.parent.enableVirtualization && args.index !== 0) {\n                this.addRowIndex = this.parent.flatData.indexOf(this.addRowRecord);\n                this.selectedIndex = this.addRowIndex;\n            }\n            var index = this.addRowIndex;\n            value.uniqueID = getUid(this.parent.element.id + '_data_');\n            setValue('uniqueIDCollection.' + value.uniqueID, value, this.parent);\n            var level = 0;\n            var idMapping = void 0;\n            var parentUniqueID = void 0;\n            var parentItem = void 0;\n            var parentIdMapping = void 0;\n            var isVirtualization = this.parent.enableVirtualization && this.addRowIndex > -1 && this.prevAriaRowIndex !== '-1';\n            var rows = this.parent.getRows();\n            var firstAriaIndex = rows.length ? currentData.indexOf(currentData[0]) : 0;\n            var lastAriaIndex = rows.length ? +rows[rows.length - 1].getAttribute('aria-rowindex') - 1 : 0;\n            var withinRange = this.parent.enableVirtualization && args.index !== 0 ? true :\n                this.selectedIndex >= firstAriaIndex && this.selectedIndex <= lastAriaIndex;\n            if (currentData.length) {\n                idMapping = currentData[this.addRowIndex][this.parent.idMapping];\n                parentIdMapping = currentData[this.addRowIndex][this.parent.parentIdMapping];\n                if (currentData[this.addRowIndex].parentItem) {\n                    parentUniqueID = currentData[this.addRowIndex].parentItem.uniqueID;\n                }\n                parentItem = currentData[this.addRowIndex].parentItem;\n            }\n            if (this.parent.editSettings.newRowPosition !== 'Top' && currentData.length) {\n                level = currentData[this.addRowIndex].level;\n                if (this.parent.editSettings.newRowPosition === 'Above') {\n                    position = 'before';\n                    index = currentData[this.addRowIndex].index;\n                }\n                else if (this.parent.editSettings.newRowPosition === 'Below') {\n                    position = 'after';\n                    var childRecordCount = findChildrenRecords(currentData[this.addRowIndex]).length;\n                    var currentDataIndex = currentData[this.addRowIndex].index;\n                    index = (childRecordCount > 0) ? (currentDataIndex + childRecordCount) : (currentDataIndex);\n                }\n                else if (this.parent.editSettings.newRowPosition === 'Child') {\n                    position = 'after';\n                    if ((this.selectedIndex > -1 || isVirtualization) && withinRange) {\n                        value.parentItem = extend({}, currentData[this.addRowIndex]);\n                        value.parentUniqueID = value.parentItem.uniqueID;\n                        delete value.parentItem.childRecords;\n                        delete value.parentItem[this.parent.childMapping];\n                    }\n                    var childRecordCount1 = findChildrenRecords(currentData[this.addRowIndex]).length;\n                    var currentDataIndex1 = currentData[this.addRowIndex].index;\n                    if (this.selectedIndex >= 0) {\n                        value.level = level + 1;\n                    }\n                    index = (childRecordCount1 > 0) ? (currentDataIndex1 + childRecordCount1) : (currentDataIndex1);\n                    if (this.isSelfReference) {\n                        if (!this.parent.isLocalData && this.parent.editModule.selectedIndex === -1) {\n                            value.taskData[this.parent.parentIdMapping] = value[this.parent.parentIdMapping] = null;\n                        }\n                        else {\n                            value.taskData[this.parent.parentIdMapping] = value[this.parent.parentIdMapping] = idMapping;\n                        }\n                        if (!isNullOrUndefined(value.parentItem)) {\n                            updateParentRow(key, value.parentItem, 'add', this.parent, this.isSelfReference, value);\n                        }\n                    }\n                }\n                if (this.parent.editSettings.newRowPosition === 'Above' || this.parent.editSettings.newRowPosition === 'Below') {\n                    if ((this.selectedIndex > -1 || isVirtualization) && level && withinRange) {\n                        value.parentUniqueID = parentUniqueID;\n                        value.parentItem = extend({}, parentItem);\n                        delete value.parentItem.childRecords;\n                        delete value.parentItem[this.parent.childMapping];\n                    }\n                    value.level = level;\n                    if (this.isSelfReference) {\n                        value.taskData[this.parent.parentIdMapping] = value[this.parent.parentIdMapping] = parentIdMapping;\n                        if (!isNullOrUndefined(value.parentItem)) {\n                            updateParentRow(key, value.parentItem, 'add', this.parent, this.isSelfReference, value);\n                        }\n                    }\n                }\n                if (position != null && (this.selectedIndex > -1 || isVirtualization) && withinRange) {\n                    args.index = position === 'before' ? index : index + 1;\n                }\n                if (this.parent.editSettings.newRowPosition === 'Bottom') {\n                    level = 0;\n                    var dataSource = (this.parent.grid.dataSource instanceof DataManager ?\n                        this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);\n                    args.index = dataSource.length;\n                }\n            }\n            if (isNullOrUndefined(value.level)) {\n                value.level = level;\n            }\n            value.hasChildRecords = false;\n            value.childRecords = [];\n            value.index = 0;\n        }\n        if (args.action === 'add') {\n            this.internalProperties = { level: value.level, parentItem: value.parentItem, uniqueID: value.uniqueID,\n                taskData: value.taskData, parentUniqueID: isNullOrUndefined(value.parentItem) ? undefined : value.parentItem.uniqueID,\n                childRecords: value.childRecords };\n        }\n        if (args.requestType === 'delete') {\n            var deletedValues = args.data;\n            for (var i = 0; i < deletedValues.length; i++) {\n                if (deletedValues[parseInt(i.toString(), 10)].parentItem) {\n                    var parentItem = getParentData(this.parent, deletedValues[parseInt(i.toString(), 10)].parentItem.uniqueID);\n                    if (!isNullOrUndefined(parentItem) && parentItem.hasChildRecords) {\n                        var childIndex = parentItem.childRecords.indexOf(deletedValues[parseInt(i.toString(), 10)]);\n                        parentItem.childRecords.splice(childIndex, 1);\n                    }\n                }\n            }\n        }\n        return args;\n    };\n    /**\n     * If the data,index and position given, Adds the record to treegrid rows otherwise it will create edit form.\n     *\n     * @returns {void}\n     */\n    Edit.prototype.addRecord = function (data, index, position) {\n        if (this.parent.editSettings.newRowPosition === this.previousNewRowPosition || this.previousNewRowPosition === null) {\n            this.previousNewRowPosition = this.parent.editSettings.newRowPosition;\n        }\n        if (!this.isSelfReference && !isNullOrUndefined(data) && Object.hasOwnProperty.call(data, this.parent.childMapping)) {\n            var addRecords = [];\n            var previousEditMode = this.parent.editSettings.mode;\n            var previousGridEditMode = this.parent.grid.editSettings.mode;\n            addRecords.push(data);\n            this.parent.setProperties({ editSettings: { mode: 'Batch' } }, true);\n            this.parent.grid.setProperties({ editSettings: { mode: 'Batch' } }, true);\n            if (!isNullOrUndefined(position)) {\n                this.parent.setProperties({ editSettings: { newRowPosition: position } }, true);\n            }\n            var updatedRecords = { addedRecords: addRecords, changedRecords: [], deletedRecords: [] };\n            this.parent.notify(events.batchSave, { updatedRecords: updatedRecords, index: index });\n            this.parent.setProperties({ editSettings: { mode: previousEditMode } }, true);\n            this.parent.grid.setProperties({ editSettings: { mode: previousGridEditMode } }, true);\n            this.parent.refresh();\n        }\n        else {\n            if (data) {\n                if (index > -1) {\n                    this.selectedIndex = index;\n                    this.addRowIndex = index;\n                }\n                else {\n                    this.selectedIndex = this.parent.selectedRowIndex;\n                    this.addRowIndex = this.parent.selectedRowIndex;\n                }\n                if (position) {\n                    this.parent.setProperties({ editSettings: { newRowPosition: position } }, true);\n                }\n                this.parent.grid.editModule.addRecord(data, index);\n            }\n            else {\n                this.parent.grid.editModule.addRecord(data, index);\n            }\n        }\n    };\n    /**\n     * Checks the status of validation at the time of editing. If validation is passed, it returns true.\n     *\n     * @returns {boolean} Returns form validation results\n     */\n    Edit.prototype.editFormValidate = function () {\n        return this.parent.grid.editModule.editFormValidate();\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    Edit.prototype.destroyForm = function () {\n        this.parent.grid.editModule.destroyForm();\n    };\n    Edit.prototype.contentready = function (e) {\n        if (!isNullOrUndefined(e.args.requestType)\n            && (e.args.requestType.toString() === 'delete' || e.args.requestType.toString() === 'save'\n                || (this.parent.editSettings.mode === 'Batch' && e.args.requestType.toString() === 'batchsave'))) {\n            this.updateIndex(this.parent.grid.dataSource, this.parent.getRows(), this.parent.getCurrentViewRecords());\n            if (this.parent.frozenRows || this.parent.getFrozenColumns() || this.parent.frozenColumns) {\n                if (this.parent.grid.dataSource.length === this.parent.getDataRows().length) {\n                    this.updateIndex(this.parent.grid.dataSource, this.parent.getDataRows(), this.parent.getCurrentViewRecords());\n                }\n            }\n        }\n    };\n    /**\n     * If the row index and field is given, edits the particular cell in a row.\n     *\n     * @returns {void}\n     */\n    Edit.prototype.editCell = function (rowIndex, field) {\n        if (this.parent.editSettings.mode === 'Cell' || this.parent.editSettings.mode === 'Batch') {\n            if (this.parent.editSettings.mode !== 'Batch') {\n                this.isOnBatch = true;\n                this.updateGridEditMode('Batch');\n            }\n            this.parent.grid.editModule.editCell(rowIndex, field);\n        }\n    };\n    /**\n     * Cancels edited state.\n     *\n     * @returns {void}\n     */\n    Edit.prototype.closeEdit = function () {\n        if (this.parent.enableVirtualization && this.parent.grid.editSettings.mode === 'Batch' && this.parent.grid.pageSettings.currentPage > 1) {\n            this.editedRowIndex = this.parent.grid.editModule.editModule['cellDetails'].rowIndex;\n            this.parent.grid.editModule.editModule['cellDetails'].rowIndex = parseInt(this.parent.getRows()[this.parent.grid.editModule.editModule['cellDetails'].rowIndex].getAttribute('aria-rowIndex'), 10) - 1;\n        }\n        this.parent.grid.editModule.closeEdit();\n    };\n    return Edit;\n}());\nexport { Edit };\n","import { Grid, CommandColumn as Command } from '@syncfusion/ej2-grids';\n/**\n * Command Column Module for TreeGrid\n *\n * @hidden\n */\nvar CommandColumn = /** @class */ (function () {\n    function CommandColumn(parent) {\n        Grid.Inject(Command);\n        this.parent = parent;\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns CommandColumn module name\n     */\n    CommandColumn.prototype.getModuleName = function () {\n        return 'commandColumn';\n    };\n    /**\n     * Destroys the ContextMenu.\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    CommandColumn.prototype.destroy = function () {\n        //this.removeEventListener();\n    };\n    return CommandColumn;\n}());\nexport { CommandColumn };\n","import { Grid, getObject } from '@syncfusion/ej2-grids';\nimport { DetailRow as detailrow } from '@syncfusion/ej2-grids';\nimport { isNullOrUndefined, addClass } from '@syncfusion/ej2-base';\nimport { getExpandStatus, isRemoteData } from '../utils';\n/**\n * TreeGrid Detail Row module\n *\n * @hidden\n */\nvar DetailRow = /** @class */ (function () {\n    function DetailRow(parent) {\n        Grid.Inject(detailrow);\n        this.parent = parent;\n        this.addEventListener();\n    }\n    /**\n     * @hidden\n     */\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns DetailRow module name\n     */\n    DetailRow.prototype.getModuleName = function () {\n        return 'detailRow';\n    };\n    DetailRow.prototype.addEventListener = function () {\n        this.parent.on('dataBoundArg', this.dataBoundArg, this);\n        this.parent.on('detaildataBound', this.detaildataBound, this);\n        this.parent.grid.on('detail-indentcell-info', this.setIndentVisibility, this);\n        this.parent.on('childRowExpand', this.childRowExpand, this);\n        this.parent.on('rowExpandCollapse', this.rowExpandCollapse, this);\n        this.parent.on('actioncomplete', this.actioncomplete, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    DetailRow.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('dataBoundArg', this.dataBoundArg);\n        this.parent.off('detaildataBound', this.detaildataBound);\n        this.parent.off('childRowExpand', this.childRowExpand);\n        this.parent.off('rowExpandCollapse', this.rowExpandCollapse);\n        this.parent.off('actioncomplete', this.actioncomplete);\n        this.parent.grid.off('detail-indentcell-info', this.setIndentVisibility);\n    };\n    DetailRow.prototype.setIndentVisibility = function (args) {\n        var visible = 'visible';\n        args[\"\" + visible] = false;\n    };\n    DetailRow.prototype.dataBoundArg = function () {\n        var detailele = this.parent.getRows().filter(function (e) {\n            return !e.classList.contains('e-detailrow');\n        });\n        for (var i = 0; i < detailele.length; i++) {\n            var elements = detailele[parseInt(i.toString(), 10)].getElementsByClassName('e-detailrowcollapse');\n            var detailData = this.parent.grid.getRowObjectFromUID(detailele[parseInt(i.toString(), 10)].getAttribute('data-Uid'));\n            var parentItem = getObject('parentItem', this.parent.grid.getCurrentViewRecords()[parseInt(i.toString(), 10)]);\n            if (isNullOrUndefined(parentItem) || !isNullOrUndefined(parentItem) &&\n                getExpandStatus(this.parent, detailData.data, this.parent.grid.getCurrentViewRecords())) {\n                this.parent.grid.detailRowModule.expand(elements[0]);\n            }\n        }\n    };\n    DetailRow.prototype.childRowExpand = function (args) {\n        var detailRowElement = args.row.getElementsByClassName('e-detailrowcollapse');\n        if (!isNullOrUndefined(detailRowElement[0])) {\n            this.parent.grid.detailRowModule.expand(detailRowElement[0]);\n        }\n    };\n    DetailRow.prototype.rowExpandCollapse = function (args) {\n        if (isRemoteData(this.parent)) {\n            return;\n        }\n        for (var i = 0; i < args.detailrows.length; i++) {\n            this.parent['toggleRowVisibility'](args.detailrows[parseInt(i.toString(), 10)], args.action);\n        }\n    };\n    DetailRow.prototype.detaildataBound = function (args) {\n        var data = args.data;\n        var row = args.detailElement.parentElement.previousSibling;\n        var index = !isNullOrUndefined(data.parentItem) ? data.parentItem.index : data.index;\n        var expandClass = 'e-gridrowindex' + index + 'level' + data.level;\n        var classlist = row.querySelector('.' + expandClass).classList;\n        var gridClas = [].slice.call(classlist).filter(function (gridclass) { return (gridclass === expandClass); });\n        var newNo = gridClas[0].length;\n        var slicedclas = gridClas.toString().slice(6, newNo);\n        var detailClass = 'e-griddetail' + slicedclas;\n        addClass([args.detailElement.parentElement], detailClass);\n    };\n    DetailRow.prototype.actioncomplete = function (args) {\n        if (args.requestType === 'beginEdit' || args.requestType === 'add') {\n            var spann = (args.row.querySelectorAll('.e-editcell')[0].getAttribute('colSpan'));\n            var colum = parseInt(spann, 10) - 1;\n            var updtdcolum = colum.toString();\n            args.row.querySelectorAll('.e-editcell')[0].setAttribute('colSpan', updtdcolum);\n        }\n        var focusElement = this.parent.grid.contentModule.getRows();\n        for (var i = 0; i < focusElement.length; i++) {\n            focusElement[parseInt(i.toString(), 10)].cells[0].visible = false;\n        }\n        var focusModule = getObject('focusModule', this.parent.grid);\n        var matrix = 'refreshMatrix';\n        focusModule[\"\" + matrix](true)({ rows: this.parent.grid.contentModule.getRows() });\n    };\n    /**\n     * Destroys the DetailModule.\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    DetailRow.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return DetailRow;\n}());\nexport { DetailRow };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Cell, CellType } from '@syncfusion/ej2-grids';\nimport { VirtualContentRenderer } from '@syncfusion/ej2-grids';\nimport * as literals from '../base/constant';\nimport { InterSectionObserver } from '@syncfusion/ej2-grids';\nimport { TreeVirtualRowModelGenerator } from '../renderer/virtual-row-model-generator';\nimport * as events from '../base/constant';\nimport { isNullOrUndefined, EventHandler, getValue, setValue, Browser, debounce } from '@syncfusion/ej2-base';\nimport { DataManager } from '@syncfusion/ej2-data';\nimport { isCountRequired } from '../utils';\n/**\n * VirtualTreeContentRenderer\n *\n * @hidden\n */\nvar VirtualTreeContentRenderer = /** @class */ (function (_super) {\n    __extends(VirtualTreeContentRenderer, _super);\n    function VirtualTreeContentRenderer(parent, locator) {\n        var _this = _super.call(this, parent, locator) || this;\n        _this.isExpandCollapse = false;\n        _this.translateY = 0;\n        _this.maxiPage = 0;\n        _this.recordAdded = false;\n        /** @hidden */\n        _this.startIndex = -1;\n        _this.endIndex = -1;\n        _this.preTranslate = 0;\n        _this.isRemoteExpand = false;\n        /** @hidden */\n        _this.isDataSourceChanged = false;\n        _this.addEventListener();\n        return _this;\n    }\n    VirtualTreeContentRenderer.prototype.getModelGenerator = function () {\n        return new TreeVirtualRowModelGenerator(this.parent);\n    };\n    /**\n     * Retrieves the row element for a given row index.\n     *\n     * @param {number} index - The index of the row to retrieve.\n     * @returns {Element} The row element at the specified index.\n     */\n    VirtualTreeContentRenderer.prototype.getRowByIndex = function (index) {\n        if (this.parent.enableVirtualization && this.parent.isFrozenGrid()) {\n            return this.getRowCollection(index, true);\n        }\n        var dataRows = this.parent.getDataRows();\n        var targetRow = dataRows.find(function (e) { return parseInt(e.getAttribute('aria-rowindex'), 10) - 1 === index; });\n        if (!targetRow && this.parent.isEdit && this.parent.editSettings.mode === 'Batch') {\n            return index != null ? this.parent.getRows()[parseInt(index.toString(), 10)] : undefined;\n        }\n        return targetRow;\n    };\n    /**\n     * Retrieves the frozen right virtual row element by its index.\n     *\n     * @param {number} index - The index of the row to be retrieved.\n     * @returns {Element} The DOM element representing the frozen right virtual row.\n     */\n    VirtualTreeContentRenderer.prototype.getFrozenRightVirtualRowByIndex = function (index) {\n        return this.getRowCollection(index, false, false, true);\n    };\n    /**\n     * Retrieves the row or record from the virtual tree grid based on the provided index.\n     * Considers conditions such as frozen rows and pagination for accurate retrieval.\n     *\n     * @param {number} index - The index of the desired row or record.\n     * @param {boolean} isMovable - Specifies if the content is movable.\n     * @param {boolean} [isRowObject] - Optional. Determines if the return value should be a row object.\n     * @param {boolean} [isFrozenRight] - Optional. Used for determining frozen right rows.\n     * @returns {Element | Object} - The HTML element or row object.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    VirtualTreeContentRenderer.prototype.getRowCollection = function (index, isMovable, isRowObject, isFrozenRight) {\n        var startIdx = parseInt(this.parent.getRows()[0].getAttribute(literals.ariaRowIndex), 10) - 1;\n        var rowCollection = this.parent.getDataRows();\n        var collection = isRowObject ? this.parent.getCurrentViewRecords() : rowCollection;\n        var selectedRow = collection[index - startIdx];\n        if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {\n            if (!isRowObject) {\n                selectedRow = index <= this.parent.frozenRows ? rowCollection[parseInt(index.toString(), 10)]\n                    : rowCollection[(index - startIdx) + this.parent.frozenRows];\n            }\n            else {\n                selectedRow = index <= this.parent.frozenRows ?\n                    this.parent.getRowsObject()[parseInt(index.toString(), 10)].data : selectedRow;\n            }\n        }\n        if (selectedRow == null && index != null && this.parent.editSettings.mode === 'Batch' && this.parent.isEdit && isMovable) {\n            selectedRow = rowCollection[parseInt(index.toString(), 10)];\n        }\n        return selectedRow;\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.addEventListener = function () {\n        this.parent.on(events.virtualActionArgs, this.virtualOtherAction, this);\n        this.parent.on(events.indexModifier, this.indexModifier, this);\n    };\n    /**\n     * Handles virtual scrolling actions based on the provided arguments.\n     *\n     * @param {Object} args - The argument object.\n     * @param {boolean} args.setTop - Determines if the virtual scroll position should reset to top.\n     * @param {boolean} args.isExpandCollapse - Determines if the action is part of an expand/collapse operation.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.virtualOtherAction = function (args) {\n        if (args.setTop) {\n            this.translateY = 0;\n            this.startIndex = 0;\n            this.endIndex = this.parent.pageSettings.pageSize - 1;\n        }\n        else if (args.isExpandCollapse) {\n            this.isExpandCollapse = true;\n        }\n    };\n    /**\n     * Modifies the index based on various conditions such as record addition, deletion, or data source changes.\n     *\n     * @private\n     * @param {Object} args - Contains parameters for the current operation.\n     * @param {number} args.startIndex - The starting index for the modification.\n     * @param {number} args.endIndex - The ending index for the modification.\n     * @param {number} args.count - The number of items affected in the operation.\n     * @param {string} args.requestType - The type of request, such as 'insert', 'delete', or 'update'.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.indexModifier = function (args) {\n        var content = this.parent.getContent().querySelector('.e-content');\n        var pageSize = this.parent.pageSettings.pageSize;\n        if ((this.recordAdded || args.requestType === 'delete' && this.endIndex > args.count - this.parent.pageSettings.pageSize) && this.startIndex > -1 && this.endIndex > -1) {\n            if (this.endIndex > args.count - pageSize) {\n                var nextSetResIndex = ~~(content.scrollTop / this.parent.getRowHeight());\n                var lastIndex = nextSetResIndex + this.parent.getRows().length;\n                if (lastIndex > args.count) {\n                    lastIndex = nextSetResIndex +\n                        (args.count - nextSetResIndex);\n                }\n                this.startIndex = lastIndex - this.parent.getRows().length;\n                this.endIndex = lastIndex;\n            }\n            else if (this.parent.root.editSettings.newRowPosition !== 'Top' && this.parent.root.editModule.selectedIndex !== -1 || this.parent.root.editModule.selectedIndex !== -1) {\n                this.startIndex += 1;\n                this.endIndex += 1;\n            }\n            this.recordAdded = false;\n        }\n        if (this.isDataSourceChanged) {\n            this.startIndex = 0;\n            this.endIndex = pageSize - 1;\n        }\n        if ((this.endIndex - this.startIndex !== pageSize) &&\n            (this.totalRecords > pageSize)\n            && (this.endIndex === this.totalRecords)) {\n            args.startIndex = this.endIndex - pageSize;\n            args.endIndex = this.endIndex;\n        }\n        else {\n            args.startIndex = this.startIndex;\n            args.endIndex = this.endIndex;\n        }\n    };\n    /**\n     * Handles the addition or removal of event listeners for virtual scrolling in a TreeGrid.\n     *\n     * @param {string} action - The action to perform, either 'on' or 'off'.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.eventListener = function (action) {\n        var _this = this;\n        if (!(this.parent.dataSource instanceof DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || !isCountRequired(this.parent)) {\n            this.parent[\"\" + action]('data-ready', this.onDataReady, this);\n            this.parent[\"\" + action]('refresh-virtual-block', this.refreshContentRows, this);\n            this.fn = function () {\n                _this.observers.observes(function (scrollArgs) { return _this.scrollListeners(scrollArgs); }, _this.onEnteredAction(), _this.parent);\n                var gObj = _this.parent;\n                if (gObj.root.enablePersistence && gObj.root.scrollPosition) {\n                    _this.content.scrollTop = gObj.root.scrollPosition.top;\n                    if (gObj.root.enableColumnVirtualization) {\n                        _this.content.scrollLeft = gObj.root.scrollPosition.left;\n                    }\n                    var scrollValues = {\n                        direction: 'down', sentinel: _this.observer.sentinelInfo.down,\n                        offset: gObj.root.scrollPosition, focusElement: gObj.element\n                    };\n                    _this.scrollListeners(scrollValues);\n                }\n                _this.parent.off('content-ready', _this.fn);\n            };\n            this.parent.addEventListener('dataBound', this.dataBoundEvent.bind(this));\n            this.parent.addEventListener('rowSelected', this.rowSelectedEvent.bind(this));\n            this.parent[\"\" + action]('select-virtual-Row', this.toSelectVirtualRow, this);\n            this.parent.on('content-ready', this.fn, this);\n            this.parent.addEventListener(events.actionBegin, this.handleActionBegin.bind(this));\n            this.parent.addEventListener(events.actionComplete, this.onActionComplete.bind(this));\n            this.parent[\"\" + action]('virtual-scroll-edit-action-begin', this.beginEdit, this);\n            this.parent[\"\" + action]('virtual-scroll-add-action-begin', this.beginAdd, this);\n            this.parent[\"\" + action]('virtual-scroll-edit-success', this.virtualEditSuccess, this);\n            this.parent[\"\" + action]('edit-reset', this.resetIseditValue, this);\n            this.parent[\"\" + action]('get-virtual-data', this.getData, this);\n            this.parent[\"\" + action]('virtual-scroll-edit-cancel', this.cancelEdit, this);\n            this.parent[\"\" + action]('select-row-on-context-open', this.toSelectRowOnContextOpen, this);\n            this.parent[\"\" + action]('refresh-virtual-editform-cells', this.refreshCell, this);\n            this.parent[\"\" + action]('virtaul-cell-focus', this.cellFocus, this);\n            this.parent[\"\" + action]('virtual-scroll-edit', this.restoreEditState, this);\n        }\n        else {\n            _super.prototype.eventListener.call(this, 'on');\n        }\n    };\n    /**\n     * Handles cell focus transitions in a virtualized tree grid component\n     * when a keyboard event is triggered.\n     *\n     * @param {KeyboardEventArgs} e - The keyboard event arguments that contain\n     *                                information about the key action.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.cellFocus = function (e) {\n        var virtualCellFocus = 'virtualCellFocus';\n        _super.prototype[\"\" + virtualCellFocus].call(this, e);\n    };\n    /**\n     * Handles the data ready event for the virtual tree grid content renderer.\n     *\n     * @param {NotifyArgs} [e] - The notification arguments that contain information about the data.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.onDataReady = function (e) {\n        _super.prototype.onDataReady.call(this, e);\n        if (!(this.parent.dataSource instanceof DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || !isCountRequired(this.parent)) {\n            if (!isNullOrUndefined(e.count)) {\n                this.totalRecords = e.count;\n                // To overcome the white space issue in last page when records collapsed\n                if (this.parent.isFrozenGrid() && e.count < Object.keys(this.parent.dataSource).length) {\n                    var width = this.parent.enableColumnVirtualization ?\n                        this.getColumnOffset(this.parent.columns.length - 1) + 'px' : '100%';\n                    var height = (this.parent.getRowHeight() * e.count) -\n                        (this.parent.getRowHeight() * this.parent.pageSettings.pageSize);\n                    getValue('virtualEle', this).setVirtualHeight(height, width);\n                }\n                if (!this.parent.enableColumnVirtualization && !this.parent.isFrozenGrid()) {\n                    getValue('virtualEle', this).setVirtualHeight(this.parent.getRowHeight() * e.count, '100%');\n                }\n            }\n            if ((!isNullOrUndefined(e.requestType) && e.requestType.toString() === 'collapseAll') || (this.isDataSourceChanged && (this.startIndex === -1 || this.startIndex === 0 && this['preStartIndex'] === 0))) {\n                this.contents.scrollTop = 0;\n                this.isDataSourceChanged = false;\n            }\n        }\n    };\n    /**\n     * Renders the table for the virtual tree content. It sets up a new `TreeInterSectionObserver`\n     * based on certain conditions regarding the data source and counting requirements.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.renderTable = function () {\n        _super.prototype.renderTable.call(this);\n        if (!(this.parent.dataSource instanceof DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || !isCountRequired(this.parent)) {\n            getValue('observer', this).options.debounceEvent = false;\n            this.observers = new TreeInterSectionObserver(getValue('observer', this).element, getValue('observer', this).options);\n            this.contents = this.getPanel().firstChild;\n        }\n    };\n    /**\n     * Calculates the translateY value for a virtual tree grid based on the scroll top, container height,\n     * and additional virtual scrolling information. This method specifically handles logic for remote\n     * data sources and ensures smooth scrolling with respect to expansion states.\n     *\n     * @param {number} sTop - The scroll top position.\n     * @param {number} cHeight - The height of the container.\n     * @param {VirtualInfo} [info] - Optional virtual scrolling information.\n     * @param {boolean} [isOnenter] - Flag indicating if the scroll event is on enter.\n     * @returns {number} The calculated translateY value.\n     */\n    VirtualTreeContentRenderer.prototype.getTranslateY = function (sTop, cHeight, info, isOnenter) {\n        if ((this.parent.dataSource instanceof DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && !this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || isCountRequired(this.parent)) {\n            if (this.isRemoteExpand) {\n                this.isRemoteExpand = false;\n                return this.preTranslate;\n            }\n            this.preTranslate = _super.prototype.getTranslateY.call(this, sTop, cHeight, info, isOnenter);\n        }\n        return _super.prototype.getTranslateY.call(this, sTop, cHeight, info, isOnenter);\n    };\n    /**\n     * Handles the dataBound event to calculate and set the initial row top position for the grid.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.dataBoundEvent = function () {\n        var dataBoundEve = 'dataBound';\n        var initialRowTop = 'initialRowTop';\n        if (!isNullOrUndefined(this.parent.getRows()) && this.parent.getRows().length && !isNullOrUndefined(this.parent.getRowByIndex(0)) && !this[\"\" + initialRowTop]) {\n            var rowTop = this.parent.getRowByIndex(0).getBoundingClientRect().top;\n            var gridTop = this.parent.element.getBoundingClientRect().top;\n            if (rowTop > 0) {\n                this[\"\" + initialRowTop] = this.parent.getRowByIndex(0).getBoundingClientRect().top - gridTop;\n            }\n            else if (this.parent.selectedRowIndex === -1) {\n                this[\"\" + initialRowTop] = this.content.getBoundingClientRect().top -\n                    this.parent.getRowByIndex(0).getBoundingClientRect().height;\n            }\n        }\n        _super.prototype[\"\" + dataBoundEve].call(this);\n    };\n    /**\n     * Handles the row selection event for virtual tree grid rows.\n     * It invokes the base class's rowSelected method and notifies\n     * the parent component about a virtual transformation change.\n     *\n     * @param {RowSelectEventArgs} args - The arguments related to the row selection event.\n     * @returns {void} This method does not return a value.\n     */\n    VirtualTreeContentRenderer.prototype.rowSelectedEvent = function (args) {\n        var rowSelected = 'rowSelected';\n        _super.prototype[\"\" + rowSelected].call(this, args);\n        this.parent.notify('virtualTransform', { requestType: 'transformChange' });\n    };\n    /**\n     * Handles virtual row selection in TreeGrid.\n     *\n     * @param {Object} args - The argument object containing the selected index.\n     * @param {number} args.selectedIndex - The index of the row to be selected.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.toSelectVirtualRow = function (args) {\n        if (this.parent.isEdit) {\n            return;\n        }\n        var selectVirtualRow = 'selectVirtualRow';\n        var containerRect = 'containerRect';\n        if (isNullOrUndefined(this.observer[\"\" + containerRect])) {\n            this.observer[\"\" + containerRect] = this.observers[\"\" + containerRect];\n        }\n        var treeGridParent = this.parent.clipboardModule['treeGridParent'];\n        if (isNullOrUndefined(treeGridParent.editModule) ||\n            isNullOrUndefined(treeGridParent.editModule['addRowIndex']) || args.selectedIndex !== 0) {\n            if (!isNullOrUndefined(treeGridParent.grid.sortModule) && treeGridParent.grid.sortModule['sortedColumns'].length > 0) {\n                var sortedData = treeGridParent.dataModule['sortedData'];\n                if (!isNullOrUndefined(sortedData) && sortedData.length > 0) {\n                    var targetIndex = sortedData.findIndex(function (record) { return record.index === args.selectedIndex; });\n                    args.selectedIndex = targetIndex;\n                }\n            }\n            _super.prototype[\"\" + selectVirtualRow].call(this, args);\n        }\n    };\n    /**\n     * Refreshes the cells for the given row object by regenerating them.\n     *\n     * @param {Row<Column>} rowObj - The row object for which the cells need to be refreshed.\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.refreshCell = function (rowObj) {\n        rowObj.cells = this.generateCells();\n    };\n    /**\n     * Generates an array of cells for each column in the parent.\n     *\n     * @returns {Cell<Column>[]} An array of cells for the corresponding columns.\n     */\n    VirtualTreeContentRenderer.prototype.generateCells = function () {\n        var cells = [];\n        for (var i = 0; i < this.parent.columns.length; i++) {\n            cells.push(this.generateCell(this.parent.columns[parseInt(i.toString(), 10)]));\n        }\n        return cells;\n    };\n    /**\n     * Generates a cell object with provided column and row configurations.\n     *\n     * @param {Column} col - The Column object which holds the column configuration.\n     * @param {string} [rowId] - An optional string that represents the row ID.\n     * @param {CellType} [cellType] - An optional CellType enum to specify the type of the cell.\n     * @param {number} [colSpan] - An optional number to specify the column span of the cell.\n     * @param {number} [oIndex] - An optional number for the order index of the cell.\n     * @param {Object} [foreignKeyData] - An optional object for foreign key data associated with the column.\n     *\n     * @returns {Cell<Column>} Returns a newly created Cell object of type Column.\n     */\n    VirtualTreeContentRenderer.prototype.generateCell = function (col, rowId, cellType, colSpan, oIndex, foreignKeyData) {\n        var opt = {\n            'visible': col.visible,\n            'isDataCell': !isNullOrUndefined(col.field || col.template),\n            'isTemplate': !isNullOrUndefined(col.template),\n            'rowID': rowId,\n            'column': col,\n            'cellType': !isNullOrUndefined(cellType) ? cellType : CellType.Data,\n            'colSpan': colSpan,\n            'commands': col.commands,\n            'isForeignKey': col.isForeignColumn && col.isForeignColumn(),\n            'foreignKeyData': col.isForeignColumn && col.isForeignColumn() && getValue(col.field, foreignKeyData)\n        };\n        if (opt.isDataCell || opt.column.type === 'checkbox' || opt.commands) {\n            opt.index = oIndex;\n        }\n        return new Cell(opt);\n    };\n    /**\n     * Begins the edit operation for a specified row in the grid.\n     * Updates the `editedRowIndex` and assigns row data to the event data.\n     *\n     * @param {{ data: Object, index: number }} e - An object containing the row data and index.\n     * @param {Object} e.data - The data of the row to be edited.\n     * @param {number} e.index - The index of the row to be edited.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.beginEdit = function (e) {\n        this['editedRowIndex'] = e.index;\n        var selector = '.e-row[aria-rowindex=\"' + (e.index + 1) + '\"]';\n        var index = this.parent.getContent().querySelector(selector).rowIndex;\n        var rowData = this.parent.getCurrentViewRecords()[parseInt(index.toString(), 10)];\n        e.data = rowData;\n    };\n    /**\n     * Begins the process of adding a new row in the tree grid.\n     *\n     * @param {Object} args - The arguments for adding a new row.\n     * @param {boolean} args.startEdit - A flag indicating whether to start editing.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.beginAdd = function (args) {\n        var addAction = 'addActionBegin';\n        var isAdd = 'isAdd';\n        var addArgs = { newRowPosition: this.rowPosition, addRowIndex: this.addRowIndex, dataRowIndex: this.dataRowIndex };\n        this.parent.notify('get-row-position', addArgs);\n        this.rowPosition = addArgs.newRowPosition;\n        this.addRowIndex = addArgs.addRowIndex;\n        this.dataRowIndex = addArgs.dataRowIndex;\n        var rows = this.parent.getRows();\n        var firstAriaIndex = rows.length ? +rows[0].getAttribute('aria-rowindex') - 1 : 0;\n        var lastAriaIndex = rows.length ? +rows[rows.length - 1].getAttribute('aria-rowindex') - 1 : 0;\n        var withInRange = this.parent.selectedRowIndex >= firstAriaIndex && this.parent.selectedRowIndex <= lastAriaIndex;\n        if (!(this.rowPosition === 'Top' || this.rowPosition === 'Bottom')) {\n            this[\"\" + isAdd] = true;\n        }\n        if (this.rowPosition === 'Top' || this.rowPosition === 'Bottom' ||\n            ((!this.addRowIndex || this.addRowIndex === -1) && (this.parent.selectedRowIndex === -1 || !withInRange))) {\n            _super.prototype[\"\" + addAction].call(this, args);\n        }\n    };\n    /**\n     * Restores the edit state of the tree grid content. This method calls the\n     * base class method to handle the restoration logic.\n     *\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.restoreEditState = function () {\n        var restoreEdit = 'restoreEdit';\n        _super.prototype[\"\" + restoreEdit].call(this);\n    };\n    /**\n     * Resets the edit state if certain conditions are met.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.resetIseditValue = function () {\n        var resetIsEdit = 'resetIsedit';\n        var isAdd = 'isAdd';\n        this.parent.notify('reset-edit-props', {});\n        if ((this.rowPosition === 'Top' || this.rowPosition === 'Bottom') && this[\"\" + isAdd]) {\n            _super.prototype[\"\" + resetIsEdit].call(this);\n        }\n    };\n    /**\n     * Handles the successful editing operation when virtual scrolling is enabled.\n     * Checks if a row has been added to the tree grid and sets the `recordAdded` flag accordingly.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.virtualEditSuccess = function () {\n        var isAdd = 'isAdd';\n        var content = this.parent.getContent().querySelector('.e-content');\n        if (this[\"\" + isAdd] && content.querySelector('.e-addedrow')) {\n            this.recordAdded = true;\n        }\n    };\n    /**\n     * Cancels the edit operation for the provided data.\n     *\n     * @param {Object} args - The arguments containing the data to cancel edit for.\n     * @param {Object} args.data - The specific data object for which the edit operation needs to be canceled.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.cancelEdit = function (args) {\n        var editCancel = 'editCancel';\n        _super.prototype[\"\" + editCancel].call(this, args);\n    };\n    /**\n     * Handles the action of selecting a row when the context menu is opened.\n     *\n     * @param {Object} args - An object containing related parameters.\n     * @param {boolean} args.isOpen - A flag indicating whether the context menu is open.\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.toSelectRowOnContextOpen = function (args) {\n        var selectRowOnContextOpen = 'selectRowOnContextOpen';\n        _super.prototype[\"\" + selectRowOnContextOpen].call(this, args);\n    };\n    /**\n     * Restores a new row in the grid when necessary by adding it back to the content.\n     *\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.restoreNewRow = function () {\n        var isAdd = 'isAdd';\n        var content = this.parent.getContent().querySelector('.e-content');\n        if (this[\"\" + isAdd] && !content.querySelector('.e-addedrow')) {\n            this.parent.isEdit = false;\n            this.parent.editModule.addRecord(null, this.parent.root.editModule.selectedIndex);\n        }\n    };\n    /**\n     * Retrieves virtual data for operations like adding or canceling rows in the grid.\n     *\n     * @param {Object} data - An object containing properties to determine the virtual data processing.\n     * @param {Object} data.virtualData - The virtual data object to be processed.\n     * @param {boolean} data.isAdd - A boolean indicating if the operation is an addition.\n     * @param {boolean} data.isCancel - A boolean indicating if the operation is a cancellation.\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.getData = function (data) {\n        var getVirtualData = 'getVirtualData';\n        _super.prototype[\"\" + getVirtualData].call(this, data);\n    };\n    /**\n     * Initiates the beginning of an action within the tree grid component.\n     * This method is invoked before any action is performed, allowing for\n     * any necessary modifications or cancellations of the upcoming action.\n     *\n     * @param {NotifyArgs} args - The arguments associated with the action,\n     * providing context and specifics about what is being commenced.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.handleActionBegin = function (args) {\n        var actionBegin = 'actionBegin';\n        _super.prototype[\"\" + actionBegin].call(this, args);\n    };\n    /**\n     * Handles the completion of various actions, such as adding a new row.\n     * Updates row positions and indexes based on the action completed.\n     *\n     * @param {NotifyArgs} args - An object containing the details of the completed action.\n     *               Specifically, it includes the `requestType` which determines the type\n     *               of action that was completed.\n     * @returns {void} This method does not return any value.\n     */\n    VirtualTreeContentRenderer.prototype.onActionComplete = function (args) {\n        if (args.requestType === 'add') {\n            var addArgs = { newRowPosition: this.rowPosition, addRowIndex: this.addRowIndex, dataRowIndex: this.dataRowIndex };\n            this.parent.notify('get-row-position', addArgs);\n            this.rowPosition = addArgs.newRowPosition;\n            this.addRowIndex = addArgs.addRowIndex;\n            this.dataRowIndex = this.parent.root.editModule.selectedIndex;\n        }\n        var actionComplete = 'actionComplete';\n        _super.prototype[\"\" + actionComplete].call(this, args);\n    };\n    /**\n     * Creates a callback function to be executed during virtual scrolling actions.\n     * This function handles the adjustment of virtual elements and rendering logic,\n     * particularly optimizing for non-IE browsers, wheel events, and virtual masks.\n     *\n     * @returns {Function} A function that handles scrolling and adjusts table rendering.\n     * @param {HTMLElement} element - The HTML element involved in the action.\n     * @param {SentinelType} current - The type of sentinel indicating the scroll.\n     * @param {string} direction - The scroll direction.\n     * @param {Offsets} e - The offset values indicating the current scroll position.\n     * @param {boolean} isWheel - Indicates if the scrolling was initiated by a mouse wheel.\n     * @param {boolean} check - A boolean flag for additional control logic.\n     */\n    VirtualTreeContentRenderer.prototype.onEnteredAction = function () {\n        var _this = this;\n        return function (element, current, direction, e, isWheel, check) {\n            var directVirtualRender = 'directVirtualRender';\n            if (!_this.parent[\"\" + directVirtualRender]) { // with this property, columns are rendered without debouncing on horizontal scroll.\n                var preventEvent = 'preventEvent';\n                if (Browser.isIE && !isWheel && check && !_this[\"\" + preventEvent] && !_this.parent.enableVirtualMaskRow) {\n                    _this.parent.showSpinner();\n                }\n                if (_this.parent.enableVirtualMaskRow && !_this[\"\" + preventEvent]) {\n                    setTimeout(function () {\n                        _this.parent.showMaskRow(current.axis);\n                        _this.parent.notify('showGanttShimmer', { requestType: 'showShimmer' });\n                    }, 0);\n                }\n                var height = _this.content.getBoundingClientRect().height;\n                var top_1 = _this.prevInfo.offsets ? _this.prevInfo.offsets.top : null;\n                var xAxis = current.axis === 'X';\n                var x = _this.getColumnOffset(xAxis ? _this.vgenerator.getColumnIndexes()[0] - 1 : _this.prevInfo.columnIndexes[0]\n                    - 1);\n                if (xAxis) {\n                    var idx = Object.keys(_this.vgenerator.cOffsets).length - _this.prevInfo.columnIndexes.length;\n                    var maxLeft = _this.vgenerator.cOffsets[idx - 1];\n                    x = x > maxLeft ? maxLeft : x; //TODO: This fix horizontal scrollbar jumping issue in column virtualization.\n                }\n                var y = _this.getTranslateY(e.top, height, xAxis && top_1 === e.top ? _this.prevInfo : undefined, true);\n                if (!_this.parent.isFrozenGrid() || _this.parent.enableVirtualMaskRow) {\n                    if (_this.parent.enableVirtualMaskRow) {\n                        var upScroll = (e.top - _this.translateY) < 0;\n                        y = (Math.round(_this.translateY) > y && !upScroll) ? Math.round(_this.translateY) : y;\n                        _this.virtualEle.adjustTable(x, y);\n                    }\n                    else {\n                        _this.virtualEle.adjustTable(x, _this.translateY);\n                    }\n                    if (_this.parent.enableColumnVirtualization) {\n                        _this.header.virtualEle.adjustTable(x, 0);\n                    }\n                }\n            }\n        };\n    };\n    /**\n     * Handles scroll events to manage virtual scrolling and row rendering.\n     * Adjusts view information, row indexes, and translates viewport positioning\n     * based on the given scroll arguments.\n     *\n     * @param {ScrollArg} scrollArgs - Contains the scroll offsets, sentinel information, direction of scroll, and other related details.\n     * @returns {void} - No return value. It adjusts scrolling state internally.\n     */\n    VirtualTreeContentRenderer.prototype.scrollListeners = function (scrollArgs) {\n        this['scrollAfterEdit']();\n        this.shouldPreventScrolling(scrollArgs);\n        if (this.parent.root.enablePersistence) {\n            this.parent.root.scrollPosition = scrollArgs.offset;\n        }\n        var info = scrollArgs.sentinel;\n        var rowHeight = this.parent.getRowHeight();\n        var outBuffer = this.parent.pageSettings.pageSize - Math.ceil(this.parent.pageSettings.pageSize / 2);\n        var content;\n        if (!isNullOrUndefined(this.parent.contentModule)) {\n            content = this.parent.getContent().querySelector('.e-content');\n        }\n        var scrollHeight = outBuffer * rowHeight;\n        var upScroll = (scrollArgs.offset.top - this.translateY) < 0 && this.activeKey !== 'downArrow';\n        var downScroll = Math.ceil(scrollArgs.offset.top - this.translateY) + rowHeight >= scrollHeight;\n        var selectedRowIndex = 'selectedRowIndex';\n        var currentViewData = this.parent.currentViewData;\n        var indexValue = 'index';\n        if (upScroll && (scrollArgs.direction !== 'right' && scrollArgs.direction !== 'left') && !isNullOrUndefined(content)) {\n            var vHeight = +(this.parent.height.toString().indexOf('%') < 0 ? parseInt(this.parent.height.toString(), 10) :\n                this.parent.element.getBoundingClientRect().height);\n            // Calculate the integer number of rows that are scrolled past plus the number of rows that fit within the visible height\n            var scrolledRows = Math.floor(content.scrollTop / rowHeight);\n            var visibleRows = Math.ceil(vHeight / rowHeight);\n            // Calculate the index by subtracting the page size from the total rows taken into account\n            var index = scrolledRows + visibleRows - this.parent.pageSettings.pageSize;\n            index = (index > 0) ? index : 0;\n            if (!isNullOrUndefined(this[\"\" + selectedRowIndex]) && this[\"\" + selectedRowIndex] !== -1 && index !== this[\"\" + selectedRowIndex] &&\n                ((this.parent.rowHeight * this.parent.pageSettings.pageSize) < content.scrollTop) && !this.parent.allowRowDragAndDrop) {\n                index = this[\"\" + selectedRowIndex];\n            }\n            this.startIndex = index;\n            this.endIndex = index + this.parent.pageSettings.pageSize;\n            if (this.endIndex > this.totalRecords) {\n                var lastInx = this.totalRecords;\n                var remains = this.endIndex % lastInx;\n                this.endIndex = lastInx;\n                this.startIndex = (this.startIndex - remains) < 0 ? 0 : (this.startIndex - remains);\n            }\n            if (currentViewData.length && (currentViewData[0][\"\" + indexValue] >= this.parent.pageSettings.pageSize / 2) &&\n                ((currentViewData[0][\"\" + indexValue] - this.startIndex) < (this.parent.pageSettings.pageSize / 2)) &&\n                this.parent.selectionModule && this.parent.selectionModule.isRowSelected) {\n                this.startIndex = currentViewData[0][\"\" + indexValue] - (this.parent.pageSettings.pageSize / 2);\n                this.endIndex = this.startIndex + this.parent.pageSettings.pageSize;\n            }\n            //var firsttdinx = parseInt(this.parent.getContent().querySelector('.e-content td').getAttribute('index'), 0);\n            var rowPt = Math.ceil(scrollArgs.offset.top / rowHeight);\n            rowPt = rowPt % this.parent.pageSettings.pageSize;\n            var firsttdinx = 0;\n            if (!isNullOrUndefined(this.parent.getRows()[parseInt(rowPt.toString(), 10)]) &&\n                !isNullOrUndefined(this.parent.getContent().querySelectorAll('.e-content tr')[parseInt(rowPt.toString(), 10)])) {\n                var attr = this.parent.getContent().querySelectorAll('.e-content tr')[parseInt(rowPt.toString(), 10)]\n                    .querySelector('td').getAttribute('index');\n                firsttdinx = +attr; // this.parent.getContent().querySelector('.e-content tr').getAttribute('data-rowindex');\n            }\n            if (firsttdinx === 0) {\n                if (this.endIndex - this.startIndex < this.parent.pageSettings.pageSize) {\n                    this.translateY = !isNullOrUndefined(this.endIndex) ?\n                        (this.endIndex - this.parent.pageSettings.pageSize) * (this.parent.rowHeight ?\n                            this.parent.rowHeight : this.parent.getRowHeight()) : 0;\n                }\n                else if (this.startIndex === this[\"\" + selectedRowIndex]) {\n                    this.translateY = scrollArgs.offset.top;\n                }\n                else {\n                    this.translateY = (scrollArgs.offset.top - (outBuffer * rowHeight) > 0) ?\n                        scrollArgs.offset.top - (outBuffer * rowHeight) + rowHeight : 0;\n                }\n            }\n            else if (this.parent.getFrozenColumns() > 0) {\n                scrollArgs.offset.top = scrollArgs.offset.top + 80;\n                this.translateY = (scrollArgs.offset.top - (outBuffer * rowHeight) > 0) ?\n                    scrollArgs.offset.top - (outBuffer * rowHeight) + 10 : 0;\n            }\n            else {\n                this.translateY = (scrollArgs.offset.top - (outBuffer * rowHeight) > 0) ?\n                    scrollArgs.offset.top - (outBuffer * rowHeight) + 10 : 0;\n            }\n        }\n        else if (downScroll && (scrollArgs.direction !== 'right' && scrollArgs.direction !== 'left' && scrollArgs.direction !== 'up') && !isNullOrUndefined(content)) {\n            var nextSetResIndex = ~~(content.scrollTop / rowHeight);\n            var isLastBlock = (this[\"\" + selectedRowIndex] + this.parent.pageSettings.pageSize) < this.totalRecords ? false : true;\n            if (!isNullOrUndefined(this[\"\" + selectedRowIndex]) && this[\"\" + selectedRowIndex] !== -1 &&\n                nextSetResIndex !== this[\"\" + selectedRowIndex] && !isLastBlock && !this.parent.allowRowDragAndDrop) {\n                nextSetResIndex = this[\"\" + selectedRowIndex];\n            }\n            var lastIndex = nextSetResIndex + this.parent.pageSettings.pageSize;\n            if (lastIndex > this.totalRecords) {\n                lastIndex = nextSetResIndex +\n                    (this.totalRecords - nextSetResIndex);\n            }\n            this.startIndex = !isLastBlock || isNullOrUndefined(this['' + selectedRowIndex]) ? lastIndex - this.parent.pageSettings.pageSize : nextSetResIndex;\n            this.endIndex = lastIndex;\n            if ((nextSetResIndex + this.parent.pageSettings.pageSize) > this.totalRecords && (this.endIndex - this.startIndex) <\n                (this.parent.pageSettings.pageSize / 2) && (this.endIndex - nextSetResIndex) < (this.parent.pageSettings.pageSize / 2)) {\n                this.startIndex = lastIndex - (this.parent.pageSettings.pageSize / 2);\n            }\n            if (currentViewData.length && this.startIndex > currentViewData[0][\"\" + indexValue] &&\n                ((this.startIndex - currentViewData[0][\"\" + indexValue]) < (this.parent.pageSettings.pageSize / 2)) &&\n                this.parent.selectionModule && this.parent.selectionModule.isRowSelected) {\n                this.startIndex = currentViewData[0][\"\" + indexValue] + (this.parent.pageSettings.pageSize / 2);\n            }\n            if (scrollArgs.offset.top > (rowHeight * this.totalRecords)) {\n                this.translateY = this.getTranslateY(scrollArgs.offset.top, content.getBoundingClientRect().height);\n            }\n            else {\n                if (this.totalRecords === this.endIndex) {\n                    if (this.totalRecords === this.endIndex) {\n                        if (this.parent.isEdit) {\n                            this.translateY = ((this.totalRecords * rowHeight) - (this.parent.pageSettings.pageSize * rowHeight))\n                                + rowHeight;\n                        }\n                        else {\n                            this.translateY = (this.totalRecords * rowHeight) - (this.parent.pageSettings.pageSize * rowHeight);\n                        }\n                    }\n                }\n                else {\n                    if (this.parent.getFrozenColumns() > 0) {\n                        this.translateY = scrollArgs.offset.top - ((rowHeight * 2) + this.parent.pageSettings.pageSize);\n                    }\n                    else {\n                        this.translateY = scrollArgs.offset.top;\n                    }\n                }\n            }\n        }\n        if (((downScroll && (scrollArgs.offset.top < (rowHeight * this.totalRecords)))\n            || (upScroll)) || (scrollArgs.direction === 'right' || scrollArgs.direction === 'left') ||\n            ((this.parent.dataSource instanceof DataManager && this.parent.dataSource.dataSource.url !== undefined\n                && !this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') && (downScroll || upScroll) || isCountRequired(this.parent))) {\n            var viewInfo = this.currentInfo = getValue('getInfoFromView', this).apply(this, [scrollArgs.direction, info, scrollArgs.offset]);\n            this.previousInfo = viewInfo;\n            if (this.prevInfo && viewInfo.event !== 'refresh-virtual-block' && ((info.axis === 'Y' && this.prevInfo.blockIndexes.toString() === viewInfo.blockIndexes.toString())\n                || ((info.axis === 'X' && this.prevInfo.columnIndexes.toString() === viewInfo.columnIndexes.toString())\n                    || (this.parent.isFrozenGrid() && this.parent.getVisibleFrozenLeftCount() >= viewInfo.columnIndexes[0]\n                        && this.prevInfo.columnIndexes.toString().includes(viewInfo.columnIndexes.toString()))))) {\n                this.parent.removeMaskRow();\n                if (Browser.isIE) {\n                    this.parent.hideSpinner();\n                }\n                this.requestType = this.requestType === 'virtualscroll' ? this['empty'] : this.requestType;\n                if (info.axis === 'Y') {\n                    this.restoreEditState();\n                }\n                return;\n            }\n            this.parent.setColumnIndexesInView(this.parent.enableColumnVirtualization ? viewInfo.columnIndexes : []);\n            var page = viewInfo.loadNext && !viewInfo.loadSelf ? viewInfo.nextInfo.page : viewInfo.page;\n            this.parent.setProperties({ pageSettings: { currentPage: page } }, true);\n            if (downScroll && this.endIndex === this.totalRecords && viewInfo.loadNext) {\n                viewInfo.loadNext = false;\n            }\n            this.requestType = 'virtualscroll';\n            if (scrollArgs.direction !== 'right' && scrollArgs.direction !== 'left') {\n                viewInfo.event = viewInfo.event === 'refresh-virtual-block' ? 'model-changed' : viewInfo.event;\n            }\n            if (this.parent.enableVirtualMaskRow) {\n                this.parent.showMaskRow(info.axis);\n                this.parent.addShimmerEffect();\n                this.parent.notify('showGanttShimmer', { requestType: 'showShimmer' });\n            }\n            this.parent.notify(viewInfo.event, { requestType: 'virtualscroll', virtualInfo: viewInfo, focusElement: scrollArgs.focusElement });\n        }\n        else {\n            if (this.parent.enableVirtualMaskRow) {\n                this.parent.removeMaskRow();\n                this.parent.notify('removeGanttShimmer', { requestType: 'hideShimmer' });\n            }\n        }\n    };\n    /**\n     * Prevents scrolling under specific conditions related to adding a new row.\n     *\n     * @param {ScrollArg} scrollArgs - The scroll event arguments containing offset details.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.shouldPreventScrolling = function (scrollArgs) {\n        var addedRow = this.parent.element.querySelector('.e-addedrow');\n        if (addedRow && this.rowPosition !== 'Top' && this.rowPosition !== 'Bottom' && scrollArgs.offset.top !== 0) {\n            this.parent.closeEdit();\n            return;\n        }\n    };\n    /**\n     * Appends content to the target element. Handles dynamic adjustments for remote data sources,\n     * frozen columns, and virtual scrolling.\n     *\n     * @param {HTMLElement} target - The target HTML element where content is to be appended.\n     * @param {DocumentFragment} newChild - The new content as a DocumentFragment to append.\n     * @param {NotifyArgs} e - Object containing information about the operation.\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.appendContent = function (target, newChild, e) {\n        if ((this.parent.dataSource instanceof DataManager && this.parent.dataSource.dataSource.url !== undefined\n            && !this.parent.dataSource.dataSource.offline && this.parent.dataSource.dataSource.url !== '') || isCountRequired(this.parent)\n            || (this.parent.isFrozenGrid() && (e.requestType === undefined || !isNullOrUndefined(e.virtualInfo) && (e.virtualInfo.direction === 'right' || e.virtualInfo.direction === 'left')))) {\n            if (getValue('isExpandCollapse', e)) {\n                this.isRemoteExpand = true;\n            }\n            _super.prototype.appendContent.call(this, target, newChild, e);\n            if (getValue('requestTypes', this).indexOf('isFrozen') !== -1) {\n                getValue('requestTypes', this).splice(getValue('requestTypes', this).indexOf('isFrozen'), 1);\n                this.requestType = this.requestType === 'isFrozen' ? undefined : this.requestType;\n            }\n        }\n        else {\n            var info = e.virtualInfo.sentinelInfo && e.virtualInfo.sentinelInfo.axis === 'Y' &&\n                getValue('currentInfo', this).page && getValue('currentInfo', this).page !== e.virtualInfo.page ?\n                getValue('currentInfo', this) : e.virtualInfo;\n            var cBlock = (info.columnIndexes[0]) - 1;\n            var cOffset = this.getColumnOffset(cBlock);\n            var width = void 0;\n            if (this.parent.enableColumnVirtualization) {\n                this.header.virtualEle.adjustTable(cOffset, 0);\n                var cIndex = info.columnIndexes;\n                width = this.getColumnOffset(cIndex[cIndex.length - 1]) - this.getColumnOffset(cIndex[0] - 1) + '';\n                this.header.virtualEle.setWrapperWidth(width);\n            }\n            this.virtualEle.setWrapperWidth(width, (Browser.isIE || Browser.info.name === 'edge'));\n            target = this.parent.createElement('tbody');\n            target.appendChild(newChild);\n            var replace = 'replaceWith';\n            this.getTable().querySelector('tbody')[\"\" + replace](target);\n            if (e.requestType === 'virtualscroll' && e.virtualInfo.sentinelInfo.axis === 'Y') {\n                this.isExpandCollapse = false;\n            }\n            if (!this.isExpandCollapse || this.translateY === 0) {\n                this.translateY = this.translateY < 0 ? 0 : this.translateY;\n                getValue('virtualEle', this).adjustTable(cOffset, this.translateY);\n            }\n            else {\n                this.isExpandCollapse = false;\n            }\n            setValue('prevInfo', this.previousInfo ? this.previousInfo : info, this);\n            if (e.requestType === 'virtualscroll' && e.virtualInfo.sentinelInfo.axis === 'X') {\n                this.parent.notify(events.autoCol, {});\n            }\n            var focusCell = 'focusCell';\n            var restoreAdd = 'restoreAdd';\n            var ensureSelectedRowPosition = 'ensureSelectedRowPosition';\n            _super.prototype[\"\" + focusCell].call(this, e);\n            var isAdd = 'isAdd';\n            if (this[\"\" + isAdd] && !this.parent.getContent().querySelector('.e-content').querySelector('.e-addedrow')) {\n                if (!(this.rowPosition === 'Top' || this.rowPosition === 'Bottom')) {\n                    if (this.dataRowIndex >= this.startIndex) {\n                        this.restoreNewRow();\n                    }\n                    else if (this.addRowIndex && this.addRowIndex > -1) {\n                        this[\"\" + isAdd] = false;\n                        this.parent.isEdit = false;\n                    }\n                }\n            }\n            this.restoreEditState();\n            _super.prototype[\"\" + restoreAdd].call(this);\n            _super.prototype[\"\" + ensureSelectedRowPosition].call(this);\n        }\n    };\n    /**\n     * Unsubscribes all event listeners to prevent memory leaks.\n     * This method is called when the component is being destroyed or when event listeners need to be cleaned up.\n     *\n     * @returns {void}\n     */\n    VirtualTreeContentRenderer.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('data-ready', this.onDataReady);\n        this.parent.off('content-ready', this.fn);\n        this.parent.off('select-virtual-Row', this.toSelectVirtualRow);\n        this.parent.off('dataBound', this.dataBoundEvent);\n        this.parent.off('rowSelected', this.rowSelectedEvent);\n        this.parent.off(events.virtualActionArgs, this.virtualOtherAction);\n        this.parent.off(events.indexModifier, this.indexModifier);\n        this.parent.off('virtual-scroll-edit-action-begin', this.beginEdit);\n        this.parent.off('virtual-scroll-add-action-begin', this.beginAdd);\n        this.parent.off('virtual-scroll-edit-success', this.virtualEditSuccess);\n        this.parent.off('edit-reset', this.resetIseditValue);\n        this.parent.off('get-virtual-data', this.getData);\n        this.parent.off('virtual-scroll-edit-cancel', this.cancelEdit);\n        this.parent.off('select-row-on-context-open', this.toSelectRowOnContextOpen);\n        this.parent.off('refresh-virtual-editform-cells', this.refreshCell);\n        this.parent.off('virtaul-cell-focus', this.cellFocus);\n        this.parent.off('virtual-scroll-edit', this.restoreEditState);\n    };\n    return VirtualTreeContentRenderer;\n}(VirtualContentRenderer));\nexport { VirtualTreeContentRenderer };\nvar TreeInterSectionObserver = /** @class */ (function (_super) {\n    __extends(TreeInterSectionObserver, _super);\n    function TreeInterSectionObserver() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.isWheeling = false;\n        _this.newPos = 0;\n        _this.lastPos = 0;\n        _this.timer = 0;\n        return _this;\n    }\n    /**\n     * Sets up observers to monitor scroll events on a given container\n     * and its movable companion within a virtual grid setup.\n     *\n     * @param {Function} callback - Function to call when a scroll event is detected.\n     * @param {Function} onEnterCallback - Function to call when a specific event, like entering a region, is detected.\n     * @param {IGrid} instance - The grid instance that requires observation.\n     * @returns {void}\n     */\n    TreeInterSectionObserver.prototype.observes = function (callback, onEnterCallback, instance) {\n        var containerRect = 'containerRect';\n        _super.prototype[\"\" + containerRect] = getValue('options', this).container.getBoundingClientRect();\n        EventHandler.add(getValue('options', this).container, 'scroll', this.virtualScrollHandlers(callback, onEnterCallback, instance), this);\n        if (getValue('options', this).movableContainer) {\n            var movableContainerRect = 'movableContainerRect';\n            _super.prototype[\"\" + movableContainerRect] = getValue('options', this).movableContainer.getBoundingClientRect();\n            EventHandler.add(getValue('options', this).movableContainer, 'scroll', this.virtualScrollHandlers(callback, onEnterCallback, instance), this);\n        }\n    };\n    /**\n     * Clears the last known position.\n     *\n     * @returns {void} No value is returned from this function.\n     */\n    TreeInterSectionObserver.prototype.clear = function () {\n        this.lastPos = null;\n    };\n    /**\n     * Handles virtual scrolling events and manages scroll direction and debouncing for rendering updates.\n     *\n     * @private\n     * @param {Function} callback - Function to call on scroll end.\n     * @param {Function} onEnterCallback - Function to call on entering a virtual scrolling area.\n     * @param {IGrid} instance - The grid instance on which virtual scrolling is being implemented.\n     * @returns {Function} - A function that processes scroll events.\n     */\n    TreeInterSectionObserver.prototype.virtualScrollHandlers = function (callback, onEnterCallback, instance) {\n        var _this = this;\n        var delay = Browser.info.name === 'chrome' ? 200 : 100;\n        var options = 'options';\n        var movableEle = 'movableEle';\n        var element = 'element';\n        var fromWheel = 'fromWheel';\n        var debounced100 = debounce(callback, delay);\n        var debounced50 = debounce(callback, 50);\n        this[\"\" + options].prevTop = this[\"\" + options].prevLeft = 0;\n        var isScrollByFocus = 'isScrollByFocus';\n        return function (e) {\n            if (instance.isEdit && instance.root.editModule[\"\" + isScrollByFocus]) {\n                instance.root.editModule[\"\" + isScrollByFocus] = false;\n                return;\n            }\n            var top = _this[\"\" + options].movableContainer ? _this[\"\" + options].container.scrollTop : e.target.scrollTop;\n            var left = _this[\"\" + options].movableContainer ? _this[\"\" + options].scrollbar.scrollLeft : e.target.scrollLeft;\n            var direction = _this[\"\" + options].prevTop < top ? 'down' : 'up';\n            direction = _this[\"\" + options].prevLeft === left ? direction : _this[\"\" + options].prevLeft < left ? 'right' : 'left';\n            _this[\"\" + options].prevTop = top;\n            _this[\"\" + options].prevLeft = left;\n            var current = _this.sentinelInfo[\"\" + direction];\n            var delta = 0;\n            _this.newPos = top;\n            if (_this.lastPos != null) { // && newPos < maxScroll\n                delta = _this.newPos - _this.lastPos;\n            }\n            _this.lastPos = _this.newPos;\n            if (_this.timer) {\n                clearTimeout(_this.timer);\n            }\n            _this.timer = setTimeout(_this.clear, 0);\n            if ((delta > 100 || delta < -100) && (e && e.preventDefault)) {\n                e.returnValue = false;\n                e.preventDefault();\n            }\n            if (_this[\"\" + options].axes.indexOf(current.axis) === -1) {\n                return;\n            }\n            var containerRect = 'containerRect';\n            _this[\"\" + containerRect] = _this[\"\" + options].container.getBoundingClientRect();\n            var check = _this.check(direction);\n            if (current.entered && (current.axis === 'X' || instance.enableVirtualMaskRow)) {\n                if (_this[\"\" + movableEle] && (direction === 'right' || direction === 'left')) {\n                    onEnterCallback(_this[\"\" + movableEle], current, direction, { top: top, left: left }, _this[\"\" + fromWheel], check);\n                }\n                else {\n                    onEnterCallback(_this[\"\" + element], current, direction, { top: top, left: left }, _this[\"\" + fromWheel], check);\n                }\n            }\n            if (check) {\n                var fn = debounced50;\n                if (current.axis === 'X') {\n                    fn({ direction: direction, sentinel: current, offset: { top: top, left: left },\n                        focusElement: document.activeElement });\n                }\n                else {\n                    if ((instance.dataSource instanceof DataManager && instance.dataSource.dataSource.url !== undefined\n                        && !instance.dataSource.dataSource.offline && instance.dataSource.dataSource.url !== '') || isCountRequired(instance)\n                        || instance.enableVirtualMaskRow) {\n                        fn = instance.enableVirtualMaskRow ? debounced100 : fn;\n                        fn({ direction: direction, sentinel: current, offset: { top: top, left: left },\n                            focusElement: document.activeElement });\n                    }\n                    else {\n                        callback({ direction: direction, sentinel: current, offset: { top: top, left: left },\n                            focusElement: document.activeElement });\n                    }\n                }\n            }\n            _this[\"\" + fromWheel] = false;\n        };\n    };\n    return TreeInterSectionObserver;\n}(InterSectionObserver));\nexport { TreeInterSectionObserver };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Grid, VirtualScroll as GridVirtualScroll } from '@syncfusion/ej2-grids';\nimport { RenderType } from '@syncfusion/ej2-grids';\nimport { getValue, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { DataManager, Predicate, Query } from '@syncfusion/ej2-data';\nimport { getExpandStatus } from '../utils';\nimport { VirtualTreeContentRenderer } from '../renderer/virtual-tree-content-render';\nimport { VirtualHeaderRenderer, getTransformValues } from '@syncfusion/ej2-grids';\n/**\n * TreeGrid Virtual Scroll module will handle Virtualization\n *\n * @hidden\n */\nvar VirtualScroll = /** @class */ (function () {\n    /**\n     * Constructor for VirtualScroll module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function VirtualScroll(parent) {\n        this.prevstartIndex = -1;\n        this.setEndIndexToGantt = true;\n        this.prevendIndex = -1;\n        this.prevSelectedRecord = [];\n        this.parent = parent;\n        Grid.Inject(TreeVirtual);\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} - Returns VirtualScroll module name\n     */\n    VirtualScroll.prototype.getModuleName = function () {\n        return 'virtualScroll';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    VirtualScroll.prototype.addEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.on(events.localPagedExpandCollapse, this.collapseExpandVirtualchilds, this);\n        this.parent.on(events.pagingActions, this.virtualPageAction, this);\n        this.parent.on(events.destroy, this.destroy, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    VirtualScroll.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.localPagedExpandCollapse, this.collapseExpandVirtualchilds);\n        this.parent.off(events.pagingActions, this.virtualPageAction);\n        this.parent.off(events.destroy, this.destroy);\n    };\n    /**\n     * Handles the virtual child collapse or expand action in a tree grid.\n     *\n     * @param {object} row - Object containing information about the collapse/expand action.\n     * @param {string} row.action - The type of action, either \"collapse\" or \"expand\".\n     * @param {HTMLTableRowElement} row.row - The HTML row element that is affected by the action.\n     * @param {ITreeData} row.record - The tree data record associated with the row.\n     * @param {RowCollapsedEventArgs} row.args - Additional event arguments related to the row collapse or expand.\n     *\n     * @returns {void} No return value as the function executes a procedure.\n     */\n    VirtualScroll.prototype.collapseExpandVirtualchilds = function (row) {\n        this.parent.grid.notify(events.virtualActionArgs, { isExpandCollapse: true });\n        this.expandCollapseRec = row.record;\n        row.record.expanded = row.action === 'collapse' ? false : true;\n        var actionDetails = {\n            result: this.parent.flatData,\n            row: row.row,\n            action: row.action,\n            record: row.record,\n            count: this.parent.flatData.length\n        };\n        this.handleSelection();\n        var requestType = getValue('isCollapseAll', this.parent) ? 'collapseAll' : 'refresh';\n        getValue('grid.renderModule', this.parent).dataManagerSuccess(actionDetails, { requestType: requestType });\n    };\n    /**\n     * Handles selection logic for the TreeGrid component.\n     *\n     * @returns {void}\n     */\n    VirtualScroll.prototype.handleSelection = function () {\n        if ((this.parent.selectionSettings.mode === 'Cell' ||\n            (this.parent.selectionSettings.mode === 'Row' && !this.parent.selectionSettings.persistSelection))) {\n            this.parent.grid.clearSelection();\n        }\n        if (getValue('isCollapseAll', this.parent) && this.parent.selectionSettings.persistSelection && this.parent.getSelectedRecords().length > 0) {\n            this.prevSelectedRecord = this.parent.getSelectedRecords();\n            this.parent.grid.clearSelection();\n        }\n    };\n    /**\n     * Handles the action related to virtual scrolling with paging details.\n     *\n     * @param {Object} pageingDetails - Contains the result data, count of results, and action arguments.\n     * @param {ITreeData[]} pageingDetails.result - The result data to be handled.\n     * @param {number} pageingDetails.count - The count of results.\n     * @param {ActionEventArgs} pageingDetails.actionArgs - The action arguments related to the virtual page action.\n     * @returns {void}\n     */\n    VirtualScroll.prototype.virtualPageAction = function (pageingDetails) {\n        var _this = this;\n        var dm = new DataManager(pageingDetails.result);\n        var expanded = new Predicate('expanded', 'notequal', null).or('expanded', 'notequal', undefined);\n        var parents = dm.executeLocal(new Query().where(expanded));\n        var visualData = parents.filter(function (e) {\n            return getExpandStatus(_this.parent, e, parents);\n        });\n        this.visualData = visualData;\n        pageingDetails.count = visualData.length;\n        this.parent.grid.notify(events.dataListener, { data: visualData });\n        var counts = { startIndex: -1, endIndex: -1, count: pageingDetails.count, requestType: pageingDetails.actionArgs.requestType };\n        this.parent.grid.notify(events.indexModifier, counts);\n        var startIndex = counts.startIndex;\n        var endIndex = counts.endIndex;\n        pageingDetails.count = visualData.length;\n        if (startIndex === -1 && endIndex === -1) {\n            var query = new Query();\n            var size = this.parent.grid.pageSettings.pageSize;\n            var current = this.parent.grid.pageSettings.currentPage;\n            var skip = size * (current - 1);\n            query = query.skip(skip).take(size);\n            dm.dataSource.json = visualData;\n            pageingDetails.result = dm.executeLocal(query);\n        }\n        else {\n            var requestType = pageingDetails.actionArgs.requestType;\n            if (requestType === 'filtering' || requestType === 'collapseAll' || requestType === 'searching' || (requestType === 'refresh' && getValue('isExpandAll', this.parent)) ||\n                (requestType === 'refresh' && this.parent.enableCollapseAll && endIndex > visualData.length && isNullOrUndefined(this.expandCollapseRec))) {\n                startIndex = 0;\n                endIndex = this.parent.grid.pageSettings.pageSize;\n                this.parent.grid.getContent().firstElementChild.scrollTop = 0;\n                this.parent.grid.notify(events.virtualActionArgs, { setTop: true });\n            }\n            if ((requestType === 'save' && pageingDetails.actionArgs.index >= (counts.count - this.parent.grid.pageSettings.pageSize)) || (requestType === 'refresh' && this.parent['isGantt'] && this.parent['isAddedFromGantt'])) {\n                if (this.setEndIndexToGantt) {\n                    this.ganttEndIndex = counts.endIndex;\n                }\n                if ((counts.endIndex + this.parent.pageSettings.pageSize >= counts.count && (this.parent.root && counts.count - this.ganttEndIndex === this.visualData.length - this.parent.root['previousFlatData'].length))\n                    || !(this.parent['isGantt'] && this.parent['isAddedFromGantt'])) {\n                    startIndex = counts.startIndex + (counts.count - counts.endIndex);\n                    endIndex = counts.count;\n                    this.setEndIndexToGantt = false;\n                }\n                this.ganttEndIndex = endIndex;\n                this.parent['isAddedFromGantt'] = false;\n            }\n            //if ((this.prevendIndex !== -1 && this.prevstartIndex !== -1) &&\n            //this.prevendIndex === endIndex && this.prevstartIndex === startIndex) {\n            var virtualWrapperElement = this.parent.grid.contentModule.virtualEle.wrapper;\n            var translateY = getTransformValues(virtualWrapperElement).height;\n            if (!isNullOrUndefined(this.expandCollapseRec) && (pageingDetails.actionArgs.requestType === 'virtualscroll' ||\n                (pageingDetails.actionArgs.requestType === 'refresh' && startIndex !== this.prevstartIndex)) &&\n                (startIndex < this.parent.getRows().length && endIndex <= startIndex + this.parent.getRows().length) && translateY === 0) {\n                startIndex = 0;\n            }\n            if ((pageingDetails.actionArgs.requestType === 'save' && startIndex !== this.prevstartIndex) &&\n                (startIndex < this.parent.getRows().length && endIndex <= startIndex + this.parent.getRows().length) && translateY === 0) {\n                startIndex = 0;\n                endIndex = startIndex + this.parent.grid.pageSettings.pageSize;\n            }\n            if (!isNullOrUndefined(this.expandCollapseRec)) {\n                var resourceCount = this.parent.grid.pageSettings.pageSize;\n                var sIndex = visualData.indexOf(this.expandCollapseRec);\n                var tempdata = visualData.slice(sIndex, sIndex + resourceCount);\n                if (tempdata.length < resourceCount && sIndex >= 0 && startIndex !== 0) {\n                    sIndex = visualData.length - resourceCount;\n                    sIndex = sIndex > 0 ? sIndex : 0;\n                    endIndex = visualData.length;\n                    if (endIndex - startIndex < resourceCount) {\n                        var newRowsCount = sIndex - startIndex;\n                        startIndex = sIndex;\n                        if (visualData.indexOf(this.expandCollapseRec) > visualData.length - resourceCount / 2) {\n                            var newTranslateY = translateY + (newRowsCount * this.parent.grid.getRowHeight());\n                            this.parent.grid.contentModule['translateY'] = newTranslateY;\n                            this.parent.grid.contentModule.virtualEle.adjustTable(0, newTranslateY);\n                        }\n                    }\n                }\n                else if (getValue('isCollapseAll', this.parent)) {\n                    startIndex = 0;\n                    endIndex = this.parent.grid.pageSettings.pageSize - 1;\n                    this.parent.grid.notify(events.virtualActionArgs, { setTop: true });\n                }\n            }\n            //}\n            if (this.prevrequestType === 'collapseAll' && pageingDetails.actionArgs.requestType === 'virtualscroll'\n                && !isNullOrUndefined(this.parent.idMapping) && startIndex === 0) {\n                startIndex = 0;\n                endIndex = this.parent.grid.pageSettings.pageSize - 1;\n                this.parent.grid.notify(events.virtualActionArgs, { setTop: true });\n            }\n            if ((this.parent.enableCollapseAll || this.parent.expandStateMapping) && !isNullOrUndefined(this.expandCollapseRec)) {\n                if (pageingDetails.count < this.parent.getRows()[0].getBoundingClientRect().height) {\n                    startIndex = 0;\n                }\n                else if (!this.parent['isExpandAll']) {\n                    startIndex = this.prevstartIndex === -1 ? 0 : this.prevstartIndex;\n                }\n            }\n            this.expandCollapseRec = null;\n            startIndex = startIndex < 0 ? 0 : startIndex;\n            if (endIndex === 0 && visualData.length > 0) {\n                pageingDetails.result = visualData;\n            }\n            else {\n                pageingDetails.result = visualData.slice(startIndex, endIndex);\n            }\n            this.prevstartIndex = startIndex;\n            this.prevendIndex = endIndex;\n            this.prevrequestType = pageingDetails.actionArgs.requestType;\n        }\n        this.parent.notify('updateAction', pageingDetails);\n    };\n    /**\n     * To destroy the virtualScroll module\n     *\n     * @returns {void}\n     * @hidden\n     */\n    VirtualScroll.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * Updates the row selection when the header checkbox is clicked and the number of selected rows\n     * does not match the current view data length.\n     *\n     * @param {RowDeselectEventArgs} args - The arguments containing details of the row deselection event.\n     * @returns {void} - This method does not return a value.\n     */\n    VirtualScroll.prototype.updateSelection = function (args) {\n        if (args.isHeaderCheckboxClicked &&\n            this.parent.grid.currentViewData.length !== this.parent.grid.selectionModule.selectedRowIndexes.length) {\n            var updateRowSelection = 'updateRowSelection';\n            for (var i = 0; i < this.parent.getRows().length; i++) {\n                if (this.parent.getRows()[parseInt(i.toString(), 10)].getElementsByClassName('e-frame e-icons e-uncheck').length) {\n                    this.parent.grid.selectionModule[\"\" + updateRowSelection](this.parent.getRows()[parseInt(i.toString(), 10)], \n                    // eslint-disable-next-line max-len\n                    this.parent.getCurrentViewRecords()[parseInt(i.toString(), 10)].index);\n                }\n            }\n        }\n    };\n    return VirtualScroll;\n}());\nexport { VirtualScroll };\nvar TreeVirtual = /** @class */ (function (_super) {\n    __extends(TreeVirtual, _super);\n    function TreeVirtual(parent, locator) {\n        var _this = _super.call(this, parent, locator) || this;\n        getValue('parent', _this).off('initial-load', getValue('instantiateRenderer', _this), _this);\n        getValue('parent', _this).on('initial-load', _this.instantiateRenderers, _this);\n        return _this;\n    }\n    TreeVirtual.prototype.getModuleName = function () {\n        return 'treeVirtualScroll';\n    };\n    TreeVirtual.prototype.instantiateRenderers = function () {\n        var parentGrid = getValue('parent', this);\n        getValue('parent', this).log(['limitation', 'virtual_height'], 'virtualization');\n        var renderer = getValue('locator', this).getService('rendererFactory');\n        if (parentGrid.enableColumnVirtualization) {\n            getValue('addRenderer', renderer)\n                .apply(renderer, [RenderType.Header, new VirtualHeaderRenderer(getValue('parent', this), getValue('locator', this))]);\n        }\n        getValue('addRenderer', renderer)\n            .apply(renderer, [RenderType.Content, new VirtualTreeContentRenderer(getValue('parent', this), getValue('locator', this))]);\n        this.ensurePageSize();\n    };\n    TreeVirtual.prototype.ensurePageSize = function () {\n        var parentGrid = getValue('parent', this);\n        var rowHeight = parentGrid.getRowHeight();\n        if (!isNullOrUndefined(parentGrid.height) && typeof (parentGrid.height) === 'string' && parentGrid.height.indexOf('%') !== -1) {\n            parentGrid.element.style.height = parentGrid.height;\n        }\n        var vHeight = parentGrid.height.toString().indexOf('%') < 0 ? parseInt(parentGrid.height.toString(), 10) :\n            parentGrid.element.getBoundingClientRect().height;\n        var blockSize = ~~(vHeight / rowHeight);\n        var height = blockSize * 2;\n        var size = parentGrid.pageSettings.pageSize;\n        parentGrid.setProperties({ pageSettings: { pageSize: size < height ? height : size } }, true);\n    };\n    return TreeVirtual;\n}(GridVirtualScroll));\nexport { TreeVirtual };\n","import { parentsUntil } from '@syncfusion/ej2-grids';\nimport { Grid, Freeze as FreezeColumn } from '@syncfusion/ej2-grids';\nimport { addClass, isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * TreeGrid Freeze module\n *\n * @hidden\n */\nvar Freeze = /** @class */ (function () {\n    /**\n     * Constructor for render module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function Freeze(parent) {\n        Grid.Inject(FreezeColumn);\n        this.parent = parent;\n        this.addEventListener();\n    }\n    Freeze.prototype.addEventListener = function () {\n        this.parent.on('rowExpandCollapse', this.rowExpandCollapse, this);\n        this.parent.on('dataBoundArg', this.dataBoundArg, this);\n        this.parent.grid.on('dblclick', this.dblClickHandler, this);\n    };\n    Freeze.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('rowExpandCollapse', this.rowExpandCollapse);\n        this.parent.off('dataBoundArg', this.dataBoundArg);\n        this.parent.grid.off('dblclick', this.dblClickHandler);\n    };\n    Freeze.prototype.rowExpandCollapse = function (args) {\n        var movableRows = this.parent.getDataRows();\n        var frozenrows = this.parent.getRows();\n        var rows;\n        var frozenRightRows;\n        var freeze = (this.parent.getFrozenLeftColumnsCount() > 0 ||\n            this.parent.getFrozenRightColumnsCount() > 0) ? true : false;\n        if (freeze) {\n            frozenRightRows = this.parent.getRows().filter(function (e) {\n                return e.querySelector('.e-gridrowindex' + args.record.index + 'level' + (args.record.level + 1));\n            });\n        }\n        if (!args.detailrows.length) {\n            rows = movableRows.filter(function (e) {\n                return e.querySelector('.e-gridrowindex' + args.record.index + 'level' + (args.record.level + 1));\n            });\n        }\n        else {\n            rows = args.detailrows;\n        }\n        for (var i = 0; i < rows.length; i++) {\n            var row = rows[parseInt(i.toString(), 10)];\n            var rData = this.parent.grid.getRowObjectFromUID(row.getAttribute('data-Uid')).data;\n            if (!isNullOrUndefined(movableRows) && row.parentElement.firstElementChild.clientHeight > 0) {\n                row.style.height = row.parentElement.firstElementChild.clientHeight + 'px';\n            }\n            this.parent['toggleRowVisibility'](row, args.action);\n            if (freeze && frozenRightRows.length) {\n                this.parent['toggleRowVisibility'](frozenRightRows[parseInt(i.toString(), 10)], args.action);\n            }\n            var queryselector = args.action === 'e-childrow-hidden' ? '.e-treecolumn-container .e-treegridcollapse'\n                : '.e-treecolumn-container .e-treegridexpand';\n            if (frozenrows[row.rowIndex].querySelector(queryselector)) {\n                var cRow = [];\n                for (var i_1 = 0; i_1 < movableRows.length; i_1++) {\n                    if (movableRows[parseInt(i_1.toString(), 10)].querySelector('.e-gridrowindex' + rData.index + 'level' + (rData.level + 1))) {\n                        cRow.push(movableRows[parseInt(i_1.toString(), 10)]);\n                    }\n                }\n                if (cRow.length) {\n                    var data = this.parent.getCurrentViewRecords()[cRow[0].rowIndex];\n                    this.rowExpandCollapse({ detailrows: cRow, action: args.action, record: data });\n                }\n            }\n        }\n    };\n    Freeze.prototype.dblClickHandler = function (e) {\n        if (parentsUntil(e.target, 'e-rowcell') &&\n            this.parent.grid.editSettings.allowEditOnDblClick && this.parent.editSettings.mode !== 'Cell' && (!e.target['classList'].contains('e-treegridcollapse') && !e.target['classList'].contains('e-treegridexpand'))) {\n            this.parent.startEdit(parentsUntil(e.target, 'e-row'));\n        }\n    };\n    Freeze.prototype.dataBoundArg = function () {\n        var checkboxColumn = this.parent.getColumns().filter(function (e) {\n            return e.showCheckbox;\n        });\n        if (checkboxColumn.length && this.parent.freezeModule && this.parent.initialRender) {\n            addClass([this.parent.element.getElementsByClassName('e-grid')[0]], 'e-checkselection');\n        }\n    };\n    Freeze.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns Freeze module name\n     */\n    Freeze.prototype.getModuleName = function () {\n        return 'freeze';\n    };\n    return Freeze;\n}());\nexport { Freeze };\n","import { Grid, ColumnChooser as GridColumnChooser } from '@syncfusion/ej2-grids';\n/**\n * TreeGrid ColumnChooser module\n *\n * @hidden\n */\nvar ColumnChooser = /** @class */ (function () {\n    /**\n     * Constructor for render module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance.\n     */\n    function ColumnChooser(parent) {\n        Grid.Inject(GridColumnChooser);\n        this.parent = parent;\n    }\n    /**\n     * Column chooser can be displayed on screen by given position(X and Y axis).\n     *\n     * @param  {number} X - Defines the X axis.\n     * @param  {number} Y - Defines the Y axis.\n     * @returns {void}\n     */\n    ColumnChooser.prototype.openColumnChooser = function (X, Y) {\n        return this.parent.grid.columnChooserModule.openColumnChooser(X, Y);\n    };\n    /**\n     * Destroys the openColumnChooser.\n     *\n     * @function destroy\n     * @returns {void}\n     */\n    ColumnChooser.prototype.destroy = function () {\n        //this.parent.grid.ColumnChooserModule.destroy();\n    };\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} Returns ColumnChooser module name\n     */\n    ColumnChooser.prototype.getModuleName = function () {\n        return 'ColumnChooser';\n    };\n    return ColumnChooser;\n}());\nexport { ColumnChooser };\n","import { Grid, InfiniteScroll as GridInfiniteScroll } from '@syncfusion/ej2-grids';\nimport { RowRenderer, resetRowIndex } from '@syncfusion/ej2-grids';\nimport { getValue, isNullOrUndefined, remove } from '@syncfusion/ej2-base';\nimport * as events from '../base/constant';\nimport { DataManager, Predicate, Query } from '@syncfusion/ej2-data';\nimport { findChildrenRecords } from '../utils';\n/**\n * TreeGrid Infinite Scroll module will handle Infinite Scrolling.\n *\n * @hidden\n */\nvar InfiniteScroll = /** @class */ (function () {\n    /**\n     * Constructor for VirtualScroll module\n     *\n     * @param {TreeGrid} parent - Tree Grid instance\n     */\n    function InfiniteScroll(parent) {\n        this.parent = parent;\n        Grid.Inject(GridInfiniteScroll);\n        this.addEventListener();\n    }\n    /**\n     * For internal use only - Get the module name.\n     *\n     * @private\n     * @returns {string} - Returns Logger module name\n     */\n    InfiniteScroll.prototype.getModuleName = function () {\n        return 'infiniteScroll';\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.addEventListener = function () {\n        this.parent.on(events.pagingActions, this.infinitePageAction, this);\n        this.parent.on('infinite-remote-expand', this.infiniteRemoteExpand, this);\n        this.parent.grid.on('delete-complete', this.infiniteDeleteHandler, this);\n        this.parent.grid.on('infinite-edit-handler', this.infiniteEditHandler, this);\n        this.parent.grid.on('infinite-crud-cancel', this.createRows, this);\n        this.parent.grid.on('content-ready', this.contentready, this);\n    };\n    /**\n     * @hidden\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off('infinite-remote-expand', this.infiniteRemoteExpand);\n        this.parent.grid.off('delete-complete', this.infiniteDeleteHandler);\n        this.parent.grid.off('infinite-edit-handler', this.infiniteEditHandler);\n        this.parent.off(events.pagingActions, this.infinitePageAction);\n        this.parent.grid.off('infinite-crud-cancel', this.createRows);\n        this.parent.grid.off('content-ready', this.contentready);\n    };\n    /**\n     * Handles the Expand Collapse action for Remote data with infinite scrolling.\n     *\n     * @param {{ index: number, childData: ITreeData[] }} args - expanded row index and its child data\n     * @param { number } args.index - expanded row index\n     * @param { ITreeData[] } args.childData - child data of expanded row\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.infiniteRemoteExpand = function (args) {\n        var rowObjects = this.parent.grid.getRowsObject();\n        var locator = 'serviceLocator';\n        var generateRows = 'generateRows';\n        var serviceLocator = this.parent.grid.infiniteScrollModule[\"\" + locator];\n        var rowRenderer = new RowRenderer(serviceLocator, null, this.parent.grid);\n        var rows = this.parent.getRows();\n        var position = args.index === rows.length - 1 ? 'after' : 'before';\n        var cols = this.parent.grid.getColumns();\n        var childRowObjects = this.parent.grid.infiniteScrollModule[\"\" + generateRows](args.childData, args);\n        var childRowElements = [];\n        for (var i = 0; i < childRowObjects.length; i++) {\n            childRowElements.push(rowRenderer.render(childRowObjects[parseInt(i.toString(), 10)], cols));\n        }\n        rowObjects.splice.apply(rowObjects, [args.index + 1, 0].concat(childRowObjects));\n        for (var i = 0; i < childRowElements.length; i++) {\n            if (position === 'after') {\n                rows[args.index + i][\"\" + position](childRowElements[parseInt(i.toString(), 10)]);\n            }\n            else {\n                rows[args.index + i + 1][\"\" + position](childRowElements[parseInt(i.toString(), 10)]);\n            }\n            rows.splice(args.index + 1 + i, 0, childRowElements[parseInt(i.toString(), 10)]);\n        }\n        resetRowIndex(this.parent.grid, this.parent.grid.getRowsObject(), this.parent.grid.getRows(), 0);\n    };\n    /**\n     * Resetted the row index for expand collapse action for cache support.\n     *\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.contentready = function () {\n        if (this.parent.infiniteScrollSettings.enableCache && !isNullOrUndefined(this.parent.editModule)) {\n            var updateIndex = 'updateIndex';\n            this.parent.editModule[\"\" + updateIndex](this.parent.grid.dataSource, this.parent.getRows(), this.parent.getCurrentViewRecords());\n            if (this.parent.getFrozenColumns()) {\n                this.parent.editModule[\"\" + updateIndex](this.parent.grid.dataSource, this.parent.getDataRows(), this.parent.getCurrentViewRecords());\n            }\n        }\n    };\n    /**\n     * Handles the page query for Data operations and CRUD actions.\n     *\n     * @param {{ result: ITreeData[], count: number, actionArgs: object }} pageingDetails - data, its count and action details\n     * @param {ITreeData[]} pageingDetails.result - data on scroll action\n     * @param {number} pageingDetails.count - data count on scroll action\n     * @param {Object} pageingDetails.actionArgs - scroll action details\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.infinitePageAction = function (pageingDetails) {\n        var dm = new DataManager(pageingDetails.result);\n        var expanded = new Predicate('expanded', 'notequal', null).or('expanded', 'notequal', undefined);\n        var visualData = dm.executeLocal(new Query().where(expanded));\n        var actionArgs = getValue('actionArgs', pageingDetails.actionArgs);\n        var actions = getValue('actions', this.parent.grid.infiniteScrollModule);\n        if (this.parent.grid.infiniteScrollModule['isInitialRender'] && !this.parent.initialRender) {\n            this.parent.grid.pageSettings.currentPage = 1;\n        }\n        var initial = actions.some(function (value) { return value === actionArgs.requestType; });\n        var initialRender = initial ? true : this.parent.initialRender ? true : false;\n        this.visualData = visualData;\n        pageingDetails.count = visualData.length;\n        if (getValue('isPrinting', pageingDetails.actionArgs)) {\n            pageingDetails.result = visualData;\n        }\n        else {\n            var query = new Query();\n            var isCache = this.parent.infiniteScrollSettings.enableCache;\n            if (isCache && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n                this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n            }\n            var size = initialRender ?\n                this.parent.grid.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks :\n                this.parent.grid.pageSettings.pageSize;\n            var current = this.parent.grid.pageSettings.currentPage;\n            if (!isNullOrUndefined(actionArgs)) {\n                var lastIndex = getValue('lastIndex', this.parent.grid.infiniteScrollModule);\n                var firstIndex = getValue('firstIndex', this.parent.grid.infiniteScrollModule);\n                if (!isCache && actionArgs.requestType === 'delete') {\n                    var skip = lastIndex - actionArgs.data.length + 1;\n                    var take = actionArgs.data.length;\n                    query = query.skip(skip).take(take);\n                }\n                else if (isCache && actionArgs.requestType === 'delete' ||\n                    (actionArgs.requestType === 'save' && actionArgs.action === 'add')) {\n                    query = query.skip(firstIndex);\n                    query = query.take(this.parent.infiniteScrollSettings.initialBlocks * this.parent.pageSettings.pageSize);\n                }\n                else {\n                    query = query.page(current, size);\n                }\n            }\n            else {\n                query = query.page(current, size);\n            }\n            dm.dataSource.json = visualData;\n            if (!isCache && !isNullOrUndefined(actionArgs) && actionArgs.requestType === 'save' && actionArgs.action === 'add') {\n                pageingDetails.result = [actionArgs.data];\n            }\n            else {\n                pageingDetails.result = dm.executeLocal(query);\n            }\n        }\n        this.parent.notify('updateAction', pageingDetails);\n    };\n    /**\n     * Handles the currentviewdata for delete operation.\n     *\n     * @param {{ e: InfiniteScrollArgs, result: Object[] }} args - Scroller and data details\n     * @param {InfiniteScrollArgs} args.e -  scroller details while CRUD\n     * @param {Object[]} args.result - data details while CRUD\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n        var infiniteData = 'infiniteCurrentViewData';\n        var infiniteCurrentViewData = this.parent.grid.infiniteScrollModule[\"\" + infiniteData];\n        var keys = Object.keys(infiniteCurrentViewData);\n        if (args.e.requestType === 'delete' && args.result.length > 1) {\n            for (var i = 1; i < args.result.length; i++) {\n                infiniteCurrentViewData[keys[keys.length - 1]].push(args.result[parseInt(i.toString(), 10)]);\n            }\n        }\n    };\n    /**\n     * Handles the row objects for delete operation.\n     *\n     * @param {ActionEventArgs} args - crud action details\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.infiniteDeleteHandler = function (args) {\n        if (args.requestType === 'delete') {\n            var rows = this.parent.grid.getRowsObject();\n            var rowElms = this.parent.getRows();\n            var data = args.data instanceof Array ? args.data : [args.data];\n            var keyField = this.parent.grid.getPrimaryKeyFieldNames()[0];\n            this.removeRows(rowElms, rows, data, keyField, true);\n            if (this.parent.getFrozenColumns() > 0) {\n                var mRows = this.parent.grid.getRowsObject();\n                var mRowElms = this.parent.grid.getRows();\n                this.removeRows(mRowElms, mRows, data, keyField);\n            }\n        }\n    };\n    /**\n     * Handles the row objects for delete operation.\n     *\n     * @param {Element[]} rowElms - row elements\n     * @param {Row<Column>[]} rows - Row object collection\n     * @param {Object[]} data - data collection\n     * @param {string} keyField - primary key name\n     * @param { boolean} isFrozen - Specifies whether frozen column enabled\n     * @returns {void}\n     */\n    InfiniteScroll.prototype.removeRows = function (rowElms, rows, data, keyField, isFrozen) {\n        var _this = this;\n        var resetInfiniteCurrentViewData = 'resetInfiniteCurrentViewData';\n        var _loop_1 = function (i) {\n            rows.filter(function (e, index) {\n                if (e.data[\"\" + keyField] === data[parseInt(i.toString(), 10)][\"\" + keyField]) {\n                    if (isFrozen) {\n                        var page = Math.ceil((index + 1) / _this.parent.grid.pageSettings.pageSize);\n                        _this.parent.grid.infiniteScrollModule[\"\" + resetInfiniteCurrentViewData](page, index);\n                    }\n                    rows.splice(index, 1);\n                    remove(rowElms[parseInt(index.toString(), 10)]);\n                    rowElms.splice(index, 1);\n                }\n            });\n        };\n        for (var i = 0; i < data.length; i++) {\n            _loop_1(i);\n        }\n    };\n    /**\n     * Handles the row objects for Add operation.\n     */\n    InfiniteScroll.prototype.createRows = function (eventArgs) {\n        var locator = 'serviceLocator';\n        var actionArgs = eventArgs.args.e;\n        var row = eventArgs.row;\n        var serviceLocator = this.parent.grid.infiniteScrollModule[\"\" + locator];\n        var rowRenderer = new RowRenderer(serviceLocator, null, this.parent.grid);\n        var tbody;\n        var currentData = this.parent.getCurrentViewRecords();\n        var currentRows = eventArgs.isMovable ? this.parent.grid.getRows()\n            : this.parent.grid.getDataRows();\n        if (eventArgs.isFrozenRight) {\n            tbody = this.parent.element.querySelector('.e-frozen-right-content').querySelector('tbody');\n        }\n        else {\n            tbody = !this.parent.grid.isFrozenGrid() ? this.parent.getContent().querySelector('tbody') : eventArgs.isMovable\n                ? this.parent.grid.getContent().querySelector('tbody')\n                : this.parent.grid.getContent().querySelector('tbody');\n        }\n        if (this.parent.frozenRows) {\n            tbody = eventArgs.isFrozenRows && this.parent.grid.infiniteScrollModule.requestType !== 'add'\n                || !eventArgs.isFrozenRows && this.parent.grid.infiniteScrollModule.requestType === 'add'\n                ? !this.parent.grid.isFrozenGrid() ? this.parent.getHeaderContent().querySelector('tbody')\n                    : eventArgs.isMovable ? this.parent.grid.getHeaderContent().querySelector('tbody')\n                        : eventArgs.isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector('tbody')\n                            : this.parent.grid.getHeaderContent().querySelector('tbody') : tbody;\n        }\n        var position;\n        var addRowIndex = 'addRowIndex';\n        var newRowIndex = this.parent.editModule[\"\" + addRowIndex];\n        for (var i = 0; i < row.length; i++) {\n            var newRow = rowRenderer.render(row[parseInt(i.toString(), 10)], this.parent.grid.getColumns());\n            if (actionArgs.requestType === 'save' && actionArgs.action === 'add') {\n                if (getValue('selectedIndex', this.parent.editModule) !== -1 && this.parent.editSettings.newRowPosition !== 'Top') {\n                    if (this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child') {\n                        position = 'after';\n                        newRowIndex += findChildrenRecords(currentData[parseInt(newRowIndex.toString(), 10)]).length;\n                        if (this.parent.editSettings.newRowPosition === 'Child') {\n                            newRowIndex -= 1; //// for child position already child record is added in childRecords so subtracting 1\n                        }\n                        currentRows[parseInt(newRowIndex.toString(), 10)][\"\" + position](newRow);\n                    }\n                    else if (this.parent.editSettings.newRowPosition === 'Above') {\n                        position = 'before';\n                        currentRows[this.parent.editModule[\"\" + addRowIndex]][\"\" + position](newRow);\n                    }\n                }\n                else if (this.parent.editSettings.newRowPosition === 'Bottom') {\n                    tbody.appendChild(newRow);\n                }\n                else {\n                    tbody.insertBefore(newRow, tbody.firstElementChild);\n                }\n            }\n            else if (actionArgs.requestType === 'delete') {\n                tbody.appendChild(newRow);\n            }\n        }\n        eventArgs.cancel = true;\n    };\n    /**\n     * To destroy the infiniteScroll module\n     *\n     * @returns {void}\n     * @hidden\n     */\n    InfiniteScroll.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return InfiniteScroll;\n}());\nexport { InfiniteScroll };\n","import * as index from './index';\nindex.TreeGrid.Inject(index.Filter, index.Page, index.Sort, index.Reorder, index.Toolbar, index.Aggregate, index.Resize, index.ColumnMenu, index.ExcelExport, index.PdfExport, index.CommandColumn, index.ContextMenu, index.Edit, index.Selection, index.VirtualScroll, index.DetailRow, index.RowDD, index.Freeze, index.ColumnChooser, index.Logger, index.InfiniteScroll);\nexport * from './index';\n"],"names":["isRemoteData","parent","dataSource","DataManager","adaptor","ODataAdaptor","WebApiAdaptor","WebMethodAdaptor","CacheAdaptor","UrlAdaptor","isCountRequired","isCheckboxcolumn","i","columns","length","parseInt","toString","showCheckbox","isFilterChildHierarchy","isNullOrUndefined","grid","searchSettings","key","hierarchyMode","allowFiltering","filterSettings","findParentRecords","records","datas","len","Object","keys","getObject","push","getExpandStatus","record","parents","childParent","parentRecord","parentItem","getParentData","uniqueID","initialRender","expandStateMapping","expanded","findChildrenRecords","hasChildRecords","childRecords","filter","item","isSummaryRow","concat","isOffline","dm","ready","extendArray","array","obj","objArr","j","getPlainData","value","index","level","taskData","requireFilter","isHidden","el","style","window","getComputedStyle","display","visibility","editAction","details","control","isSelfReference","addRowIndex","selectedIndex","columnName","addRowRecord","batchChanges","action","getPrimaryKeyFieldNames","treeData","json","modifiedData","originalData","isSkip","editSettings","mode","editModule","getBatchChanges","addAct","addAction","Array","extend","newRowPosition","k","prototype","hasOwnProperty","call","editedData","parentIdMapping","idMapping","splice","childMapping","updateParentRow","currentData_1","parentData","flatData","e","p","enableImmutableMode","removeChildRecords","currentViewRecords","getCurrentViewRecords","unshift","primaryKeys","currentdata","isChildAll","editRowIndex","updateCurrentViewData","child","index_1","currentRecords","map","enableVirtualization","updatedParent","getValue","parentUniqueID","sortSettings","indexOf","data","setRowData","row","getRowByIndex","getRows","getRowIndexByPrimaryKey","movableRow","frozenRows","getFrozenColumns","index_2","treeColumnIndex","allowRowDragAndDrop","renderModule","cellRender","cell","cells","column","getColumns","requestType","RowModifier","__extends","extendStatics","d","b","setPrototypeOf","__proto__","__","this","constructor","create","__decorate","decorators","target","desc","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","Column","options","allowEditing","edit","disableHtmlEncode","allowReordering","showColumnMenu","allowSorting","allowResizing","merge","setProperties","clipboardModule","uid","TreeGridColumn","_super","apply","Property","StackedColumn","LoadingIndicator","ChildProperty","Predicate","FilterSettings","Collection","TextWrapSettings","DOC_URL","BASE_DOC_URL","IsRowDDEnabled","Logger","Grid","Inject","GridLogger","getModuleName","log","types","args","type","detailLists","cOp","check","success","message","generateMessage","replace","gridurl","substring","treeGridObj","dataStateChange","console","logType","treeLog","treeGrid","isPrimaryKey","treeGridDetails","mapping_fields_missing","opt","ERROR","TreeClipboard","serviceLocator","_this","treeCopyContent","copiedUniqueIdCollection","treeGridParent","setCopyData","withHeader","getSelection","clipBoardTextArea","rows","selectionSettings","selectedIndexes","getSelectedRowIndexes","sort","a","classList","contains","slice","querySelectorAll","uniqueid","getSelectedRecords","copyHierarchyMode","parentContentData","childContentData","headerTextArray","getVisibleColumns","headerText","cancel","trigger","Browser","userAgent","match","setSelectionRange","select","treeLevel","copy","paste","rowIndex","colIndex","destroy","childData","GridClipboard","Selection","selectedItems","filteredList","searchingRecords","addEventListener","on","headerCheckbox","columnCheckbox","updateGridActions","checkboxSelection","removeEventListener","isDestroyed","off","_a","checkBox","checkWrap","parentsUntil","querySelector","closest","selectCheckboxes","triggerChkChangeEvent","nextElementSibling","autoCheckHierarchy","checkBoxvalue","headerSelection","persistSelection","col","query","queries","checkState","rowElement","checked","rowData","getCheckedRecords","getCheckboxcolumnIndex","mappingUid","columnIndex","headerCelllength","getHeaderContent","getAttribute","headerElement","rowChkBox","createElement","className","attrs","createCheckBox","label","add","insertBefore","cloneNode","firstChild","renderColumnCheckbox","aria-label","setAttribute","checkboxState","allowTextWrap","width","checkbox","removeClass","container","containerELe","spanEle","innerHTML","divEle","appendChild","rowIndexes","error","flatRecord","traverSelection","ischildItem","updateSelectedItems","updateParentSelection","filterModule","filteredResult","getFilteredChildRecords","count","indeter","checkChildRecords","checkBoxRecord","hasFilteredChildRecords","checkAll","multiFilterCheckState","filterResult","rec","currentRecord","checkedRecord","currentViewData","recordIndex","checkboxRecord","tr","movableTr","getDataRows","allowPaging","checkedIndex","checkBoxclass","childLength","updatedData","forEach","getCheckedrecords","getCheckedRowIndexes","Print","GridPrint","printTreeGrid","printGrid","gridElement","queryCellInfo","rowDataBound","beforeDataBound","addClass","print","SearchSettings","SelectionSettings","Render","templateResult","columnTemplateResult","reactTemplateRender","pageSettings","pageSizeMode","enableCollapseAll","rowsObj","getRowsObject","isFrozenGrid","visible","proxy_1","parentrec","rowDragAndDropModule","getContentTable","scrollHeight","getContent","clientHeight","getVisibleRecords","isReact","thisRef_1","cellElement","pad","filterLevel","totalIconsWidth","getColumnByUid","summaryRow","frozenColumns","enableColumnVirtualization","getColumnIndexByUid","emptyExpandIcon","n","iconRequired","loadChildOnDemand","expandIcon","expand","updateTreeCell","getFrozenLeftColumnsCount","getFrozenRightColumnsCount","freezerightColumns","getFrozenRightColumns","freezeLeftColumns","getFrozenLeftColumns","movableColumns","getMovableColumns","field","notify","checkboxElement","summaryData","template","treeColumn","rowTemplate","thisRef_2","colindex","templateCompiler","textContent","appendChildren","children","tempID","element","id","thisRef_3","result","refreshReactColumnTemplateByUid","columnUid","clearTemplate","undefined","indent","getIndentCount","cellIndex","getNormalizedColumnIndex","isDataRow","cellRenderer","CellRenderer","td","getCellFromIndex","refreshTD","treecell","callBack","DataManipulation","addedRecords","parentItems","taskIds","hierarchyData","storedIndex","sortedData","isSortAction","dataResults","updateParentRemoteData","beginSorting","updateData","collectExpandingRecs","dataProcessor","isRemote","convertToFlatData","Query","filterKey","params","param","where","addParams","hasChildMapping","qry","clone","executeQuery","then","DataUtil","distinct","setValue","zerothLevelData","dataManagerSuccess","hideSpinner","convertJSONData","tempData","selfData","mappingData","executeLocal","group","groupData","items","selfReferenceUpdate","createRecords","referenceData","shift","searchString","expands","this_1","childRecords_1","parent_1","getUid","parentID_1","parentRec","find","isExpandCollapse","UpdateIndexLevel","aggregates","summaryQuery","q","fn","summaryModule","calculateSummaryValue","parentLevel","rowDetails","isChild","gridRows","childRecord","targetEle","getElementsByClassName","getRowObjectFromUID","childRows","parentRow","expandingTd","detailRowModule","totalRecordsCount","fetchRemoteChildData","getDataModule","generateQuery","clonequries","idMappingValue","isNaN","take","pageSize","expandDetail","filterqry","predicates","showSpinner","inx","haveChild","resultChildData","gridQuery","aggregateQuery","virtualArgs","remoteVirtualAction","notifyArgs","enableInfiniteScrolling","contentModule","currentInfo","prevInfo","loadNext","currentPage","nextInfo","page","sortBy","parentRecords","treeGridData","currentData","hasChildren","shouldCount","rowDropSettings","targetID","dataObj","isExport","expresults","exportType","isPrinting","actionArgs","actionData","actionAddArgs","primaryKeyColumnName","dataValue","isLocalData","updateAction","filterQuery","searchQuery","results","fltrQuery","srchQuery","filteredData","gridQuery_1","srtQry","srt","compFun","sortComparer","bind","direction","dragdIndex","dropdIndex","sortArgs","temp","paging","printMode","actArgs","actualResults","dataResult","ToolbarItem","ContextMenuItems","PageSettings","AggregateColumn","intl","Internationalization","templateFn","setFormatter","cultureName","format","skeleton","formatFn","getFormatFunction","getDateFormat","getNumberFormat","getFormatter","setTemplate","helper","footerTemplate","getEnumValue","CellType","Summary","compile","property","getTemplate","setPropertiesSilent","prop","AggregateRow","EditSettings","SortDescriptor","SortSettings","InfiniteScrollSettings","TreeGrid","uniqueIDCollection","uniqueIDFilterCollection","changedRecords","deletedRecords","indentOutdentAction","isFromChartSide","modifiedRecords","stackedHeader","objectEqualityChecker","old","current","isEqual","excludeKeys","Date","getTime","TreeGrid_1","TreeGridSelection","TreeLogger","mergePersistTreeGridData","injectedModules","FreezeColumn","excelExport","excelExportProperties","isMultipleExport","workbook","isBlob","excelExportModule","Map","csvExport","pdfExport","pdfExportProperties","pdfDoc","pdfExportModule","serverExcelExport","url","isExcel","exportTreeGrid","serverPdfExport","serverCsvExport","state","processQuery","JSON","parse","treeGridModel","addOnPersist","include","fields","search","sorted","setHeaderText","form","treeGridInput","name","stringify","method","document","body","submit","remove","getColumnByField","getFormat","currencyCode","preRender","TreeGridLocale","initProperties","defaultLocale","Above","Below","Child","AddRow","ExpandAll","CollapseAll","RowIndent","RowOutdent","l10n","L10n","locale","sortByColumn","isMultiSort","sortModule","sortColumn","clearSorting","removeSortColumn","autoFitColumns","fieldNames","resizeModule","updateColumnModel","reorderColumns","fromFName","toFName","localeObject","gridLocale","treeGridLocale","load","printModule","treeGridkeyActionHandler","allowKeyboard","parentTarget","summaryElement","expandAll","collapseAll","expandCollapseRequest","parentElement","getColumnByIndex","editType","findnextRowElement","cellIndex_1","row_1","isEdit","clearSelection","findPreviousRowElement","cellIndex_2","row_2","summaryRowElement","previousElementSibling","infiniteScrollData","remoteCollapsedData","remoteExpandedData","columnModel","isExpandAll","isCollapseAll","keyConfigs","ctrlDownArrow","ctrlUpArrow","ctrlShiftUpArrow","ctrlShiftDownArrow","downArrow","upArrow","offline","RemoteSaveAdaptor","wireEvents","EventHandler","mouseClickHandler","keyboardModule","KeyboardEvents","keyAction","eventName","tabIndex","requiredModules","modules","member","toolbar","contextMenuItems","resizeCheck","allowExcelExport","freezePresent","hasFreezeProp","isArray","some","freeze","detailTemplate","allowPdfExport","showColumnChooser","extendRequiredModules","columnMenu","columnMenuItems","contextMenu","IsRowDDInjected","isIndentEnabled","allowAdding","allowDeleting","isCommandColumn","allowSelection","commands","commandsTemplate","unwireEvents","removeAttribute","loggerModule","render","portals","isVue","vueInstance","createSpinner","dataModule","autoGenerateColumns","convertTreeData","loadGrid","addListener","gridContainer","height","gridRequiredModules","appendTo","actionFailureHandler","childNodes","contentTable","refreshToolbarItems","renderComplete","destroyTemplateFn","failureCases","primaryKeyFieldNames","RecordsCount","isFrozen","test","checkboxColumn","textAlign","failureEventArgs_1","failureCase","toolbarElement","toolbarModule","getToolbar","indentID","outdentID","indentElement","outdentElement","afterGridRender","griddata","bindGridProperties","bindedDataSource","enableRtl","getGridColumns","columnQueryMode","getActualProperties","pagerTemplate","infiniteScrollSettings","enableVirtualMaskRow","loadingIndicator","enableAltRow","enableHover","enableAutoFill","enableAdaptiveUI","rowHeight","gridLines","getGridToolbar","toolbarTemplate","textWrapSettings","selectedRowIndex","getContextMenu","getGridEditSettings","clipMode","enableHtmlSanitizer","triggerEvents","IsExpandCollapseClicked","checkboxOnly","bindGridEvents","rowSelecting","isHeaderCheckboxClicked","parentQuery","selectionModule","rowDeselecting","rowSelected","virtualScrollModule","updateSelection","rowDeselected","resizeStop","excelQueryCellInfo","pdfQueryCellInfo","checkBoxChange","pdfExportComplete","excelExportComplete","excelHeaderQueryCellInfo","pdfHeaderQueryCellInfo","dataSourceChanged","recordDoubleClick","cellDeselected","cellDeselecting","columnMenuOpen","columnMenuClick","cellSelected","headerCellInfo","resizeStart","resizing","columnDrag","columnDragStart","columnDrop","beforePrint","beforeCopy","beforePaste","printComplete","actionFailure","extendedGridDataBoundEvent","extendedGridEvents","extendedGridActionEvents","extendedGridEditEvents","bindGridDragEvents","bindCallBackEvents","lastRowBorder","visiblerow","isAddBorder","isPixelHeight","dataBound","updateRowTemplate","updateAltRow","req","totalRows","updateRowSelection","prevSelectedRecord","callBackPromise_1","Deferred","beforeDataBoundArgs","resolve","toolbarClick","callBackPromise","toolbarargs","cellSelecting","cellselectingArgs","beginEdit","begineditArgs","isExpandRefresh","cellSave","isContextMenuOpen","contextitems","contextMenuModule","cellsaveArgs","cellSaved","cellEdit","promise","batchAdd","beforeBatchSave","beforeBatchAdd","batchDelete","beforeBatchDelete","batchCancel","setTimeout","treeColumnRowTemplate","datacount","defaultQuery","JsonAdaptor","actionBegin","dataManager","isQueryInvokedFromData","callBackPromise_2","actionComplete","updateTreeGridModel","ag","showChildSummary","refresh","selectedItem_1","selectedRecords","dropIndex","dropPosition","selectedRows","movableContent","frozenContent","detailDataBound","contextMenuClick","contextMenuOpen","rowDragStartHelper","rowDragStart","rowDrag","rowDrop","registeredTemplate","allowEditOnDblClick","showConfirmDialog","showDeleteConfirmDialog","allowNextRowEdit","dialog","text","getConstant","iconCss","tooltipText","Search","prefixIcon","isEmptyColumnModel","treeGridColumn","gridColumn","gridColumnCollection","_i","enablePersistence","treeColumnTextAlign","treeColumnField","lastRowCellBorderUpdated","visibleRows","from","lastVisibleRow","onPropertyChanged","newProp","properties","requireRefresh","refreshColumns","properties_1","allowMultiSorting","isDataSourceChanged","eventListener","renderTable","updateTreeColumnTextAlign","closeEdit","treeGridElement","hasTreeGridChild","removeListener","dataBind","getElementById","getPersistData","keyEntity","ignoreOnPersist","scrollPosition","ignoreOnColumn","currentObject","val","ignoreInArrays","ignoreInColumn","touches","isEditCollapse","close","isCheckBoxSelection","isPersistSelection","checkedTarget","filterTemplate","elem","isOpen","getPager","addRecord","position","saveCell","updateCell","updateRow","deleteRecord","fieldName","startEdit","editCell","enableToolbarItems","isEnable","enableItems","endEdit","openColumnChooser","x","y","columnChooserModule","deleteRow","setCellValue","primaryKey","visibleRecords","sHeight","goToPage","pageNo","pagerModule","updateExternalMessage","iterateArrayOrObject","Columns","getColumnFieldNames","getFooterContent","getFooterContentTable","showColumns","showBy","hideColumns","hideBy","getColumnHeaderByField","getColumnHeaderByIndex","getColumnHeaderByUid","getColumnIndexByField","getVirtualColIndexByUid","isRefresh","gridColumns","updateColumnsWidth","currentColumn","mergeColumns","storedColumn","setFrozenCount","splitFrozenCount","dRows","getHeaderTable","getRowInfo","getUidByColumnField","cols","indexes","refreshUI","getTreeColumn","treeIndex","updatedCols","f","refreshHeader","dialogObj","targetElement","rowInfo","collapseRow","expandRow","rowInfo_1","getCollapseExpandRecords","pagerValuePresent","pagerObj","pagerdropdownModule","isExpandingEventTriggered","expandAllPrevent","expandRows","expandingArgs","expandCollapseAllChildren","expandCollapse","expandArgs","updateExpandStateMapping","isExpandedEventTriggered","isCollapsingEventTriggered","collapseAllPrevent","collapseRows","collapsingArgs","collapseArgs","isCollapsedEventTriggered","firstElementChild","scrollTop","getRowHeight","scrollBy","totalRecords","expandAtLevel","expandAction","getRecordDetails","expandByKey","expandCollapseActionByKey","isPaging","puniqueID_1","collapseAtLevel","collapseAction","collapseByKey","primaryKeyField","startIndex","expandCollapseAll","isExpandCollapseall","updateChildOnDemand","displayAction","detailrows","remoteExpand","localExpand","lastrowIdx","lastRow","flatDataRecords","deff","data_1","length_1","Math","ceil","random","scrollHeightBeforeRefresh","rows_1","args_1","collapseRemoteChild","movableRows","freezeRightRows","rows_2","gridRowsObject","currentIndex","toggleRowVisibility","visibleRowCount","gridRow","rowsObject","rcell","arg","movablerows","rightrows","collapsingTd","collapse","expandElement","cRow","eRows","i_1","sanitize","SanitizeHtmlHelper","updateResultModel","returnResult","filterByColumn","filterOperator","filterValue","predicate","matchCase","ignoreAccent","actualFilterValue","actualOperator","clearFiltering","removeFilteredColsByField","isClearFilterBar","selectRow","isToggle","selectRows","selectCell","getSelectedRows","getMovableCellFromIndex","getMovableDataRows","getMovableRowByIndex","getMovableRows","getFrozenRightRowByIndex","getFrozenRightRows","getFrozenRightDataRows","getFrozenRightCellFromIndex","getFrozenLeftColumnHeaderByIndex","getFrozenRightColumnHeaderByIndex","getMovableColumnHeaderByIndex","getMovableColumnsCount","getVisibleMovableCount","getVisibleFrozenRightCount","getVisibleFrozenLeftCount","getFrozenCount","cnt","getSelectedRowCellIndexes","baseModule","treeModule","reorderRows","fromIndexes","toIndex","outdent","Complex","RowDropSettings","Event","NotifyPropertyChanges","Component","Reorder","GridReorder","updateTreeColumn","Resize","GridResize","fName","RowDD","canDrop","isDraggedWithChild","hasDropItem","isaddtoBottom","GridDragDrop","getChildrecordsByParentID","Rowdraging","rowDropped","rowsAdded","rowsRemoved","tObj","dropRows","orderToIndex","dropData","totalRecord","parentrow","updateRowAndCellElements","request","selectedItemIndex","selectedItem","selectedRow","selectedRecord","record_1","eventTrigger","isInvalidSelection","isRootLevel","parentItem_1","findIndex","ariaRowIndex","draggedRecord","dragRecords","draggedRecord_1","dragRecords_1","deleteDragRow","refreshGridDataSource","temporaryDataSource","indexOfDroppedRecord","droppedRecord","proxy","positionAdjustment","removeFirstrowBorder","canremove","removeLastrowBorder","canRemove","lastRowBorderElement","updateIcon","rowEle","rowPositionHeight","addErrorElem","removetopOrBottomBorder","removeChildBorder","rowTop","toolHeight","offsetHeight","positionOffSet","getOffset","contentHeight","top","offsetTop","getBoundingClientRect","divide","topRowSegment","middleRowSegment","bottomRowSegment","mouseEvent","touchEvent","posy","pageY","changedTouches","clientY","isTopSegment","isMiddleRowSegment","isBottomRowSegment","isBorderNeed","addFirstrowBorder","removeErrorElem","addLastRowborder","updateBorderStatus","topOrBottomBorder","addRemoveClasses","hasDetailTemplate","treegridColumnIndex","treeColIndex","dragRows","targetRow","regex","parentIndexLevel","dropIndexLevel","dropParentLevel","InDraggedRowIndex","parentLevelInRow","dragIndexLevel","dragParentLevel","dropActualIndex","dragIndex","includes","borderElem","node","div","gridheaderEle","toolbarHeight","multiplegrid","offsetWidth","getScrollWidth","trElement","isEmptyRow","bottomborder","gridcontentEle","bottom","scrollElem","scrollWidth","Scroll","getScrollBarWidth","dragelem","errorContainer","rowCell","errorVal","content","parentNode","removeChild","spanContent","paddingLeft","dropItemSpan","dropItemLeft","left","spanLeft","errorelem","errorValue","setStyleAttribute","rowElements","classAction","lastRowDragBorder","border","box","docElem","documentElement","pageYOffset","scrollLeft","pageXOffset","clientTop","clientLeft","round","cloneElement","cursor","rowIdx","ensuredropPosition","dropElement","ej2_instances","dragDropGrid","removeRowBorders","srcControl","targetIndex","getTargetIdx","actualData","srcControlFlatData","actualIndex","isByMethod","draggedRecord_2","fromIndex","isMultipleGrid","dragLength","reverse","dragRecords_2","dragRecord","correctIndex","offsetParent","newParentIndex","recordIndex1","dropAtTop","getChildCount","droppedRecordIndex","updateChildRecordLevel","updateChildRecord","dropMiddle","nonRepeat_1","childRecordsLength","recordLevel","targetRecord","childItem","deletedRow","removeRecords","flatParentData","childIndex","removeChildItem","idx","idz","parentIndex","deletedRecordCount","updateModifiedRecords","i_2","i_3","draggedRecords","isDuplicateData","every","TreeVirtualRowModelGenerator","getDatas","visualData","getDataInfo","getData","generateRows","virtualInfo","info","blockIndexes","getBlockIndexes","checkAndResetCache","clear","cache","groups","getBlockSize","VirtualRowModelGenerator","Filter","GridFilter","isHierarchyFilter","flatFilteredData","filteredParentRecs","updatedFilteredRecord","clearFilterLevel","dataDetails","addParentRecord","ischild","checkChildExsist","parRecord","updateParentFilteredRecord","updateFilterLevel","uniqueIDValue","childRec","isExist","parent_2","parent_3","fLevel","ExcelExport","isCollapsedStatePersist","GridExcel","updateExcelResultModel","exportRowDataBound","finalPageSetup","isCsv","Data","Promise","isLocal","ExportHelper","getQuery","customData","manipulateExportProperties","book","dtSrc","queryResult","flatsData","dataSrc","excelRow","excelrowobj","rowObj","filtercolumnlength","rowlength","excelRows","rowlevel","Boolean","expandedStatus","sublevelState","grouping","outlineLevel","isCollapsed","worksheets","pageSetup","isSummaryRowBelow","PdfExport","GridPdf","updatePdfResultModel","customsData","manipulatePdfProperties","flatDatas","paragraphIndent","Page","GridPage","collapseExpandPagedchilds","pageAction","primaryKeyField_1","ret","pageRoot","pagedResults","newResults","t","res","updatePageSize","pageingDetails","updateSize","gridPagerModule","pageSizes","getLocalizedLabel","propname","skip","size","dm_1","or","parents_1","floor","Toolbar","tool","refreshToolbar","toolbarClickHandler","indentEle","outdentEle","selectedrow","Aggregate","GridAggregate","flatChildRecords","isSort","flatRecords","summaryLength","dataLength","getChildRecordsLength","summaryRowIndex","len_1","createSummaryItem","idx_1","summaryParent","length_2","itemData","summary","displayColumn","keys_1","getSummaryValues","summaryColumn","single","getFormatFromType","tempObj","requiresCount","summaryKey","sumData","toLowerCase","calculateAggregate","disp","value_1","colIndex_1","treeCell","summaryformat","Sort","GridSort","flatSortedData","updateModel","createdSortedRecords","sortParams","iterateSort","childSort","ColumnMenu","GridColumnMenu","getColumnMenu","columnMenuModule","ContextMenu","cmenu","addRow","editRecord","_b","_c","hideItems","event","BatchEdit","batchChildCount","batchAddedRecords","batchDeletedRecords","batchAddRowRecord","batchRecords","isAdd","batchSave","batchPageAction","batchCancelAction","immutableBatchAction","nextCellIndex","getBatchRecords","getAddRowIndex","getSelectedIndex","getBatchChildCount","added","primaryKey_1","currentDataIndex","indexvalue","rowObjectIndex","getActualRowObjectIndex","newBatchRowAdded","changes","batchIndex","primaryParent","childRecordCount","updateChildCount","updateRowIndex","focusModule","table","matrix","newlyAddedRecords","childs","primarykey","parentRowIndex","getRowElementByUID","totalCount","deleteUniqueID","positionIndex","updatedRecords","primarykey_1","addRecords","endIndex","rowPosition","indexValue","Edit","prevAriaRowIndex","isAddedRowByMethod","isAddedRowByContextMenu","GridEdit","previousNewRowPosition","internalProperties","batchEditModule","crudAction","beginAdd","keyPressed","lastCellTab","contentready","editActionEvents","gridDblClick","customCellSave","savePreviousRowPosition","beforeStartEdit","beforeBatchCancel","resetIsOnBatch","getRowPosition","doubleClickTarget","dataset","addArgs","dataRowIndex","applyFormValidation","eventArgs","treeObj","keyData","paramsLength","infiniteAddAction","rowObjects","newRowObject","newRowObjectIndex","newRecord","updateInfiniteCurrentViewData","movableRowsObject","isCache","enableCache","resetRowIndex","updateIndex","newRowIndex","dataIndex","infiniteCurrentViewData","infiniteScrollModule","isOnBatch","updateGridEditMode","keyPress","prom","celleditArgs","columnObject","toolbarID","cellDetails","editedRowIndex","afterCellSave","rowIndex_1","primaryKeys_1","isTabLastRow","update","fromTable","previousValue","editArgs","filterChoiceCount","excelSearchOperator","aggregateModule","destroyWidgets","formObj","restoreFocus","saveArgs","previousData","data1","l","data2","firstAriaIndex","lastAriaIndex","withinRange","isVirtualization","focussedElement","activeElement","errors","isScrollByFocus","focus","newlyAddedRecord","seletedRow","beginAddEdit","primaryKeys_2","selector","childRecordCount1","currentDataIndex1","deletedValues","previousEditMode","previousGridEditMode","editFormValidate","destroyForm","CommandColumn","Command","DetailRow","detailrow","dataBoundArg","detaildataBound","setIndentVisibility","childRowExpand","rowExpandCollapse","actioncomplete","detailele","elements","detailData","detailRowElement","detailElement","previousSibling","expandClass","classlist","gridClas","gridclass","newNo","detailClass","spann","updtdcolum","focusElement","VirtualTreeContentRenderer","locator","translateY","maxiPage","recordAdded","preTranslate","isRemoteExpand","getModelGenerator","getRowCollection","getFrozenRightVirtualRowByIndex","isMovable","isRowObject","isFrozenRight","startIdx","rowCollection","virtualOtherAction","indexModifier","setTop","nextSetResIndex","lastIndex","root","onDataReady","refreshContentRows","observers","observes","scrollArgs","scrollListeners","onEnteredAction","gObj","scrollValues","sentinel","observer","sentinelInfo","down","offset","dataBoundEvent","rowSelectedEvent","toSelectVirtualRow","handleActionBegin","onActionComplete","virtualEditSuccess","resetIseditValue","cancelEdit","toSelectRowOnContextOpen","refreshCell","cellFocus","restoreEditState","getColumnOffset","setVirtualHeight","contents","debounceEvent","TreeInterSectionObserver","getPanel","getTranslateY","sTop","cHeight","isOnenter","gridTop","generateCells","generateCell","rowId","cellType","colSpan","oIndex","foreignKeyData","isDataCell","isTemplate","rowID","isForeignKey","isForeignColumn","Cell","withInRange","restoreNewRow","isWheel","isIE","showMaskRow","axis","top_1","offsets","xAxis","vgenerator","getColumnIndexes","columnIndexes","cOffsets","maxLeft","upScroll","virtualEle","adjustTable","header","shouldPreventScrolling","outBuffer","activeKey","downScroll","vHeight","lastInx","remains","isRowSelected","rowPt","firsttdinx","isLastBlock","viewInfo","previousInfo","removeMaskRow","setColumnIndexesInView","loadSelf","addShimmerEffect","appendContent","newChild","cBlock","cOffset","cIndex","setWrapperWidth","getTable","VirtualContentRenderer","isWheeling","newPos","lastPos","timer","callback","onEnterCallback","instance","virtualScrollHandlers","movableContainer","delay","debounced100","debounce","debounced50","prevTop","prevLeft","scrollbar","delta","clearTimeout","preventDefault","returnValue","axes","entered","InterSectionObserver","VirtualScroll","prevstartIndex","setEndIndexToGantt","prevendIndex","TreeVirtual","collapseExpandVirtualchilds","virtualPageAction","expandCollapseRec","actionDetails","handleSelection","counts","ganttEndIndex","virtualWrapperElement","wrapper","getTransformValues","resourceCount","sIndex","newRowsCount","newTranslateY","prevrequestType","selectedRowIndexes","instantiateRenderers","parentGrid","renderer","getService","RenderType","Header","VirtualHeaderRenderer","Content","ensurePageSize","GridVirtualScroll","Freeze","dblClickHandler","frozenRightRows","frozenrows","rData","queryselector","freezeModule","ColumnChooser","GridColumnChooser","X","Y","InfiniteScroll","GridInfiniteScroll","infinitePageAction","infiniteRemoteExpand","infiniteDeleteHandler","infiniteEditHandler","createRows","rowRenderer","RowRenderer","childRowObjects","childRowElements","actions","initialBlocks","maxBlocks","firstIndex","rowElms","keyField","removeRows","mRows","mRowElms","tbody","currentRows","isFrozenRows","newRow","index.Filter","index.Page","index.Sort","index.Reorder","index.Toolbar","index.Aggregate","index.Resize","index.ColumnMenu","index.ExcelExport","index.PdfExport","index.CommandColumn","index.ContextMenu","index.Edit","index.Selection","index.VirtualScroll","index.DetailRow","index.RowDD","index.Freeze","index.ColumnChooser","index.Logger","index.InfiniteScroll"],"mappings":"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"}