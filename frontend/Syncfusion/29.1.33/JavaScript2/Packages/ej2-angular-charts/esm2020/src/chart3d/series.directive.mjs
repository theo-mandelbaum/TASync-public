import { __decorate } from "tslib";
import { Directive, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { Template } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['animation', 'columnFacet', 'columnSpacing', 'columnWidth', 'dataLabel', 'dataSource', 'emptyPointSettings', 'enableTooltip', 'fill', 'groupName', 'legendImageUrl', 'legendShape', 'name', 'opacity', 'pointColorMapping', 'query', 'size', 'stackingGroup', 'tooltipFormat', 'tooltipMappingName', 'type', 'visible', 'xAxisName', 'xName', 'yAxisName', 'yName'];
let outputs = [];
/**
 * Series3D Directive
 * ```html
 * <e-chart3d-series-collection>
 * <e-chart3d-series></e-chart3d-series>
 * </e-chart3d-series-collection>
 * ```
 */
export class Chart3DSeriesDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
Chart3DSeriesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: Chart3DSeriesDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
Chart3DSeriesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: Chart3DSeriesDirective, selector: "e-chart3d-series-collection>e-chart3d-series", inputs: { animation: "animation", columnFacet: "columnFacet", columnSpacing: "columnSpacing", columnWidth: "columnWidth", dataLabel: "dataLabel", dataSource: "dataSource", emptyPointSettings: "emptyPointSettings", enableTooltip: "enableTooltip", fill: "fill", groupName: "groupName", legendImageUrl: "legendImageUrl", legendShape: "legendShape", name: "name", opacity: "opacity", pointColorMapping: "pointColorMapping", query: "query", size: "size", stackingGroup: "stackingGroup", tooltipFormat: "tooltipFormat", tooltipMappingName: "tooltipMappingName", type: "type", visible: "visible", xAxisName: "xAxisName", xName: "xName", yAxisName: "yAxisName", yName: "yName" }, queries: [{ propertyName: "dataLabel_template", first: true, predicate: ["dataLabelTemplate"], descendants: true }], usesInheritance: true, ngImport: i0 });
__decorate([
    Template()
], Chart3DSeriesDirective.prototype, "dataLabel_template", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: Chart3DSeriesDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-chart3d-series-collection>e-chart3d-series',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { dataLabel_template: [{
                type: ContentChild,
                args: ['dataLabelTemplate']
            }] } });
/**
 * Chart3DSeries Array Directive
 * @private
 */
export class Chart3DSeriesCollectionDirective extends ArrayBase {
    constructor() {
        super('series');
    }
}
Chart3DSeriesCollectionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: Chart3DSeriesCollectionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
Chart3DSeriesCollectionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: Chart3DSeriesCollectionDirective, selector: "ejs-chart3d>e-chart3d-series-collection", queries: [{ propertyName: "children", predicate: Chart3DSeriesDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: Chart3DSeriesCollectionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ejs-chart3d>e-chart3d-series-collection',
                    queries: {
                        children: new ContentChildren(Chart3DSeriesDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,