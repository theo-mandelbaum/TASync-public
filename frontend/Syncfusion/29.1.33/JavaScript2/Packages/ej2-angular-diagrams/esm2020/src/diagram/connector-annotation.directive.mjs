import { Directive, ContentChildren } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['addInfo', 'alignment', 'annotationType', 'constraints', 'content', 'displacement', 'dragLimit', 'height', 'horizontalAlignment', 'hyperlink', 'id', 'margin', 'offset', 'rotateAngle', 'rotationReference', 'segmentAngle', 'style', 'template', 'tooltip', 'type', 'verticalAlignment', 'visibility', 'width'];
let outputs = [];
/**
 * Connectors Directive
 * ```html
 * <e-connectors>
 * <e-connector>
 * <e-connector-annotations>
 * <e-connector-annotation>
 * </e-connector-annotation>
 * </e-connector-annotations>
 * </e-connector>
 * </e-connectors>
 * ```
 */
export class ConnectorAnnotationDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
ConnectorAnnotationDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ConnectorAnnotationDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
ConnectorAnnotationDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: ConnectorAnnotationDirective, selector: "e-connector>e-connector-annotations>e-connector-annotation", inputs: { addInfo: "addInfo", alignment: "alignment", annotationType: "annotationType", constraints: "constraints", content: "content", displacement: "displacement", dragLimit: "dragLimit", height: "height", horizontalAlignment: "horizontalAlignment", hyperlink: "hyperlink", id: "id", margin: "margin", offset: "offset", rotateAngle: "rotateAngle", rotationReference: "rotationReference", segmentAngle: "segmentAngle", style: "style", template: "template", tooltip: "tooltip", type: "type", verticalAlignment: "verticalAlignment", visibility: "visibility", width: "width" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ConnectorAnnotationDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-connector>e-connector-annotations>e-connector-annotation',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * ConnectorAnnotation Array Directive
 * @private
 */
export class ConnectorAnnotationsDirective extends ArrayBase {
    constructor() {
        super('annotations');
    }
}
ConnectorAnnotationsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ConnectorAnnotationsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ConnectorAnnotationsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: ConnectorAnnotationsDirective, selector: "e-connector>e-connector-annotations", queries: [{ propertyName: "children", predicate: ConnectorAnnotationDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ConnectorAnnotationsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-connector>e-connector-annotations',
                    queries: {
                        children: new ContentChildren(ConnectorAnnotationDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,