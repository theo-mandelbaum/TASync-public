{"version":3,"file":"ej2-office-chart.min.js","sources":["../../src/office-chart/chart.js","../../src/office-chart/keywords.js"],"sourcesContent":["/* eslint-disable */\n/* tslint:disable:no-any */\nimport { Chart, AccumulationChart, AccumulationLegend, PieSeries, AccumulationTooltip, AccumulationDataLabel, DateTime, BarSeries, StackingBarSeries, LineSeries, StackingLineSeries, ColumnSeries, StackingColumnSeries, AreaSeries, StackingAreaSeries, Trendlines, ScatterSeries, BubbleSeries, RadarSeries, PolarSeries, ErrorBar, SplineSeries, DataLabel, Category, Legend, Tooltip, Export } from '@syncfusion/ej2-charts';\nChart.Inject(AreaSeries, StackingAreaSeries, BarSeries, PieSeries, StackingBarSeries, PolarSeries, ScatterSeries, BubbleSeries, RadarSeries, DateTime, ColumnSeries, StackingColumnSeries, LineSeries, StackingLineSeries, ErrorBar, Trendlines, SplineSeries, DataLabel, Category, Legend, Tooltip, Export);\nAccumulationChart.Inject(AccumulationLegend, PieSeries, AccumulationTooltip, AccumulationDataLabel);\nimport { SvgRenderer } from '@syncfusion/ej2-svg-base';\nimport { createElement, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { chartTypeProperty, widthProperty, heightProperty, chartDataProperty, chartCategoryProperty, chartLegendProperty, chartPrimaryCategoryAxisProperty, chartSeriesProperty, chartTitleProperty, chartPrimaryValueAxisProperty, dataPointsProperty, seriesNameProperty, errorBarProperty, dataLabelProperty, trendLinesProperty, fillProperty, foreColorProperty, positionProperty, typeProperty, directionProperty, endStyleProperty, nameProperty, forwardProperty, backwardProperty, interceptProperty, lineProperty, rgbProperty, categoryTypeProperty, hasMajorGridLinesProperty, hasMinorGridLinesProperty, minimumValueProperty, maximumValueProperty, majorUnitProperty, categoryXNameProperty, numberFormatProperty, yValueProperty, sizeProperty, seriesFormatProperty, idProperty, isAutoMajorProperty } from '../index';\n/**\n * Chart component is used to convert office charts to ej2-charts.\n */\nvar ChartComponent = /** @class */ (function () {\n    function ChartComponent() {\n        /**\n         * @private\n         */\n        this.keywordIndex = undefined;\n        /**\n         * @private\n         */\n        this.chartYValues = [];\n    }\n    /**\n     * @private\n     */\n    ChartComponent.prototype.chartRender = function (chart, keywordIndex) {\n        this.keywordIndex = !isNullOrUndefined(keywordIndex) ? keywordIndex : 0;\n        this.chartType = chart[chartTypeProperty[this.keywordIndex]];\n        this.isPieType = (this.chartType === 'Pie' || this.chartType === 'Doughnut');\n        var chartData = this.chartData(chart, this.chartType);\n        var chartModel = {\n            enableAnimation: false,\n            width: chart[widthProperty[this.keywordIndex]] * (96 / 72) + 'px',\n            height: chart[heightProperty[this.keywordIndex]] * (96 / 72) + 'px'\n        };\n        if (this.isPieType) {\n            this.chart = new AccumulationChart(chartModel);\n        }\n        else {\n            this.chart = new Chart(chartModel);\n            this.chart.primaryXAxis = this.chartPrimaryXAxis(chart[chartPrimaryCategoryAxisProperty[this.keywordIndex]], this.chartType);\n            this.chart.primaryYAxis = this.chartPrimaryYAxis(chart[chartPrimaryValueAxisProperty[this.keywordIndex]]);\n        }\n        this.chart.series = this.chartSeries(chart[chartSeriesProperty[this.keywordIndex]], chartData, this.chartType);\n        for (var i = 0; i < this.chart.series.length; i++) {\n            this.chart.series[parseInt(i.toString(), 10)].animation.enable = false;\n        }\n        this.chart.title = chart[chartTitleProperty[this.keywordIndex]];\n        this.chart.legendSettings = this.parseChartLegend(chart[chartLegendProperty[this.keywordIndex]]);\n    };\n    /**\n     * @private\n     */\n    ChartComponent.prototype.convertChartToImage = function (chart, elementWidth, elementHeight) {\n        var _this = this;\n        var promise;\n        return promise = new Promise(function (resolve, reject) {\n            var width = 0;\n            var height = 0;\n            var dataInfo = _this.getControlsValue([chart], elementWidth, elementHeight);\n            width = width ? width : dataInfo.width;\n            height = height ? height : dataInfo.height;\n            var element = createElement('canvas');\n            var displayPixelRatio = Math.max(1, window.devicePixelRatio || 1);\n            element.width = width * (displayPixelRatio);\n            element.height = height * (displayPixelRatio);\n            element.style.width = width + 'px';\n            element.style.height = height + 'px';\n            // tslint:disable-next-line:max-line-length\n            var url = window.URL.createObjectURL(new Blob([(new XMLSerializer()).serializeToString(dataInfo.svg)], { type: 'image/svg+xml' }));\n            var image = new Image();\n            var canvasContext = element.getContext('2d');\n            canvasContext.scale(displayPixelRatio, displayPixelRatio);\n            image.onload = (function () {\n                canvasContext.drawImage(image, 0, 0);\n                window.URL.revokeObjectURL(url);\n                var dataURL = element.toDataURL('image/png');\n                resolve(dataURL);\n            });\n            image.onerror = (function () {\n                reject('Invalid data');\n            });\n            image.src = url;\n        });\n    };\n    ChartComponent.prototype.getControlsValue = function (controls, elementWidth, elementHeight) {\n        var width = 0;\n        var height = 0;\n        var content = '';\n        var svgRenderer = new SvgRenderer('').createSvg({\n            id: 'Image_Export',\n            width: 200, height: 200\n        });\n        controls.map(function (control) {\n            if (control) {\n                var svgElement = control.svgObject.cloneNode(true);\n                var groupElement = control.renderer.createGroup({\n                    style: 'transform: translateY(' + height + 'px)'\n                });\n                groupElement.appendChild(svgElement);\n                width = Math.max(control.availableSize.width, elementWidth);\n                height += control.availableSize.height;\n                content += control.svgObject.outerHTML;\n                svgRenderer.appendChild(groupElement);\n            }\n        });\n        svgRenderer.setAttribute('width', width + '');\n        svgRenderer.setAttribute('height', height + '');\n        return {\n            'width': width,\n            'height': height,\n            'svg': svgRenderer\n        };\n    };\n    ChartComponent.prototype.officeChartType = function (type) {\n        var chartType = '';\n        switch (type) {\n            case 'Area_Stacked':\n                chartType = 'StackingArea';\n                break;\n            case 'Area':\n                chartType = 'Area';\n                break;\n            case 'Area_Stacked_100':\n                chartType = 'StackingArea100';\n                break;\n            case 'Bar_Clustered':\n                chartType = 'Bar';\n                break;\n            case 'Bar_Stacked':\n                chartType = 'StackingBar';\n                break;\n            case 'Bar_Stacked_100':\n                chartType = 'StackingBar100';\n                break;\n            case 'Column_Clustered':\n                chartType = 'Column';\n                break;\n            case 'Column_Stacked':\n                chartType = 'StackingColumn';\n                break;\n            case 'Column_Stacked_100':\n                chartType = 'StackingColumn100';\n                break;\n            case 'Scatter_Markers':\n                chartType = 'Scatter';\n                break;\n            case 'Bubble':\n                chartType = 'Bubble';\n                break;\n            case 'Doughnut':\n            case 'Pie':\n                chartType = 'Pie';\n                break;\n            case 'Line_Stacked_100':\n            case 'Line_Markers_Stacked_100':\n                chartType = 'StackingLine100';\n                break;\n            case 'Line':\n            case 'Line_Markers':\n                chartType = 'Line';\n                break;\n            case 'Line_Stacked':\n            case 'Line_Markers_Stacked':\n                chartType = 'StackingLine';\n                break;\n        }\n        return chartType;\n    };\n    ChartComponent.prototype.chartSeries = function (series, data, type) {\n        // json data\n        var chartSeries = [];\n        for (var i = 0; i < series.length; i++) {\n            var seriesData = series[parseInt(i.toString(), 10)];\n            var seriesValue = this.writeChartSeries(seriesData, data, type, i);\n            chartSeries.push(seriesValue);\n        }\n        return chartSeries;\n    };\n    ChartComponent.prototype.writeChartSeries = function (seriesData, data, type, count) {\n        var chartType = this.officeChartType(type);\n        // let isAreaType: boolean = (type === 'Area_Stacked_100' || type === 'Area' || type === 'Area_Stacked');\n        var seriesFormat = seriesData[dataPointsProperty[this.keywordIndex]][parseInt(count.toString(), 10)];\n        var series = {};\n        var fill;\n        series.type = chartType;\n        series.dataSource = data;\n        series.name = seriesData[seriesNameProperty[this.keywordIndex]];\n        series.xName = 'x';\n        series.yName = 'y' + count;\n        if (type === 'Bubble') {\n            series.size = 'size' + count;\n        }\n        if (this.isPieType) {\n            series.pointColorMapping = 'color';\n            if (type === 'Doughnut') {\n                series.innerRadius = '75%';\n                series.radius = '70%';\n            }\n        }\n        else {\n            if (isNullOrUndefined(seriesFormat)) {\n                seriesFormat = seriesData[dataPointsProperty[this.keywordIndex]][0];\n            }\n            fill = this.chartFormat(seriesFormat, chartType);\n            series.fill = fill;\n            if (!isNullOrUndefined(seriesFormat[fillProperty[this.keywordIndex]][foreColorProperty[this.keywordIndex]])) {\n                series.pointColorMapping = 'color';\n            }\n        }\n        if (type === 'Line_Markers' || type === 'Line_Markers_Stacked' || type === 'Line_Markers_Stacked_100') {\n            series.marker = { visible: true };\n        }\n        if (seriesData.hasOwnProperty(dataLabelProperty[this.keywordIndex])) {\n            if (this.isPieType) {\n                series.dataLabel = this.parseDataLabels(seriesData[dataLabelProperty[this.keywordIndex]]);\n            }\n            else {\n                var data_1 = {};\n                data_1.dataLabel = this.parseDataLabels(seriesData[dataLabelProperty[this.keywordIndex]]);\n                series.marker = data_1;\n            }\n        }\n        if (seriesData.hasOwnProperty(errorBarProperty[this.keywordIndex])) {\n            var errorBarData = seriesData[errorBarProperty[this.keywordIndex]];\n            series.errorBar = this.parseErrorBars(errorBarData);\n        }\n        if (seriesData.hasOwnProperty(trendLinesProperty[this.keywordIndex])) {\n            var trendLines = seriesData[trendLinesProperty[this.keywordIndex]];\n            var trendLinesData = [];\n            for (var count_1 = 0; count_1 < trendLines.length; count_1++) {\n                var trendLine = trendLines[parseInt(count_1.toString(), 10)];\n                var data_2 = {};\n                data_2 = this.parseTrendLines(trendLine, fill);\n                trendLinesData.push(data_2);\n                series.trendlines = trendLinesData;\n            }\n        }\n        return series;\n    };\n    ChartComponent.prototype.parseDataLabels = function (label) {\n        var dataLabel = {};\n        dataLabel.visible = true;\n        if (this.isPieType) {\n            if (label[positionProperty[this.keywordIndex]] === 'BestFit' || label[positionProperty[this.keywordIndex]] === 'Inside') {\n                dataLabel.position = 'Inside';\n            }\n            else {\n                dataLabel.position = 'Outside';\n            }\n        }\n        else {\n            dataLabel.position = this.dataLabelPosition(label[positionProperty[this.keywordIndex]]);\n        }\n        return dataLabel;\n    };\n    ChartComponent.prototype.parseErrorBars = function (errorBarData) {\n        var errorBar = {};\n        errorBar.visible = true;\n        errorBar.type = errorBarData[typeProperty[this.keywordIndex]];\n        errorBar.direction = errorBarData[directionProperty[this.keywordIndex]];\n        if (errorBarData[endStyleProperty[this.keywordIndex]] === 'Cap') {\n            errorBar.errorBarCap = { width: 1 };\n        }\n        else {\n            errorBar.errorBarCap = { width: 0 };\n        }\n        return errorBar;\n    };\n    ChartComponent.prototype.parseTrendLines = function (trendLines, fill) {\n        var trendLine = {};\n        trendLine.type = trendLines[typeProperty[this.keywordIndex]];\n        trendLine.name = trendLines[nameProperty[this.keywordIndex]];\n        trendLine.forwardForecast = trendLines[forwardProperty[this.keywordIndex]];\n        trendLine.backwardForecast = trendLines[backwardProperty[this.keywordIndex]];\n        if (trendLines[interceptProperty[this.keywordIndex]] === 'NaN') {\n            trendLine.intercept = 0;\n        }\n        else {\n            trendLine.intercept = trendLines[interceptProperty[this.keywordIndex]];\n        }\n        trendLine.fill = fill;\n        return trendLine;\n    };\n    ChartComponent.prototype.dataLabelPosition = function (position) {\n        var labelPosition = 'Auto';\n        switch (position) {\n            case 'Outside':\n                labelPosition = 'Outer';\n                break;\n            case 'Center':\n                labelPosition = 'Middle';\n                break;\n            case 'Inside':\n                labelPosition = 'Top';\n                break;\n            case 'OutsideBase':\n                labelPosition = 'Bottom';\n                break;\n        }\n        return labelPosition;\n    };\n    ChartComponent.prototype.chartFormat = function (dataPoints, type) {\n        var format = dataPoints;\n        if (type === 'Line' || type === 'StackingLine' || type === 'StackingLine100') {\n            return format[lineProperty[this.keywordIndex]][rgbProperty[this.keywordIndex]];\n        }\n        else {\n            return format[fillProperty[this.keywordIndex]][rgbProperty[this.keywordIndex]];\n        }\n    };\n    ChartComponent.prototype.chartPrimaryXAxis = function (data, type) {\n        // json data\n        var primaryXAxis = {};\n        if (data[chartTitleProperty[this.keywordIndex]]) {\n            primaryXAxis.title = data[chartTitleProperty[this.keywordIndex]];\n        }\n        var categoryType = this.chartCategoryType(data[categoryTypeProperty[this.keywordIndex]]);\n        primaryXAxis.valueType = categoryType;\n        if (categoryType === 'DateTime') {\n            primaryXAxis.intervalType = 'Days';\n            primaryXAxis.labelFormat = 'M/d/yyyy';\n            primaryXAxis.edgeLabelPlacement = 'Shift';\n        }\n        if (type === 'Scatter_Markers' || type === 'Bubble') {\n            this.checkAndSetAxisValue(primaryXAxis, data);\n        }\n        if (this.parseBoolValue(data[hasMajorGridLinesProperty[this.keywordIndex]])) {\n            primaryXAxis.majorGridLines = { width: 1 };\n        }\n        if (this.parseBoolValue(data[hasMinorGridLinesProperty[this.keywordIndex]])) {\n            primaryXAxis.minorTicksPerInterval = 4;\n        }\n        return primaryXAxis;\n    };\n    ChartComponent.prototype.chartCategoryType = function (categoryType) {\n        var type = '';\n        switch (categoryType) {\n            case 'Time':\n                type = 'DateTime';\n                break;\n            case 'Automatic':\n                type = 'Category';\n                break;\n        }\n        return type;\n    };\n    ChartComponent.prototype.chartPrimaryYAxis = function (data) {\n        // json data\n        var primaryYAxis = {};\n        if (data[chartTitleProperty[this.keywordIndex]]) {\n            primaryYAxis.title = data[chartTitleProperty[this.keywordIndex]];\n        }\n        this.checkAndSetAxisValue(primaryYAxis, data);\n        if (data[hasMajorGridLinesProperty[this.keywordIndex]]) {\n            primaryYAxis.majorGridLines = { width: 1 };\n        }\n        if (data[hasMinorGridLinesProperty[this.keywordIndex]]) {\n            primaryYAxis.minorTicksPerInterval = 4;\n        }\n        return primaryYAxis;\n    };\n    ChartComponent.prototype.checkAndSetAxisValue = function (primaryYAxis, data) {\n        if (data[minimumValueProperty[this.keywordIndex]] !== 0) {\n            primaryYAxis.minimum = data[minimumValueProperty[this.keywordIndex]];\n        }\n        if (data[maximumValueProperty[this.keywordIndex]] !== 0) {\n            primaryYAxis.maximum = data[maximumValueProperty[this.keywordIndex]];\n        }\n        if (data[majorUnitProperty[this.keywordIndex]] !== 0) {\n            var isAutoMajor = data[isAutoMajorProperty[this.keywordIndex]];\n            if (isAutoMajor && this.parseBoolValue(isAutoMajor)) {\n                var majorUnit = this.calculateMajorUnit(this.chartYValues);\n                if (majorUnit < 10 && (this.chartType === \"Bar_Stacked_100\" || this.chartType === \"Line_Stacked_100\" || this.chartType === \"Column_Stacked_100\" || this.chartType === \"Line_Markers_Stacked_100\" || this.chartType === \"Area_Stacked_100\")) {\n                    primaryYAxis.interval = 10;\n                }\n                else {\n                    primaryYAxis.interval = majorUnit;\n                }\n            }\n            else {\n                primaryYAxis.interval = data[majorUnitProperty[this.keywordIndex]];\n            }\n        }\n    };\n    ChartComponent.prototype.calculateMajorUnit = function (chartYValues) {\n        if (chartYValues && chartYValues.length > 0) {\n            var maxValue = Number.MIN_VALUE;\n            var minValue = Number.MAX_VALUE;\n            for (var i = 0; i < chartYValues.length; i++) {\n                var yValue = chartYValues[parseInt(i.toString(), 10)];\n                if (yValue > maxValue) {\n                    maxValue = yValue;\n                }\n                if (yValue < minValue) {\n                    minValue = yValue;\n                }\n            }\n            var range = maxValue - minValue;\n            var intervalSize = range / 1.5;\n            return this.roundToNiceNumber(intervalSize);\n        }\n        return 1;\n    };\n    ChartComponent.prototype.roundToNiceNumber = function (range) {\n        var log10 = Math.floor(Math.log(range) / Math.log(10));\n        var pow10 = Math.pow(10, log10);\n        var frac = range / pow10;\n        if (frac < 1.5) {\n            return 1 * pow10;\n        }\n        else if (frac < 3) {\n            return 2 * pow10;\n        }\n        else if (frac < 7) {\n            return 5 * pow10;\n        }\n        else {\n            return 10 * pow10;\n        }\n    };\n    ChartComponent.prototype.chartData = function (chart, type) {\n        // json data\n        var data = chart[chartCategoryProperty[this.keywordIndex]];\n        var chartData = [];\n        for (var i = 0; i < data.length; i++) {\n            var xData = data[parseInt(i.toString(), 10)];\n            var plotValue = this.chartPlotData(xData, chart, type, i);\n            chartData.push(plotValue);\n        }\n        return chartData;\n    };\n    ChartComponent.prototype.chartPlotData = function (data, chart, type, count) {\n        var _this = this;\n        var plotValue = {};\n        var series = chart[chartSeriesProperty[this.keywordIndex]];\n        if (chart[chartPrimaryCategoryAxisProperty[this.keywordIndex]][numberFormatProperty[this.keywordIndex]] === 'm/d/yyyy') {\n            var date = data[categoryXNameProperty[this.keywordIndex]];\n            var array = date.split('/');\n            var month = Number(array[0]);\n            var day = Number(array[1]);\n            var year = Number(array[2]);\n            plotValue.x = new Date(year, month - 1, day);\n        }\n        else {\n            plotValue.x = data[categoryXNameProperty[this.keywordIndex]];\n        }\n        for (var j = 0; j < series.length; j++) {\n            var yData = data[chartDataProperty[this.keywordIndex]][parseInt(j.toString(), 10)];\n            if (!isNullOrUndefined(yData)) {\n                var yValue = yData[yValueProperty[this.keywordIndex]];\n                this.chartYValues.push(yValue);\n                plotValue['y' + j] = yValue;\n                if (type === 'Bubble') {\n                    plotValue['size' + j] = yData[sizeProperty[this.keywordIndex]];\n                }\n            }\n            if (chart[chartTypeProperty[this.keywordIndex]] === 'Pie' || chart[chartTypeProperty[this.keywordIndex]] === 'Doughnut' || chart[chartTypeProperty[this.keywordIndex]] === 'Column_Stacked') {\n                var seriesData = series[parseInt(j.toString(), 10)];\n                var seriesDataPoints = seriesData[dataPointsProperty[this.keywordIndex]].find(function (obj) {\n                    return obj[idProperty[_this.keywordIndex]] === count;\n                });\n                if (!isNullOrUndefined(seriesDataPoints)) {\n                    var color = this.chartFormat(seriesDataPoints, type);\n                    if (chart[chartTypeProperty[this.keywordIndex]] !== 'Column_Stacked') {\n                        plotValue.color = color;\n                    }\n                    else {\n                        plotValue['color' + j] = color;\n                    }\n                }\n                else {\n                    if (seriesData[dataPointsProperty[this.keywordIndex]].length > 1 && seriesData[dataPointsProperty[this.keywordIndex]][parseInt(count.toString(), 10)][idProperty[this.keywordIndex]] === 0) {\n                        seriesDataPoints = seriesData[dataPointsProperty[this.keywordIndex]][parseInt(count.toString(), 10)];\n                        var color = this.chartFormat(seriesDataPoints, type);\n                        if (chart[chartTypeProperty[this.keywordIndex]] !== 'Column_Stacked') {\n                            plotValue.color = color;\n                        }\n                        else {\n                            plotValue['color' + j] = color;\n                        }\n                    }\n                    else {\n                        if (!isNullOrUndefined(seriesData[seriesFormatProperty[this.keywordIndex]]) && !isNullOrUndefined(seriesData[seriesFormatProperty[this.keywordIndex]][fillProperty[this.keywordIndex]])) {\n                            if (seriesData[seriesFormatProperty[this.keywordIndex]][fillProperty[this.keywordIndex]][rgbProperty[this.keywordIndex]].length > 7) {\n                                var color = this.getColor(seriesData[seriesFormatProperty[this.keywordIndex]][fillProperty[this.keywordIndex]][rgbProperty[this.keywordIndex]]);\n                                if (chart[chartTypeProperty[this.keywordIndex]] !== 'Column_Stacked') {\n                                    plotValue.color = color;\n                                }\n                                else {\n                                    plotValue['color' + j] = color;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return plotValue;\n    };\n    ChartComponent.prototype.getColor = function (color) {\n        if (color.length > 0) {\n            if (color[0] === '#') {\n                if (color.length > 7) {\n                    return color.substr(0, 7);\n                }\n            }\n        }\n        return color;\n    };\n    ChartComponent.prototype.parseChartLegend = function (data) {\n        var legendSettings = {};\n        var position = data[positionProperty[this.keywordIndex]];\n        if (position === 'Corner') {\n            position = 'right';\n        }\n        if (position) {\n            legendSettings.visible = true;\n            legendSettings.position = position.charAt(0).toUpperCase() + position.slice(1);\n        }\n        else {\n            legendSettings.visible = false;\n        }\n        return legendSettings;\n    };\n    ChartComponent.prototype.parseBoolValue = function (value) {\n        if (typeof value === 'string' || value instanceof String) {\n            if (isNullOrUndefined(value) || value === 'f' || value === '0' || value === 'off' || value === 'false') {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        else {\n            if (value === 1 || value === true) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    /**\n     * Destroys the internal objects which is maintained.\n     */\n    ChartComponent.prototype.destroy = function () {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n        this.chart = undefined;\n        if (this.chartYValues) {\n            this.chartYValues = [];\n        }\n        this.chartYValues = undefined;\n    };\n    return ChartComponent;\n}());\nexport { ChartComponent };\n","export var widthProperty = ['width', 'w'];\nexport var heightProperty = ['height', 'h'];\nexport var chartDataProperty = ['chartData', 'chd'];\nexport var chartCategoryProperty = ['chartCategory', 'c'];\nexport var chartSeriesProperty = ['chartSeries', 'cs'];\nexport var chartLegendProperty = ['chartLegend', 'cl'];\nexport var chartPrimaryCategoryAxisProperty = ['chartPrimaryCategoryAxis', 'cpca'];\nexport var chartPrimaryValueAxisProperty = ['chartPrimaryValueAxis', 'cpva'];\nexport var chartTitleProperty = ['chartTitle', 'ctt'];\nexport var chartTypeProperty = ['chartType', 'ct'];\nexport var trendLinesProperty = ['trendLines', 'tl'];\nexport var dataPointsProperty = ['dataPoints', 'dp'];\nexport var seriesNameProperty = ['seriesName', 'sn'];\nexport var dataLabelProperty = ['dataLabel', 'sl'];\nexport var errorBarProperty = ['errorBar', 'eb'];\nexport var fillProperty = ['fill', 'f'];\nexport var lineProperty = ['line', 'l'];\nexport var rgbProperty = ['rgb', 'rgb'];\nexport var idProperty = ['id', 'i'];\nexport var foreColorProperty = ['foreColor', 'fc'];\nexport var positionProperty = ['position', 'p'];\nexport var typeProperty = ['type', 't'];\nexport var nameProperty = ['name', 'n'];\nexport var directionProperty = ['direction', 'dir'];\nexport var endStyleProperty = ['endStyle', 'est'];\nexport var forwardProperty = ['forward', 'fw'];\nexport var backwardProperty = ['backward', 'bw'];\nexport var interceptProperty = ['intercept', 'itr'];\nexport var categoryTypeProperty = ['categoryType', 'ct'];\nexport var hasMajorGridLinesProperty = ['hasMajorGridLines', 'hmajgl'];\nexport var hasMinorGridLinesProperty = ['hasMinorGridLines', 'hmingl'];\nexport var majorUnitProperty = ['majorUnit', 'maju'];\nexport var isAutoMajorProperty = ['isAutoMajor', 'iam'];\nexport var maximumValueProperty = ['maximumValue', 'maxv'];\nexport var minimumValueProperty = ['minimumValue', 'minv'];\nexport var categoryXNameProperty = ['categoryXName', 'cx'];\nexport var numberFormatProperty = ['numberFormat', 'nf'];\nexport var yValueProperty = ['yValue', 'y'];\nexport var sizeProperty = ['size', 'sz'];\nexport var seriesFormatProperty = ['seriesFormat', 'sf'];\n"],"names":["Inject","AreaSeries","StackingAreaSeries","BarSeries","PieSeries","StackingBarSeries","PolarSeries","ScatterSeries","BubbleSeries","RadarSeries","DateTime","ColumnSeries","StackingColumnSeries","LineSeries","StackingLineSeries","ErrorBar","Trendlines","SplineSeries","DataLabel","Category","Legend","Tooltip","Export","AccumulationLegend","AccumulationTooltip","AccumulationDataLabel","ChartComponent","this","keywordIndex","undefined","chartYValues","prototype","chartRender","chart","isNullOrUndefined","chartType","chartTypeProperty","isPieType","chartData","chartModel","enableAnimation","width","widthProperty","height","heightProperty","AccumulationChart","Chart","primaryXAxis","chartPrimaryXAxis","chartPrimaryCategoryAxisProperty","primaryYAxis","chartPrimaryYAxis","chartPrimaryValueAxisProperty","series","chartSeries","chartSeriesProperty","i","length","parseInt","toString","animation","enable","title","chartTitleProperty","legendSettings","parseChartLegend","chartLegendProperty","convertChartToImage","elementWidth","elementHeight","_this","Promise","resolve","reject","dataInfo","getControlsValue","element","createElement","displayPixelRatio","Math","max","window","devicePixelRatio","style","url","URL","createObjectURL","Blob","XMLSerializer","serializeToString","svg","type","image","Image","canvasContext","getContext","scale","onload","drawImage","revokeObjectURL","dataURL","toDataURL","onerror","src","controls","content","svgRenderer","SvgRenderer","createSvg","id","map","control","svgElement","svgObject","cloneNode","groupElement","renderer","createGroup","appendChild","availableSize","outerHTML","setAttribute","officeChartType","data","seriesData","seriesValue","writeChartSeries","push","count","fill","seriesFormat","dataPointsProperty","dataSource","name","seriesNameProperty","xName","yName","size","pointColorMapping","innerRadius","radius","chartFormat","fillProperty","foreColorProperty","marker","visible","hasOwnProperty","dataLabelProperty","dataLabel","parseDataLabels","data_1","errorBarProperty","errorBarData","errorBar","parseErrorBars","trendLinesProperty","trendLines","trendLinesData","count_1","trendLine","data_2","parseTrendLines","trendlines","label","positionProperty","position","dataLabelPosition","typeProperty","direction","directionProperty","endStyleProperty","errorBarCap","nameProperty","forwardForecast","forwardProperty","backwardForecast","backwardProperty","interceptProperty","intercept","labelPosition","dataPoints","format","lineProperty","rgbProperty","categoryType","chartCategoryType","categoryTypeProperty","valueType","intervalType","labelFormat","edgeLabelPlacement","checkAndSetAxisValue","parseBoolValue","hasMajorGridLinesProperty","majorGridLines","hasMinorGridLinesProperty","minorTicksPerInterval","minimumValueProperty","minimum","maximumValueProperty","maximum","majorUnitProperty","isAutoMajor","isAutoMajorProperty","majorUnit","calculateMajorUnit","interval","maxValue","Number","MIN_VALUE","minValue","MAX_VALUE","yValue","intervalSize","roundToNiceNumber","range","log10","floor","log","pow10","pow","frac","chartCategoryProperty","xData","plotValue","chartPlotData","numberFormatProperty","array","categoryXNameProperty","split","month","day","year","x","Date","j","yData","chartDataProperty","yValueProperty","sizeProperty","seriesDataPoints","find","obj","idProperty","color","seriesFormatProperty","getColor","substr","charAt","toUpperCase","slice","value","String","destroy"],"mappings":"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"}