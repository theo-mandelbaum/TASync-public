import { __decorate } from "tslib";
import { Component, ChangeDetectionStrategy, ContentChild } from '@angular/core';
import { ComponentBase, ComponentMixins, setValue } from '@syncfusion/ej2-angular-base';
import { ImageEditor } from '@syncfusion/ej2-image-editor';
import { Template } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
export const inputs = ['allowUndoRedo', 'cssClass', 'disabled', 'enablePersistence', 'enableRtl', 'finetuneSettings', 'fontFamily', 'height', 'isReadOnly', 'locale', 'quickAccessToolbarTemplate', 'selectionSettings', 'showQuickAccessToolbar', 'theme', 'toolbar', 'toolbarTemplate', 'uploadSettings', 'width', 'zoomSettings'];
export const outputs = ['beforeSave', 'click', 'created', 'cropping', 'destroyed', 'editComplete', 'fileOpened', 'finetuneValueChanging', 'flipping', 'frameChange', 'imageFiltering', 'panning', 'quickAccessToolbarItemClick', 'quickAccessToolbarOpen', 'resizing', 'rotating', 'saved', 'selectionChanging', 'shapeChange', 'shapeChanging', 'toolbarCreated', 'toolbarItemClicked', 'toolbarUpdating', 'zooming'];
export const twoWays = [''];
/**
 * Represents the EJ2 Angular ImageEditor Component.
 * ```html
 * <ejs-imageeditor></ejs-imageeditor>
 * ```
 */
let ImageEditorComponent = class ImageEditorComponent extends ImageEditor {
    constructor(ngEle, srenderer, viewContainerRef, injector) {
        super();
        this.ngEle = ngEle;
        this.srenderer = srenderer;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.element = this.ngEle.nativeElement;
        this.injectedModules = this.injectedModules || [];
        this.registerEvents(outputs);
        this.addTwoWay.call(this, twoWays);
        setValue('currentInstance', this, this.viewContainerRef);
        this.context = new ComponentBase();
    }
    ngOnInit() {
        this.context.ngOnInit(this);
    }
    ngAfterViewInit() {
        this.context.ngAfterViewInit(this);
    }
    ngOnDestroy() {
        this.context.ngOnDestroy(this);
    }
    ngAfterContentChecked() {
        this.context.ngAfterContentChecked(this);
    }
};
ImageEditorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ImageEditorComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ViewContainerRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
ImageEditorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: ImageEditorComponent, selector: "ejs-imageeditor", inputs: { allowUndoRedo: "allowUndoRedo", cssClass: "cssClass", disabled: "disabled", enablePersistence: "enablePersistence", enableRtl: "enableRtl", finetuneSettings: "finetuneSettings", fontFamily: "fontFamily", height: "height", isReadOnly: "isReadOnly", locale: "locale", quickAccessToolbarTemplate: "quickAccessToolbarTemplate", selectionSettings: "selectionSettings", showQuickAccessToolbar: "showQuickAccessToolbar", theme: "theme", toolbar: "toolbar", toolbarTemplate: "toolbarTemplate", uploadSettings: "uploadSettings", width: "width", zoomSettings: "zoomSettings" }, outputs: { beforeSave: "beforeSave", click: "click", created: "created", cropping: "cropping", destroyed: "destroyed", editComplete: "editComplete", fileOpened: "fileOpened", finetuneValueChanging: "finetuneValueChanging", flipping: "flipping", frameChange: "frameChange", imageFiltering: "imageFiltering", panning: "panning", quickAccessToolbarItemClick: "quickAccessToolbarItemClick", quickAccessToolbarOpen: "quickAccessToolbarOpen", resizing: "resizing", rotating: "rotating", saved: "saved", selectionChanging: "selectionChanging", shapeChange: "shapeChange", shapeChanging: "shapeChanging", toolbarCreated: "toolbarCreated", toolbarItemClicked: "toolbarItemClicked", toolbarUpdating: "toolbarUpdating", zooming: "zooming" }, queries: [{ propertyName: "toolbarTemplate", first: true, predicate: ["toolbarTemplate"], descendants: true }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    Template()
], ImageEditorComponent.prototype, "toolbarTemplate", void 0);
ImageEditorComponent = __decorate([
    ComponentMixins([ComponentBase])
], ImageEditorComponent);
export { ImageEditorComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ImageEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ejs-imageeditor',
                    inputs: inputs,
                    outputs: outputs,
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ViewContainerRef }, { type: i0.Injector }]; }, propDecorators: { toolbarTemplate: [{
                type: ContentChild,
                args: ['toolbarTemplate']
            }] } });
//# sourceMappingURL=data:application/json;base64,