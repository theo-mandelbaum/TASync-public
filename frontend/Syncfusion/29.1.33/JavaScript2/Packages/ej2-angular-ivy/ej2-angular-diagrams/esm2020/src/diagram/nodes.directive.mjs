import { Directive, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { NodeFixedUserHandlesDirective } from './node-fixeduserhandle.directive';
import { NodeAnnotationsDirective } from './node-annotation.directive';
import { PortsDirective } from './ports.directive';
import * as i0 from "@angular/core";
let input = ['addInfo', 'annotations', 'backgroundColor', 'borderColor', 'borderWidth', 'branch', 'children', 'collapseIcon', 'columnIndex', 'columnSpan', 'columns', 'constraints', 'container', 'data', 'dragSize', 'excludeFromLayout', 'expandIcon', 'fixedUserHandles', 'flip', 'flipMode', 'height', 'horizontalAlignment', 'id', 'isExpanded', 'layoutInfo', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'offsetX', 'offsetY', 'padding', 'pivot', 'ports', 'previewSize', 'rotateAngle', 'rowIndex', 'rowSpan', 'rows', 'shadow', 'shape', 'style', 'symbolInfo', 'tooltip', 'verticalAlignment', 'visible', 'width', 'wrapper', 'zIndex'];
let outputs = [];
/**
 * Nodes Directive
 * ```html
 * <e-nodes>
 * <e-node></e-node>
 * </e-nodes>
 * ```
 */
export class NodeDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['fixedUserHandles', 'annotations', 'ports'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
NodeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NodeDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
NodeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: NodeDirective, selector: "e-nodes>e-node", inputs: { addInfo: "addInfo", annotations: "annotations", backgroundColor: "backgroundColor", borderColor: "borderColor", borderWidth: "borderWidth", branch: "branch", children: "children", collapseIcon: "collapseIcon", columnIndex: "columnIndex", columnSpan: "columnSpan", columns: "columns", constraints: "constraints", container: "container", data: "data", dragSize: "dragSize", excludeFromLayout: "excludeFromLayout", expandIcon: "expandIcon", fixedUserHandles: "fixedUserHandles", flip: "flip", flipMode: "flipMode", height: "height", horizontalAlignment: "horizontalAlignment", id: "id", isExpanded: "isExpanded", layoutInfo: "layoutInfo", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", offsetX: "offsetX", offsetY: "offsetY", padding: "padding", pivot: "pivot", ports: "ports", previewSize: "previewSize", rotateAngle: "rotateAngle", rowIndex: "rowIndex", rowSpan: "rowSpan", rows: "rows", shadow: "shadow", shape: "shape", style: "style", symbolInfo: "symbolInfo", tooltip: "tooltip", verticalAlignment: "verticalAlignment", visible: "visible", width: "width", wrapper: "wrapper", zIndex: "zIndex" }, queries: [{ propertyName: "childFixedUserHandles", first: true, predicate: NodeFixedUserHandlesDirective, descendants: true }, { propertyName: "childAnnotations", first: true, predicate: NodeAnnotationsDirective, descendants: true }, { propertyName: "childPorts", first: true, predicate: PortsDirective, descendants: true }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NodeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-nodes>e-node',
                    inputs: input,
                    outputs: outputs,
                    queries: {
                        childFixedUserHandles: new ContentChild(NodeFixedUserHandlesDirective),
                        childAnnotations: new ContentChild(NodeAnnotationsDirective),
                        childPorts: new ContentChild(PortsDirective)
                    }
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * Node Array Directive
 * @private
 */
export class NodesDirective extends ArrayBase {
    constructor() {
        super('nodes');
    }
}
NodesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NodesDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NodesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: NodesDirective, selector: "ej-diagram>e-nodes", queries: [{ propertyName: "children", predicate: NodeDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: NodesDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ej-diagram>e-nodes',
                    queries: {
                        children: new ContentChildren(NodeDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,