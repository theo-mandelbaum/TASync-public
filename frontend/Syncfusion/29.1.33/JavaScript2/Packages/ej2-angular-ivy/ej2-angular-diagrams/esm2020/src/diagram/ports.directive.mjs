import { Directive, ContentChildren } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['addInfo', 'connectionDirection', 'constraints', 'height', 'horizontalAlignment', 'id', 'inEdges', 'margin', 'offset', 'outEdges', 'pathData', 'shape', 'style', 'tooltip', 'verticalAlignment', 'visibility', 'width'];
let outputs = [];
/**
 * Nodes Directive
 * ```html
 * <e-nodes>
 * <e-node>
 * <e-node-ports>
 * <e-node-port>
 * </e-node-port>
 * </e-node-ports>
 * </e-node>
 * </e-nodes>
 * ```
 */
export class PortDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
PortDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PortDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
PortDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: PortDirective, selector: "e-node>e-node-ports>e-node-port", inputs: { addInfo: "addInfo", connectionDirection: "connectionDirection", constraints: "constraints", height: "height", horizontalAlignment: "horizontalAlignment", id: "id", inEdges: "inEdges", margin: "margin", offset: "offset", outEdges: "outEdges", pathData: "pathData", shape: "shape", style: "style", tooltip: "tooltip", verticalAlignment: "verticalAlignment", visibility: "visibility", width: "width" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PortDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-node>e-node-ports>e-node-port',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * Port Array Directive
 * @private
 */
export class PortsDirective extends ArrayBase {
    constructor() {
        super('ports');
    }
}
PortsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PortsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
PortsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: PortsDirective, selector: "e-node>e-node-ports", queries: [{ propertyName: "children", predicate: PortDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PortsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-node>e-node-ports',
                    queries: {
                        children: new ContentChildren(PortDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,