import { __decorate } from "tslib";
import { Directive, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { Template } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['animation', 'dataLabel', 'dataSource', 'emptyPointSettings', 'enableTooltip', 'explode', 'explodeAll', 'explodeIndex', 'explodeOffset', 'innerRadius', 'legendImageUrl', 'legendShape', 'name', 'opacity', 'palettes', 'pointColorMapping', 'query', 'radius', 'tooltipMappingName', 'visible', 'xName', 'yName'];
let outputs = [];
/**
 * Circular3D Series Directive
 * ```html
 * <e-circular3d-series-collection>
 * <e-circular3d-series></e-circular3d-series>
 * </e-circular3d-series-collection>
 * ```
 */
export class CircularChart3DSeriesDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
CircularChart3DSeriesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CircularChart3DSeriesDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
CircularChart3DSeriesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CircularChart3DSeriesDirective, selector: "e-circularchart3d-series-collection>e-circularchart3d-series", inputs: { animation: "animation", dataLabel: "dataLabel", dataSource: "dataSource", emptyPointSettings: "emptyPointSettings", enableTooltip: "enableTooltip", explode: "explode", explodeAll: "explodeAll", explodeIndex: "explodeIndex", explodeOffset: "explodeOffset", innerRadius: "innerRadius", legendImageUrl: "legendImageUrl", legendShape: "legendShape", name: "name", opacity: "opacity", palettes: "palettes", pointColorMapping: "pointColorMapping", query: "query", radius: "radius", tooltipMappingName: "tooltipMappingName", visible: "visible", xName: "xName", yName: "yName" }, queries: [{ propertyName: "dataLabel_template", first: true, predicate: ["dataLabelTemplate"], descendants: true }], usesInheritance: true, ngImport: i0 });
__decorate([
    Template()
], CircularChart3DSeriesDirective.prototype, "dataLabel_template", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CircularChart3DSeriesDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-circularchart3d-series-collection>e-circularchart3d-series',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { dataLabel_template: [{
                type: ContentChild,
                args: ['dataLabelTemplate']
            }] } });
/**
 * CircularChart3DSeries Array Directive
 * @private
 */
export class CircularChart3DSeriesCollectionDirective extends ArrayBase {
    constructor() {
        super('series');
    }
}
CircularChart3DSeriesCollectionDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CircularChart3DSeriesCollectionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
CircularChart3DSeriesCollectionDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: CircularChart3DSeriesCollectionDirective, selector: "ej-circularchart3d>e-circularchart3d-series-collection", queries: [{ propertyName: "children", predicate: CircularChart3DSeriesDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: CircularChart3DSeriesCollectionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ej-circularchart3d>e-circularchart3d-series-collection',
                    queries: {
                        children: new ContentChildren(CircularChart3DSeriesDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,