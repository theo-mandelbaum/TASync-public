import { __decorate } from "tslib";
import { Component, ChangeDetectionStrategy, ContentChild } from '@angular/core';
import { ComponentBase, ComponentMixins, setValue } from '@syncfusion/ej2-angular-base';
import { TreeView } from '@syncfusion/ej2-navigations';
import { Template } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
export const inputs = ['allowDragAndDrop', 'allowEditing', 'allowMultiSelection', 'allowTextWrap', 'animation', 'autoCheck', 'checkDisabledChildren', 'checkedNodes', 'cssClass', 'disabled', 'dragArea', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'expandOn', 'expandedNodes', 'fields', 'fullRowNavigable', 'fullRowSelect', 'loadOnDemand', 'locale', 'nodeTemplate', 'selectedNodes', 'showCheckBox', 'sortOrder'];
export const outputs = ['actionFailure', 'created', 'dataBound', 'dataSourceChanged', 'destroyed', 'drawNode', 'keyPress', 'nodeChecked', 'nodeChecking', 'nodeClicked', 'nodeCollapsed', 'nodeCollapsing', 'nodeDragStart', 'nodeDragStop', 'nodeDragging', 'nodeDropped', 'nodeEdited', 'nodeEditing', 'nodeExpanded', 'nodeExpanding', 'nodeSelected', 'nodeSelecting'];
export const twoWays = [''];
/**
 * TreeView component is used to represent the hierarchical data in tree like structure with advanced functions to perform edit, drag and drop, selection with check-box and more.
 * ```html
 * <ej-treeview allowDragAndDrop='true'></ej-treeview>
 * ```
 */
let TreeViewComponent = class TreeViewComponent extends TreeView {
    constructor(ngEle, srenderer, viewContainerRef, injector) {
        super();
        this.ngEle = ngEle;
        this.srenderer = srenderer;
        this.viewContainerRef = viewContainerRef;
        this.injector = injector;
        this.element = this.ngEle.nativeElement;
        this.injectedModules = this.injectedModules || [];
        this.registerEvents(outputs);
        this.addTwoWay.call(this, twoWays);
        setValue('currentInstance', this, this.viewContainerRef);
        this.context = new ComponentBase();
    }
    ngOnInit() {
        this.context.ngOnInit(this);
    }
    ngAfterViewInit() {
        this.context.ngAfterViewInit(this);
    }
    ngOnDestroy() {
        this.context.ngOnDestroy(this);
    }
    ngAfterContentChecked() {
        this.context.ngAfterContentChecked(this);
    }
};
TreeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: TreeViewComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ViewContainerRef }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });
TreeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.3", type: TreeViewComponent, selector: "ejs-treeview", inputs: { allowDragAndDrop: "allowDragAndDrop", allowEditing: "allowEditing", allowMultiSelection: "allowMultiSelection", allowTextWrap: "allowTextWrap", animation: "animation", autoCheck: "autoCheck", checkDisabledChildren: "checkDisabledChildren", checkedNodes: "checkedNodes", cssClass: "cssClass", disabled: "disabled", dragArea: "dragArea", enableHtmlSanitizer: "enableHtmlSanitizer", enablePersistence: "enablePersistence", enableRtl: "enableRtl", expandOn: "expandOn", expandedNodes: "expandedNodes", fields: "fields", fullRowNavigable: "fullRowNavigable", fullRowSelect: "fullRowSelect", loadOnDemand: "loadOnDemand", locale: "locale", nodeTemplate: "nodeTemplate", selectedNodes: "selectedNodes", showCheckBox: "showCheckBox", sortOrder: "sortOrder" }, outputs: { actionFailure: "actionFailure", created: "created", dataBound: "dataBound", dataSourceChanged: "dataSourceChanged", destroyed: "destroyed", drawNode: "drawNode", keyPress: "keyPress", nodeChecked: "nodeChecked", nodeChecking: "nodeChecking", nodeClicked: "nodeClicked", nodeCollapsed: "nodeCollapsed", nodeCollapsing: "nodeCollapsing", nodeDragStart: "nodeDragStart", nodeDragStop: "nodeDragStop", nodeDragging: "nodeDragging", nodeDropped: "nodeDropped", nodeEdited: "nodeEdited", nodeEditing: "nodeEditing", nodeExpanded: "nodeExpanded", nodeExpanding: "nodeExpanding", nodeSelected: "nodeSelected", nodeSelecting: "nodeSelecting" }, queries: [{ propertyName: "nodeTemplate", first: true, predicate: ["nodeTemplate"], descendants: true }], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    Template()
], TreeViewComponent.prototype, "nodeTemplate", void 0);
TreeViewComponent = __decorate([
    ComponentMixins([ComponentBase])
], TreeViewComponent);
export { TreeViewComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: TreeViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ejs-treeview',
                    inputs: inputs,
                    outputs: outputs,
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ViewContainerRef }, { type: i0.Injector }]; }, propDecorators: { nodeTemplate: [{
                type: ContentChild,
                args: ['nodeTemplate']
            }] } });
//# sourceMappingURL=data:application/json;base64,