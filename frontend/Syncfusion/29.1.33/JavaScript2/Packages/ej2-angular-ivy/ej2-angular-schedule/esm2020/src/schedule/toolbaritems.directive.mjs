import { __decorate } from "tslib";
import { Directive, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { Template } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['align', 'cssClass', 'disabled', 'htmlAttributes', 'id', 'name', 'overflow', 'prefixIcon', 'showAlwaysInPopup', 'showTextOn', 'suffixIcon', 'tabIndex', 'template', 'text', 'tooltipText', 'type', 'visible', 'width'];
let outputs = ['click'];
/**
 * `e-toolbaritems` directive represent a custom toolbar items of the Schedule.
 * It must be contained in a Schedule component(`ejs-schedule`).
 * ```html
 * <ejs-schedule>
 *   <e-toolbaritems>
 *    <e-toolbaritem name='Today'></<e-toolbaritem>
 *    <e-toolbaritem name='DateRangeText'></e-toolbaritem>
 *    <e-toolbaritem prefixIcon='e-icons e-cut' text='Cut'></e-toolbaritem>
 *   <e-toolbaritems>
 * </ejs-schedule>
 * ```
 */
export class ToolbarItemDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
ToolbarItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ToolbarItemDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
ToolbarItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: ToolbarItemDirective, selector: "e-toolbaritems>e-toolbaritem", inputs: { align: "align", cssClass: "cssClass", disabled: "disabled", htmlAttributes: "htmlAttributes", id: "id", name: "name", overflow: "overflow", prefixIcon: "prefixIcon", showAlwaysInPopup: "showAlwaysInPopup", showTextOn: "showTextOn", suffixIcon: "suffixIcon", tabIndex: "tabIndex", template: "template", text: "text", tooltipText: "tooltipText", type: "type", visible: "visible", width: "width" }, outputs: { click: "click" }, queries: [{ propertyName: "template", first: true, predicate: ["template"], descendants: true }], usesInheritance: true, ngImport: i0 });
__decorate([
    Template()
], ToolbarItemDirective.prototype, "template", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ToolbarItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-toolbaritems>e-toolbaritem',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { template: [{
                type: ContentChild,
                args: ['template']
            }] } });
/**
 * ToolbarItem Array Directive
 * @private
 */
export class ToolbarItemsDirective extends ArrayBase {
    constructor() {
        super('toolbaritems');
    }
}
ToolbarItemsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ToolbarItemsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ToolbarItemsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: ToolbarItemsDirective, selector: "ejs-schedule>e-toolbaritems", queries: [{ propertyName: "children", predicate: ToolbarItemDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: ToolbarItemsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ejs-schedule>e-toolbaritems',
                    queries: {
                        children: new ContentChildren(ToolbarItemDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhcml0ZW1zLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zY2hlZHVsZS90b29sYmFyaXRlbXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFvQixlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7QUFHeEQsSUFBSSxLQUFLLEdBQWEsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsbUJBQW1CLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM5TyxJQUFJLE9BQU8sR0FBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xDOzs7Ozs7Ozs7Ozs7R0FZRztBQVNILE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxXQUFpQztJQXdKdkUsWUFBb0IsZ0JBQWlDO1FBQ2pELEtBQUssRUFBRSxDQUFDO1FBRFEscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQUVqRCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztJQUNuQyxDQUFDOztpSEE3SlEsb0JBQW9CO3FHQUFwQixvQkFBb0I7QUFzSjdCO0lBREMsUUFBUSxFQUFFO3NEQUNVOzJGQXRKWixvQkFBb0I7a0JBUmhDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMsTUFBTSxFQUFFLEtBQUs7b0JBQ2IsT0FBTyxFQUFFLE9BQU87b0JBQ2hCLE9BQU8sRUFBRSxFQUVSO2lCQUNKO3VHQXVKVSxRQUFRO3NCQUZkLFlBQVk7dUJBQUMsVUFBVTs7QUFZNUI7OztHQUdHO0FBT0gsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFNBQWdDO0lBQ3ZFO1FBQ0ksS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzFCLENBQUM7O2tIQUhRLHFCQUFxQjtzR0FBckIscUJBQXFCLDRGQUhJLG9CQUFvQjsyRkFHN0MscUJBQXFCO2tCQU5qQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSw2QkFBNkI7b0JBQ3ZDLE9BQU8sRUFBRTt3QkFDTCxRQUFRLEVBQUUsSUFBSSxlQUFlLENBQUMsb0JBQW9CLENBQUM7cUJBQ3REO2lCQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBWaWV3Q29udGFpbmVyUmVmLCBDb250ZW50Q2hpbGRyZW4sIENvbnRlbnRDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcGxleEJhc2UsIEFycmF5QmFzZSwgc2V0VmFsdWUgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG5cblxubGV0IGlucHV0OiBzdHJpbmdbXSA9IFsnYWxpZ24nLCAnY3NzQ2xhc3MnLCAnZGlzYWJsZWQnLCAnaHRtbEF0dHJpYnV0ZXMnLCAnaWQnLCAnbmFtZScsICdvdmVyZmxvdycsICdwcmVmaXhJY29uJywgJ3Nob3dBbHdheXNJblBvcHVwJywgJ3Nob3dUZXh0T24nLCAnc3VmZml4SWNvbicsICd0YWJJbmRleCcsICd0ZW1wbGF0ZScsICd0ZXh0JywgJ3Rvb2x0aXBUZXh0JywgJ3R5cGUnLCAndmlzaWJsZScsICd3aWR0aCddO1xubGV0IG91dHB1dHM6IHN0cmluZ1tdID0gWydjbGljayddO1xuLyoqXG4gKiBgZS10b29sYmFyaXRlbXNgIGRpcmVjdGl2ZSByZXByZXNlbnQgYSBjdXN0b20gdG9vbGJhciBpdGVtcyBvZiB0aGUgU2NoZWR1bGUuIFxuICogSXQgbXVzdCBiZSBjb250YWluZWQgaW4gYSBTY2hlZHVsZSBjb21wb25lbnQoYGVqcy1zY2hlZHVsZWApLiBcbiAqIGBgYGh0bWxcbiAqIDxlanMtc2NoZWR1bGU+XG4gKiAgIDxlLXRvb2xiYXJpdGVtcz5cbiAqICAgIDxlLXRvb2xiYXJpdGVtIG5hbWU9J1RvZGF5Jz48LzxlLXRvb2xiYXJpdGVtPlxuICogICAgPGUtdG9vbGJhcml0ZW0gbmFtZT0nRGF0ZVJhbmdlVGV4dCc+PC9lLXRvb2xiYXJpdGVtPlxuICogICAgPGUtdG9vbGJhcml0ZW0gcHJlZml4SWNvbj0nZS1pY29ucyBlLWN1dCcgdGV4dD0nQ3V0Jz48L2UtdG9vbGJhcml0ZW0+XG4gKiAgIDxlLXRvb2xiYXJpdGVtcz5cbiAqIDwvZWpzLXNjaGVkdWxlPlxuICogYGBgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnZS10b29sYmFyaXRlbXM+ZS10b29sYmFyaXRlbScsXG4gICAgaW5wdXRzOiBpbnB1dCxcbiAgICBvdXRwdXRzOiBvdXRwdXRzLCAgICBcbiAgICBxdWVyaWVzOiB7XG5cbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIFRvb2xiYXJJdGVtRGlyZWN0aXZlIGV4dGVuZHMgQ29tcGxleEJhc2U8VG9vbGJhckl0ZW1EaXJlY3RpdmU+IHtcbiAgICBwdWJsaWMgZGlyZWN0aXZlUHJvcExpc3Q6IGFueTtcblx0cHVibGljIGNsaWNrOiBhbnk7XG5cblxuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHR5cGVzIG9mIGNvbW1hbmQgdG8gYmUgcmVuZGVyZWQgaW4gdGhlIFRvb2xiYXIuIFxuICAgICAqIFN1cHBvcnRlZCB0eXBlcyBhcmU6IFxuICAgICAqICogYEJ1dHRvbmA6IENyZWF0ZXMgdGhlIEJ1dHRvbiBjb250cm9sIHdpdGggaXRzIGdpdmVuIHByb3BlcnRpZXMgbGlrZSB0ZXh0LCBwcmVmaXhJY29uLCBldGMuIFxuICAgICAqICogYFNlcGFyYXRvcmA6IEFkZHMgYSBob3Jpem9udGFsIGxpbmUgdGhhdCBzZXBhcmF0ZXMgdGhlIFRvb2xiYXIgY29tbWFuZHMuIFxuICAgICAqICogYElucHV0YDogQ3JlYXRlcyBhbiBpbnB1dCBlbGVtZW50IHRoYXQgaXMgYXBwbGljYWJsZSB0byB0ZW1wbGF0ZSByZW5kZXJpbmcgd2l0aCBTeW5jZnVzaW9uIGNvbnRyb2xzIGxpa2UgRHJvcERvd25MaXN0LCBcbiAgICAgKiBBdXRvQ29tcGxldGUsIGV0Yy5cbiAgICAgKiBAZGVmYXVsdCAnQnV0dG9uJ1xuICAgICAqIEBhc3BkZWZhdWx0dmFsdWUgU3luY2Z1c2lvbi5FSjIuTmF2aWdhdGlvbnMuSXRlbVR5cGUuQnV0dG9uXG4gICAgICogQGlzZW51bWVyYXRpb24gdHJ1ZVxuICAgICAqIEBhc3B0eXBlIFN5bmNmdXNpb24uRUoyLk5hdmlnYXRpb25zLkl0ZW1UeXBlXG4gICAgICovXG4gICAgcHVibGljIHR5cGU6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSBsb2NhdGlvbiBmb3IgYWxpZ25pbmcgVG9vbGJhciBpdGVtcyBvbiB0aGUgVG9vbGJhci4gRWFjaCBjb21tYW5kIHdpbGwgYmUgYWxpZ25lZCBhY2NvcmRpbmcgdG8gdGhlIGBhbGlnbmAgcHJvcGVydHkuIFxuICAgICAqIFRoZSBwb3NzaWJsZSB2YWx1ZXMgZm9yIHRoaXMgcHJvcGVydHkgYXMgZm9sbG93cyBcbiAgICAgKiAqIGBMZWZ0YDogVG8gYWxpZ24gY29tbWFuZHMgdG8gdGhlIGxlZnQgc2lkZSBvZiB0aGUgVG9vbGJhci4gXG4gICAgICogKiBgQ2VudGVyYDogVG8gYWxpZ24gY29tbWFuZHMgYXQgdGhlIGNlbnRlciBvZiB0aGUgVG9vbGJhci4gXG4gICAgICogKiBgUmlnaHRgOiBUbyBhbGlnbiBjb21tYW5kcyB0byB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgVG9vbGJhci5cbiAgICAgKiBAZGVmYXVsdCAnTGVmdCdcbiAgICAgKiBAYXNwZGVmYXVsdHZhbHVlIFN5bmNmdXNpb24uRUoyLk5hdmlnYXRpb25zLkl0ZW1BbGlnbi5MZWZ0XG4gICAgICogQGlzZW51bWVyYXRpb24gdHJ1ZVxuICAgICAqIEBhc3B0eXBlIFN5bmNmdXNpb24uRUoyLk5hdmlnYXRpb25zLkl0ZW1BbGlnblxuICAgICAqL1xuICAgIHB1YmxpYyBhbGlnbjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHNpbmdsZS9tdWx0aXBsZSBjbGFzc2VzIChzZXBhcmF0ZWQgYnkgc3BhY2UpIHRvIGJlIHVzZWQgZm9yIGN1c3RvbWl6YXRpb24gb2YgY29tbWFuZHMuXG4gICAgICogQGRlZmF1bHQgXCJcIlxuICAgICAqL1xuICAgIHB1YmxpYyBjc3NDbGFzczogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciBhbiBpdGVtIHNob3VsZCBiZSBkaXNhYmxlZCBvciBub3QuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgZGlzYWJsZWQ6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyBodG1sQXR0cmlidXRlcyB1c2VkIHRvIGFkZCBjdXN0b20gYXR0cmlidXRlcyB0byBUb29sYmFyIGNvbW1hbmQuIFxuICAgICAqIFN1cHBvcnRzIEhUTUwgYXR0cmlidXRlcyBzdWNoIGFzIHN0eWxlLCBjbGFzcywgZXRjLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBwdWJsaWMgaHRtbEF0dHJpYnV0ZXM6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSB1bmlxdWUgSUQgdG8gYmUgdXNlZCB3aXRoIGJ1dHRvbiBvciBpbnB1dCBlbGVtZW50IG9mIFRvb2xiYXIgaXRlbXMuXG4gICAgICogQGRlZmF1bHQgXCJcIlxuICAgICAqL1xuICAgIHB1YmxpYyBpZDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHVuaXF1ZSBuYW1lIGZvciBlYWNoIHRvb2xiYXIgaXRlbSByZW5kZXJlZCBpbiBTY2hlZHVsZS4gVGhpcyBuYW1lIGlzIHVzZWQgdG8gbWFwIHRoZSB0b29sYmFyIGl0ZW1zIGluIHRoZSBTY2hlZHVsZSBjb21wb25lbnQuXG4gICAgICogXG4gICAgICogVG8gYWNjZXNzIHRoZSBkZWZhdWx0IHRvb2xiYXIgaXRlbXMsIHByb3ZpZGUgdGhlIG5hbWUgYmVsb3csXG4gICAgICpcbiAgICAgKiogYEN1c3RvbWA6IFNjaGVkdWxlIGNvbXBvbmVudCByZW5kZXIgdGhlIGN1c3RvbSB0b29sYmFyIGl0ZW0uXG4gICAgICoqIGBQcmV2aW91c2A6IFNjaGVkdWxlIGNvbXBvbmVudCBuYXZpZ2F0ZXMgdG8gdGhlIHByZXZpb3VzIGRhdGUgZnJvbSB0aGUgY3VycmVudCBkYXRlLlxuICAgICAqKiBgTmV4dGA6IFNjaGVkdWxlIGNvbXBvbmVudCBuYXZpZ2F0ZXMgdG8gdGhlIG5leHQgZGF0ZSBmcm9tIHRoZSBjdXJyZW50IGRhdGUuXG4gICAgICoqIGBUb2RheWA6IFNjaGVkdWxlIGNvbXBvbmVudCBuYXZpZ2F0ZXMgdG8gdGhlIGN1cnJlbnQgZGF0ZSBmcm9tIGFueSBkYXRlLlxuICAgICAqKiBgVmlld3NgOiBTY2hlZHVsZSBjb21wb25lbnQgcmVuZGVyIHRoZSBkZWZpbmVkIHZpZXcgb3B0aW9ucyBpbiB0aGUgdG9vbGJhci4gSWYgdmlldyBvcHRpb24gaXMgbm90IGRlZmluZWQsIHRoZW4gaXQgd2lsbCByZW5kZXIgZGVmYXVsdCB2aWV3IG9wdGlvbnMgaW4gdGhlIFNjaGVkdWxlLlxuICAgICAqKiBgRGF0ZVJhbmdlVGV4dGA6IFNjaGVkdWxlIGNvbXBvbmVudCBkaXNwbGF5cyB0aGUgY3VycmVudCBkYXRlIHRleHQgcmFuZ2UuXG4gICAgICoqIGBOZXdFdmVudGA6IFNjaGVkdWxlIGNvbXBvbmVudCByZW5kZXIgdGhlIGljb24gdG8gYWRkIGEgbmV3IGV2ZW50LlxuICAgICAqICAgICBcbiAgICAgKiBAZGVmYXVsdCAnQ3VzdG9tJ1xuICAgICAqIEBhc3BkZWZhdWx0dmFsdWUgQ3VzdG9tXG4gICAgICogQGlzZW51bWVyYXRpb24gdHJ1ZVxuICAgICAqIEBhc3B0eXBlIFRvb2xiYXJOYW1lXG4gICAgICovXG4gICAgcHVibGljIG5hbWU6IGFueTtcbiAgICAvKiogXG4gICAgICogU3BlY2lmaWVzIHRoZSBUb29sYmFyIGNvbW1hbmQgZGlzcGxheSBhcmVhIHdoZW4gYW4gZWxlbWVudCdzIGNvbnRlbnQgaXMgdG9vIGxhcmdlIHRvIGZpdCBhdmFpbGFibGUgc3BhY2UuIFxuICAgICAqIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IHRvIGBwb3B1cGAgbW9kZS4gVGhlIHBvc3NpYmxlIHZhbHVlcyBmb3IgdGhpcyBwcm9wZXJ0eSBhcyBmb2xsb3dzIFxuICAgICAqICogYFNob3dgOiAgQWx3YXlzIHNob3dzIHRoZSBpdGVtIGFzIHRoZSBwcmltYXJ5IHByaW9yaXR5IG9uIHRoZSAqVG9vbGJhciouIFxuICAgICAqICogYEhpZGVgOiBBbHdheXMgc2hvd3MgdGhlIGl0ZW0gYXMgdGhlIHNlY29uZGFyeSBwcmlvcml0eSBvbiB0aGUgKnBvcHVwKi4gXG4gICAgICogKiBgTm9uZWA6IE5vIHByaW9yaXR5IGZvciBkaXNwbGF5LCBhbmQgYXMgcGVyIG5vcm1hbCBvcmRlciBtb3ZlcyB0byBwb3B1cCB3aGVuIGNvbnRlbnQgZXhjZWVkcy5cbiAgICAgKiBAZGVmYXVsdCAnTm9uZSdcbiAgICAgKiBAYXNwZGVmYXVsdHZhbHVlIFN5bmNmdXNpb24uRUoyLk5hdmlnYXRpb25zLk92ZXJmbG93T3B0aW9uLk5vbmVcbiAgICAgKiBAaXNlbnVtZXJhdGlvbiB0cnVlXG4gICAgICogQGFzcHR5cGUgU3luY2Z1c2lvbi5FSjIuTmF2aWdhdGlvbnMuT3ZlcmZsb3dPcHRpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgb3ZlcmZsb3c6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyBzaW5nbGUvbXVsdGlwbGUgY2xhc3NlcyBzZXBhcmF0ZWQgYnkgc3BhY2UgdXNlZCB0byBzcGVjaWZ5IGFuIGljb24gZm9yIHRoZSBidXR0b24uIFxuICAgICAqIFRoZSBpY29uIHdpbGwgYmUgcG9zaXRpb25lZCBiZWZvcmUgdGhlIHRleHQgY29udGVudCBpZiB0ZXh0IGlzIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIHRoZSBpY29uIGFsb25lIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAgICogQGRlZmF1bHQgXCJcIlxuICAgICAqL1xuICAgIHB1YmxpYyBwcmVmaXhJY29uOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIHByaW9yaXR5IG9mIGl0ZW1zIHRvIGRpc3BsYXkgaXQgaW4gcG9wdXAgYWx3YXlzLiBcbiAgICAgKiBJdCBhbGxvd3MgdG8gbWFpbnRhaW4gdG9vbGJhciBpdGVtIG9uIHBvcHVwIGFsd2F5cyBidXQgaXQgZG9lcyBub3Qgd29yayBmb3IgdG9vbGJhciBwcmlvcml0eSBpdGVtcy5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHB1YmxpYyBzaG93QWx3YXlzSW5Qb3B1cDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgd2hlcmUgdGhlIGJ1dHRvbiB0ZXh0IHdpbGwgYmUgZGlzcGxheWVkIG9uICpwb3B1cCBtb2RlKiBvZiB0aGUgVG9vbGJhci4gXG4gICAgICogVGhlIHBvc3NpYmxlIHZhbHVlcyBmb3IgdGhpcyBwcm9wZXJ0eSBhcyBmb2xsb3dzIFxuICAgICAqICogYFRvb2xiYXJgOiAgVGV4dCB3aWxsIGJlIGRpc3BsYXllZCBvbiAqVG9vbGJhciogb25seS4gXG4gICAgICogKiBgT3ZlcmZsb3dgOiBUZXh0IHdpbGwgYmUgZGlzcGxheWVkIG9ubHkgd2hlbiBjb250ZW50IG92ZXJmbG93cyB0byAqcG9wdXAqLiBcbiAgICAgKiAqIGBCb3RoYDogVGV4dCB3aWxsIGJlIGRpc3BsYXllZCBvbiAqcG9wdXAqIGFuZCAqVG9vbGJhciouXG4gICAgICogQGRlZmF1bHQgJ0JvdGgnXG4gICAgICogQGFzcGRlZmF1bHR2YWx1ZSBTeW5jZnVzaW9uLkVKMi5OYXZpZ2F0aW9ucy5EaXNwbGF5TW9kZS5Cb3RoXG4gICAgICogQGlzZW51bWVyYXRpb24gdHJ1ZVxuICAgICAqIEBhc3B0eXBlIFN5bmNmdXNpb24uRUoyLk5hdmlnYXRpb25zLkRpc3BsYXlNb2RlXG4gICAgICovXG4gICAgcHVibGljIHNob3dUZXh0T246IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyBzaW5nbGUvbXVsdGlwbGUgY2xhc3NlcyBzZXBhcmF0ZWQgYnkgc3BhY2UgdXNlZCB0byBzcGVjaWZ5IGFuIGljb24gZm9yIHRoZSBidXR0b24uIFxuICAgICAqIFRoZSBpY29uIHdpbGwgYmUgcG9zaXRpb25lZCBhZnRlciB0aGUgdGV4dCBjb250ZW50IGlmIHRleHQgaXMgYXZhaWxhYmxlLlxuICAgICAqIEBkZWZhdWx0IFwiXCJcbiAgICAgKi9cbiAgICBwdWJsaWMgc3VmZml4SWNvbjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRhYiBvcmRlciBvZiB0aGUgVG9vbGJhciBpdGVtcy4gV2hlbiBwb3NpdGl2ZSB2YWx1ZXMgYXNzaWduZWQsIGl0IGFsbG93cyB0byBzd2l0Y2ggZm9jdXMgdG8gdGhlIG5leHQvcHJldmlvdXMgdG9vbGJhciBpdGVtcyB3aXRoIFRhYi9TaGlmdFRhYiBrZXlzLiBcbiAgICAgKiBCeSBkZWZhdWx0LCB1c2VyIGNhbiBhYmxlIHRvIHN3aXRjaCBiZXR3ZWVuIGl0ZW1zIG9ubHkgdmlhIGFycm93IGtleXMuIFxuICAgICAqIElmIHRoZSB2YWx1ZSBpcyBzZXQgdG8gMCBmb3IgYWxsIHRvb2wgYmFyIGl0ZW1zLCB0aGVuIHRhYiBzd2l0Y2hlcyBiYXNlZCBvbiBlbGVtZW50IG9yZGVyLlxuICAgICAqIEBkZWZhdWx0IC0xXG4gICAgICovXG4gICAgcHVibGljIHRhYkluZGV4OiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB0aGUgdGV4dCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIFRvb2xiYXIgYnV0dG9uLlxuICAgICAqIEBkZWZhdWx0IFwiXCJcbiAgICAgKi9cbiAgICBwdWJsaWMgdGV4dDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRleHQgdG8gYmUgZGlzcGxheWVkIG9uIGhvdmVyaW5nIHRoZSBUb29sYmFyIGJ1dHRvbi5cbiAgICAgKiBAZGVmYXVsdCBcIlwiXG4gICAgICovXG4gICAgcHVibGljIHRvb2x0aXBUZXh0OiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIGFuIGl0ZW0gc2hvdWxkIGJlIGhpZGRlbiBvciBub3QuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyB2aXNpYmxlOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB0aGUgd2lkdGggb2YgdGhlIFRvb2xiYXIgYnV0dG9uIGNvbW1hbmRzLlxuICAgICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgICAqL1xuICAgIHB1YmxpYyB3aWR0aDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTcGVjaWZpZXMgdGhlIEhUTUwgZWxlbWVudC9lbGVtZW50IElEIGFzIGEgc3RyaW5nIHRoYXQgY2FuIGJlIGFkZGVkIGFzIGEgVG9vbGJhciBjb21tYW5kLiBcbiAgICAgKiBcbiAgICAgKiBAZGVmYXVsdCBcIlwiXG4gICAgICogQGFuZ3VsYXJ0eXBlIHN0cmluZyB8IG9iamVjdFxuICAgICAqIEByZWFjdHR5cGUgc3RyaW5nIHwgZnVuY3Rpb24gfCBKU1guRWxlbWVudFxuICAgICAqIEB2dWV0eXBlIHN0cmluZyB8IGZ1bmN0aW9uXG4gICAgICogQGFzcHR5cGUgc3RyaW5nXG4gICAgICovXG4gICAgQENvbnRlbnRDaGlsZCgndGVtcGxhdGUnKVxuICAgIEBUZW1wbGF0ZSgpXG4gICAgcHVibGljIHRlbXBsYXRlOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdDb250YWluZXJSZWY6Vmlld0NvbnRhaW5lclJlZikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBzZXRWYWx1ZSgnY3VycmVudEluc3RhbmNlJywgdGhpcywgdGhpcy52aWV3Q29udGFpbmVyUmVmKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50cyhvdXRwdXRzKTtcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVQcm9wTGlzdCA9IGlucHV0O1xuICAgIH1cbn1cblxuLyoqXG4gKiBUb29sYmFySXRlbSBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnZWpzLXNjaGVkdWxlPmUtdG9vbGJhcml0ZW1zJyxcbiAgICBxdWVyaWVzOiB7XG4gICAgICAgIGNoaWxkcmVuOiBuZXcgQ29udGVudENoaWxkcmVuKFRvb2xiYXJJdGVtRGlyZWN0aXZlKVxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFRvb2xiYXJJdGVtc0RpcmVjdGl2ZSBleHRlbmRzIEFycmF5QmFzZTxUb29sYmFySXRlbXNEaXJlY3RpdmU+IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3Rvb2xiYXJpdGVtcycpO1xuICAgIH1cbn0iXX0=