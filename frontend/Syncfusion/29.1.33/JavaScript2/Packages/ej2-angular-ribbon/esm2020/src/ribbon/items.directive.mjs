import { __decorate } from "tslib";
import { Directive, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { Template } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['activeSize', 'allowedSizes', 'buttonSettings', 'checkBoxSettings', 'colorPickerSettings', 'comboBoxSettings', 'cssClass', 'disabled', 'displayOptions', 'dropDownSettings', 'gallerySettings', 'groupButtonSettings', 'id', 'itemTemplate', 'keyTip', 'ribbonTooltipSettings', 'splitButtonSettings', 'type'];
let outputs = [];
export class RibbonItemDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
RibbonItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: RibbonItemDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
RibbonItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: RibbonItemDirective, selector: "e-ribbon-item", inputs: { activeSize: "activeSize", allowedSizes: "allowedSizes", buttonSettings: "buttonSettings", checkBoxSettings: "checkBoxSettings", colorPickerSettings: "colorPickerSettings", comboBoxSettings: "comboBoxSettings", cssClass: "cssClass", disabled: "disabled", displayOptions: "displayOptions", dropDownSettings: "dropDownSettings", gallerySettings: "gallerySettings", groupButtonSettings: "groupButtonSettings", id: "id", itemTemplate: "itemTemplate", keyTip: "keyTip", ribbonTooltipSettings: "ribbonTooltipSettings", splitButtonSettings: "splitButtonSettings", type: "type" }, queries: [{ propertyName: "itemTemplate", first: true, predicate: ["itemTemplate"], descendants: true }], usesInheritance: true, ngImport: i0 });
__decorate([
    Template()
], RibbonItemDirective.prototype, "itemTemplate", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: RibbonItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-ribbon-item',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { itemTemplate: [{
                type: ContentChild,
                args: ['itemTemplate']
            }] } });
/**
 * RibbonItem Array Directive
 * @private
 */
export class RibbonItemsDirective extends ArrayBase {
    constructor() {
        super('items');
    }
}
RibbonItemsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: RibbonItemsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
RibbonItemsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: RibbonItemsDirective, selector: "e-ribbon-items", queries: [{ propertyName: "children", predicate: RibbonItemDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: RibbonItemsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-ribbon-items',
                    queries: {
                        children: new ContentChildren(RibbonItemDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3JpYmJvbi9pdGVtcy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQW9CLGVBQWUsRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDaEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztBQUd4RCxJQUFJLEtBQUssR0FBYSxDQUFDLFlBQVksRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsa0JBQWtCLEVBQUUscUJBQXFCLEVBQUUsa0JBQWtCLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxpQkFBaUIsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSx1QkFBdUIsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN0VSxJQUFJLE9BQU8sR0FBYSxFQUFFLENBQUM7QUFVM0IsTUFBTSxPQUFPLG1CQUFvQixTQUFRLFdBQWdDO0lBNEdyRSxZQUFvQixnQkFBaUM7UUFDakQsS0FBSyxFQUFFLENBQUM7UUFEUSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWlCO1FBRWpELFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0lBQ25DLENBQUM7O2dIQWpIUSxtQkFBbUI7b0dBQW5CLG1CQUFtQjtBQTBHNUI7SUFEQyxRQUFRLEVBQUU7eURBQ2M7MkZBMUdoQixtQkFBbUI7a0JBUi9CLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLE1BQU0sRUFBRSxLQUFLO29CQUNiLE9BQU8sRUFBRSxPQUFPO29CQUNoQixPQUFPLEVBQUUsRUFFUjtpQkFDSjt1R0EyR1UsWUFBWTtzQkFGbEIsWUFBWTt1QkFBQyxjQUFjOztBQVloQzs7O0dBR0c7QUFPSCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsU0FBK0I7SUFDckU7UUFDSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkIsQ0FBQzs7aUhBSFEsb0JBQW9CO3FHQUFwQixvQkFBb0IsK0VBSEssbUJBQW1COzJGQUc1QyxvQkFBb0I7a0JBTmhDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsT0FBTyxFQUFFO3dCQUNMLFFBQVEsRUFBRSxJQUFJLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQztxQkFDckQ7aUJBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFZpZXdDb250YWluZXJSZWYsIENvbnRlbnRDaGlsZHJlbiwgQ29udGVudENoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wbGV4QmFzZSwgQXJyYXlCYXNlLCBzZXRWYWx1ZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItYW5ndWxhci1iYXNlJztcblxuXG5sZXQgaW5wdXQ6IHN0cmluZ1tdID0gWydhY3RpdmVTaXplJywgJ2FsbG93ZWRTaXplcycsICdidXR0b25TZXR0aW5ncycsICdjaGVja0JveFNldHRpbmdzJywgJ2NvbG9yUGlja2VyU2V0dGluZ3MnLCAnY29tYm9Cb3hTZXR0aW5ncycsICdjc3NDbGFzcycsICdkaXNhYmxlZCcsICdkaXNwbGF5T3B0aW9ucycsICdkcm9wRG93blNldHRpbmdzJywgJ2dhbGxlcnlTZXR0aW5ncycsICdncm91cEJ1dHRvblNldHRpbmdzJywgJ2lkJywgJ2l0ZW1UZW1wbGF0ZScsICdrZXlUaXAnLCAncmliYm9uVG9vbHRpcFNldHRpbmdzJywgJ3NwbGl0QnV0dG9uU2V0dGluZ3MnLCAndHlwZSddO1xubGV0IG91dHB1dHM6IHN0cmluZ1tdID0gW107XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnZS1yaWJib24taXRlbScsXG4gICAgaW5wdXRzOiBpbnB1dCxcbiAgICBvdXRwdXRzOiBvdXRwdXRzLCAgICBcbiAgICBxdWVyaWVzOiB7XG5cbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIFJpYmJvbkl0ZW1EaXJlY3RpdmUgZXh0ZW5kcyBDb21wbGV4QmFzZTxSaWJib25JdGVtRGlyZWN0aXZlPiB7XG4gICAgcHVibGljIGRpcmVjdGl2ZVByb3BMaXN0OiBhbnk7XG5cdFxuXG5cbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgdHlwZSBvZiBjb250cm9sIHRvIGJlIGFkZGVkIGFzIHRoZSBSaWJib24gSXRlbS5cbiAgICAgKiBAaXNlbnVtZXJhdGlvbiB0cnVlXG4gICAgICogQGRlZmF1bHQgUmliYm9uSXRlbVR5cGUuQnV0dG9uXG4gICAgICogQGFzcHR5cGUgUmliYm9uSXRlbVR5cGVcbiAgICAgKi9cbiAgICBwdWJsaWMgdHlwZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBhY3RpdmUgc2l6ZSBvZiB0aGUgcmliYm9uIGl0ZW0uXG4gICAgICogQGRlZmF1bHQgJ01lZGl1bSdcbiAgICAgKiBAYXNwbnVtYmVyZW51bSBcbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aXZlU2l6ZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBzaXplcyB0aGF0IGFyZSBhbGxvd2VkIGZvciB0aGUgcmliYm9uIGl0ZW0gb24gcmliYm9uIHJlc2l6ZS5cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICogQGFzcG51bWJlcmVudW0gXG4gICAgICovXG4gICAgcHVibGljIGFsbG93ZWRTaXplczogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBzZXR0aW5ncyBmb3IgdGhlIHJpYmJvbiBidXR0b24uXG4gICAgICogQGRlZmF1bHQge31cbiAgICAgKi9cbiAgICBwdWJsaWMgYnV0dG9uU2V0dGluZ3M6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgc2V0dGluZ3MgZm9yIHRoZSByaWJib24gY2hlY2tib3guXG4gICAgICogQGRlZmF1bHQge31cbiAgICAgKi9cbiAgICBwdWJsaWMgY2hlY2tCb3hTZXR0aW5nczogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBzZXR0aW5ncyBmb3IgdGhlIHJpYmJvbiBjb2xvciBwaWNrZXIuXG4gICAgICogQGRlZmF1bHQge31cbiAgICAgKi9cbiAgICBwdWJsaWMgY29sb3JQaWNrZXJTZXR0aW5nczogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBzZXR0aW5ncyBmb3IgdGhlIHJpYmJvbiBjb21ib2JveC5cbiAgICAgKiBAZGVmYXVsdCB7fVxuICAgICAqL1xuICAgIHB1YmxpYyBjb21ib0JveFNldHRpbmdzOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgb25lIG9yIG1vcmUgQ1NTIGNsYXNzZXMgdG8gY3VzdG9taXplIHRoZSBhcHBlYXJhbmNlIG9mIGl0ZW0uXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBwdWJsaWMgY3NzQ2xhc3M6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB3aGV0aGVyIHRoZSBpdGVtIGlzIGRpc2FibGVkIG9yIG5vdC5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHB1YmxpYyBkaXNhYmxlZDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBkaXNwbGF5IG9wdGlvbnMgZm9yIHRoZSByaWJib24gaXRlbS5cbiAgICAgKiBAZGVmYXVsdCAnQXV0bydcbiAgICAgKiBAYXNwbnVtYmVyZW51bSBcbiAgICAgKi9cbiAgICBwdWJsaWMgZGlzcGxheU9wdGlvbnM6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgc2V0dGluZ3MgZm9yIHRoZSByaWJib24gZHJvcGRvd24gYnV0dG9uLlxuICAgICAqIEBkZWZhdWx0IHt9XG4gICAgICovXG4gICAgcHVibGljIGRyb3BEb3duU2V0dGluZ3M6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgcHJvcGVydGllcyBvZiB0aGUgZ2FsbGVyeSB2aWV3IGluIFJpYmJvbi5cbiAgICAgKiBAZGVmYXVsdCB7fVxuICAgICAqL1xuICAgIHB1YmxpYyBnYWxsZXJ5U2V0dGluZ3M6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgcHJvcGVydGllcyBmb3IgZ3JvdXAgYnV0dG9uIGluIFJpYmJvblxuICAgICAqIEBkZWZhdWx0IHt9XG4gICAgICovXG4gICAgcHVibGljIGdyb3VwQnV0dG9uU2V0dGluZ3M6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyBhIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgaXRlbS5cbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHB1YmxpYyBpZDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBrZXkgdGlwIHRleHQgdG8gYmUgYWNjZXNzZWQgZm9yIHNwZWNpZmllZCBSaWJib24gaXRlbS5cbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHB1YmxpYyBrZXlUaXA6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgc2V0dGluZ3MgZm9yIHRoZSB0b29sdGlwIG9mIHRoZSBpdGVtLlxuICAgICAqIEBkZWZhdWx0IHt9XG4gICAgICovXG4gICAgcHVibGljIHJpYmJvblRvb2x0aXBTZXR0aW5nczogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBzZXR0aW5ncyBmb3IgdGhlIHJpYmJvbiBzcGxpdCBidXR0b24uXG4gICAgICogQGRlZmF1bHQge31cbiAgICAgKi9cbiAgICBwdWJsaWMgc3BsaXRCdXR0b25TZXR0aW5nczogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSB0ZW1wbGF0ZSBjb250ZW50IGZvciB0aGUgcmliYm9uIGl0ZW0uIFxuICAgICAqIGBBY3RpdmVTaXplYCBwcm9wZXJ0eSBpcyBwYXNzZWQgYXMgc3RyaW5nIGluIHRlbXBsYXRlIGNvbnRleHQuXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKiBAYW5ndWxhcnR5cGUgc3RyaW5nIHwgb2JqZWN0IHwgSFRNTEVsZW1lbnRcbiAgICAgKiBAcmVhY3R0eXBlIHN0cmluZyB8IGZ1bmN0aW9uIHwgSlNYLkVsZW1lbnQgfCBIVE1MRWxlbWVudFxuICAgICAqIEB2dWV0eXBlIHN0cmluZyB8IGZ1bmN0aW9uIHwgSFRNTEVsZW1lbnRcbiAgICAgKiBAYXNwdHlwZSBzdHJpbmdcbiAgICAgKi9cbiAgICBAQ29udGVudENoaWxkKCdpdGVtVGVtcGxhdGUnKVxuICAgIEBUZW1wbGF0ZSgpXG4gICAgcHVibGljIGl0ZW1UZW1wbGF0ZTogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOlZpZXdDb250YWluZXJSZWYpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgc2V0VmFsdWUoJ2N1cnJlbnRJbnN0YW5jZScsIHRoaXMsIHRoaXMudmlld0NvbnRhaW5lclJlZik7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudHMob3V0cHV0cyk7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlUHJvcExpc3QgPSBpbnB1dDtcbiAgICB9XG59XG5cbi8qKlxuICogUmliYm9uSXRlbSBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnZS1yaWJib24taXRlbXMnLFxuICAgIHF1ZXJpZXM6IHtcbiAgICAgICAgY2hpbGRyZW46IG5ldyBDb250ZW50Q2hpbGRyZW4oUmliYm9uSXRlbURpcmVjdGl2ZSlcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBSaWJib25JdGVtc0RpcmVjdGl2ZSBleHRlbmRzIEFycmF5QmFzZTxSaWJib25JdGVtc0RpcmVjdGl2ZT4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignaXRlbXMnKTtcbiAgICB9XG59Il19