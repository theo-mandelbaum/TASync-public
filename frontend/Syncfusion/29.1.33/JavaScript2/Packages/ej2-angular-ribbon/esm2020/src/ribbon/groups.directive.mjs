import { Directive, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { RibbonCollectionsDirective } from './collections.directive';
import * as i0 from "@angular/core";
let input = ['collections', 'cssClass', 'enableGroupOverflow', 'groupIconCss', 'header', 'id', 'isCollapsed', 'isCollapsible', 'keyTip', 'launcherIconKeyTip', 'orientation', 'overflowHeader', 'priority', 'showLauncherIcon'];
let outputs = [];
export class RibbonGroupDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['collections'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
RibbonGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: RibbonGroupDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
RibbonGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: RibbonGroupDirective, selector: "e-ribbon-group", inputs: { collections: "collections", cssClass: "cssClass", enableGroupOverflow: "enableGroupOverflow", groupIconCss: "groupIconCss", header: "header", id: "id", isCollapsed: "isCollapsed", isCollapsible: "isCollapsible", keyTip: "keyTip", launcherIconKeyTip: "launcherIconKeyTip", orientation: "orientation", overflowHeader: "overflowHeader", priority: "priority", showLauncherIcon: "showLauncherIcon" }, queries: [{ propertyName: "childCollections", first: true, predicate: RibbonCollectionsDirective, descendants: true }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: RibbonGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-ribbon-group',
                    inputs: input,
                    outputs: outputs,
                    queries: {
                        childCollections: new ContentChild(RibbonCollectionsDirective)
                    }
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * RibbonGroup Array Directive
 * @private
 */
export class RibbonGroupsDirective extends ArrayBase {
    constructor() {
        super('groups');
    }
}
RibbonGroupsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: RibbonGroupsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
RibbonGroupsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: RibbonGroupsDirective, selector: "e-ribbon-groups", queries: [{ propertyName: "children", predicate: RibbonGroupDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: RibbonGroupsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-ribbon-groups',
                    queries: {
                        children: new ContentChildren(RibbonGroupDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXBzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9yaWJib24vZ3JvdXBzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFvQixlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRWhGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHlCQUF5QixDQUFDOztBQUVyRSxJQUFJLEtBQUssR0FBYSxDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUscUJBQXFCLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0FBQzFPLElBQUksT0FBTyxHQUFhLEVBQUUsQ0FBQztBQVUzQixNQUFNLE9BQU8sb0JBQXFCLFNBQVEsV0FBaUM7SUFrRnZFLFlBQW9CLGdCQUFpQztRQUNqRCxLQUFLLEVBQUUsQ0FBQztRQURRLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUE5RTlDLFNBQUksR0FBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBZ0ZwQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztJQUNuQyxDQUFDOztpSEF2RlEsb0JBQW9CO3FHQUFwQixvQkFBb0IsMGZBSFUsMEJBQTBCOzJGQUd4RCxvQkFBb0I7a0JBUmhDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsTUFBTSxFQUFFLEtBQUs7b0JBQ2IsT0FBTyxFQUFFLE9BQU87b0JBQ2hCLE9BQU8sRUFBRTt3QkFDTCxnQkFBZ0IsRUFBRSxJQUFJLFlBQVksQ0FBQywwQkFBMEIsQ0FBQztxQkFDakU7aUJBQ0o7O0FBMkZEOzs7R0FHRztBQU9ILE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxTQUFnQztJQUN2RTtRQUNJLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQixDQUFDOztrSEFIUSxxQkFBcUI7c0dBQXJCLHFCQUFxQixnRkFISSxvQkFBb0I7MkZBRzdDLHFCQUFxQjtrQkFOakMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixPQUFPLEVBQUU7d0JBQ0wsUUFBUSxFQUFFLElBQUksZUFBZSxDQUFDLG9CQUFvQixDQUFDO3FCQUN0RDtpQkFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVmlld0NvbnRhaW5lclJlZiwgQ29udGVudENoaWxkcmVuLCBDb250ZW50Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbXBsZXhCYXNlLCBBcnJheUJhc2UsIHNldFZhbHVlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG5cbmltcG9ydCB7IFJpYmJvbkNvbGxlY3Rpb25zRGlyZWN0aXZlIH0gZnJvbSAnLi9jb2xsZWN0aW9ucy5kaXJlY3RpdmUnO1xuXG5sZXQgaW5wdXQ6IHN0cmluZ1tdID0gWydjb2xsZWN0aW9ucycsICdjc3NDbGFzcycsICdlbmFibGVHcm91cE92ZXJmbG93JywgJ2dyb3VwSWNvbkNzcycsICdoZWFkZXInLCAnaWQnLCAnaXNDb2xsYXBzZWQnLCAnaXNDb2xsYXBzaWJsZScsICdrZXlUaXAnLCAnbGF1bmNoZXJJY29uS2V5VGlwJywgJ29yaWVudGF0aW9uJywgJ292ZXJmbG93SGVhZGVyJywgJ3ByaW9yaXR5JywgJ3Nob3dMYXVuY2hlckljb24nXTtcbmxldCBvdXRwdXRzOiBzdHJpbmdbXSA9IFtdO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2UtcmliYm9uLWdyb3VwJyxcbiAgICBpbnB1dHM6IGlucHV0LFxuICAgIG91dHB1dHM6IG91dHB1dHMsICAgIFxuICAgIHF1ZXJpZXM6IHtcbiAgICAgICAgY2hpbGRDb2xsZWN0aW9uczogbmV3IENvbnRlbnRDaGlsZChSaWJib25Db2xsZWN0aW9uc0RpcmVjdGl2ZSlcbiAgICB9XG59KVxuZXhwb3J0IGNsYXNzIFJpYmJvbkdyb3VwRGlyZWN0aXZlIGV4dGVuZHMgQ29tcGxleEJhc2U8UmliYm9uR3JvdXBEaXJlY3RpdmU+IHtcbiAgICBwdWJsaWMgZGlyZWN0aXZlUHJvcExpc3Q6IGFueTtcblx0XG4gICAgcHVibGljIGNoaWxkQ29sbGVjdGlvbnM6IGFueTtcbiAgICBwdWJsaWMgdGFnczogc3RyaW5nW10gPSBbJ2NvbGxlY3Rpb25zJ107XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIGxpc3Qgb2YgcmliYm9uIGNvbGxlY3Rpb25zLlxuICAgICAqIEBkZWZhdWx0IFtdXG4gICAgICogQGFzcHR5cGUgTGlzdDxSaWJib25Db2xsZWN0aW9uPlxuICAgICAqL1xuICAgIHB1YmxpYyBjb2xsZWN0aW9uczogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIG9uZSBvciBtb3JlIENTUyBjbGFzc2VzIHRvIGN1c3RvbWl6ZSB0aGUgYXBwZWFyYW5jZSBvZiBncm91cC5cbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHB1YmxpYyBjc3NDbGFzczogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdG8gYWRkIGEgc2VwYXJhdGUgcG9wdXAgZm9yIHRoZSBvdmVyZmxvdyBpdGVtcyBpbiB0aGUgZ3JvdXAuIFxuICAgICAqIElmIGl0IGlzIHNldCB0byBmYWxzZSwgdGhlIG92ZXJmbG93IGl0ZW1zIHdpbGwgYmUgc2hvd24gaW4gdGhlIGNvbW1vbiBvdmVyZmxvdyBwb3B1cCBwcmVzZW50IGF0IHRoZSByaWdodCBlbmQgb2YgdGhlIHRhYiBjb250ZW50LlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgcHVibGljIGVuYWJsZUdyb3VwT3ZlcmZsb3c6IGFueTtcbiAgICAvKiogXG4gICAgICogRGVmaW5lcyB0aGUgQ1NTIGNsYXNzIGZvciB0aGUgaWNvbnMgdG8gYmUgc2hvd24gaW4gdGhlIGdyb3VwIG92ZXJmbG93IGRyb3Bkb3duIGJ1dHRvbiBpbiBjbGFzc2ljIG1vZGUuIFxuICAgICAqIER1cmluZyBvdmVyZmxvdywgdGhlIGVudGlyZSBncm91cCB3aWxsIGJlIHNob3duIGluIGEgcG9wdXAgb2YgYSBkcm9wZG93biBidXR0b24gd2hpY2ggYXBwZWFycyBpbiB0aGUgcGxhY2Ugb2YgdGhlIGdyb3VwIGluIHJpYmJvbiB0YWIuXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBwdWJsaWMgZ3JvdXBJY29uQ3NzOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIGNvbnRlbnQgb2YgZ3JvdXAgaGVhZGVyLlxuICAgICAqIEBkZWZhdWx0ICcnXG4gICAgICovXG4gICAgcHVibGljIGhlYWRlcjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIGEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBncm91cC5cbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHB1YmxpYyBpZDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGdyb3VwIGlzIGluIGNvbGxhcHNlZCBzdGF0ZSBvciBub3QgZHVyaW5nIGNsYXNzaWMgbW9kZS5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHB1YmxpYyBpc0NvbGxhcHNlZDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGdyb3VwIGNhbiBiZSBjb2xsYXBzZWQgb24gcmVzaXplIGR1cmluZyBjbGFzc2ljIG1vZGUuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBpc0NvbGxhcHNpYmxlOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB0aGUga2V5dGlwIGNvbnRlbnQuXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBwdWJsaWMga2V5VGlwOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB0aGUga2V5dGlwIGNvbnRlbnQgZm9yIGxhdW5jaGVyIGljb24uXG4gICAgICogQGRlZmF1bHQgJydcbiAgICAgKi9cbiAgICBwdWJsaWMgbGF1bmNoZXJJY29uS2V5VGlwOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgd2hldGhlciB0byBvcmllbnRhdGlvbiBpbiB3aGljaCB0aGUgaXRlbXMgb2YgdGhlIGdyb3VwIHNob3VsZCBiZSBhcnJhbmdlZC5cbiAgICAgKiBAaXNlbnVtZXJhdGlvbiB0cnVlXG4gICAgICogQGRlZmF1bHQgSXRlbU9yaWVudGF0aW9uLkNvbHVtblxuICAgICAqIEBhc3B0eXBlIEl0ZW1PcmllbnRhdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyBvcmllbnRhdGlvbjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHRoZSBoZWFkZXIgc2hvd24gaW4gb3ZlcmZsb3cgcG9wdXAgb2YgUmliYm9uIGdyb3VwLlxuICAgICAqIEBkZWZhdWx0ICcnXG4gICAgICovXG4gICAgcHVibGljIG92ZXJmbG93SGVhZGVyOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIHByaW9yaXR5IG9yZGVyIGF0IHdoaWNoIHRoZSBncm91cCBzaG91bGQgYmUgY29sbGFwc2VkIG9yIGV4cGFuZGVkLiBcbiAgICAgKiBGb3IgY29sbGFwc2luZyB2YWx1ZSBpcyBmZXRjaGVkIGluIGFzY2VuZGluZyBvcmRlciBhbmQgZm9yIGV4cGFuZGluZyB2YWx1ZSBpcyBmZXRjaGVkIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHB1YmxpYyBwcmlvcml0eTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdG8gc2hvdyBvciBoaWRlIHRoZSBsYXVuY2hlciBpY29uIGZvciB0aGUgZ3JvdXAuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBwdWJsaWMgc2hvd0xhdW5jaGVySWNvbjogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOlZpZXdDb250YWluZXJSZWYpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgc2V0VmFsdWUoJ2N1cnJlbnRJbnN0YW5jZScsIHRoaXMsIHRoaXMudmlld0NvbnRhaW5lclJlZik7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudHMob3V0cHV0cyk7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlUHJvcExpc3QgPSBpbnB1dDtcbiAgICB9XG59XG5cbi8qKlxuICogUmliYm9uR3JvdXAgQXJyYXkgRGlyZWN0aXZlXG4gKiBAcHJpdmF0ZVxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2UtcmliYm9uLWdyb3VwcycsXG4gICAgcXVlcmllczoge1xuICAgICAgICBjaGlsZHJlbjogbmV3IENvbnRlbnRDaGlsZHJlbihSaWJib25Hcm91cERpcmVjdGl2ZSlcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBSaWJib25Hcm91cHNEaXJlY3RpdmUgZXh0ZW5kcyBBcnJheUJhc2U8UmliYm9uR3JvdXBzRGlyZWN0aXZlPiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdncm91cHMnKTtcbiAgICB9XG59Il19