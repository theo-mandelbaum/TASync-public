import { isNullOrUndefined, Property, ChildProperty, Complex, getNumericObject, isUndefined as isUndefined$1, Internationalization, getNumberDependable, defaultCurrencyCode, IntlBase, cldrData, extend, Collection, detach, getValue, Event as Event$1, NotifyPropertyChanges, Base, getUniqueID, getComponent, closest, L10n, merge, Component, removeClass, Browser, setStyleAttribute as setStyleAttribute$1, attributes, formatUnit, addClass, append, compile, remove, EventHandler, select, initializeCSPTemplate, isObject, getInstance, createElement, selectAll, rippleEffect, enableRipple, classList } from '@syncfusion/ej2-base';
import { Query, Predicate, DataManager, Deferred, DataUtil } from '@syncfusion/ej2-data';
import { Tooltip, Dialog as Dialog$1, calculatePosition, isCollide, createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';
import { Tab, TreeView, Toolbar, Item, Menu, MenuItem, ContextMenu as ContextMenu$1 } from '@syncfusion/ej2-navigations';
import { NumericTextBox, FormValidator, TextBox, ColorPicker as ColorPicker$1 } from '@syncfusion/ej2-inputs';
import { CheckBox, Button, RadioButton } from '@syncfusion/ej2-buttons';
import { DropDownList, ComboBox, AutoComplete } from '@syncfusion/ej2-dropdowns';
import { ListView } from '@syncfusion/ej2-lists';
import { DropDownButton, SplitButton } from '@syncfusion/ej2-splitbuttons';
import { beforeFltrcMenuOpen, filterCmenuSelect, filterCboxValue, filterDialogCreated, filterDialogClose, fltrPrevent, beforeCustomFilterOpen, parentsUntil, toogleCheckbox, createCboxWithWrap, getUid, ExcelFilterBase, CheckBoxFilterBase } from '@syncfusion/ej2-grids';
import { Chart as Chart$1, ColumnSeries, LineSeries, BarSeries, AreaSeries, StackingColumnSeries, StackingLineSeries, StackingBarSeries, ScatterSeries, StackingAreaSeries, Category, Legend, Tooltip as Tooltip$1, DataLabel, AccumulationChart, PieSeries, AccumulationTooltip, AccumulationDataLabel, AccumulationLegend } from '@syncfusion/ej2-charts';

/**
 * To get range indexes.
 *
 * @param {string} range - Specifies the range.
 * @param {Workbook} [context] - Optional Workbook context to derive sheet information, used when the sheet name or index is provided.
 * @param {number} [sheetIndex] - Optional sheet index to resolve sheet-specific range when context is provided.
 * @returns {number[]} - To get range indexes.
 */
function getRangeIndexes(range, context, sheetIndex) {
    var cellindexes;
    var indexes = [];
    if (range) {
        var sheet = void 0;
        if (context && !isNullOrUndefined(sheetIndex)) {
            sheet = getSheet(context, sheetIndex);
        }
        range = range.lastIndexOf('!') > -1 ? range.substring(range.lastIndexOf('!') + 1) : range;
        range = range.indexOf(':') === -1 ? range + ':' + range : range;
        var containsAlphabetsAndDigits = new RegExp(/^(?=.*[a-zA-Z])(?=.*\d)/g);
        if (!containsAlphabetsAndDigits.test(range)) {
            var refArr = range.split(':');
            range = isNullOrUndefined(range.match(/[0-9]/)) ? (refArr[0] + '1:' + refArr[1] + (sheet ? (sheet.rowCount - 1) : '1')) :
                ('A' + refArr[0] + ':' + (sheet ? getColumnHeaderText(sheet.colCount) : 'A') + refArr[1]);
        }
        range.split(':').forEach(function (address) {
            cellindexes = getCellIndexes(address);
            indexes.push(cellindexes[0]);
            indexes.push(cellindexes[1]);
        });
    }
    return indexes;
}
/**
 * To get single cell indexes
 *
 * @param {string} address - Specifies the address.
 * @returns {number[]} - To get single cell indexes
 */
function getCellIndexes(address) {
    return [parseInt(address.match(/\d+/)[0], 10) - 1, getColIndex(address.match(/[A-Z]+/i)[0].toUpperCase())];
}
/**
 * To get column index from text.
 *
 * @hidden
 * @param {string} text - Specifies the text.
 * @returns {number} - To get column index from text.
 */
function getColIndex(text) {
    var colIdx = 0;
    text = text.split('').reverse().join('');
    for (var i = text.length - 1; i >= 0; i--) {
        colIdx += (text[i].charCodeAt(0) - 64) * (Math.pow(26, i));
    }
    return colIdx - 1;
}
/**
 * To get cell address from given row and column index.
 *
 * @param {number} sRow - Specifies the row.
 * @param {number} sCol - Specifies the col.
 * @returns {string} - To get cell address from given row and column index.
 */
function getCellAddress(sRow, sCol) {
    return getColumnHeaderText(sCol + 1) + (sRow + 1);
}
/**
 * To get range address from given range indexes.
 *
 * @param {number[]} range - Specifies the range.
 * @returns {string} - To get range address from given range indexes.
 */
function getRangeAddress(range) {
    return getCellAddress(range[0], range[1]) + ':' + (!isNullOrUndefined(range[2]) ?
        getCellAddress(range[2], range[3]) : getCellAddress(range[0], range[1]));
}
/**
 * To get column header cell text
 *
 * @param {number} colIndex - Specifies the colIndex.
 * @returns {string} - Get Column Header Text
 */
function getColumnHeaderText(colIndex) {
    var alphabet = 'Z';
    if (colIndex / 26 > 1) {
        return getColumnHeaderText((colIndex % 26 === 0) ? (colIndex / 26 - 1) : Math.floor(colIndex / 26))
            + String.fromCharCode((colIndex % 26) === 0 ? alphabet.charCodeAt(0) : 64 + (colIndex % 26));
    }
    else {
        return String.fromCharCode(64 + (colIndex));
    }
}
/**
 * @hidden
 * @param {SheetModel} address - Specifies the address.
 * @param {Workbook} [context] - Optional Workbook context to derive sheet information, used when the sheet name or index is provided.
 * @param {number} [sheetIndex] - Optional sheet index to resolve sheet-specific range when context is provided.
 * @returns {number[]} - Get Indexes From Address
 */
function getIndexesFromAddress(address, context, sheetIndex) {
    return getRangeIndexes(getRangeFromAddress(address), context, sheetIndex);
}
/**
 * @hidden
 * @param {SheetModel} address - Specifies the address.
 * @returns {string} - Get Range From Address.
 */
function getRangeFromAddress(address) {
    var sheetRefIndex = address.lastIndexOf('!');
    return sheetRefIndex > -1 ? address.substring(sheetRefIndex + 1) : address;
}
/**
 * Get complete address for selected range
 *
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @returns {string} - Get complete address for selected range
 */
function getAddressFromSelectedRange(sheet) {
    return sheet.name + '!' + sheet.selectedRange;
}
/**
 * @param {Workbook} context - Specifies the context.
 * @param {string} address - Specifies the address.
 * @returns {Object} - To get Address Info
 * @hidden
 */
function getAddressInfo(context, address) {
    var sheetIndex = getSheetIndexFromAddress(context, address);
    return { sheetIndex: sheetIndex, indices: getIndexesFromAddress(address, context, sheetIndex) };
}
/**
 * @param {Workbook} context - Specifies the context.
 * @param {string} address - Specifies the address.
 * @returns {number} - return the sheet index.
 * @hidden
 */
function getSheetIndexFromAddress(context, address) {
    var sIdx;
    if (address.indexOf('!') > -1) {
        sIdx = getSheetIndex(context, getSheetNameFromAddress(address));
    }
    else {
        sIdx = context.activeSheetIndex;
    }
    return sIdx;
}
/**
 * Given range will be swapped/arranged in increasing order.
 *
 * @hidden
 * @param {number[]} range - Specifies the range.
 * @returns {number[]} - Returns the bool value.
 */
function getSwapRange(range) {
    var clonedRange = range.slice();
    if (range[0] > range[2]) {
        swap(clonedRange, 0, 2);
    }
    if (range[1] > range[3]) {
        swap(clonedRange, 1, 3);
    }
    return clonedRange;
}
/**
 * Interchange values in an array
 *
 * @param {number[]} range - Specifies the range.
 * @param {number} x - Specifies the x.
 * @param {number} y - Specifies the y.
 * @returns {void} - Interchange values in an array.
 */
function swap(range, x, y) {
    var tmp = range[x];
    range[x] = range[y];
    range[y] = tmp;
}
/**
 * @hidden
 * @param {number[]} range - Specifies the range.
 * @returns {boolean} - Returns the bool value.
 */
function isSingleCell(range) {
    return range[0] === range[2] && range[1] === range[3];
}

/**
 * Worker task.
 *
 * @param {Object} context - Specify the context.
 * @param {Function | Object} taskFn - Specify the task.
 * @param {Function} callbackFn - Specify the callbackFn.
 * @param {Object[]} data - Specify the data.
 * @param {boolean} preventCallback - Specify the preventCallback.
 * @param {Workbook} parent - Specify the Workbook instance.
 * @returns {WorkerHelper} - Worker task.
 */
function executeTaskAsync(context, taskFn, callbackFn, data, preventCallback, parent) {
    return new WorkerHelper(context, taskFn, callbackFn, data, preventCallback, parent);
}
/**
 * @hidden
 *
 * The `WorkerHelper` module is used to perform multiple actions using Web Worker asynchronously.
 */
var WorkerHelper = /** @class */ (function () {
    /**
     * Constructor for WorkerHelper module in Workbook library.
     *
     * @private
     * @param {Object} context - Specify the context.
     * @param {Function | Object} task - Specify the task.
     * @param {Function} defaultListener - Specify the defaultListener.
     * @param {Object[]} taskData - Specify the taskData.
     * @param {boolean} preventCallback - Specify the preventCallback.
     * @param {Workbook} parent - Specify the Workbook instance.
     */
    function WorkerHelper(context, task, defaultListener, taskData, preventCallback, parent) {
        this.preventCallback = false;
        this.context = context;
        this.workerTask = task;
        this.defaultListener = defaultListener;
        this.workerData = taskData;
        this.parent = parent;
        if (preventCallback) {
            this.preventCallback = true;
        }
        this.initWorker();
    }
    /**
     * To terminate the worker task.
     *
     * @private
     * @returns {void} - To terminate the worker task.
     */
    WorkerHelper.prototype.terminate = function () {
        this.worker.terminate();
        URL.revokeObjectURL(this.workerUrl);
    };
    /**
     * To initiate the worker.
     *
     * @private
     * @returns {void} - To initiate the worker.
     */
    WorkerHelper.prototype.initWorker = function () {
        var taskBlob = new Blob([this.getFnCode()], { type: 'text/javascript' });
        this.workerUrl = URL.createObjectURL(taskBlob);
        this.worker = new Worker(this.workerUrl);
        this.worker.onmessage = this.messageFromWorker.bind(this);
        this.worker.onerror = this.onError.bind(this);
        if (!this.parent.isVue) {
            this.worker.postMessage(this.workerData);
        }
        else {
            var clonedData = JSON.parse(JSON.stringify(this.workerData));
            this.worker.postMessage(clonedData);
        }
    };
    /**
     * Method for getting response from worker.
     *
     * @param {MessageEvent} args - Specify the args.
     * @returns {void} - Method for getting response from worker.
     * @private
     */
    WorkerHelper.prototype.messageFromWorker = function (args) {
        this.terminate();
        this.defaultListener.apply(this.context, [args.data]);
    };
    /**
     * Method for getting error message from worker if failed.
     *
     * @param {ErrorEvent} args - Specify the args.
     * @returns {void} - Method for getting error message from worker if failed.
     * @private
     */
    WorkerHelper.prototype.onError = function (args) {
        this.terminate();
        if (args.message && args.message.includes('FormData')) {
            this.defaultListener.apply(this.context, [{ isFormDataError: true }]);
        }
        else {
            throw args.message || args;
        }
    };
    /**
     * Construct function code for worker.
     *
     * @private
     * @returns {string} -  Construct function code for worker.
     */
    WorkerHelper.prototype.getFnCode = function () {
        var workerCode = '';
        var i;
        var keys;
        var workerFunction = '';
        var isHaveFunction = false;
        if (typeof this.workerTask === 'function') {
            if (this.workerTask.toString().indexOf('function') < 0) {
                workerFunction = 'function ' + this.workerTask.toString();
            }
            else {
                workerFunction = this.workerTask.toString();
                isHaveFunction = true;
            }
            workerCode += ('self.workerTask = ' + workerFunction + '; \n');
        }
        else {
            if (typeof this.workerTask === 'object') {
                keys = Object.keys(this.workerTask);
                for (i = 0; i < keys.length; i++) {
                    if (this.workerTask[keys[i]].toString().indexOf('function') < 0) {
                        workerFunction = 'function ' + this.workerTask[keys[i]].toString();
                    }
                    else {
                        workerFunction = this.workerTask[keys[i]].toString();
                        isHaveFunction = true;
                    }
                    workerCode += ((i === 0 ? 'self.workerTask' : keys[i]) + '= ' + workerFunction + '; \n');
                }
            }
        }
        workerCode += 'self.onmessage = ' + (isHaveFunction ? '' : ' function ') +
            (this.preventCallback ? this.getMessageFn.toString() : this.getCallbackMessageFn.toString()) + '; \n';
        return workerCode;
    };
    /**
     * Get default worker task with callback.
     *
     * @private
     * @param {MessageEvent} args - Specify the args.
     * @returns {void} - Get default worker task without callback.
     */
    WorkerHelper.prototype.getCallbackMessageFn = function (args) {
        postMessage(this.workerTask.apply(this, args.data));
    };
    /**
     * Get default worker task without callback.
     *
     * @private
     * @param {MessageEvent} args - Specify the args.
     * @returns {void} - Get default worker task without callback.
     */
    WorkerHelper.prototype.getMessageFn = function (args) {
        this.workerTask.apply(this, args.data);
    };
    return WorkerHelper;
}());

/**
 * To get Workbook required modules.
 *
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {ModuleDeclaration[]} modules - Specifies the modules.
 * @returns {ModuleDeclaration[]} - To get Workbook required modules.
 */
function getWorkbookRequiredModules(context, modules) {
    if (modules === void 0) { modules = []; }
    modules.push({
        member: 'dataBind',
        args: [context]
    });
    modules.push({
        member: 'workbookProtectSheet',
        args: [context]
    });
    if (context.allowSave) {
        modules.push({
            member: 'workbookSave',
            args: [context]
        });
    }
    if (context.allowPrint) {
        modules.push({
            member: 'print',
            args: [context]
        });
    }
    if (context.allowOpen) {
        modules.push({
            member: 'workbookOpen',
            args: [context]
        });
    }
    if (context.allowEditing) {
        modules.push({
            member: 'workbookEdit',
            args: [context]
        });
        modules.push({
            member: 'workbookFormula',
            args: [context]
        });
    }
    if (context.allowNumberFormatting) {
        modules.push({
            member: 'workbookNumberFormat',
            args: [context]
        });
    }
    if (context.allowCellFormatting) {
        modules.push({
            member: 'workbookcellformat',
            args: [context]
        });
    }
    if (context.allowSorting) {
        modules.push({ member: 'workbookSort', args: [context] });
    }
    if (context.allowHyperlink) {
        modules.push({ member: 'workbookHyperlink', args: [context] });
    }
    if (context.allowFiltering) {
        modules.push({ member: 'workbookFilter', args: [context] });
    }
    if (context.allowFindAndReplace) {
        modules.push({ member: 'workbookfindAndReplace', args: [context] });
    }
    if (context.allowInsert) {
        modules.push({ member: 'workbookinsert', args: [context] });
    }
    if (context.allowDelete) {
        modules.push({ member: 'workbookdelete', args: [context] });
    }
    if (context.allowDataValidation) {
        modules.push({ member: 'workbookDataValidation', args: [context] });
    }
    if (context.allowMerge) {
        modules.push({ member: 'workbookmerge', args: [context] });
    }
    if (context.allowCellFormatting) {
        modules.push({ member: 'workbookConditionalFormatting', args: [context] });
    }
    if (context.allowImage) {
        modules.push({ member: 'workbookImage', args: [context] });
    }
    if (context.allowChart) {
        modules.push({ member: 'workbookChart', args: [context] });
    }
    if (context.allowAutoFill) {
        modules.push({ member: 'workbookautofill', args: [context] });
    }
    return modules;
}

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the cell style.
 */
var CellStyle = /** @class */ (function (_super) {
    __extends(CellStyle, _super);
    function CellStyle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('Calibri')
    ], CellStyle.prototype, "fontFamily", void 0);
    __decorate([
        Property('bottom')
    ], CellStyle.prototype, "verticalAlign", void 0);
    __decorate([
        Property('left')
    ], CellStyle.prototype, "textAlign", void 0);
    __decorate([
        Property('0pt')
    ], CellStyle.prototype, "textIndent", void 0);
    __decorate([
        Property('#000000')
    ], CellStyle.prototype, "color", void 0);
    __decorate([
        Property('#ffffff')
    ], CellStyle.prototype, "backgroundColor", void 0);
    __decorate([
        Property('normal')
    ], CellStyle.prototype, "fontWeight", void 0);
    __decorate([
        Property('normal')
    ], CellStyle.prototype, "fontStyle", void 0);
    __decorate([
        Property('11pt')
    ], CellStyle.prototype, "fontSize", void 0);
    __decorate([
        Property('none')
    ], CellStyle.prototype, "textDecoration", void 0);
    __decorate([
        Property('')
    ], CellStyle.prototype, "border", void 0);
    __decorate([
        Property('')
    ], CellStyle.prototype, "borderTop", void 0);
    __decorate([
        Property('')
    ], CellStyle.prototype, "borderBottom", void 0);
    __decorate([
        Property('')
    ], CellStyle.prototype, "borderLeft", void 0);
    __decorate([
        Property('')
    ], CellStyle.prototype, "borderRight", void 0);
    return CellStyle;
}(ChildProperty));
/**
 * Represents the Filter Collection.
 *
 */
var FilterCollection = /** @class */ (function (_super) {
    __extends(FilterCollection, _super);
    function FilterCollection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property()
    ], FilterCollection.prototype, "sheetIndex", void 0);
    __decorate([
        Property()
    ], FilterCollection.prototype, "filterRange", void 0);
    __decorate([
        Property(false)
    ], FilterCollection.prototype, "hasFilter", void 0);
    __decorate([
        Property()
    ], FilterCollection.prototype, "column", void 0);
    __decorate([
        Property()
    ], FilterCollection.prototype, "criteria", void 0);
    __decorate([
        Property()
    ], FilterCollection.prototype, "value", void 0);
    __decorate([
        Property()
    ], FilterCollection.prototype, "dataType", void 0);
    __decorate([
        Property()
    ], FilterCollection.prototype, "predicates", void 0);
    return FilterCollection;
}(ChildProperty));
/**
 * Represents the sort Collection.
 *
 */
var SortCollection = /** @class */ (function (_super) {
    __extends(SortCollection, _super);
    function SortCollection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property()
    ], SortCollection.prototype, "sortRange", void 0);
    __decorate([
        Property()
    ], SortCollection.prototype, "columnIndex", void 0);
    __decorate([
        Property()
    ], SortCollection.prototype, "order", void 0);
    __decorate([
        Property()
    ], SortCollection.prototype, "sheetIndex", void 0);
    return SortCollection;
}(ChildProperty));
/**
 * Represents the DefineName.
 */
var DefineName = /** @class */ (function (_super) {
    __extends(DefineName, _super);
    function DefineName() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('')
    ], DefineName.prototype, "name", void 0);
    __decorate([
        Property('')
    ], DefineName.prototype, "scope", void 0);
    __decorate([
        Property('')
    ], DefineName.prototype, "comment", void 0);
    __decorate([
        Property('')
    ], DefineName.prototype, "refersTo", void 0);
    return DefineName;
}(ChildProperty));
/**
 * Configures the Protect behavior for the spreadsheet.
 *
 */
var ProtectSettings = /** @class */ (function (_super) {
    __extends(ProtectSettings, _super);
    function ProtectSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property(false)
    ], ProtectSettings.prototype, "selectCells", void 0);
    __decorate([
        Property(false)
    ], ProtectSettings.prototype, "selectUnLockedCells", void 0);
    __decorate([
        Property(false)
    ], ProtectSettings.prototype, "formatCells", void 0);
    __decorate([
        Property(false)
    ], ProtectSettings.prototype, "formatRows", void 0);
    __decorate([
        Property(false)
    ], ProtectSettings.prototype, "formatColumns", void 0);
    __decorate([
        Property(false)
    ], ProtectSettings.prototype, "insertLink", void 0);
    return ProtectSettings;
}(ChildProperty));
/**
 * Represents the Hyperlink.
 *
 */
var Hyperlink = /** @class */ (function (_super) {
    __extends(Hyperlink, _super);
    function Hyperlink() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('')
    ], Hyperlink.prototype, "address", void 0);
    return Hyperlink;
}(ChildProperty));
/**
 * Represents the DataValidation.
 */
var Validation = /** @class */ (function (_super) {
    __extends(Validation, _super);
    function Validation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('WholeNumber')
    ], Validation.prototype, "type", void 0);
    __decorate([
        Property('Between')
    ], Validation.prototype, "operator", void 0);
    __decorate([
        Property('0')
    ], Validation.prototype, "value1", void 0);
    __decorate([
        Property('0')
    ], Validation.prototype, "value2", void 0);
    __decorate([
        Property(true)
    ], Validation.prototype, "ignoreBlank", void 0);
    __decorate([
        Property(true)
    ], Validation.prototype, "inCellDropDown", void 0);
    __decorate([
        Property(false)
    ], Validation.prototype, "isHighlighted", void 0);
    __decorate([
        Property('')
    ], Validation.prototype, "address", void 0);
    return Validation;
}(ChildProperty));
/**
 * Represents the Format.
 */
var Format = /** @class */ (function (_super) {
    __extends(Format, _super);
    function Format() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('General')
    ], Format.prototype, "format", void 0);
    __decorate([
        Complex({}, CellStyle)
    ], Format.prototype, "style", void 0);
    __decorate([
        Property(true)
    ], Format.prototype, "isLocked", void 0);
    return Format;
}(ChildProperty));
/**
 * Represents the Conditional Formatting.
 *
 */
var ConditionalFormat = /** @class */ (function (_super) {
    __extends(ConditionalFormat, _super);
    function ConditionalFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('GreaterThan')
    ], ConditionalFormat.prototype, "type", void 0);
    __decorate([
        Complex({}, Format)
    ], ConditionalFormat.prototype, "format", void 0);
    __decorate([
        Property('RedFT')
    ], ConditionalFormat.prototype, "cFColor", void 0);
    __decorate([
        Property('')
    ], ConditionalFormat.prototype, "value", void 0);
    __decorate([
        Property('')
    ], ConditionalFormat.prototype, "range", void 0);
    __decorate([
        Property('')
    ], ConditionalFormat.prototype, "action", void 0);
    return ConditionalFormat;
}(ChildProperty));
/**
 * Represents the Legend.
 *
 */
var LegendSettings = /** @class */ (function (_super) {
    __extends(LegendSettings, _super);
    function LegendSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property(true)
    ], LegendSettings.prototype, "visible", void 0);
    __decorate([
        Property('Auto')
    ], LegendSettings.prototype, "position", void 0);
    return LegendSettings;
}(ChildProperty));
/**
 * Represents the DataLabelSettings.
 *
 */
var DataLabelSettings = /** @class */ (function (_super) {
    __extends(DataLabelSettings, _super);
    function DataLabelSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property(false)
    ], DataLabelSettings.prototype, "visible", void 0);
    __decorate([
        Property('Auto')
    ], DataLabelSettings.prototype, "position", void 0);
    return DataLabelSettings;
}(ChildProperty));
/**
 * Represents the Border.
 *
 */
var Border = /** @class */ (function (_super) {
    __extends(Border, _super);
    function Border() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('')
    ], Border.prototype, "color", void 0);
    __decorate([
        Property(1)
    ], Border.prototype, "width", void 0);
    return Border;
}(ChildProperty));
/**
 * Represents the MarkerSettings.
 *
 */
var MarkerSettings = /** @class */ (function (_super) {
    __extends(MarkerSettings, _super);
    function MarkerSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property(false)
    ], MarkerSettings.prototype, "visible", void 0);
    __decorate([
        Property('Circle')
    ], MarkerSettings.prototype, "shape", void 0);
    __decorate([
        Property(5)
    ], MarkerSettings.prototype, "size", void 0);
    __decorate([
        Property(null)
    ], MarkerSettings.prototype, "fill", void 0);
    __decorate([
        Property(true)
    ], MarkerSettings.prototype, "isFilled", void 0);
    __decorate([
        Complex({}, Border)
    ], MarkerSettings.prototype, "border", void 0);
    return MarkerSettings;
}(ChildProperty));
/**
 * Specifies the major grid lines in the `axis`.
 *
 */
var MajorGridLines = /** @class */ (function (_super) {
    __extends(MajorGridLines, _super);
    function MajorGridLines() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property(0)
    ], MajorGridLines.prototype, "width", void 0);
    return MajorGridLines;
}(ChildProperty));
/**
 * Specifies the minor grid lines in the `axis`.
 *
 */
var MinorGridLines = /** @class */ (function (_super) {
    __extends(MinorGridLines, _super);
    function MinorGridLines() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property(0)
    ], MinorGridLines.prototype, "width", void 0);
    return MinorGridLines;
}(ChildProperty));
/**
 * Represents the axis.
 *
 */
var Axis = /** @class */ (function (_super) {
    __extends(Axis, _super);
    function Axis() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('')
    ], Axis.prototype, "title", void 0);
    __decorate([
        Complex({}, MajorGridLines)
    ], Axis.prototype, "majorGridLines", void 0);
    __decorate([
        Complex({}, MinorGridLines)
    ], Axis.prototype, "minorGridLines", void 0);
    __decorate([
        Property(true)
    ], Axis.prototype, "visible", void 0);
    return Axis;
}(ChildProperty));
/**
 * Represents the Chart.
 */
var Chart = /** @class */ (function (_super) {
    __extends(Chart, _super);
    function Chart() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('Line')
    ], Chart.prototype, "type", void 0);
    __decorate([
        Property('Material')
    ], Chart.prototype, "theme", void 0);
    __decorate([
        Property(false)
    ], Chart.prototype, "isSeriesInRows", void 0);
    __decorate([
        Complex({}, MarkerSettings)
    ], Chart.prototype, "markerSettings", void 0);
    __decorate([
        Property('')
    ], Chart.prototype, "range", void 0);
    __decorate([
        Property('')
    ], Chart.prototype, "id", void 0);
    __decorate([
        Property('')
    ], Chart.prototype, "title", void 0);
    __decorate([
        Property(290)
    ], Chart.prototype, "height", void 0);
    __decorate([
        Property(480)
    ], Chart.prototype, "width", void 0);
    __decorate([
        Property(0)
    ], Chart.prototype, "top", void 0);
    __decorate([
        Property(0)
    ], Chart.prototype, "left", void 0);
    __decorate([
        Complex({}, LegendSettings)
    ], Chart.prototype, "legendSettings", void 0);
    __decorate([
        Complex({}, Axis)
    ], Chart.prototype, "primaryXAxis", void 0);
    __decorate([
        Complex({}, Axis)
    ], Chart.prototype, "primaryYAxis", void 0);
    __decorate([
        Complex({}, DataLabelSettings)
    ], Chart.prototype, "dataLabelSettings", void 0);
    return Chart;
}(ChildProperty));
/**
 * Represents the Image.
 */
var Image$1 = /** @class */ (function (_super) {
    __extends(Image, _super);
    function Image() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('')
    ], Image.prototype, "src", void 0);
    __decorate([
        Property('')
    ], Image.prototype, "id", void 0);
    __decorate([
        Property(300)
    ], Image.prototype, "height", void 0);
    __decorate([
        Property(400)
    ], Image.prototype, "width", void 0);
    __decorate([
        Property(0)
    ], Image.prototype, "top", void 0);
    __decorate([
        Property(0)
    ], Image.prototype, "left", void 0);
    return Image;
}(ChildProperty));
/**
 * Represents the AutoFillSettings.
 */
var AutoFillSettings = /** @class */ (function (_super) {
    __extends(AutoFillSettings, _super);
    function AutoFillSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        Property('FillSeries')
    ], AutoFillSettings.prototype, "fillType", void 0);
    __decorate([
        Property(true)
    ], AutoFillSettings.prototype, "showFillOptions", void 0);
    return AutoFillSettings;
}(ChildProperty));

/**
 * Specifies Workbook internal events.
 */
/** @hidden */
var workbookDestroyed = 'workbookDestroyed';
/** @hidden */
var updateSheetFromDataSource = 'updateSheetFromDataSource';
/** @hidden */
var dataSourceChanged = 'dataSourceChanged';
/** @hidden */
var dataChanged = 'dataChanged';
/** @hidden */
var triggerDataChange = 'triggerDataChange';
/** @hidden */
var workbookOpen = 'workbookOpen';
/** @hidden */
var beginSave = 'beginSave';
/** @hidden */
var beginAction = 'actionBegin';
/** @hidden */
var sortImport = 'sortImport';
/** @hidden */
var findToolDlg = 'findToolDlg';
/** @hidden */
var exportDialog = 'exportDialog';
/** @hidden */
var setFilteredCollection = 'setFilteredCollection';
/** @hidden */
var saveCompleted = 'saveCompleted';
/** @hidden */
var applyNumberFormatting = 'applyNumber';
/** @hidden */
var getFormattedCellObject = 'getFormattedCell';
/** @hidden */
var calculateFormula = 'calculateFormula';
/** @hidden */
var refreshCellElement = 'refreshCellElem';
/** @hidden */
var setCellFormat = 'setCellFormat';
/** @hidden */
var findAllValues = 'findAllValues';
/** @hidden */
var textDecorationUpdate = 'textDecorationUpdate';
/** @hidden */
var applyCellFormat = 'applyCellFormat';
/** @hidden */
var updateUsedRange = 'updateUsedRange';
/** @hidden */
var updateRowColCount = 'updateRowColCount';
/** @hidden */
var workbookFormulaOperation = 'workbookFormulaOperation';
/** @hidden */
var workbookEditOperation = 'workbookEditOperation';
/** @hidden */
var checkDateFormat = 'checkDateFormat';
/** @hidden */
var checkNumberFormat = 'checkNumberFormat';
/** @hidden */
var parseDecimalNumber = 'parseDecimalNumber';
/** @hidden */
var getFormattedBarText = 'getFormattedBarText';
/** @hidden */
var activeCellChanged = 'activeCellChanged';
/** @hidden */
var openSuccess = 'openSuccess';
/** @hidden */
var openFailure = 'openFailure';
/** @hidden */
var sheetCreated = 'sheetCreated';
/** @hidden */
var sheetsDestroyed = 'sheetsDestroyed';
/** @hidden */
var aggregateComputation = 'aggregateComputation';
/** @hidden */
var getUniqueRange = 'getUniqueRange';
/** @hidden */
var removeUniquecol = 'removeUniquecol';
/** @hidden */
var checkUniqueRange = 'checkUniqueRange';
/** @hidden */
var reApplyFormula = 'reApplyFormula';
/** @hidden */
var clearFormulaDependentCells = 'clearFormulaDependentCells';
/** @hidden */
var formulaInValidation = 'formulaInValidation';
/** @hidden */
var beforeSort = 'beforeSort';
/** @hidden */
var initiateSort = 'initiateSort';
/** @hidden */
var updateSortedDataOnCell = 'updateSortedDataOnCell';
/** @hidden */
var sortComplete = 'sortComplete';
/** @hidden */
var sortRangeAlert = 'sortRangeAlert';
/** @hidden */
var initiatelink = 'initiatelink';
/** @hidden */
var beforeHyperlinkCreate = 'beforeHyperlinkCreate';
/** @hidden */
var afterHyperlinkCreate = 'afterHyperlinkCreate';
/** @hidden */
var beforeHyperlinkClick = 'beforeHyperlinkClick';
/** @hidden */
var afterHyperlinkClick = 'afterHyperlinkClick';
/** @hidden */
var addHyperlink = 'addHyperlink';
/** @hidden */
var setLinkModel = 'setLinkModel';
/** @hidden */
var beforeFilter = 'beforeFilter';
/** @hidden */
var initiateFilter = 'initiateFilter';
/** @hidden */
var filterComplete = 'filterComplete';
/** @hidden */
var filterRangeAlert = 'filterRangeAlert';
/** @hidden */
var clearAllFilter = 'clearAllFilter';
/** @hidden */
var wrapEvent = 'wrapText';
/** @hidden */
var onSave = 'onSave';
/** @hidden */
var insert = 'insert';
/** @hidden */
var deleteAction = 'delete';
/** @hidden */
var insertModel = 'insertModel';
/** @hidden */
var deleteModel = 'deleteModel';
/** @hidden */
var isValidation = 'isValidation';
/** @hidden */
var cellValidation = 'cellValidation';
/** @hidden */
var addHighlight = 'addHighlight';
/** @hidden */
var dataValidate = 'dataValidate';
/** @hidden */
var find = 'find';
/** @hidden */
var goto = 'gotoHandler';
/** @hidden */
var findWorkbookHandler = 'findHandler';
/** @hidden */
var replace = 'replace';
/** @hidden */
var replaceAll = 'replaceAll';
/** @hidden */
var showFindAlert = 'showFindAlert';
/** @hidden */
var findKeyUp = 'findKeyUp';
/** @hidden */
var removeHighlight = 'removeHighlight';
/** @hidden */
var queryCellInfo = 'queryCellInfo';
/** @hidden */
var count = 'count';
/** @hidden */
var findCount = 'findCount';
/** @hidden */
var protectSheetWorkBook = 'protectSheet';
/** @hidden */
var updateToggle = 'updateToggleItem';
/** @hidden */
var protectsheetHandler = 'protectsheetHandler';
/** @hidden */
var replaceAllDialog = 'replaceAllDialog';
/** @hidden */
var unprotectsheetHandler = 'unprotectsheetHandler';
/** @hidden */
var workBookeditAlert = 'editAlert';
/** @hidden */
var workbookReadonlyAlert = 'readonlyAlert';
/** @hidden */
var setLockCells = 'setLockCells';
/** @hidden */
var applyLockCells = 'applyLockCells';
/** @hidden */
var setMerge = 'setMerge';
/** @hidden */
var applyMerge = 'applyMerge';
/** @hidden */
var mergedRange = 'mergedRange';
/** @hidden */
var activeCellMergedRange = 'activeCellMergedRange';
/** @hidden */
var insertMerge = 'insertMerge';
/** @hidden */
var hideShow = 'hideShow';
/** @hidden */
var setCFRule = 'setCFRule';
/** @hidden */
var applyCF = 'applyCF';
/** @hidden */
var clearCFRule = 'clearCFRule';
/** @hidden */
var clear = 'clear';
/** @hidden */
var clearCF = 'clearCF';
/** @hidden */
var setImage = 'setImage';
/** @hidden */
var setChart = 'setChart';
/** @hidden */
var initiateChart = 'initiateChart';
/** @hidden */
var refreshRibbonIcons = 'refreshRibbonIcons';
/** @hidden */
var refreshChart = 'refreshChart';
/** @hidden */
var refreshChartSize = 'refreshChartSize';
/** @hidden */
var deleteChartColl = 'deleteChartColl';
/** @hidden */
var initiateChartModel = 'initiateChartModel';
/** @hidden */
var focusChartBorder = 'focusChartBorder';
/** @hidden */
var saveError = 'saveError';
/** @hidden */
var updateHighlight = 'updateHighlight';
/** @hidden */
var beforeInsert = 'beforeInsert';
/** @hidden */
var beforeDelete = 'beforeDelete';
/** @hidden */
var deleteHyperlink = 'deleteHyperlink';
/** @hidden */
var moveOrDuplicateSheet = 'moveOrDuplicateSheet';
/** @hidden */
var setAutoFill = 'setAutoFill';
/** @hidden */
var refreshCell = 'refreshCell';
/** @hidden */
var getFillInfo = 'getFillInfo';
/** @hidden */
var getautofillDDB = 'getautofillDDB';
/** @hidden */
var rowFillHandler = 'rowFillHandler';
/** @hidden */
var getTextSpace = 'getTextSpace';
/** @hidden */
var refreshClipboard = 'refreshClipboard';
/** @hidden */
var updateView = 'updateView';
/** @hidden */
var selectionComplete = 'selectionComplete';
/** @hidden */
var refreshInsertDelete = 'refreshInsertDelete';
/** @hidden */
var getUpdatedFormulaOnInsertDelete = 'getUpdatedFormulaOnInsertDelete';
/** @hidden */
var beforeCellUpdate = 'beforeCellUpdate';
/** @hidden */
var duplicateSheetFilterHandler = 'duplicateSheetFilterHandler';
/** @hidden */
var unMerge = 'unMerge';
/** @hidden */
var checkFormulaRef = 'checkFormulaRef';
/** @hidden */
var parseFormulaArgument = 'parseFormulaArgument';
/** @hidden */
var getCellRefValue = 'getCellRefValue';
/** @hidden */
var commputeFormulaValue = 'commputeFormulaValue';
/** @hidden */
var getChartRowIdxFromClientY = 'getChartRowIdxFromClientY';
/** @hidden */
var getChartColIdxFromClientX = 'getChartColIdxFromClientX';
/** @hidden */
var refreshChartCellOnInit = 'refreshChartCellOnInit';
/** @hidden */
var localizedFormatAction = 'localizedFormatAction';
/** @hidden */
var moveSheetHandler = 'moveSheetHandler';
/** @hidden */
var addListValidationDropdown = 'addListValidationDropdown';
/** @hidden */
var sheetRenameUpdate = 'sheetRenameUpdate';
/** @hidden */
var updateSortCollection = 'updateSortCollection';

/**
 * Check the value of the cell is number with thousand separator and currency symbol and returns the parsed value.
 *
 * @param {CellModel} cell - Specifies the cell.
 * @param {string} locale - Specifies the locale.
 * @param {string} groupSep - Specifies the group separator.
 * @param {string} decimalSep - Specifies the decimal separator.
 * @param {string} currencySym - Specifies the currency Symbol.
 * @param {boolean} isFractionalType - Defines whether the value is a fractional type or not.
 * @param {boolean} checkCurrency - Specifies the currency check.
 * @returns {Object} - returns the parsed value.
 * @hidden
 */
function checkIsNumberAndGetNumber(cell, locale, groupSep, decimalSep, currencySym, isFractionalType, checkCurrency) {
    var cellValue = cell.value;
    if (cellValue && typeof cellValue === 'string') {
        if (cellValue.includes('\n')) {
            return { isNumber: false, value: cellValue };
        }
        if (isNumber(cellValue)) {
            return { isNumber: true, value: cellValue };
        }
        if (currencySym && cellValue.includes(currencySym) && (checkCurrency || cell.format.includes(currencySym) || cell.format.includes('$'))) {
            cellValue = cellValue.replace(currencySym, '').trim();
        }
        if (groupSep && cellValue.includes(groupSep) && parseThousandSeparator(cellValue, locale, groupSep, decimalSep)) {
            cellValue = cellValue.split(groupSep).join('').trim();
        }
        if (!decimalSep) {
            decimalSep = getNumericObject(locale).decimal;
        }
        if (decimalSep !== '.' && cellValue.includes(decimalSep)) {
            cellValue = cellValue.replace(decimalSep, '.').trim();
        }
        if (isNumber(cellValue)) {
            return { isNumber: true, value: cellValue };
        }
        if (isFractionalType && cellValue.split('/').length === 2) {
            try {
                var splittedVal = cellValue.split(' ');
                if (splittedVal.length === 2 && splittedVal[0].split('/').length === 1) {
                    var result = evaluate(splittedVal[0]);
                    var result1 = evaluate(splittedVal[1]);
                    cellValue = result + result1;
                }
                else {
                    cellValue = evaluate(cellValue);
                }
                return { isNumber: true, value: cellValue };
            }
            catch (error) {
                return { isNumber: false, value: cellValue };
            }
        }
    }
    else if (isNumber(cellValue)) {
        return { isNumber: true, value: cellValue };
    }
    return { isNumber: false, value: cellValue };
}
/**
 * @param {string} value - Specifies the value.
 * @param {string} locale - Specifies the locale.
 * @param {string} groupSep - Specifies the group separator.
 * @param {string} decimalSep - Specifies the decimal separator.
 * @returns {boolean} - Returns parsed thousand separator.
 * @hidden
 */
function parseThousandSeparator(value, locale, groupSep, decimalSep) {
    var isParsed = false;
    var number = 123456;
    var parsedNum = number.toLocaleString(locale);
    var splitedNum = parsedNum.split(groupSep).reverse();
    var splitedValue = value.split(decimalSep)[0].split(groupSep);
    for (var i = 0; i < splitedValue.length; i++) {
        if (i === splitedValue.length - 1) {
            isParsed = splitedValue[i].length === splitedNum[0].length;
        }
        else {
            isParsed = !isUndefined$1(splitedNum[1]) && (i === 0 ? splitedValue[i].length <= splitedNum[1].length :
                splitedValue[i].length === splitedNum[1].length);
        }
        if (!isParsed) {
            break;
        }
    }
    return isParsed;
}

/**
 * Check whether the text is formula or not.
 *
 * @param {string} text - Specify the text.
 * @param {boolean} isEditing - Specify the isEditing.
 * @returns {boolean} - Check whether the text is formula or not.
 */
function checkIsFormula(text, isEditing) {
    return text && text[0] === '=' && (text.length > 1 || isEditing);
}
/**
 * Check whether the value is cell reference or not.
 *
 * @param {string} value - Specify the value to check.
 * @returns {boolean} - Returns boolean value
 */
function isCellReference(value) {
    var range = value;
    range = range.split('$').join('');
    if (range.indexOf(':') > -1) {
        var rangeSplit = range.split(':');
        if (isValidCellReference(rangeSplit[0]) && isValidCellReference(rangeSplit[1])) {
            return true;
        }
    }
    else if (range.indexOf(':') < 0) {
        if (isValidCellReference(range)) {
            return true;
        }
    }
    return false;
}
/**
 * Check whether the value is character or not.
 *
 * @param {string} value - Specify the value to check.
 * @returns {boolean} - Returns boolean value
 */
function isChar(value) {
    if ((value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90) || (value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122)) {
        return true;
    }
    return false;
}
/**
 * Check whether the range selection is on complete row.
 *
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {number[]} range - Specify the range index.
 * @returns {boolean} - Returns boolean value
 * @hidden
 */
function isRowSelected(sheet, range) {
    return range[1] === 0 && range[3] === sheet.colCount - 1;
}
/**
 * Check whether the range selection is on complete column.
 *
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {number[]} range - Specify the range index.
 * @returns {boolean} - Returns boolean value
 * @hidden
 */
function isColumnSelected(sheet, range) {
    return range[0] === 0 && range[2] === sheet.rowCount - 1;
}
/**
 * @param {number[]} range - Specify the range
 * @param {number} rowIdx - Specify the row index
 * @param {number} colIdx - Specify the col index
 * @returns {boolean} - Returns boolean value
 */
function inRange(range, rowIdx, colIdx) {
    return range && (rowIdx >= range[0] && rowIdx <= range[2] && colIdx >= range[1] && colIdx <= range[3]);
}
/**
 * @param {number[]} address - Specify the address
 * @param {number} rowIdx - Specify the row index
 * @param {number} colIdx - Specify the col index
 * @returns {boolean} - Returns boolean value
 */
function isInMultipleRange(address, rowIdx, colIdx) {
    var range;
    var isInRange;
    var splitedAddress = address.split(' ');
    for (var i = 0, len = splitedAddress.length; i < len; i++) {
        range = getRangeIndexes(splitedAddress[i]);
        isInRange = inRange(range, rowIdx, colIdx);
        if (isInRange) {
            break;
        }
    }
    return isInRange;
}
/** @hidden
 * @param {number[]} range - Specify the range
 * @param {number[]} testRange - Specify the test range
 * @param {boolean} isModify - Specify the boolean value
 * @returns {boolean} - Returns boolean value
 */
function isInRange(range, testRange, isModify) {
    var inRange = range[0] <= testRange[0] && range[2] >= testRange[2] && range[1] <= testRange[1] && range[3] >= testRange[3];
    if (inRange) {
        return true;
    }
    if (isModify) {
        if (testRange[0] < range[0] && testRange[2] < range[0] || testRange[0] > range[2] && testRange[2] > range[2]) {
            return false;
        }
        else {
            if (testRange[0] < range[0] && testRange[2] > range[0]) {
                testRange[0] = range[0];
                inRange = true;
            }
            if (testRange[2] > range[2]) {
                testRange[2] = range[2];
                inRange = true;
            }
        }
        if (testRange[1] < range[1] && testRange[3] < range[1] || testRange[1] > range[3] && testRange[3] > range[3]) {
            return false;
        }
        else {
            if (testRange[1] < range[1] && testRange[3] > range[1]) {
                testRange[1] = range[1];
                inRange = true;
            }
            if (testRange[3] > range[3]) {
                testRange[3] = range[3];
                inRange = true;
            }
        }
    }
    return inRange;
}
/**
 * @hidden
 * @param {string} address - Specifies the address for whole column.
 * @param {number[]} testRange - Specifies range used to split the address.
 * @param {number} colIdx - Specifies the column index.
 * @returns {string} - returns the modified address.
 */
function getSplittedAddressForColumn(address, testRange, colIdx) {
    var colName = getColumnHeaderText(colIdx + 1);
    if (address) {
        address.split(' ').forEach(function (addrs) {
            var range = getRangeIndexes(addrs);
            if (isInRange(range, testRange)) {
                address = address.split(addrs).join(colName + (range[0] + 1) +
                    ':' + colName + testRange[0] + ' ' + colName + (testRange[2] + 2) +
                    ':' + colName + (range[2] + 1));
            }
            else if (isInRange(range, testRange, true)) {
                var modifiedAddress = void 0;
                if (testRange[0] > range[0]) {
                    modifiedAddress = colName + (range[0] + 1) + ':' + colName + testRange[0];
                }
                else {
                    modifiedAddress = colName + (testRange[2] + 2) + ':' + colName + (range[2] + 1);
                }
                address = address.split(addrs).join(modifiedAddress);
            }
        });
    }
    else {
        address = colName + '1:' + colName + testRange[0] + ' ' + colName + (testRange[2] + 2) + ':' + colName + '1048576';
    }
    return address;
}
/**
 * Check whether the cell is locked or not
 *
 * @param {CellModel} cell - Specify the cell.
 * @param {ColumnModel} column - Specify the column.
 * @returns {boolean} - Returns boolean value
 * @hidden
 */
function isLocked(cell, column) {
    if (!cell) {
        cell = {};
    }
    if (cell.isLocked) {
        return true;
    }
    else if (cell.isLocked === false) {
        return false;
    }
    else if (column && column.isLocked) {
        return true;
    }
    else if (!cell.isLocked && (column && column.isLocked !== false)) {
        return true;
    }
    return false;
}
/**
 * Check whether the value is cell reference or not.
 *
 * @param {string} value - Specify the value to check.
 * @returns {boolean} - Returns boolean value
 * @hidden
 */
function isValidCellReference(value) {
    var text = value;
    var startNum = 0;
    var endNum = 0;
    var cellText = '';
    var textLength = text.length;
    for (var i = 0; i < textLength; i++) {
        if (isChar(text[i])) {
            endNum++;
        }
    }
    cellText = text.substring(startNum, endNum);
    var cellTextLength = cellText.length;
    if (cellTextLength !== textLength) {
        if (cellTextLength < 4) {
            if (textLength !== 1 && (isNaN(parseInt(text, 10)))) {
                var cellColIndex = columnIndex(cellText);
                // XFD is the last column, 16384 - Maximum number of columns in excel.
                if (cellColIndex > 16384) {
                    return false;
                }
                var cellNumber = parseFloat(text.substring(endNum, textLength));
                if (cellNumber > 0 && cellNumber < 1048577) { // 1048576 - Maximum number of rows in excel.
                    return true;
                }
            }
        }
    }
    return false;
}
/**
 * To get the column index of the given cell.
 *
 * @param {string} cell - Cell address for getting column index.
 * @returns {number} - To get the column index of the given cell.
 * @hidden
 */
function columnIndex(cell) {
    var j = 0;
    var k = 0;
    cell = cell.toUpperCase();
    if (j < cell.length && cell[j] === '!') {
        j++;
        while (j < cell.length && cell[j] !== '!') {
            j++;
        }
        j++;
    }
    while (j < cell.length && isChar(cell[j])) {
        var charCode = cell[j].charCodeAt(0);
        k = k * 26 + charCode - 64;
        j++;
    }
    if (k === 0) {
        return -1;
    }
    return k;
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specify the sheet
 * @param {number} index - specify the index
 * @param {boolean} increase - specify the boolean value.
 * @param {string} layout - specify the string
 * @param {number} count - specify the count.
 * @returns {number} - To skip the hidden index
 *
 */
function skipHiddenIdx(sheet, index, increase, layout, count) {
    if (layout === void 0) { layout = 'rows'; }
    var rowColObj;
    if (increase) {
        for (var i = index; i < Infinity; i++) {
            rowColObj = sheet["" + layout];
            if (rowColObj[index] && rowColObj[index].hidden) {
                index++;
            }
            else {
                if (count) {
                    count--;
                    index++;
                }
                else {
                    break;
                }
            }
        }
    }
    else {
        for (var i = index; i > -1; i--) {
            rowColObj = sheet["" + layout];
            if (rowColObj[index] && rowColObj[index].hidden) {
                index--;
            }
            else {
                break;
            }
        }
    }
    return index;
}
/**
 * @param {CellStyleModel} style - Cell style.
 * @param {boolean} onActionUpdate - Specifies the action.
 * @returns {boolean} - retruns `true` is height needs to be checked.
 * @hidden
 */
function isHeightCheckNeeded(style, onActionUpdate) {
    var keys = Object.keys(style);
    return (onActionUpdate ? keys.indexOf('fontSize') > -1 : keys.indexOf('fontSize') > -1
        && Number(style.fontSize.split('pt')[0]) > 12) || keys.indexOf('fontFamily') > -1 || keys.indexOf('borderTop') > -1
        || keys.indexOf('borderBottom') > -1;
}
/**
 * @param {number[]} currIndexes - current indexes in which formula get updated
 * @param {number[]} prevIndexes - copied indexes
 * @param {SheetModel} sheet - sheet model
 * @param {Workbook} context - Represents workbook instance
 * @param {CellModel} prevCell - Copied or previous cell model
 * @param {boolean} isSort - Represents sort action
 * @returns {string} - retruns updated formula
 * @hidden
 */
function getUpdatedFormula(currIndexes, prevIndexes, sheet, context, prevCell, isSort) {
    var cIdxValue;
    var cell;
    if (prevIndexes) {
        cell = prevCell || getCell(prevIndexes[0], prevIndexes[1], sheet, false, true);
        cIdxValue = cell.formula || '';
    }
    if (cIdxValue) {
        if (isSort) {
            context.notify(clearFormulaDependentCells, { cellRef: getCellAddress(prevIndexes[0], prevIndexes[1]) });
        }
        if (cIdxValue.indexOf('=') === 0) {
            cIdxValue = cIdxValue.slice(1);
        }
        cIdxValue = cIdxValue.split('(').join(context.listSeparator).split(')').join(context.listSeparator);
        var formulaOperators = ['+', '-', '*', '/', '>=', '<=', '<>', '>', '<', '=', '%', '&'];
        var splitArray = void 0;
        var value = cIdxValue;
        for (var i = 0; i < formulaOperators.length; i++) {
            splitArray = value.split(formulaOperators[i]);
            value = splitArray.join(context.listSeparator);
        }
        splitArray = value.split(context.listSeparator);
        var newAddress = [];
        var newRef = void 0;
        var refObj = void 0;
        var isSheetRef = void 0;
        var cellRefSheet = void 0;
        var cellRef = void 0;
        for (var j = 0; j < splitArray.length; j++) {
            isSheetRef = splitArray[j].includes('!');
            if (isSheetRef) {
                var lastIndex = splitArray[j].lastIndexOf('!');
                cellRefSheet = splitArray[j].substring(0, lastIndex);
                cellRef = splitArray[j].substring(lastIndex + 1).toUpperCase();
            }
            else {
                cellRef = splitArray[j].toUpperCase();
            }
            if (isCellReference(cellRef.trim()) && !cellRef.includes('$')) {
                var leadingSpaces = getLeadingSpaces(cellRef);
                var trailingSpaces = getTrailingSpaces(cellRef);
                var range = getRangeIndexes(cellRef);
                var newRange = [currIndexes[0] - (prevIndexes[0] - range[0]), currIndexes[1] - (prevIndexes[1] - range[1]),
                    currIndexes[0] - (prevIndexes[0] - range[2]), currIndexes[1] - (prevIndexes[1] - range[3])];
                if (newRange[1] < 0 || newRange[2] < 0 || newRange[3] < 0 || (!isSort && newRange[0] < 0)) {
                    newRef = '#REF!';
                }
                else {
                    if (isSort && newRange[0] < 0) {
                        newRange[0] = newRange[2];
                    }
                    newRef = getCellAddress(newRange[0], newRange[1]);
                    if (cellRef.includes(':')) {
                        newRef += (':' + getCellAddress(newRange[2], newRange[3]));
                    }
                    newRef = isCellReference(newRef) ? newRef : '#REF!';
                }
                refObj = {};
                if (isSheetRef) {
                    newRef = cellRefSheet + "!" + newRef;
                }
                refObj[splitArray[j]] = "" + leadingSpaces + newRef + trailingSpaces;
                if (splitArray[j].includes(':')) {
                    newAddress.splice(0, 0, refObj);
                }
                else {
                    newAddress.push(refObj);
                }
            }
        }
        var objKey = void 0;
        var objValue = void 0;
        cIdxValue = cell.formula;
        var newCIdxValue = cIdxValue;
        for (var j = 0; j < newAddress.length; j++) {
            objKey = Object.keys(newAddress[j])[0];
            objValue = newAddress[j]["" + objKey];
            var objKeyLen = objKey.length;
            var positionIdx = newCIdxValue.indexOf(objKey);
            var emptyString = '';
            for (var idx = 0; idx < objValue.length; idx++) {
                emptyString += ' ';
            }
            cIdxValue = cIdxValue.slice(0, positionIdx) + objValue + cIdxValue.slice(positionIdx + objKeyLen);
            newCIdxValue = newCIdxValue.slice(0, positionIdx) + emptyString + newCIdxValue.slice(positionIdx + objKeyLen);
        }
        return cIdxValue;
    }
    else {
        return null;
    }
}
/**
 * Retrieves the leading spaces from a given string.
 *
 * @param {string} string - The input string from which to retrieve leading spaces.
 * @returns {string} - A string containing all leading spaces from the input string.
 * @hidden
 */
function getLeadingSpaces(string) {
    var leadingSpaces = '';
    for (var i = 0; i < string.length; i++) {
        if (string[i] === ' ') {
            leadingSpaces += ' ';
        }
        else {
            break;
        }
    }
    return leadingSpaces;
}
/**
 * Retrieves the trailing spaces from a given string.
 *
 * @param {string} string - The input string from which to retrieve trailing spaces.
 * @returns {string} - A string containing all trailing spaces from the input string.
 * @hidden
 */
function getTrailingSpaces(string) {
    var trailingSpaces = '';
    for (var i = string.length - 1; i >= 0; i--) {
        if (string[i] === ' ') {
            trailingSpaces = ' ' + trailingSpaces;
        }
        else {
            break;
        }
    }
    return trailingSpaces;
}
/**
 * @param {Workbook} context - Specifies the context.
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {CellUpdateArgs} prop - Specifies the props.
 * @param {BeforeActionData} actionData - It holds the undoRedoCollection cell details.
 * @param {boolean} isUndo - It holds the undo information.
 * @returns {boolean} - returns args cancel value.
 * @hidden */
function updateCell(context, sheet, prop, actionData, isUndo) {
    var args = { cell: prop.cell, rowIndex: prop.rowIdx, colIndex: prop.colIdx, cancel: false, sheet: sheet.name };
    if (!prop.preventEvt) { // Prevent event triggering for public method cell update.
        context.trigger(beforeCellUpdate, args);
    }
    if (!prop.eventOnly && !args.cancel) { // `eventOnly` - To trigger event and return without cell model update.
        if (prop.valChange) {
            var prevCell = getCell(args.rowIndex, args.colIndex, sheet);
            var prevCellVal = !prop.preventEvt && context.getDisplayText(prevCell);
            var isFormulaCell = !!(prevCell && prevCell.formula);
            setCell(args.rowIndex, args.colIndex, sheet, args.cell, !prop.pvtExtend);
            var cell = getCell(args.rowIndex, args.colIndex, sheet, false, true);
            if (prop.mergedCells) {
                delete cell.value;
                delete cell.formula;
            }
            if (cell.formattedText) {
                delete cell.formattedText;
            }
            var evtArgs = {
                action: 'updateCellValue',
                address: [args.rowIndex, args.colIndex], sheetIndex: getSheetIndex(context, sheet.name), value: isFormulaCell && !cell.formula ? (cell.value || (cell.value === 0 ? '0' : '')) :
                    (cell.formula || cell.value || (cell.value === 0 ? '0' : '')),
                skipFormatCheck: prop.skipFormatCheck, isRandomFormula: prop.isRandomFormula,
                isDelete: prop.isDelete, deletedRange: prop.deletedRange, fillType: prop.fillType,
                cellInformation: actionData, isRedo: !isUndo, actionName: prop.fillType,
                isPaste: prop.requestType === 'paste'
            };
            context.notify(workbookEditOperation, evtArgs);
            prop.isFormulaDependent = evtArgs.isFormulaDependent;
            if (prop.requestType && args.cell === null) {
                setCell(args.rowIndex, args.colIndex, sheet, args.cell, !prop.pvtExtend);
            }
            if (prop.cellDelete) {
                delete cell.value;
                delete cell.formula;
                delete cell.hyperlink;
            }
            if (prop.uiRefresh) {
                context.serviceLocator.getService('cell').refresh(args.rowIndex, args.colIndex, prop.lastCell, prop.td, prop.checkCF, prop.checkWrap, prop.skipFormatCheck, prop.isRandomFormula, prop.fillType);
            }
            if (!prop.preventEvt) {
                var cellDisplayText = context.getDisplayText(cell);
                if (cellDisplayText !== prevCellVal) {
                    var cellValue = getCell(args.rowIndex, args.colIndex, sheet, false, true).value;
                    cellValue = cellValue || (cellValue === 0 ? '0' : '');
                    var evtArgs_1 = { value: cellValue, oldValue: prevCellVal, formula: cell.formula || '',
                        address: sheet.name + "!" + getCellAddress(args.rowIndex, args.colIndex), displayText: cellDisplayText };
                    if (prop.requestType) {
                        evtArgs_1.requestType = prop.requestType;
                    }
                    context.trigger('cellSave', evtArgs_1);
                }
            }
        }
        else {
            setCell(args.rowIndex, args.colIndex, sheet, args.cell, !prop.pvtExtend);
        }
    }
    return args.cancel;
}
/**
 * @param {number} rowIdx - row index
 * @param {number} colIdx - column index
 * @param {SheetModel} sheet - sheet model
 * @returns {number[]} - retruns data range
 * @hidden
 */
function getDataRange(rowIdx, colIdx, sheet) {
    var sRowIdx = rowIdx;
    var eRowIdx = rowIdx;
    var sColIdx = colIdx;
    var eColIdx = colIdx;
    var usedRowIdx = sheet.usedRange.rowIndex;
    var usedColIdx = sheet.usedRange.colIndex;
    var isEmptyRow = function (idx) {
        for (var i = 0; i <= usedColIdx; i++) {
            if (!isUndefined$1(getCell(idx, i, sheet, null, true).value)) {
                return false;
            }
        }
        return true;
    };
    var isEmptyColumn = function (idx) {
        for (var i = sRowIdx; i <= eRowIdx; i++) {
            if (!isUndefined$1(getCell(i, idx, sheet, null, true).value)) {
                return false;
            }
        }
        return true;
    };
    for (var i = sRowIdx; i <= usedRowIdx; i++) { // To find end row index
        if (isUndefined$1(getCell(i, colIdx, sheet, null, true).value) && isEmptyRow(i)) {
            break;
        }
        else {
            eRowIdx = i;
        }
    }
    for (var i = sRowIdx; i >= 0; i--) { // To find start row index
        if (isUndefined$1(getCell(i, colIdx, sheet, null, true).value) && isEmptyRow(i)) {
            break;
        }
        else {
            sRowIdx = i;
        }
    }
    for (var i = sColIdx; i <= usedColIdx; i++) { // To find end column index
        if (isUndefined$1(getCell(rowIdx, i, sheet, null, true).value) && isEmptyColumn(i)) {
            break;
        }
        else {
            eColIdx = i;
        }
    }
    for (var i = sColIdx; i >= 0; i--) { // To find start column index
        if (isUndefined$1(getCell(rowIdx, i, sheet, null, true).value) && isEmptyColumn(i)) {
            break;
        }
        else {
            sColIdx = i;
        }
    }
    return [sRowIdx, sColIdx, eRowIdx, eColIdx];
}
/**
 * @param {InsertDeleteModelArgs} args - row index
 * @param {number[]} formatRange - format range index
 * @param {boolean} isAction - specifies isAction.
 * @returns {number[]} - retruns updated range
 * @hidden
 */
function insertFormatRange(args, formatRange, isAction) {
    var sltRangeIndex = getRangeIndexes(args.model.selectedRange);
    var insertStartIndex = 0;
    var insertEndIndex = 0;
    if (args.modelType === 'Column') {
        if (isAction || (args.insertType === 'before' && args.isUndoRedo)) {
            sltRangeIndex = [0, args.start, 0, args.end];
        }
        if (args.insertType === 'before') {
            if ((formatRange[1] <= sltRangeIndex[1] && formatRange[3] >= sltRangeIndex[1])) {
                insertStartIndex = 0;
                insertEndIndex = (sltRangeIndex[3] - sltRangeIndex[1]) + 1;
            }
            else if (sltRangeIndex[1] < formatRange[1]) {
                insertStartIndex = insertEndIndex = (sltRangeIndex[3] - sltRangeIndex[1]) + 1;
            }
        }
        else {
            if (args.isUndoRedo) {
                var diffValue = (args.end - args.start) + 1;
                sltRangeIndex = [0, args.start - diffValue, 0, args.end - diffValue];
            }
            if ((formatRange[1] <= sltRangeIndex[3] && formatRange[3] >= sltRangeIndex[3])) {
                insertStartIndex = 0;
                insertEndIndex = (sltRangeIndex[3] - sltRangeIndex[1]) + 1;
            }
            else if (sltRangeIndex[3] < formatRange[3]) {
                insertStartIndex = insertEndIndex = (sltRangeIndex[3] - sltRangeIndex[1]) + 1;
            }
        }
        return [formatRange[0], formatRange[1] + insertStartIndex, formatRange[2], formatRange[3] + insertEndIndex];
    }
    else {
        if (isAction || (args.insertType === 'above' && args.isUndoRedo)) {
            sltRangeIndex = [args.start, 0, args.end, 0];
        }
        if (args.insertType === 'above') {
            if ((formatRange[0] <= sltRangeIndex[0] && formatRange[2] >= sltRangeIndex[0])) {
                insertStartIndex = 0;
                insertEndIndex = (sltRangeIndex[2] - sltRangeIndex[0]) + 1;
            }
            else if (sltRangeIndex[0] < formatRange[0]) {
                insertStartIndex = insertEndIndex = (sltRangeIndex[2] - sltRangeIndex[0]) + 1;
            }
        }
        else {
            if (args.isUndoRedo) {
                var diffValue = (args.end - args.start) + 1;
                sltRangeIndex = [args.start - diffValue, 0, args.end - diffValue, 0];
            }
            if ((formatRange[0] <= sltRangeIndex[2] && formatRange[2] >= sltRangeIndex[2])) {
                insertStartIndex = 0;
                insertEndIndex = (sltRangeIndex[2] - sltRangeIndex[0]) + 1;
            }
            else if (sltRangeIndex[2] < formatRange[2]) {
                insertStartIndex = insertEndIndex = (sltRangeIndex[2] - sltRangeIndex[0]) + 1;
            }
        }
        return [formatRange[0] + insertStartIndex, formatRange[1], formatRange[2] + insertEndIndex, formatRange[3]];
    }
}
/**
 * @param {InsertDeleteModelArgs} args - row index
 * @param {number[]} formatRange - cell range index
 * @returns {number[]} - retruns data range
 * @hidden
 */
function deleteFormatRange(args, formatRange) {
    var cellRange;
    var deleteStartIndex = 0;
    var deleteEndIndex = 0;
    if (args.modelType === 'Column') {
        cellRange = [0, args.start, args.model.usedRange.rowIndex, args.end];
        if (cellRange[3] < formatRange[1]) {
            deleteStartIndex = deleteEndIndex = cellRange[3] - cellRange[1] + 1;
        }
        else if (cellRange[1] >= formatRange[1] && cellRange[3] <= formatRange[3]) {
            deleteEndIndex = cellRange[3] - cellRange[1] + 1;
        }
        else if (cellRange[1] >= formatRange[1] && cellRange[1] <= formatRange[3]) {
            deleteEndIndex = formatRange[3] - cellRange[1] + 1;
        }
        else if (cellRange[1] < formatRange[1] && cellRange[3] >= formatRange[1]) {
            deleteStartIndex = formatRange[1] - cellRange[1];
            deleteEndIndex = cellRange[3] - cellRange[1] + 1;
        }
        else if (cellRange[1] < formatRange[1] && cellRange[3] < formatRange[3]) {
            deleteStartIndex = (cellRange[3] - formatRange[1]) + (cellRange[3] - cellRange[1]) + 1;
            deleteEndIndex = cellRange[3] - cellRange[1] + 1;
        }
        return [formatRange[0], formatRange[1] - deleteStartIndex, formatRange[2], formatRange[3] - deleteEndIndex];
    }
    else {
        cellRange = [args.start, 0, args.end, args.model.usedRange.colIndex];
        if (cellRange[2] < formatRange[0]) {
            deleteStartIndex = deleteEndIndex = cellRange[2] - cellRange[0] + 1;
        }
        else if (cellRange[0] >= formatRange[0] && cellRange[2] <= formatRange[2]) {
            deleteEndIndex = cellRange[2] - cellRange[0] + 1;
        }
        else if (cellRange[0] >= formatRange[0] && cellRange[0] <= formatRange[2]) {
            deleteEndIndex = formatRange[2] - cellRange[0] + 1;
        }
        else if (cellRange[0] < formatRange[0] && cellRange[2] >= formatRange[0]) {
            deleteStartIndex = formatRange[0] - cellRange[0];
            deleteEndIndex = cellRange[2] - cellRange[0] + 1;
        }
        else if (cellRange[0] < formatRange[0] && cellRange[2] < formatRange[2]) {
            deleteStartIndex = (cellRange[2] - formatRange[0]) + (cellRange[2] - cellRange[0]) + 1;
            deleteEndIndex = cellRange[2] - cellRange[0] + 1;
        }
        return [formatRange[0] - deleteStartIndex, formatRange[1], formatRange[2] - deleteEndIndex, formatRange[3]];
    }
}
/**
 * @param {ConditionalFormat[]} curCF - Specifies current Conditional formatting.
 * @param {ConditionalFormatModel[]} cfRule - Specifies conditional formatting rules.
 * @param {number} rowIdx - Specifies the row index.
 * @param {number} colIdx -Specifies the col index.
 * @param {number[]} startRanges - Specifies conditional formatting origin index.
 * @param {number[]} fillRanges - Specifies the conditional formatting fill ranges.
 * @param {SheetModel} sheet -Specifies the conditional formatted sheet.
 * @returns {void} - Updates Conditional formatting model.
 * @hidden
 */
function updateCFModel(curCF, cfRule, rowIdx, colIdx, startRanges, fillRanges, sheet) {
    var cfRange;
    var indexes;
    for (var i = curCF.length - 1; i >= 0; i--) {
        cfRange = curCF[i].range.trim().split(',');
        for (var j = 0; j < cfRange.length; j++) {
            indexes = getRangeIndexes(cfRange[j].includes(':') ? cfRange[j] :
                cfRange[j] + ":" + cfRange[j]);
            if (rowIdx >= indexes[0] && colIdx >= indexes[1] && rowIdx <= indexes[2] && colIdx <= indexes[3]) {
                cfRule.push(curCF[i]);
                curCF.splice(i, 1);
                break;
            }
            else if (startRanges && startRanges[0] >= indexes[0] && startRanges[1] >= indexes[1] &&
                startRanges[0] <= indexes[2] && startRanges[1] <= indexes[3]) {
                var newCondiFormat = {
                    action: 'autofillWithCF',
                    cFColor: curCF[i].cFColor,
                    range: getRangeAddress(fillRanges),
                    type: curCF[i].type,
                    value: curCF[i].value
                };
                curCF.splice(i, 1);
                for (var i_1 = 0, cfMembers = sheet.conditionalFormats; i_1 < cfMembers.length; i_1++) {
                    if (cfMembers[i_1].action === 'autofillWithCF' && cfMembers[i_1].range === newCondiFormat.range) {
                        break;
                    }
                    else if (i_1 === cfMembers.length - 1) {
                        cfRule.push(newCondiFormat);
                        sheet.conditionalFormats.push(newCondiFormat);
                    }
                }
                break;
            }
        }
    }
}
/**
 * @param {number} indexes - Specifies the indexes.
 * @param {string} range - Specifies the range.
 * @returns {boolean} - Return is range or not.
 * @hidden
 */
function checkRange(indexes, range) {
    var ranges = range.trim().split(',');
    var left;
    var right;
    var top;
    var bottom;
    var cfIdx;
    var checkRange = function (idx) {
        for (var i = 0; i < ranges.length; i++) {
            cfIdx = getRangeIndexes(ranges[i].includes(':') ? ranges[i] : ranges[i] + ":" + ranges[i]);
            if (idx[0] <= cfIdx[0] && idx[1] <= cfIdx[1] && idx[2] >= cfIdx[2] && idx[3] >= cfIdx[3]) {
                return true;
            }
            else {
                top = idx[0] >= cfIdx[0] && idx[0] <= cfIdx[2];
                bottom = idx[2] >= cfIdx[0] && idx[2] <= cfIdx[2];
                left = idx[1] >= cfIdx[1] && idx[1] <= cfIdx[3];
                right = idx[3] >= cfIdx[1] && idx[3] <= cfIdx[3];
                if (top && bottom) {
                    if (left || right || (idx[1] < cfIdx[1] && idx[3] > cfIdx[3])) {
                        if (idx[0] - cfIdx[0] > 0) {
                            return true;
                        }
                        if (cfIdx[2] - idx[2] > 0) {
                            return true;
                        }
                    }
                    if (left && idx[1] !== cfIdx[1]) {
                        return true;
                    }
                    if (right && idx[3] !== cfIdx[3]) {
                        return true;
                    }
                }
                else if (left && right) {
                    if (top || bottom || (idx[0] < cfIdx[0] && idx[2] > cfIdx[2])) {
                        if (idx[1] - cfIdx[1] > 0) {
                            return true;
                        }
                        if (cfIdx[3] - idx[3] > 0) {
                            return true;
                        }
                    }
                    if (top) {
                        if (idx[0] !== cfIdx[0]) {
                            return true;
                        }
                    }
                    else if (bottom && idx[2] !== cfIdx[2]) {
                        return true;
                    }
                }
                else if (top || bottom) {
                    if (left) {
                        if (idx[1] !== cfIdx[1]) {
                            return true;
                        }
                        if (idx[0] - cfIdx[0] > 0) {
                            return true;
                        }
                        else if (cfIdx[2] - idx[2] > 0) {
                            return true;
                        }
                    }
                    else if (right) {
                        if (idx[3] !== cfIdx[3]) {
                            return true;
                        }
                        if (idx[0] - cfIdx[0] > 0) {
                            return true;
                        }
                        else if (cfIdx[2] - idx[2] > 0) {
                            return true;
                        }
                    }
                    else if (idx[1] < cfIdx[1] && idx[3] > cfIdx[3]) {
                        return true;
                    }
                }
                else if ((left || right) && idx[0] < cfIdx[0] && idx[2] > cfIdx[2]) {
                    return true;
                }
            }
        }
        return false;
    };
    for (var j = 0; j < indexes.length; j++) {
        if (checkRange(indexes[j])) {
            return true;
        }
    }
    return false;
}
/**
 * Parse the formatted text to get the actual cell value.
 *
 * @param {string[]} valArr - Specifies the value array.
 * @param {string} context - Specifies the workbook instance.
 * @param {LocaleNumericSettings} numObj - Specifies the locale numeric options like decimal and group separators.
 * @returns {string[]} - Returns the parsed number collection.
 * @hidden
 */
function parseLocaleNumber(valArr, context, numObj) {
    var formatArgs;
    if (!numObj) {
        numObj = getNumericObject(context.locale);
    }
    for (var idx = 0; idx < valArr.length; idx++) {
        if (isNumber(valArr[idx])) {
            if (numObj.group === '.') {
                valArr[idx] = valArr[idx].toString();
                if (valArr[idx].indexOf('.') &&
                    parseThousandSeparator(valArr[idx], context.locale, numObj.group, numObj.decimal)) {
                    valArr[idx] = valArr[idx].split(numObj.group).join('');
                }
            }
        }
        else {
            formatArgs = { formattedText: valArr[idx], value: valArr[idx], format: 'General',
                cell: { value: valArr[idx], format: 'General' }, isEdit: true };
            context.notify(getFormattedCellObject, formatArgs);
            if (isNumber(formatArgs.value)) {
                valArr[idx] = formatArgs.value.toString();
            }
        }
    }
    return valArr;
}
/**
 * Returns the overall viewport indexes by including the freeze and movable part.
 *
 * @param {Workbook} parent - Specify the Workbook object.
 * @param {number} viewport - Specifies the top, bottom, left, and right index of the current viewport.
 * @param {number} viewport.topIndex - Specifies the top index of the current viewport.
 * @param {number} viewport.leftIndex - Specifies the left index of the current viewport.
 * @param {number} viewport.bottomIndex - Specifies the bottom index of the current viewport.
 * @param {number} viewport.rightIndex - Specifies the right index of the current viewport.
 * @returns {number} - Returns the viewport indexes.
 * @hidden
 */
function getViewportIndexes(parent, viewport) {
    var sheet = parent.getActiveSheet();
    var indexes = [[viewport.topIndex + parent.frozenRowCount(sheet), viewport.leftIndex + parent.frozenColCount(sheet),
            viewport.bottomIndex, viewport.rightIndex]];
    if (sheet.frozenRows || sheet.frozenColumns) {
        var froezenRow = parent.frozenRowCount(sheet);
        var froezenCol = parent.frozenColCount(sheet);
        var topLeftCell = getCellIndexes(sheet.topLeftCell);
        if (froezenRow && froezenCol) {
            indexes.push([topLeftCell[0], topLeftCell[1], froezenRow - 1, froezenCol - 1]);
            var paneTopLeftCell = getCellIndexes(sheet.paneTopLeftCell);
            indexes.push([paneTopLeftCell[0], topLeftCell[1], viewport.bottomIndex, froezenCol - 1]);
        }
        if (froezenRow) {
            indexes.push([topLeftCell[0], viewport.leftIndex + froezenCol, froezenRow - 1, viewport.rightIndex]);
        }
        if (froezenCol) {
            indexes.push([viewport.topIndex + froezenRow, topLeftCell[1], viewport.bottomIndex,
                froezenCol - 1]);
        }
    }
    return indexes;
}
/**
 * If the primary cell in the merged range row/column is hidden, then this method will update
 * the next visible row/column index within the merged range.
 *
 * @param {VisibleMergeIndexArgs} args - Specifies the args.
 * @returns {void} - Update the next visible row/column index within the merged range.
 */
function setVisibleMergeIndex(args) {
    if (isHiddenRow(args.sheet, args.rowIdx)) {
        var idx = skipHiddenIdx(args.sheet, args.rowIdx, true);
        if (idx < args.rowIdx + args.cell.rowSpan) {
            args.rowIdx = idx;
            args.isMergedHiddenCell = true;
        }
    }
    if (isHiddenCol(args.sheet, args.colIdx)) {
        var idx = skipHiddenIdx(args.sheet, args.colIdx, true, 'columns');
        if (idx < args.colIdx + args.cell.colSpan) {
            args.colIdx = idx;
            args.isMergedHiddenCell = true;
        }
    }
}
/**
 * Check whether the sheets are imported.
 *
 * @param {Workbook} context - Specifies the spreadsheet instance.
 * @returns {boolean} - It returns true if the sheets are imported otherwise false.
 * @hidden
 */
function isImported(context) {
    return context.workbookOpenModule && context.workbookOpenModule.preventFormatCheck;
}
/**
 * Return a function that will auto-detect the number format of the formatted cell value.
 *
 * @param {Workbook} context - Specifies the Workbook instance.
 * @returns {void} - Defines the common variables and returns the auto-detect number format function.
 * @hidden
 */
function getAutoDetectFormatParser(context) {
    var intl = new Internationalization();
    var eventArgs = { intl: intl, updateValue: true, value: '',
        curSymbol: getNumberDependable(context.locale, defaultCurrencyCode) };
    var options = { args: eventArgs, intl: intl };
    var localeNumObj = getNumericObject(context.locale);
    return function (cell) {
        if (!cell.format && cell.value && !isNumber(cell.value)) {
            eventArgs.cell = cell;
            eventArgs.value = cell.value;
            context.notify(checkDateFormat, eventArgs);
            if (!cell.format) {
                var cellVal = cell.value.toString();
                if (cellVal.includes(options.args.curSymbol) || cellVal.includes(localeNumObj.group) || cellVal.includes('%')) {
                    options.fResult = cellVal;
                    context.notify(checkNumberFormat, options);
                }
                else if (localeNumObj.decimal !== '.' && !isNumber(cellVal)) {
                    if (cellVal.includes(localeNumObj.decimal)) {
                        cellVal = cellVal.replace(localeNumObj.decimal, '.');
                        if (isNumber(cellVal)) {
                            cell.value = cellVal;
                        }
                    }
                }
            }
        }
    };
}
/**
 *
 * @param {DataManager} dataManager - Specifies the Datamanager.
 * @param {Predicate[]} predicates - Specifies the predicates.
 * @param {Predicate[]} equalOrPredicates - Specifies the equal or predicates.
 * @returns {Object[]} - Returns apply predicates object.
 * @hidden
 */
function applyPredicates(dataManager, predicates, equalOrPredicates) {
    var query = new Query();
    if (predicates.length) {
        query.where(Predicate.and(predicates));
    }
    var result = dataManager.executeLocal(query);
    if (equalOrPredicates) {
        for (var idx = 0, predicateCollLen = equalOrPredicates.length; idx < predicateCollLen; idx++) {
            if (!result.length) {
                break;
            }
            query = new Query();
            if (equalOrPredicates[idx].length) {
                query.where(Predicate.or(equalOrPredicates[idx]));
            }
            result = new DataManager(result).executeLocal(query);
        }
    }
    return result;
}
/**
 * Checks whether the cell is read-only or not.
 *
 * @param {CellModel} cell - The cell to check.
 * @param {ColumnModel} column - The column associated with the cell.
 * @param {RowModel} row - The row associated with the cell.
 * @returns {boolean} - Returns true if the cell is read-only, otherwise false.
 * @hidden
 */
function isReadOnly(cell, column, row) {
    return (cell && cell.isReadOnly) || (row && row.isReadOnly) || (column && column.isReadOnly);
}
/**
 * Checks whether a specific range of cells is read-only or not.
 *
 * @param {Workbook} parent - The spreadsheet instance.
 * @param {number[]} rangeIndexes - The range indexes to check.
 * @returns {boolean} - Returns true if any of the cells is read-only, otherwise false.
 * @hidden
 */
function isReadOnlyCells(parent, rangeIndexes) {
    var sheet = parent.getActiveSheet();
    var hasReadOnlyCell;
    var address = !isNullOrUndefined(rangeIndexes) ? rangeIndexes : getSwapRange(getRangeIndexes(sheet.selectedRange));
    for (var row = address[0]; row <= address[2]; row++) {
        for (var col = address[1]; col <= address[3]; col++) {
            var cell = getCell(row, col, sheet);
            if (isReadOnly(cell, getColumn(sheet, col), getRow(sheet, row))) {
                hasReadOnlyCell = true;
                break;
            }
        }
    }
    return hasReadOnlyCell;
}
/**
 * Checks whether the selected range in the sheet is an entire row or column and returns the updated range accordingly.
 *
 * @param {SheetModel} sheet -Specifies the sheet.
 * @param {string} range - Specify the range that need to be updated.
 * @returns {string} - Retruns updated range
 * @hidden
 */
function getUpdatedRange(sheet, range) {
    var updateRange = range || sheet.selectedRange;
    var indexes = getRangeIndexes(updateRange);
    var maxColCount = sheet.colCount;
    var maxRowCount = sheet.rowCount;
    if (indexes[2] === maxRowCount - 1 && indexes[0] === 0) {
        updateRange = updateRange.replace(/[0-9]/g, '');
    }
    else if (indexes[3] === maxColCount - 1 && indexes[2] === 0) {
        updateRange = updateRange.replace(/\D/g, '');
    }
    return updateRange;
}
/**
 * Updated the top border of the adjacent merged cells
 *
 * @param {Workbook} context - The spreadsheet instance.
 * @param {number[]} rowIndexes - An array of row indexes that top border need to be updated.
 * @param {number[]} colIndexes - An array of col indexes that top border need to be updated.
 * @returns {void}
 * @hidden
 */
function updateMergeBorder(context, rowIndexes, colIndexes) {
    if (!rowIndexes.length) {
        return;
    }
    var sheet = context.getActiveSheet();
    var style;
    var parent = context;
    var frozenCol = context.frozenColCount(sheet);
    var startCol = (colIndexes && colIndexes[0]) ||
        (frozenCol ? getCellIndexes(sheet.topLeftCell)[1] : parent.viewport.leftIndex);
    var endCol = (colIndexes && colIndexes[1]) || parent.viewport.rightIndex;
    rowIndexes.forEach(function (rowIdx) {
        for (var col = startCol; col <= endCol; col++) {
            if (col === frozenCol) {
                col += parent.viewport.leftIndex;
            }
            var prevModel = getCell(rowIdx - 1, col, sheet, false, true);
            if (((!prevModel.rowSpan || prevModel.rowSpan === 1)
                || (!prevModel.colSpan || prevModel.colSpan === 1)) &&
                (!prevModel.style || !prevModel.style.borderBottom || prevModel.style.borderBottom === 'none')) {
                style = getCell(rowIdx, col, sheet, false, true).style;
                if (style && style.borderTop) {
                    var prevCell = context.getCell(rowIdx - 1, col);
                    if (prevCell && prevCell.style.borderBottom) {
                        var curCell = context.getCell(rowIdx, col);
                        if (curCell) {
                            prevCell.style.borderBottom = '';
                            curCell.style.borderTop = style.borderTop;
                        }
                    }
                }
            }
        }
    });
}

/**
 * @hidden
 * @param {number} val - Specifies the val.
 * @returns {string} - To get Fraction.
 */
function toFraction(val) {
    var strVal = val.toString();
    if (val === parseInt(strVal, 10)) {
        return parseInt(strVal, 10) + '  ';
    }
    else {
        var top_1 = strVal.indexOf('.') > -1 ? strVal.split('.')[1] : 0;
        var bottom = Math.pow(10, top_1.toString().replace('-', '').length);
        var abs = Math.abs(getGcd(top_1, bottom));
        return (top_1 / abs) + '/' + (bottom / abs);
    }
}
/**
 * @hidden
 * @param {string | number} a - Specifies the a.
 * @param {string | number} b - Specifies the b.
 * @returns {number} - To get Gcd.
 */
function getGcd(a, b) {
    a = Number(a);
    b = Number(b);
    return (b) ? getGcd(b, a % b) : a;
}
/**
 * @hidden
 * @param {number} val - Specifies the value.
 * @returns {Date} - Returns Date.
 */
function intToDate(val) {
    val = Number(val);
    val = (val > 0 && val < 1) ? (1 + val) : (val === 0) ? 1 : val;
    if (val > 60) {
        val -= 1; // Due to leap year issue of 1900 in MSExcel.
    }
    var startDate = new Date('01/01/1900');
    var startDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds());
    return new Date(new Date(((val - 1) * (1000 * 3600 * 24)) + startDateUTC).toUTCString().replace(' GMT', ''));
}
/* eslint-disable  @typescript-eslint/no-explicit-any */
/**
 * @hidden
 * @param {number} val - Specifies the value.
 * @param {boolean} isTime - Specifies the boolean value.
 * @param {boolean} isTimeOnly - Specifies the value is only a time without date.
 * @returns {number} - Returns number.
 */
function dateToInt(val, isTime, isTimeOnly) {
    var startDate = new Date('01/01/1900');
    var date = isDateTime(val) ? val : new Date(val);
    var startDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds());
    var dateUTC = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
    var diffDays = ((dateUTC - startDateUTC) / (1000 * 3600 * 24));
    return (isTime ? diffDays : parseInt(diffDays.toString(), 10)) + (isTimeOnly ? 0 : (diffDays > 60 ? 2 : 1));
}
/**
 * @hidden
 * @param {any} date - Specifies the date.
 * @returns {boolean} - Returns boolean value.
 */
function isDateTime(date) {
    return Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.valueOf());
}
/**
 * @hidden
 * @param {string} val - Specifies the value.
 * @returns {boolean} - Returns boolean value.
 */
function isNumber(val) {
    return val - parseFloat(val) >= 0;
}
/**
 * @hidden
 * @param {string | number} val - Specifies the value.
 * @returns {string} - Returns converted value.
 */
function evaluate(val) {
    return Function('"use strict";return (' + val + ')')();
}
/**
 * @hidden
 * @param {Date | string | number} text - Specifies the text.
 * @param {Internationalization} intl - Specifies the Internationalization.
 * @param {string} locale - Specifies the locale.
 * @param {string} format - Specifies the string.
 * @param {CellModel} cell - Specify the cell.
 * @param {boolean} isDateTime -Specify is DateTime value or not.
 * @returns {ToDateArgs} - Returns Date format.
 */
function toDate(text, intl, locale, format, cell, isDateTime) {
    var defaultDateFormats = IntlBase.getDependables(cldrData, locale, null).dateObject;
    var availabelDateTimeFormat = defaultDateFormats.dateTimeFormats.availableFormats;
    var dObj = { dateObj: null, isCustom: false, type: '' };
    var dateVal;
    var updateTime = function () {
        if (dObj.type === 'time') {
            dObj.dateObj = new Date((dateVal ? dateVal.toDateString() : '01/01/1900') + ' ' + dObj.dateObj.toLocaleTimeString());
        }
    };
    if (format) {
        dObj.dateObj = intl.parseDate(text, { format: format });
        if (dObj.dateObj) {
            dObj.type = text.toString().indexOf(':') > -1 ? 'time' : 'datetime';
            updateTime();
            dObj.isCustom = true;
        }
    }
    if (isNullOrUndefined(dObj.dateObj)) {
        text = text.toString();
        if (text && text.indexOf('/') > -1 || text.indexOf('-') > 0) {
            var cFormat = (cell && cell.format) || format;
            if (cFormat) {
                var hyphenDate = cFormat.toLowerCase().includes('dd-mm-yy');
                if (hyphenDate || cFormat.toLowerCase().includes('dd/mm/yy')) {
                    cFormat = hyphenDate ? 'd-M-y' : 'd/M/y';
                    dObj.dateObj = intl.parseDate(text, { format: cFormat, skeleton: 'yMd' });
                    if (dObj.dateObj) {
                        dObj.type = 'date';
                        return dObj;
                    }
                }
            }
        }
        var parseDateTimeValue = function (text) {
            if (text.indexOf(':') < 0) {
                for (var _i = 0, _a = Object.keys(defaultDateFormats.dateFormats); _i < _a.length; _i++) {
                    var key = _a[_i];
                    dObj.dateObj = intl.parseDate(text, { format: defaultDateFormats.dateFormats["" + key], skeleton: key });
                    if (dObj.dateObj) {
                        dObj.type = 'date';
                        dObj.isCustom = false;
                        break;
                    }
                }
            }
            if (isNullOrUndefined(dObj.dateObj)) {
                var dateTimeFormat = void 0;
                for (var _b = 0, _c = Object.keys(availabelDateTimeFormat); _b < _c.length; _b++) {
                    var key = _c[_b];
                    dateTimeFormat = availabelDateTimeFormat["" + key];
                    dObj.dateObj = intl.parseDate(text, { format: dateTimeFormat, skeleton: key });
                    if (!dObj.dateObj && text.indexOf(':') > -1 && dateTimeFormat.indexOf(':') > -1) { // parsing time format without am or pm
                        dObj.dateObj = intl.parseDate(text, { format: dateTimeFormat.split(' ')[0] });
                    }
                    if (dObj.dateObj) {
                        dObj.type = text.toString().indexOf(':') > -1 ? 'time' : 'datetime';
                        updateTime();
                        dObj.isCustom = true;
                        break;
                    }
                }
            }
            if (isNullOrUndefined(dObj.dateObj)) {
                for (var _d = 0, _e = Object.keys(defaultDateFormats.timeFormats); _d < _e.length; _d++) {
                    var key = _e[_d];
                    dObj.dateObj = intl.parseDate(text, { format: defaultDateFormats.timeFormats["" + key], skeleton: key });
                    if (dObj.dateObj) {
                        dObj.type = 'time';
                        updateTime();
                        dObj.isCustom = false;
                        break;
                    }
                }
            }
        };
        if (isDateTime) {
            var dateTimeArr = text.split(' ');
            if (dateTimeArr.length >= 2) {
                parseDateTimeValue(dateTimeArr.shift());
                if (dObj.dateObj) {
                    dateVal = dObj.dateObj;
                    dObj.dateObj = null;
                    parseDateTimeValue(dateTimeArr.join(' '));
                    if (dObj.dateObj) {
                        dObj.type = 'datetime';
                    }
                }
            }
        }
        else {
            parseDateTimeValue(text);
        }
    }
    if (text !== '#DIV/0!' && !dObj.dateObj && new Date(text).toString() !== 'Invalid Date') {
        dObj.dateObj = new Date(text);
        dObj.type = 'date';
    }
    return dObj;
}
/**
 * @hidden
 * @param {string} value - Specifies the value.
 * @param {boolean} isPaste - Optional flag indicating whether the value came from a paste action.
 * @param {boolean} isFromExternalPaste - Optional flag indicating whether the value came from a getExternalCells method.
 * @returns { string | number} - ReturnsparseIntValue.
 */
function parseIntValue(value, isPaste, isFromExternalPaste) {
    if (value && value !== '.' && value !== '-') {
        var val = value.toString();
        var maxSafeIntegerLength = Number.MAX_SAFE_INTEGER.toString().length;
        if (val.startsWith('-')) {
            val = val.slice(1);
            val = val.includes('-') ? value : val;
        }
        if (/^\d*\.?\d*$/.test(val)) {
            // If the number is longer than the safe integer length.
            if (isPaste && (val.length > maxSafeIntegerLength || (isFromExternalPaste && (val.startsWith('0') || val.endsWith('0'))))) {
                return value; //skip parsefloat to get the precise value while pasting.
            }
            else {
                return parseFloat(value);
            }
        }
    }
    return value;
}

/** @hidden */
var workbookLocale = 'spreadsheetLocale';
/**
 * Workbook locale text
 *
 * @hidden
 */
var localeData = {
    SortOutOfRangeError: 'Select a cell or range inside the used range and try again.'
};

/**
 * Update data source to Sheet and returns Sheet
 *
 * @param {Workbook} context - Specifies the context.
 * @param {string} address - Specifies the address.
 * @param {boolean} columnWiseData - Specifies the bool value.
 * @param {boolean} valueOnly - Specifies the valueOnly.
 * @param {number[]} frozenIndexes - Specifies the freeze row and column start indexes, if it is scrolled.
 * @param {boolean} filterDialog - Specifies the bool value.
 * @param {string} formulaCellRef - Specifies the formulaCellRef.
 * @param {number} idx - Specifies the idx.
 * @param {boolean} skipHiddenRows - Specifies the skipHiddenRows.
 * @param {string} commonAddr - Specifies the common address for the address parameter specified with list of range separated by ','.
 * @param {number} dateValueForSpecificColIdx - Specify the dateValueForSpecificColIdx.
 * @param {Object} dateColData - Specify the dateColData.
 * @returns {Promise<Map<string, CellModel> | Object[]>} - To get the data
 * @hidden
 */
function getData(context, address, columnWiseData, valueOnly, frozenIndexes, filterDialog, formulaCellRef, idx, skipHiddenRows, commonAddr, dateValueForSpecificColIdx, dateColData) {
    if (skipHiddenRows === void 0) { skipHiddenRows = true; }
    return new Promise(function (resolve) {
        resolve((function () {
            var sheetIdx;
            var lastIndex = address.lastIndexOf('!');
            if (lastIndex > -1) {
                sheetIdx = getSheetIndex(context, address.substring(0, lastIndex));
                address = address.substring(lastIndex + 1);
            }
            else {
                sheetIdx = context.activeSheetIndex;
            }
            var sheet = getSheet(context, sheetIdx);
            var indexes = getIndexesFromAddress(commonAddr || address);
            var args = {
                sheet: sheet, indexes: indexes, formulaCellRef: formulaCellRef, sheetIndex: idx,
                promise: new Promise(function (resolve) { resolve((function () { })()); })
            };
            context.notify(updateSheetFromDataSource, args);
            return args.promise.then(function () {
                var i;
                var row;
                var data;
                var sRow = indexes[0];
                var frozenRow = context.frozenRowCount(sheet);
                var frozenCol = context.frozenColCount(sheet);
                var isDateCol = !!dateColData;
                if (columnWiseData) {
                    data = [];
                    var index_1;
                    var cells_1;
                    var parsedNumVal_1;
                    var key_1;
                    var cellProp_1;
                    var localeObj_1;
                    var intl_1;
                    var autoDetectFormatFn_1;
                    if (valueOnly) {
                        localeObj_1 = getNumericObject(context.locale);
                        intl_1 = new Internationalization(context.locale);
                    }
                    else {
                        autoDetectFormatFn_1 = getAutoDetectFormatParser(context);
                    }
                    address.split(',').forEach(function (addr, addrIdx) {
                        indexes = getRangeIndexes(addr);
                        index_1 = 0;
                        sRow = indexes[0];
                        while (sRow <= indexes[2]) {
                            cells_1 = data[index_1] || {};
                            row = getRow(sheet, sRow);
                            i = indexes[1];
                            while (i <= indexes[3]) {
                                if (skipHiddenRows && isHiddenRow(sheet, sRow) && !(filterDialog && isFilterHidden(sheet, sRow))) {
                                    sRow++;
                                    continue;
                                }
                                key_1 = getColumnHeaderText(i + 1);
                                var cell = row ? getCell(sRow, i, sheet) : null;
                                if (valueOnly) {
                                    if (cell && (cell.value || cell.value === 0)) {
                                        if (cell.formattedText && cell.format && !cell.format.includes('*')) {
                                            if (isCustomDateTime(cell.format, false)) {
                                                cells_1[key_1] = intToDate(cell.value);
                                            }
                                            else {
                                                cells_1[key_1] = cell.formattedText.toString().trim();
                                            }
                                        }
                                        else {
                                            cells_1[key_1] = getValueFromFormat(context, cell, sRow, i, false, intl_1);
                                        }
                                        cellProp_1 = cell.value;
                                        if (typeof cellProp_1 === 'string') {
                                            if (localeObj_1.decimal !== '.' && cellProp_1.includes(localeObj_1.decimal)) {
                                                parsedNumVal_1 = cellProp_1.replace(localeObj_1.decimal, '.');
                                                if (isNumber(parsedNumVal_1)) {
                                                    cellProp_1 = parseFloat(parsedNumVal_1);
                                                }
                                            }
                                            else if (isNumber(cellProp_1)) {
                                                cellProp_1 = parseFloat(cellProp_1);
                                            }
                                        }
                                    }
                                    else {
                                        cells_1[key_1] = '';
                                        cellProp_1 = null;
                                    }
                                    cells_1[key_1 + "_value"] = cellProp_1;
                                }
                                else {
                                    if ((cell && (cell.formula || !isNullOrUndefined(cell.value))) || Object.keys(cells_1).length) {
                                        if (i === dateValueForSpecificColIdx) {
                                            cellProp_1 = { value: getValueFromFormat(context, cell, sRow, i, true) };
                                            if (cellProp_1.value && typeof cellProp_1.value === 'string') {
                                                if (isNumber(cellProp_1.value) && !cell.value.toString().includes('\n')) {
                                                    if (!cell.format || cell.format !== '@') {
                                                        cellProp_1.value = parseFloat(cellProp_1.value);
                                                    }
                                                }
                                                else if (!cell.format) {
                                                    autoDetectFormatFn_1(cell);
                                                    if (isNumber(cell.value) && !cell.value.toString().includes('\n')) {
                                                        cellProp_1.value = parseFloat(cell.value);
                                                    }
                                                }
                                            }
                                            cells_1[key_1] = extend({}, cell, cellProp_1);
                                        }
                                        else {
                                            cells_1[key_1] = cell;
                                        }
                                    }
                                    if (cell && ((!!cell.rowSpan && cell.rowSpan !== 1) || (!!cell.colSpan && cell.colSpan !== 1))) {
                                        data = [{ throwMergeAlert: true }];
                                        return;
                                    }
                                }
                                if (i === indexes[3] && Object.keys(cells_1).length) {
                                    cells_1['__rowIndex'] = (sRow + 1).toString();
                                    data[index_1] = cells_1;
                                    if (isDateCol && addrIdx === 0 && !isFilterHidden(sheet, sRow)) {
                                        dateColData.push(cells_1);
                                    }
                                    index_1++;
                                }
                                i++;
                            }
                            sRow++;
                        }
                    });
                }
                else {
                    data = new Map();
                    var checkFrozenIdx = !!(!valueOnly && frozenIndexes && frozenIndexes.length);
                    while (sRow <= indexes[2]) {
                        if (checkFrozenIdx && sRow >= frozenRow && sRow < frozenIndexes[0]) {
                            sRow = frozenIndexes[0];
                            continue;
                        }
                        if (!valueOnly && isHiddenRow(sheet, sRow)) {
                            sRow++;
                            continue;
                        }
                        row = getRow(sheet, sRow);
                        i = indexes[1];
                        while (i <= indexes[3]) {
                            var eventArgs = { cell: getCell(sRow, i, sheet), address: getCellAddress(sRow, i),
                                rowIndex: sRow, colIndex: i };
                            context.trigger(queryCellInfo, eventArgs);
                            var cellObj = getCell(sRow, i, sheet, false, true);
                            if (cellObj.formula && cellObj.formula.toUpperCase().includes('UNIQUE')) {
                                context.notify(calculateFormula, { cell: cellObj, rowIdx: sRow, colIdx: i, sheetIndex: context.activeSheetIndex,
                                    address: eventArgs.address });
                            }
                            if (cellObj.colSpan > 1 && cellObj.rowSpan > 1) {
                                var cell = void 0;
                                for (var j = sRow, len = sRow + cellObj.rowSpan; j < len; j++) {
                                    for (var k = i, len_1 = i + cellObj.colSpan; k < len_1; k++) {
                                        if (j === sRow && k === i) {
                                            continue;
                                        }
                                        cell = new Object();
                                        if (j !== sRow) {
                                            cell.rowSpan = sRow - j;
                                        }
                                        if (k !== i) {
                                            cell.colSpan = i - k;
                                        }
                                        if (sheet.rows[j] && sheet.rows[j].cells &&
                                            sheet.rows[j].cells[k]) {
                                            delete sheet.rows[j].cells[k].value;
                                            delete sheet.rows[j].cells[k].formula;
                                        }
                                        setCell(j, k, sheet, cell, true);
                                    }
                                }
                            }
                            else if (cellObj.colSpan > 1) {
                                for (var j = i + 1, len = i + cellObj.colSpan; j < len; j++) {
                                    setCell(sRow, j, sheet, { colSpan: i - j }, true);
                                    if (sheet.rows[sRow] && sheet.rows[sRow].cells &&
                                        sheet.rows[sRow].cells[j]) {
                                        delete sheet.rows[sRow].cells[j].value;
                                        delete sheet.rows[sRow].cells[j].formula;
                                    }
                                }
                            }
                            else if (cellObj.rowSpan > 1) {
                                for (var j = sRow + 1, len = sRow + cellObj.rowSpan; j < len; j++) {
                                    setCell(j, i, sheet, { rowSpan: sRow - j }, true);
                                    if (sheet.rows[j] && sheet.rows[j].cells &&
                                        sheet.rows[j].cells[i]) {
                                        delete sheet.rows[j].cells[i].value;
                                        delete sheet.rows[j].cells[i].formula;
                                    }
                                }
                            }
                            if (!valueOnly && isHiddenCol(sheet, i)) {
                                i++;
                                continue;
                            }
                            if (checkFrozenIdx && i >= frozenCol && i < frozenIndexes[1]) {
                                i = frozenIndexes[1];
                                continue;
                            }
                            if (cellObj.style) {
                                var style = {};
                                Object.assign(style, cellObj.style);
                                cellObj.style = style;
                            }
                            data.set(eventArgs.address, cellObj);
                            i++;
                        }
                        sRow++;
                    }
                }
                return data;
            });
        })());
    });
}
/**
 * Used to get the formatted value of the cell.
 *
 * @param {Workbook} context - Specifies the context.
 * @param {CellModel} cell - Specifies the cell model.
 * @param {number} rowIdx - Specifies the row index.
 * @param {number} colIdx - Specifies the column index.
 * @param {boolean} getIntValueFromDate - Specify the getIntValueFromDate.
 * @param {Internationalization} intl - Specifies the internationalization object.
 * @returns {string | Date | number} - Returns the formatted cell value.
 * @hidden
 */
function getValueFromFormat(context, cell, rowIdx, colIdx, getIntValueFromDate, intl) {
    if (cell) {
        if (isNullOrUndefined(cell.value)) {
            return '';
        }
        if (cell.format) {
            var args = { value: cell.value, formattedText: cell.value, cell: cell, format: cell.format,
                checkDate: !getIntValueFromDate, rowIndex: rowIdx, colIndex: colIdx, dataUpdate: true };
            context.notify(getFormattedCellObject, args);
            return args.dateObj && args.dateObj.toString() !== 'Invalid Date' ? args.dateObj : (getIntValueFromDate ? args.value :
                args.formattedText.toString().trim());
        }
        else if (getIntValueFromDate) {
            return cell.value;
        }
        else {
            var cellVal = cell.value;
            if (isNumber(cellVal)) {
                cellVal = Number(cell.value).toString();
                if (cellVal.includes('.') || cellVal.length > 11) {
                    var options = { args: { value: cellVal, updateValue: true }, fResult: cellVal,
                        cellVal: cellVal, intl: intl };
                    context.notify(parseDecimalNumber, options);
                    cellVal = options.fResult;
                }
            }
            return cellVal;
        }
    }
    else {
        return '';
    }
}
/**
 * @hidden
 * @param {SheetModel | RowModel | CellModel} model - Specifies the sheet model.
 * @param {number} idx - Specifies the index value.
 * @returns {SheetModel | RowModel | CellModel} - To process the index
 */
function getModel(model, idx) {
    var diff;
    var j;
    var prevIdx;
    if (isUndefined$1(model[idx]) || !(model[idx] && model[idx].index === idx)) {
        for (var i = 0; i <= idx; i++) {
            if (model && model[i]) {
                diff = model[i].index - i;
                if (diff > 0) {
                    model.forEach(function (value, index) {
                        if (value && value.index) {
                            prevIdx = value.index;
                            j = 1;
                        }
                        if (value && !value.index && index !== 0) {
                            value.index = prevIdx + j;
                        }
                        j++;
                    });
                    while (diff--) {
                        model.splice(i, 0, null);
                    }
                    i += diff;
                }
            }
            else if (model) {
                model[i] = null;
            }
            else {
                model = [];
            }
        }
    }
    return model[idx];
}
/**
 * @hidden
 * @param {SheetModel | RowModel | CellModel} model - Specifies the sheet model.
 * @param {boolean} isSheet - Specifies the bool value.
 * @param {Workbook} context - Specifies the Workbook.
 * @param {boolean} isSort - Specifies whether to sort the unordered cell/row model in ascending order.
 * @returns {void} - To process the index
 */
function processIdx(model, isSheet, context, isSort) {
    var j;
    var diff = 0;
    var cnt;
    var len = model.length;
    if (isSort && model.length > 0) {
        // Sort the model based on the index value in ascending order
        model.sort(function (a, b) {
            if (!isNullOrUndefined(a) && !isUndefined$1(a.index) && !isNullOrUndefined(b) && !isUndefined$1(b.index)) {
                return a.index - b.index; // Ascending order
            }
            return 0;
        });
    }
    var _loop_1 = function (i) {
        if (!isNullOrUndefined(model[i]) && !isUndefined$1(model[i].index)) {
            cnt = diff = model[i].index - i;
            delete model[i].index;
        }
        if (diff > 0) {
            j = 0;
            while (diff--) {
                if (isSheet) {
                    context.createSheet(i + j);
                    j++;
                }
                else {
                    model.splice(i, 0, null);
                }
            }
            i += cnt;
            len += cnt;
        }
        if (isSheet) {
            if (model[i].id < 1) {
                model[i].id = getMaxSheetId(context.sheets);
                if (model[i].properties) {
                    model[i].properties.id = model[i].id;
                }
            }
            if (!model[i].name) {
                context.setSheetPropertyOnMute(model[i], 'name', 'Sheet' + getSheetNameCount(context));
            }
            var cellCnt_1 = 0;
            model[i].rows.forEach(function (row) {
                cellCnt_1 = Math.max(cellCnt_1, (row && row.cells && row.cells.length - 1) || 0);
            });
            context.setSheetPropertyOnMute(model[i], 'usedRange', { rowIndex: model[i].rows.length ? model[i].rows.length - 1 : 0,
                colIndex: cellCnt_1 });
        }
        out_i_1 = i;
    };
    var out_i_1;
    for (var i = 0; i < len; i++) {
        _loop_1(i);
        i = out_i_1;
    }
}

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Configures the range processing for the spreadsheet.
 *  ```html
 * <div id='Spreadsheet'></div>
 * ```
 * ```typescript
 * let spreadsheet: Spreadsheet = new Spreadsheet({
 *      sheets: [{
 *                  name: 'First Sheet',
 *                  ranges: [{ dataSource: defaultData }],
 *                  rows: [{
 *                          index: 30,
 *                          cells: [{ index: 4, value: 'Total Amount:' },
 *                                  { formula: '=SUM(F2:F30)', style: { fontWeight: 'bold' } }]
 *                  }]
 * ...
 * });
 * spreadsheet.appendTo('#Spreadsheet');
 * ```
 */
var Range = /** @class */ (function (_super) {
    __extends$1(Range, _super);
    function Range() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Range.prototype.setProperties = function (prop, muteOnChange) {
        var _this = this;
        if (this['parentObj'].isComplexArraySetter && this['controlParent'] && this['controlParent'].isAngular) {
            if (Object.keys(prop).length) {
                if (this['parentObj']['currRangeIdx'] === undefined) {
                    this['parentObj']['currRangeIdx'] = 0;
                }
                else {
                    this['parentObj']['currRangeIdx'] += 1;
                }
                var range = this['parentObj'].ranges[this['parentObj']['currRangeIdx']];
                if (range && range.info) {
                    this.info = range.info;
                }
                setTimeout(function () {
                    if (_this['parentObj']['currRangeIdx'] !== undefined) {
                        delete _this['parentObj']['currRangeIdx'];
                    }
                });
            }
            else if (this['controlParent'].tagObjects[0].instance && this['controlParent'].tagObjects[0].instance.hasChanges
                && !this['controlParent'].tagObjects[0].instance.isInitChanges) {
                var sheetIdx = this['controlParent'].sheets.indexOf(this['parentObj']);
                if (this['parentObj'].changedRangeIdx === undefined) {
                    var rangeIdx_1;
                    var tagObjects = this['controlParent'].tagObjects[0].instance.list[sheetIdx].tagObjects;
                    for (var i = 0; i < tagObjects.length; i++) {
                        if (tagObjects[i]['name'] === 'ranges') {
                            tagObjects[i]['instance'].list
                                .forEach(function (range, idx) {
                                if (range.hasChanges) {
                                    rangeIdx_1 = idx;
                                }
                            });
                            break;
                        }
                    }
                    this['parentObj'].changedRangeIdx = rangeIdx_1;
                }
            }
        }
        _super.prototype.setProperties.call(this, prop, muteOnChange);
    };
    __decorate$1([
        Property(null)
    ], Range.prototype, "dataSource", void 0);
    __decorate$1([
        Property('A1')
    ], Range.prototype, "startCell", void 0);
    __decorate$1([
        Property(null)
    ], Range.prototype, "query", void 0);
    __decorate$1([
        Property(null)
    ], Range.prototype, "fieldsOrder", void 0);
    __decorate$1([
        Property(true)
    ], Range.prototype, "showFieldAsHeader", void 0);
    __decorate$1([
        Property('')
    ], Range.prototype, "template", void 0);
    __decorate$1([
        Property('A1')
    ], Range.prototype, "address", void 0);
    return Range;
}(ChildProperty));
/**
 * Used range which contains end row index and end column index of the last used cell in sheet .
 */
var UsedRange = /** @class */ (function (_super) {
    __extends$1(UsedRange, _super);
    function UsedRange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$1([
        Property(0)
    ], UsedRange.prototype, "rowIndex", void 0);
    __decorate$1([
        Property(0)
    ], UsedRange.prototype, "colIndex", void 0);
    return UsedRange;
}(ChildProperty));
/**
 * Configures the sheet behavior for the spreadsheet.
 */
var Sheet = /** @class */ (function (_super) {
    __extends$1(Sheet, _super);
    function Sheet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$1([
        Property(null)
    ], Sheet.prototype, "rows", void 0);
    __decorate$1([
        Property(null)
    ], Sheet.prototype, "columns", void 0);
    __decorate$1([
        Complex({}, ProtectSettings)
    ], Sheet.prototype, "protectSettings", void 0);
    __decorate$1([
        Collection([], Range)
    ], Sheet.prototype, "ranges", void 0);
    __decorate$1([
        Collection([], ConditionalFormat)
    ], Sheet.prototype, "conditionalFormats", void 0);
    __decorate$1([
        Property(0)
    ], Sheet.prototype, "index", void 0);
    __decorate$1([
        Property('')
    ], Sheet.prototype, "name", void 0);
    __decorate$1([
        Property(100)
    ], Sheet.prototype, "rowCount", void 0);
    __decorate$1([
        Property(100)
    ], Sheet.prototype, "colCount", void 0);
    __decorate$1([
        Property('A1:A1')
    ], Sheet.prototype, "selectedRange", void 0);
    __decorate$1([
        Property('A1')
    ], Sheet.prototype, "activeCell", void 0);
    __decorate$1([
        Complex({}, UsedRange)
    ], Sheet.prototype, "usedRange", void 0);
    __decorate$1([
        Property('A1')
    ], Sheet.prototype, "topLeftCell", void 0);
    __decorate$1([
        Property(true)
    ], Sheet.prototype, "showHeaders", void 0);
    __decorate$1([
        Property(true)
    ], Sheet.prototype, "showGridLines", void 0);
    __decorate$1([
        Property(false)
    ], Sheet.prototype, "isProtected", void 0);
    __decorate$1([
        Property('Visible')
    ], Sheet.prototype, "state", void 0);
    __decorate$1([
        Property(0)
    ], Sheet.prototype, "frozenRows", void 0);
    __decorate$1([
        Property(0)
    ], Sheet.prototype, "frozenColumns", void 0);
    __decorate$1([
        Property('A1')
    ], Sheet.prototype, "paneTopLeftCell", void 0);
    __decorate$1([
        Property('')
    ], Sheet.prototype, "password", void 0);
    __decorate$1([
        Property(null)
    ], Sheet.prototype, "standardHeight", void 0);
    __decorate$1([
        Property(false)
    ], Sheet.prototype, "isSheetCalculated", void 0);
    return Sheet;
}(ChildProperty));
/**
 * To get sheet index from address.
 *
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {string} name - Specifies the name.
 * @returns {number} - To gget sheet index from address.
 */
function getSheetIndex(context, name) {
    var idx;
    if (name.startsWith('\'') && name.endsWith('\'')) {
        name = name.replace(/''/g, '\'').replace(/^'|'$/g, '');
    }
    for (var i = 0; i < context.sheets.length; i++) {
        if (context.sheets[i].name.toLowerCase() === name.toLowerCase()) {
            idx = i;
            break;
        }
    }
    return idx;
}
/**
 * To get sheet index from sheet id.
 *
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {number} id - Specifies the id.
 * @returns {number} - To get the sheet index from id.
 */
function getSheetIndexFromId(context, id) {
    var idx;
    for (var i = 0; i < context.sheets.length; i++) {
        if (context.sheets[i].id === id) {
            idx = i;
            break;
        }
    }
    return idx;
}
/**
 * To get sheet name from address.
 *
 * @hidden
 * @param {string} address - Specifies the address.
 * @returns {address} - To get Sheet Name From Address.
 */
function getSheetNameFromAddress(address) {
    var sheetRefIndex = address.lastIndexOf('!');
    return sheetRefIndex > -1 ? address.substring(0, sheetRefIndex).replace(/'/gi, '') : address.replace(/'/gi, '');
}
/**
 * To get sheet index from sheet name.
 *
 * @hidden
 * @param {Object} context - Specifies the context.
 * @param {string} name - Specifies the name.
 * @param {SheetModel} info - Specifies the sheet info.
 * @returns {number} - To get the sheet index by name.
 */
function getSheetIndexByName(context, name, info) {
    var len = info.length;
    for (var i = 0; i < len; i++) {
        if (info[i].sheet.toUpperCase() === name.toUpperCase()) {
            return info[i].index;
        }
    }
    return -1;
}
/**
 * update selected range
 *
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {string} range - Specifies the range.
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {boolean} isMultiRange - Specifies the boolean value.
 * @returns {void} - Update the selected range.
 */
function updateSelectedRange(context, range, sheet, isMultiRange) {
    if (sheet === void 0) { sheet = {}; }
    context.setSheetPropertyOnMute(sheet, 'selectedRange', isMultiRange ? sheet.selectedRange + ' ' + range : range);
}
/**
 * get selected range
 *
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @returns {string} - Get selected range.
 */
function getSelectedRange(sheet) {
    return sheet && sheet.selectedRange || 'A1';
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @returns {string} - To get single selected range.
 */
function getSingleSelectedRange(sheet) {
    return sheet.selectedRange.split(' ')[0];
}
/**
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {number} idx - Specifies the idx.
 * @returns {SheetModel} - To get sheet.
 */
function getSheet(context, idx) {
    return context.sheets[idx];
}
/**
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @returns {number} - To get sheet name count.
 */
function getSheetNameCount(context) {
    var name = [];
    context.sheets.forEach(function (sheet) {
        name.push(sheet.name.toLowerCase());
    });
    for (var i = 0; i < name.length; i++) {
        if (name.indexOf('sheet' + context.sheetNameCount) > -1) {
            context.sheetNameCount++;
        }
        else {
            return context.sheetNameCount++;
        }
    }
    return context.sheetNameCount++;
}
/**
 * @hidden
 * @param {SheetModel[]} sheets - Specifies the sheets.
 * @returns {number} - To get sheet id.
 */
function getMaxSheetId(sheets) {
    var cnt = 0;
    sheets.forEach(function (sheet) {
        cnt = Math.max(sheet.id, cnt);
    });
    return cnt + 1;
}
/**
 * @hidden
 * @param {Workbook} context - Specifies the context.
 * @param {SheetModel[]} sheet - Specifies the sheet.
 * @param {boolean} isImport - Specifies is Import or not.
 * @returns {void} - To initiate sheet.
 */
function initSheet(context, sheet, isImport) {
    var sheets = sheet ? sheet : context.sheets;
    sheets.forEach(function (sheet) {
        sheet.id = sheet.id || 0;
        sheet.name = sheet.name || '';
        context.setSheetPropertyOnMute(sheet, 'rowCount', sheet.rowCount || 100);
        context.setSheetPropertyOnMute(sheet, 'colCount', sheet.colCount || 100);
        context.setSheetPropertyOnMute(sheet, 'topLeftCell', sheet.topLeftCell || 'A1');
        context.setSheetPropertyOnMute(sheet, 'activeCell', sheet.activeCell || 'A1');
        context.setSheetPropertyOnMute(sheet, 'selectedRange', sheet.selectedRange || sheet.activeCell + ':' + sheet.activeCell);
        context.setSheetPropertyOnMute(sheet, 'usedRange', sheet.usedRange || { rowIndex: 0, colIndex: 0 });
        context.setSheetPropertyOnMute(sheet, 'ranges', sheet.ranges ? sheet.ranges : []);
        context.setSheetPropertyOnMute(sheet, 'rows', (sheet.rows && extend([], sheet.rows, null, true)) || []);
        context.setSheetPropertyOnMute(sheet, 'columns', sheet.columns || []);
        context.setSheetPropertyOnMute(sheet, 'showHeaders', isUndefined$1(sheet.showHeaders) ? true : sheet.showHeaders);
        context.setSheetPropertyOnMute(sheet, 'showGridLines', isUndefined$1(sheet.showGridLines) ? true : sheet.showGridLines);
        context.setSheetPropertyOnMute(sheet, 'state', sheet.state || 'Visible');
        sheet.maxHgts = sheet.maxHgts || [];
        sheet.isImportProtected = sheet.isProtected && isImport;
        sheet.protectSettings = sheet.protectSettings || { selectCells: false, formatCells: false, formatRows: false, formatColumns: false,
            insertLink: false };
        sheet.isProtected = sheet.isProtected || false;
        if (!sheet.paneTopLeftCell || sheet.paneTopLeftCell === 'A1') {
            sheet.frozenRows = sheet.frozenRows ? sheet.frozenRows : 0;
            sheet.frozenColumns = sheet.frozenColumns ? sheet.frozenColumns : 0;
            var indexes = getCellIndexes(sheet.topLeftCell);
            context.setSheetPropertyOnMute(sheet, 'paneTopLeftCell', getCellAddress(sheet.frozenRows ? indexes[0] + sheet.frozenRows : indexes[0], sheet.frozenColumns ? indexes[1] + sheet.frozenColumns : indexes[1]));
        }
        processIdx(sheet.columns);
        initRow(sheet.rows, isImport);
    });
    processIdx(sheets, true, context);
}
// function initRangeSettings(ranges: RangeModel[]): RangeModel[] {
//     ranges.forEach((range: RangeModel) => {
//         range.startCell = range.startCell || 'A1';
//         range.address = range.address || 'A1';
//         range.template = range.template || '';
//         range.showFieldAsHeader = isUndefined(range.showFieldAsHeader) ? true : range.showFieldAsHeader;
//     });
//     return ranges;
// }
/**
 * @param {RowModel[]} rows - Specifies the rows.
 * @param {boolean} isImport - Specifies the operation is from Import or not.
 * @returns {void} - Specifies the row.
 */
function initRow(rows, isImport) {
    rows.forEach(function (row) {
        if (row && row.cells) {
            // Process cell indexes in ascending order when the import operation is performed.
            processIdx(row.cells, null, undefined, isImport);
        }
    });
    processIdx(rows, null, undefined, isImport);
}
/**
 * get sheet name
 *
 * @param {Workbook} context - Specifies the context.
 * @param {number} idx - Specifies the idx.
 * @returns {string} - To get sheet name.
 * @hidden
 */
function getSheetName(context, idx) {
    if (idx === void 0) { idx = context.activeSheetIndex; }
    return getSheet(context, idx).name;
}
/**
 * @param {Workbook} context - Specifies context
 * @param {number} position - position to move a sheet in the list of sheets
 * @param {number[]} sheetIndexes - Specifies the sheet indexes of the sheets which is to be moved
 * @param {boolean} action - Specifies to trigger events
 * @param {boolean} isFromUpdateAction - Specifies is from UpdateAction or not.
 * @returns {void}
 * @hidden
 */
function moveSheet(context, position, sheetIndexes, action, isFromUpdateAction) {
    var needRefresh = !!sheetIndexes;
    sheetIndexes = sheetIndexes || [context.activeSheetIndex];
    var sheetName = getSheetName(context);
    position = getNextPrevVisibleSheetIndex(context.sheets, position, context.activeSheetIndex > position);
    var args = {
        action: 'moveSheet', eventArgs: { position: position, sheetIndexes: sheetIndexes, cancel: false }
    };
    if (action) {
        context.trigger('actionBegin', args);
    }
    if (!args.eventArgs.cancel) {
        context.notify(moveSheetHandler, { prevIndex: context.activeSheetIndex, currentIndex: position });
        sheetIndexes.forEach(function (sIdx, idx) {
            context.sheets.splice(position + idx, 0, context.sheets.splice(sIdx + (position > sIdx ? -1 * idx : 0), 1)[0]);
        });
        context.setProperties({
            activeSheetIndex: isFromUpdateAction ? getSheetIndex(context, sheetName)
                : (position > sheetIndexes[0] ? position - (sheetIndexes.length - 1) : position)
        }, true);
        context.notify(moveOrDuplicateSheet, { refresh: needRefresh });
        if (action) {
            delete args.eventArgs.cancel;
            context.trigger('actionComplete', args);
        }
    }
}
/**
 * @param {Workbook} context - Specifies context
 * @param {number} sheetIndex - Specifies sheetIndex to be duplicated
 * @param {boolean} action - Specifies to trigger events
 * @param {boolean} isFromUpdateAction - Specifies is from updateAction.
 * @returns {void}
 * @hidden
 */
function duplicateSheet(context, sheetIndex, action, isFromUpdateAction) {
    sheetIndex = isUndefined$1(sheetIndex) ? context.activeSheetIndex : sheetIndex;
    var args = {
        action: 'duplicateSheet', eventArgs: { sheetIndex: sheetIndex, cancel: false }
    };
    if (action) {
        context.trigger('actionBegin', args);
    }
    if (!args.eventArgs.cancel) {
        var originalSheet = getSheet(context, sheetIndex);
        var sheet = extend({}, originalSheet.properties ?
            originalSheet.properties : originalSheet, {}, true);
        sheet.id = getMaxSheetId(context.sheets);
        var name_1 = sheet.name;
        if (/^\(\d+\)$/.test('(' + name_1.split(' (')[1])) {
            name_1 = name_1.split(' (')[0];
        }
        var sheetNames_1 = [];
        context.sheets.forEach(function (sheet) {
            sheetNames_1.push(sheet.name);
        });
        for (var i = 2;; i++) {
            if (sheetNames_1.indexOf(name_1 + ' (' + i + ')') === -1) {
                sheet.name = name_1 + ' (' + i + ')';
                break;
            }
        }
        context.notify(duplicateSheetFilterHandler, { sheetIndex: sheetIndex, newSheetIndex: sheetIndex + 1 });
        context.notify(updateSortCollection, { isDuplicate: true, curSheetIndex: sheetIndex, newSheetIndex: sheetIndex + 1 });
        context.createSheet(sheetIndex + 1, [sheet]);
        context.notify(workbookFormulaOperation, { action: 'addSheet', sheetName: 'Sheet' + sheet.id, visibleName: sheet.name, sheetId: sheet.id });
        if (!isFromUpdateAction) {
            context.setProperties({ activeSheetIndex: sheetIndex + 1 }, true);
        }
        context.notify(moveOrDuplicateSheet, { refresh: true, isDuplicate: true });
        if (action) {
            delete args.eventArgs.cancel;
            context.trigger('actionComplete', args);
        }
    }
}
/**
 * @param {SheetModel[]} sheets - sheets of spreadsheet
 * @param {number} startIndex - index of the sheet to search from
 * @param {boolean} isPrevious - if set to `true`, its find the previous visible sheet index
 * @returns {number} - return next visible sheet
 */
function getNextPrevVisibleSheetIndex(sheets, startIndex, isPrevious) {
    for (var i = startIndex; isPrevious ? i >= 0 : i < sheets.length; isPrevious ? i-- : i++) {
        if (!(sheets[i].state === 'Hidden' || sheets[i].state === 'VeryHidden')) {
            startIndex = i;
            break;
        }
    }
    return startIndex;
}

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the cell.
 */
var Cell = /** @class */ (function (_super) {
    __extends$2(Cell, _super);
    function Cell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$2([
        Property('')
    ], Cell.prototype, "notes", void 0);
    __decorate$2([
        Collection([], Image$1)
    ], Cell.prototype, "image", void 0);
    __decorate$2([
        Collection([], Chart)
    ], Cell.prototype, "chart", void 0);
    __decorate$2([
        Property('')
    ], Cell.prototype, "value", void 0);
    __decorate$2([
        Property('')
    ], Cell.prototype, "formula", void 0);
    __decorate$2([
        Property(0)
    ], Cell.prototype, "index", void 0);
    __decorate$2([
        Property('General')
    ], Cell.prototype, "format", void 0);
    __decorate$2([
        Complex({}, CellStyle)
    ], Cell.prototype, "style", void 0);
    __decorate$2([
        Property('')
    ], Cell.prototype, "hyperlink", void 0);
    __decorate$2([
        Property(false)
    ], Cell.prototype, "wrap", void 0);
    __decorate$2([
        Property(true)
    ], Cell.prototype, "isLocked", void 0);
    __decorate$2([
        Property('')
    ], Cell.prototype, "validation", void 0);
    __decorate$2([
        Property(1)
    ], Cell.prototype, "colSpan", void 0);
    __decorate$2([
        Property(1)
    ], Cell.prototype, "rowSpan", void 0);
    __decorate$2([
        Property(false)
    ], Cell.prototype, "isReadOnly", void 0);
    return Cell;
}(ChildProperty));
/**
 * @hidden
 * @param {number} rowIndex - Specifies the rowIndex.
 * @param {number} colIndex - Specifies the colIndex.
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {boolean} isInitRow - Specifies the isInitRow.
 * @param {boolean} returnEmptyObjIfNull - Specifies the bool value.
 * @returns {CellModel} - get the cell.
 */
function getCell(rowIndex, colIndex, sheet, isInitRow, returnEmptyObjIfNull) {
    var row = getRow(sheet, rowIndex);
    if (!row || !row.cells) {
        if (isInitRow) {
            if (!row) {
                sheet.rows[rowIndex] = { cells: [] };
            }
            else {
                sheet.rows[rowIndex].cells = [];
            }
        }
        else {
            return returnEmptyObjIfNull ? {} : null;
        }
    }
    return sheet.rows[rowIndex].cells[colIndex] || (returnEmptyObjIfNull ? {} : null);
}
/**
 * @hidden
 * @param {number} rowIndex - Specifies the rowIndex.
 * @param {number} colIndex - Specifies the colIndex.
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {CellModel} cell - Specifies the cell.
 * @param {boolean} isExtend - Specifies the bool value.
 * @param {boolean} isUpdate - If true, allows updating the existing cell data without extending.
 * @returns {void} - set the cell.
 */
function setCell(rowIndex, colIndex, sheet, cell, isExtend, isUpdate) {
    if (!sheet.rows[rowIndex]) {
        sheet.rows[rowIndex] = { cells: [] };
    }
    else if (!sheet.rows[rowIndex].cells) {
        sheet.rows[rowIndex].cells = [];
    }
    if (isExtend && sheet.rows[rowIndex].cells[colIndex] && !isUpdate) {
        extend(sheet.rows[rowIndex].cells[colIndex], cell, null, true);
    }
    else {
        sheet.rows[rowIndex].cells[colIndex] = cell;
    }
}
/**
 * @hidden
 * @param {CellStyleModel} style - Specifies the style.
 * @param {boolean} defaultKey - Specifies the defaultKey.
 * @returns {CellStyleModel} - Specifies the CellStyleModel.
 */
function skipDefaultValue(style, defaultKey) {
    var defaultProps = { fontFamily: 'Calibri', verticalAlign: 'bottom', textIndent: '0pt', backgroundColor: '#ffffff',
        color: '#000000', textAlign: 'left', fontSize: '11pt', fontWeight: 'normal', fontStyle: 'normal', textDecoration: 'none',
        border: '', borderLeft: '', borderTop: '', borderRight: '', borderBottom: '' };
    var changedProps = {};
    var styleVal;
    Object.keys(defaultKey ? defaultProps : style).forEach(function (propName) {
        styleVal = style["" + propName];
        if (styleVal !== defaultProps["" + propName]) {
            changedProps["" + propName] = styleVal;
        }
    });
    return changedProps;
}
/**
 * @hidden
 * @param {string} address - Specifies the address.
 * @param {boolean} wrap - Specifies the wrap.
 * @param {Workbook} context - Specifies the context.
 * @param {Workbook} preventEvt - Preventing the before cell update event.
 * @param {boolean} isPublic - Specifies if the wrap operation is invoked from a public method.
 * @returns {void} - Specifies the wrap.
 */
function wrap(address, wrap, context, preventEvt, isPublic) {
    if (wrap === void 0) { wrap = true; }
    var addressInfo = context.getAddressInfo(address);
    var rng = addressInfo.indices;
    var sheet = getSheet(context, addressInfo.sheetIndex);
    var uiRefresh = addressInfo.sheetIndex === context.activeSheetIndex;
    var cancel = !preventEvt;
    for (var i = rng[0]; i <= rng[2]; i++) {
        for (var j = rng[1]; j <= rng[3]; j++) {
            cancel = updateCell(context, sheet, { cell: { wrap: wrap }, rowIdx: i, colIdx: j, preventEvt: preventEvt });
            if (!cancel && uiRefresh) {
                context.notify(wrapEvent, { range: [i, j, i, j], wrap: wrap, sheet: sheet, initial: true, isPublic: isPublic });
            }
        }
    }
    context.setProperties({ sheets: context.sheets }, true);
}
/**
 * @hidden
 * @param {string} format - Specifies the cell format.
 * @returns {string} - Specifies the supported color code.
 */
function getColorCode(format) {
    var code;
    if (format.indexOf('[') > -1) {
        var colorValue = format.split('[')[1].split(']')[0];
        var customColors = getCustomColors();
        if (customColors.indexOf(colorValue) > -1) {
            code = colorValue;
        }
    }
    return code;
}
/**
 * @hidden
 * @returns {string[]} - Returns the custom format colors
 */
function getCustomColors() {
    return ['Black', 'Blue', 'Cyan', 'Green', 'Magenta', 'Red', 'White', 'Yellow'];
}
/**
 * @param {string} format - Specify the format.
 * @param {boolean} checkTime - Specify the checktime.
 * @param {Object} option - Specify rhe option value.
 * @param {string} option.type - Specify the type.
 * @param {boolean} checkBoth - Specify check both values.
 * @returns {boolean} - This function is used to return is custom Data time or not.
 * @hidden
 */
function isCustomDateTime(format, checkTime, option, checkBoth) {
    var isCustom;
    if (format.includes('"')) {
        var formatSection_1 = format.split(';');
        var endStrIdx_1;
        var prevChar_1;
        formatSection_1.forEach(function (formatCode, index) {
            for (var idx = 0; idx < formatCode.length; idx++) {
                if (formatCode[idx] === '"' && formatCode[idx - 1] !== '\\') {
                    endStrIdx_1 = idx;
                    do {
                        endStrIdx_1 = formatCode.indexOf('"', endStrIdx_1 + 1);
                        prevChar_1 = formatCode[endStrIdx_1 - 1];
                    } while (prevChar_1 === '\\' || prevChar_1 === '_' || prevChar_1 === '*');
                    if (endStrIdx_1 === -1) {
                        break;
                    }
                    formatCode = formatCode.substring(0, idx) + formatCode.substring(endStrIdx_1 + 1);
                    idx--;
                }
            }
            formatSection_1[index] = formatCode;
        });
        format = formatSection_1.join(';');
    }
    if ((format.includes('d') || format.includes('y')) && !format.includes('#') && !getColorCode(format)) {
        if (option) {
            option.type = 'date';
        }
        if (checkBoth && format.includes(' ') && format.split(' ').length === 2) {
            format = format.split(' ')[1];
        }
        else {
            checkTime = false;
        }
        isCustom = true;
    }
    if (checkTime && (format.includes('h') || format.includes('m') || format.includes('s')) && !format.includes('#') &&
        !getColorCode(format)) {
        if (option) {
            option.type = option.type || '';
            option.type += 'time';
        }
        isCustom = true;
    }
    return isCustom;
}
/**
 * Represents the configuration options for the Spreadsheet when opening a document.
 */
var OpenSettings = /** @class */ (function (_super) {
    __extends$2(OpenSettings, _super);
    function OpenSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$2([
        Property(0)
    ], OpenSettings.prototype, "chunkSize", void 0);
    __decorate$2([
        Property(3)
    ], OpenSettings.prototype, "retryCount", void 0);
    __decorate$2([
        Property(500)
    ], OpenSettings.prototype, "retryAfterDelay", void 0);
    return OpenSettings;
}(ChildProperty));

/**
 * Data binding module
 */
var DataBind = /** @class */ (function () {
    function DataBind(parent) {
        this.parent = parent;
        this.requestedInfo = [];
        this.addEventListener();
    }
    DataBind.prototype.addEventListener = function () {
        this.parent.on(updateSheetFromDataSource, this.updateSheetFromDataSourceHandler, this);
        this.parent.on(dataSourceChanged, this.dataSourceChangedHandler, this);
        this.parent.on(dataChanged, this.dataChangedHandler, this);
        this.parent.on(triggerDataChange, this.triggerDataChangeHandler, this);
    };
    DataBind.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(updateSheetFromDataSource, this.updateSheetFromDataSourceHandler);
            this.parent.off(dataSourceChanged, this.dataSourceChangedHandler);
            this.parent.off(dataChanged, this.dataChangedHandler);
            this.parent.off(triggerDataChange, this.triggerDataChangeHandler);
        }
    };
    /**
     * Update given data source to sheet.
     *
     * @param {Object} args - Specify the args.
     * @param {ExtendedSheet} args.sheet - Specify the sheet.
     * @param {number[]} args.indexes - Specify the indexes.
     * @param {Promise<CellModel>} args.promise - Specify the promise.
     * @param {number} args.rangeSettingCount - Specify the rangeSettingCount.
     * @param {string} args.formulaCellRef - Specify the formulaCellRef.
     * @param {number} args.sheetIndex - Specify the sheetIndex.
     * @param {boolean} args.loadFullData - Specify whether to load full data or not.
     * @param {boolean} args.resolveAfterFullDataLoaded - Specify the resolveAfterFullDataLoaded.
     * @param {Function} args.loadComplete - Specify the callback function that will be invoked once all the data are updated.
     * @param {boolean} args.loadFromStartCell - Specify the whether to load the data from the range startCell address.
     * @param {boolean} args.autoDetectFormat - Specify whether to auto detect format based on the cell value.
     * @param {Function} args.updateDependentCellsCallback - Specify a callback function to update the dependent cells address to refresh
     * after the data binding.
     * @returns {void} - Update given data source to sheet.
     */
    DataBind.prototype.updateSheetFromDataSourceHandler = function (args) {
        var _this = this;
        var cell;
        var flds;
        var sCellIdx;
        var result;
        var remoteUrl;
        var dataManager;
        var requestedRange = [];
        var sRanges = [];
        var rowIdx;
        var colIdx;
        var deferred = new Deferred();
        var sRowIdx;
        var sColIdx;
        var loadedInfo;
        args.promise = deferred.promise;
        var startCellIndexes;
        var autoDetectFormat = args.autoDetectFormat;
        var autoDetectFormatFn = autoDetectFormat && getAutoDetectFormatParser(this.parent);
        if (args.sheet && args.sheet.ranges.length) {
            var prevVal_1;
            var _loop_1 = function (k) {
                var range = args.sheet.ranges[k];
                startCellIndexes = getRangeIndexes(range.startCell);
                if (args.loadFromStartCell) {
                    args.indexes = startCellIndexes;
                }
                var sRange = args.indexes[0];
                var eRange = args.indexes[2];
                sRowIdx = startCellIndexes[0];
                dataManager = range.dataSource instanceof DataManager ? range.dataSource
                    : range.dataSource ? new DataManager(range.dataSource) : new DataManager();
                remoteUrl = remoteUrl || dataManager.dataSource.url;
                args.sheet.isLocalData =  !dataManager.dataSource.url;
                if (sRowIdx <= sRange) {
                    sRange = sRange - sRowIdx;
                }
                else {
                    if (sRowIdx <= eRange) {
                        eRange = eRange - sRowIdx;
                        sRange = 0;
                    }
                    else {
                        sRange = -1;
                    }
                }
                if (range.showFieldAsHeader && sRange !== 0) {
                    sRange -= 1;
                }
                var isEndReached = false;
                var insertRowCount = 0;
                this_1.initRangeInfo(range);
                var count = this_1.getMaxCount(range);
                loadedInfo = this_1.getLoadedInfo(sRange, eRange, range);
                sRange = loadedInfo.unloadedRange[0];
                eRange = loadedInfo.unloadedRange[1];
                if (range.info.insertRowRange) {
                    range.info.insertRowRange.forEach(function (range) {
                        insertRowCount += ((range[1] - range[0]) + 1);
                    });
                    sRange -= insertRowCount;
                    eRange -= insertRowCount;
                }
                if (sRange >= count) {
                    isEndReached = true;
                }
                else if (eRange > count) {
                    eRange = count;
                }
                if (!args.loadComplete) {
                    this_1.requestedInfo.push({ deferred: deferred, indexes: args.indexes, isNotLoaded: loadedInfo.isNotLoaded });
                }
                if (sRange >= 0 && loadedInfo.isNotLoaded && !isEndReached) {
                    sRanges[k] = sRange;
                    requestedRange[k] = false;
                    var fieldsOrder_1;
                    if (range.fieldsOrder) {
                        fieldsOrder_1 = [].slice.call(range.fieldsOrder);
                    }
                    var query = (range.query ? range.query : new Query()).clone();
                    if (!args.loadFullData) {
                        query = query.range(sRange, eRange >= count ? eRange : eRange + 1);
                    }
                    dataManager.executeQuery(query.requiresCount()).then(function (e) {
                        if (!_this.parent || _this.parent.isDestroyed) {
                            return;
                        }
                        result = (e.result && e.result.result ? e.result.result : e.result);
                        sCellIdx = getRangeIndexes(range.startCell);
                        sRowIdx = sCellIdx[0];
                        sColIdx = sCellIdx[1];
                        if (result && result.length) {
                            if (!range.info.count) {
                                count = e.count;
                                range.info.count = e.count;
                            }
                            flds = range.info.flds || fieldsOrder_1 || Object.keys(result[0]);
                            if (!range.info.fldLen) {
                                range.info.fldLen = flds.length;
                                range.info.flds = flds;
                            }
                            if (range.info.insertColumnRange) {
                                var insertCount_1 = 0;
                                range.info.insertColumnRange.forEach(function (insertRange) {
                                    for (var i = insertRange[0]; i <= insertRange[1]; i++) {
                                        if (i <= sColIdx) {
                                            flds.splice(0, 0, "emptyCell" + insertCount_1);
                                        }
                                        else {
                                            flds.splice(i - sColIdx, 0, "emptyCell" + insertCount_1);
                                        }
                                        insertCount_1++;
                                    }
                                });
                            }
                            if (sRanges[k] === 0 && range.showFieldAsHeader) {
                                rowIdx = sRowIdx + sRanges[k] + insertRowCount;
                                flds.forEach(function (field, i) {
                                    cell = getCell(rowIdx, sColIdx + i, args.sheet, true);
                                    if (!cell) {
                                        args.sheet.rows[sRowIdx + sRanges[k]].cells[sColIdx + i] = field.includes('emptyCell') ? {}
                                            : { value: field };
                                    }
                                    else if (!field.includes('emptyCell')) {
                                        cell.value = field;
                                    }
                                });
                            }
                            result.forEach(function (item, i) {
                                rowIdx = sRowIdx + sRanges[k] + i + (range.showFieldAsHeader ? 1 : 0) + insertRowCount;
                                flds.forEach(function (field, idx) {
                                    colIdx = sColIdx + idx;
                                    cell = getCell(rowIdx, colIdx, args.sheet, true);
                                    if (cell) {
                                        prevVal_1 = cell.value;
                                        if (!field.includes('emptyCell')) {
                                            setCell(rowIdx, colIdx, args.sheet, _this.getCellDataFromProp(item[field]), true);
                                        }
                                    }
                                    else {
                                        prevVal_1 = undefined;
                                        cell = args.sheet.rows[rowIdx].cells[colIdx] =
                                            field.includes('emptyCell') ? {} : _this.getCellDataFromProp(item[field]);
                                    }
                                    if (autoDetectFormat) {
                                        autoDetectFormatFn(cell);
                                    }
                                    if (args.updateDependentCellsCallback && prevVal_1 !== cell.value) {
                                        args.updateDependentCellsCallback(rowIdx, colIdx);
                                    }
                                });
                            });
                        }
                        else {
                            flds = [];
                        }
                        var totalRows;
                        if ((sRowIdx + (count || e.count)) > 0) {
                            totalRows = (sRowIdx + (count || e.count) + (range.showFieldAsHeader ? 1 : 0) + insertRowCount) - 1;
                        }
                        else {
                            totalRows = args.sheet.usedRange.rowIndex;
                        }
                        var totalCols = sColIdx + flds.length - 1 < 0 ? args.sheet.usedRange.colIndex : sColIdx + flds.length - 1;
                        if (args.loadFullData) {
                            eRange = totalRows;
                        }
                        var usedRange = { rowIndex: totalRows, colIndex: totalCols };
                        if (_this.parent.scrollSettings && _this.parent.scrollSettings.isFinite) {
                            usedRange.rowIndex = totalRows < args.sheet.rowCount ? totalRows : args.sheet.rowCount - 1;
                            usedRange.colIndex = totalCols < args.sheet.colCount ? totalCols : args.sheet.colCount - 1;
                        }
                        if (args.sheet.usedRange.rowIndex < usedRange.rowIndex) {
                            _this.parent.setSheetPropertyOnMute(args.sheet, 'usedRange', { rowIndex: usedRange.rowIndex, colIndex: args.sheet.usedRange.colIndex });
                        }
                        if (args.sheet.usedRange.colIndex < usedRange.colIndex) {
                            _this.parent.setSheetPropertyOnMute(args.sheet, 'usedRange', { rowIndex: args.sheet.usedRange.rowIndex, colIndex: usedRange.colIndex });
                        }
                        if (insertRowCount) {
                            loadedInfo = _this.getLoadedInfo(sRange, eRange, range);
                            sRange = loadedInfo.unloadedRange[0];
                            eRange = loadedInfo.unloadedRange[1];
                            if (sRange > count) {
                                loadedInfo.isNotLoaded = false;
                            }
                            if (loadedInfo.isNotLoaded) {
                                if (eRange > count) {
                                    eRange = count;
                                }
                                range.info.loadedRange.push([sRange, eRange]);
                            }
                        }
                        else {
                            range.info.loadedRange.push([sRange, eRange]);
                        }
                        requestedRange[k] = true;
                        if (requestedRange.indexOf(false) === -1) {
                            var dataLoading = void 0;
                            if (eRange + sRowIdx < sRowIdx + range.info.count) {
                                if (!args.rangeSettingCount) {
                                    args.rangeSettingCount = [];
                                }
                                args.rangeSettingCount.push(k);
                                dataLoading = true;
                                //if (remoteUrl) {
                                var unloadedArgs = {
                                    sheet: args.sheet, indexes: [0, 0, totalRows, totalCols],
                                    promise: new Promise(function (resolve) { resolve((function () { })()); }),
                                    rangeSettingCount: args.rangeSettingCount, loadComplete: args.loadComplete,
                                    autoDetectFormat: args.autoDetectFormat, resolveAfterFullDataLoaded: args.resolveAfterFullDataLoaded
                                };
                                _this.updateSheetFromDataSourceHandler(unloadedArgs);
                                unloadedArgs.promise.then(function () {
                                    if (_this.parent.getModuleName() === 'workbook') {
                                        return;
                                    }
                                    args.rangeSettingCount.pop();
                                    if (!args.rangeSettingCount.length) {
                                        _this.parent.notify('created', null);
                                    }
                                    if (args.formulaCellRef) {
                                        _this.notfyFormulaCellRefresh(args.formulaCellRef, args.sheetIndex);
                                    }
                                    else if (args.loadComplete) {
                                        args.loadComplete();
                                    }
                                });
                                //}
                            }
                            else if (args.formulaCellRef) {
                                _this.notfyFormulaCellRefresh(args.formulaCellRef, args.sheetIndex);
                            }
                            else if (args.loadComplete) {
                                args.loadComplete();
                            }
                            if (!(dataLoading && args.resolveAfterFullDataLoaded)) {
                                _this.checkResolve(args.indexes);
                                if (args.resolveAfterFullDataLoaded) {
                                    _this.checkResolve([0, 0, 0, 0]);
                                }
                            }
                        }
                    });
                }
                else if (k === 0 && requestedRange.indexOf(false) === -1) {
                    if (args.loadComplete) {
                        args.loadComplete();
                    }
                    this_1.checkResolve(args.indexes);
                }
            };
            var this_1 = this;
            for (var k = args.sheet.ranges.length - 1; k >= 0; k--) {
                _loop_1(k);
            }
        }
        else {
            deferred.resolve();
        }
    };
    DataBind.prototype.notfyFormulaCellRefresh = function (formulaCellRef, sheetIndex) {
        this.parent.formulaRefCell = null;
        this.parent.notify(updateView, { indexes: getRangeIndexes(formulaCellRef), sheetIndex: sheetIndex, refreshing: true });
    };
    DataBind.prototype.checkResolve = function (indexes) {
        var resolved;
        var isSameRng;
        var cnt = 0;
        this.requestedInfo.forEach(function (info, idx) {
            isSameRng = JSON.stringify(info.indexes) === JSON.stringify(indexes);
            if (isSameRng || resolved) {
                if (idx === 0) {
                    info.deferred.resolve();
                    cnt++;
                    resolved = true;
                }
                else {
                    if (resolved && (info.isLoaded || !info.isNotLoaded)) {
                        info.deferred.resolve();
                        cnt++;
                    }
                    else if (isSameRng && resolved) {
                        info.deferred.resolve();
                        cnt++;
                    }
                    else if (isSameRng) {
                        info.isLoaded = true;
                    }
                    else {
                        resolved = false;
                    }
                }
            }
        });
        this.requestedInfo.splice(0, cnt);
    };
    DataBind.prototype.getCellDataFromProp = function (prop) {
        var data = {};
        if (Object.prototype.toString.call(prop) === '[object Object]') {
            if (prop.formula) {
                data.formula = prop.formula;
            }
            else if (!isNullOrUndefined(prop.value)) {
                if (typeof (prop.value) === 'string') {
                    if (prop.value.indexOf('http://') === 0 || prop.value.indexOf('https://') === 0 ||
                        prop.value.indexOf('ftp://') === 0 || prop.value.indexOf('www.') === 0) {
                        data.hyperlink = prop.value;
                        data.style = { textDecoration: 'underline', color: '#00e' };
                    }
                    else {
                        data.value = prop.value;
                    }
                }
                else {
                    data.value = prop.value;
                }
            }
        }
        else {
            if (checkIsFormula(prop)) {
                data.formula = prop;
            }
            else {
                if (typeof (prop) === 'string') {
                    if (prop.indexOf('http://') === 0 || prop.indexOf('https://') === 0 ||
                        prop.indexOf('ftp://') === 0 || prop.indexOf('www.') === 0) {
                        data.hyperlink = prop;
                        data.style = { textDecoration: 'underline', color: '#00e' };
                    }
                    else {
                        data.value = prop;
                    }
                }
                else {
                    data.value = prop;
                }
            }
        }
        return data;
    };
    DataBind.prototype.getLoadedInfo = function (sRange, eRange, range) {
        var isNotLoaded = true;
        range.info.loadedRange.forEach(function (range) {
            if (range[0] <= sRange && sRange <= range[1]) {
                if (range[0] <= eRange && eRange <= range[1]) {
                    isNotLoaded = false;
                }
                else {
                    sRange = range[1] + 1;
                }
            }
            else if (range[0] <= eRange && eRange <= range[1]) {
                eRange = range[0] - 1;
            }
        });
        return { isNotLoaded: isNotLoaded, unloadedRange: [sRange, eRange] };
    };
    DataBind.prototype.getMaxCount = function (range) {
        if (range.query) {
            var query = range.query.queries;
            for (var i = 0; i < query.length; i++) {
                if (query[i].fn === 'onTake') {
                    return Math.min(query[i].e.nos, range.info.count || query[i].e.nos);
                }
            }
        }
        return range.info.count;
    };
    DataBind.prototype.initRangeInfo = function (range) {
        if (!range.info) {
            range.info = { loadedRange: [] };
        }
    };
    /**
     * Remove old data from sheet.
     *
     * @param {Object} args - Specify the args.
     * @param {number} args.sheetIdx - Specify the sheetIdx.
     * @param {number} args.rangeIdx - Specify the rangeIdx.
     * @param {Object[]} args.changedData - Specify the changedData.
     * @returns {void} - Remove old data from sheet.
     */
    DataBind.prototype.dataSourceChangedHandler = function (args) {
        var _this = this;
        var row;
        var sheet = this.parent.sheets[args.sheetIdx];
        var range = sheet.ranges[args.rangeIdx];
        if (range && (this.checkRangeHasChanges(sheet, args.rangeIdx) || !range.info)) {
            var showFieldAsHeader_1 = range.showFieldAsHeader;
            var indexes_1 = getCellIndexes(range.startCell);
            if (range.info) {
                range.info.loadedRange.forEach(function (loadedRange) {
                    for (var i = loadedRange[0]; i <= loadedRange[1] && (i < range.info.count + (showFieldAsHeader_1 ? 1 : 0)); i++) {
                        row = sheet.rows[i + indexes_1[0]];
                        if (row) {
                            for (var j = indexes_1[1]; j < indexes_1[1] + range.info.fldLen; j++) {
                                if (row.cells && row.cells[j]) {
                                    delete row.cells[j];
                                }
                            }
                        }
                    }
                });
                range.info = null;
            }
            var evtArgs = {
                sheet: sheet, indexes: [0, 0, sheet.rowCount - 1, sheet.colCount - 1], loadFullData: true,
                promise: new Promise(function (resolve) { resolve((function () { })()); })
            };
            this.updateSheetFromDataSourceHandler(evtArgs);
            evtArgs.promise.then(function () {
                _this.parent.trigger('dataSourceChanged', { data: args.changedData, action: 'dataSourceChanged', rangeIndex: args.rangeIdx,
                    sheetIndex: args.sheetIdx });
                _this.parent.notify(updateView, { sheetIndex: args.sheetIdx, checkWrap: true, checkCF: true });
            });
        }
    };
    DataBind.prototype.checkRangeHasChanges = function (sheet, rangeIdx) {
        if (this.parent.isAngular) {
            if (sheet['changedRangeIdx'] === rangeIdx) {
                delete sheet['changedRangeIdx'];
                return true;
            }
            return false;
        }
        else {
            return true;
        }
    };
    /**
     * Triggers dataSourceChange event when cell data changes
     *
     * @param {Object} args - Specify the args.
     * @param {number} args.sheetIdx - Specify the sheetIdx.
     * @param {number} args.activeSheetIndex - Specify the activeSheetIndex.
     * @param {string} args.address - Specify the address.
     * @param {number} args.startIndex - Specify the startIndex.
     * @param {number} args.endIndex - Specify the endIndex.
     * @param {string} args.modelType - Specify the modelType.
     * @param {RowModel[]} args.deletedModel - Specify the deletedModel.
     * @param {RowModel[]} args.model - Specify the model.
     * @param {string} args.insertType - Specify the insertType.
     * @param {number} args.index - Specify the index.
     * @param {string} args.type - Specify the type.
     * @param {boolean} args.isMethod - Specify the isMethod.
     * @param {string} args.fillRange - Specify the fill range.
     * @param {string} args.range - Specify the range.
     * @param {string} args.requestType - Specify the requestType.
     * @param {Object[]} args.data - Specify the data.
     * @param {boolean}  args.isDataRequest - Specify the isDataRequest.
     * @param {string} args.pastedRange - Specify the pasted range.
     * @param {boolean} args.skipFilterCheck - Specify the skip filter check.
     * @returns {void} - Triggers dataSourceChange event when cell data changes
     */
    DataBind.prototype.dataChangedHandler = function (args) {
        var _this = this;
        var changedData = [{}];
        var action;
        var cell;
        var dataRange;
        var startCell;
        var inRange;
        var inRangeCut;
        var deleteRowDetails;
        var sheetIdx = args.sheetIdx === undefined ? this.parent.activeSheetIndex : args.sheetIdx;
        var sheet = this.parent.sheets[sheetIdx];
        var cellIndices;
        var cutIndices;
        sheet.ranges.forEach(function (range, idx) {
            if (range.dataSource) {
                var isNewRow = void 0;
                startCell = getCellIndexes(range.startCell);
                dataRange = startCell.concat([startCell[0] + range.info.count + (range.showFieldAsHeader ? 0 : -1),
                    startCell[1] + range.info.fldLen - 1]);
                if (args.modelType === 'Row' || args.modelType === 'Column') {
                    if (args.modelType === 'Column') {
                        if (args.insertType) {
                            inRange = dataRange[1] < args.index && dataRange[3] >= args.index;
                            cellIndices = [args.index];
                            if (!inRange) {
                                if ((dataRange[3] + 1 === args.index && args.insertType === 'after')) {
                                    args.model.forEach(function () {
                                        range.info.flds.splice(args.index - startCell[1], 0, '');
                                    });
                                    range.info.fldLen += args.model.length;
                                }
                                else if (dataRange[1] >= args.index) {
                                    range.startCell = getCellAddress(startCell[0], startCell[1] + args.model.length);
                                }
                            }
                            else {
                                args.model.forEach(function () {
                                    range.info.flds.splice(args.index - startCell[1], 0, '');
                                });
                                range.info.fldLen += args.model.length;
                            }
                        }
                        else {
                            inRange = dataRange[1] <= args.startIndex && dataRange[3] >= args.startIndex;
                            if (inRange) {
                                for (var i = args.startIndex; i <= args.endIndex; i++) {
                                    if (i <= dataRange[3]) {
                                        range.info.flds.splice(args.startIndex, 1);
                                        range.info.fldLen -= 1;
                                    }
                                }
                            }
                        }
                        return;
                    }
                    else {
                        if (args.insertType) {
                            inRange = ((!range.showFieldAsHeader && (args.insertType === 'above' || args.isMethod)) ? dataRange[0] <=
                                args.index : dataRange[0] < args.index) && dataRange[2] >= args.index;
                            cellIndices = [args.index];
                            if (!inRange) {
                                if ((dataRange[2] + 1 === args.index && args.insertType === 'below')) {
                                    isNewRow = true;
                                    range.info.count += args.model.length;
                                }
                                else if (dataRange[0] >= args.index) {
                                    range.startCell = getCellAddress(startCell[0] + args.model.length, startCell[1]);
                                }
                            }
                            else {
                                isNewRow = true;
                                range.info.count += args.model.length;
                            }
                            if (args.isMethod) {
                                return;
                            }
                        }
                        else {
                            inRange = dataRange[0] <= args.startIndex && dataRange[2] >= args.startIndex;
                            if (args.isDataRequest) {
                                cellIndices = [args.startIndex, dataRange[1], args.startIndex, dataRange[1]];
                            }
                            else {
                                action = 'delete';
                            }
                        }
                    }
                }
                else {
                    var argsAddress = args.address || args.range || args.fillRange;
                    cellIndices = getRangeIndexes(args.requestType && args.requestType.toLowerCase().includes('paste') ? args.pastedRange.substring(args.pastedRange.lastIndexOf('!') + 1) :
                        args.sheetIdx > -1 ? args.address : argsAddress.substring(argsAddress.lastIndexOf('!') + 1));
                    var dataRangeIndices = [range.showFieldAsHeader ? dataRange[0] + 1 : dataRange[0]].concat(dataRange.slice(1, 4));
                    if (range.showFieldAsHeader && cellIndices[0] === startCell[0]) {
                        for (var i = cellIndices[1]; i <= cellIndices[3]; i++) {
                            if (i >= dataRangeIndices[1] && i <= dataRangeIndices[3]) {
                                range.info.flds[i - startCell[1]] = getCell(startCell[0], i, sheet, false, true).value || '';
                            }
                        }
                    }
                    inRange = isInRange(dataRangeIndices, cellIndices, true);
                    if (args.requestType === 'paste' && args.copiedInfo.isCut) {
                        cutIndices = [].slice.call(args.copiedInfo.range);
                        if (range.showFieldAsHeader && cutIndices[0] === startCell[0]) {
                            for (var i = cutIndices[1]; i <= cutIndices[3]; i++) {
                                if (i >= dataRangeIndices[1] && i <= dataRangeIndices[3]) {
                                    range.info.flds[i - startCell[1]] = '';
                                }
                            }
                            inRange = false;
                        }
                        inRangeCut = isInRange(dataRangeIndices, cutIndices, true);
                    }
                }
                if (inRange || isNewRow || inRangeCut) {
                    if (args.modelType === 'Row' && !args.insertType && !args.isDataRequest) {
                        args.deletedModel.forEach(function (row, rowIdx) {
                            changedData[rowIdx] = {};
                            range.info.flds.forEach(function (fld, idx) {
                                if (row.cells) {
                                    cell = row.cells[startCell[1] + idx];
                                    changedData[rowIdx]["" + fld] = _this.getFormattedValue(cell);
                                }
                                else {
                                    changedData[rowIdx]["" + fld] = null;
                                }
                            });
                            range.info.count -= 1;
                        });
                        if (args.isMethod) {
                            return;
                        }
                        deleteRowDetails = { count: args.deletedModel.length, index: args.endIndex };
                    }
                    else {
                        action = isNewRow ? 'add' : 'edit';
                        var addedCutData_1 = 0;
                        if (inRangeCut) {
                            addedCutData_1 = cutIndices[2] - cutIndices[0] + 1;
                            var _loop_2 = function (i) {
                                changedData[i] = {};
                                range.info.flds.forEach(function (fld, idx) {
                                    if (fld) {
                                        cell = getCell(cutIndices[0] + i, startCell[1] + idx, sheet);
                                        changedData[i]["" + fld] = _this.getFormattedValue(cell);
                                    }
                                });
                            };
                            for (var i = 0; i < addedCutData_1; i++) {
                                _loop_2(i);
                            }
                        }
                        if (inRange || isNewRow) {
                            var filterCheck = !args.isDataRequest && !inRangeCut && !isNewRow && !args.skipFilterCheck;
                            var _loop_3 = function (i, count) {
                                if (filterCheck && isFilterHidden(sheet, cellIndices[0] + i)) {
                                    return out_count_1 = count, "continue";
                                }
                                changedData[count + addedCutData_1] = {};
                                range.info.flds.forEach(function (fld, idx) {
                                    if (fld) {
                                        cell = getCell(cellIndices[0] + i, startCell[1] + idx, sheet);
                                        changedData[count + addedCutData_1]["" + fld] = _this.getFormattedValue(cell);
                                    }
                                });
                                count++;
                                out_count_1 = count;
                            };
                            var out_count_1;
                            for (var i = 0, count = 0; i < (isNewRow ? args.model.length : (cellIndices[2] - cellIndices[0])
                                + 1 || 1); i++) {
                                _loop_3(i, count);
                                count = out_count_1;
                            }
                        }
                    }
                    if (args.isDataRequest) {
                        args.data = changedData;
                    }
                    else {
                        _this.parent.trigger('dataSourceChanged', { data: changedData, action: action, rangeIndex: idx, sheetIndex: sheetIdx });
                    }
                }
                else if (deleteRowDetails && deleteRowDetails.count && dataRange[0] > deleteRowDetails.index) {
                    range.startCell = getCellAddress(startCell[0] - deleteRowDetails.count, startCell[1]);
                }
            }
        });
    };
    DataBind.prototype.getFormattedValue = function (cell) {
        var value = this.parent.getDisplayText(cell);
        if (value === '') {
            return null;
        }
        else if (cell && !cell.format && typeof cell.value === 'number') {
            return cell.value;
        }
        return value;
    };
    DataBind.prototype.triggerDataChangeHandler = function (args) {
        var dataChangingActions = ['insert', 'delete', 'edit', 'cellDelete', 'cellSave', 'autofill', 'clipboard', 'clear'];
        var triggerDataChange = true;
        if ((args.action === 'delete' || args.action === 'insert') && ['Sheet'].indexOf(args.eventArgs.modelType) > -1) {
            triggerDataChange = false;
        }
        else if (args.action === 'clear' && ['Clear Formats', 'Clear Hyperlinks'].indexOf(args.eventArgs.type) > -1) {
            triggerDataChange = false;
        }
        else if (args.action === 'clipboard' && args.eventArgs.requestType === 'Formats') {
            triggerDataChange = false;
        }
        if (triggerDataChange && dataChangingActions.indexOf(args.action) > -1) {
            var evtArgs = void 0;
            if (args.isUndo && (args.action === 'delete' || args.action === 'insert')) {
                evtArgs = extend({}, args.eventArgs);
                if (args.action === 'delete') {
                    evtArgs.index = evtArgs.startIndex;
                    evtArgs.model = evtArgs.deletedModel;
                    evtArgs.insertType = 'below';
                }
                else {
                    evtArgs.startIndex = evtArgs.index;
                    evtArgs.endIndex = args.eventArgs.index + args.eventArgs.model.length - 1;
                    evtArgs.deletedModel = evtArgs.model;
                    delete evtArgs.insertType;
                }
            }
            else {
                evtArgs = args.eventArgs;
            }
            this.parent.notify(dataChanged, evtArgs);
        }
    };
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    DataBind.prototype.getModuleName = function () {
        return 'dataBind';
    };
    /**
     * Destroys the Data binding module.
     *
     * @returns {void} - Destroys the Data binding module.
     */
    DataBind.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
        this.requestedInfo = [];
    };
    return DataBind;
}());

/**
 * Specifies spreadsheet internal events
 */
/** @hidden */
var ribbon = 'ribbon';
/** @hidden */
var formulaBar = 'formulaBar';
/** @hidden */
var sheetTabs = 'sheetTabs';
/** @hidden */
var refreshSheetTabs = 'refreshSheetTabs';
/** @hidden */
var isFormulaBarEdit = 'isFormulaBarEdit';
/** @hidden */
var contentLoaded = 'contentLoaded';
/** @hidden */
var mouseDown = 'mouseDown';
/** @hidden */
var spreadsheetDestroyed = 'spreadsheetDestroyed';
/** @hidden */
var editOperation = 'editOperation';
/** @hidden */
var formulaOperation = 'formulaOperation';
/** @hidden */
var formulaBarOperation = 'formulaBarOperation';
/** @hidden */
var click = 'click';
/** @hidden */
var keyUp = 'keyUp';
/** @hidden */
var keyDown = 'keyDown';
/** @hidden */
var formulaKeyUp = 'formulaKeyUp';
/** @hidden */
var formulaBarUpdate = 'formulaBarUpdate';
/** @hidden */
var onVerticalScroll = 'verticalScroll';
/** @hidden */
var onHorizontalScroll = 'horizontalScroll';
/** @hidden */
var focusRenameInput = 'focusRenameInput';
/** @hidden */
var beforeContentLoaded = 'beforeContentLoaded';
/** @hidden */
var beforeVirtualContentLoaded = 'beforeVirtualContentLoaded';
/** @hidden */
var virtualContentLoaded = 'virtualContentLoaded';
/** @hidden */
var contextMenuOpen = 'contextMenuOpen';
/** @hidden */
var cellNavigate = 'cellNavigate';
/** @hidden */
var mouseUpAfterSelection = 'mouseUpAfterSelection';
/** @hidden */
var cMenuBeforeOpen = 'contextmenuBeforeOpen';
/** @hidden */
var insertSheetTab = 'insertSheetTab';
/** @hidden */
var removeSheetTab = 'removeSheetTab';
/** @hidden */
var renameSheetTab = 'renameSheetTab';
/** @hidden */
var ribbonClick = 'ribboClick';
/** @hidden */
var refreshRibbon = 'ribbonRefresh';
/** @hidden */
var enableToolbarItems = 'enableToolbarItems';
/** @hidden */
var tabSwitch = 'tabSwitch';
/** @hidden */
var selectRange = 'selectRange';
/** @hidden */
var rangeSelectionByKeydown = 'rangeSelectionByKeydown';
/** @hidden */
var cut = 'cut';
/** @hidden */
var copy = 'copy';
/** @hidden */
var paste = 'paste';
/** @hidden */
var clearCopy = 'clearCopy';
/** @hidden */
var dataBound = 'dataBound';
/** @hidden */
var beforeDataBound = 'beforeDataBound';
/** @hidden */
var addContextMenuItems = 'addContextMenuItems';
/** @hidden */
var removeContextMenuItems = 'removeContextMenuItems';
/** @hidden */
var enableContextMenuItems = 'enableContextMenuItems';
/** @hidden */
var enableFileMenuItems = 'enableFileMenuItems';
/** @hidden */
var hideFileMenuItems = 'hideFileMenuItems';
/** @hidden */
var addFileMenuItems = 'addFileMenuItems';
/** @hidden */
var hideRibbonTabs = 'hideRibbonTabs';
/** @hidden */
var enableRibbonTabs = 'enableRibbonTabs';
/** @hidden */
var addRibbonTabs = 'addRibbonTabs';
/** @hidden */
var addToolbarItems = 'addToolbarItems';
/** @hidden */
var hideToolbarItems = 'hideToolbarItems';
/** @hidden */
var beforeRibbonCreate = 'beforeRibbonCreate';
/** @hidden */
var rowHeightChanged = 'rowHeightChanged';
/** @hidden */
var colWidthChanged = 'colWidthChanged';
/** @hidden */
var onContentScroll = 'onContentScroll';
/** @hidden */
var deInitProperties = 'deInitProperties';
/** @hidden */
var activeSheetChanged = 'activeSheetChanged';
/** @hidden */
var initiateCustomSort = 'initiateCustomSort';
/** @hidden */
var applySort = 'applySort';
/** @hidden */
var collaborativeUpdate = 'collaborativeUpdate';
/** @hidden */
var autoFit = 'autoFitRowsColumns';
/** @hidden */
var refreshFilterCellsOnResize = 'refreshFilterCellsOnResize';
/** @hidden */
var updateToggleItem = 'updateToggleItem';
/** @hidden */
var initiateHyperlink = 'initiateHyperlink';
/** @hidden */
var editHyperlink = 'editHyperlink';
/** @hidden */
var openHyperlink = 'openHyperlink';
/** @hidden */
var addNote = 'addNote';
/** @hidden */
var editNote = 'editNote';
/** @hidden */
var deleteNote = 'deleteNote';
/** @hidden */
var showNote = 'showNote';
/** @hidden */
var createNoteIndicator = 'createNoteIndicator';
/** @hidden */
var updateNoteContainer = 'updateNoteContainer';
/** @hidden */
var removeNoteContainer = 'removeNoteContainer';
/** @hidden */
var removeHyperlink = 'removeHyperlink';
/** @hidden */
var createHyperlinkElement = 'createHyperlinkElement';
/** @hidden */
var sheetNameUpdate = 'sheetNameUpdate';
/** @hidden */
var hideSheet = 'hideSheet';
/** @hidden */
var performUndoRedo = 'performUndoRedo';
/** @hidden */
var updateUndoRedoCollection = 'updateUndoRedoCollection';
/** @hidden */
var setActionData = 'setActionData';
/** @hidden */
var getBeforeActionData = 'getBeforeActionData';
/** @hidden */
var clearUndoRedoCollection = 'clearUndoRedoCollection';
/** @hidden */
var initiateFilterUI = 'initiateFilterUI';
/** @hidden */
var renderFilterCell = 'renderFilterCell';
/** @hidden */
var refreshFilterRange = 'refreshFilterRange';
/** @hidden */
var reapplyFilter = 'reapplyFilter';
/** @hidden */
var filterByCellValue = 'filterByCellValue';
/** @hidden */
var clearFilter = 'clearFilter';
/** @hidden */
var getFilteredColumn = 'getFilteredColumn';
/** @hidden */
var completeAction = 'actionComplete';
/** @hidden */
var filterCellKeyDown = 'filterCellKeyDown';
/** @hidden */
var getFilterRange = 'getFilterRange';
/** @hidden */
var setAutoFit = 'setAutoFit';
/** @hidden */
var refreshFormulaDatasource = 'refreshFormulaDatasource';
/** @hidden */
var initiateDataValidation = 'initiatedatavalidation';
/** @hidden */
var validationError = 'validationError';
/** @hidden */
var startEdit = 'startEdit';
/** @hidden */
var invalidData = 'invalidData';
/** @hidden */
var clearInvalid = 'clearInvalid';
/** @hidden */
var protectSheet = 'protectSheet';
/** @hidden */
var applyProtect = 'applyProtect';
/** @hidden */
var unprotectSheet = 'unprotectSheet';
/** @hidden */
var protectCellFormat = 'protectCellFormat';
/** @hidden */
var gotoDlg = 'renderGotoDlgt';
/** @hidden */
var findDlg = 'renderFindDlg';
/** @hidden */
var findHandler = 'findHandler';
/** @hidden */
var created = 'created';
/** @hidden */
var spreadsheetCreated = 'spreadsheetCreated';
/** @hidden */
var editAlert = 'editAlert';
/** @hidden */
var readonlyAlert = 'readonlyAlert';
/** @hidden */
var finiteAlert = 'finiteAlert';
/** @hidden */
var setUndoRedo = 'setUndoRedo';
/** @hidden */
var enableFormulaInput = 'enableFormulaInput';
/** @hidden */
var protectSelection = 'protectSelection';
/** @hidden */
var hiddenMerge = 'hiddenMerge';
/** @hidden */
var checkPrevMerge = 'checkPrevMerge';
/** @hidden */
var checkMerge = 'checkMerge';
/** @hidden */
var removeDataValidation = 'removeDataValidation';
/** @hidden */
var showAggregate = 'showAggregate';
/** @hidden */
var goToSheet = 'goToSheet';
/** @hidden */
var showSheet = 'showSheet';
/** @hidden */
var renderCFDlg = 'renderCFDlg';
/** @hidden */
var clearViewer = 'clearViewer';
/** @hidden */
var initiateFormulaReference = 'initiateFormulaReference';
/** @hidden */
var initiateCur = 'initiateCur';
/** @hidden */
var clearCellRef = 'clearCellRef';
/** @hidden */
var editValue = 'editValue';
/** @hidden */
var addressHandle = 'addressHandle';
/** @hidden */
var initiateEdit = 'initiateEdit';
/** @hidden */
var forRefSelRender = 'forRefSelRender';
/** @hidden */
var insertImage = 'insertImage';
/** @hidden */
var refreshOverlayElem = 'refreshOverlayElem';
/** @hidden */
var refreshImgCellObj = 'refreshImgCellObj';
/** @hidden */
var getRowIdxFromClientY = 'getRowIdxFromClientY';
/** @hidden */
var getColIdxFromClientX = 'getColIdxFromClientX';
/** @hidden */
var createImageElement = 'createImageElement';
/** @hidden */
var deleteImage = 'deleteImage';
/** @hidden */
var deleteChart = 'deleteChart';
/** @hidden */
var refreshChartCellObj = 'refreshChartCellObj';
/** @hidden */
var refreshChartCellModel = 'refreshChartCellModel';
/** @hidden */
var refreshImagePosition = 'refreshImagePosition';
/** @hidden */
var updateTableWidth = 'updateTableWidth';
/** @hidden */
var focusBorder = 'focusBorder';
/** @hidden */
var clearChartBorder = 'clearChartBorder';
/** @hidden */
var insertChart = 'insertChart';
/** @hidden */
var chartRangeSelection = 'chartRangeSelection';
/** @hidden */
var insertDesignChart = 'insertDesignChart';
/** @hidden */
var removeDesignChart = 'removeDesignChart';
/** @hidden */
var chartDesignTab = 'chartDesignTab';
/** @hidden */
var addChartEle = 'addChartEle';
/** @hidden */
var undoRedoForChartDesign = 'undoRedoForChartDesign';
/** @hidden */
var protectWorkbook = 'protectWorkbook';
/** @hidden */
var unProtectWorkbook = 'unProtectWorkbook';
/** @hidden */
var setProtectWorkbook = 'setProtectWorkbook';
/** @hidden */
var removeWorkbookProtection = 'removeWorkbookProtection';
/** @hidden */
var importProtectWorkbook = 'importProtectWorkbook';
/** @hidden */
var selectionStatus = 'selectionStatus';
/** @hidden */
var freeze = 'freeze';
/** @hidden */
var overlayEleSize = 'overlayEleSize';
/** @hidden */
var updateScroll = 'updateScroll';
/** @hidden */
var positionAutoFillElement = 'positionAutoFillElement';
/** @hidden */
var hideAutoFillOptions = 'hideAutoFillOptions';
/** @hidden */
var performAutoFill = 'performAutoFill';
/** @hidden */
var selectAutoFillRange = 'selectAutoFillRange';
/** @hidden */
var autoFill = 'autoFill';
/** @hidden */
var hideAutoFillElement = 'hideAutoFillElement';
/** @hidden */
var unProtectSheetPassword = 'unProtectSheetPassword';
/** @hidden */
var updateTranslate = 'updateTranslate';
/** @hidden */
var getUpdatedScrollPosition = 'getUpdatedScrollPosition';
/** @hidden */
var updateScrollValue = 'updateScrollValue';
/** @hidden */
var beforeCheckboxRender = 'beforeCheckboxfilterRenderer';
/** @hidden */
var refreshCheckbox = 'refreshCheckbox';
/** @hidden */
var renderInsertDlg = 'renderInsertDlg';
/** @hidden */
var toggleProtect = 'toggleProtect';
/** @hidden */
var propertyChange = 'propertyChange';
/** @hidden */
var updateWrapCell = 'updateWrapCell';

/**
 * Open properties.
 */
var WorkbookOpen = /** @class */ (function () {
    function WorkbookOpen(parent) {
        this.loopIndex = 0;
        this.processedLoopIndex = 0;
        this.retryCount = 0;
        this.currentDocumentId = null;
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To open the excel file stream or excel url into the spreadsheet.
     *
     * @param {OpenArgs} options - Options to open a excel file.
     * @returns {void} - To open the excel file stream or excel url into the spreadsheet.
     */
    WorkbookOpen.prototype.open = function (options) {
        this.load(options);
    };
    WorkbookOpen.prototype.load = function (options, isRetryRequest) {
        var _this = this;
        if (!this.parent.allowOpen) {
            return;
        }
        if (options.jsonObject) {
            this.fetchSuccess(options.jsonObject, options, null, true, true);
            return;
        }
        var formData = new FormData();
        if (options.file) {
            formData.append('file', options.file);
        }
        else if (options.sheetIndex >= 0) {
            formData.append('sheetPassword', options.sheetPassword);
            formData.append('sheetIndex', options.sheetIndex.toString());
        }
        else {
            this.parent.isOpen = false;
            return;
        }
        var args = { passWord: '' };
        if (options.password && options.password.length) {
            args.passWord = options.password;
        }
        if (args.passWord && args.passWord.length) {
            options.password = args.passWord;
        }
        if (options.password) {
            formData.append('password', options.password);
        }
        formData.append('IsManualCalculationEnabled', (this.parent.calculationMode === 'Manual').toString());
        var eventArgs = {
            file: options.file || null,
            cancel: false,
            requestData: {
                method: 'POST',
                body: formData
            },
            password: args.passWord
        };
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        var guid = options.guid;
        if (isNullOrUndefined(options.sheetPassword) && !guid && isNullOrUndefined(isRetryRequest)) {
            this.parent.trigger('beforeOpen', eventArgs);
            this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'beforeOpen' });
        }
        else if (guid) {
            formData.append('guid', guid);
        }
        if (eventArgs.cancel) {
            this.parent.isOpen = false;
            return;
        }
        var header = { chunkSize: null, documentId: null };
        if (this.parent.openSettings.chunkSize > 0 && isNullOrUndefined(options.sheetPassword)) {
            this.setToDefaults(isRetryRequest);
            if (!isNullOrUndefined(this.parent.openSettings.chunkSize) && this.parent.openSettings.chunkSize !== 0) {
                header.chunkSize = this.parent.openSettings.chunkSize.toString();
            }
            if (!isNullOrUndefined(this.currentDocumentId)) {
                header.documentId = this.currentDocumentId;
            }
            if (!isNullOrUndefined(header)) {
                formData.append('chunkPayload', JSON.stringify(header));
            }
        }
        fetch(this.parent.openUrl, eventArgs.requestData)
            .then(function (response) {
            if (response.ok) {
                return response.json();
            }
            else {
                return Promise.reject({
                    status: response.status,
                    statusText: response.statusText,
                    url: response.url
                });
            }
        })
            .then(function (data) { return _this.fetchSuccess(data, eventArgs, options.orginalFile, undefined, true); })
            .catch(function (error) {
            if (error.toString().indexOf('Unexpected end of JSON input') === -1 && _this.parent.openSettings.chunkSize > 0 && _this.retryCount < _this.parent.openSettings.retryCount) {
                setTimeout(function () {
                    _this.retryCount++;
                    _this.load(options, true);
                }, _this.parent.openSettings.retryAfterDelay);
            }
            else {
                if (_this.retryCount >= _this.parent.openSettings.retryCount) {
                    _this.retryCount = 0;
                }
                _this.fetchFailure(error);
            }
        });
    };
    WorkbookOpen.prototype.fetchFailure = function (error) {
        if (isUndefined$1(error.status) && isUndefined$1(error.statusText)) {
            error.statusText = 'Improper response';
        }
        this.parent.notify(openFailure, error);
        this.parent.isOpen = false;
    };
    WorkbookOpen.prototype.fetchSuccess = function (data, eventArgs, file, isOpenFromJson, isImport) {
        var openError = ['UnsupportedFile', 'InvalidUrl', 'NeedPassword', 'InCorrectPassword', 'InCorrectSheetPassword',
            'CorrectSheetPassword', 'DataLimitExceeded', 'FileSizeLimitExceeded', 'ExternalWorkbook'];
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        var workbookData = typeof data === 'string' ? JSON.parse(data) : data;
        var impData = workbookData.Workbook;
        if (!isNullOrUndefined(impData)) {
            if (openError.indexOf(impData) > -1) {
                if (file) {
                    eventArgs.file = file;
                }
                this.parent.notify(openSuccess, {
                    context: this, data: impData, guid: workbookData.Guid, eventArgs: eventArgs,
                    isOpenFromJson: isOpenFromJson
                });
                return;
            }
            this.updateModel(impData, isOpenFromJson, isImport);
            this.parent.notify(openSuccess, { context: this, data: impData, isOpenFromJson: isOpenFromJson, eventArgs: eventArgs });
            this.parent.isOpen = false;
            if (eventArgs && eventArgs.password && eventArgs.password.length > 0) {
                if (this.parent.showSheetTabs) {
                    this.parent.element.querySelector('.e-add-sheet-tab').removeAttribute('disabled');
                    this.parent.element.querySelector('.e-add-sheet-tab').classList.remove('e-disabled');
                }
                this.parent.password = '';
            }
        }
        else {
            var totalChunk = workbookData.chunkTotalCount;
            this.currentDocumentId = workbookData.documentId;
            this.chunkList = new Array(totalChunk);
            var processedChunkIndex = 0;
            var chunkLimit = totalChunk > this.parent.openSettings.chunkSize ? this.parent.openSettings.chunkSize : totalChunk;
            var processedLoopIndex = 0;
            this.processedLoopIndex = 0;
            var binaryString = '';
            /* eslint-disable-next-line @typescript-eslint/no-this-alias */
            var instance = this;
            if (!isNullOrUndefined(totalChunk)) {
                while (processedChunkIndex < totalChunk) {
                    instance.processChunk(processedChunkIndex, chunkLimit, processedLoopIndex, binaryString, eventArgs, file, isOpenFromJson, isImport);
                    processedChunkIndex += instance.parent.openSettings.chunkSize;
                    chunkLimit = processedChunkIndex + instance.parent.openSettings.chunkSize < totalChunk ?
                        instance.parent.openSettings.chunkSize : totalChunk - processedChunkIndex;
                    processedLoopIndex++;
                    instance.processedLoopIndex++;
                }
            }
        }
    };
    WorkbookOpen.prototype.processChunk = function (processedChunkIndex, chunkLimit, processedLoopIndex, binaryString, eventArgs, file, isOpenFromJson, isImport) {
        /* eslint-disable-next-line @typescript-eslint/no-this-alias */
        var instance = this;
        var header = {
            currentChunk: processedChunkIndex.toString(), chunkSize: chunkLimit.toString(),
            loopIndex: processedLoopIndex.toString(), documentId: this.currentDocumentId
        };
        var formData = new FormData();
        formData.append('chunkPayload', JSON.stringify(header));
        var requestEventArgs = {
            file: file || null,
            cancel: false,
            requestData: {
                method: 'POST',
                body: formData
            },
            password: eventArgs.password
        };
        fetch(this.parent.openUrl, requestEventArgs.requestData)
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            .then(function (response) {
            if (response.ok) {
                return response.json();
            }
            else {
                return Promise.reject({
                    status: response.status,
                    statusText: response.statusText,
                    url: response.url
                });
            }
        })
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            .then(function (data) {
            if (data !== '') {
                var chunks = atob(data['chunk']);
                var bytes = new Uint8Array(chunks.length);
                for (var i = 0; i < chunks.length; i++) {
                    bytes[i] = chunks.charCodeAt(i);
                }
                chunks = new TextDecoder('utf-8').decode(bytes);
                instance.chunkList[data['loopIndex']] = chunks;
                instance.loopIndex++;
                if (instance.loopIndex === instance.processedLoopIndex) {
                    var splicedArray = instance.chunkList.splice(0, instance.loopIndex);
                    for (var k = 0; k < splicedArray.length; k++) {
                        binaryString += splicedArray.slice(k, k + 1).join('');
                    }
                    data = JSON.parse(binaryString);
                    instance.setToDefaults();
                    instance.fetchSuccess(data, eventArgs, file, isOpenFromJson, isImport);
                }
            }
        })
            .catch(function (error) {
            if (isNullOrUndefined(instance.currentFailedChunkIndex) || instance.currentFailedChunkIndex === processedChunkIndex) {
                instance.currentFailedChunkIndex = processedChunkIndex;
                if (instance.retryCount < instance.parent.openSettings.retryCount) {
                    setTimeout(function () {
                        instance.processedLoopIndex = processedLoopIndex;
                        instance.processChunk(processedChunkIndex, chunkLimit, processedLoopIndex, binaryString, eventArgs, file, isOpenFromJson, isImport);
                        instance.retryCount++;
                    }, instance.parent.openSettings.retryAfterDelay);
                }
                else {
                    instance.retryCount = 0;
                    return instance.fetchFailure(error);
                }
            }
        });
    };
    WorkbookOpen.prototype.setToDefaults = function (isRetryRequest) {
        this.currentFailedChunkIndex = null;
        if (!isRetryRequest) {
            this.retryCount = 0;
        }
        this.loopIndex = 0;
        this.processedLoopIndex = 0;
        this.chunkList = [];
    };
    WorkbookOpen.prototype.updateModel = function (workbookModel, isOpenFromJson, isImport) {
        this.parent.notify(workbookFormulaOperation, { action: 'unRegisterSheet' });
        this.setSelectAllRange(workbookModel.sheets, isOpenFromJson);
        this.parent.sheetNameCount = 1;
        this.parent.sheets = [];
        this.parent.notify(sheetsDestroyed, {});
        this.parent.notify(clearUndoRedoCollection, null);
        workbookModel.activeSheetIndex = workbookModel.activeSheetIndex || workbookModel.sheets.findIndex(function (sheet) { return sheet.state !== 'Hidden'; });
        this.parent.setProperties({
            'isProtected': workbookModel.isProtected || false,
            'password': workbookModel.password || '',
            'sheets': workbookModel.sheets,
            'activeSheetIndex': workbookModel.activeSheetIndex,
            'definedNames': workbookModel.definedNames || [],
            'filterCollection': workbookModel.filterCollection || [],
            'sortCollection': workbookModel.sortCollection || [],
            'listSeparator': workbookModel.listSeparator || this.parent.listSeparator
        }, true);
        if (!isNullOrUndefined(workbookModel.showSheetTabs)) {
            this.parent.showSheetTabs = workbookModel.showSheetTabs;
        }
        initSheet(this.parent, undefined, isImport);
        this.parent.notify(sheetCreated, null);
        this.parent.notify(workbookFormulaOperation, { action: 'registerSheet', isImport: true });
        this.parent.notify(workbookFormulaOperation, { action: 'initiateDefinedNames' });
        this.parent.notify(protectSheetWorkBook, null);
    };
    WorkbookOpen.prototype.setSelectAllRange = function (sheets, isOpenFromJson) {
        var _this = this;
        var curSheet;
        var curRange;
        sheets.forEach(function (sheet) {
            if (sheet.selectedRange) {
                var selectedIndex = getRangeIndexes(sheet.selectedRange);
                var rowCount = (isUndefined$1(sheet.rowCount) ? 100 : sheet.rowCount) - 1;
                var colCount = (isUndefined$1(sheet.colCount) ? 100 : sheet.colCount) - 1;
                if (selectedIndex[2] === 65535) {
                    selectedIndex[2] = rowCount;
                }
                if (selectedIndex[3] === 255) {
                    selectedIndex[3] = colCount;
                }
                if (selectedIndex[0] === 65535) {
                    selectedIndex[0] = rowCount;
                }
                if (selectedIndex[1] === 255) {
                    selectedIndex[1] = colCount;
                }
                sheet.selectedRange = getRangeAddress(selectedIndex);
            }
            if (isOpenFromJson && _this.parent.isAngular) {
                for (var i = 0; i < _this.parent.sheets.length; i++) {
                    curSheet = getSheet(_this.parent, i);
                    if (sheet.name === curSheet.name) {
                        if (sheet.ranges) {
                            sheet.ranges.forEach(function (range, index) {
                                curRange = curSheet.ranges[index];
                                if (curRange && curRange.template) {
                                    range.template = curRange.template;
                                }
                            });
                        }
                        break;
                    }
                }
            }
        });
    };
    WorkbookOpen.prototype.sheetsDestroyHandler = function (args) {
        if (isNullOrUndefined(args.sheetIndex)) {
            this.preventFormatCheck = null;
        }
    };
    /**
     * Adding event listener for workbook open.
     *
     * @returns {void} - Adding event listener for workbook open.
     */
    WorkbookOpen.prototype.addEventListener = function () {
        this.parent.on(workbookOpen, this.open.bind(this));
        this.parent.on(sheetsDestroyed, this.sheetsDestroyHandler, this);
    };
    /**
     * Removing event listener workbook open.
     *
     * @returns {void} - removing event listener workbook open.
     */
    WorkbookOpen.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(workbookOpen, this.open.bind(this));
            this.parent.off(sheetsDestroyed, this.sheetsDestroyHandler);
        }
    };
    /**
     * To Remove the event listeners
     *
     * @returns {void} - To Remove the event listeners
     */
    WorkbookOpen.prototype.destroy = function () {
        this.removeEventListener();
        if (!this.parent.refreshing) {
            this.preventFormatCheck = null;
        }
        this.parent = null;
    };
    /**
     * Get the workbook open module name.
     *
     * @returns {string} - Get the module name.
     */
    WorkbookOpen.prototype.getModuleName = function () {
        return 'workbookOpen';
    };
    return WorkbookOpen;
}());

/**
 * @hidden
 * The `SaveWorker` module is used to perform save functionality with Web Worker.
 */
var SaveWorker = /** @class */ (function () {
    /**
     * Constructor for SaveWorker module in Workbook library.
     *
     * @private
     * @param {Workbook} parent - Specifies the workbook.
     */
    function SaveWorker(parent) {
        this.parent = parent;
    }
    /**
     * Process sheet.
     *
     * @param {string} sheet - specify the sheet
     * @param {number} sheetIndex - specify the sheetIndex
     * @returns {Object} - Process sheet.
     * @hidden
     */
    SaveWorker.prototype.processSheet = function (sheet, sheetIndex) {
        var parsedSheet = JSON.parse(sheet, function (key, value) {
            //Remove empty properties
            if ((Array.isArray(value) || typeof value === 'string') && !value.length) {
                return undefined;
            }
            return value;
        });
        return [sheetIndex, parsedSheet];
    };
    /**
     * Process save action.
     *
     * @param {Object} saveJSON - specify the object
     * @param {SaveOptions | Object} saveSettings - specify the saveSettings
     * @param {Object} customParams - specify the customParams
     * @param {Object} pdfLayoutSettings - specify the pdfLayoutSettings
     * @param {Function} successCallBack - specify the success callback function while invoking this method without worker.
     * @returns {void} - Process save action.
     * @hidden
     */
    SaveWorker.prototype.processSave = function (saveJSON, saveSettings, customParams, pdfLayoutSettings, successCallBack) {
        var _this = this;
        var formData = new FormData();
        var i;
        var keys = Object.keys(saveSettings);
        formData.append('JSONData', JSON.stringify(saveJSON));
        for (i = 0; i < keys.length; i++) {
            formData.append(keys[i], saveSettings[keys[i]]);
        }
        keys = Object.keys(customParams);
        for (i = 0; i < keys.length; i++) {
            formData.append(keys[i], customParams[keys[i]]);
        }
        formData.append('pdfLayoutSettings', JSON.stringify(pdfLayoutSettings));
        fetch(saveSettings.url, { method: 'POST', body: formData })
            .then(function (response) {
            if (response.ok) {
                return response.blob();
            }
            else {
                return Promise.reject({
                    message: response.statusText
                });
            }
        })
            .then(function (data) {
            new Promise(function (resolve) {
                var reader = new FileReader();
                reader.onload = function () {
                    var result = reader.result.toString();
                    var saveAsHtml = customParams['customParams'] && typeof customParams['customParams'] === 'string' &&
                        customParams['customParams'].toLowerCase() === 'saveashtml';
                    if (result.indexOf('data:text/plain;base64,') > -1 || (!saveAsHtml && result.indexOf('data:text/html;base64,') > -1) ||
                        result.indexOf('data:application/json;base64,') > -1) {
                        var str = void 0;
                        result = result.replace('data:text/plain;base64,', '');
                        result = result.replace('data:text/html;base64,', '');
                        if (result.indexOf('data:application/json;base64,') > -1) {
                            result = result.replace('data:application/json;base64,', '');
                            str = atob(result).split('.');
                        }
                        else {
                            str = atob(result).split(/(\r\n|\n|\r)/gm);
                        }
                        if (str.length) {
                            var text = str[0].length > 1 && str[0][0] === '"' ? str[0].split('"')[1] + '.' : str[0];
                            if (successCallBack) {
                                successCallBack.apply(_this, [{ dialog: text }]);
                            }
                            else {
                                postMessage({ dialog: text });
                            }
                        }
                    }
                    else {
                        if (successCallBack) {
                            successCallBack.apply(_this, [data]);
                        }
                        else {
                            postMessage(data);
                        }
                    }
                    resolve(reader.result);
                };
                reader.readAsDataURL(data);
            });
        })
            .catch(function (error) {
            if (successCallBack) {
                successCallBack.apply(_this, [{ error: error.message }]);
            }
            else {
                postMessage({ error: error.message });
            }
        });
        // try {
        //     let httpRequest: XMLHttpRequest = new XMLHttpRequest();
        //     let formData: FormData = new FormData();
        //     let i: number;
        //     let keys: string[] = Object.keys(saveSettings);
        //     httpRequest.onreadystatechange = (event: Event) => {
        //         if (httpRequest.readyState === 4 && httpRequest.status === 200) {
        //             (postMessage as Function)(httpRequest.response);
        //         }
        //     };
        //     httpRequest.onerror = (event: Event) => {
        //         (postMessage as Function)(event);
        //     };
        //     formData.append('JSONData', JSON.stringify(saveJSON));
        //     for (i = 0; i < keys.length; i++) {
        //         formData.append(keys[i], (<{ [key: string]: string }>saveSettings)[keys[i]]);
        //     }
        //     httpRequest.open('POST', saveSettings.saveUrl, false);
        //     httpRequest.send(formData);
        // } catch (e) {
        //     (postMessage as Function)({ error: e.message });
        // }
    };
    return SaveWorker;
}());

var __extends$3 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @hidden
 * The `WorkbookSave` module is used to handle the save action in Workbook library.
 */
var WorkbookSave = /** @class */ (function (_super) {
    __extends$3(WorkbookSave, _super);
    /**
     * Constructor for WorkbookSave module in Workbook library.
     *
     * @private
     * @param {Workbook} parent - Specifies the workbook.
     */
    function WorkbookSave(parent) {
        var _this = _super.call(this, parent) || this;
        _this.isProcessCompleted = false;
        _this.saveJSON = {};
        _this.isFullPost = false;
        _this.needBlobData = false;
        _this.customParams = null;
        _this.pdfLayoutSettings = { fitSheetOnOnePage: false };
        _this.addEventListener();
        return _this;
    }
    /**
     * Get the module name.
     *
     * @returns {string} - To Get the module name.
     * @private
     */
    WorkbookSave.prototype.getModuleName = function () {
        return 'workbookSave';
    };
    /**
     * To destroy the WorkbookSave module.
     *
     * @returns {void} - To destroy the WorkbookSave module.
     * @hidden
     */
    WorkbookSave.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * @hidden
     * @returns {void} - add Event Listener
     */
    WorkbookSave.prototype.addEventListener = function () {
        this.parent.on(beginSave, this.initiateSave, this);
        this.parent.on('getStringifyObject', this.performStringifyAction, this);
    };
    /**
     * @hidden
     * @returns {void} - remove Event Listener.
     */
    WorkbookSave.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(beginSave, this.initiateSave);
            this.parent.off('getStringifyObject', this.performStringifyAction);
        }
    };
    /**
     * Initiate save process.
     *
     * @hidden
     * @param {Object} args - Specify the args.
     * @returns {void} - Initiate save process.
     */
    WorkbookSave.prototype.initiateSave = function (args) {
        var saveSettings = args.saveSettings;
        this.saveSettings = {
            saveType: saveSettings.saveType,
            url: saveSettings.url,
            fileName: saveSettings.fileName || 'Sample'
            //passWord: saveSettings.passWord
        };
        this.isFullPost = args.isFullPost;
        this.needBlobData = args.needBlobData;
        if (this.needBlobData) {
            this.isFullPost = false;
        }
        this.customParams = args.customParams;
        this.pdfLayoutSettings = args.pdfLayoutSettings;
        this.updateBasicSettings();
        this.processSheets(saveSettings.autoDetectFormat, args.jsonConfig);
    };
    /**
     * Update save JSON with basic settings.
     *
     * @hidden
     * @returns {void} - Update save JSON with basic settings.
     */
    WorkbookSave.prototype.updateBasicSettings = function () {
        var jsonStr = this.getStringifyObject(this.parent, ['sheets', '_isScalar', 'observers', 'closed', 'isStopped', 'hasError',
            '__isAsync', 'beforeCellFormat', 'beforeCellRender', 'beforeDataBound', 'beforeOpen', 'beforeSave', 'beforeSelect',
            'beforeSort', 'cellEdit', 'cellEdited', 'cellEditing', 'cellSave', 'beforeCellSave', 'contextMenuItemSelect', 'contextMenuBeforeClose',
            'contextMenuBeforeOpen', 'created', 'dataBound', 'fileMenuItemSelect', 'fileMenuBeforeClose', 'fileMenuBeforeOpen',
            'saveComplete', 'sortComplete', 'select', 'actionBegin', 'actionComplete', 'afterHyperlinkClick', 'afterHyperlinkCreate',
            'beforeHyperlinkClick', 'beforeHyperlinkCreate', 'openComplete', 'openFailure', 'queryCellInfo', 'dialogBeforeOpen',
            'dataSourceChanged', 'beforeConditionalFormat', 'beforeCellUpdate']);
        var basicSettings = JSON.parse(jsonStr);
        var sheetCount = this.parent.sheets.length;
        if (sheetCount) {
            basicSettings.sheets = [];
        }
        this.saveJSON = basicSettings;
        this.saveJSON.filterCollection = [];
    };
    /**
     * Process sheets properties.
     *
     * @param {boolean} autoDetectFormat - Auto detect the format based on the cell value.
     * @param {SerializationOptions} jsonConfig - Specify the serialization options to exclude specific features from the JSON.
     * @hidden
     * @returns {void} - Process sheets properties.
     */
    WorkbookSave.prototype.processSheets = function (autoDetectFormat, jsonConfig) {
        var _this = this;
        var skipProps = ['dataSource', 'startCell', 'query', 'showFieldAsHeader', 'result'];
        if (this.parent.isAngular) {
            skipProps.push('template');
        }
        if (jsonConfig) {
            if (jsonConfig.onlyValues) {
                skipProps.push.apply(skipProps, ['style', 'formula', 'format', 'conditionalFormats', 'validation',
                    'hyperlink', 'wrap', 'chart', 'image', 'notes']);
            }
            else {
                var ignoreProps = {
                    style: jsonConfig.ignoreStyle,
                    formula: jsonConfig.ignoreFormula,
                    format: jsonConfig.ignoreFormat,
                    conditionalFormats: jsonConfig.ignoreConditionalFormat,
                    validation: jsonConfig.ignoreValidation,
                    wrap: jsonConfig.ignoreWrap,
                    chart: jsonConfig.ignoreChart,
                    image: jsonConfig.ignoreImage,
                    notes: jsonConfig.ignoreNote
                };
                if (jsonConfig.ignoreFreezePane) {
                    skipProps.push.apply(skipProps, ['frozenColumns', 'frozenRows']);
                }
                for (var prop in ignoreProps) {
                    if (ignoreProps[prop]) {
                        skipProps.push(prop);
                    }
                }
            }
        }
        var isNotLoaded;
        var isDataBinding;
        var sheet;
        var range;
        for (var sheetIdx = 0, sheetCount = this.parent.sheets.length; sheetIdx < sheetCount; sheetIdx++) {
            sheet = this.parent.sheets[sheetIdx];
            isNotLoaded = false;
            isDataBinding = false;
            for (var rangeIdx = 0, rangeCount = sheet.ranges.length; rangeIdx < rangeCount; rangeIdx++) {
                range = sheet.ranges[rangeIdx];
                if (range.dataSource) {
                    isDataBinding = true;
                    if (!range.info || !range.info.loadedRange || !range.info.loadedRange.length) {
                        isNotLoaded = true;
                        break;
                    }
                }
            }
            if (isNotLoaded) {
                var loadCompleteHandler = function (idx) {
                    executeTaskAsync(_this, _this.processSheet, _this.updateSheet, [_this.getStringifyObject(_this.parent.sheets[idx], skipProps, idx, false, true), idx], null, _this.parent);
                };
                this.parent.notify(updateSheetFromDataSource, { sheet: sheet, sheetIndex: sheetIdx, loadComplete: loadCompleteHandler.bind(this, sheetIdx),
                    loadFromStartCell: true, autoDetectFormat: autoDetectFormat });
            }
            else {
                executeTaskAsync(this, this.processSheet, this.updateSheet, [this.getStringifyObject(sheet, skipProps, sheetIdx, autoDetectFormat && isDataBinding, true), sheetIdx], null, this.parent);
            }
        }
    };
    /**
     * Update processed sheet data.
     *
     * @hidden
     * @param {Object[]} data - Specifies the data.
     * @returns {void} - Update processed sheet data.
     */
    WorkbookSave.prototype.updateSheet = function (data) {
        this.saveJSON.sheets[data[0]] = data[1];
        this.isProcessCompleted = this.getSheetLength(this.saveJSON.sheets) === this.parent.sheets.length;
        if (this.isProcessCompleted) {
            this.save(this.saveSettings);
        }
    };
    WorkbookSave.prototype.getSheetLength = function (sheets) {
        var len = 0;
        sheets.forEach(function (sheet) {
            if (sheet) {
                len++;
            }
        });
        return len;
    };
    /**
     * Save process.
     *
     * @hidden
     * @param {SaveOptions} saveSettings - Specifies the save settings props.
     * @returns {void} - Save process.
     */
    WorkbookSave.prototype.save = function (saveSettings) {
        var args = { cancel: false, jsonObject: this.saveJSON };
        this.parent.notify(onSave, args);
        if (!args.cancel) {
            if (this.isFullPost) {
                this.initiateFullPostSave();
                this.saveJSON = {};
            }
            else {
                executeTaskAsync(this, { 'workerTask': this.processSave }, this.updateSaveResult, [this.saveJSON, saveSettings, this.customParams, this.pdfLayoutSettings], true, this.parent);
            }
        }
    };
    /**
     * Update final save data.
     *
     * @hidden
     * @param {Object | Blob} result - specify the sve result.
     * @returns {void} - Update final save data.
     */
    WorkbookSave.prototype.updateSaveResult = function (result) {
        if (result.isFormDataError) {
            this.processSave(this.saveJSON, this.saveSettings, this.customParams, this.pdfLayoutSettings, this.updateSaveResult);
            return;
        }
        this.saveJSON = {};
        var args = {
            status: 'Success',
            message: '',
            url: this.saveSettings.url,
            fileName: this.saveSettings.fileName,
            saveType: this.saveSettings.saveType,
            blobData: null
        };
        if (typeof (result) === 'object' && result.error) {
            args.status = 'Failure';
            args.message = result.error.toString();
        }
        else if (typeof (result) === 'object' && result.dialog) {
            this.parent.notify(saveError, { content: result.dialog });
        }
        else {
            if (this.needBlobData) {
                args.blobData = result;
            }
            else {
                this.ClientFileDownload(result);
            }
        }
        this.parent.trigger('saveComplete', args);
        this.parent.notify(saveCompleted, args);
    };
    WorkbookSave.prototype.ClientFileDownload = function (blobData) {
        var anchor = this.parent.createElement('a', { attrs: { download: this.getFileNameWithExtension() } });
        var url = URL.createObjectURL(blobData);
        anchor.href = url;
        document.body.appendChild(anchor);
        anchor.click();
        URL.revokeObjectURL(url);
        document.body.removeChild(anchor);
    };
    WorkbookSave.prototype.initiateFullPostSave = function () {
        var keys = Object.keys(this.saveSettings);
        var i;
        var formElem = this.parent.createElement('form', { attrs: { method: 'POST', action: this.saveSettings.url } });
        var inputElem = this.parent.createElement('input', { attrs: { type: 'hidden', name: 'JSONData' } });
        inputElem.value = JSON.stringify(this.saveJSON);
        formElem.appendChild(inputElem);
        for (i = 0; i < keys.length; i++) {
            inputElem = this.parent.createElement('input', { attrs: { type: 'hidden', name: keys[i] } });
            inputElem.value = this.saveSettings[keys[i]];
            formElem.appendChild(inputElem);
        }
        keys = Object.keys(this.customParams);
        for (i = 0; i < keys.length; i++) {
            inputElem = this.parent.createElement('input', { attrs: { type: 'hidden', name: keys[i] } });
            inputElem.value = this.customParams[keys[i]];
            formElem.appendChild(inputElem);
        }
        inputElem = this.parent.createElement('input', { attrs: { type: 'hidden', name: 'pdfLayoutSettings' } });
        inputElem.value = JSON.stringify(this.pdfLayoutSettings);
        formElem.appendChild(inputElem);
        document.body.appendChild(formElem);
        formElem.submit();
        detach(formElem);
        this.parent.notify(saveCompleted, {});
    };
    WorkbookSave.prototype.performStringifyAction = function (args) {
        args.model = '{"jsonObject":{"Workbook":{"sheets":[';
        for (var sheetIdx = 0, sheetCount = this.parent.sheets.length - 1; sheetIdx <= sheetCount; sheetIdx++) {
            args.model += this.getStringifyObject(this.parent.sheets[sheetIdx], args.skipProps, sheetIdx) +
                (sheetIdx < sheetCount ? ',' : ']}}}');
        }
    };
    /**
     * Get stringified workbook object.
     *
     * @hidden
     * @param {object} model - Specifies the workbook or sheet model.
     * @param {string[]} skipProp - specifies the skipprop.
     * @param {number} sheetIdx - Specifies the sheet index.
     * @param {boolean} autoDetectFormat - Auto detect the format based on the cell value.
     * @param {boolean} isSaveAction - Specifies whether the call is for sheet processing during save action.
     * @returns {string} - Get stringified workbook object.
     */
    WorkbookSave.prototype.getStringifyObject = function (model, skipProp, sheetIdx, autoDetectFormat, isSaveAction) {
        var _this = this;
        if (skipProp === void 0) { skipProp = []; }
        if (sheetIdx === 0) {
            this.parent.notify(removeUniquecol, { clearAll: true });
        }
        if (isSaveAction) {
            this.parent.notify(setFilteredCollection, { sheetIdx: sheetIdx, isSaveAction: true, saveJson: this.saveJSON });
        }
        var chartColl = [];
        var chartModel;
        var autoDetectFormatFn = autoDetectFormat && getAutoDetectFormatParser(this.parent);
        var json = JSON.stringify(model, function (key, value) {
            if (skipProp.indexOf(key) > -1) {
                return undefined;
            }
            else if (key === 'cellStyle') {
                return _this.parent.commonCellStyle;
            }
            else {
                if (value && value.cells) {
                    for (var i = 0, len = value.cells.length; i < len; i++) {
                        var cell = value.cells[i];
                        var cellIdx = [Number(key), i];
                        if (cell) {
                            if (cell.value) {
                                if (autoDetectFormat && !cell.formula) {
                                    autoDetectFormatFn(cell);
                                }
                            }
                            else if (cell.formula && cell.formula.indexOf('=UNIQUE(') < 0) {
                                if (_this.parent.calculationMode === 'Automatic') {
                                    _this.parent.notify(workbookFormulaOperation, {
                                        action: 'refreshCalculate', value: cell.formula, rowIndex: cellIdx[0],
                                        colIndex: i, isFormula: checkIsFormula(cell.formula), sheetIndex: sheetIdx, isRefreshing: true
                                    });
                                }
                                cell.value = getCell(cellIdx[0], i, model).value;
                            }
                            if (cell.chart) {
                                chartColl.push({ index: cellIdx, chart: cell.chart });
                                chartModel = [];
                                for (var i_1 = 0, len_1 = cell.chart.length; i_1 < len_1; i_1++) {
                                    var chart = Object.assign({}, cell.chart[i_1]);
                                    delete chart.id;
                                    chartModel.push(chart);
                                }
                                cell.chart = chartModel;
                            }
                        }
                    }
                }
                if (key === 'validation' && value && typeof value.type === 'string' && value.type === 'Time') {
                    ['value1', 'value2'].forEach(function (valKey) {
                        var val = value[valKey] && value[valKey].toString();
                        if (val && !isNumber(Number(val))) {
                            value[valKey] = _this.getDateAsNumber({ range: [], cell: { value: val } }, val);
                        }
                    });
                }
                if (value && value.properties && value.maxHgts) {
                    value.properties = __assign({}, value.properties, { maxHgts: value.maxHgts });
                }
                // eslint-disable-next-line no-prototype-builtins
                if (value && typeof value === 'object' && value.hasOwnProperty('properties')) {
                    if (value.propName && value.propName.toString() === 'conditionalFormats') {
                        var properties = value.properties;
                        if (properties.format && properties.format.style) {
                            var style = properties.format.style;
                            if (style && style.backgroundColor === '#ffffff' && style.color === '#000000' &&
                                style.fontWeight !== 'bold' && style.fontStyle !== 'italic' && style.textDecoration !== 'underline') {
                                delete properties.format; // Remove format if it matches default cell style
                            }
                        }
                    }
                    return value.properties;
                }
                else if (value !== null) {
                    return value;
                }
                else {
                    return undefined;
                }
            }
        });
        var sheet = getSheet(this.parent, sheetIdx);
        chartColl.forEach(function (obj) {
            setCell(obj.index[0], obj.index[1], sheet, { chart: obj.chart }, true);
        });
        return json;
    };
    WorkbookSave.prototype.getDateAsNumber = function (args, cellValue) {
        var dateEventArgs = { value: cellValue, rowIndex: args.range[0], cell: args.cell,
            colIndex: args.range[1], sheetIndex: args.sheetIdx, updatedVal: '' };
        this.parent.notify(checkDateFormat, dateEventArgs);
        return dateEventArgs.updatedVal || cellValue;
    };
    WorkbookSave.prototype.getFileNameWithExtension = function (filename) {
        if (!filename) {
            filename = this.saveSettings.fileName;
        }
        var fileExt = this.getFileExtension();
        var idx = filename.lastIndexOf('.');
        if (idx > -1) {
            filename = filename.substr(0, idx);
        }
        return (filename + fileExt);
    };
    WorkbookSave.prototype.getFileExtension = function () {
        return ('.' + this.saveSettings.saveType.toLowerCase());
    };
    return WorkbookSave;
}(SaveWorker));

/**
 * @hidden
 */
var CommonErrors;
(function (CommonErrors) {
    CommonErrors[CommonErrors["NA"] = 0] = "NA";
    CommonErrors[CommonErrors["Value"] = 1] = "Value";
    CommonErrors[CommonErrors["Ref"] = 2] = "Ref";
    CommonErrors[CommonErrors["DivZero"] = 3] = "DivZero";
    CommonErrors[CommonErrors["Num"] = 4] = "Num";
    CommonErrors[CommonErrors["Name"] = 5] = "Name";
    CommonErrors[CommonErrors["Null"] = 6] = "Null";
    CommonErrors[CommonErrors["Calc"] = 7] = "Calc";
})(CommonErrors || (CommonErrors = {}));
/**
 * @hidden
 */
var FormulasErrorsStrings;
(function (FormulasErrorsStrings) {
    FormulasErrorsStrings[FormulasErrorsStrings["OperatorsCannotStartWithExpression"] = 0] = "OperatorsCannotStartWithExpression";
    FormulasErrorsStrings[FormulasErrorsStrings["ReservedWordAND"] = 1] = "ReservedWordAND";
    FormulasErrorsStrings[FormulasErrorsStrings["ReservedWordXOR"] = 2] = "ReservedWordXOR";
    FormulasErrorsStrings[FormulasErrorsStrings["ReservedWordIf"] = 3] = "ReservedWordIf";
    FormulasErrorsStrings[FormulasErrorsStrings["NumberContains2DecimalPoints"] = 4] = "NumberContains2DecimalPoints";
    FormulasErrorsStrings[FormulasErrorsStrings["ReservedWordElse"] = 5] = "ReservedWordElse";
    FormulasErrorsStrings[FormulasErrorsStrings["ReservedWordNOT"] = 6] = "ReservedWordNOT";
    FormulasErrorsStrings[FormulasErrorsStrings["InvalidCharInNumber"] = 7] = "InvalidCharInNumber";
    FormulasErrorsStrings[FormulasErrorsStrings["InvalidCharactersFollowingWithOperator"] = 6] = "InvalidCharactersFollowingWithOperator";
    FormulasErrorsStrings[FormulasErrorsStrings["MismatchedParentheses"] = 8] = "MismatchedParentheses";
    FormulasErrorsStrings[FormulasErrorsStrings["UnknownFormulaName"] = 9] = "UnknownFormulaName";
    FormulasErrorsStrings[FormulasErrorsStrings["RequiresASingleArgument"] = 10] = "RequiresASingleArgument";
    FormulasErrorsStrings[FormulasErrorsStrings["Requires3Args"] = 11] = "Requires3Args";
    FormulasErrorsStrings[FormulasErrorsStrings["InvalidMathArgument"] = 12] = "InvalidMathArgument";
    FormulasErrorsStrings[FormulasErrorsStrings["Requires2Args"] = 13] = "Requires2Args";
    FormulasErrorsStrings[FormulasErrorsStrings["BadIndex"] = 14] = "BadIndex";
    FormulasErrorsStrings[FormulasErrorsStrings["TooComplex"] = 15] = "TooComplex";
    FormulasErrorsStrings[FormulasErrorsStrings["CircularReference"] = 16] = "CircularReference";
    FormulasErrorsStrings[FormulasErrorsStrings["MissingFormula"] = 17] = "MissingFormula";
    FormulasErrorsStrings[FormulasErrorsStrings["ImproperFormula"] = 18] = "ImproperFormula";
    FormulasErrorsStrings[FormulasErrorsStrings["InvalidExpression"] = 19] = "InvalidExpression";
    FormulasErrorsStrings[FormulasErrorsStrings["CellEmpty"] = 20] = "CellEmpty";
    FormulasErrorsStrings[FormulasErrorsStrings["BadFormula"] = 21] = "BadFormula";
    FormulasErrorsStrings[FormulasErrorsStrings["EmptyExpression"] = 22] = "EmptyExpression";
    FormulasErrorsStrings[FormulasErrorsStrings["VirtualModeRequired"] = 23] = "VirtualModeRequired";
    FormulasErrorsStrings[FormulasErrorsStrings["MismatchedTics"] = 24] = "MismatchedTics";
    FormulasErrorsStrings[FormulasErrorsStrings["WrongNumberArguments"] = 25] = "WrongNumberArguments";
    FormulasErrorsStrings[FormulasErrorsStrings["InvalidArguments"] = 26] = "InvalidArguments";
    FormulasErrorsStrings[FormulasErrorsStrings["IterationsDoNotConverge"] = 27] = "IterationsDoNotConverge";
    FormulasErrorsStrings[FormulasErrorsStrings["CalculationOverflow"] = 29] = "CalculationOverflow";
    FormulasErrorsStrings[FormulasErrorsStrings["AlreadyRegistered"] = 28] = "AlreadyRegistered";
    FormulasErrorsStrings[FormulasErrorsStrings["MissingSheet"] = 30] = "MissingSheet";
    FormulasErrorsStrings[FormulasErrorsStrings["CannotParse"] = 31] = "CannotParse";
    FormulasErrorsStrings[FormulasErrorsStrings["ExpressionCannotEndWithAnOperator"] = 32] = "ExpressionCannotEndWithAnOperator";
    FormulasErrorsStrings[FormulasErrorsStrings["Spill"] = 33] = "Spill";
    FormulasErrorsStrings[FormulasErrorsStrings["Div"] = 34] = "Div";
})(FormulasErrorsStrings || (FormulasErrorsStrings = {}));
/**
 * @hidden
 */
var ExcelFileFormats;
(function (ExcelFileFormats) {
    ExcelFileFormats["xlsx"] = "xlsx";
    ExcelFileFormats["xlsm"] = "xlsm";
    ExcelFileFormats["xlsb"] = "xlsb";
    ExcelFileFormats["xltx"] = "xltx";
    ExcelFileFormats["xltm"] = "xltm";
    ExcelFileFormats["xls"] = "xls";
    ExcelFileFormats["xml"] = "xml";
    ExcelFileFormats["xlam"] = "xlam";
    ExcelFileFormats["xla"] = "xla";
    ExcelFileFormats["xlw"] = "xlw";
    ExcelFileFormats["xlr"] = "xlr";
    ExcelFileFormats["prn"] = "prn";
    ExcelFileFormats["txt"] = "txt";
    ExcelFileFormats["csv"] = "csv";
    ExcelFileFormats["dif"] = "dif";
    ExcelFileFormats["slk"] = "slk";
})(ExcelFileFormats || (ExcelFileFormats = {}));

/**
 * Represent the common codes for calculate
 */
var CalculateCommon = /** @class */ (function () {
    function CalculateCommon(parent) {
        this.parent = parent;
    }
    /**
     * For internal use only - Get the module name.
     *
     * @private
     * @returns {string} - Get the module name.
     */
    CalculateCommon.prototype.getModuleName = function () {
        return 'calc-common';
    };
    return CalculateCommon;
}());
/**
 * To check whether the object is undefined.
 *
 * @param {Object} value - To check the object is undefined
 * @returns {boolean} - Returns boolean value.
 * @private
 */
function isUndefined(value) {
    return ('undefined' === typeof value);
}
/**
 * @hidden
 * @param {string} value - specify the value
 * @returns {string} - get Skeleton Value.
 */
function getSkeletonVal(value) {
    switch (value) {
        case 'dd-MMM-yyyy':
        case 'dd MMM yyyy':
            value = 'medium';
            break;
        case 'MMM yyyy':
            value = 'yMMM';
            break;
        case 'MM/dd/yyyy':
        case 'dd/MM/yyyy':
        case 'dd/MM/yy':
            value = 'short';
            break;
        case 'dddd MMMM dd yyyy': //long
        case 'dd MMMM yyyy':
            value = 'long';
            break;
        case 'd MMMM yyyy':
            value = 'yMMMd';
            break;
        case 'yyyy':
            value = 'y';
            break;
        case 'h:mm':
            value = 'Hm';
            break;
        case 'h:mm tt':
            value = 'hm';
            break;
        case 'h':
            value = 'H';
            break;
        case 'h tt':
            value = 'h';
            break;
        case 'dddd':
            value = 'E';
            break;
        case 'h:mm:ss tt':
            value = 'hms';
            break;
        case 'h:mm:ss':
            value = 'Hms';
            break;
        case 'd':
            value = 'd';
            break;
        case 'd dddd':
            value = 'Ed';
            break;
        case 'M':
            value = 'M';
            break;
        case 'Md':
            value = 'Md';
            break;
        case 'MMM':
            value = 'MMM';
            break;
        case 'ddd MMM d':
            value = 'MMMEd';
            break;
        case 'MMM d':
            value = 'MMMd';
            break;
        case 'M/yyyy':
            value = 'yM';
            break;
        case 'ddd':
            value = 'E';
            break;
        default:
            value = '';
            break;
    }
    return value;
}
/**
 * To check whether the formula contains external file link.
 *
 * @param {string} formula - To check the string contains external file link.
 * @returns {boolean} - Returns boolean value.
 * @private
 */
function isExternalFileLink(formula) {
    var isExternalFile = false;
    for (var format in ExcelFileFormats) {
        if (formula.indexOf('.' + format + ']') > -1) {
            isExternalFile = true;
            break;
        }
    }
    return isExternalFile;
}

/**
 * Represents the basic formulas module.
 */
var BasicFormulas = /** @class */ (function () {
    function BasicFormulas(parent) {
        this.formulas = [
            { formulaName: 'SUM', category: 'Math & Trig', description: 'Sums individual values, cell references or ranges.' },
            {
                formulaName: 'SUMIFS', category: 'Math & Trig',
                description: 'Sums the cells specified by a given set of conditionsor criteria.'
            },
            {
                formulaName: 'SUMPRODUCT', category: 'Math & Trig',
                description: 'Returns sum of the product of given ranges of arrays.'
            },
            { formulaName: 'ABS', category: 'Math & Trig', description: 'Returns the absolute value of a number.' },
            { formulaName: 'RAND', category: 'Math & Trig', description: 'Return a random number between 0 and 1.' },
            { formulaName: 'FLOOR', category: 'Math & Trig', description: 'Returns the round a number down to the nearest integer.' },
            { formulaName: 'CEILING', category: 'Math & Trig', description: 'Returns a number rounded up to a multiple of another number.' },
            {
                formulaName: 'SUMIF', category: 'Math & Trig',
                description: 'It will sum up cells that meet the given criteria.'
            },
            {
                formulaName: 'PRODUCT', category: 'Math & Trig',
                description: 'Multiplies all the numbers given as arguments and returns the product.'
            },
            {
                formulaName: 'AVERAGE', category: 'Statistical',
                description: 'The sum of the numbers divided by how many numbers are being averaged.'
            },
            {
                formulaName: 'AVERAGEIF', category: 'Statistical',
                description: 'Computes the average of the numbers in a range that meet the supplied criteria.'
            },
            {
                formulaName: 'COUNT', category: 'Statistical',
                description: 'Counts the numbers in the list of arguments, exclude text entries.'
            },
            { formulaName: 'COUNTA', category: 'Statistical', description: 'Counts the non-empty values in the list of arguments.' },
            {
                formulaName: 'COUNTIF', category: 'Statistical',
                description: 'Counts the number of cells in a range that meet a specified condition.'
            },
            {
                formulaName: 'COUNTIFS', category: 'Statistical',
                description: 'Counts the number of times each cells in all the ranges that meet the specific conditions.'
            },
            {
                formulaName: 'AVERAGEA', category: 'Statistical',
                description: 'Calculates the average of values in the list of arguments.Arguments can be numbers, names, arrays or references.'
            },
            {
                formulaName: 'AVERAGEIFS', category: 'Statistical',
                description: 'Conditionally returns the average of the contents of cells for the set of ranges.'
            },
            {
                formulaName: 'MIN', category: 'Statistical',
                description: 'Returns the smaller number in set of arguments.'
            },
            { formulaName: 'MAX', category: 'Statistical', description: 'Returns the largest number in set of arguments.' },
            { formulaName: 'DATE', category: 'Date', description: 'Returns the date, given the year, month and day of the month.' },
            { formulaName: 'DAY', category: 'Date', description: 'Returns the day of a given date.' },
            { formulaName: 'TODAY', category: 'Date', description: 'Returns the current date as date value.' },
            { formulaName: 'DAYS', category: 'Date', description: 'Returns the number of days between two dates.' },
            { formulaName: 'WEEKDAY', category: 'Date', description: 'Returns the day of the week corresponding to a date.' },
            {
                formulaName: 'IF', category: 'Logical',
                description: 'Returns one value if a logical expression is TRUE and another if it is FALSE'
            },
            {
                formulaName: 'AND', category: 'Logical',
                description: 'Returns TRUE if all the arguments are considered TRUE, and FALSE otherwise.'
            },
            {
                formulaName: 'IFS', category: 'Logical',
                description: 'Checks multiple conditions and returns a value corresponding to the first TRUE result.'
            },
            {
                formulaName: 'IFERROR', category: 'Logical',
                description: 'Returns a value you specify if a formula evaluates to an error; otherwise, it returns the result of the formula.'
            },
            {
                formulaName: 'CHOOSE', category: 'Lookup & Reference',
                description: 'Returns a value from a list, given an index number.'
            },
            {
                formulaName: 'INDEX', category: 'Lookup & Reference',
                description: 'Returns a value from a table, given a row and column number.'
            },
            { formulaName: 'FIND', category: 'Text', description: 'Returns the position of a string of text within another string.' },
            { formulaName: 'CONCATENATE', category: 'Text', description: ' Used to join two or more strings together.' },
            { formulaName: 'CONCAT', category: 'Text', description: 'Concatenates a list or range of text strings.' },
            { formulaName: 'SUBTOTAL', category: 'Lookup & Reference', description: 'Returns a subtotal in a list or database.' },
            { formulaName: 'RADIANS', category: 'Math & Trig', description: 'Converts degrees to radians.' },
            {
                formulaName: 'OR', category: 'Logical',
                description: 'Returns TRUE if any arguments considered TRUE, and all the arguments are FALSE it will return FALSE.'
            },
            { formulaName: 'NOT', category: 'Logical', description: 'Returns the inverse of a given logical expression.' },
            {
                formulaName: 'MATCH', category: 'Lookup & Reference',
                description: 'Returns the relative position of an checked item in range that matches a specified value in a specified order'
            },
            {
                formulaName: 'RANDBETWEEN', category: 'Math & Trig', description: 'Returns an integer random number in a specified range.'
            },
            {
                formulaName: 'SLOPE', category: 'Statistical',
                description: 'Returns the slope of the line from linear regression of the data points.'
            },
            {
                formulaName: 'INTERCEPT', category: 'Statistical',
                description: 'Calculates the point of the Y-intercept line via linear regression.'
            },
            {
                formulaName: 'RSQ', category: 'Statistical',
                description: 'Returns the square of the Pearson product moment correlation coefficient based on data points in known_ys and known_xs'
            },
            {
                formulaName: 'UNIQUE', category: 'Lookup & Reference',
                description: 'Returns a unique values from a range or array.'
            },
            {
                formulaName: 'ROUNDUP', category: 'Math & Trig', description: 'Rounds a number away from zero.'
            },
            {
                formulaName: 'ROUNDDOWN', category: 'Math & Trig', description: 'Rounds a number down, toward zero.'
            },
            {
                formulaName: 'INT', category: 'Math & Trig', description: 'Returns a number to the nearest integer.'
            },
            {
                formulaName: 'LN', category: 'Math & Trig', description: 'Returns the natural logarithm of a number.'
            },
            {
                formulaName: 'ISNUMBER', category: 'Information', description: 'Returns TRUE, if the argument is number and FALSE otherwise.'
            },
            {
                formulaName: 'ROUND', category: 'Math & Trig', description: 'Rounds a number to a specified number of digits.'
            },
            {
                formulaName: 'LOG', category: 'Math & Trig', description: 'Returns the logarithm of a number to the base that you specify.'
            },
            {
                formulaName: 'POWER', category: 'Math & Trig', description: 'Returns the result of a number raised to power.'
            },
            {
                formulaName: 'SQRT', category: 'Math & Trig', description: 'Returns the square root of a positive number.'
            },
            {
                formulaName: 'TRUNC', category: 'Math & Trig',
                description: 'Returns the truncated value of a number to a specified number of decimal places.'
            },
            {
                formulaName: 'EXP', category: 'Math & Trig', description: 'Returns e raised to the power of the given number.'
            },
            {
                formulaName: 'GEOMEAN', category: 'Statistical',
                description: 'Returns the geometric mean of an array or range of positive data.'
            },
            { formulaName: 'TEXT', category: 'Lookup & Reference', description: 'Converts a value to text in specified number format.' },
            { formulaName: 'SORT', category: 'Lookup & Reference', description: 'Sorts a range of an array.' },
            { formulaName: 'LOOKUP', category: 'Lookup & Reference', description: 'Looks for a value in a one-row or one-column range, then returns a value from the same position in a second one-row or one-column range.' },
            { formulaName: 'VLOOKUP', category: 'Lookup & Reference', description: 'Looks for a specific value in the first column of a lookup range and returns a corresponding value from a different column within the same row.' },
            { formulaName: 'HLOOKUP', category: 'Lookup & Reference', description: 'Looks for a value in the top row of the array of values and then returns a value in the same column from a row in the array that you specify.' },
            { formulaName: 'T', category: 'Text', description: 'Checks whether a value is text or not and returns the text.' },
            { formulaName: 'EXACT', category: 'Text', description: 'Checks whether a two text strings are exactly same and returns TRUE or FALSE.' },
            { formulaName: 'LEN', category: 'Text', description: 'Returns a number of characters in a given string.' },
            { formulaName: 'MOD', category: 'Math & Trig', description: 'Returns a remainder after a number is divided by divisor.' },
            { formulaName: 'ODD', category: 'Math & Trig', description: 'Rounds a positive number up and negative number down to the nearest odd integer.' },
            { formulaName: 'PI', category: 'Math & Trig', description: 'Returns the value of pi.' },
            { formulaName: 'COUNTBLANK', category: 'Statistical', description: 'Returns the number of empty cells in a specified range of cells.' },
            { formulaName: 'EVEN', category: 'Math & Trig', description: 'Rounds a positive number up and negative number down to the nearest even integer.' },
            { formulaName: 'FACT', category: 'Math & Trig', description: 'Returns the factorial of a number.' },
            { formulaName: 'DECIMAL', category: 'Math & Trig', description: 'Converts a text representation of a number in a given base into a decimal number.' },
            { formulaName: 'DEGREES', category: 'Math & Trig', description: 'Converts radians to degrees.' },
            { formulaName: 'ADDRESS', category: 'Lookup & Reference', description: 'Returns a cell reference as text, given specified row and column numbers.' },
            { formulaName: 'TIME', category: 'Date & Time', description: 'Converts hours, minutes, seconds to the time formatted text.' },
            { formulaName: 'CHAR', category: 'Text', description: 'Returns the character from the specified number.' },
            { formulaName: 'CODE', category: 'Text', description: 'Returns the numeric code for the first character in a given string.' },
            { formulaName: 'DOLLAR', category: 'Text', description: 'Converts the number to currency formatted text.' },
            { formulaName: 'SMALL', category: 'Statistical', description: 'Returns the k-th smallest value in a given array.' },
            { formulaName: 'LARGE', category: 'Statistical', description: 'Returns the k-th largest value in a given array.' },
            { formulaName: 'MEDIAN', category: 'Statistical', description: 'Returns the median of the given set of numbers.' },
            { formulaName: 'EDATE', category: 'Date & Time', description: 'Returns a date with given number of months before or after the specified date.' },
            { formulaName: 'EOMONTH', category: 'Date & Time', description: 'Returns the last day of the month that is a specified number of months before or after an initially supplied start date.' },
            { formulaName: 'DATEVALUE', category: 'Date & Time', description: 'Converts a date string into date value.' },
            { formulaName: 'HOUR', category: 'Date & Time', description: 'Returns the number of hours in a specified time string.' },
            { formulaName: 'MINUTE', category: 'Date & Time', description: 'Returns the number of minutes in a specified time string.' },
            { formulaName: 'SECOND', category: 'Date & Time', description: 'Returns the number of seconds in a specified time string.' },
            { formulaName: 'NOW', category: 'Date & Time', description: 'Returns the current date and time.' },
            { formulaName: 'MONTH', category: 'Date & Time', description: 'Returns the number of months in a specified date string.' },
            { formulaName: 'PROPER', category: 'Text', description: 'Converts a text to proper case; first letter to uppercase and other letters to lowercase.' }
        ];
        this.isConcat = false;
        this.parent = parent;
        this.init();
    }
    BasicFormulas.prototype.init = function () {
        var fn;
        for (var i = 0; i < this.formulas.length; i++) {
            fn = getValue('Compute' + this.formulas[i].formulaName, this).bind(this);
            this.addFormulaCollection(this.formulas[i].formulaName.toUpperCase(), fn, this.formulas[i].category, this.formulas[i].description);
        }
    };
    BasicFormulas.prototype.addFormulaCollection = function (formulaName, functionName, formulaCategory, description) {
        this.parent.libraryFormulas = {
            fName: formulaName, handler: functionName, category: formulaCategory,
            description: description
        };
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args
     * @returns {string | number} - Comput sum value
     */
    BasicFormulas.prototype.ComputeSUM = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var isSubtotalFormula = false;
        var isAggregateComputation;
        var sheet;
        if (args.length) {
            var lastArgument = args[args.length - 1];
            if (lastArgument === 'isSubtotal') {
                isSubtotalFormula = true;
                args.pop();
            }
            else if (lastArgument === 'isAggregate') {
                sheet = this.parent.parentObject.getActiveSheet();
                isAggregateComputation = true;
                args.pop();
            }
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var sum = 0;
        var val;
        var orgValue;
        var maxDecimalLength = 0;
        var indexes;
        if (!isNullOrUndefined(args)) {
            var argArr = args;
            var setMaxDecimalLength = function (val) {
                if (val.toString().indexOf('.') > -1) {
                    maxDecimalLength = Math.max(maxDecimalLength, val.split('.')[1].length);
                }
            };
            for (var i = 0; i < argArr.length; i++) {
                var argValue = argArr[i].toString();
                if (argValue.indexOf(':') > -1 && this.parent.isCellReference(argValue)) {
                    var cellCollection = this.parent.getCellCollection(argValue.split(this.parent.tic).join(''));
                    for (var j = 0; j < cellCollection.length; j++) {
                        if (isAggregateComputation) {
                            indexes = getCellIndexes(cellCollection[j]);
                            if (isHiddenRow(sheet, indexes[0]) || isHiddenCol(sheet, indexes[1])) {
                                continue;
                            }
                        }
                        val = !isSubtotalFormula ? this.parent.getValueFromArg(cellCollection[j]) :
                            this.parent.getValueFromArg(cellCollection[j], null, null, true);
                        if (isSubtotalFormula && val.includes('SUBTOTAL(')) {
                            continue;
                        }
                        if (this.parent.getErrorStrings().indexOf(val) > -1) {
                            return val;
                        }
                        if (isNullOrUndefined(val[0]) || isNaN(this.parent.parseFloat(val))) {
                            continue;
                        }
                        setMaxDecimalLength(val);
                        sum = sum + this.parent.parseFloat(val);
                    }
                }
                else {
                    if (argArr[i].indexOf(this.parent.tic) > -1) {
                        if (isNaN(this.parent.parseFloat(argArr[i].split(this.parent.tic).join(''))) ||
                            argArr[i].split(this.parent.tic).join('').trim() === '') {
                            return this.parent.getErrorStrings()[CommonErrors.Value];
                        }
                    }
                    if (argArr[i].split(this.parent.tic).join('') === this.parent.trueValue) {
                        argArr[i] = '1';
                    }
                    if (argArr[i].split(this.parent.tic).join('') === this.parent.falseValue) {
                        argArr[i] = '0';
                    }
                    orgValue = !isSubtotalFormula ? this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join('')) :
                        this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join(''), null, null, true);
                    if (isSubtotalFormula && orgValue.includes('SUBTOTAL(')) {
                        continue;
                    }
                    if (this.parent.getErrorStrings().indexOf(orgValue) > -1) {
                        return orgValue;
                    }
                    if (isNullOrUndefined(orgValue) || isNaN(this.parent.parseFloat(orgValue))) {
                        continue;
                    }
                    if (orgValue.length > 0) {
                        setMaxDecimalLength(orgValue);
                        sum = sum + this.parent.parseFloat(orgValue + '');
                    }
                }
            }
        }
        return sum.toString().indexOf('.') > -1 ? sum.toFixed(maxDecimalLength) : sum;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the Integer.
     */
    BasicFormulas.prototype.ComputeINT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var argsValue;
        var errCollection = this.parent.getErrorStrings();
        if (args[0] === '' && args.length === 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        argsValue = this.parent.getValueFromArg(args[0]);
        if (errCollection.indexOf(argsValue) > -1) {
            return argsValue;
        }
        if (argsValue.toUpperCase() === this.parent.trueValue) {
            argsValue = '1';
        }
        else if (argsValue.toUpperCase() === this.parent.falseValue) {
            argsValue = '0';
        }
        if (!this.parent.isCellReference(args[0])) {
            if (args[0].indexOf(this.parent.tic + this.parent.tic) === -1) {
                argsValue = argsValue.split(this.parent.tic).join('');
            }
            if (argsValue.trim() === '') {
                return errCollection[CommonErrors.Value];
            }
        }
        if (argsValue.indexOf('%') > -1) {
            argsValue = (Number(argsValue.split('%')[0]) * 0.01).toString();
        }
        if (isNaN(this.parent.parseFloat(argsValue))) {
            return errCollection[CommonErrors.Value];
        }
        argsValue = this.parent.parseFloat(argsValue);
        argsValue = Math.floor(argsValue);
        return argsValue;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {Date | string} - Compute the Today.
     */
    BasicFormulas.prototype.ComputeTODAY = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var str;
        if (args.length !== 1 || args[0] !== '') {
            str = this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else {
            var dt = new Date(Date.now());
            if (this.parent.parentObject.getModuleName() === 'spreadsheet') {
                str = this.parent.parentObject.dateToInt(dt);
                if (this.parent.parser.storedStringText.toUpperCase().indexOf('TODAY') === 0 &&
                    this.parent.cell !== '') {
                    this.parent.parentObject.setDateFormat(this.parent.getSheetId(this.parent.grid), this.parent.rowIndex(this.parent.cell) - 1, this.parent.colIndex(this.parent.cell) - 1);
                }
            }
            else {
                str = dt.getFullYear() + '/' + this.parent.calculateDate((dt.getMonth() + 1).toString()) + '/'
                    + this.parent.calculateDate(dt.getDate().toString());
            }
        }
        return str;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {number} - Compute the day from the date.
     */
    BasicFormulas.prototype.ComputeWEEKDAY = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if ((args[0] === '' && isNullOrUndefined(args[1])) || args.length > 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        if ((args[0] === '' && args[1] === '') || args[1] === '') {
            return this.parent.getErrorStrings()[CommonErrors.Num].toString();
        }
        if (args.length === 1) {
            args.push('1');
        }
        if ((args[0].indexOf(this.parent.tic) > -1 && args[0].split(this.parent.tic).join('').trim() === '') || (args[1].split(this.parent.tic).join('').trim() === '') || (args[1].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(args[1].split(this.parent.tic).join(''))))) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        var date;
        var value;
        var day;
        if (this.parent.isCellReference(args[0])) {
            date = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';
            if (date.indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            if ((args[0].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(args[0].split(this.parent.tic).join(''))))) {
                date = this.parent.getValueFromArg(args[0]);
            }
            else {
                date = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';
            }
        }
        if (this.parent.isCellReference(args[1])) {
            value = this.parent.getValueFromArg(args[1].split(this.parent.tic).join('')) || '0';
        }
        else {
            value = this.parent.getValueFromArg(args[1].split(this.parent.tic).join(''));
        }
        if (this.parent.getErrorStrings().indexOf(date) > -1) {
            return date;
        }
        if (this.parent.getErrorStrings().indexOf(value) > -1) {
            return value;
        }
        date = date === this.parent.trueValue ? '1' : (date === this.parent.falseValue ? '0' : date);
        value = value === this.parent.trueValue ? '1' : (value === this.parent.falseValue ? '0' : value);
        day = this.parent.parseFloat(date);
        value = this.parent.parseFloat(value);
        if (isNaN(value) || isNaN(day)) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if (day < 0 || day > 2958465) {
            return this.parent.getErrorStrings()[CommonErrors.Num].toString();
        }
        value = parseInt(value.toString(), 10);
        day = day < 1 ? 0 : Math.floor(day) % 7;
        switch (value) {
            case 1:
            case 17:
                day = day <= 0 ? day + 7 : day;
                break;
            case 2:
            case 11:
                day = day - 1;
                day = day <= 0 ? day + 7 : day;
                break;
            case 3:
                day = day - 2;
                day = day < 0 ? day + 7 : day;
                break;
            case 12:
                day = day + 5;
                day = day > 7 ? day - 7 : day;
                break;
            case 13:
                day = day + 4;
                day = day > 7 ? day - 7 : day;
                break;
            case 14:
                day = day + 3;
                day = day > 7 ? day - 7 : day;
                break;
            case 15:
                day = day + 2;
                day = day > 7 ? day - 7 : day;
                break;
            case 16:
                day = day + 1;
                day = day > 7 ? day - 7 : day;
                break;
            default:
                day = this.parent.getErrorStrings()[CommonErrors.Num].toString();
                break;
        }
        return day;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string} - Compute to the Proper casing.
     */
    BasicFormulas.prototype.ComputePROPER = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var str;
        var nestedFormula;
        var errCollection = this.parent.getErrorStrings();
        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {
            nestedFormula = true;
            args.pop();
        }
        if (isNullOrUndefined(args) || (args[0].trim() === '' && args.length === 1)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        str = this.parent.getValueFromArg(args[0]).trim();
        if (errCollection.indexOf(str) > -1) {
            return str;
        }
        if (args[0].indexOf(this.parent.tic) > -1) {
            if (args[0] !== str && args[0].startsWith('n')) {
                str = this.parent.removeTics(str.trim());
            }
            else {
                str = this.parent.removeTics(args[0].trim());
                if (str.indexOf(this.parent.tic + this.parent.tic) > -1) {
                    str = str.replace(/""/g, this.parent.tic);
                }
            }
        }
        else if (!args[0].startsWith('n') && str.split('%').length === 2 && this.parent.isNumber(str.split('%')[0])) {
            str = (Number(str.split('%')[0]) / 100).toString();
        }
        str = str.toLowerCase().replace(/\b\w/g, function (char) {
            return char.toUpperCase();
        }).replace(/(\d)([a-z])/g, function (match, number, char) {
            return number + char.toUpperCase();
        });
        if (nestedFormula) {
            str = this.parent.tic + str + this.parent.tic;
        }
        return str;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the Sum product.
     */
    BasicFormulas.prototype.ComputeSUMPRODUCT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a, _b;
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var sum = 0;
        var count = 0;
        var index;
        var mulValues = null;
        var ranges = args;
        var len = [];
        for (var i = 0; i < ranges.length; i++) {
            len.push(this.parent.getCellCollection(ranges[i]).length);
        }
        for (var j = 0; j < len.length; j++) {
            if (len[j] && len[j + 1] && len[j] !== len[j + 1]) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        for (var k = 0; k < ranges.length; ++k) {
            var range = ranges[k];
            if (!range.startsWith(this.parent.tic) && this.parent.isCellReference(range)) {
                var i = range.indexOf(':');
                var startRow = this.parent.rowIndex(range.substr(0, i));
                var endRow = this.parent.rowIndex(range.substr(i + 1));
                if (!(startRow !== -1 || endRow === -1) === (startRow === -1 || endRow !== -1)) {
                    return this.parent.getErrorStrings()[CommonErrors.Name];
                }
                if (startRow > endRow) {
                    _a = [endRow, startRow], startRow = _a[0], endRow = _a[1];
                }
                var col1 = this.parent.colIndex(range.substr(0, i));
                var col2 = this.parent.colIndex(range.substr(i + 1));
                if (col1 > col2) {
                    _b = [col2, col1], col1 = _b[0], col2 = _b[1];
                }
                if (mulValues === null) {
                    count = (endRow - startRow + 1) * (col2 - col1 + 1);
                    mulValues = [];
                    for (i = 0; i < count; ++i) {
                        mulValues[i] = 1; //To create required index.
                    }
                }
                i = 0;
                for (var row = startRow; row <= endRow; ++row) {
                    for (var col = col1; col <= col2; ++col) {
                        var cellRef = this.getSheetReference(range) + this.parent.convertAlpha(col) + (row);
                        var result = this.parent.getValueFromArg(cellRef);
                        if (this.parent.getErrorStrings().indexOf(result) > -1) {
                            return result;
                        }
                        if (!isNaN(this.parent.parseFloat(result))) {
                            //To return #VALUE! error when array dimensions are mismatched.
                            if (isNaN(mulValues[i])) {
                                return this.parent.getErrorStrings()[CommonErrors.Name];
                            }
                            mulValues[i] = mulValues[i] * this.parent.parseFloat(result);
                        }
                        else {
                            mulValues[i] = 0;
                        }
                        i++;
                    }
                }
            }
            else {
                var s1 = this.parent.getValueFromArg(range);
                index = s1.indexOf('"');
                if (this.parent.getErrorStrings().indexOf(s1) > -1) {
                    return s1;
                }
                else if (index > -1) {
                    return 0;
                }
                else {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
            }
        }
        for (var i = 0; i < count; ++i) {
            sum += mulValues[i];
        }
        return sum;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the Roundup.
     */
    BasicFormulas.prototype.ComputeROUNDUP = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var str;
        var arg1;
        var arg2;
        var index;
        var num;
        var len = args.length;
        if (!isNullOrUndefined(args) && len > 2) {
            str = this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        if (len === 1 && args[0] !== '') {
            index = args[0].indexOf('"');
            arg1 = args[0].indexOf('"') > -1 ? args[0].replace('"', '') : args[0];
            arg1 = arg1.indexOf('"') > -1 ? arg1.replace('"', '') : arg1;
            arg1 = arg1.toUpperCase() === 'TRUE' ? '1' : (arg1 === 'FALSE' ? '0' : arg1);
            arg1 = this.parent.getValueFromArg(arg1);
            num = this.parent.parseFloat(arg1);
            if (num > 0) {
                num += .4999999999; // To round the number, we using this value.
            }
            else if (num < 0) {
                num -= .4999999999;
            }
            num = this.parent.parseFloat(num.toFixed(0));
            str = num.toString();
        }
        else if (len === 2) {
            index = args[0].indexOf('"') > -1 ? args[0].indexOf('"') : (args[1].indexOf('"') > -1 ? args[1].indexOf('"') : -1);
            if (this.parent.isCellReference(args[0])) {
                arg1 = this.parent.getValueFromArg(args[0]) || '0';
            }
            else {
                if (args[0].indexOf(this.parent.tic) > -1 && (args[0].split(this.parent.tic).join('') === this.parent.trueValue ||
                    args[0].split(this.parent.tic).join('') === this.parent.falseValue)) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
                arg1 = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
            }
            if (this.parent.getErrorStrings().indexOf(arg1) > -1) {
                return arg1;
            }
            if (this.parent.isCellReference(args[1])) {
                arg2 = this.parent.getValueFromArg(args[1]) || '0';
            }
            else {
                if (args[1].indexOf(this.parent.tic) > -1 && (args[1].split(this.parent.tic).join('') === this.parent.trueValue ||
                    args[1].split(this.parent.tic).join('') === this.parent.falseValue)) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
                arg2 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
            }
            if (this.parent.getErrorStrings().indexOf(arg2) > -1) {
                return arg2;
            }
            arg1 = arg1.toUpperCase() === 'TRUE' ? '1' : (arg1 === 'FALSE' ? '0' : arg1);
            arg2 = arg2.toUpperCase() === 'TRUE' ? '1' : (arg2 === 'FALSE' ? '0' : arg2);
            var isInvalidNumStr = isNaN(Number(arg1)) || arg1.trim() === '';
            var isInvalidDigStr = isNaN(Number(arg2)) || arg2.trim() === '';
            if (((args[0].indexOf('"') > -1 || this.parent.isCellReference(args[0])) && isInvalidNumStr)
                || ((args[1].indexOf('"') > -1 || this.parent.isCellReference(args[1])) && isInvalidDigStr)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            var digits = Math.ceil(this.parent.parseFloat(arg2));
            num = this.parent.parseFloat(arg1);
            if (digits > 0) {
                var decimalArr = arg1.split('.');
                var decimalCount = decimalArr.length === 2 ? (decimalArr[1].length >= digits ? digits : decimalArr[1].length) : 0;
                num = this.parent.parseFloat(this.preciseRound(num, decimalCount, 'ROUNDUP'));
                str = num.toString();
                if (isNaN(num)) {
                    if (digits.toString().indexOf('"') > -1) {
                        str = this.parent.getErrorStrings()[CommonErrors.Value];
                    }
                    else {
                        str = this.parent.getErrorStrings()[CommonErrors.Name];
                    }
                }
            }
            else {
                if (num > 0) {
                    num = (num / Math.pow(10, -digits)) + .49999;
                }
                else if (num < 0) {
                    num = (num / Math.pow(10, -digits)) - .49999;
                }
                if (num > 0 && digits < -9) {
                    num = 1 * Math.pow(10, -digits);
                }
                else {
                    num = this.parent.parseFloat(num.toFixed(0)) * Math.pow(10, -digits);
                }
                str = num.toString();
                if (isNaN(num)) {
                    str = (digits.toString().indexOf('"') > -1) ? this.parent.getErrorStrings()[CommonErrors.Value] :
                        str = this.parent.getErrorStrings()[CommonErrors.Name];
                }
            }
        }
        else {
            str = index > -1 ? this.parent.getErrorStrings()[CommonErrors.Value] :
                this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        return str;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the Rounddown.
     */
    BasicFormulas.prototype.ComputeROUNDDOWN = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var result;
        var arg1;
        var arg2;
        var index;
        var num;
        var len = args.length;
        if (!isNullOrUndefined(args) && len > 2) {
            result = this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        if (len === 1 && args[0] !== '') {
            index = args[0].indexOf('"');
            arg1 = args[0].indexOf('"') > -1 ? args[0].replace('"', '') : args[0];
            arg1 = arg1.indexOf('"') > -1 ? arg1.replace('"', '') : arg1;
            arg1 = arg1.toUpperCase() === 'TRUE' ? '1' : (arg1 === 'FALSE' ? '0' : arg1);
            arg1 = this.parent.getValueFromArg(arg1);
            num = this.parent.parseFloat(arg1);
            if (num > 0) {
                num -= .4999999999; // To round the number, we are using this value.
            }
            else if (num < 0) {
                num += .4999999999;
            }
            num = this.parent.parseFloat(num.toFixed(0));
            result = num.toString();
        }
        else if (len === 2) {
            index = args[0].indexOf('"') > -1 ? args[0].indexOf('"') : (args[1].indexOf('"') > -1 ? args[1].indexOf('"') : -1);
            if (this.parent.isCellReference(args[0])) {
                arg1 = this.parent.getValueFromArg(args[0]) || '0';
            }
            else {
                if (args[0].indexOf(this.parent.tic) > -1 && (args[0].split(this.parent.tic).join('') === this.parent.trueValue ||
                    args[0].split(this.parent.tic).join('') === this.parent.falseValue)) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
                arg1 = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
            }
            if (this.parent.getErrorStrings().indexOf(arg1) > -1) {
                return arg1;
            }
            if (this.parent.isCellReference(args[1])) {
                arg2 = this.parent.getValueFromArg(args[1]) || '0';
            }
            else {
                if (args[1].indexOf(this.parent.tic) > -1 && (args[1].split(this.parent.tic).join('') === this.parent.trueValue ||
                    args[1].split(this.parent.tic).join('') === this.parent.falseValue)) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
                arg2 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
            }
            if (this.parent.getErrorStrings().indexOf(arg2) > -1) {
                return arg2;
            }
            arg1 = arg1.toUpperCase() === 'TRUE' ? '1' : (arg1 === 'FALSE' ? '0' : arg1);
            arg2 = arg2.toUpperCase() === 'TRUE' ? '1' : (arg2 === 'FALSE' ? '0' : arg2);
            var isInvalidNumStr = isNaN(Number(arg1)) || arg1.trim() === '';
            var isInvalidDigStr = isNaN(Number(arg2)) || arg2.trim() === '';
            if (((args[0].indexOf('"') > -1 || this.parent.isCellReference(args[0])) && isInvalidNumStr)
                || ((args[1].indexOf('"') > -1 || this.parent.isCellReference(args[1])) && isInvalidDigStr)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            var digits = Math.ceil(this.parent.parseFloat(arg2));
            num = this.parent.parseFloat(arg1);
            if (digits > 0) {
                var decimalIndex = arg1.indexOf('.');
                var decimalCount = 0;
                if (decimalIndex !== -1) {
                    decimalCount = arg1.length - decimalIndex - 1;
                    decimalCount = decimalCount >= digits ? digits : decimalCount;
                }
                num = this.parent.parseFloat(this.preciseRound(num, decimalCount, 'ROUNDDOWN'));
                result = num.toString();
                if (isNaN(num)) {
                    if (digits.toString().indexOf('"') > -1) {
                        result = this.parent.getErrorStrings()[CommonErrors.Value];
                    }
                    else {
                        result = this.parent.getErrorStrings()[CommonErrors.Name];
                    }
                }
            }
            else {
                if (num > 0) {
                    num = (num / Math.pow(10, -digits)) - .49999;
                }
                else if (num < 0) {
                    num = (num / Math.pow(10, -digits)) + .49999;
                }
                if (num > 0 && digits < -9) {
                    num = 1 * Math.pow(10, -digits);
                }
                else {
                    num = this.parent.parseFloat(num.toFixed(0)) * Math.pow(10, -digits);
                }
                result = num.toString();
                if (isNaN(num)) {
                    result = (digits.toString().indexOf('"') > -1) ? this.parent.getErrorStrings()[CommonErrors.Value] :
                        result = this.parent.getErrorStrings()[CommonErrors.Name];
                }
            }
        }
        else {
            result = index > -1 ? this.parent.getErrorStrings()[CommonErrors.Value] :
                this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {number | string} - Compute the count.
     */
    BasicFormulas.prototype.ComputeCOUNT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var isSubtotalFormula = false;
        if (args.length && args[args.length - 1] === 'isSubtotal') {
            isSubtotalFormula = true;
            args.pop();
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var argArr = args;
        var argVal;
        var cellColl;
        var result = 0;
        var cellValue;
        var value;
        for (var i = 0; i < argArr.length; i++) {
            argVal = argArr[i];
            if (this.parent.isCellReference(argVal)) {
                if (argVal.indexOf(':') > -1) {
                    cellColl = this.parent.getCellCollection(argVal.split(this.parent.tic).join(''));
                    for (var j = 0; j < cellColl.length; j++) {
                        cellValue = !isSubtotalFormula ? this.parent.getValueFromArg(cellColl[j]) :
                            this.parent.getValueFromArg(cellColl[j], null, null, true);
                        if (isSubtotalFormula && cellValue.includes('SUBTOTAL(')) {
                            continue;
                        }
                        if (!isNaN(this.parent.parseFloat(cellValue))) {
                            if (argVal.length > 0 && cellValue.trim() !== '') {
                                result++;
                            }
                        }
                    }
                }
                else {
                    cellValue = !isSubtotalFormula ? this.parent.getValueFromArg(argVal) :
                        this.parent.getValueFromArg(argVal, null, null, true);
                    if (isSubtotalFormula && cellValue.includes('SUBTOTAL(')) {
                        continue;
                    }
                    if (!isNaN(this.parent.parseFloat(cellValue))) {
                        if (argVal.length > 0 && cellValue.trim() !== '') {
                            result++;
                        }
                    }
                }
            }
            else {
                value = this.parent.getValueFromArg(argVal).split(this.parent.tic).join('');
                if (argVal.length === 0 && value.trim() === '') {
                    result++;
                }
                else if (!isNaN(this.parent.parseFloat(value)) || argVal === this.parent.trueValue || argVal === this.parent.falseValue) {
                    if (argVal.length > 0 && argVal.trim() !== '' && value.trim() !== '') {
                        result++;
                    }
                }
            }
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {Date | string} - Compute the Date.
     */
    BasicFormulas.prototype.ComputeDATE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var nestedFormula;
        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {
            nestedFormula = true;
            args.pop();
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if (args.length !== 3) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var argArr = [];
        for (var i = 0; i < args.length; ++i) {
            argArr[i] = this.parent.getValueFromArg(args[i]);
        }
        argArr[0] = (argArr[0] === this.parent.trueValue) ? '1' : (argArr[0] === this.parent.falseValue) ? '0' : argArr[0];
        argArr[1] = (argArr[1] === this.parent.trueValue) ? '1' : (argArr[1] === this.parent.falseValue) ? '0' : argArr[1];
        argArr[2] = (argArr[2] === this.parent.trueValue) ? '1' : (argArr[2] === this.parent.falseValue) ? '0' : argArr[2];
        for (var idx = 0; idx < argArr.length; idx++) {
            var argsValue = argArr[idx];
            if (this.parent.getErrorStrings().indexOf(argsValue) > -1) {
                return argsValue;
            }
            else if ((argsValue === '""') || (argsValue === '"0"' && args[idx] !== '"0"') || (argsValue === '"TRUE"' || argsValue === '"FALSE"')) {
                return this.parent.getErrorStrings()[CommonErrors.Value].toString();
            }
        }
        var year = Math.floor(this.parent.parseFloat(argArr[0].split(this.parent.tic).join('')));
        var month = Math.floor(this.parent.parseFloat(argArr[1].split(this.parent.tic).join('')));
        var day = Math.floor(this.parent.parseFloat(argArr[2].split(this.parent.tic).join('')));
        var days = 0;
        if (!isNaN(year) && !isNaN(month) && !isNaN(day)) {
            if ((year < 0 && month <= 12) || (year >= 10000 && month > 0)) {
                return this.parent.getErrorStrings()[CommonErrors.Num].toString();
            }
            while (month > 12) {
                month -= 12;
                year++;
            }
            days = this.parent.getSerialDateFromDate(year, month, day);
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.Value].toString();
        }
        if (days === 0) {
            return this.parent.getErrorStrings()[CommonErrors.Num].toString();
        }
        var date = this.parent.fromOADate(days);
        if (date.toString() !== 'Invalid Date') {
            if ((date.getFullYear() < 1900) || (10000 <= date.getFullYear())) {
                return this.parent.getErrorStrings()[CommonErrors.Num].toString();
            }
            if (!nestedFormula) {
                return new Internationalization(this.parent.parentObject.locale || 'en-US').formatDate(date, { type: 'date', skeleton: 'yMd' });
            }
        }
        return days.toString();
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {number | string} - Compute the ceiling.
     */
    BasicFormulas.prototype.ComputeFLOOR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var argArr = args;
        var argCount = argArr.length;
        var value;
        if (argCount !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if ((argArr[0] === '' && argArr[1] === '') || (argArr[0] === '' && !argArr[1].includes('"'))) {
            return 0;
        }
        else if (argArr[1] === '' && !argArr[0].includes('"')) {
            argArr[1] = '0';
        }
        for (var i = 0; i < argArr.length; i++) {
            var argVal = argArr[i].split(this.parent.tic).join('').trim();
            if (argVal === '' || (argArr[i].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            if (isCellReference(argArr[i])) {
                value = this.parent.getValueFromArg(argArr[i]) || '0';
                value = (value === this.parent.trueValue) ? '1' : (value === this.parent.falseValue) ? '0' : value;
                if (value.toUpperCase().match(/[A-Z]/) || value.includes('"') || !this.parent.isNumber(value)) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
            }
            else {
                value = this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join(''));
                value = value === this.parent.trueValue ? '1' : (value === this.parent.falseValue ? '0' : value);
                if (value.toUpperCase().match(/[A-Z]/) || value.includes('"') || !this.parent.isNumber(value)) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
            }
            argArr[i] = value;
        }
        var fnum = this.parent.parseFloat(argArr[0]);
        var significance = this.parent.parseFloat(argArr[1]);
        if (fnum > 0 && significance < 0) {
            return this.parent.getErrorStrings()[CommonErrors.Num];
        }
        if ((fnum > 0 || fnum < 0) && significance === 0) {
            return this.parent.getErrorStrings()[CommonErrors.DivZero];
        }
        if (isNaN(fnum)) {
            return this.parent.getErrorStrings()[CommonErrors.Name];
        }
        if (fnum === 0 && significance === 0) {
            return 0;
        }
        return Math.floor(fnum / significance) * significance;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {number | string} - Compute the ceiling.
     */
    BasicFormulas.prototype.ComputeCEILING = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var argArr = args;
        var argCount = argArr.length;
        var value;
        if (argCount !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if ((argArr[0] === '' && argArr[1] === '') || (argArr[0] === '' && !argArr[1].includes('"'))) {
            return 0;
        }
        else if (argArr[1] === '' && !argArr[0].includes('"')) {
            argArr[1] = '0';
        }
        for (var i = 0; i < argArr.length; i++) {
            var argVal = argArr[i].split(this.parent.tic).join('').trim();
            if (argVal === '' || (argArr[i].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            if (isCellReference(argArr[i])) {
                value = this.parent.getValueFromArg(argArr[i]) || '0';
                value = (value === this.parent.trueValue) ? '1' : (value === this.parent.falseValue) ? '0' : value;
                if (value.toUpperCase().match(/[A-Z]/) || value.includes('"') || !this.parent.isNumber(value)) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
            }
            else {
                value = this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join(''));
                value = (value === this.parent.trueValue) ? '1' : (value === this.parent.falseValue) ? '0' : value;
                if (value.toUpperCase().match(/[A-Z]/) || value.includes('"') || !this.parent.isNumber(value)) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
            }
            argArr[i] = value;
        }
        var cnum = this.parent.parseFloat(argArr[0]);
        var significance = this.parent.parseFloat(argArr[1]);
        if (cnum > 0 && significance < 0) {
            return this.parent.getErrorStrings()[CommonErrors.Num];
        }
        if (isNaN(cnum)) {
            return this.parent.getErrorStrings()[CommonErrors.Name];
        }
        if ((cnum > 0 || cnum === 0) && significance === 0) {
            return 0;
        }
        return Math.ceil(cnum / significance) * significance;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the serialNumber.
     * @returns {number | string} - Compute the DAY.
     */
    BasicFormulas.prototype.ComputeDAY = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var result;
        var dateVal;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if (args[0].startsWith(this.parent.tic)) {
            dateVal = args[0].split(this.parent.tic).join('');
            if (dateVal === '' || dateVal === this.parent.trueValue || dateVal === this.parent.falseValue) {
                return errCollection[CommonErrors.Value];
            }
        }
        else {
            dateVal = this.parent.getValueFromArg(args[0].split(this.parent.tic).join(''));
            if (this.parent.isCellReference(args[0]) && (dateVal.indexOf(this.parent.tic) > -1)) {
                return errCollection[CommonErrors.Value];
            }
        }
        if (errCollection.indexOf(dateVal) > -1) {
            return dateVal;
        }
        else if (Number(dateVal) < 0) {
            return errCollection[CommonErrors.Num];
        }
        else if (Math.floor(Number(dateVal)) === 0 || dateVal === this.parent.falseValue) {
            return 0;
        }
        else if (dateVal === this.parent.trueValue) {
            return 1;
        }
        result = this.parent.isNaN(Number(dateVal)) ? this.parent.parseDate(dateVal) : this.parent.intToDate(dateVal);
        if (Object.prototype.toString.call(result) === '[object Date]') { /* eslint-disable-next-line */
            result = ((new Date(result).getFullYear() < 1900) || (new Date(result).getFullYear()) > 9999) ? this.parent.isNumber(dateVal) ? 'Num' : 'NaN' : result.getDate();
        }
        if (result.toString() === 'NaN') {
            return errCollection[CommonErrors.Value];
        }
        else if (result.toString() === 'Num') {
            return errCollection[CommonErrors.Num];
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the IF value.
     */
    BasicFormulas.prototype.ComputeIF = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var nestedFormula;
        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {
            nestedFormula = true;
            args.pop();
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        if (this.parent.getErrorStrings().indexOf(args[0]) > 0) {
            return args[0];
        }
        var argArr = args;
        var skipTick;
        if (argArr.length === 4 && argArr[3] === 'nestedFormulaTrue') {
            skipTick = true;
            argArr.pop();
        }
        var condition;
        var result;
        if (argArr.length > 3 || argArr.length === 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        else if (argArr.length <= 3) {
            var cellValues = void 0;
            var cellVal = void 0;
            var val = '';
            condition = this.parent.getValueFromArg(argArr[0]);
            if (this.parent.getErrorStrings().indexOf(condition) > -1) {
                return condition;
            }
            var condUpper = condition.toUpperCase();
            var parsedVal = this.parent.parseFloat(condition);
            if (condUpper === this.parent.trueValue || (parsedVal < 0 || parsedVal > 0)) {
                if (nestedFormula && argArr[1].includes(':')) {
                    cellValues = this.parent.getCellCollection(argArr[1]);
                    for (var i = 0; i < cellValues.length; i++) {
                        cellVal = this.parent.getValueFromArg(cellValues[i]);
                        if (!isNaN(this.parent.parseFloat(cellVal))) {
                            val += cellVal + ',';
                        }
                    }
                    return val.slice(0, val.length - 1);
                }
                result = argArr[1] === '' ? '0' : this.parent.getValueFromArg(argArr[1]);
            }
            else if (condUpper === this.parent.falseValue || parsedVal === 0) {
                if (isNullOrUndefined(argArr[2])) {
                    return this.parent.falseValue;
                }
                if (nestedFormula && argArr[2].includes(':')) {
                    cellValues = this.parent.getCellCollection(argArr[2]);
                    for (var i = 0; i < cellValues.length; i++) {
                        cellVal = this.parent.getValueFromArg(cellValues[i]);
                        if (!isNaN(this.parent.parseFloat(cellVal))) {
                            val += cellVal + ',';
                        }
                    }
                    return val.slice(0, val.length - 1);
                }
                result = argArr[2] === '' ? '0' : this.parent.getValueFromArg(argArr[2]);
            }
            else {
                return this.parent.formulaErrorStrings[FormulasErrorsStrings.Requires3Args];
            }
        }
        if (!skipTick && result.indexOf(this.parent.tic) > -1) {
            return result.split(this.parent.tic).join('');
        }
        else {
            return result === '' ? '0' : result;
        }
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {number | string} - Compute the IFERROR value.
     */
    BasicFormulas.prototype.ComputeIFERROR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var argArr = args;
        var condition;
        if (argArr.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if (this.parent.isCellReference(argArr[0])) {
            condition = this.parent.getValueFromArg(argArr[0]) || '0';
            if (this.parent.getErrorStrings().indexOf(condition) === -1 && condition !== 'NaN') {
                return condition;
            }
        }
        else {
            condition = this.parent.getValueFromArg(argArr[0], null, true) || '0';
            if (this.parent.getErrorStrings().indexOf(condition) === -1 && condition !== 'NaN') {
                condition = condition.split(this.parent.tic).join('').trim();
                return condition;
            }
        }
        if (this.parent.isCellReference(argArr[1])) {
            condition = this.parent.getValueFromArg(argArr[1]) || '0';
        }
        else {
            condition = this.parent.getValueFromArg(argArr[1]) || '0';
            condition = condition.split(this.parent.tic).join('').trim();
        }
        return condition;
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the PRODUCT value.
     */
    BasicFormulas.prototype.ComputePRODUCT = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var isSubtotalFormula = false;
        if (range.length && range[range.length - 1] === 'isSubtotal') {
            isSubtotalFormula = true;
            range.pop();
        }
        if (isNullOrUndefined(range) || (range.length === 1 && range[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var product = 1;
        var val;
        var orgValue;
        var argsHit = true;
        var parseVal;
        if (!isNullOrUndefined(range)) {
            var argArr = range;
            for (var i = 0; i < argArr.length; i++) {
                var rangevalue = argArr[i];
                if (rangevalue.indexOf(':') > -1 && this.parent.isCellReference(rangevalue)) {
                    var cellCollection = this.parent.getCellCollection(rangevalue);
                    for (var j = 0; j < cellCollection.length; j++) {
                        val = !isSubtotalFormula ? this.parent.getValueFromArg(cellCollection[j]) :
                            this.parent.getValueFromArg(cellCollection[j], null, null, true);
                        if (isSubtotalFormula && val.includes('SUBTOTAL(')) {
                            continue;
                        }
                        if (!isNumber(val)) {
                            continue;
                        }
                        if (this.parent.getErrorStrings().indexOf(val) > -1) {
                            return val;
                        }
                        parseVal = this.parent.parseFloat(val);
                        if (!isNaN(parseVal)) {
                            if (val.length > 0) {
                                product = product * parseVal;
                                argsHit = false;
                            }
                        }
                    }
                }
                else if (rangevalue.indexOf(':') === -1 && this.parent.isCellReference(rangevalue)) {
                    orgValue = !isSubtotalFormula ? this.parent.getValueFromArg(argArr[i]) :
                        this.parent.getValueFromArg(argArr[i], null, null, true);
                    if (isSubtotalFormula && orgValue.includes('SUBTOTAL(')) {
                        continue;
                    }
                    if (!isNumber(orgValue)) {
                        continue;
                    }
                    if (this.parent.getErrorStrings().indexOf(orgValue) > -1) {
                        return orgValue;
                    }
                }
                else {
                    orgValue = argArr[i];
                    var isEmptyStr = orgValue.indexOf(this.parent.tic) > -1 && orgValue.split(this.parent.tic).join('').trim() === '';
                    if (isEmptyStr || (argArr[i].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(orgValue.split(this.parent.tic).join(''))))) {
                        return this.parent.getErrorStrings()[CommonErrors.Value];
                    }
                    orgValue = this.parent.getValueFromArg(argArr[i].split(this.parent.tic).join(''));
                    orgValue = (orgValue === this.parent.trueValue) ? '1' : (orgValue === this.parent.falseValue) ? '0' : orgValue.split(this.parent.tic).join('');
                    if (this.parent.getErrorStrings().indexOf(orgValue) > -1) {
                        return orgValue;
                    }
                }
                parseVal = this.parent.parseFloat(orgValue);
                if (!isNaN(parseVal)) {
                    if (orgValue.length > 0) {
                        product = product * parseVal;
                        argsHit = false;
                    }
                }
            }
        }
        return argsHit ? '0' : product.toString();
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {string | number} - Compute the Choose value.
     */
    BasicFormulas.prototype.ComputeDAYS = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(args) && (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var processArgs = function (actuaValue) {
            var value = _this.parent.getValueFromArg(actuaValue).trim();
            if (value.indexOf(_this.parent.tic) > -1) {
                value = value.split(_this.parent.tic).join('').trim();
                if (value === '' || _this.parent.isCellReference(actuaValue) || value.toUpperCase() === _this.parent.trueValue ||
                    value.toUpperCase() === _this.parent.falseValue) {
                    return errCollection[CommonErrors.Value];
                }
            }
            value = value.split(_this.parent.tic).join('');
            if (value.toUpperCase() === _this.parent.trueValue) {
                value = '1';
            }
            else if (value === '' || value.toUpperCase() === _this.parent.falseValue) {
                value = '0';
            }
            else if (Number(value) < 0) {
                return errCollection[CommonErrors.Num];
            }
            var dateCheck = { value: value.toString() };
            _this.parent.parentObject.notify(checkDateFormat, dateCheck);
            if (dateCheck.isDate || dateCheck.isTime) {
                value = (_this.parent.parseDate(value).getTime() / (1000 * 3600 * 24)).toString();
            }
            return value;
        };
        var endDate = processArgs(args[0]);
        if (errCollection.indexOf(endDate) > -1) {
            return endDate;
        }
        var startDate = processArgs(args[1]);
        if (errCollection.indexOf(startDate) > -1) {
            return startDate;
        }
        var result = Math.floor(Number(endDate)) - Math.floor(Number(startDate));
        if (isNaN(result)) {
            return errCollection[CommonErrors.Value];
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} argArr - specify the range.
     * @returns {number | string | number[] | string[]} - Compute the unique.
     */
    BasicFormulas.prototype.ComputeUNIQUE = function () {
        var _this = this;
        var argArr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argArr[_i] = arguments[_i];
        }
        var result;
        var isComputeExp;
        var errCollection = this.parent.getErrorStrings();
        if (argArr[argArr.length - 1] === 'isComputeExp') {
            isComputeExp = true;
            argArr.pop();
        }
        if (isNullOrUndefined(argArr) || (argArr[0] === '' && argArr.length === 1)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (argArr.length > 3) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var processArgs = function (actualValue) {
            if (isNullOrUndefined(actualValue)) {
                return _this.parent.falseValue;
            }
            var value = _this.parent.getValueFromArg(actualValue);
            if (errCollection.indexOf(value) > -1) {
                return value;
            }
            if (Number(value) === 0) {
                return _this.parent.falseValue;
            }
            else if (Number(value) < 0 || Number(value) > 0) {
                return _this.parent.trueValue;
            }
            if (!_this.parent.isCellReference(actualValue)) {
                value = _this.parent.removeTics(value);
            }
            if (value.toUpperCase() === _this.parent.trueValue || value.toUpperCase() === _this.parent.falseValue) {
                return value.toUpperCase();
            }
            else if (value.indexOf(_this.parent.tic) > -1 || actualValue.indexOf(_this.parent.tic) > -1) {
                return errCollection[CommonErrors.Value];
            }
            else {
                return errCollection[CommonErrors.Name];
            }
        };
        var byColumn = processArgs(argArr[1]);
        if (errCollection.indexOf(byColumn) > -1) {
            return byColumn;
        }
        var exactlyOne = processArgs(argArr[2]);
        if (errCollection.indexOf(exactlyOne) > -1) {
            return exactlyOne;
        }
        var valueCollection = [];
        if (argArr[0].indexOf(':') > -1) {
            if (isNullOrUndefined(argArr[0].match(/[0-9]/))) {
                var splitArray = argArr[0].split(':');
                argArr[0] = splitArray[0] + '1' + ':' + splitArray[1] + (this.parent.spreadSheetUsedRange[0] + 1);
            }
            else if (isNullOrUndefined(argArr[0].toUpperCase().match(/[A-Z]/))) {
                var splitArray = argArr[0].split(':');
                argArr[0] = 'A' + splitArray[0] + ':' + getAlphalabel(this.parent.spreadSheetUsedRange[1] + 1) + splitArray[1];
            }
            var rangeSplit = argArr[0].split(':');
            if (this.parent.isCellReference(rangeSplit[0]) && this.parent.isCellReference(rangeSplit[1])) {
                var collection = this.parent.dependencyCollection;
                for (var i = 0; i < collection.length && !isComputeExp; i++) {
                    if (collection[i].split(':')[0] === argArr[0].split(':')[0]) {
                        this.clearDependency(collection[i]);
                    }
                }
                if (this.parent.dependencyCollection.indexOf(argArr[0]) === -1) {
                    if (!isComputeExp) {
                        this.parent.dependencyCollection.push(argArr[0]);
                    }
                }
                else {
                    this.clearDependency(argArr[0]);
                }
                var j = argArr[0].indexOf(':');
                var swap = void 0;
                var rowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], 0, j));
                var colIdx = this.parent.colIndex(this.parent.substring(argArr[0], 0, j));
                var endRowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));
                var endColIdx = this.parent.colIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));
                if (rowIdx > endRowIdx) {
                    swap = endRowIdx;
                    endRowIdx = rowIdx;
                    rowIdx = swap;
                }
                if (colIdx > endColIdx) {
                    swap = endColIdx;
                    endColIdx = colIdx;
                    colIdx = swap;
                }
                var sheetIndex = '';
                if (argArr[0].indexOf('!') === 0) {
                    sheetIndex = argArr[0].substring(0, argArr[0].replace('!', '').indexOf('!') + 2);
                }
                argArr[0] = sheetIndex + getAlphalabel(colIdx) + rowIdx + ':' + getAlphalabel(endColIdx) + endRowIdx;
                var colDiff = endColIdx - colIdx;
                var cellValues = this.parent.getCellCollection(argArr[0]);
                var actCell = void 0;
                var uniqueActCell = void 0;
                actCell = uniqueActCell = this.parent.actCell;
                if (byColumn === this.parent.falseValue) {
                    if (colDiff === 0) {
                        for (var i = 0; i < cellValues.length; i++) {
                            var val = this.parent.getValueFromArg(cellValues[i]);
                            val = val === '' ? '0' : val;
                            valueCollection.push(val);
                        }
                    }
                    else {
                        var temp = '';
                        var diff = colDiff;
                        for (var i = 0; i < cellValues.length; i++) {
                            if (i === cellValues.length - 1) {
                                var val = this.parent.getValueFromArg(cellValues[i]);
                                val = val === '' ? '0' : val;
                                temp = temp + val + '++';
                                valueCollection.push(temp.substring(0, temp.length - 2));
                            }
                            if (i <= diff) {
                                var val = this.parent.getValueFromArg(cellValues[i]);
                                val = val === '' ? '0' : val;
                                temp = temp + val + '++';
                            }
                            else {
                                valueCollection.push(temp.substring(0, temp.length - 2));
                                diff = colDiff + i;
                                var val = this.parent.getValueFromArg(cellValues[i]);
                                val = val === '' ? '0' : val;
                                temp = val + '++';
                            }
                        }
                    }
                }
                else {
                    var temp = '';
                    var diff = colDiff + 1;
                    var rowDiff = endRowIdx - rowIdx;
                    for (var i = 0; i < diff; i++) {
                        for (var j_1 = 0; j_1 <= rowDiff; j_1++) {
                            var val = this.parent.getValueFromArg(cellValues[j_1 * diff + i]);
                            val = val === '' ? '0' : val;
                            temp = temp + val + '++';
                        }
                        valueCollection.push(temp.substring(0, temp.length - 2));
                        temp = '';
                    }
                }
                var uniqueCollection = [];
                var duplicateCollection = [];
                var tmp = [];
                var tmp2 = [];
                for (var i = 0; i < valueCollection.length; i++) {
                    if (uniqueCollection.indexOf(valueCollection[i].toLowerCase()) === -1) {
                        uniqueCollection.push(valueCollection[i].toLowerCase());
                        tmp.push(valueCollection[i]);
                    }
                    else {
                        if (duplicateCollection.indexOf(valueCollection[i].toLowerCase()) === -1) {
                            duplicateCollection.push(valueCollection[i].toLowerCase());
                        }
                        tmp2.push(valueCollection[i]);
                    }
                }
                if (exactlyOne === this.parent.trueValue) {
                    var exactOne = [];
                    for (var i = 0; i < tmp.length; i++) {
                        if (duplicateCollection.indexOf(tmp[i].toLowerCase()) === -1) {
                            exactOne.push(tmp[i]);
                        }
                    }
                    tmp = exactOne;
                    if (tmp.length === 0) {
                        return errCollection[CommonErrors.Calc];
                    }
                }
                if (isComputeExp) {
                    var computeExpResult_1;
                    if (colDiff !== 0) {
                        computeExpResult_1 = [];
                        (tmp).forEach(function (item) {
                            computeExpResult_1 = computeExpResult_1.concat(item.split('++'));
                        });
                    }
                    else {
                        computeExpResult_1 = byColumn === this.parent.falseValue ? tmp : tmp[0].split('++');
                    }
                    return computeExpResult_1;
                }
                if (actCell.indexOf('!') > -1) {
                    actCell = actCell.substring(actCell.lastIndexOf('!') + 1);
                }
                var actRowIdx = this.parent.rowIndex(actCell);
                var actColIdx = this.parent.colIndex(actCell);
                if (this.parent.dependencyLevel === 0) {
                    var isSpill = false;
                    if (byColumn === this.parent.falseValue) {
                        for (var i = actRowIdx, diff = tmp.length + actRowIdx; i < diff; i++) {
                            var splitValue = tmp[0].split('++');
                            for (var j_2 = actColIdx, diff2 = splitValue.length + actColIdx; j_2 < diff2; j_2++) {
                                if (i === diff - 1 && j_2 === diff2 - 1 &&
                                    this.parent.uniqueRange.indexOf(uniqueActCell + ':' + getAlphalabel(j_2) + i) === -1) {
                                    this.parent.uniqueRange.push(uniqueActCell + ':' + getAlphalabel(j_2) + i);
                                }
                                if (this.checkSpill(j_2, i)) {
                                    isSpill = true;
                                }
                            }
                        }
                    }
                    else {
                        for (var i = actColIdx, diff = tmp.length + actColIdx; i < diff; i++) {
                            var splitValue = tmp[0].split('++');
                            for (var j_3 = actRowIdx, diff2 = splitValue.length + actRowIdx; j_3 < diff2; j_3++) {
                                if (i === diff - 1 && j_3 === diff2 - 1 &&
                                    this.parent.uniqueRange.indexOf(this.parent.actCell + ':' + getAlphalabel(i) + j_3) === -1) {
                                    this.parent.uniqueRange.push(this.parent.actCell + ':' + getAlphalabel(i) + j_3);
                                }
                                if (this.checkSpill(i, j_3)) {
                                    isSpill = true;
                                }
                            }
                        }
                    }
                    if (isSpill) {
                        return this.parent.formulaErrorStrings[FormulasErrorsStrings.Spill];
                    }
                }
                else if (this.parent.dependencyLevel > 0 &&
                    this.parent.getValueFromArg(getAlphalabel(actColIdx) + actRowIdx, true).indexOf('#SPILL!') > -1) {
                    return this.parent.formulaErrorStrings[FormulasErrorsStrings.Spill];
                }
                if (byColumn === this.parent.falseValue) {
                    var calcFamily = this.parent.getSheetFamilyItem(this.parent.grid);
                    var token = '';
                    var cellTxt = void 0;
                    if (calcFamily.sheetNameToParentObject !== null && calcFamily.sheetNameToParentObject.size > 0) {
                        token = calcFamily.parentObjectToToken.get(this.parent.grid);
                        cellTxt = token + actCell;
                    }
                    for (var i = 0; i < tmp.length; i++) {
                        var splitValue = tmp[i].split('++');
                        if (i > 0) {
                            actRowIdx++;
                            actColIdx = this.parent.colIndex(actCell);
                        }
                        for (var j_4 = 0; j_4 < splitValue.length; j_4++) {
                            this.setValueRefresh(splitValue[j_4], actRowIdx, actColIdx);
                            if (i > 0 || j_4 > 0) {
                                this.parent.refresh(token + getAlphalabel(actColIdx) + actRowIdx.toString(), cellTxt);
                            }
                            if (splitValue[j_4 + 1]) {
                                actColIdx++;
                            }
                        }
                    }
                    result = tmp[0].split('++')[0];
                }
                else {
                    for (var i = 0; i < tmp.length; i++) {
                        var splitValue = tmp[i].split('++');
                        for (var i_1 = 0; i_1 < splitValue.length; i_1++) {
                            this.setValueRefresh(splitValue[i_1], actRowIdx, actColIdx);
                            if (splitValue[i_1 + 1]) {
                                actRowIdx++;
                            }
                            else {
                                actColIdx++;
                                actRowIdx = this.parent.rowIndex(actCell);
                            }
                        }
                    }
                    result = tmp[0].split('++')[0];
                }
            }
        }
        else if (this.parent.isCellReference(argArr[0])) {
            if (this.parent.dependencyCollection.indexOf(argArr[0]) === -1) {
                if (!isComputeExp) {
                    this.parent.dependencyCollection.push(argArr[0]);
                }
            }
            else {
                this.clearDependency(argArr[0]);
            }
            result = this.parent.getValueFromArg(argArr[0]);
        }
        else {
            result = this.parent.getValueFromArg(argArr[0].trim());
            if (errCollection.indexOf(result) > -1) {
                return result;
            }
            result = this.parent.removeTics(result);
        }
        return result;
    };
    BasicFormulas.prototype.setValueRefresh = function (splitValue, rowIdx, colIdx) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.parent.parentObject.setValueRowCol(this.parent.getSheetId(this.parent.grid), splitValue, rowIdx, colIdx);
    };
    BasicFormulas.prototype.checkSpill = function (i, j) {
        var spill = false;
        var value = this.parent.getValueFromArg(getAlphalabel(i) + j, true);
        var formulaAddress = '!' + this.parent.getSheetID(this.parent.grid) + '!' + getAlphalabel(i) + j;
        var formulaString;
        if (this.parent.getFormulaInfoTable().get(formulaAddress)) {
            formulaString = this.parent.getFormulaInfoTable().get(formulaAddress).formulaText;
        }
        if (value && (value.toUpperCase().indexOf('UNIQUE') < 0 ||
            (formulaString && !formulaString.toUpperCase().includes('UNIQUE'))) &&
            value !== this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments]) {
            spill = true;
        }
        return spill;
    };
    BasicFormulas.prototype.clearDependency = function (value) {
        var actCell = this.parent.actCell;
        var actCellSheetName = '';
        if (actCell.lastIndexOf('!') > -1) {
            var actCellAddr = actCell;
            actCell = actCellAddr.substring(actCellAddr.lastIndexOf('!') + 1);
            actCellSheetName = actCellAddr.substring(0, actCellAddr.lastIndexOf('!')) + '!';
        }
        var actRowIdx = this.parent.rowIndex(actCell);
        var actColIdx = this.parent.colIndex(actCell);
        var j = value.indexOf(':');
        var rowIndex = this.parent.rowIndex(this.parent.substring(value, 0, j));
        var colIndex = this.parent.colIndex(this.parent.substring(value, 0, j));
        var eRowIdx = this.parent.rowIndex(this.parent.substring(value, j + 1, j + value.length - j - 1));
        var eColIdx = this.parent.colIndex(this.parent.substring(value, j + 1, j + value.length - j - 1));
        var rowDiff = eRowIdx - rowIndex + actRowIdx;
        var colDiff = eColIdx - colIndex + actColIdx;
        var formulaText = this.parent.getFormulaInfoTable().get('!' + this.parent.getSheetID(this.parent.grid) + '!' + actCell) ?
            this.parent.getFormulaInfoTable().get('!' + this.parent.getSheetID(this.parent.grid) + '!' + actCell).getFormulaText() : '';
        for (var i = actRowIdx; i <= rowDiff; i++) {
            for (var j_5 = actColIdx; j_5 <= colDiff; j_5++) {
                if (this.parent.dependencyLevel > 0 || formulaText.indexOf('UNIQUE') > -1) {
                    if (this.parent.getValueFromArg('!' + this.parent.getSheetID(this.parent.grid) + '!' +
                        getAlphalabel(actColIdx) + actRowIdx, true).indexOf('#SPILL!') > -1) {
                        return;
                    }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    this.parent.parentObject.setValueRowCol(this.parent.getSheetID(this.parent.grid) + 1, '', i, j_5);
                    this.parent.refresh('!' + this.parent.getSheetID(this.parent.grid) + '!' + getAlphalabel(j_5) + i, actCell);
                    this.parent.actCell = actCellSheetName + actCell;
                }
            }
        }
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string} - Compute the text or null value.
     */
    BasicFormulas.prototype.ComputeT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        var nestedFormula;
        var errCollection = this.parent.getErrorStrings();
        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {
            nestedFormula = true;
            args.pop();
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0].trim() === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        value = this.parent.getValueFromArg(args[0]).trim();
        if (errCollection.indexOf(value) > -1) {
            return value;
        }
        if (args[0].indexOf(this.parent.tic) > -1) {
            value = this.parent.removeTics(args[0].trim());
            if (value.indexOf(this.parent.tic + this.parent.tic) > -1) {
                value = value.replace(/""/g, this.parent.tic);
            }
        }
        else {
            if (value.split('%').length === 2 && this.parent.isNumber(value.split('%')[0])) {
                value = (Number(value.split('%')[0]) / 100).toString();
            }
            if (this.parent.isNumber(value) ||
                value.toUpperCase() === this.parent.trueValue || value.toUpperCase() === this.parent.falseValue) {
                return '';
            }
        }
        if (nestedFormula) {
            value = this.parent.tic + value + this.parent.tic;
        }
        return value;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the hours.
     */
    BasicFormulas.prototype.ComputeHOUR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length !== 1 || isNullOrUndefined(args) || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        if (args[0].split(this.parent.tic).join('').trim() === '') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        var cellVal;
        if (this.parent.isCellReference(args[0])) {
            cellVal = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';
            if (cellVal.indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            if (args[0].indexOf(this.parent.tic) > -1 && (args[0].split(this.parent.tic).join('') === this.parent.trueValue || args[0].split(this.parent.tic).join('') === this.parent.falseValue)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            cellVal = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        }
        if (this.parent.getErrorStrings().indexOf(cellVal) > -1) {
            return cellVal;
        }
        cellVal = cellVal === this.parent.trueValue ? '1' : (cellVal === this.parent.falseValue ? '0' : cellVal);
        var date;
        if (this.parent.isNumber(cellVal)) {
            if (this.parent.parseFloat(cellVal) < 0 || this.parent.parseFloat(cellVal) > 2958465) {
                return this.parent.getErrorStrings()[CommonErrors.Num];
            }
            date = this.parent.intToTime(cellVal);
        }
        else {
            var dateCheck = { value: cellVal.toString() };
            this.parent.parentObject.notify(checkDateFormat, dateCheck);
            if (dateCheck.isDate || dateCheck.isTime) {
                date = dateCheck.dateObj;
            }
            else {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        if (date.toString() === 'Invalid Date') {
            date = new Date(Date.parse(cellVal));
        }
        if (date.toString() === 'Invalid Date') {
            var argVal = new Date(Date.now()).toLocaleDateString() + ' ' + cellVal;
            date = new Date(Date.parse(argVal));
        }
        if (date.toString() === 'Invalid Date') {
            date = this.parent.fromOADate(this.parent.parseFloat(cellVal));
        }
        if (date.toString() === 'Invalid Date') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if (date.getFullYear() < 1900 || date.getFullYear() > 9999) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        return date.getHours();
    };
    /**
     * @hidden
     * @param {string} argArr - specify the args.
     * @returns {string | boolean} - Compute the hours.
     */
    BasicFormulas.prototype.ComputeMINUTE = function () {
        var argArr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argArr[_i] = arguments[_i];
        }
        if (argArr.length !== 1 || isNullOrUndefined(argArr) || argArr[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        if (argArr[0].split(this.parent.tic).join('').trim() === '') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        var cellVal;
        if (this.parent.isCellReference(argArr[0])) {
            cellVal = this.parent.getValueFromArg(argArr[0].split(this.parent.tic).join('')) || '0';
            if (cellVal.indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            if (argArr[0].indexOf(this.parent.tic) > -1 && (argArr[0].split(this.parent.tic).join('') === this.parent.trueValue || argArr[0].split(this.parent.tic).join('') === this.parent.falseValue)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            cellVal = this.parent.getValueFromArg(argArr[0]).split(this.parent.tic).join('');
        }
        if (this.parent.getErrorStrings().indexOf(cellVal) > -1) {
            return cellVal;
        }
        cellVal = cellVal === this.parent.trueValue ? '1' : (cellVal === this.parent.falseValue ? '0' : cellVal);
        var dateVal;
        if (this.parent.isNumber(cellVal)) {
            if (this.parent.parseFloat(cellVal) < 0 || this.parent.parseFloat(cellVal) > 2958465) {
                return this.parent.getErrorStrings()[CommonErrors.Num];
            }
            dateVal = this.parent.intToTime(cellVal);
        }
        else {
            var dateCheck = { value: cellVal.toString() };
            this.parent.parentObject.notify(checkDateFormat, dateCheck);
            if (dateCheck.isDate || dateCheck.isTime) {
                dateVal = dateCheck.dateObj;
            }
            else {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        if (dateVal.toString() === 'Invalid Date') {
            dateVal = new Date(Date.parse(cellVal));
        }
        if (dateVal.toString() === 'Invalid Date') {
            var argVal = new Date(Date.now()).toLocaleDateString() + ' ' + cellVal;
            dateVal = new Date(Date.parse(argVal));
        }
        if (dateVal.toString() === 'Invalid Date') {
            dateVal = this.parent.fromOADate(this.parent.parseFloat(cellVal));
        }
        if (dateVal.toString() === 'Invalid Date') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if (dateVal.getFullYear() < 1900 || dateVal.getFullYear() > 9999) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        return dateVal.getMinutes();
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the hours.
     */
    BasicFormulas.prototype.ComputeSECOND = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length !== 1 || isNullOrUndefined(args) || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        if (args[0].split(this.parent.tic).join('').trim() === '') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        var cellVal;
        if (this.parent.isCellReference(args[0])) {
            cellVal = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';
            if (cellVal.indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            if (args[0].indexOf(this.parent.tic) > -1 && (args[0].split(this.parent.tic).join('') === this.parent.trueValue || args[0].split(this.parent.tic).join('') === this.parent.falseValue)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            cellVal = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        }
        if (this.parent.getErrorStrings().indexOf(cellVal) > -1) {
            return cellVal;
        }
        cellVal = cellVal === this.parent.trueValue ? '1' : (cellVal === this.parent.falseValue ? '0' : cellVal);
        var dateValue;
        if (this.parent.isNumber(cellVal)) {
            if (this.parent.parseFloat(cellVal) < 0 || this.parent.parseFloat(cellVal) > 2958465) {
                return this.parent.getErrorStrings()[CommonErrors.Num];
            }
            dateValue = this.parent.intToTime(cellVal);
        }
        else {
            var dateCheck = { value: cellVal.toString() };
            this.parent.parentObject.notify(checkDateFormat, dateCheck);
            if (dateCheck.isDate || dateCheck.isTime) {
                dateValue = dateCheck.dateObj;
            }
            else {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        if (dateValue.toString() === 'Invalid Date') {
            dateValue = new Date(Date.parse(cellVal));
        }
        if (dateValue.toString() === 'Invalid Date') {
            var argVal = (new Date(Date.now())).toLocaleDateString() + ' ' + cellVal;
            dateValue = new Date(Date.parse(argVal));
        }
        if (dateValue.toString() === 'Invalid Date') {
            dateValue = this.parent.fromOADate(this.parent.parseFloat(cellVal));
        }
        if (dateValue.toString() === 'Invalid Date') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if (dateValue.getFullYear() < 1900 || dateValue.getFullYear() > 9999) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        return dateValue.getSeconds();
    };
    /**
     * @hidden
     * @param {string} argsVal - specify the args.
     * @returns {string | boolean} - Compute the months.
     */
    BasicFormulas.prototype.ComputeMONTH = function () {
        var argsVal = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argsVal[_i] = arguments[_i];
        }
        var errCollection = this.parent.getErrorStrings();
        if (argsVal.length === 1 && argsVal[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (argsVal.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var value = this.parent.getValueFromArg(argsVal[0]).trim();
        if (errCollection.indexOf(value) > -1) {
            return value;
        }
        if (this.parent.isCellReference(argsVal[0])) {
            if (value.indexOf(this.parent.tic) > -1) {
                return errCollection[CommonErrors.Value];
            }
            else if (value === '') {
                return 1;
            }
        }
        else {
            if (value.toUpperCase() === '"TRUE"' || value.toUpperCase() === '"FALSE"') {
                return errCollection[CommonErrors.Value];
            }
            value = value.split(this.parent.tic).join('');
        }
        if (value === '') {
            return errCollection[CommonErrors.Value];
        }
        else if (value === this.parent.trueValue || value === this.parent.falseValue ||
            (Number(value) > -1 && Number(value) < 32)) {
            return 1;
        }
        else if (Number(value) < 0) {
            return errCollection[CommonErrors.Num];
        }
        else if (value.indexOf('%') > -1) {
            value = (Number(value.split('%')[0]) * 0.01).toString();
        }
        if (this.parent.isNumber(value)) {
            value = parseInt((Math.floor(Number(value)).toString()), 10);
        }
        var date = this.parent.parseDate(value);
        if (date.toString() === 'Invalid Date') {
            if (this.parent.isNumber(value)) {
                return errCollection[CommonErrors.Num];
            }
            else {
                return errCollection[CommonErrors.Value];
            }
        }
        else if ((date.getFullYear() < 1900) || (10000 <= date.getFullYear())) {
            return errCollection[CommonErrors.Num];
        }
        return (date.getMonth() + 1).toString();
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string } - Compute the time and date value.
     */
    BasicFormulas.prototype.ComputeNOW = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length !== 1 || args[0] !== '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var date = new Date(Date.now());
        var intl = new Internationalization();
        var dFormatter = intl.getDateFormat({ format: 'M/d/yyyy h:mm:ss a' });
        var dt = this.parent.parentObject.dateToInt(dFormatter(date), true);
        return dt.toString();
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the exact value or not.
     */
    BasicFormulas.prototype.ComputeEXACT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var result = false;
        var nestedFormula = args.length && args[args.length - 1] === 'nestedFormulaTrue';
        var errCollection = this.parent.getErrorStrings();
        if (nestedFormula) {
            args.pop();
        }
        if (!args || (!args[0] && args.length === 1)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var value1;
        var value2;
        var isCellRef;
        if (args[0]) {
            value1 = this.parent.getValueFromArg(args[0]);
            if (errCollection.indexOf(value1) > -1) {
                return value1;
            }
            if (value1.indexOf(this.parent.tic) === -1 && value1.includes('%')) {
                value1 = (Number(value1.split('%')[0]) / 100).toString();
            }
            if (this.parent.isCellReference(args[0])) {
                isCellRef = true;
            }
            else {
                value1 = value1.split(this.parent.tic).join('');
            }
        }
        if (args[1]) {
            value2 = this.parent.getValueFromArg(args[1]);
            if (errCollection.indexOf(value2) > -1) {
                return value2;
            }
            if (value2.indexOf(this.parent.tic) === -1 && value2.includes('%')) {
                value2 = (Number(value2.split('%')[0]) / 100).toString();
            }
            if (this.parent.isCellReference(args[1])) {
                if (!isCellRef && ((value1.trim().length === 0) && (value2.trim().length === 0))) {
                    result = false;
                }
            }
            else {
                value2 = value2.split(this.parent.tic).join('');
                if (isCellRef && ((value1.trim().length === 0) && (value2.trim().length === 0))) {
                    result = false;
                }
            }
        }
        if (value1 === value2) {
            result = true;
            if (nestedFormula) {
                result = this.parent.tic + result + this.parent.tic;
            }
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the exact value or not.
     */
    BasicFormulas.prototype.ComputeLEN = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        var errorStrings = this.parent.getErrorStrings();
        if (isNullOrUndefined(args) || (args[0].trim() === '' && args.length === 1)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        value = this.parent.getValueFromArg(args[0]).trim();
        if (errorStrings.indexOf(value) > -1) {
            return value;
        }
        if (args[0].indexOf(this.parent.tic) > -1) {
            if (args[0] !== value && args[0].startsWith('n')) {
                value = this.parent.removeTics(value.trim());
            }
            else {
                value = this.parent.removeTics(args[0].trim());
                if (value.indexOf(this.parent.tic + this.parent.tic) > -1) {
                    value = value.replace(/""/g, this.parent.tic);
                }
            }
        }
        else if (!args[0].startsWith('n') && value.split('%').length === 2 && this.parent.isNumber(value.split('%')[0])) {
            value = (Number(value.split('%')[0]) / 100).toString();
        }
        return value.length;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the remainder from the given numbers.
     */
    BasicFormulas.prototype.ComputeMOD = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        if (isNullOrUndefined(args) || args.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        if (args[1] === '' && !args[0].includes('"')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.Div];
        }
        else if (args[0] === '' && !args[1].includes('"')) {
            return 0;
        }
        for (var i = 0; i < args.length; i++) {
            var argVal = args[i].split(this.parent.tic).join('').trim();
            if (argVal === '' || (args[i].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            if (isCellReference(args[i])) {
                value = this.parent.getValueFromArg(args[i]) || '0';
                value = (value === this.parent.trueValue) ? '1' : (value === this.parent.falseValue) ? '0' : value;
                if (value.toUpperCase().match(/[A-Z]/) || value.includes('"') || !this.parent.isNumber(value)) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
            }
            else {
                value = this.parent.getValueFromArg(args[i].split(this.parent.tic).join(''));
                value = (value === this.parent.trueValue) ? '1' : (value === this.parent.falseValue) ? '0' : value;
                if (this.parent.getErrorStrings().indexOf(value) > -1) {
                    return value;
                }
            }
            args[i] = value;
        }
        var value1 = args[0];
        var value2 = args[1];
        if (value2 === '0' || value2 === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.Div];
        }
        else if (value1 === '0' || value1 === '') {
            return 0;
        }
        value1 = parseFloat(value1);
        value2 = parseFloat(value2);
        var result = ((value1 % value2) + value2) % value2;
        if (isNaN(result)) {
            return this.parent.getErrorStrings()[CommonErrors.Name];
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the next odd number.
     */
    BasicFormulas.prototype.ComputeODD = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || args.length !== 1 || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var argVal = args[0].split(this.parent.tic).join('').trim();
        if (argVal === '' || (args[0].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        var val;
        if (isCellReference(args[0])) {
            val = this.parent.getValueFromArg(args[0]);
            if (val === this.parent.trueValue) {
                val = '1';
            }
            else if (val === '' || val === this.parent.falseValue) {
                val = '0';
            }
            else if (val.toUpperCase().match(/[A-Z]/) || val.includes('"') || !this.parent.isNumber(val)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            val = this.parent.getValueFromArg(args[0].split(this.parent.tic).join(''));
            if (val === '#NAME?') {
                return this.parent.getErrorStrings()[CommonErrors.Name];
            }
            if (val === this.parent.trueValue) {
                val = '1';
            }
            else if (val === '' || val === this.parent.falseValue) {
                val = '0';
            }
            else if (val.toUpperCase().match(/[A-Z]/) || !this.parent.isNumber(val)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        var result = Math.ceil(parseInt(val, 10));
        var isOne = result === 0;
        result = result % 2 === 0 ? (result > 0 ? result + 1 : result - 1) : result;
        if (Math.ceil(parseInt(val, 10)) % 2 !== 0) {
            if (parseInt(val, 10) > 0 && parseFloat(val) > parseInt(val, 10)) {
                result = result + 2;
            }
            else if (parseInt(val, 10) < 0 && parseFloat(val) < parseInt(val, 10)) {
                result = result - 2;
            }
        }
        if (isNaN(result)) {
            return this.parent.getErrorStrings()[CommonErrors.Name];
        }
        return isOne ? 1 : result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the next even number.
     */
    BasicFormulas.prototype.ComputeEVEN = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || args.length !== 1 || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var argVal = args[0].split(this.parent.tic).join('').trim();
        if (argVal === '' || (args[0].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        var value1;
        if (isCellReference(args[0])) {
            value1 = this.parent.getValueFromArg(args[0]);
            if (value1 === this.parent.trueValue) {
                value1 = '1';
            }
            else if (value1 === '' || value1 === this.parent.falseValue) {
                value1 = '0';
            }
            else if (value1.toUpperCase().match(/[A-Z]/) || value1.includes('"') || !this.parent.isNumber(value1)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            value1 = this.parent.getValueFromArg(args[0].split(this.parent.tic).join(''));
            if (value1 === '#NAME?') {
                return this.parent.getErrorStrings()[CommonErrors.Name];
            }
            if (value1 === this.parent.trueValue) {
                value1 = '1';
            }
            else if (value1 === '' || value1 === this.parent.falseValue) {
                value1 = '0';
            }
            else if (value1.toUpperCase().match(/[A-Z]/) || !this.parent.isNumber(value1)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        var result = Math.ceil(parseInt(value1, 10));
        result = result % 2 === 0 ? result : (result > 0 ? result + 1 : result - 1);
        if (Math.ceil(parseInt(value1, 10)) % 2 === 0) {
            if (parseInt(value1, 10) > 0 && parseFloat(value1) > parseInt(value1, 10)) {
                result = result + 2;
            }
            else if (parseInt(value1, 10) < 0 && parseFloat(value1) < parseInt(value1, 10)) {
                result = result - 2;
            }
        }
        if (isNaN(result)) {
            return this.parent.getErrorStrings()[CommonErrors.Name];
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the value of pi.
     */
    BasicFormulas.prototype.ComputePI = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var result;
        if (args && args[0] !== '') {
            result = this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else {
            result = Math.PI;
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the median value.
     */
    BasicFormulas.prototype.ComputeMEDIAN = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value1;
        var num = [];
        if (isNullOrUndefined(args) || args[0] === '' && args.length === 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        for (var i = 0; i < args.length; i++) {
            if (this.parent.isCellReference(args[i])) {
                if (args[i].indexOf(':') > -1) {
                    var cellCollection = this.parent.getCellCollection(args[i]);
                    for (var a = 0; a < cellCollection.length; a++) {
                        var cellValue = this.parent.getValueFromArg(cellCollection[a]);
                        if (this.parent.getErrorStrings().indexOf(cellValue) > -1) {
                            return cellValue;
                        }
                        else if (cellValue.trim() !== '') {
                            num.push(this.parent.parseFloat(cellValue));
                        }
                    }
                }
                else {
                    var cellVal = this.parent.getValueFromArg(args[i]);
                    if (this.parent.getErrorStrings().indexOf(cellVal) > -1) {
                        return cellVal;
                    }
                    else if (cellVal.trim() !== '') {
                        num.push(this.parent.parseFloat(cellVal));
                    }
                }
            }
            else if (args[i] === '' || args[i] === this.parent.falseValue && !this.parent.isCellReference(args[i])) {
                num.push(0);
            }
            else if (args[i] === this.parent.trueValue && !this.parent.isCellReference(args[i])) {
                num.push(1);
            }
            else if (args[i].indexOf(this.parent.tic) > -1 && isNaN(parseFloat(args[i].split(this.parent.tic).join('')))) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            else {
                var cValue = this.parent.getValueFromArg(args[i]).split(this.parent.tic).join('');
                if (this.parent.getErrorStrings().indexOf(cValue) > -1) {
                    return cValue;
                }
                else {
                    num.push(this.parent.parseFloat(cValue));
                }
            }
        }
        num = num.sort(function (n1, n2) { return n1 - n2; });
        var len = num.length;
        for (var j = 0; j < len; j++) {
            if (isNaN(num[j])) {
                num.splice(j, 1);
                len = num.length;
                j--;
                if (num.length === 0) {
                    break;
                }
            }
        }
        if (num.length % 2 !== 0 && !isNaN(num[parseInt((num.length / 2).toString(), 10)])) {
            value1 = num[parseInt((num.length / 2).toString(), 10)];
        }
        else if (!isNaN(num[num.length / 2]) && !isNaN(num[num.length / 2 - 1])) {
            value1 = (num[num.length / 2] + num[num.length / 2 - 1]) / 2;
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.Num];
        }
        return value1;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the edate value.
     */
    BasicFormulas.prototype.ComputeEDATE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length !== 2 || isNullOrUndefined(args)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        if (args[0] === '' || args[1] === '') {
            return this.parent.getErrorStrings()[CommonErrors.NA];
        }
        if (args[0].split(this.parent.tic).join('') === '' || args[1].split(this.parent.tic).join('') === ''
            || (args[1].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(args[1].split(this.parent.tic).join(''))))) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        var dValue;
        var mValue;
        if (this.parent.isCellReference(args[0])) {
            if (args[0].indexOf(':') > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            dValue = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';
            if (dValue.indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            dValue = this.parent.getValueFromArg(args[0].split(this.parent.tic).join(''));
        }
        if (this.parent.isCellReference(args[1])) {
            if (args[1].indexOf(':') > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            mValue = this.parent.getValueFromArg(args[1].split(this.parent.tic).join('')) || '0';
        }
        else {
            mValue = this.parent.getValueFromArg(args[1].split(this.parent.tic).join(''));
        }
        if (this.parent.getErrorStrings().indexOf(mValue) > -1) {
            return mValue;
        }
        mValue = parseInt(mValue, 10);
        var date;
        if (this.parent.isNumber(dValue)) {
            dValue = parseInt(dValue, 10);
            if (dValue < 0 || dValue > 2958465) {
                return this.parent.getErrorStrings()[CommonErrors.Num];
            }
            date = this.parent.fromOADate(dValue);
        }
        else {
            date = this.parent.checkDateFormat(dValue);
        }
        if (isNaN(mValue) || isNullOrUndefined(this.parent.isDate(date)) || date.getFullYear() > 9999) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        var checkDate = date.getDate();
        date.setMonth(date.getMonth() + mValue);
        if (checkDate !== date.getDate()) {
            date.setDate(0);
            //For the date like 31st of January and mValue as 1, the setMonth returns 3rd of March, so we using setDate(0) to return 28th of February.
        }
        var result = this.parent.parentObject.dateToInt(date);
        // For 0 and 1 values we are considering the same starting date as 1/1/1900, so for 0 we are decrementing the value with 1.
        if (dValue.toString() === '0') {
            result -= 1;
        }
        if (result < 0 || result > 2958465) {
            return this.parent.getErrorStrings()[CommonErrors.Num];
        }
        return result.toString();
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the number of months value.
     */
    BasicFormulas.prototype.ComputeEOMONTH = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length !== 2 || isNullOrUndefined(args)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        if (args[0] === '' || args[1] === '') {
            return this.parent.getErrorStrings()[CommonErrors.NA];
        }
        if (args[0].split(this.parent.tic).join('') === '' || args[1].split(this.parent.tic).join('') === ''
            || (args[1].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(args[1].split(this.parent.tic).join(''))))) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        var dateValue;
        var monthValue;
        if (this.parent.isCellReference(args[0])) {
            if (args[0].indexOf(':') > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            dateValue = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';
            if (dateValue.indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            dateValue = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        }
        if (this.parent.getErrorStrings().indexOf(dateValue) > -1) {
            return dateValue;
        }
        if (this.parent.isCellReference(args[1])) {
            if (args[1].indexOf(':') > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            monthValue = this.parent.getValueFromArg(args[1].split(this.parent.tic).join('')) || '0';
        }
        else {
            monthValue = this.parent.getValueFromArg(args[1].split(this.parent.tic).join(''));
        }
        if (this.parent.getErrorStrings().indexOf(monthValue) > -1) {
            return monthValue;
        }
        monthValue = parseInt(monthValue, 10);
        var date;
        if (this.parent.isNumber(dateValue)) {
            dateValue = parseInt(dateValue, 10);
            if (dateValue < 0 || dateValue > 2958465) {
                return this.parent.getErrorStrings()[CommonErrors.Num];
            }
            date = this.parent.fromOADate(dateValue);
        }
        else {
            date = this.parent.checkDateFormat(dateValue);
        }
        if (isNaN(monthValue) || isNullOrUndefined(this.parent.isDate(date)) || date.getFullYear() > 9999) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        date = new Date(date.getFullYear(), date.getMonth() + (monthValue + 1), 0);
        var result = this.parent.parentObject.dateToInt(date);
        if (result < 0 || result > 2958465 || date.getFullYear() < 1900) {
            return this.parent.getErrorStrings()[CommonErrors.Num];
        }
        return result.toString();
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the date value.
     */
    BasicFormulas.prototype.ComputeDATEVALUE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var dValue;
        var errCollection = this.parent.getErrorStrings();
        if (args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        dValue = this.parent.getValueFromArg(args[0]) || '0';
        if (errCollection.indexOf(dValue) > -1) {
            return dValue;
        }
        if (this.parent.isCellReference(args[0])) {
            if ((args[0].indexOf(':') > -1) || dValue.startsWith(this.parent.tic)) {
                return errCollection[CommonErrors.Value];
            }
        }
        else {
            dValue = (args[0]).split(this.parent.tic).join('') || '0';
        }
        if (!(!(this.parent.isNumber(dValue)) && !isNullOrUndefined(this.parent.isDate(dValue)))) {
            return errCollection[CommonErrors.Value];
        }
        var date = this.parent.parseDate(dValue);
        if (errCollection.indexOf(dValue) > -1) {
            return dValue;
        }
        else if (isNullOrUndefined(date) || date.toString() === 'Invalid Date' ||
            date.getFullYear() < 1900 || date.getFullYear() > 9999) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        else {
            dValue = this.parent.toOADate(date).toString();
        }
        return parseFloat(dValue).toFixed(0).toString();
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the count blank value.
     */
    BasicFormulas.prototype.ComputeCOUNTBLANK = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var result = 0;
        if (args.length !== 1 || isNullOrUndefined(args) || !this.parent.isCellReference(args[0])) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args[0] === '') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        else {
            var cellRange = this.parent.getCellCollection(args[0]);
            for (var i = 0; i < cellRange.length; i++) {
                if (this.parent.getValueFromArg(cellRange[i]) === '') {
                    result++;
                }
            }
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the factorial value.
     */
    BasicFormulas.prototype.ComputeFACT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var fact = 1;
        var errCollection = this.parent.getErrorStrings();
        if (args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var getValue = args[0];
        if (this.parent.isCellReference(args[0]) || isNaN(Number(getValue.split(this.parent.tic).join('')))) {
            getValue = this.parent.getValueFromArg(args[0]);
            if (errCollection.indexOf(getValue) > -1) {
                return getValue;
            }
            if (getValue.startsWith(this.parent.tic) ||
                getValue.match(/^(\d*\.\d+|\d+)\s*[+\-*/]\s*(\d*\.\d+|\d+)$/)) {
                return errCollection[CommonErrors.Value];
            }
            else if (getValue === '') {
                return 1;
            }
        }
        getValue = getValue.split(this.parent.tic).join('').trim();
        if (errCollection.indexOf(getValue) > -1) {
            return getValue;
        }
        if (getValue.toUpperCase() === this.parent.trueValue || getValue.toUpperCase() === this.parent.falseValue) {
            return 1;
        }
        if (getValue.indexOf('%') > -1) {
            getValue = (Number(getValue.split('%')[0]) / 100).toString();
        }
        var value = parseInt(getValue, 10);
        if ((value < 0) || (value > 170)) {
            return errCollection[CommonErrors.Num];
        }
        else if (getValue.toUpperCase().match(/[A-Z]/) || getValue === '') {
            return errCollection[CommonErrors.Value];
        }
        else if (getValue.indexOf(':') > -1) {
            return 0;
        }
        for (var i = 1; i <= value; i++) {
            fact = fact * i;
        }
        return fact;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the decimal value.
     */
    BasicFormulas.prototype.ComputeDECIMAL = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        var specialChars = /[@#$%^&*()?:{}|<>+-]/g;
        if (isNullOrUndefined(args) || args.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args[0].match(specialChars)) {
            return this.parent.getErrorStrings()[CommonErrors.Num];
        }
        else if (args[1].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(args[1].split(this.parent.tic).join('')))) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        else {
            var val = void 0;
            var val1 = void 0;
            if (this.parent.isCellReference(args[0].toString())) {
                val = this.parent.getValueFromArg(args[0]);
            }
            else {
                val = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
            }
            if (this.parent.isCellReference(args[1].toString())) {
                val1 = this.parent.getValueFromArg(args[1]);
            }
            else {
                val1 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
            }
            var num = parseInt(val, 10);
            var radix = parseInt(val1, 10);
            if (this.parent.getErrorStrings().indexOf(val) > -1) {
                return val;
            }
            else if (this.parent.getErrorStrings().indexOf(val1) > -1) {
                return val1;
            }
            else if (val === '' && val1 !== '') {
                return 0;
            }
            else if (val === '' || (num < 0) || (!isNaN(num) && !Number.isInteger(parseFloat(val)))) {
                return this.parent.getErrorStrings()[CommonErrors.Num];
            }
            else if (val1 === '' || (radix < 2 || radix > 36) || isNaN(radix)) {
                return this.parent.getErrorStrings()[CommonErrors.Num];
            }
            else if (isNaN(this.parent.parseFloat(val)) && this.parent.parseFloat(val1) <= 10) {
                return this.parent.getErrorStrings()[CommonErrors.Num];
            }
            value = parseInt(val, parseInt(val1, 10));
        }
        return isNaN(value) ? this.parent.getErrorStrings()[CommonErrors.Num] : value;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the degrees value.
     */
    BasicFormulas.prototype.ComputeDEGREES = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(args) || (args[0] === '' && args.length === 1)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var val = this.parent.getValueFromArg(args[0]).trim();
        if (errCollection.indexOf(val) > -1) {
            return val;
        }
        if (this.parent.isCellReference(args[0])) {
            if (val === '' || val.indexOf(':') > -1) {
                return 0;
            }
            else if (val.indexOf(this.parent.tic) > -1 || (isNaN(Number(val)) && !isNaN(parseInt(val, 10)))) {
                return errCollection[CommonErrors.Value];
            }
        }
        else if (val.indexOf('"TRUE"') > -1) {
            return errCollection[CommonErrors.Value];
        }
        val = val.split(this.parent.tic).join('');
        if (val.toUpperCase() === this.parent.trueValue) {
            val = '1';
        }
        else if (val.toUpperCase() === this.parent.falseValue) {
            val = '0';
        }
        else if (val.indexOf('%') > -1) {
            val = (Number(val.split('%')[0]) / 100).toString();
        }
        else if (val.toUpperCase().match(/[A-Z]/) || isNaN(parseInt(val, 10))) {
            return errCollection[CommonErrors.Value];
        }
        return parseFloat(val) * (180 / (Math.PI));
    };
    /**
     * @hidden
     * @param {string} argArr - specify the args.
     * @returns {string | boolean} - Compute the cell address.
     */
    BasicFormulas.prototype.ComputeADDRESS = function () {
        var _this = this;
        var argArr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argArr[_i] = arguments[_i];
        }
        var value;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(argArr) || (argArr.length === 1 && argArr[0].trim() === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (argArr.length < 2 || argArr.length > 5) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        else if (argArr[0].split(this.parent.tic).join('').trim() === '' || argArr[1].split(this.parent.tic).join('').trim() === '') {
            return errCollection[CommonErrors.Value];
        }
        var processArgs = function (actualValue) {
            var value = _this.parent.getValueFromArg(actualValue).trim();
            if (errCollection.indexOf(value) > 0) {
                return value;
            }
            if (value.toUpperCase() === _this.parent.trueValue) {
                value = '1';
            }
            else if (value.toUpperCase() === _this.parent.falseValue) {
                value = '0';
            }
            if (_this.parent.isCellReference(actualValue) && value.indexOf(_this.parent.tic) > -1) {
                return errCollection[CommonErrors.Value];
            }
            value = _this.parent.removeTics(value);
            if (value.split('%').length === 2 && _this.parent.isNumber(value.split('%')[0])) {
                value = (Number(value.split('%')[0]) / 100).toString();
            }
            return value;
        };
        /* For argArr[0] */
        var rowIndex = processArgs(argArr[0]);
        if (errCollection.indexOf(rowIndex) > 0) {
            return rowIndex;
        }
        rowIndex = Number(rowIndex);
        if (isNaN(rowIndex) || rowIndex < 1) {
            return errCollection[CommonErrors.Value];
        }
        else {
            rowIndex = rowIndex.toString();
        }
        /* For argArr[1] */
        var colIndex = processArgs(argArr[1]);
        if (errCollection.indexOf(colIndex) > 0) {
            return colIndex;
        }
        colIndex = Number(colIndex);
        if (isNaN(colIndex) || colIndex < 1) {
            return errCollection[CommonErrors.Value];
        }
        else {
            colIndex = colIndex.toString();
        }
        /* For argArr[2] */
        var absIndex;
        var refStyle;
        if (isNullOrUndefined(argArr[2]) || argArr[2].trim() === '') {
            absIndex = '1';
        }
        else {
            absIndex = processArgs(argArr[2]);
            if (errCollection.indexOf(absIndex) > 0) {
                return absIndex;
            }
            absIndex = Number(absIndex);
            if (isNaN(absIndex) || absIndex < 1 || absIndex > 4) {
                return errCollection[CommonErrors.Value];
            }
            else {
                absIndex = absIndex.toString();
            }
        }
        if (isNullOrUndefined(argArr[3]) || argArr[3].trim() === '') {
            refStyle = '1';
        }
        else {
            refStyle = processArgs(argArr[3]);
            if (errCollection.indexOf(refStyle) > 0) {
                return refStyle;
            }
            if (refStyle.toUpperCase() === this.parent.trueValue || Number(refStyle) > 1) {
                refStyle = '1';
            }
            else if (refStyle === '' || refStyle.toUpperCase() === this.parent.falseValue) {
                refStyle = '0';
            }
        }
        if (refStyle === '1') {
            if (absIndex === '1') {
                value = '$' + getAlphalabel(parseInt(colIndex, 10)) + '$' + parseInt(rowIndex, 10);
            }
            else if (absIndex === '2') {
                value = getAlphalabel(parseInt(colIndex, 10)) + '$' + parseInt(rowIndex, 10);
            }
            else if (absIndex === '3') {
                value = '$' + getAlphalabel(parseInt(colIndex, 10)) + parseInt(rowIndex, 10);
            }
            else if (absIndex === '4') {
                value = getAlphalabel(parseInt(colIndex, 10)) + parseInt(rowIndex, 10);
            }
        }
        else if (refStyle === '0') {
            if (absIndex === '1') {
                value = 'R' + parseInt(rowIndex, 10) + 'C' + parseInt(colIndex, 10);
            }
            else if (absIndex === '2') {
                value = 'R' + parseInt(rowIndex, 10) + 'C[' + parseInt(colIndex, 10) + ']';
            }
            else if (absIndex === '3') {
                value = 'R[' + parseInt(rowIndex, 10) + ']C' + parseInt(colIndex, 10);
            }
            else if (absIndex === '4') {
                value = 'R[' + parseInt(rowIndex, 10) + ']C[' + parseInt(colIndex, 10) + ']';
            }
        }
        else {
            return errCollection[CommonErrors.Name];
        }
        var val;
        if (!isNullOrUndefined(argArr[4]) && argArr[4] !== '') {
            val = this.parent.getValueFromArg(argArr[4]).split(this.parent.tic).join('');
            if (errCollection.indexOf(val) > 0) {
                return val;
            }
        }
        if (!isNullOrUndefined(val)) {
            value = val + '!' + value;
        }
        return value;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the time.
     */
    BasicFormulas.prototype.ComputeTIME = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var result;
        if (isNullOrUndefined(args) || args.length !== 3) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        if (args[0].indexOf(this.parent.tic) > -1 && args[0].split(this.parent.tic).join('').trim() === '') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        else if (args[1].indexOf(this.parent.tic) > -1 && args[1].split(this.parent.tic).join('').trim() === '') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        else if (args[2].indexOf(this.parent.tic) > -1 && args[2].split(this.parent.tic).join('').trim() === '') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        var hours;
        var minutes;
        var seconds;
        if (this.parent.isCellReference(args[0])) {
            hours = this.parent.getValueFromArg(args[0].split(this.parent.tic).join('')) || '0';
            if (hours.indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            if (args[0].indexOf(this.parent.tic) > -1 && (args[0].split(this.parent.tic).join('') === this.parent.trueValue || args[0].split(this.parent.tic).join('') === this.parent.falseValue)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            hours = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('') || '0';
        }
        if (this.parent.getErrorStrings().indexOf(hours) > -1) {
            return hours;
        }
        if (isNaN(this.parent.parseFloat(hours)) && !(hours === this.parent.trueValue || hours === this.parent.falseValue)) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if (this.parent.isCellReference(args[1])) {
            minutes = this.parent.getValueFromArg(args[1].split(this.parent.tic).join('')) || '0';
            if (minutes.indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            if (args[1].indexOf(this.parent.tic) > -1 && (args[1].split(this.parent.tic).join('') === this.parent.trueValue || args[1].split(this.parent.tic).join('') === this.parent.falseValue)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            minutes = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('') || '0';
        }
        if (this.parent.getErrorStrings().indexOf(minutes) > -1) {
            return minutes;
        }
        if (isNaN(this.parent.parseFloat(minutes)) && !(minutes === this.parent.trueValue || minutes === this.parent.falseValue)) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if (this.parent.isCellReference(args[2])) {
            seconds = this.parent.getValueFromArg(args[2].split(this.parent.tic).join('')) || '0';
            if (seconds.indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            if (args[2].indexOf(this.parent.tic) > -1 && (args[2].split(this.parent.tic).join('') === this.parent.trueValue || args[2].split(this.parent.tic).join('') === this.parent.falseValue)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            seconds = this.parent.getValueFromArg(args[2]).split(this.parent.tic).join('') || '0';
        }
        if (this.parent.getErrorStrings().indexOf(seconds) > -1) {
            return seconds;
        }
        if (isNaN(this.parent.parseFloat(seconds)) && !(seconds === this.parent.trueValue || seconds === this.parent.falseValue)) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        hours = hours === this.parent.trueValue ? '1' : (hours === this.parent.falseValue ? '0' : hours);
        minutes = minutes === this.parent.trueValue ? '1' : (minutes === this.parent.falseValue ? '0' : minutes);
        seconds = seconds === this.parent.trueValue ? '1' : (seconds === this.parent.falseValue ? '0' : seconds);
        hours = parseInt(this.parent.parseFloat(hours).toString(), 10);
        minutes = parseInt(this.parent.parseFloat(minutes).toString(), 10);
        seconds = parseInt(this.parent.parseFloat(seconds).toString(), 10);
        if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if (hours > 32767 || minutes > 32767 || seconds > 32767) {
            return this.parent.getErrorStrings()[CommonErrors.Num];
        }
        var value = new Date(1900, 0, 1, hours, minutes, seconds);
        if (value.getFullYear() < 1900) {
            return this.parent.getErrorStrings()[CommonErrors.Num];
        }
        var hh = value.getHours();
        var m = value.getMinutes();
        var s = value.getSeconds();
        var dd = 'AM';
        var h = hh;
        if (h >= 12) {
            h = hh - 12;
            dd = 'PM';
        }
        if (h === 0) {
            h = 12;
        }
        m = m < 10 ? '0' + m : m;
        s = s < 10 ? '0' + s : s;
        h = h < 10 ? '0' + h : h;
        result = h + ':' + m + ':' + s + ' ' + dd;
        var timeCheck = { value: result.toString() };
        this.parent.parentObject.notify(checkDateFormat, timeCheck);
        if (timeCheck.isTime) {
            result = timeCheck.updatedVal;
        }
        return result;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the char value.
     */
    BasicFormulas.prototype.ComputeCHAR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(args) || args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var val = this.parent.getValueFromArg(args[0]).trim();
        if (errCollection.indexOf(val) > -1) {
            return val;
        }
        else if (val.indexOf('"TRUE"') > -1 || (this.parent.isCellReference(args[0]) &&
            val.startsWith(this.parent.tic))) {
            return errCollection[CommonErrors.Value];
        }
        val = val.split(this.parent.tic).join('');
        if (this.parent.isNumber(val)) {
            val = Math.floor(Number(val)).toString();
        }
        else if (val.indexOf('%') > -1) {
            val = Math.floor(Number(val.split('%')[0]) / 100).toString();
        }
        else if (val === this.parent.trueValue) {
            val = '1';
        }
        if (val.toUpperCase().match(/^[0-9]+$/)) {
            var char = parseInt(val, 10);
            if (char > 255 || char <= 0) {
                return errCollection[CommonErrors.Value];
            }
            value = String.fromCharCode(char);
        }
        else {
            return errCollection[CommonErrors.Value];
        }
        return value;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the code value.
     */
    BasicFormulas.prototype.ComputeCODE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(args) || (args.length === 1 && args[0].trim() === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        value = this.parent.getValueFromArg(args[0]).trim();
        if (errCollection.indexOf(value) > -1) {
            return value;
        }
        if (args[0].indexOf(this.parent.tic) > -1) {
            if (args[0] !== value && args[0].startsWith('n')) {
                value = this.parent.removeTics(value.trim());
            }
            else {
                value = this.parent.removeTics(args[0].trim());
            }
        }
        else if (!args[0].startsWith('n') && value.split('%').length === 2 && this.parent.isNumber(value.split('%')[0])) {
            value = (Number(value.split('%')[0]) / 100).toString();
        }
        if (value !== '') {
            value = value.charCodeAt(0);
        }
        else {
            return errCollection[CommonErrors.Value];
        }
        return value;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the currency value.
     */
    BasicFormulas.prototype.ComputeDOLLAR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        var isEmpty;
        var nestedFormula;
        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {
            nestedFormula = true;
            args.pop();
        }
        if (args.length === 1) {
            if (args[0] === '') {
                isEmpty = true;
            }
            args.push('2');
        }
        if (isNullOrUndefined(args) || args.length !== 2 || isEmpty) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        for (var i = 0; i < args.length; i++) {
            if (args[i].indexOf(this.parent.tic) > -1) {
                if (isNaN(this.parent.parseFloat(args[i]))) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
            }
        }
        var val = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
        var val2 = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
        val = val === '' || val === this.parent.falseValue ? '0' : val === this.parent.trueValue ? '1' : val;
        val2 = val2 === '' || val2 === this.parent.falseValue ? '0' : val2 === this.parent.trueValue ? '1' : val2;
        if (val === '#NAME?' || val2 === '#NAME?') {
            return this.parent.getErrorStrings()[CommonErrors.Name];
        }
        if (val.toUpperCase().match(/^[-]?[0-9.]+$/) && val2.toUpperCase().match(/^[-]?[0-9.]+$/)) {
            var intl = new Internationalization();
            var decimalCount = parseInt(val2, 10);
            var divisor = Math.pow(10, -1 * decimalCount);
            var decimalValue = '';
            for (var decimalIdx = 1; decimalIdx <= decimalCount; decimalIdx++) {
                decimalValue += '0';
            }
            var roundedNumber = Math.round(this.parent.parseFloat(val) / divisor) * divisor;
            if (!isNaN(roundedNumber)) {
                value = intl.formatNumber(roundedNumber, { format: '$#,##0.' + decimalValue + ';($#,##0.' + decimalValue + ');$0.' + decimalValue });
            }
            else {
                value = this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if (nestedFormula) {
            value = this.parent.tic + value + this.parent.tic;
        }
        return value;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the k-th smallest value.
     */
    BasicFormulas.prototype.ComputeSMALL = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(args) || args.length === 1 || args[0] === '') {
            if ((args[0] === '') && (args[1] === '')) {
                return errCollection[CommonErrors.Num];
            }
            else {
                return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
            }
        }
        else if (args.length > 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var cellCollection = [];
        var valueCollection = [];
        var numArr = [];
        if (!isNullOrUndefined(args[0])) {
            var originalValue = void 0;
            if (this.parent.isCellReference(args[0])) {
                cellCollection = this.parent.getCellCollection(args[0]);
                for (var i = 0; i < cellCollection.length; i++) {
                    originalValue = this.parent.getValueFromArg(cellCollection[i]);
                    if (errCollection.indexOf(originalValue) > -1) {
                        return originalValue;
                    }
                    valueCollection.push(originalValue);
                }
            }
            else {
                originalValue = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
                if (errCollection.indexOf(originalValue) > -1) {
                    return originalValue;
                }
                valueCollection.push(originalValue);
            }
            for (var i = 0; i < valueCollection.length; i++) {
                if (valueCollection[i] !== '' && !isNaN(this.parent.parseFloat(valueCollection[i]))) {
                    numArr.push(this.parent.parseFloat(valueCollection[i]));
                }
            }
            if (numArr.length === 0) {
                if (isNullOrUndefined(valueCollection[0]) || args[0].indexOf(this.parent.tic) > -1) {
                    return errCollection[CommonErrors.Value];
                }
            }
        }
        numArr = numArr.sort(function (n1, n2) { return n1 - n2; });
        var smallIndex;
        if (!isNullOrUndefined(args[1])) {
            if (this.parent.isCellReference(args[1])) {
                smallIndex = this.parent.getValueFromArg(args[1]);
                if (smallIndex === '') {
                    return errCollection[CommonErrors.Num];
                }
                else if (smallIndex.trim() === '') {
                    return errCollection[CommonErrors.Value];
                }
                if (smallIndex.toUpperCase() === this.parent.trueValue) {
                    smallIndex = '1';
                }
                else if (smallIndex.toUpperCase() === this.parent.falseValue) {
                    smallIndex = '0';
                }
            }
            else {
                smallIndex = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
            }
            if (errCollection.indexOf(smallIndex) > -1) {
                return smallIndex;
            }
            else if (smallIndex.trim() === '') {
                return args[1].length > 0 ? errCollection[CommonErrors.Value] : errCollection[CommonErrors.Num];
            }
            else if (isNaN(this.parent.parseFloat(smallIndex))) {
                if (args[1].toUpperCase() === this.parent.trueValue) {
                    smallIndex = '1';
                }
                else if (args[1].toUpperCase() === this.parent.falseValue) {
                    smallIndex = '0';
                }
                else {
                    return errCollection[CommonErrors.Value];
                }
            }
        }
        var finalIndex = (Number(smallIndex) < 1 ? 0 : Math.floor(Number(smallIndex)));
        if (isNullOrUndefined(numArr[finalIndex - 1]) && !isNaN(Number(finalIndex))) {
            return errCollection[CommonErrors.Num];
        }
        else {
            value = numArr[finalIndex - 1];
        }
        return value;
    };
    /**
     * @hidden
     * @param {string} args - specify the args.
     * @returns {string | boolean} - Compute the k-th largest value.
     */
    BasicFormulas.prototype.ComputeLARGE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var value;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(args) || args.length === 1 || args[0] === '') {
            if ((args[0] === '') && (args[1] === '')) {
                return errCollection[CommonErrors.Num];
            }
            else {
                return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
            }
        }
        else if (args.length > 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var cellCollection = [];
        var valueCollection = [];
        var numArr = [];
        if (!isNullOrUndefined(args[0])) {
            var originalValue = void 0;
            if (this.parent.isCellReference(args[0])) {
                cellCollection = this.parent.getCellCollection(args[0]);
                for (var i = 0; i < cellCollection.length; i++) {
                    originalValue = this.parent.getValueFromArg(cellCollection[i]);
                    if (errCollection.indexOf(originalValue) > -1) {
                        return originalValue;
                    }
                    valueCollection.push(originalValue);
                }
            }
            else {
                originalValue = this.parent.getValueFromArg(args[0]).split(this.parent.tic).join('');
                if (errCollection.indexOf(originalValue) > -1) {
                    return originalValue;
                }
                valueCollection.push(originalValue);
            }
            for (var i = 0; i < valueCollection.length; i++) {
                if (valueCollection[i] !== '' && !isNaN(this.parent.parseFloat(valueCollection[i]))) {
                    numArr.push(this.parent.parseFloat(valueCollection[i]));
                }
            }
            if (numArr.length === 0) {
                if (isNullOrUndefined(valueCollection[0]) || args[0].indexOf(this.parent.tic) > -1) {
                    return errCollection[CommonErrors.Value];
                }
            }
        }
        numArr = numArr.sort(function (n1, n2) { return n2 - n1; });
        var largeIndex;
        if (!isNullOrUndefined(args[1])) {
            if (this.parent.isCellReference(args[1])) {
                largeIndex = this.parent.getValueFromArg(args[1]);
                if (largeIndex === '') {
                    return errCollection[CommonErrors.Num];
                }
                else if (largeIndex.trim() === '') {
                    return errCollection[CommonErrors.Value];
                }
                if (largeIndex.toUpperCase() === this.parent.trueValue) {
                    largeIndex = '1';
                }
                else if (largeIndex.toUpperCase() === this.parent.falseValue) {
                    largeIndex = '0';
                }
            }
            else {
                largeIndex = this.parent.getValueFromArg(args[1]).split(this.parent.tic).join('');
            }
            if (errCollection.indexOf(largeIndex) > -1) {
                return largeIndex;
            }
            else if (largeIndex.trim() === '') {
                return args[1].length > 0 ? errCollection[CommonErrors.Value] : errCollection[CommonErrors.Num];
            }
            else if (isNaN(this.parent.parseFloat(largeIndex))) {
                if (args[1].toUpperCase() === this.parent.trueValue) {
                    largeIndex = '1';
                }
                else if (args[1].toUpperCase() === this.parent.falseValue) {
                    largeIndex = '0';
                }
                else {
                    return errCollection[CommonErrors.Value];
                }
            }
        }
        var finalIndex = (Number(largeIndex) < 1 ? 0 : Math.ceil(Number(largeIndex)));
        if (isNullOrUndefined(numArr[finalIndex - 1]) && !isNaN(Number(finalIndex))) {
            return errCollection[CommonErrors.Num];
        }
        else {
            value = numArr[finalIndex - 1];
        }
        return value;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the Choose value.
     */
    BasicFormulas.prototype.ComputeCHOOSE = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args[0] === '' && args.length === 1)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length < 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var errCollection = this.parent.getErrorStrings();
        var processArgs = function (actuaValue) {
            actuaValue = _this.parent.getValueFromArg(actuaValue);
            if (actuaValue.toUpperCase() === _this.parent.trueValue) {
                actuaValue = '1';
            }
            else if (actuaValue.toUpperCase() === _this.parent.falseValue) {
                actuaValue = '0';
            }
            return actuaValue;
        };
        var getIndexValue;
        getIndexValue = processArgs(args[0]);
        if (errCollection.indexOf(getIndexValue) > -1) {
            return getIndexValue;
        }
        if (this.parent.isCellReference(args[0])) {
            if (args[0].indexOf(':') > -1) {
                return errCollection[CommonErrors.Value];
            }
        }
        else {
            getIndexValue = this.parent.removeTics(getIndexValue);
            if (getIndexValue.split('%').length === 2 && this.parent.isNumber(getIndexValue.split('%')[0])) {
                getIndexValue = (Number(getIndexValue.split('%')[0]) * 0.01).toString();
            }
        }
        getIndexValue = Math.floor(this.parent.parseFloat(getIndexValue));
        if (getIndexValue < 1 || isNaN(getIndexValue) || isNullOrUndefined(args[getIndexValue])) {
            return errCollection[CommonErrors.Value];
        }
        getIndexValue = args[getIndexValue];
        if (getIndexValue === '') {
            getIndexValue = '0';
        }
        if (this.parent.isCellReference(getIndexValue)) {
            if (getIndexValue.indexOf(':') > -1) {
                return errCollection[CommonErrors.Value];
            }
            return this.parent.getValueFromArg(getIndexValue);
        }
        else {
            if (getIndexValue.indexOf(this.parent.tic) > -1 && (errCollection.indexOf(getIndexValue.split(this.parent.tic).join('')) > -1 ||
                (this.parent.removeTics(getIndexValue).match(/^(\d*\.\d+|\d+)\s*[-*/]\s*(\d*\.\d+|\d+)$/)))) {
                getIndexValue = this.parent.removeTics(getIndexValue);
            }
            getIndexValue = this.parent.removeTics(this.parent.getValueFromArg(getIndexValue));
            if (getIndexValue.indexOf(this.parent.tic + this.parent.tic) > -1) {
                return getIndexValue.replace(/""/g, this.parent.tic);
            }
            if (getIndexValue.split('%').length === 2 && this.parent.isNumber(getIndexValue.split('%')[0])) {
                getIndexValue = (Number(getIndexValue.split('%')[0]) * 0.01).toString();
            }
            return getIndexValue;
        }
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the SUMIF value.
     */
    BasicFormulas.prototype.ComputeSUMIF = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        if (argArr[0].indexOf(':') < 0 && !this.parent.isCellReference(argArr[0]) ||
            (argArr[2] && argArr[2].indexOf(':') < 0 && !this.parent.isCellReference(argArr[2]))) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.ImproperFormula];
        }
        if (argArr.length > 3 || argArr.length < 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var result = this.parent.computeSumIfAndAvgIf(range, false);
        if (typeof result === 'string' && (this.parent.formulaErrorStrings.indexOf(result)
            || this.parent.getErrorStrings().indexOf(result))) {
            return result;
        }
        return result[0];
    };
    /**
     * @hidden
     * @param {string[]} absValue - specify the absValue.
     * @returns {string | number} - Compute the AVERAGE value.
     */
    BasicFormulas.prototype.ComputeABS = function () {
        var absValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            absValue[_i] = arguments[_i];
        }
        var argArr = absValue;
        var cellvalue = '';
        var absVal;
        if (absValue.length === 0 || absValue.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if (argArr[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var argVal = argArr[0].split(this.parent.tic).join('').trim();
        if (argVal === '' || (argArr[0].indexOf(this.parent.tic) > -1 && isNaN(this.parent.parseFloat(argVal)))) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if (this.parent.isCellReference(argArr[0])) {
            cellvalue = this.parent.getValueFromArg(argArr[0]);
            if (this.parent.getErrorStrings().indexOf(cellvalue) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            if (cellvalue === this.parent.trueValue) {
                cellvalue = '1';
            }
            if (cellvalue === '' || cellvalue === this.parent.falseValue) {
                cellvalue = '0';
            }
            absVal = this.parent.parseFloat(cellvalue);
            if (isNaN(absVal) && !this.parent.isNumber(cellvalue)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            cellvalue = this.parent.getValueFromArg(argArr[0]).split(this.parent.tic).join();
            if (cellvalue === this.parent.trueValue) {
                cellvalue = '1';
            }
            if (cellvalue === this.parent.falseValue) {
                cellvalue = '0';
            }
            if (this.parent.getErrorStrings().indexOf(cellvalue) > -1) {
                return cellvalue;
            }
            absVal = this.parent.parseFloat(cellvalue);
            if (isNaN(absVal) && !this.parent.isNumber(cellvalue)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        return Math.abs(absVal);
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {string} - Compute the AVERAGE value.
     */
    BasicFormulas.prototype.ComputeAVERAGE = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var isSubtotalFormula = false;
        var isAggregateComputation;
        if (args.length) {
            var lastArgument = args[args.length - 1];
            if (lastArgument === 'isSubtotal') {
                isSubtotalFormula = true;
                args.pop();
            }
            else if (lastArgument === 'isAggregate') {
                isAggregateComputation = true;
                args.pop();
            }
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var argArr = args;
        for (var i = 0; i < argArr.length; i++) {
            if (argArr[i].indexOf(':') > -1) {
                if (argArr[i].indexOf(this.parent.tic) > -1) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
            }
        }
        return this.parent.calculateAvg(argArr, isSubtotalFormula, isAggregateComputation);
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the AVERAGEIF value.
     */
    BasicFormulas.prototype.ComputeAVERAGEIF = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argList = range;
        if (argList[0].indexOf(':') < 0 && !this.parent.isCellReference(argList[0])) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.ImproperFormula];
        }
        var resultVal = this.parent.computeSumIfAndAvgIf(range, true);
        if (resultVal[1] === 0 || resultVal[0].toString() === 'NaN') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.Div];
        }
        if (typeof resultVal === 'string' && (this.parent.formulaErrorStrings.indexOf(resultVal)
            || this.parent.getErrorStrings().indexOf(resultVal))) {
            return resultVal;
        }
        return this.parent.parseFloat(resultVal[0]) / this.parent.parseFloat(resultVal[1]);
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string} - Compute the CONCATENATE value.
     */
    BasicFormulas.prototype.ComputeCONCATENATE = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(range) || (range.length === 1 && range[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        var argsList = range;
        var result = '';
        var tempStr = '';
        for (var i = 0; i < argsList.length; i++) {
            var val = argsList[i];
            if (this.parent.isCellReference(val)) {
                if (val.indexOf(':') > -1) {
                    if (this.isConcat) {
                        var cells = this.parent.getCellCollection(val);
                        for (var i_2 = 0; i_2 < cells.length; i_2++) {
                            var tempString = this.parent.getValueFromArg(cells[i_2]);
                            result = result + tempString;
                        }
                    }
                    else {
                        return errCollection[CommonErrors.Value];
                    }
                }
                else {
                    if (argsList.length === 1 && argsList[0].indexOf(this.parent.tic) < 0 &&
                        !isValidCellReference(argsList[0])) {
                        return errCollection[CommonErrors.Name];
                    }
                    else {
                        tempStr = this.parent.getValueFromArg(val);
                    }
                }
                if (errCollection.indexOf(tempStr) > -1) {
                    return tempStr;
                }
            }
            else {
                if (val.startsWith(this.parent.tic) && val.endsWith(this.parent.tic) && val.indexOf('""') > -1) {
                    tempStr = val.substring(1, val.length - 1);
                    tempStr = tempStr.replace(/""/g, '"');
                }
                else {
                    tempStr = val.split(this.parent.tic).join('');
                    if (!(!(this.parent.isNumber(tempStr)) && !isNullOrUndefined(this.parent.isDate(tempStr))) || val.startsWith(' n')) {
                        tempStr = this.parent.getValueFromArg(val).split(this.parent.tic).join('');
                    }
                }
                if (errCollection.indexOf(tempStr) > -1) {
                    return tempStr;
                }
            }
            result += tempStr;
        }
        this.isConcat = false;
        return result;
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string} - Compute the CONCAT value.
     */
    BasicFormulas.prototype.ComputeCONCAT = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        this.isConcat = true;
        return this.ComputeCONCATENATE.apply(this, range);
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string | number} - Compute the MAX value.
     */
    BasicFormulas.prototype.ComputeMAX = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.parent.computeMinMax(args, 'max');
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string} - Compute the MIN value.
     */
    BasicFormulas.prototype.ComputeMIN = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.parent.computeMinMax(args, 'min');
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string} - Compute the RAND value.
     */
    BasicFormulas.prototype.ComputeRAND = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length === 1 && args[0] === '') {
            args.length = 0;
        }
        if (args.length > 0) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        return Math.random().toString();
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string} - Compute the AND value.
     */
    BasicFormulas.prototype.ComputeAND = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var argArr = args;
        if (isNullOrUndefined(args) || (argArr.length === 1 && argArr[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        return this.parent.computeAndOrNot(argArr, 'and');
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string} - Compute the OR value.
     */
    BasicFormulas.prototype.ComputeOR = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var argArr = args;
        if (isNullOrUndefined(args) || (argArr.length === 1 && argArr[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        return this.parent.computeAndOrNot(argArr, 'or');
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {string} - Compute the NOT value.
     */
    BasicFormulas.prototype.ComputeNOT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var argArr = args;
        if (isNullOrUndefined(args) || (args.length > 1 || args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        return this.parent.computeAndOrNot(argArr, 'not');
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {string | number} - Compute the find value.
     */
    BasicFormulas.prototype.ComputeFIND = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(args) || args.length === 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length > 3) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var processArgs = function (actuaValue) {
            var value = _this.parent.getValueFromArg(actuaValue);
            if (errCollection.indexOf(value) > -1) {
                return value;
            }
            if (!_this.parent.isCellReference(actuaValue)) {
                if (value.split('%').length === 2 && _this.parent.isNumber(value.split('%')[0])) {
                    value = (Number(value.split('%')[0]) * 0.01).toString();
                }
                else if (actuaValue.indexOf(_this.parent.tic) > -1) {
                    if (_this.parent.removeTics(actuaValue).match(/^(\d*\.\d+|\d+)\s*[-*/]\s*(\d*\.\d+|\d+)$/)) {
                        value = _this.parent.getValueFromArg(_this.parent.removeTics(actuaValue));
                    }
                    else if (value.indexOf(_this.parent.tic + _this.parent.tic) > -1) {
                        value = value.replace(/""/g, _this.parent.tic);
                    }
                }
            }
            return value;
        };
        var findText;
        if (!isNullOrUndefined(args[0])) {
            findText = processArgs(args[0]);
            if (errCollection.indexOf(findText) > -1) {
                return findText;
            }
            else if (!this.parent.isCellReference(args[0])) {
                findText = this.parent.removeTics(findText);
            }
        }
        var withinText;
        if (!isNullOrUndefined(args[1])) {
            withinText = processArgs(args[1]);
            if (errCollection.indexOf(withinText) > -1) {
                return withinText;
            }
            else if (!this.parent.isCellReference(args[1])) {
                withinText = this.parent.removeTics(withinText);
            }
        }
        var startNum = 1;
        if (!isNullOrUndefined(args[2])) {
            startNum = processArgs(args[2]);
            if (errCollection.indexOf(startNum) > -1) {
                return startNum;
            }
            else if (startNum.toUpperCase() === this.parent.trueValue) {
                startNum = '1';
            }
            else if (startNum.toUpperCase() === this.parent.falseValue) {
                startNum = '0';
            }
            if (!this.parent.isCellReference(args[2])) {
                startNum = this.parent.removeTics(startNum);
            }
            startNum = this.parent.parseFloat(startNum);
            if (isNaN(startNum) || startNum <= 0) {
                return errCollection[CommonErrors.Value];
            }
        }
        startNum = withinText.indexOf(findText, startNum - 1);
        if (startNum < 0) {
            return errCollection[CommonErrors.Value];
        }
        return (Number(startNum) + Number(1)).toString();
    };
    /**
     * @hidden
     * @param {string[]} argArr - specify the range.
     * @returns {string | number} - Compute the index.
     */
    BasicFormulas.prototype.ComputeINDEX = function () {
        var _this = this;
        var argArr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argArr[_i] = arguments[_i];
        }
        var nestedFormula;
        var value;
        var errCollection = this.parent.getErrorStrings();
        if (argArr.length && argArr[argArr.length - 1] === 'nestedFormulaTrue') {
            nestedFormula = true;
            argArr.pop();
        }
        if (isNullOrUndefined(argArr) || (argArr.length === 1 && argArr[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (argArr.length < 2 || argArr.length > 4) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        else if (argArr[0] === '') {
            return errCollection[CommonErrors.Value];
        }
        else if (argArr[0].indexOf(':') === -1) {
            return errCollection[CommonErrors.Ref];
        }
        var row;
        var col;
        var processArgs = function (actualValue) {
            if (isNullOrUndefined(actualValue) || actualValue === '') {
                return 1;
            }
            var value = _this.parent.getValueFromArg(actualValue);
            if (errCollection.indexOf(value) > -1) {
                return value;
            }
            if (value.toUpperCase() === _this.parent.trueValue) {
                value = '1';
            }
            else if (value.toUpperCase() === _this.parent.falseValue) {
                value = '0';
            }
            if (value.indexOf(_this.parent.tic) > -1) {
                value = _this.parent.removeTics(value);
                if (actualValue.indexOf(_this.parent.tic) === -1 || value.trim() === '') {
                    return errCollection[CommonErrors.Value];
                }
            }
            if (value.split('%').length === 2 && _this.parent.isNumber(value.split('%')[0])) {
                value = (Number(value.split('%')[0]) / 100).toString();
            }
            value = parseInt(Number(value).toString(), 10);
            if (isNaN(value) || value < 0) {
                return errCollection[CommonErrors.Value];
            }
            else if (value === 0) {
                value = 1;
            }
            return value;
        };
        value = argArr[0];
        row = processArgs(argArr[1]);
        if (errCollection.indexOf(row.toString()) > -1) {
            return row.toString();
        }
        col = processArgs(argArr[2]);
        if (errCollection.indexOf(col.toString()) > -1) {
            return col.toString();
        }
        var i = value.indexOf(':');
        var startRow = this.parent.rowIndex(value.substring(0, i));
        var endRow = this.parent.rowIndex(value.substring(i + 1));
        var startCol = this.parent.colIndex(value.substring(0, i));
        var endCol = this.parent.colIndex(value.substring(i + 1));
        if (row > endRow - startRow + 1 || col > endCol - startCol + 1) {
            return errCollection[CommonErrors.Ref];
        }
        row = startRow + row - 1;
        col = startCol + col - 1;
        value = this.parent.getValueFromArg(this.getSheetReference(value) + this.parent.convertAlpha(col) + row);
        if (value === '') {
            return 0;
        }
        if (nestedFormula && errCollection.indexOf(value) === -1 &&
            !this.parent.isNumber(value) && value !== this.parent.trueValue && value !== this.parent.falseValue) {
            return this.parent.tic + value + this.parent.tic;
        }
        return value;
    };
    BasicFormulas.prototype.getSheetReference = function (range) {
        return range.indexOf(this.parent.sheetToken) === 0 && range.lastIndexOf(this.parent.sheetToken) > range.indexOf(this.parent.sheetToken) ? range.substring(0, range.lastIndexOf(this.parent.sheetToken) + 1) : '';
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the if.
     */
    BasicFormulas.prototype.ComputeIFS = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        if (isNullOrUndefined(range) || (argArr.length === 1 && argArr[0] === '') || argArr.length % 2 !== 0) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var condition = '';
        var result = '';
        for (var i = 0; i < argArr.length; i++) {
            condition = this.parent.getValueFromArg(argArr[i]);
            if (argArr[i] === '') {
                return this.parent.getErrorStrings()[CommonErrors.NA];
            }
            if (this.parent.getErrorStrings().indexOf(condition) > -1) {
                return condition;
            }
            if (condition !== this.parent.trueValue && condition !== this.parent.falseValue) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            if (condition === this.parent.trueValue) {
                if (this.parent.isCellReference(argArr[i + 1].split(this.parent.tic).join('')) || argArr[i + 1].includes(this.parent.arithMarker)) {
                    result = this.parent.getValueFromArg(argArr[i + 1]);
                    result = result === '' ? '0' : result;
                }
                else {
                    result = argArr[i + 1] === '' ? '0' : this.parent.getValueFromArg(argArr[i + 1]);
                    if (result.indexOf(this.parent.tic) > -1) {
                        result = result.split(this.parent.tic).join('');
                    }
                }
                i = i + 1;
                return result;
            }
            else if (condition === this.parent.falseValue) {
                i = i + 1;
            }
        }
        return this.parent.getErrorStrings()[CommonErrors.NA];
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the count.
     */
    BasicFormulas.prototype.ComputeCOUNTA = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var isSubtotalFormula = false;
        var isAggregateComputation;
        var sheet;
        if (args.length) {
            var lastArgument = args[args.length - 1];
            if (lastArgument === 'isSubtotal') {
                isSubtotalFormula = true;
                args.pop();
            }
            else if (lastArgument === 'isAggregate') {
                sheet = this.parent.parentObject.getActiveSheet();
                isAggregateComputation = true;
                args.pop();
            }
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var argArr = args;
        var cellColl;
        var result = 0;
        var cellValue;
        var value;
        var indexes;
        for (var i = 0; i < argArr.length; i++) {
            if (this.parent.isCellReference(argArr[i])) {
                if (argArr[i].indexOf(':') > -1) {
                    cellColl = this.parent.getCellCollection(argArr[i].split(this.parent.tic).join(''));
                    for (var j = 0; j < cellColl.length; j++) {
                        if (isAggregateComputation) {
                            indexes = getCellIndexes(cellColl[j]);
                            if (isHiddenRow(sheet, indexes[0]) || isHiddenCol(sheet, indexes[1])) {
                                continue;
                            }
                        }
                        cellValue = !isSubtotalFormula ? this.parent.getValueFromArg(cellColl[j]) :
                            this.parent.getValueFromArg(cellColl[j], null, null, true);
                        if (isSubtotalFormula && cellValue.includes('SUBTOTAL(')) {
                            continue;
                        }
                        if (cellValue.length > 0) {
                            result++;
                        }
                    }
                }
                else {
                    cellValue = !isSubtotalFormula ? this.parent.getValueFromArg(argArr[i]) :
                        this.parent.getValueFromArg(argArr[i], null, null, true);
                    if (isSubtotalFormula && cellValue.includes('SUBTOTAL(')) {
                        continue;
                    }
                    if (cellValue.length > 0) {
                        result++;
                    }
                }
            }
            else {
                value = this.parent.getValueFromArg(argArr[i]).split(this.parent.tic).join('');
                if (value.length > 0) {
                    result++;
                }
                else if (value.length === 0 && value.trim() === '') {
                    result++;
                }
            }
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the average.
     */
    BasicFormulas.prototype.ComputeAVERAGEA = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (isNullOrUndefined(args) || (args.length === 1 && args[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var argArrs = args;
        var cellCol;
        var result = 0;
        var cellValue;
        var value;
        var length = 0;
        var parseValue;
        for (var k = 0; k < argArrs.length; k++) {
            if (this.parent.isCellReference(argArrs[k])) {
                if (argArrs[k].indexOf(':') > -1) {
                    cellCol = this.parent.getCellCollection(argArrs[k].split(this.parent.tic).join(''));
                    for (var j = 0; j < cellCol.length; j++) {
                        cellValue = this.parent.getValueFromArg(cellCol[j]);
                        cellValue = this.processLogicalCellValue(cellValue);
                        if (this.parent.getErrorStrings().indexOf(cellValue) > -1) {
                            return cellValue;
                        }
                        else if (isNullOrUndefined(cellValue) || cellValue === '') {
                            continue;
                        }
                        parseValue = this.parent.parseFloat(cellValue);
                        cellValue = !isNaN(parseValue) ? parseValue : 0;
                        result += cellValue;
                        length = length + 1;
                    }
                }
                else {
                    cellValue = this.parent.getValueFromArg(argArrs[k]);
                    cellValue = this.processLogicalCellValue(cellValue);
                    if (this.parent.getErrorStrings().indexOf(cellValue) > -1) {
                        return cellValue;
                    }
                    else if (isNullOrUndefined(cellValue) || cellValue === '') {
                        continue;
                    }
                    parseValue = this.parent.parseFloat(cellValue);
                    cellValue = !isNaN(parseValue) ? parseValue : 0;
                    result += cellValue;
                    length = length + 1;
                }
            }
            else {
                if (argArrs[k].indexOf(this.parent.tic) > -1) {
                    if (isNaN(this.parent.parseFloat(argArrs[k].split(this.parent.tic).join(''))) ||
                        argArrs[k].split(this.parent.tic).join('').trim() === '') {
                        return this.parent.getErrorStrings()[CommonErrors.Value];
                    }
                }
                argArrs[k] = this.processLogicalCellValue(argArrs[k]);
                value = this.parent.getValueFromArg(argArrs[k].split(this.parent.tic).join(''));
                if (this.parent.getErrorStrings().indexOf(value) > -1) {
                    return value;
                }
                result += this.parent.parseFloat(value);
                length = length + 1;
            }
        }
        if (length === 0) {
            return this.parent.getErrorStrings()[CommonErrors.DivZero];
        }
        return result / length;
    };
    BasicFormulas.prototype.processLogicalCellValue = function (cellValue) {
        var value = cellValue;
        if (value.toUpperCase() === this.parent.trueValue) {
            value = '1';
        }
        else if (value.toUpperCase() === this.parent.falseValue) {
            value = '0';
        }
        return value;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the count if.
     */
    BasicFormulas.prototype.ComputeSORT = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var nestedFormula;
        var isStringVal;
        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {
            nestedFormula = true;
            args.pop();
        }
        var argArr = args;
        var result;
        var values = [];
        if (isNullOrUndefined(args) || args[0] === '' || argArr.length > 4) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        argArr[1] = argArr[1] ? argArr[1] : '1';
        argArr[2] = argArr[2] ? argArr[2] : '1'; // 1 = Ascending, -1 = Descending. Default is ascending order.
        argArr[3] = argArr[3] ? argArr[3] : 'FALSE'; // Default is FALSE = sort by column or row
        argArr[0] = argArr[0].split('$').join('');
        var cellCollection;
        var valueCollection = [];
        if (argArr[0].indexOf(':') > -1) {
            var rangeSplit = argArr[0].split(':');
            if (this.parent.isCellReference(rangeSplit[0]) && this.parent.isCellReference(rangeSplit[1])) {
                var j = argArr[0].indexOf(':');
                var swap = void 0;
                var rowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], 0, j));
                var colIdx = this.parent.colIndex(this.parent.substring(argArr[0], 0, j));
                var eRowIdx = this.parent.rowIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));
                var eColIdx = this.parent.colIndex(this.parent.substring(argArr[0], j + 1, j + argArr[0].length - j - 1));
                if (rowIdx > eRowIdx) {
                    swap = eRowIdx;
                    eRowIdx = rowIdx;
                    rowIdx = swap;
                }
                if (colIdx > eColIdx) {
                    swap = eColIdx;
                    eColIdx = colIdx;
                    colIdx = swap;
                }
                if (this.parent.isCellReference(argArr[3])) {
                    argArr[3] = this.parent.getValueFromArg(argArr[3]).toUpperCase();
                    if (argArr[3] !== this.parent.trueValue && argArr[3] !== this.parent.falseValue) {
                        if (isNumber(argArr[3])) {
                            argArr[3] = Number(argArr[3]) === 0 ? this.parent.falseValue : this.parent.trueValue;
                        }
                        else if (argArr[3] === '') {
                            argArr[3] = this.parent.falseValue;
                        }
                        else {
                            return this.parent.getErrorStrings()[CommonErrors.Value];
                        }
                    }
                }
                else {
                    isStringVal = argArr[3].startsWith(this.parent.tic) && argArr[3].endsWith(this.parent.tic);
                    argArr[3] = this.parent.getValueFromArg(argArr[3]);
                    argArr[3] = isNumber(argArr[3]) ? (Number(argArr[3]) === 0 ? this.parent.falseValue : this.parent.trueValue) :
                        argArr[3].split(this.parent.tic).join('').toUpperCase();
                    if (argArr[3] !== this.parent.trueValue && argArr[3] !== this.parent.falseValue) {
                        return this.parent.getErrorStrings()[isStringVal ? CommonErrors.Value : CommonErrors.Name];
                    }
                }
                if (this.parent.isCellReference(argArr[2])) {
                    argArr[2] = this.parent.getValueFromArg(argArr[2]);
                    argArr[2] = argArr[2] === this.parent.trueValue ? '1' : argArr[2];
                }
                else {
                    argArr[2] = this.parent.getValueFromArg(argArr[2]);
                    argArr[2] = argArr[2] === this.parent.trueValue ? '1' : argArr[2].split(this.parent.tic).join('');
                }
                argArr[2] = isNumber(argArr[2]) ? Math.floor(Number(argArr[2])).toString() : argArr[2];
                if (argArr[2] !== '1' && argArr[2] !== '-1') {
                    return this.parent.getErrorStrings().indexOf(argArr[2]) > -1 ? this.parent.getErrorStrings()[CommonErrors.Name] :
                        this.parent.getErrorStrings()[CommonErrors.Value];
                }
                var order = argArr[2] === '1' ? 'Ascending' : 'Descending';
                if (this.parent.isCellReference(argArr[1])) {
                    argArr[1] = this.parent.getValueFromArg(argArr[1]);
                    argArr[1] = isNumber(argArr[1]) ? Math.floor(Number(argArr[1])).toString() : (argArr[1] === this.parent.trueValue ? '1'
                        : (argArr[1] === this.parent.falseValue ? '0' : argArr[1]));
                    if (!isNaN(this.parseDouble(argArr[1])) ? (this.parseDouble(argArr[1]) < 1 || (argArr[3] === this.parent.trueValue ?
                        (eRowIdx - rowIdx) + 1 < this.parseDouble(argArr[1]) : (eColIdx - colIdx) + 1 < this.parseDouble(argArr[1])))
                        : true) {
                        return this.parent.getErrorStrings()[CommonErrors.Value];
                    }
                }
                else {
                    isStringVal = argArr[1].startsWith(this.parent.tic) && argArr[1].endsWith(this.parent.tic);
                    argArr[1] = this.parent.getValueFromArg(argArr[1]);
                    argArr[1] = isNumber(argArr[1]) ? Math.floor(Number(argArr[1])).toString() : (argArr[1] === this.parent.trueValue ?
                        '1' : (argArr[1] === this.parent.falseValue ? '0' : argArr[1].split(this.parent.tic).join('')));
                    if (!isNaN(this.parseDouble(argArr[1])) ? (this.parseDouble(argArr[1]) < 1 || (argArr[3] === this.parent.trueValue ?
                        (eRowIdx - rowIdx) + 1 < this.parseDouble(argArr[1]) : (eColIdx - colIdx) + 1 < this.parseDouble(argArr[1])))
                        : isStringVal) {
                        return this.parent.getErrorStrings()[CommonErrors.Value];
                    }
                }
                var sheetIdx = '';
                if (argArr[0].indexOf('!') === 0) {
                    sheetIdx = argArr[0];
                    sheetIdx = sheetIdx.replace('!', '');
                    sheetIdx = sheetIdx.indexOf('!');
                    sheetIdx = argArr[0].substring(0, sheetIdx + 2);
                }
                argArr[0] = sheetIdx + getAlphalabel(colIdx) + rowIdx + ':' + getAlphalabel(eColIdx) + eRowIdx;
                cellCollection = this.parent.getCellCollection(argArr[0]);
                for (var i = 0; i < cellCollection.length; i++) {
                    valueCollection.push(this.parent.getValueFromArg(cellCollection[i]));
                }
                var colSort_1 = [];
                var numColl_1 = [];
                var strColl_1 = [];
                var booleanColl_1 = [];
                var emptyCellColl_1 = [];
                var totalColumn = eColIdx - colIdx + 1;
                var sortRangeValuesHandler = function (value) {
                    if (value) {
                        if (value.toUpperCase() === 'TRUE' || value.toUpperCase() === 'FALSE') {
                            booleanColl_1.push(value);
                            colSort_1.push(value);
                        }
                        else if (isNaN(_this.parseDouble(value))) {
                            strColl_1.push(value);
                            colSort_1.push(value);
                        }
                        else {
                            numColl_1.push(_this.parseDouble(value));
                            colSort_1.push(_this.parseDouble(value));
                        }
                    }
                    else if (value === '') {
                        emptyCellColl_1.push(_this.parseDouble(value).toString());
                        colSort_1.push(_this.parseDouble(value).toString());
                    }
                };
                if (argArr[3] === 'TRUE') {
                    for (var i = 0; i < totalColumn; i++) {
                        sortRangeValuesHandler(valueCollection[i + ((this.parseDouble(argArr[1]) - 1) * totalColumn)]);
                    }
                }
                if (argArr[3] === 'FALSE') {
                    for (var i = 0; i < valueCollection.length; i++) {
                        sortRangeValuesHandler(valueCollection[i * totalColumn + this.parseDouble(argArr[1]) - 1]);
                    }
                }
                var sortedNumColl = numColl_1.length > 0 ? DataUtil.sort(numColl_1, null, DataUtil.fnSort(order)) : [];
                var sortedStrColl = strColl_1.length > 0 ? DataUtil.sort(strColl_1, null, DataUtil.fnSort(order)) : [];
                var sortedBooleanColl = booleanColl_1.length > 0 ? DataUtil.sort(booleanColl_1, null, DataUtil.fnSort(order)) : [];
                var sortedVal = order === 'Ascending' ? sortedNumColl.concat(sortedStrColl, sortedBooleanColl, emptyCellColl_1) : sortedBooleanColl.concat(sortedStrColl, sortedNumColl, emptyCellColl_1);
                var id = [];
                for (var a = 0; a < sortedVal.length; a++) {
                    for (var b = 0; b < colSort_1.length; b++) {
                        if (JSON.stringify(sortedVal[a]) === JSON.stringify(colSort_1[b])) {
                            if (id.indexOf(b) === -1) {
                                id.push(b);
                            }
                        }
                    }
                }
                if (argArr[3] === 'TRUE') {
                    for (var startRow = rowIdx, rowInc = 0; startRow <= eRowIdx; startRow++, rowInc++) {
                        for (var a = 0, colInc = 0; a < id.length; a++, colInc++) {
                            var cellValue = this.parent.getValueFromArg(sheetIdx + getAlphalabel(id[a] + colIdx) + startRow);
                            if (nestedFormula && cellValue !== '') {
                                values.push(cellValue);
                                continue;
                            }
                            cellValue = cellValue === '' ? '0' : cellValue;
                            var activeCell = this.parent.actCell;
                            activeCell = activeCell.indexOf('!') > -1 ? activeCell.substring(activeCell.lastIndexOf('!') + 1) :
                                activeCell;
                            var actRowIdx = this.parent.rowIndex(activeCell);
                            var actColIdx = this.parent.colIndex(activeCell);
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            this.parent.parentObject.setValueRowCol(this.parent.getSheetID(this.parent.grid) + 1, cellValue, actRowIdx + rowInc, actColIdx + colInc);
                        }
                    }
                    result = this.parent.getValueFromArg(sheetIdx + getAlphalabel(id[0] + colIdx) + rowIdx);
                }
                if (argArr[3] === 'FALSE') {
                    for (var a = 0, rowInc = 0; a < id.length; a++, rowInc++) {
                        for (var startCol = colIdx, colInc = 0; startCol <= eColIdx; startCol++, colInc++) {
                            var value = this.parent.getValueFromArg(sheetIdx + getAlphalabel(startCol) + (id[a] + rowIdx));
                            if (nestedFormula && value !== '') {
                                values.push(value);
                                continue;
                            }
                            value = value === '' ? '0' : value;
                            var activeCell = this.parent.actCell;
                            activeCell = activeCell.indexOf('!') > -1 ? activeCell.substring(activeCell.lastIndexOf('!') + 1) :
                                activeCell;
                            var actColIdx = this.parent.colIndex(activeCell);
                            var actRowIdx = this.parent.rowIndex(activeCell);
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            this.parent.parentObject.setValueRowCol(this.parent.getSheetID(this.parent.grid) + 1, value, actRowIdx + rowInc, actColIdx + colInc);
                        }
                    }
                    result = this.parent.getValueFromArg(sheetIdx + getAlphalabel(colIdx) + (id[0] + rowIdx));
                }
            }
        }
        if (nestedFormula) {
            return values.join(',');
        }
        return result === '' ? '0' : result;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the count if.
     */
    BasicFormulas.prototype.ComputeCOUNTIF = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var argArr = args;
        if (isNullOrUndefined(args) || args[0] === '' || argArr.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if (argArr[0].indexOf(':') < 0 && !this.parent.isCellReference(argArr[0])) {
            return this.parent.getErrorStrings()[CommonErrors.Name];
        }
        var cellColl;
        var result = 0;
        var cellValue;
        var stack = [];
        var op = 'equal';
        if (argArr[1] === '') {
            return 0;
        }
        var isStringVal = argArr[1].startsWith(this.parent.tic) && argArr[1].endsWith(this.parent.tic);
        var condition = argArr[1].split(this.parent.tic).join('');
        var isAsterisk = condition.includes('*');
        var isAsteriskOnly = condition === '*' || condition === '<>*';
        var criteriaValue = isAsterisk && !isAsteriskOnly ? condition.replace(/\*/g, '').trim() : condition;
        var isCellReferenceValue = false;
        if (!isStringVal && this.parent.isCellReference(criteriaValue)) {
            criteriaValue = this.parent.getValueFromArg(criteriaValue);
            isCellReferenceValue = true;
        }
        if (isAsterisk && !isAsteriskOnly) {
            var asteriskIndex = condition.indexOf('*');
            if (condition[0] === '*') {
                criteriaValue = '*' + criteriaValue;
            }
            if (condition[condition.length - 1] === '*') {
                criteriaValue += '*';
            }
            if (asteriskIndex > 0 && asteriskIndex < condition.length - 1) {
                criteriaValue = condition.substring(0, asteriskIndex) + '*' + condition.substring(asteriskIndex + 1);
            }
        }
        condition = criteriaValue;
        if (condition.startsWith('<=')) {
            op = 'lessEq';
            condition = condition.substring(2);
        }
        else if (condition.startsWith('>=')) {
            op = 'greaterEq';
            condition = condition.substring(2);
        }
        else if (condition.startsWith('<>')) {
            op = 'notEq';
            condition = condition.substring(2);
        }
        else if (condition.startsWith('<')) {
            op = 'less';
            condition = condition.substring(1);
        }
        else if (condition.startsWith('>')) {
            op = 'greater';
            condition = condition.substring(1);
        }
        else if (condition.startsWith('=')) {
            op = 'equal';
            condition = condition.substring(1);
        }
        var isWildCardCondition = condition.indexOf('*') > -1 || condition.indexOf('?') > -1;
        if ((!isStringVal && this.parent.isCellReference(condition) && !isCellReferenceValue) || condition.includes(this.parent.arithMarker)
            || (condition.includes(this.parent.getParseDecimalSeparator()) && !isWildCardCondition)) {
            condition = this.parent.getValueFromArg(condition);
        }
        if (argArr[0].indexOf(':') > -1 && this.parent.isCellReference(argArr[0])) {
            cellColl = this.parent.getCellCollection(argArr[0].split(this.parent.tic).join(''));
            for (var j = 0; j < cellColl.length; j++) {
                cellValue = this.parent.getValueFromArg(cellColl[j]);
                if (isWildCardCondition) {
                    cellValue = this.parent.findWildCardValue(condition.toLowerCase(), cellValue.toLowerCase());
                }
                stack.push(cellValue);
                stack.push(condition);
                if (this.parent.processLogical(stack, op) === this.parent.trueValue) {
                    result++;
                }
            }
        }
        return result;
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the sum if.
     */
    BasicFormulas.prototype.ComputeSUMIFS = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var sum = this.calculateIFS(range);
        return sum;
    };
    BasicFormulas.prototype.calculateIFS = function (ranges, isAvgIfs) {
        var _this = this;
        if (isNullOrUndefined(ranges) || ranges[0] === '' || ranges.length < 2 || ranges.length > 127) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if (ranges.length === 3) { // SUMIFS and AVERAGEIFS OR operation will contains only 3 arguments.
            if (ranges[2].includes(this.parent.tic + this.parent.tic)) {
                var result_1 = '';
                var sumVal_1;
                var separator_1 = this.parent.getParseArgumentSeparator();
                var criterias = ranges[2].split(this.parent.tic + this.parent.tic);
                criterias.forEach(function (criteria) {
                    criteria = criteria.trim().split(_this.parent.tic).join('');
                    if (criteria) {
                        sumVal_1 = _this.parent.computeIfsFormulas([ranges[0], ranges[1], criteria], _this.parent.falseValue, isAvgIfs).toString();
                        result_1 += (result_1 ? separator_1 : '') + sumVal_1;
                    }
                });
                return result_1;
            }
        }
        return this.parent.computeIfsFormulas(ranges, this.parent.falseValue, isAvgIfs);
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {string | number} - Compute the Text.
     */
    BasicFormulas.prototype.ComputeTEXT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var nestedFormula;
        if (args.length && args[args.length - 1] === 'nestedFormulaTrue') {
            nestedFormula = true;
            args.pop();
        }
        var argsLength = args.length;
        var firstArg = args[0];
        var secondArg = args[1];
        if (argsLength !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var s1 = firstArg;
        var s2 = secondArg;
        if (secondArg === '') {
            return this.parent.getValueFromArg(s1);
        }
        var dTime = new Date(1900, 0, 1, 0, 0, 0);
        var checkString = s1 + ',' + s2;
        var intl = new Internationalization();
        if (this.parent.getErrorStrings().indexOf(checkString) > -1) {
            return checkString;
        }
        s1 = this.parent.getValueFromArg(s1);
        if (isNumber(s1.split(this.parent.tic).join(''))) {
            s1 = s1.split(this.parent.tic).join('');
        }
        if (secondArg.startsWith('"') && secondArg.endsWith('"')) {
            s2 = s2.split(this.parent.tic).join('');
        }
        else {
            s2 = this.parent.getValueFromArg(s2);
        }
        if (s2 === '') {
            return '';
        }
        if (s1 === '' && (s2.length > 0 && (s2.toUpperCase().indexOf('M') > -1 || s2.toUpperCase().indexOf('D') > -1
            || s2.toUpperCase().indexOf('Y') > -1 || s2.toUpperCase().indexOf('S') > -1 || s2.toUpperCase().indexOf('T') > -1)
            || s2.toUpperCase().indexOf('H') > -1)) {
            s1 = dTime.toString();
        }
        var d = this.parseDouble(s1);
        if (isNaN(d) && this.parent.isDate(new Date(s1)) !== null) {
            d = this.parent.toOADate(new Date(s1));
        }
        dTime = Date.parse(s1.split(this.parent.tic).join(''));
        if (!isNaN(d) || !isNaN(dTime)) {
            if (s2.length > 0 && s2.indexOf('#') === -1 && (s2.toUpperCase().indexOf('M') > -1 || s2.toUpperCase().indexOf('D') > -1
                || s2.toUpperCase().indexOf('Y') > -1 || s2.toUpperCase().indexOf('S') > -1 || s2.toUpperCase().indexOf('T') > -1)
                || s2.toUpperCase().indexOf('H') > -1) {
                s2 = s2.split('Y').join('y').split('D').join('d').split('H').join('h');
                s2 = s2.split('S').join('s').split('m').join('M').split('AM/PM').join('tt');
                var formatChar = s2.split('');
                var isH = false;
                var isMFound = false;
                var i = 0;
                // let mcount: number = 0;
                var lastCharIndex = 0;
                for (i = 0; i < formatChar.length;) {
                    var c = formatChar[i];
                    if (c === 's' && formatChar[lastCharIndex] === 'M') {
                        formatChar[lastCharIndex] = 'm';
                        if (formatChar[lastCharIndex - 1] === 'M') {
                            formatChar[lastCharIndex - 1] = 'm';
                        }
                    }
                    if (this.parent.isChar(c)) {
                        lastCharIndex = i;
                    }
                    if (c === 'M' && isH) {
                        formatChar[i] = 'm';
                        isMFound = true;
                    }
                    if (c === 'h') {
                        isH = true;
                    }
                    else if (this.parent.isChar(c) && c !== 'M' && c !== 'h' && !isMFound) {
                        isH = false;
                        isMFound = false;
                    }
                    i++;
                }
                s2 = String(formatChar);
                s2 = s2.split(',').join('').split('\n').join(' ');
                var dt = this.parent.fromOADate(d);
                if (d === 0) {
                    dt = dTime;
                }
                var getSkeleton = getSkeletonVal(s2);
                if (getSkeleton === '') {
                    var date = dateToInt(dt);
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    var dateString = this.parent.parentObject.getDisplayText({ format: s2, value: date });
                    return dateString;
                }
                var dFormatter = intl.getDateFormat({ skeleton: getSkeleton, type: 'date' });
                var formattedString = dFormatter(new Date(dt.toString()));
                s1 = formattedString;
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                s1 = this.parent.parentObject.getDisplayText({ format: s2, value: d });
            }
        }
        return nestedFormula ? this.parent.tic + s1 + this.parent.tic : s1;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the count if.
     */
    BasicFormulas.prototype.ComputeCOUNTIFS = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var sum = this.parent.computeIfsFormulas(args, this.parent.trueValue);
        return sum;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {number | string} - Compute the Average if.
     */
    BasicFormulas.prototype.ComputeAVERAGEIFS = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var sum = this.calculateIFS(args, this.parent.trueValue);
        return sum;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {string | number} - Compute the Match.
     */
    BasicFormulas.prototype.ComputeMATCH = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var argArr = args.slice();
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(argArr) || (argArr.length === 1 && argArr[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (argArr.length < 2 || argArr.length > 3) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        // args[0] codes
        argArr[0] = this.parent.getValueFromArg(args[0]);
        var isStringValue = argArr[0].indexOf(this.parent.tic) > -1;
        argArr[0] = argArr[0].split(this.parent.tic).join('');
        if (errCollection.indexOf(argArr[0]) > -1) {
            return argArr[0];
        }
        if (argArr[0] === '') {
            return errCollection[CommonErrors.NA];
        }
        if (isNaN(Number(argArr[0]))) {
            isStringValue = true;
        }
        // args[2] codes
        var matchType;
        if (isNullOrUndefined(args[2])) {
            argArr[2] = '1';
        }
        else {
            argArr[2] = this.parent.getValueFromArg(argArr[2]);
            if ((argArr[2].indexOf(this.parent.tic) > -1) && isNaN(Number(argArr[2].split(this.parent.tic).join('')))) {
                return errCollection[CommonErrors.Value];
            }
            if (argArr[2].toUpperCase() === this.parent.trueValue) {
                argArr[2] = '1';
            }
            else if (argArr[2].toUpperCase() === this.parent.falseValue) {
                argArr[2] = '0';
            }
        }
        matchType = parseFloat(argArr[2]);
        if ([-1, 0, 1].indexOf(matchType) === -1) {
            matchType = 0;
        }
        // args[1] codes
        var valueCollection = [];
        var cellCollection;
        var isStringCollection = false;
        if (argArr[1].indexOf(':') > -1 || this.parent.isCellReference(argArr[1])) {
            cellCollection = this.parent.getCellCollection(argArr[1]);
            for (var j = 0; j < cellCollection.length; j++) {
                var cellValue = this.parent.getValueFromArg(cellCollection[j]);
                if (cellValue.indexOf(this.parent.tic) > -1 || isNaN(Number(cellValue))) {
                    isStringCollection = true;
                }
                valueCollection[j] = cellValue.split(this.parent.tic).join('');
            }
            if ((isStringValue && !isStringCollection) || (!isStringValue && isStringCollection)) {
                return errCollection[CommonErrors.NA];
            }
        }
        var index = 0;
        var indexVal = '';
        var isIndexFound = false;
        var matchValue = !isNaN(Number(argArr[0])) ? Number(argArr[0]) : argArr[0];
        for (var i = 0; i < valueCollection.length; i++) {
            if (valueCollection[i] === '') {
                if (i === (valueCollection.length - 1)) {
                    valueCollection.pop();
                }
                continue;
            }
            else if (matchType === -1 && (isStringValue || isStringCollection)) {
                break;
            }
            var matchCollectionValue = !isNaN(Number(valueCollection[i])) ?
                Number(valueCollection[i]) : valueCollection[i];
            if (matchType === 1) {
                if (matchValue === matchCollectionValue) {
                    index = i + 1;
                    isIndexFound = true;
                    if (isNaN(Number(argArr[0]))) {
                        isStringValue = false;
                    }
                }
                else if ((matchValue > matchCollectionValue) && !isStringValue && !isIndexFound) {
                    if (!indexVal || (matchCollectionValue > (!isNaN(Number(indexVal)) ? Number(indexVal) : indexVal))) {
                        index = i + 1;
                        indexVal = valueCollection[i];
                    }
                }
            }
            else if (matchType === 0) {
                if (argArr[0].indexOf('*') > -1 || argArr[0].indexOf('?') > -1) {
                    valueCollection[i] = this.parent.findWildCardValue(argArr[0], valueCollection[i]);
                }
                if (argArr[0] === valueCollection[i]) {
                    return i + 1;
                }
            }
            else if (matchType === -1) {
                if ((Number(valueCollection[i]) > Number(valueCollection[i + 1]))
                    || i === valueCollection.length - 1) {
                    if (matchValue === matchCollectionValue) {
                        index = i + 1;
                        matchValue = undefined;
                    }
                    else if (matchValue < matchCollectionValue) {
                        if (!indexVal || (matchCollectionValue < (!isNaN(Number(indexVal)) ? Number(indexVal) : indexVal))) {
                            index = i + 1;
                            indexVal = valueCollection[i];
                        }
                    }
                }
                else {
                    return errCollection[CommonErrors.NA];
                }
            }
        }
        if (isStringValue && isStringCollection && matchType === 1) {
            return valueCollection.length;
        }
        return index ? index : errCollection[CommonErrors.NA];
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the lookup value.
     */
    BasicFormulas.prototype.ComputeLOOKUP = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        if (isNullOrUndefined(argArr) || (argArr.length === 1 && argArr[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        return this.parent.computeLookup(argArr);
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the vlookup value.
     */
    BasicFormulas.prototype.ComputeVLOOKUP = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        return this.parent.computeVHLookup(argArr, true);
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range.
     * @returns {string | number} - Compute the hlookup value.
     */
    BasicFormulas.prototype.ComputeHLOOKUP = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var argArr = range;
        return this.parent.computeVHLookup(argArr);
    };
    /**
     * @hidden
     * @param {string[]} argArr - specify the range.
     * @returns {string | number} - Compute the sub total value.
     */
    BasicFormulas.prototype.ComputeSUBTOTAL = function () {
        var argArr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argArr[_i] = arguments[_i];
        }
        var value;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(argArr) || (argArr.length === 1 && argArr[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (argArr.length < 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        value = this.parent.getValueFromArg(argArr[0]).trim();
        if (errCollection.indexOf(value) > -1) {
            return value;
        }
        if (value.split(this.parent.tic).join('').trim() === '') {
            return errCollection[CommonErrors.Value];
        }
        if (!this.parent.isCellReference(argArr[0])) {
            value = this.parent.removeTics(value);
        }
        if (value.toUpperCase() === this.parent.trueValue) {
            value = '1';
        }
        else if (value.toUpperCase() === this.parent.falseValue) {
            value = '0';
        }
        else if (value.split('%').length === 2 && this.parent.isNumber(value.split('%')[0])) {
            value = (Number(value.split('%')[0]) / 100).toString();
        }
        value = this.parent.parseFloat(value);
        if (isNaN(value) || ((1 > value || value > 11) && (101 > value || value > 111))) {
            return errCollection[CommonErrors.Value];
        }
        var cellRef = argArr.slice(1, argArr.length);
        switch (value) {
            case 1:
            case 101:
                value = this.ComputeAVERAGE.apply(this, cellRef.concat(['isSubtotal']));
                break;
            case 2:
            case 102:
                value = this.ComputeCOUNT.apply(this, cellRef.concat(['isSubtotal']));
                break;
            case 3:
            case 103:
                value = this.ComputeCOUNTA.apply(this, cellRef.concat(['isSubtotal']));
                break;
            case 4:
            case 104:
                value = this.ComputeMAX.apply(this, cellRef.concat(['isSubtotal']));
                break;
            case 5:
            case 105:
                value = this.ComputeMIN.apply(this, cellRef.concat(['isSubtotal']));
                break;
            case 6:
            case 106:
                value = this.ComputePRODUCT.apply(this, cellRef.concat(['isSubtotal']));
                break;
            case 7:
            case 107:
                value = this.ComputeDAY.apply(this, cellRef);
                break;
            case 8:
            case 108:
                value = this.ComputeCONCAT.apply(this, cellRef);
                break;
            case 9:
            case 109:
                value = this.ComputeSUM.apply(this, cellRef.concat(['isSubtotal']));
                break;
            case 10:
            case 110:
                value = this.ComputeAVERAGEA.apply(this, cellRef);
                break;
            case 11:
            case 111:
                value = this.ComputeABS.apply(this, cellRef);
                break;
            default:
                value = errCollection[CommonErrors.Value];
                break;
        }
        return value;
    };
    /**
     * @hidden
     * @param {string[]} argValue - specify the range.
     * @returns {string | number} - Compute the Radians value.
     */
    BasicFormulas.prototype.ComputeRADIANS = function () {
        var argValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argValue[_i] = arguments[_i];
        }
        var value;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(argValue) || (argValue[0] === '' && argValue.length === 1) ||
            (argValue[0].split('!').length === 2 && argValue[0].indexOf(this.parent.tic) === -1)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (argValue.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        else if (argValue[0].indexOf(':') > -1 || argValue[0].split(this.parent.tic).join('').trim() === '' ||
            argValue[0].split(this.parent.tic).join('').trim() === '!' || argValue[0].split('!').length === 2) {
            return errCollection[CommonErrors.Value];
        }
        value = this.parent.getValueFromArg(argValue[0]).trim();
        if (errCollection.indexOf(value) > -1) {
            return value;
        }
        if ((value.indexOf(this.parent.tic) > -1 && argValue[0].indexOf(this.parent.tic) === -1) ||
            value.split(this.parent.tic).length > 3) {
            return errCollection[CommonErrors.Value];
        }
        if (value.toUpperCase() === this.parent.trueValue) {
            value = '1';
        }
        else if (value.toUpperCase() === this.parent.falseValue) {
            value = '0';
        }
        else if (value.split('%').length === 2 && this.parent.isNumber(value.split('%')[0])) {
            value = (Number(value.split('%')[0]) / 100).toString();
        }
        value = this.parent.parseFloat(value.split(this.parent.tic).join(''));
        if (!isNaN(value)) {
            value = Math.PI * (value) / 180;
        }
        else {
            if (this.parent.isCellReference(argValue[0]) || argValue[0].indexOf(this.parent.tic) > -1) {
                return errCollection[CommonErrors.Value];
            }
            else {
                return errCollection[CommonErrors.Name];
            }
        }
        return value;
    };
    /**
     * @hidden
     * @param {string[]} args - specify the range.
     * @returns {string | number} - Compute the random between value.
     */
    BasicFormulas.prototype.ComputeRANDBETWEEN = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var min;
        var max;
        if (args.length === 1 && args[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (args.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var errCollection = this.parent.getErrorStrings();
        var processArgs = function (orgValue) {
            var actualValue;
            actualValue = _this.parent.getValueFromArg(orgValue);
            if (errCollection.indexOf(actualValue) > -1) {
                return actualValue;
            }
            if (_this.parent.isCellReference(orgValue)) {
                if (actualValue === '') {
                    actualValue = '0';
                }
                else if (orgValue.indexOf(':') > -1 || actualValue.match(/^(\d*\.\d+|\d+)\s*[+\-*/]\s*(\d*\.\d+|\d+)$/)) {
                    return errCollection[CommonErrors.Value];
                }
            }
            else {
                if (actualValue === '') {
                    return errCollection[CommonErrors.NA];
                }
                else if (orgValue.indexOf(_this.parent.tic) > -1 && _this.parent.removeTics(orgValue).match(/^(\d*\.\d+|\d+)\s*[+*]\s*(\d*\.\d+|\d+)$/)) {
                    return errCollection[CommonErrors.Value];
                }
                else if (actualValue.indexOf(_this.parent.tic) > -1) {
                    actualValue = _this.parent.removeTics(actualValue);
                    if (actualValue.indexOf(':') > -1) {
                        var values = actualValue.split(':');
                        if (values.length <= 3) {
                            if (!_this.parent.isNumber(values[0]) || !_this.parent.isNumber(values[1])) {
                                return errCollection[CommonErrors.Value];
                            }
                            var hours = Number(values[0]) + Number((Number(values[1]) / 60));
                            if (values.length === 3) {
                                if (!_this.parent.isNumber(values[2])) {
                                    return errCollection[CommonErrors.Value];
                                }
                                hours += Number(Number(values[2]) / 3600);
                            }
                            actualValue = (hours / 24).toString();
                        }
                        else {
                            return errCollection[CommonErrors.Value];
                        }
                    }
                }
                if (actualValue.split('%').length === 2 && _this.parent.isNumber(actualValue.split('%')[0])) {
                    actualValue = (Number(actualValue.split('%')[0]) * 0.01).toString();
                }
            }
            actualValue = parseFloat(actualValue);
            if (isNaN(actualValue)) {
                return errCollection[CommonErrors.Value];
            }
            return actualValue;
        };
        max = processArgs(args[1]);
        if (errCollection.indexOf(max) > -1) {
            return max;
        }
        min = processArgs(args[0]);
        if (errCollection.indexOf(min) > -1) {
            return min;
        }
        if (min === 0 && max === 0) {
            return '0';
        }
        else if (max < min) {
            return errCollection[CommonErrors.Num];
        }
        else {
            min = Math.ceil(min);
            max = Math.floor(max);
            return Math.floor((Math.random() * ((max - min) + 1)) + min);
        }
    };
    /**
     * @hidden
     * @param {string[]} argValue - specify the range.
     * @returns {string | number} - Compute the slope value.
     */
    BasicFormulas.prototype.ComputeSLOPE = function () {
        var _this = this;
        var argValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argValue[_i] = arguments[_i];
        }
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(argValue) || (argValue.length === 1 && argValue[0].trim() === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (argValue.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        else if (argValue[0] === '' || argValue[1] === '') {
            return errCollection[CommonErrors.Value];
        }
        var cellCollection = function (actuaValue) {
            if (actuaValue.indexOf(_this.parent.tic) === -1) {
                actuaValue = _this.parent.getCellCollection(actuaValue.split(_this.parent.tic).join(''));
            }
            else {
                actuaValue = undefined;
            }
            return actuaValue;
        };
        var yPoints = cellCollection(argValue[0].trim());
        var xPoints = cellCollection(argValue[1].trim());
        if (isNullOrUndefined(yPoints) || isNullOrUndefined(xPoints) || (yPoints.length < 2 && xPoints.length < 2)) {
            return errCollection[CommonErrors.DivZero];
        }
        else if (yPoints.length !== xPoints.length) {
            return errCollection[CommonErrors.NA];
        }
        var dataCollection = function (actuaValue) {
            actuaValue = _this.getDataCollection(actuaValue);
            for (var b = 0; b < actuaValue.length; b++) {
                if (errCollection.indexOf(actuaValue[b]) > -1) {
                    return actuaValue[b].toString();
                }
            }
            return actuaValue;
        };
        yPoints = dataCollection(yPoints);
        if (errCollection.indexOf(yPoints.toString()) > -1) {
            return yPoints.toString();
        }
        xPoints = dataCollection(xPoints);
        if (errCollection.indexOf(xPoints.toString()) > -1) {
            return xPoints.toString();
        }
        var sumXY = 0;
        var sumX2 = 0;
        var sumX = 0;
        var sumY = 0;
        var length = 0;
        for (var i = 0, len = xPoints.length; i < len; ++i) {
            if ((xPoints[i] !== '' && Number(xPoints[i]).toString() !== 'NaN') &&
                (yPoints[i] !== '' && Number(yPoints[i]).toString() !== 'NaN')) {
                sumXY += Number(xPoints[i]) * Number(yPoints[i]);
                sumX += Number(xPoints[i]);
                sumY += Number(yPoints[i]);
                sumX2 += Number(xPoints[i]) * Number(xPoints[i]);
                length++;
            }
        }
        var value = ((sumXY - (sumX * sumY) / length) / (sumX2 - (sumX * sumX) / length)).toString();
        if (value === 'NaN') {
            return errCollection[CommonErrors.DivZero];
        }
        return value;
    };
    /**
     * @hidden
     * @param {string[]} argValue - specify the range.
     * @returns {string | number} - Compute the intercept.
     */
    BasicFormulas.prototype.ComputeINTERCEPT = function () {
        var _this = this;
        var argValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argValue[_i] = arguments[_i];
        }
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(argValue) || (argValue.length === 1 && argValue[0].trim() === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (argValue.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        else if (argValue[0] === '' || argValue[1] === '') {
            return errCollection[CommonErrors.Value];
        }
        var cellCollection = function (actuaValue) {
            if (actuaValue.indexOf(_this.parent.tic) === -1) {
                actuaValue = _this.parent.getCellCollection(actuaValue.split(_this.parent.tic).join(''));
            }
            else {
                actuaValue = undefined;
            }
            return actuaValue;
        };
        var yValues = cellCollection(argValue[0].trim());
        var xValues = cellCollection(argValue[1].trim());
        if (isNullOrUndefined(yValues) || isNullOrUndefined(xValues) || (yValues.length < 2 && xValues.length < 2)) {
            return errCollection[CommonErrors.DivZero];
        }
        else if (yValues.length !== xValues.length) {
            return errCollection[CommonErrors.NA];
        }
        var dataCollection = function (actuaValue) {
            actuaValue = _this.getDataCollection(actuaValue);
            for (var b = 0; b < actuaValue.length; b++) {
                if (errCollection.indexOf(actuaValue[b]) > -1) {
                    return actuaValue[b];
                }
            }
            return actuaValue;
        };
        yValues = dataCollection(yValues);
        if (errCollection.indexOf(yValues.toString()) > -1) {
            return yValues.toString();
        }
        xValues = dataCollection(xValues);
        if (errCollection.indexOf(xValues.toString()) > -1) {
            return xValues.toString();
        }
        var sumY = 0;
        var sumX = 0;
        var length = 0;
        var sumXY = 0;
        var sumX2 = 0;
        var diff;
        var calculation = function (isSum) {
            for (var i = 0, len = xValues.length; i < len; ++i) {
                if ((yValues[i] !== '' && Number(yValues[i]).toString() !== 'NaN') &&
                    (xValues[i] !== '' && Number(xValues[i]).toString() !== 'NaN')) {
                    if (isSum) {
                        sumY += Number(yValues[i]);
                        sumX += Number(xValues[i]);
                        length++;
                    }
                    else {
                        diff = Number(xValues[i]) - sumX;
                        sumXY += diff * (Number(yValues[i]) - sumY);
                        sumX2 += diff * diff;
                    }
                }
            }
        };
        calculation(true);
        sumY = sumY / length;
        sumX = sumX / length;
        calculation(false);
        var value = (sumY - sumXY / sumX2 * sumX).toString();
        if (value === 'NaN') {
            return errCollection[CommonErrors.DivZero];
        }
        return value;
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {string | number} - Compute the value.
     */
    BasicFormulas.prototype.ComputeLN = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var cellvalue;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(logValue) || (logValue[0] === '' && logValue.length === 1)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (logValue.length === 0 || logValue.length > 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        cellvalue = this.parent.getValueFromArg(logValue[0]);
        if (errCollection.indexOf(cellvalue) > -1) {
            return cellvalue;
        }
        if (cellvalue.toUpperCase() === this.parent.trueValue) {
            cellvalue = '1';
        }
        else if (cellvalue.toUpperCase() === this.parent.falseValue) {
            cellvalue = '0';
        }
        if (!this.parent.isCellReference(logValue[0])) {
            cellvalue = this.parent.removeTics(cellvalue);
            if (cellvalue.trim() === '') {
                return errCollection[CommonErrors.Value];
            }
        }
        if (cellvalue.split('%').length === 2 && this.parent.isNumber(cellvalue.split('%')[0])) {
            cellvalue = (Number(cellvalue.split('%')[0]) * 0.01).toString();
        }
        cellvalue = this.parent.parseFloat(cellvalue);
        if (cellvalue <= 0) {
            return errCollection[CommonErrors.Num];
        }
        else if (isNaN(cellvalue)) {
            return errCollection[CommonErrors.Value];
        }
        return Math.log(cellvalue);
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {boolean | string} - Compute the Isnumber value.
     */
    BasicFormulas.prototype.ComputeISNUMBER = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var argArr = logValue;
        if (logValue.length === 1 && logValue[0] === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (logValue.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var orgValue = (this.parent.isCellReference(argArr[0])) ? this.parent.getValueFromArg(argArr[0]) :
            this.parent.getValueFromArg(argArr[0].split(this.parent.tic).join(''));
        if (orgValue.toString() === '' || logValue.toString().startsWith(this.parent.tic)) {
            return false;
        }
        var logVal = this.parent.parseFloat(orgValue);
        return !isNaN(logVal) ? true : false;
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {number | string} - Compute the round value.
     */
    BasicFormulas.prototype.ComputeROUND = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        if (!logValue.length || logValue.length === 1 || logValue.length > 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var argArr = logValue;
        if (logValue.length === 1) {
            var orgValue = (argArr[0].split(this.parent.tic).join('') === 'TRUE')
                ? '1'
                : (argArr[0].split(this.parent.tic).join('') === 'FALSE')
                    ? '0'
                    : argArr[0];
            if (isNaN(this.parent.parseFloat(orgValue))) {
                return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
            }
            return Math.round(this.parent.parseFloat(orgValue)).toString();
        }
        var numStr = this.parent.getValueFromArg(argArr[0]);
        if (this.parent.getErrorStrings().indexOf(numStr) > -1) {
            return numStr;
        }
        var digStr = this.parent.getValueFromArg(argArr[1]);
        if (this.parent.getErrorStrings().indexOf(digStr) > -1) {
            return digStr;
        }
        numStr = numStr === 'TRUE' ? '1' : numStr === 'FALSE' ? '0' : numStr;
        digStr = digStr === 'TRUE' ? '1' : digStr === 'FALSE' ? '0' : digStr;
        numStr = numStr.split(this.parent.tic).join('');
        digStr = digStr.split(this.parent.tic).join('');
        var isInvalidNumStr = isNaN(Number(numStr)) || numStr.trim() === '';
        var isInvalidDigStr = isNaN(Number(digStr)) || digStr.trim() === '';
        if (((argArr[0].indexOf('"') > -1 || this.parent.isCellReference(argArr[0])) && isInvalidNumStr)
            || ((argArr[1].indexOf('"') > -1 || this.parent.isCellReference(argArr[1])) && isInvalidDigStr)) {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if ((numStr === '' && digStr === '') || numStr === '') {
            return 0;
        }
        var x = this.parent.parseFloat(numStr);
        var digits = this.parent.parseFloat(digStr);
        var round;
        if (!isNaN(digits) && !isNaN(x) && digits > 0) {
            round = this.parent.parseFloat(this.preciseRound(x, digits, 'ROUND'));
        }
        else {
            var mult = Math.pow(10, -digits);
            round = Math.round(x / mult) * mult;
        }
        return round.toString();
    };
    BasicFormulas.prototype.preciseRound = function (numValue, decimalValue, formula) {
        var factor = Math.pow(10, decimalValue);
        var absValue = Math.abs(numValue) * factor;
        var sign = numValue >= 0 ? 1 : -1;
        var result = formula === 'ROUND' ? Math.round(absValue) : formula === 'ROUNDDOWN' ?
            Math.floor(absValue) : Math.ceil(absValue);
        return (sign * (result / factor)).toFixed(decimalValue);
    };
    /**
     * @hidden
     * @param {string[]} argArr - specify the log value.
     * @returns {boolean | string} - Compute the power value.
     */
    BasicFormulas.prototype.ComputePOWER = function () {
        var _this = this;
        var argArr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            argArr[_i] = arguments[_i];
        }
        var power;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(argArr) || (argArr.length === 1 && argArr[0].trim() === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (argArr.length > 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        else if (argArr[0].trim() === '' && argArr[1].trim() === '') {
            return errCollection[CommonErrors.Num];
        }
        var processArgs = function (actualValue) {
            var value = _this.parent.getValueFromArg(actualValue);
            if (errCollection.indexOf(value) > -1) {
                return value;
            }
            if (value.toUpperCase() === _this.parent.trueValue) {
                value = '1';
            }
            else if (value.toUpperCase() === _this.parent.falseValue) {
                value = '0';
            }
            if (value.indexOf(_this.parent.tic) > -1) {
                value = _this.parent.removeTics(value);
                if (actualValue.indexOf(_this.parent.tic) === -1 || value.trim() === '') {
                    return errCollection[CommonErrors.Value];
                }
            }
            if (value.split('%').length === 2 && _this.parent.isNumber(value.split('%')[0])) {
                value = (Number(value.split('%')[0]) / 100).toString();
            }
            else if (value.indexOf('/') > -1 && _this.parent.isNumber(value.split('/').join(''))) {
                return errCollection[CommonErrors.Num];
            }
            value = _this.parent.parseFloat(value);
            if (isNaN(value)) {
                return errCollection[CommonErrors.Value];
            }
            return value;
        };
        var numValue = processArgs(argArr[0]);
        if (errCollection.indexOf(numValue) > -1) {
            return numValue;
        }
        var powValue = processArgs(argArr[1]);
        if (errCollection.indexOf(powValue) > -1) {
            return powValue;
        }
        if (!isNaN(numValue) && !isNaN(powValue)) {
            if (numValue === 0 && powValue < 0) {
                return errCollection[CommonErrors.DivZero];
            }
            if (numValue === 0 && powValue === 0) {
                return errCollection[CommonErrors.Num];
            }
            power = Math.pow(numValue, powValue);
            if (isNaN(power) || power === Infinity) {
                return errCollection[CommonErrors.Num];
            }
        }
        else {
            return errCollection[CommonErrors.Value];
        }
        return power.toString();
    };
    /**
     * @hidden
     * @param {string[]} args - specify the args.
     * @returns {number | string} - Computes a positive square root of the given number.
     */
    BasicFormulas.prototype.ComputeSQRT = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var sqrtValue;
        var arrValue = args[0];
        if (args.length === 0 || args.length > 1 || arrValue === '') {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        else if (arrValue.split(this.parent.tic).join('').trim() === '') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if (this.parent.isCellReference(arrValue)) {
            sqrtValue = this.parent.getValueFromArg(arrValue) || '0';
            if (sqrtValue.indexOf(this.parent.tic) > -1) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            if (arrValue.indexOf(this.parent.tic) > -1 && (arrValue.split(this.parent.tic).join('') === this.parent.trueValue ||
                arrValue.split(this.parent.tic).join('') === this.parent.falseValue)) {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
            sqrtValue = this.parent.getValueFromArg(arrValue).split(this.parent.tic).join('');
        }
        if (this.parent.getErrorStrings().indexOf(sqrtValue) > -1) {
            return sqrtValue;
        }
        sqrtValue = sqrtValue === this.parent.trueValue ? '1' : sqrtValue === this.parent.falseValue ? '0' : sqrtValue;
        if (this.parent.parseFloat(sqrtValue) < 0) {
            return this.parent.getErrorStrings()[CommonErrors.Num];
        }
        else if (isNaN(this.parent.parseFloat(sqrtValue))) {
            var dateTimeCheck = { value: sqrtValue };
            this.parent.parentObject.notify(checkDateFormat, dateTimeCheck);
            if (dateTimeCheck.isDate || dateTimeCheck.isTime) {
                sqrtValue = dateTimeCheck.updatedVal;
            }
            else {
                return this.parent.getErrorStrings()[CommonErrors.Value];
            }
        }
        return Math.sqrt(this.parent.parseFloat(sqrtValue));
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {number | string} - Compute the log value.
     */
    BasicFormulas.prototype.ComputeLOG = function () {
        var _this = this;
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var orgNumValue;
        var orgBaseValue;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(logValue) || (logValue.length === 1 && logValue[0] === '')) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (logValue.length > 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var processArgs = function (orgValue) {
            var actualValue = _this.parent.getValueFromArg(orgValue);
            if (actualValue === _this.parent.trueValue) {
                actualValue = '1';
            }
            else if (actualValue === _this.parent.falseValue) {
                actualValue = '0';
            }
            if (!_this.parent.isCellReference(orgValue) && actualValue !== '') {
                if (actualValue.indexOf(_this.parent.tic) > -1 && errCollection.indexOf(actualValue.split(_this.parent.tic).join('')) === -1) {
                    actualValue = _this.parent.removeTics(actualValue);
                    if (actualValue.trim() === '') {
                        return errCollection[CommonErrors.Value];
                    }
                    else if (actualValue.indexOf(':') > -1) {
                        var values = actualValue.split(':');
                        if (values.length <= 3) {
                            if (!_this.parent.isNumber(values[0]) || !_this.parent.isNumber(values[1])) {
                                return errCollection[CommonErrors.Value];
                            }
                            var hours = Number(values[0]) + Number((Number(values[1]) / 60));
                            if (values.length === 3) {
                                if (!_this.parent.isNumber(values[2])) {
                                    return errCollection[CommonErrors.Value];
                                }
                                hours += Number(Number(values[2]) / 3600);
                            }
                            actualValue = (hours / 24).toString();
                        }
                        else {
                            return errCollection[CommonErrors.Value];
                        }
                    }
                }
                if (actualValue.split('%').length === 2 && _this.parent.isNumber(actualValue.split('%')[0])) {
                    actualValue = (Number(actualValue.split('%')[0]) * 0.01).toString();
                }
            }
            return actualValue;
        };
        if (!isNullOrUndefined(logValue[0])) {
            orgNumValue = processArgs(logValue[0]);
            if (errCollection.indexOf(orgNumValue) > -1) {
                return orgNumValue;
            }
            orgNumValue = this.parent.parseFloat(orgNumValue);
        }
        orgBaseValue = 10;
        if (!isNullOrUndefined(logValue[1])) {
            orgBaseValue = processArgs(logValue[1]);
            if (errCollection.indexOf(orgBaseValue) > -1) {
                return orgBaseValue;
            }
            orgBaseValue = this.parent.parseFloat(orgBaseValue);
        }
        orgNumValue = Number(orgNumValue);
        if (isNaN(orgNumValue) || isNaN(orgBaseValue)) {
            return errCollection[CommonErrors.Value];
        }
        else if (orgNumValue <= 0 || orgBaseValue <= 0) {
            return errCollection[CommonErrors.Num];
        }
        else if (orgBaseValue === 1) {
            return errCollection[CommonErrors.DivZero];
        }
        return ((Math.log(orgNumValue) / Math.LN10) / (Math.log(orgBaseValue) / Math.LN10)).toString();
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {boolean | string} - Compute the trunc value.
     */
    BasicFormulas.prototype.ComputeTRUNC = function () {
        var _this = this;
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var orgNumValue;
        var orgDigitValue = 0;
        var errCollection = this.parent.getErrorStrings();
        if (isNullOrUndefined(logValue) || (logValue[0] === '' && logValue.length === 1)) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (logValue.length === 0 || logValue.length > 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var processArgs = function (orgValue) {
            var actualValue = _this.parent.getValueFromArg(orgValue);
            if (errCollection.indexOf(actualValue) > -1) {
                return actualValue;
            }
            if (actualValue === _this.parent.trueValue) {
                actualValue = '1';
            }
            else if (actualValue === _this.parent.falseValue) {
                actualValue = '0';
            }
            else if (!_this.parent.isCellReference(orgValue)) {
                if (orgValue.indexOf(_this.parent.tic) > -1 && _this.parent.removeTics(orgValue).match(/^(\d*\.\d+|\d+)\s*[*]\s*(\d*\.\d+|\d+)$/)) {
                    actualValue = _this.parent.getValueFromArg(_this.parent.removeTics(orgValue));
                }
                else if (actualValue.indexOf(_this.parent.tic) > -1) {
                    actualValue = _this.parent.removeTics(actualValue);
                    if (actualValue.trim() === '') {
                        return errCollection[CommonErrors.Value];
                    }
                    else if (actualValue.indexOf(':') > -1) {
                        var values = actualValue.split(':');
                        if (values.length <= 3) {
                            if (!_this.parent.isNumber(values[0]) || !_this.parent.isNumber(values[1])) {
                                return errCollection[CommonErrors.Value];
                            }
                            var hours = Number(values[0]) + Number((Number(values[1]) / 60));
                            if (values.length === 3) {
                                if (!_this.parent.isNumber(values[2])) {
                                    return errCollection[CommonErrors.Value];
                                }
                                hours += Number(Number(values[2]) / 3600);
                            }
                            actualValue = (hours / 24).toString();
                        }
                        else {
                            return errCollection[CommonErrors.Value];
                        }
                    }
                }
                if (actualValue.split('%').length === 2 && _this.parent.isNumber(actualValue.split('%')[0])) {
                    actualValue = (Number(actualValue.split('%')[0]) * 0.01).toString();
                }
            }
            return actualValue;
        };
        if (!isNullOrUndefined(logValue[0])) {
            orgNumValue = processArgs(logValue[0]);
            if (errCollection.indexOf(orgNumValue) > -1) {
                return orgNumValue;
            }
            orgNumValue = this.parent.parseFloat(orgNumValue);
            if (isNaN(orgNumValue)) {
                return errCollection[CommonErrors.Value];
            }
        }
        if (!isNullOrUndefined(logValue[1])) {
            orgDigitValue = processArgs(logValue[1]);
            if (errCollection.indexOf(orgDigitValue) > -1) {
                return orgDigitValue;
            }
            orgDigitValue = this.parent.parseFloat(orgDigitValue);
            if (isNaN(orgDigitValue)) {
                return errCollection[CommonErrors.Value];
            }
        }
        orgDigitValue = Math.pow(10, Math.floor(orgDigitValue));
        orgNumValue = Number(orgNumValue);
        return ((orgNumValue < 0 ? -1 : 1) * Math.floor(orgDigitValue * Math.abs(orgNumValue)) / orgDigitValue).toString();
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value.
     * @returns {boolean | string} - Compute the expression.
     */
    BasicFormulas.prototype.ComputeEXP = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var orgNumValue;
        var errCollection = this.parent.getErrorStrings();
        if (logValue[0] === '' && logValue.length === 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidArguments];
        }
        else if (logValue.length !== 1) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        else if (logValue[0].split(this.parent.tic).join('').trim() === '') {
            return errCollection[CommonErrors.Value];
        }
        orgNumValue = this.parent.getValueFromArg(logValue[0]);
        if (errCollection.indexOf(orgNumValue) > -1) {
            return orgNumValue;
        }
        if (orgNumValue.indexOf(this.parent.tic) > -1 && (this.parent.isCellReference(logValue[0]) ||
            isNaN(Number(orgNumValue.split(this.parent.tic).join(''))))) {
            return errCollection[CommonErrors.Value];
        }
        orgNumValue = orgNumValue.split(this.parent.tic).join('');
        if (orgNumValue === this.parent.trueValue) {
            orgNumValue = '1';
        }
        else if ((orgNumValue === this.parent.falseValue) || (orgNumValue === '')) {
            orgNumValue = '0';
        }
        else if (orgNumValue.indexOf('%') > -1) {
            orgNumValue = (Number(orgNumValue.split('%')[0]) / 100).toString();
        }
        else if (orgNumValue.indexOf(':') > -1) {
            return '0';
        }
        var logNumValue = this.parent.parseFloat(orgNumValue);
        if (isNaN(logNumValue)) {
            return errCollection[CommonErrors.Value];
        }
        else if (logNumValue > 709) {
            return errCollection[CommonErrors.Num];
        }
        return Math.exp(logNumValue).toString();
    };
    /**
     * @hidden
     * @param {string[]} logValue - specify the log value
     * @returns {boolean | string} - compute the value.
     */
    BasicFormulas.prototype.ComputeGEOMEAN = function () {
        var logValue = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            logValue[_i] = arguments[_i];
        }
        var argArr = logValue;
        var sum = 1;
        var count = 0;
        var cellVal = 0;
        var cellStr = 0;
        var dev;
        var r;
        var s;
        var cell;
        if (logValue.length === 0) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if (argArr.length === 1 && argArr[0] === '') {
            return sum.toString();
        }
        var isBoolean;
        for (r = 0; r < argArr.length; r++) {
            if (argArr[r].indexOf(':') > -1) {
                if (argArr[0] === this.parent.tic) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
                cell = this.parent.getCellCollection(argArr[r].split(this.parent.tic).join(''));
                for (s = 0; s < cell.length; s++) {
                    cellVal = this.parent.getValueFromArg(cell[s]);
                    cellStr = cellVal.split(this.parent.tic).join('');
                    isBoolean = cellStr === this.parent.trueValue || cellStr === this.parent.falseValue;
                    dev = this.parent.parseFloat(cellVal);
                    if (dev <= 0) {
                        return this.parent.getErrorStrings()[CommonErrors.Num];
                    }
                    if (isBoolean || this.parent.getErrorStrings().indexOf(cellVal) > -1) {
                        continue;
                    }
                    else if (!isNaN(dev)) {
                        count++;
                        sum = sum * dev;
                    }
                }
            }
            else {
                cellVal = this.parent.getValueFromArg(argArr[r]);
                if (this.parent.getErrorStrings().indexOf(cellVal) > -1) {
                    return cellVal;
                }
                var cellStr_1 = cellVal.split(this.parent.tic).join('');
                if (cellVal.indexOf('"') > -1 && isNaN(this.parent.parseFloat(cellStr_1))) {
                    return this.parent.getErrorStrings()[CommonErrors.Value];
                }
                argArr[r] = argArr[r].startsWith('n') ? argArr[r].slice(1) : argArr[r];
                if ((cellVal === '' && argArr[r] === '')) {
                    return this.parent.getErrorStrings()[CommonErrors.Num];
                }
                if ((cellStr_1 === 'TRUE' || cellStr_1 === 'FALSE') && this.parent.isCellReference(argArr[r])) {
                    continue;
                }
                if (cellVal.length > 0) {
                    cellVal = cellVal.indexOf('"') > -1 ? cellStr_1 : cellVal;
                    cellVal = (cellVal.split(this.parent.tic).join('') === 'TRUE') ? '1' :
                        (cellVal.split(this.parent.tic).join('') === 'FALSE') ? '0' : cellVal;
                    if (!this.parent.isCellReference(argArr[r])) {
                        if (isNaN(this.parent.parseFloat(cellVal))) {
                            return this.parent.getErrorStrings()[CommonErrors.Value];
                        }
                    }
                    dev = this.parent.parseFloat(cellVal);
                    if (dev <= 0) {
                        return this.parent.getErrorStrings()[CommonErrors.Num];
                    }
                    else if (!isNaN(dev)) {
                        count++;
                        sum = sum * dev;
                    }
                }
            }
        }
        if (count > 0) {
            sum = Math.pow(sum, 1 / count);
        }
        return sum.toString();
    };
    /**
     * @hidden
     * @param {string[]} range - specify the args.
     * @returns {number | string} - Returns the square of the Pearson product moment correlation coefficient based on data points in known_y's and known_x's.
     */
    BasicFormulas.prototype.ComputeRSQ = function () {
        var range = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            range[_i] = arguments[_i];
        }
        var validCount = 0;
        var argArr = range;
        if (argArr.length !== 2) {
            return this.parent.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if (argArr[0] === '' || argArr[1] === '') {
            return this.parent.getErrorStrings()[CommonErrors.Value];
        }
        if (argArr[0].includes('"') || argArr[1].includes('"')) {
            return this.parent.getErrorStrings()[CommonErrors.NA];
        }
        if ((argArr[0].indexOf(':') === -1 && isCellReference(argArr[0])) && (argArr[1].indexOf(':') === -1 && isCellReference(argArr[1]))) {
            return this.parent.getErrorStrings()[CommonErrors.DivZero];
        }
        var yValuesRange = this.parent.getCellCollection(argArr[0]);
        var xValuesRange = this.parent.getCellCollection(argArr[1]);
        if ((yValuesRange.length !== xValuesRange.length)) {
            return this.parent.getErrorStrings()[CommonErrors.NA];
        }
        var xValues = this.getDataCollection(xValuesRange);
        for (var a = 0; a < xValues.length; a++) {
            if (this.parent.getErrorStrings().indexOf(xValues[a]) > -1) {
                return xValues[a];
            }
        }
        var yValues = this.getDataCollection(yValuesRange);
        for (var b = 0; b < yValues.length; b++) {
            if (this.parent.getErrorStrings().indexOf(yValues[b]) > -1) {
                return yValues[b];
            }
        }
        var xValue;
        var yValue;
        for (var i = 0; i < xValues.length; i++) {
            xValue = Number(xValues[i]);
            yValue = Number(yValues[i]);
            if (isNumber(xValue) && isNumber(yValue)) {
                validCount++;
            }
        }
        if (validCount <= 1) {
            return this.parent.getErrorStrings()[CommonErrors.DivZero];
        }
        if (validCount === 2) {
            return 1;
        }
        var meanArray = this.getMeanArray(xValues, yValues);
        var meanX = meanArray[0];
        var meanY = meanArray[1];
        var correlation = this.getCorrelation(xValues, yValues, meanX, meanY);
        return Math.pow(correlation, 2);
    };
    /**
     * @hidden
     * @param {string[]} xValues - specify the x values
     * @param {string[]} yValues - specify the y values
     * @param {number} meanX - specify the mean of x values
     * @param {number} meanY - specify the mean of y values
     * @returns {number} - Returns correlation value
     */
    BasicFormulas.prototype.getCorrelation = function (xValues, yValues, meanX, meanY) {
        var numerator = 0;
        var denominatorX = 0;
        var denominatorY = 0;
        var diffY;
        var diffX;
        for (var i = 0; i < xValues.length; i++) {
            if (isNumber(xValues[i]) && isNumber(yValues[i])) {
                diffX = Number(xValues[i]) - meanX;
                diffY = Number(yValues[i]) - meanY;
                numerator += diffX * diffY;
                denominatorX += Math.pow(diffX, 2);
                denominatorY += Math.pow(diffY, 2);
            }
        }
        var correlation = numerator / Math.sqrt(denominatorX * denominatorY);
        return correlation;
    };
    /**
     * @hidden
     * @param {string[]} xValues - specify the x values
     * @param {string[]} yValues - specify the y values
     * @returns {number[]} meanX - returns array of mean values of x and y values
     */
    BasicFormulas.prototype.getMeanArray = function (xValues, yValues) {
        var count = 0;
        var sumX = 0;
        var sumY = 0;
        var meanX = 0;
        var meanY = 0;
        for (var i = 0; i < xValues.length; i++) {
            if (isNumber(xValues[i]) && isNumber(yValues[i])) {
                sumX += Number(xValues[i]);
                sumY += Number(yValues[i]);
                count++;
            }
        }
        meanX = sumX / count;
        meanY = sumY / count;
        return [meanX, meanY];
    };
    BasicFormulas.prototype.getDataCollection = function (cells) {
        var cellsData = [];
        for (var i = 0, len = cells.length; i < len; i++) {
            cellsData.push(this.parent.getValueFromArg(cells[i]));
        }
        return cellsData;
    };
    /**
     * @hidden
     * @param {string} value - specify the value
     * @returns {number} - Returns parse double value.
     */
    BasicFormulas.prototype.parseDouble = function (value) {
        var val = this.parent.parseFloat(value.toString());
        return !isNaN(val) ? val : NaN;
    };
    /**
     * @hidden
     * @param {string} value - specify the value
     * @returns {string} - Returns spreadsheet display text.
     */
    BasicFormulas.prototype.spreadsheetDisplayText = function (value) {
        // eslint-disable-next-line
        if (this.parent.parentObject && this.parent.parentObject.element && this.parent.parentObject.element.classList.contains('e-spreadsheet') && this.parent.isCellReference(value)) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var indexes = this.parent.parentObject.getIndexes(value);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            value = this.parent.parentObject.getDisplayText(this.parent.parentObject.
                getActiveSheet().rows[indexes.startIdx].cells[indexes.endIdx]);
        }
        return value;
    };
    /**
     * @hidden
     * @param {string} value - specify the value
     * @returns {string} - Returns spreadsheet format.
     */
    BasicFormulas.prototype.spreadsheetFormat = function (value) {
        // eslint-disable-next-line
        if (this.parent.parentObject && this.parent.parentObject.element && this.parent.parentObject.element.classList.contains('e-spreadsheet') && this.parent.isCellReference(value)) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var index = this.parent.parentObject.getIndexes(value);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            value = this.parent.parentObject.getActiveSheet().rows[index.startIdx].cells[index.endIdx].format;
        }
        return value;
    };
    return BasicFormulas;
}());

var Parser = /** @class */ (function () {
    function Parser(parent) {
        this.emptyStr = '';
        this.storedStringText = this.emptyStr;
        this.sheetToken = '!';
        /** @hidden */
        this.tokenAdd = 'a';
        /** @hidden */
        this.tokenSubtract = 's';
        /** @hidden */
        this.tokenMultiply = 'm';
        /** @hidden */
        this.tokenDivide = 'd';
        /** @hidden */
        this.tokenLess = 'l';
        this.charEm = 'r';
        this.charEp = 'x';
        /** @hidden */
        this.tokenGreater = 'g';
        /** @hidden */
        this.tokenEqual = 'e';
        /** @hidden */
        this.tokenLessEq = 'k';
        /** @hidden */
        this.tokenGreaterEq = 'j';
        /** @hidden */
        this.tokenNotEqual = 'o';
        /** @hidden */
        this.tokenAnd = 'c';
        this.tokenEm = 'v';
        this.tokenEp = 't';
        /** @hidden */
        this.tokenOr = String.fromCharCode(126);
        this.charAnd = 'i';
        this.charLess = '<';
        this.charGreater = '>';
        this.charEqual = '=';
        this.charLessEq = 'f';
        this.charGreaterEq = 'h';
        this.charNoEqual = 'z';
        this.stringGreaterEq = '>=';
        this.stringLessEq = '<=';
        this.stringNoEqual = '<>';
        this.stringAnd = '&';
        this.stringOr = '^';
        this.charOr = 'w';
        this.charAdd = '+';
        this.charSubtract = '-';
        this.charMultiply = '*';
        this.charDivide = '/';
        this.fixedReference = '$';
        this.spaceString = ' ';
        this.ignoreBracet = false;
        /** @hidden */
        this.isError = false;
        /** @hidden */
        this.isFormulaParsed = false;
        this.findNamedRange = false;
        this.stringsColl = new Map();
        this.tokens = [
            this.tokenAdd, this.tokenSubtract, this.tokenMultiply, this.tokenDivide, this.tokenLess,
            this.tokenGreater, this.tokenEqual, this.tokenLessEq, this.tokenGreaterEq, this.tokenNotEqual, this.tokenAnd, this.tokenOr
        ];
        this.charNOTop = String.fromCharCode(167);
        this.specialSym = ['~', '@', '#', '?'];
        this.isFailureTriggered = false;
        this.parent = parent;
    }
    /**
     * @hidden
     * @param {string} text - specify the text
     * @param {string} fkey - specify the formula key
     * @returns {string} - returns parse.
     */
    Parser.prototype.parse = function (text, fkey) {
        var _this = this;
        if (this.parent.isTextEmpty(text)) {
            return text;
        }
        if (isExternalFileLink(text)) {
            return this.parent.getErrorStrings()[CommonErrors.Ref];
        }
        if (this.parent.getFormulaCharacter() !== String.fromCharCode(0) && this.parent.getFormulaCharacter() === text[0]) {
            text = text.substring(1);
        }
        if (this.parent.namedRanges.size > 0 || this.parent.storedData.size > 0) {
            text = this.checkForNamedRangeAndKeyValue(text);
            this.findNamedRange = false;
        }
        text = text.replace(/[-+*/&^]+/g, function (operators) {
            var firstOp = '';
            while (1 < operators.length) {
                switch (operators.substring(0, 2)) {
                    case '++':
                        operators = '+' + operators.substring(2);
                        break;
                    case '--':
                        operators = '+' + operators.substring(2);
                        break;
                    case '+-':
                        operators = '-' + operators.substring(2);
                        break;
                    case '-+':
                        operators = '-' + operators.substring(2);
                        break;
                    case '*+':
                        operators = '*' + operators.substring(2);
                        break;
                    case '/+':
                        operators = '/' + operators.substring(2);
                        break;
                    case '^+':
                        operators = '^' + operators.substring(2);
                        break;
                    case '&+':
                        operators = '&' + operators.substring(2);
                        break;
                    case '*-':
                    case '/-':
                    case '^-':
                    case '&-':
                        firstOp = operators.substring(0, 1);
                        operators = operators.substring(1);
                        break;
                    default:
                        throw new FormulaError(_this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidExpression], true);
                }
            }
            return firstOp + operators;
        });
        text = text.split('-' + '(' + '-').join('(');
        var formulaString = this.storeStrings(text);
        text = this.storedStringText;
        var i = 0;
        if (isNullOrUndefined(formulaString)) {
            text = text.split(' ').join('');
        }
        text = text.split('=>').join('>=');
        text = text.split('=<').join('<=');
        if (text[text.length - 1] !== this.parent.arithMarker || this.indexOfAny(text, this.tokens) !== (text.length - 2)) {
            text = text.toUpperCase();
        }
        if (text.indexOf(this.sheetToken) > -1) {
            var family = this.parent.getSheetFamilyItem(this.parent.grid);
            if (family.sheetNameToParentObject != null && family.sheetNameToParentObject.size > 0) {
                if (text[0] !== this.sheetToken.toString()) {
                    text = this.parent.setTokensForSheets(text);
                }
                var sheetToken = this.parent.getSheetToken(text.split(this.parent.tic).join(this.emptyStr));
                var scopedRange = this.checkScopedRange(text.split('"').join(this.emptyStr).split(this.sheetToken).join(''));
                if (isNullOrUndefined(sheetToken) && sheetToken !== '' && this.parent.namedRanges.size > 0 && scopedRange !== '') {
                    text = scopedRange;
                }
            }
        }
        text = this.markLibraryFormulas(text);
        try {
            text = this.formulaAutoCorrection(text);
        }
        catch (ex) {
            var args = {
                message: ex.message, exception: ex, isForceCalculable: ex.formulaCorrection,
                computeForceCalculate: false
            };
            if (!args.isForceCalculable) {
                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidExpression];
            }
            if (!this.isFailureTriggered) {
                this.parent.trigger('onFailure', args);
                this.isFailureTriggered = true;
            }
            if (args.isForceCalculable && args.computeForceCalculate) {
                text = this.formulaAutoCorrection(text, args);
                this.parent.storedData.get(fkey).formulaText = '=' + text;
            }
            else {
                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidExpression];
            }
        }
        if (!this.ignoreBracet) {
            i = text.indexOf(')');
            while (i > -1) {
                var k = text.substring(0, i).lastIndexOf('(');
                if (k === -1) {
                    throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.MismatchedParentheses]);
                }
                if (k === i - 1) {
                    throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.EmptyExpression]);
                }
                var s = this.emptyStr;
                if (this.ignoreBracet) {
                    s = this.parent.substring(text, k, i - k + 1);
                }
                else {
                    s = this.parent.substring(text, k + 1, i - k - 1);
                }
                try {
                    text = text.substring(0, k) + this.parseSimple(s) + text.substring(i + 1);
                }
                catch (ex) {
                    if (ex === this.parent.formulaErrorStrings[FormulasErrorsStrings.CircularReference]) {
                        throw ex;
                    }
                    var args = this.exceptionArgs(ex);
                    if (!this.isFailureTriggered) {
                        this.parent.trigger('onFailure', args);
                        this.isFailureTriggered = true;
                    }
                    var errorMessage = (typeof args.exception === 'string') ? args.exception : args.message;
                    return (this.parent.getErrorLine(ex) ? '' : '#' + this.parent.getErrorLine(ex) + ': ') + errorMessage;
                }
                i = text.indexOf(')');
            }
        }
        if (!this.ignoreBracet && text.indexOf('(') > -1) {
            throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.MismatchedParentheses]);
        }
        text = this.parseSimple(text);
        if (formulaString !== null && formulaString.size > 0) {
            text = this.setStrings(text, formulaString);
        }
        return text;
    };
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    Parser.prototype.exceptionArgs = function (ex) {
        return {
            message: ex.message, exception: ex, isForceCalculable: ex.formulaCorrection,
            computeForceCalculate: false
        };
    };
    Parser.prototype.formulaAutoCorrection = function (formula, args) {
        var arithemeticArr = ['*', '+', '-', '/', '^', '&'];
        var logicalSym = ['>', '=', '<'];
        var i = 0;
        var form = '';
        var op = '';
        var firstOp = '';
        var secondprevOp = '';
        var secondnextOp = '';
        var firstDigit = '';
        var secondDigit = '';
        var countDigit = 0;
        if (this.parent.formulaErrorStrings.indexOf(formula) > -1) {
            return formula;
        }
        else {
            if (this.indexOfAny(formula, this.specialSym) > -1) {
                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.InvalidExpression], false);
            }
            while (i < formula.length) {
                formula = formula.split('-*').join('-').split('/*').join('/').split('*/').join('*').split('-/').join('-').
                    split('*+').join('*').split('+*').join('+');
                if ((this.parent.isDigit(formula[i]) && ((formula.length > i + 1)
                    && (this.indexOfAny(formula[i + 1], arithemeticArr) > -1)) && ((formula.length > i + 2)
                    && (!isNullOrUndefined(formula[i + 2]) && this.indexOfAny(formula[i + 2], arithemeticArr) > -1))) &&
                    (formula[i + 2] !== '-' || (formula[i + 1] !== '*' && formula[i + 1] !== '/' && formula[i + 1] !== '^' && formula[i + 1] !== '&'))) {
                    if (args && args.computeForceCalculate) {
                        if (this.parent.isDigit(formula[i])) {
                            if (countDigit < 1) {
                                firstDigit = formula[i];
                                firstOp = formula[i + 1];
                                if (isNullOrUndefined(firstOp)) {
                                    firstOp = this.emptyStr;
                                }
                                firstOp = firstOp === '&' ? '' : firstOp;
                                countDigit = countDigit + 1;
                                form = form + firstDigit + firstOp;
                            }
                            else if (countDigit < 2) {
                                secondDigit = formula[i];
                                secondprevOp = formula[i - 1];
                                secondnextOp = formula[i + 1];
                                countDigit = 0;
                                if (secondprevOp === '-') {
                                    secondnextOp = isNullOrUndefined(secondnextOp) ? this.emptyStr : secondnextOp;
                                    secondnextOp = secondnextOp === '&' ? '' : secondnextOp;
                                    form = form + secondprevOp + secondDigit + secondnextOp;
                                }
                                else {
                                    secondnextOp = isNullOrUndefined(secondnextOp) ? this.emptyStr : secondnextOp;
                                    form = form + secondDigit + secondnextOp;
                                }
                            }
                            i = i + 2;
                        }
                        else {
                            form = (formula[i] === '-') ? form + formula[i] : form;
                            i = i + 1;
                        }
                    }
                    else {
                        throw this.parent.formulaErrorStrings[FormulasErrorsStrings.ImproperFormula];
                    }
                }
                else if ((this.parent.isDigit(formula[i]) || formula[i] === this.parent.rightBracket ||
                    this.parent.storedData.has(formula[i].toUpperCase())) && (isNullOrUndefined(formula[i + 1]) ||
                    this.indexOfAny(formula[i + 1], arithemeticArr) > -1)) {
                    op = isNullOrUndefined(formula[i + 1]) ? this.emptyStr : formula[i + 1];
                    op = op === '&' && formula[i + 2] !== '-' ? '' : op; // for the cases 5&3=>53 and 5&-3=>5-3.
                    form = formula[i - 1] === '-' ? form + formula[i - 1] + formula[i] + op : form + formula[i] + op;
                    i = i + 2;
                }
                else if (this.indexOfAny(formula[i], logicalSym) > -1 && !isNullOrUndefined(formula[i - 1]) &&
                    !isNullOrUndefined(formula[i + 1])) {
                    form = form + formula[i];
                    i = i + 1;
                }
                else if (formula[i] === 'q') {
                    while (formula[i] !== this.parent.leftBracket) {
                        form = form + formula[i];
                        i = i + 1;
                    }
                }
                else if (formula[i] === this.parent.leftBracket || formula[i] === this.parent.rightBracket ||
                    formula[i] === '{' || formula[i] === '}' || formula[i] === '(' ||
                    formula[i] === ')') {
                    form = form + formula[i];
                    i = i + 1;
                }
                else if (this.parent.isUpperChar(formula[i]) || formula[i].indexOf(':') > -1 || formula[i]
                    === this.parent.getParseArgumentSeparator() || (formula[i] === '%' && this.parent.isDigit(formula[i - 1]))) {
                    form = form + formula[i];
                    i = i + 1;
                }
                else if (formula[i] === this.parent.tic || formula[i] === ' ' || formula[i] ===
                    this.parent.getParseDecimalSeparator() || formula[i] === this.sheetToken || formula[i] === '$' ||
                    formula[i] === '_') {
                    form = form + formula[i];
                    i = i + 1;
                }
                else {
                    if (this.parent.isDigit(formula[i])) {
                        form = formula[i - 1] === '-' ? form + formula[i - 1] + formula[i] : form + formula[i];
                    }
                    if (formula[i] === '-' || formula[i] === '+') {
                        form = form + formula[i];
                        form = form.split('++').join('+').split('+-').join('-').split('-+').join('-');
                    }
                    if (formula[i] === '/' || formula[i] === '*' || formula[i] === '^') {
                        form = form + formula[i];
                    }
                    i = i + 1;
                }
            }
        }
        form = form === this.emptyStr ? formula : form;
        if (this.indexOfAny(form[form.length - 1], arithemeticArr) > -1) {
            form = form.substring(0, form.length - 1);
        }
        form = form.split('--').join('-').split('-+').join('-').split('+-').join('-');
        return form;
    };
    Parser.prototype.checkScopedRange = function (text) {
        var _this = this;
        var scopedRange = this.emptyStr;
        var b = 'NaN';
        var id = this.parent.getSheetID(this.parent.grid);
        var sheet = this.parent.getSheetFamilyItem(this.parent.grid);
        if (text[0] === this.sheetToken.toString()) {
            var i = text.indexOf(this.sheetToken, 1);
            var v = parseInt(text.substr(1, i - 1), 10);
            if (i > 1 && !this.parent.isNaN(v)) {
                text = text.substring(i + 1);
                id = v;
            }
        }
        var token = '!' + id.toString();
        if (sheet === null || sheet.sheetNameToToken == null) {
            return b;
        }
        sheet.sheetNameToToken.forEach(function (value, key) {
            if (sheet.sheetNameToToken.get(key).toString() === token + '!') {
                var s_1 = _this.emptyStr;
                _this.parent.namedRanges.forEach(function (value, key) {
                    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                    if (!isNullOrUndefined(_this.parent.parentObject)) {
                        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                        s_1 = _this.parent.parentObject.getActiveSheet().name + _this.sheetToken + text.toUpperCase();
                    }
                    else {
                        s_1 = sheet.sheetNameToToken.get(key).toUpperCase();
                    }
                    if (_this.parent.getNamedRanges().has(s_1)) {
                        scopedRange = (_this.parent.getNamedRanges().get(s_1)).toUpperCase();
                        b = scopedRange;
                    }
                });
            }
        });
        return b;
    };
    Parser.prototype.storeStrings = function (tempString) {
        var i = 0;
        var j = 0;
        var id = 0;
        var key = '';
        var storedString = null;
        var condition;
        var ticLoc = tempString.indexOf(this.parent.tic);
        if (ticLoc > -1) {
            i = tempString.indexOf(this.parent.tic);
            while (i > -1 && tempString.length > 0) {
                if (storedString === null) {
                    storedString = this.stringsColl;
                }
                j = i + 1 < tempString.length ? tempString.indexOf(this.parent.tic, i + 1) : -1;
                if (j === -1) {
                    throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.MismatchedTics]);
                }
                condition = this.parent.substring(tempString, i, j - i + 1);
                key = this.parent.tic + this.spaceString + id.toString() + this.parent.tic;
                storedString = storedString.set(key, condition);
                tempString = tempString.substring(0, i) + key + tempString.substring(j + 1);
                i = i + key.length;
                if (i <= tempString.length) {
                    i = tempString.indexOf(this.parent.tic, i);
                }
                id++;
            }
        }
        this.storedStringText = tempString;
        return storedString;
    };
    Parser.prototype.setStrings = function (text, formulaString) {
        for (var i = 0; i < formulaString.size; i++) {
            formulaString.forEach(function (value, key) {
                text = text.split(key).join(value);
            });
        }
        return text;
    };
    /**
     * @hidden
     * @param {string} formulaText - specify the formula text
     * @returns {string} - parse simple.
     */
    Parser.prototype.parseSimple = function (formulaText) {
        var needToContinue = true;
        var text = formulaText;
        if (text.length > 0 && text[0] === '+') {
            text = text.substring(1);
        }
        if (text === '#DIV/0!') {
            return '#DIV/0!';
        }
        if (text === '#NAME?') {
            return '#NAME?';
        }
        if (text === '') {
            return text;
        }
        if (this.parent.formulaErrorStrings.indexOf(text) > -1) {
            return text;
        }
        text = text.split(this.stringLessEq).join(this.charLessEq);
        text = text.split(this.stringGreaterEq).join(this.charGreaterEq);
        text = text.split(this.stringNoEqual).join(this.charNoEqual);
        text = text.split(this.stringAnd).join(this.charAnd);
        text = text.split(this.stringOr).join(this.charOr);
        text = text.split(this.fixedReference).join(this.emptyStr);
        needToContinue = true;
        var expTokenArray = [this.tokenEp, this.tokenEm];
        var mulTokenArray = [this.tokenMultiply, this.tokenDivide];
        var addTokenArray = [this.tokenAdd, this.tokenSubtract];
        var mulCharArray = [this.charMultiply, this.charDivide];
        var addCharArray = [this.charAdd, this.charSubtract];
        var compareTokenArray = [this.tokenLess, this.tokenGreater, this.tokenEqual, this.tokenLessEq,
            this.tokenGreaterEq, this.tokenNotEqual];
        var compareCharArray = [this.charLess, this.charGreater, this.charEqual, this.charLessEq,
            this.charGreaterEq, this.charNoEqual];
        var expCharArray = [this.charEp, this.charEm];
        var andTokenArray = [this.tokenAnd];
        var andCharArray = [this.charAnd];
        var orCharArray = [this.charOr];
        var orTokenArray = [this.tokenOr];
        text = this.parseSimpleOperators(text, expTokenArray, expCharArray);
        text = this.parseSimpleOperators(text, orTokenArray, orCharArray);
        if (needToContinue) {
            text = this.parseSimpleOperators(text, mulTokenArray, mulCharArray);
        }
        if (needToContinue) {
            text = this.parseSimpleOperators(text, addTokenArray, addCharArray);
        }
        if (needToContinue) {
            text = this.parseSimpleOperators(text, compareTokenArray, compareCharArray);
        }
        if (needToContinue) {
            text = this.parseSimpleOperators(text, andTokenArray, andCharArray);
        }
        return text;
    };
    /**
     * @hidden
     * @param {string} formulaText - specify the formula text
     * @param {string[]} markers -  specify the markers
     * @param {string[]} operators - specify the operators
     * @returns {string} - parse Simple Operators
     */
    Parser.prototype.parseSimpleOperators = function (formulaText, markers, operators) {
        if (this.parent.getErrorStrings().indexOf(formulaText) > -1) {
            return formulaText;
        }
        var text = formulaText;
        var i = 0;
        var op = '';
        for (var c = 0; c < operators.length; c++) {
            op = op + operators[c];
        }
        text = text.split('---').join('-').split('--').join('+').split(this.parent.getParseArgumentSeparator() + '-').join(this.parent.getParseArgumentSeparator() + 'u').split(this.parent.leftBracket + '-').join(this.parent.leftBracket + 'u').split('=-').join('=u');
        text = text.split(',+').join(',').split(this.parent.leftBracket + '+').join(this.parent.leftBracket).split('=+').join('=').split('>+').join('>').split('<+').join('<').split('/+').join('/').split('*+').join('*').split('++').join('+').split('*-').join('*u').split('/-').join('/u').split('w-').join('wu').split('i-').join('iu').toString();
        text = text.split('>-').join('>u').split('<-').join('<u').split('h-').join('hu').split('f-').join('fu').split('z-').join('zu');
        if (text.length > 0 && text[0] === '-') {
            text = text.substring(1).split('-').join(this.tokenOr);
            text = '0-' + text;
            text = this.parseSimpleOperators(text, [this.tokenSubtract], [this.charSubtract]);
            text = text.split(this.tokenOr).join('-');
        }
        else if (text.length > 0 && text[0] === '+') {
            text = text.substring(1);
        }
        else if (text.length > 0 && text[text.length - 1] === '+') {
            text = text.substring(0, text.length - 1);
        }
        try {
            if (this.indexOfAny(text, operators) > -1) {
                if (text.includes(' ')) {
                    var newText = '';
                    for (var index = 0; index < text.length; index++) {
                        var currChar = text[index];
                        if (operators.indexOf(currChar) >= 0) {
                            newText = newText.trim() + currChar;
                        }
                        else if (currChar === ' ' && operators.indexOf(newText[newText.length - 1]) >= 0) {
                            continue;
                        }
                        else {
                            newText += currChar;
                        }
                    }
                    text = newText;
                }
                i = this.indexOfAny(text, operators);
                var decimalSep = this.parent.getParseDecimalSeparator();
                while (i > -1) {
                    var left = '';
                    var right = '';
                    var leftIndex = 0;
                    var rightIndex = 0;
                    var isLeftBool = false;
                    var arithOp = ['*', '+', '-', '/', 'w', '=', '<', '>'];
                    var isNotOperator = text[i] === this.charNOTop;
                    var j = 0;
                    if (!isNotOperator) {
                        j = i - 1;
                        if (text[j] === this.parent.arithMarker) {
                            var k = this.findLeftMarker(text.substring(0, j - 1));
                            if (k < 0) {
                                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.CannotParse]);
                            }
                            left = this.parent.substring(text, k + 1, j - k - 1);
                            leftIndex = k + 1;
                        }
                        else if (text[j] === this.parent.rightBracket) {
                            var bracketCount = 0;
                            var k = j - 1;
                            while (k > 0 && (text[k] !== 'q' || bracketCount !== 0)) {
                                if (text[k] === 'q') {
                                    bracketCount--;
                                }
                                else if (text[k] === this.parent.rightBracket) {
                                    bracketCount++;
                                }
                                k--;
                            }
                            if (k < 0) {
                                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.CannotParse]);
                            }
                            left = this.parent.substring(text, k, j - k + 1);
                            leftIndex = k;
                        }
                        else if (text[j] === this.parent.tic[0]) {
                            var l = text.substring(0, j - 1).lastIndexOf(this.parent.tic);
                            if (l < 0) {
                                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.CannotParse]);
                            }
                            left = this.parent.substring(text, l, j - l + 1);
                            leftIndex = l;
                        }
                        else {
                            var period = false;
                            while (j > -1 && (this.parent.isDigit(text[j]) ||
                                (!period && (text[j] === decimalSep || text[j] === '%')))) {
                                if (!this.parent.isDigit(text[j]) && text[j] !== '%') {
                                    period = true;
                                }
                                j = j - 1;
                            }
                            if (j > -1 && period && text[j] === decimalSep) {
                                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.NumberContains2DecimalPoints]);
                            }
                            j = j + 1;
                            if (j === 0 || (j > 0 && !this.parent.isUpperChar(text[j - 1]))) {
                                left = 'n' + this.parent.substring(text, j, i - j);
                                leftIndex = j;
                            }
                            else if (j > 0 && text[j - 1] === 'E' && ((text.substring(j - 4, j) === 'TRUE' && (!isNullOrUndefined(text[j - 5]) ? arithOp.indexOf(text[j - 5]) > -1 : true)) ||
                                (text.substring(j - 5, j) === 'FALSE' && (!isNullOrUndefined(text[j - 6]) ? arithOp.indexOf(text[j - 6]) > -1 : true))) && (text.substring(j + 1, j + 5) === 'TRUE' || text.substring(j + 1, j + 6) === 'FALSE')) {
                                j = text.substring(j - 4, j) === 'TRUE' ? j - 4 : j - 5;
                                left = text.substring(j, i) === 'TRUE' ? 'n1' : (text.substring(j, i) === 'FALSE' ? 'n0' : left);
                                leftIndex = j;
                                isLeftBool = true;
                            }
                            else {
                                j = j - 1;
                                while (j > -1 && (this.parent.isUpperChar(text[j]) || // Check if character is uppercase alphabets.
                                    this.parent.isDigit(text[j]) || // Check if character is a digit.
                                    text[j] === '_')) { // Check if character is an underscore ('_'), for defined names cases.
                                    j = j - 1;
                                }
                                if (j > -1 && text[j] === this.sheetToken) {
                                    j = j - 1;
                                    while (j > -1 && text[j] !== this.sheetToken) {
                                        j = j - 1;
                                    }
                                    if (j > -1 && text[j] === this.sheetToken) {
                                        j = j - 1;
                                    }
                                }
                                if (j > -1 && text[j] === ':') {
                                    //// handle range operands
                                    j = j - 1;
                                    while (j > -1 && this.parent.isDigit(text[j])) {
                                        j = j - 1;
                                    }
                                    while (j > -1 && this.parent.isUpperChar(text[j])) {
                                        j = j - 1;
                                    }
                                    if (j > -1 && text[j] === this.sheetToken) {
                                        j--;
                                        while (j > -1 && text[j] !== this.sheetToken) {
                                            j--;
                                        }
                                        if (j > -1 && text[j] === this.sheetToken) {
                                            j--;
                                        }
                                    }
                                    j = j + 1;
                                    left = this.parent.substring(text, j, i - j);
                                    left = this.parent.getCellFrom(left);
                                }
                                else {
                                    var uFound = false;
                                    if (j > 0 && !this.parent.isUpperChar(text[j])) {
                                        uFound = text[j] === 'u' && text[j - 1] === this.parent.getParseArgumentSeparator();
                                    }
                                    if (!uFound) {
                                        j = j + 1;
                                    }
                                    left = this.parent.substring(text, j, i - j);
                                }
                                this.parent.updateDependentCell(left);
                                leftIndex = j;
                            }
                            if ((this.parent.namedRanges.size > 0 && this.parent.namedRanges.has(left.toUpperCase())) ||
                                (this.parent.storedData.has(left.toUpperCase()))) {
                                left = 'n' + this.checkForNamedRangeAndKeyValue(left);
                            }
                        }
                    }
                    else {
                        leftIndex = i;
                    }
                    if (i === text.length - 1) {
                        throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.ExpressionCannotEndWithAnOperator]);
                    }
                    else {
                        j = i + 1;
                        var uFound = text[j] === 'u'; // for 3*-2
                        if (uFound) {
                            j = j + 1;
                        }
                        if (text[j] === this.parent.tic[0]) {
                            var k = text.substring(j + 1).indexOf(this.parent.tic);
                            if (k < 0) {
                                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.CannotParse];
                            }
                            right = this.parent.substring(text, j, k + 2);
                            rightIndex = k + j + 2;
                        }
                        else if (text[j] === this.parent.arithMarker) {
                            var k = this.findRightMarker(text.substring(j + 1));
                            if (k < 0) {
                                throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.CannotParse]);
                            }
                            right = this.parent.substring(text, j + 1, k);
                            rightIndex = k + j + 2;
                        }
                        else if (text[j] === 'q') {
                            var bracketCount = 0;
                            var k = j + 1;
                            while (k < text.length && (text[k] !== this.parent.rightBracket || bracketCount !== 0)) {
                                if (text[k] === this.parent.rightBracket) {
                                    bracketCount++;
                                }
                                else if (text[k] === 'q') {
                                    bracketCount--;
                                }
                                k++;
                            }
                            if (k === text.length) {
                                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.CannotParse];
                            }
                            right = this.parent.substring(text, j, k - j + 1);
                            if (uFound) {
                                right = 'u' + right;
                            }
                            rightIndex = k + 1;
                        }
                        else if (this.parent.isDigit(text[j]) || text[j] === decimalSep) {
                            var period = (text[j] === decimalSep);
                            j = j + 1;
                            while (j < text.length && (this.parent.isDigit(text[j]) ||
                                (!period && text[j] === decimalSep))) {
                                if (text[j] === decimalSep) {
                                    period = true;
                                }
                                j = j + 1;
                            }
                            if (j < text.length && text[j] === '%') {
                                j += 1;
                            }
                            if (period && j < text.length && text[j] === decimalSep) {
                                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.NumberContains2DecimalPoints];
                            }
                            right = 'n' + this.parent.substring(text, i + 1, j - i - 1);
                            rightIndex = j;
                        }
                        else if (this.parent.isUpperChar(text[j]) || text[j] === this.sheetToken ||
                            text[j] === 'u') {
                            if (text[j] === this.sheetToken) {
                                j = j + 1;
                                while (j < text.length && text[j] !== this.sheetToken) {
                                    j = j + 1;
                                }
                            }
                            j = j + 1;
                            var jTemp = 0;
                            var inbracket = false;
                            while (j < text.length && (this.parent.isUpperChar(text[j]) || text[j] === '_'
                                || text[j] === decimalSep || text[j] === '[' || text[j] === ']' ||
                                text[j] === '#' || text[j] === ' ' || text[j] === '%' || text[j] ===
                                decimalSep && inbracket)) {
                                if (j !== text.length - 1 && text[j] === '[' && text[j + 1] === '[') {
                                    inbracket = true;
                                }
                                if (j !== text.length - 1 && text[j] === ']' && text[j + 1] === ']') {
                                    inbracket = false;
                                }
                                j++;
                                jTemp++;
                            }
                            var noCellReference = (j === text.length) || !this.parent.isDigit(text[j]);
                            if (jTemp > 1) {
                                while (j < text.length && (this.parent.isUpperChar(text[j]) ||
                                    this.parent.isDigit(text[j]) || text[j] === ' ' || text[j] === '_')) {
                                    j++;
                                }
                                noCellReference = true;
                            }
                            while (j < text.length && this.parent.isDigit(text[j])) {
                                j = j + 1;
                            }
                            if (j < text.length && text[j] === ':') {
                                j = j + 1;
                                if (j < text.length && text[j] === this.sheetToken) {
                                    j++;
                                    while (j < text.length && text[j] !== this.sheetToken) {
                                        j = j + 1;
                                    }
                                    if (j < text.length && text[j] === this.sheetToken) {
                                        j++;
                                    }
                                }
                                while (j < text.length && this.parent.isUpperChar(text[j])) {
                                    j = j + 1;
                                }
                                while (j < text.length && this.parent.isDigit(text[j])) {
                                    j = j + 1;
                                }
                                j = j - 1;
                                right = this.parent.substring(text, i + 1, j - i);
                                right = this.parent.getCellFrom(right);
                            }
                            else {
                                j = j - 1;
                                right = this.parent.substring(text, i + 1, j - i);
                                uFound = text[j] === 'u';
                                if (uFound) {
                                    right = 'u' + right;
                                }
                            }
                            if (noCellReference && right.startsWith(this.sheetToken)) {
                                noCellReference = !this.parent.isCellReference(right);
                            }
                            if (!noCellReference) {
                                this.parent.updateDependentCell(right);
                            }
                            if ((this.parent.namedRanges.size > 0 && this.parent.namedRanges.has(right.toUpperCase()))
                                || (this.parent.storedData.has(right.toUpperCase()))) {
                                right = 'n' + this.checkForNamedRangeAndKeyValue(right);
                            }
                            var isPrevArithOp = ['*', '+', '-', '/', 'w'].indexOf(text[j - right.length]) > -1;
                            right = right === 'TRUE' && (isLeftBool || isPrevArithOp) ? 'n1' : (right === 'FALSE' && (isLeftBool || isPrevArithOp) ? 'n0' : right);
                            rightIndex = j + 1;
                        }
                    }
                    var p = op.indexOf(text[i]);
                    var s = this.parent.arithMarker + left + right + markers[p] + this.parent.arithMarker;
                    if (leftIndex > 0) {
                        s = text.substring(0, leftIndex) + s;
                    }
                    if (rightIndex < text.length) {
                        s = s + text.substring(rightIndex);
                    }
                    s = s.split(this.parent.arithMarker2).join(this.parent.arithMarker.toString());
                    text = s;
                    i = this.indexOfAny(text, operators);
                }
            }
            else {
                if (text.length > 0 && (this.parent.isUpperChar(text[0]) || text[0] === this.sheetToken)) {
                    var isCharacter = true;
                    var checkLetter = true;
                    var oneTokenFound = false;
                    var textLen = text.length;
                    for (var k = 0; k < textLen; ++k) {
                        if (text[k] === this.sheetToken) {
                            if (k > 0 && !oneTokenFound) {
                                throw this.parent.getErrorStrings()[CommonErrors.Ref];
                            }
                            oneTokenFound = true;
                            k++;
                            while (k < textLen && this.parent.isDigit(text[k])) {
                                k++;
                            }
                            if (k === textLen || text[k] !== this.sheetToken) {
                                isCharacter = false;
                                break;
                            }
                        }
                        else {
                            if (!checkLetter && this.parent.isChar(text[k])) {
                                isCharacter = false;
                                break;
                            }
                            if (this.parent.isChar(text[k]) || this.parent.isDigit(text[k]) || text[k] ===
                                this.sheetToken) {
                                checkLetter = this.parent.isUpperChar(text[k]);
                            }
                            else {
                                isCharacter = false;
                                break;
                            }
                        }
                    }
                    if (isCharacter) {
                        this.parent.updateDependentCell(text);
                    }
                }
            }
            return text;
        }
        catch (ex) {
            if (ex === this.parent.formulaErrorStrings[FormulasErrorsStrings.CircularReference]) {
                throw ex;
            }
            return ex;
        }
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @param {string[]} operators - specify the operators
     * @returns {number} - returns index.
     */
    Parser.prototype.indexOfAny = function (text, operators) {
        for (var i = 0; i < text.length; i++) {
            if (operators.indexOf(text[i]) > -1) {
                return i;
            }
        }
        return -1;
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @returns {number} - find Left Marker.
     */
    Parser.prototype.findLeftMarker = function (text) {
        var ret = -1;
        if (text.indexOf(this.parent.arithMarker) > -1) {
            var bracketLevel = 0;
            for (var i = text.length - 1; i >= 0; --i) {
                if (text[i] === this.parent.rightBracket) {
                    bracketLevel--;
                }
                else if (text[i] === this.parent.leftBracket) {
                    bracketLevel++;
                }
                else if (text[i] === this.parent.arithMarker && bracketLevel === 0) {
                    ret = i;
                    break;
                }
            }
        }
        return ret;
    };
    /**
     * @hidden
     * @param {string} text - specify the text.
     * @returns {number} - find Right Marker.
     */
    Parser.prototype.findRightMarker = function (text) {
        var ret = -1;
        if (text.indexOf(this.parent.arithMarker) > -1) {
            var bracketLevel = 0;
            for (var j = 0; j < text.length; ++j) {
                if (text[j] === this.parent.rightBracket) {
                    bracketLevel--;
                }
                else if (text[j] === this.parent.leftBracket) {
                    bracketLevel++;
                }
                else if (text[j] === this.parent.arithMarker && bracketLevel === 0) {
                    ret = j;
                    break;
                }
            }
        }
        return ret;
    };
    /**
     * @hidden
     * @param {string} formula - specify the formula
     * @param {string} fKey - specify the formula key.
     * @returns {string} - parse formula.
     */
    Parser.prototype.parseFormula = function (formula, fKey) {
        if (formula.length > 0 && formula[0] === this.parent.getFormulaCharacter()) {
            formula = formula.substring(1);
        }
        if (formula.indexOf('#REF!') > -1) {
            return this.parent.getErrorStrings()[CommonErrors.Ref];
        }
        if (formula.length > 0 && formula[0] === '+') {
            formula = formula.substring(1);
        }
        try {
            this.isFailureTriggered = false;
            this.isError = false;
            formula = this.parse(formula.trim(), fKey);
            this.isFormulaParsed = true;
        }
        catch (ex) {
            var args = this.exceptionArgs(ex);
            if (!this.isFailureTriggered) {
                this.parent.trigger('onFailure', args);
                this.isFailureTriggered = true;
            }
            var errorMessage = (typeof args.exception === 'string') ? args.exception : args.message;
            formula = (isNullOrUndefined(this.parent.getErrorLine(ex)) ? '' : '#' + this.parent.getErrorLine(ex) + ': ') + errorMessage;
            this.isError = true;
        }
        return formula;
    };
    /**
     * @hidden
     * @param {string} formula - specify the formula
     * @returns {string} - mark library formulas.
     */
    Parser.prototype.markLibraryFormulas = function (formula) {
        var bracCount = 0;
        var rightParens = formula.indexOf(')');
        if (rightParens === -1) {
            formula = this.markNamedRanges(formula);
        }
        else {
            while (rightParens > -1) {
                var parenCount = 0;
                var leftParens = rightParens - 1;
                while (leftParens > -1 && (formula[leftParens] !== '(' || parenCount !== 0)) {
                    if (formula[leftParens] === ')') {
                        parenCount++;
                    }
                    // else if (formula[leftParens] === ')') {
                    //     parenCount--;
                    // }
                    leftParens--;
                }
                if (leftParens === -1) {
                    throw new FormulaError(this.parent.formulaErrorStrings[FormulasErrorsStrings.MismatchedParentheses]);
                }
                var i = leftParens - 1;
                while (i > -1 && (this.parent.isChar(formula[i]))) {
                    i--;
                }
                var len = leftParens - i - 1;
                var libFormula = this.parent.substring(formula, i + 1, len);
                if (len > 0 && !isNullOrUndefined(this.parent.getFunction(libFormula))) {
                    var substr = this.parent.substring(formula, leftParens, rightParens - leftParens + 1);
                    var argsSep = this.parent.getParseArgumentSeparator();
                    if (libFormula === 'AREAS') {
                        this.ignoreBracet = true;
                    }
                    else {
                        this.ignoreBracet = false;
                        if (libFormula.includes('IFS') && libFormula !== 'COUNTIFS' && substr.includes('{')) {
                            var leftBraceIdx = substr.indexOf('{');
                            var criteriaStr = this.parent.substring(substr, leftBraceIdx, substr.indexOf('}') - leftBraceIdx + 1);
                            substr = substr.split(criteriaStr).join(criteriaStr.split(argsSep).join(this.parent.tic + this.parent.tic));
                        }
                    }
                    try {
                        var args = void 0;
                        substr = substr.split('(').join('').split(')').join('');
                        substr = '(' + this.formulaAutoCorrection(substr, args) + ')';
                    }
                    catch (ex) {
                        var args = {
                            message: ex.message, exception: ex,
                            isForceCalculable: ex.formulaCorrection, computeForceCalculate: false
                        };
                        if (!args.isForceCalculable) {
                            throw this.parent.formulaErrorStrings[FormulasErrorsStrings.ImproperFormula];
                        }
                        if (!this.isFailureTriggered) {
                            this.parent.trigger('onFailure', args);
                            this.isFailureTriggered = true;
                            bracCount = bracCount + 1;
                        }
                        args.computeForceCalculate = bracCount > 0 ? true : args.computeForceCalculate;
                        if (args.isForceCalculable) {
                            if (args.computeForceCalculate) {
                                substr = substr.split('(').join('').split(')').join('');
                                substr = '(' + this.formulaAutoCorrection(substr, args) + ')';
                            }
                            else {
                                throw this.parent.formulaErrorStrings[FormulasErrorsStrings.ImproperFormula];
                            }
                        }
                        else {
                            throw this.parent.formulaErrorStrings[FormulasErrorsStrings.ImproperFormula];
                        }
                    }
                    substr = this.markNamedRanges(substr);
                    substr = this.swapInnerParens(substr);
                    substr = this.addParensToArgs(substr);
                    var id = substr.lastIndexOf(argsSep);
                    if (id === -1) {
                        if (substr.length > 2 && substr[0] === '(' && substr[substr.length - 1] === ')') {
                            if (substr[1] !== '{' && substr[1] !== '(') {
                                substr = substr.substring(0, substr.length - 1) + '}' + substr.substring(substr.length - 1);
                                substr = substr[0] + '{' + substr.substring(1);
                            }
                        }
                    }
                    formula = formula.substring(0, i + 1) + 'q' + this.parent.substring(formula, i + 1, len) +
                        (substr.split('(').join(this.parent.leftBracket))
                            .split(')').join(this.parent.rightBracket) + formula.substring(rightParens + 1);
                }
                else if (len > 0) {
                    return this.parent.getErrorStrings()[CommonErrors.Name];
                }
                else {
                    var s = this.emptyStr;
                    if (leftParens > 0) {
                        s = formula.substring(0, leftParens);
                    }
                    s = s + '{' + this.parent.substring(formula, leftParens + 1, rightParens - leftParens - 1) + '}';
                    if (rightParens < formula.length) {
                        s = s + formula.substring(rightParens + 1);
                    }
                    s = this.markNamedRanges(s);
                    formula = s;
                }
                rightParens = formula.indexOf(')');
            }
        }
        formula = (formula.split('{').join('(')).split('}').join(')');
        return formula;
    };
    /**
     * @hidden
     * @param {string} fSubstr - specify the string
     * @returns {string} - swap inner parens.
     */
    Parser.prototype.swapInnerParens = function (fSubstr) {
        if (fSubstr.length > 2) {
            fSubstr = fSubstr[0] + fSubstr.substr(1, fSubstr.length - 2).split('(').join('{').split(')').join('}') + fSubstr[fSubstr.length - 1];
        }
        return fSubstr;
    };
    /**
     * @hidden
     * @param {string} fSubstr - specify the string
     * @returns {string} - add parens to args.
     */
    Parser.prototype.addParensToArgs = function (fSubstr) {
        if (fSubstr.length === 0) {
            return this.emptyStr;
        }
        var rightSides = [];
        rightSides.push(this.parent.getParseArgumentSeparator());
        rightSides.push(this.parent.rightBracket);
        var id = fSubstr.lastIndexOf(this.parent.getParseArgumentSeparator());
        var k = 0;
        if (id === -1) {
            if (fSubstr.length > 2 && fSubstr[0] === '(' && fSubstr[fSubstr.length - 1] === ')') {
                if (fSubstr[1] !== '{' && fSubstr[1] !== '(') {
                    fSubstr = fSubstr.substring(0, fSubstr.length - 1) + '}' + fSubstr.substring(fSubstr.length - 1);
                    fSubstr = fSubstr[0] + '{' + fSubstr.substring(1);
                }
                else {
                    var marker = ['+', '-', '*', '/'];
                    id = this.lastIndexOfAny(fSubstr, marker);
                    if (k === 0 && fSubstr[fSubstr.length - 1] === ')') {
                        k = fSubstr.length - 1;
                    }
                    if (k > 0) {
                        if (fSubstr[id + 1] !== '{' && fSubstr[id - 1] === '}') {
                            fSubstr = fSubstr.substr(0, k) + '}' + fSubstr.substr(k);
                            fSubstr = fSubstr.substr(0, id + 1) + '{' + fSubstr.substr(id + 1);
                        }
                    }
                }
            }
        }
        else {
            var oneTimeOnly = true;
            while (id > -1) {
                var j = this.indexOfAny(fSubstr.substring(id + 1, fSubstr.length), rightSides);
                if (j >= 0) {
                    j = id + j + 1;
                }
                else if (j === -1 && fSubstr[fSubstr.length - 1] === ')') {
                    j = fSubstr.length - 1;
                }
                if (j > 0) {
                    if (fSubstr[id + 1] !== '{' && fSubstr[j - 1] !== '}' && fSubstr[j - 1] !== '¢') {
                        fSubstr = fSubstr.substr(0, j).trim() + '}' + fSubstr.substr(j);
                        fSubstr = fSubstr.substr(0, id + 1) + '{' + fSubstr.substr(id + 1).trim();
                    }
                }
                id = fSubstr.substr(0, id).lastIndexOf(this.parent.getParseArgumentSeparator());
                if (oneTimeOnly && id === -1 && fSubstr[0] === '(') {
                    id = 0;
                    oneTimeOnly = false;
                }
            }
        }
        fSubstr = fSubstr.split('{}').join(this.emptyStr);
        return fSubstr;
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @param {string[]} operators - specify the operators
     * @returns {number} - returns last Index Of Any.
     */
    Parser.prototype.lastIndexOfAny = function (text, operators) {
        for (var i = text.length - 1; i > -1; i--) {
            if (operators.indexOf(text[i]) > -1) {
                return i;
            }
        }
        return -1;
    };
    /**
     * @hidden
     * @param {string} formula - specify the formula
     * @returns {string} - mark Named Ranges.
     */
    Parser.prototype.markNamedRanges = function (formula) {
        var markers = [')', this.parent.getParseArgumentSeparator(), '}', '+', '-', '*', '/', '<', '>', '=', '&', ':'];
        var i = (formula.length > 0 && (formula[0] === '(' || formula[0] === '{')) ? 1 : 0;
        if (formula.indexOf('#N/A') > -1) {
            formula = formula.split('#N/A').join('#N~A');
        }
        if (formula.indexOf('#DIV/0!') > -1) {
            formula = formula.split('#DIV/0!').join('#DIV~0!');
        }
        var end = this.indexOfAny(formula.substring(i), markers);
        while (end > -1 && end + i < formula.length) {
            var scopedRange = this.emptyStr;
            var s = null;
            if ((this.parent.substring(formula, i, end)).indexOf('[') > -1) {
                s = this.getTableRange(this.parent.substring(formula, i, end));
            }
            else if (this.parent.storedData.has(this.parent.substring(formula, i, end))) {
                s = this.checkForNamedRangeAndKeyValue(this.parent.substring(formula, i, end));
            }
            else if (this.parent.namedRanges.has(this.parent.substring(formula, i, end))) {
                s = this.checkForNamedRangeAndKeyValue(this.parent.substring(formula, i, end));
            }
            if (isNullOrUndefined(s)) {
                scopedRange = this.checkScopedRange(this.parent.substring(formula, i, end));
                if (scopedRange !== 'NaN') {
                    this.findNamedRange = true;
                    s = scopedRange;
                }
                else if (this.parent.substring(formula, i, end).startsWith(this.sheetToken.toString())) ;
                if (!isNullOrUndefined(s) && this.findNamedRange) {
                    if (s.indexOf(this.fixedReference) > -1) {
                        s = s.split(this.fixedReference).join(this.emptyStr);
                    }
                }
            }
            if (!isNullOrUndefined(s)) {
                s = s.toUpperCase();
                s = this.parent.setTokensForSheets(s);
                s = this.markLibraryFormulas(s);
            }
            if (!isNullOrUndefined(s) && s !== this.emptyStr) {
                formula = formula.substring(0, i) + s + formula.substring(i + end);
                i += s.length + 1;
            }
            else {
                i += end + 1;
                while (i < formula.length && !this.parent.isUpperChar(formula[i]) && formula[i] !== this.sheetToken) {
                    i++;
                }
            }
            end = i;
            if (i < formula.length - 1 && formula[i] === '{') {
                i = i + 1;
            }
            end = this.indexOfAny(formula.substring(i), markers);
            while (end === 0 && i < formula.length - 1) {
                i++;
                end = this.indexOfAny(formula.substring(i), markers);
            }
            if ((end === -1 || formula.substring(i).indexOf('[') > -1) && i < formula.length) {
                if (formula.substring(i).indexOf('[') > -1) {
                    s = this.getTableRange(formula.substring(i));
                }
                else {
                    if (this.parent.storedData.has(formula.substring(i))) {
                        s = this.parent.storedData.size > 0 ? this.checkForNamedRangeAndKeyValue(formula.substring(i)) : s;
                    }
                    else {
                        s = this.parent.namedRanges.size > 0 ? this.checkForNamedRangeAndKeyValue(formula.substring(i)) : s;
                    }
                }
                if (isNullOrUndefined(s)) {
                    scopedRange = this.checkScopedRange(formula.substring(i));
                    if (scopedRange !== 'NaN') {
                        s = scopedRange;
                    }
                }
                if (!isNullOrUndefined(s) && s !== this.emptyStr) {
                    s = s.toUpperCase();
                    s = this.parent.setTokensForSheets(s);
                    s = this.markLibraryFormulas(s);
                    if (s != null) {
                        var val = formula.substring(i);
                        if (val[val.length - 1] === ')') {
                            formula = formula.substring(0, i) + s + ')';
                        }
                        else {
                            formula = formula.substring(0, i) + s;
                        }
                        i += s.toString().length + 1;
                    }
                }
                end = (i < formula.length) ? this.indexOfAny(formula.substring(i), markers) : -1;
            }
        }
        if (formula.indexOf('#N~A') > -1) {
            formula = formula.split('#N~A').join('#N/A');
        }
        if (formula.indexOf('#DIV~0!') > -1) {
            formula = formula.split('#DIV~0!').join('#DIV/0!');
        }
        return formula;
    };
    /**
     * @hidden
     * @param {string} text - specify the text.
     * @returns {string} - check For Named Range And Key Value
     */
    Parser.prototype.checkForNamedRangeAndKeyValue = function (text) {
        var scopedRange = this.emptyStr;
        if (text.indexOf('[') > -1) {
            var namerangeValue = this.getTableRange(text);
            if (!isNullOrUndefined(namerangeValue)) {
                this.findNamedRange = true;
                text = namerangeValue;
            }
        }
        scopedRange = this.checkScopedRange(text);
        if (scopedRange !== 'NaN') {
            this.findNamedRange = true;
            text = scopedRange;
        }
        else {
            if (text.indexOf(this.sheetToken) > -1) {
                var sheet = this.parent.getSheetFamilyItem(this.parent.grid);
                var value = text.split('"').join(this.emptyStr);
                value = value.substr(0, value.indexOf(this.sheetToken));
                if (sheet.sheetNameToToken.has(value.toUpperCase())) {
                    /* eslint-disable */
                    var sheetIndex = parseInt(sheet.sheetNameToToken.get(value.toUpperCase()).split(this.sheetToken).join(this.emptyStr));
                    // if (!ej.isNullOrUndefined(this.parentObject) && this.parentObject.pluginName == "ejSpreadsheet") {
                    //     var name = text.replace(value, this.parentObject.model.sheets[(sheetIndex + 1)].sheetInfo.text.toUpperCase()).split("'").join(this._string_empty);
                    //     if (this.getNamedRanges().length > 0 && this.getNamedRanges().contains(name.toUpperCase())) {
                    //         text = name;
                    //     }
                    // }
                    /* tslint-enable */
                }
            }
            if (this.parent.storedData.size > 0 && this.parent.storedData.has(text)) {
                text = 'A' + this.parent.colIndex(text);
            }
            if (this.parent.namedRanges.size > 0 && this.parent.namedRanges.has(text.toUpperCase())) {
                if (!isNullOrUndefined(this.parent.parentObject)) {
                    text = this.parse(this.parent.namedRanges.get(text.toUpperCase()));
                }
                else {
                    text = this.parse(this.parent.namedRanges.get(text.toUpperCase()));
                    text = this.parent.setTokensForSheets(text);
                    if (text.indexOf(this.fixedReference) > -1) {
                        text.split(this.fixedReference).join(this.emptyStr);
                    }
                    this.findNamedRange = true;
                }
            }
            if (this.findNamedRange) {
                if (text[0] !== '!' && text[0] !== 'q' && text[0] !== 'bq') {
                    text = this.parent.setTokensForSheets(text);
                    if (text.indexOf(this.fixedReference) > -1) {
                        text = text.split(this.fixedReference).join(this.emptyStr);
                    }
                }
            }
        }
        return text;
    };
    Parser.prototype.getTableRange = function (text) {
        text = text.replace(' ', this.emptyStr).toUpperCase();
        var name = text.replace(']', this.emptyStr).replace('#DATA', this.emptyStr);
        var tableName = name;
        if (name.indexOf(this.parent.getParseArgumentSeparator()) > -1) {
            tableName = name.substring(0, name.indexOf(this.parent.getParseArgumentSeparator())).replace('[', this.emptyStr);
            name = name.replace('[', this.emptyStr).replace(this.parent.getParseArgumentSeparator(), '_');
        }
        var range = this.emptyStr;
        return name.toUpperCase();
    };
    Parser.prototype.findNextEndIndex = function (formula, loc) {
        var count = 0;
        var l = loc;
        var found = false;
        while (!found && loc < formula.length) {
            if (formula[l] === '[') {
                count++;
            }
            else if (formula[l] === ']') {
                count--;
                if (count === 0) {
                    found = true;
                }
            }
            loc++;
        }
        loc = loc - l;
        return loc;
    };
    return Parser;
}());

var __extends$4 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the calculate library.
 */
var Calculate = /** @class */ (function (_super) {
    __extends$4(Calculate, _super);
    /**
     * Base constructor for creating Calculate library.
     *
     * @param {Object} parent - specify the parent
     */
    function Calculate(parent) {
        var _this = _super.call(this, null, null) || this;
        _this.lFormulas = new Map();
        /** @hidden */
        _this.storedData = new Map();
        _this.keyToRowsMap = new Map();
        _this.rowsToKeyMap = new Map();
        /** @hidden */
        _this.rightBracket = String.fromCharCode(161);
        /** @hidden */
        _this.leftBracket = String.fromCharCode(162);
        /** @hidden */
        _this.sheetToken = '!';
        _this.emptyString = '';
        _this.leftBrace = '{';
        _this.rightBrace = '}';
        _this.cell = _this.emptyString;
        _this.cellPrefix = '!0!A';
        _this.treatEmptyStringAsZero = false;
        /** @hidden */
        _this.tic = '"';
        /** @hidden */
        _this.singleTic = '\'';
        /** @hidden */
        _this.trueValue = 'TRUE';
        /** @hidden */
        _this.falseValue = 'FALSE';
        _this.parseDecimalSeparator = '.';
        /** @hidden */
        _this.arithMarker = String.fromCharCode(180);
        /** @hidden */
        _this.arithMarker2 = _this.arithMarker + _this.arithMarker;
        _this.dependentCells = null;
        _this.dependentFormulaCells = null;
        _this.minValue = Number.MIN_SAFE_INTEGER;
        _this.maxValue = Number.MAX_SAFE_INTEGER;
        _this.categoryCollection = ['All'];
        _this.dependencyLevel = 0;
        /** @hidden */
        _this.randomValues = new Map();
        /** @hidden */
        _this.isRandomVal = false;
        /** @hidden */
        _this.randCollection = [];
        /** @hidden */
        _this.dependencyCollection = [];
        /** @hidden */
        _this.uniqueRange = [];
        /**
         * @hidden
         */
        _this.formulaErrorStrings = [
            'binary operators cannot start an expression',
            'cannot parse',
            'bad library',
            'invalid char in front of',
            'number contains 2 decimal points',
            'expression cannot end with an operator',
            'invalid characters following an operator',
            'invalid character in number',
            'mismatched parentheses',
            'unknown formula name',
            'requires a single argument',
            'requires 3 arguments',
            'invalid Math argument',
            'requires 2 arguments',
            '#NAME?',
            'too complex',
            '#CIRCULARREF!',
            'missing formula',
            'improper formula',
            'invalid expression',
            'cell empty',
            'bad formula',
            'empty expression',
            '',
            'mismatched string quotes',
            'wrong number of arguments',
            'invalid arguments',
            'iterations do not converge',
            'Control is already registered',
            'Calculation overflow',
            'Missing sheet',
            'cannot_parse',
            'expression_cannot_end_with_an_operator',
            '#SPILL!',
            '#DIV/0!'
        ];
        _this.errorStrings = null;
        _this.parseArgumentSeparator = ',';
        _this.dateTime1900 = new Date(1900, 0, 1, 0, 0, 0);
        _this.isParseDecimalSeparatorChanged = false;
        _this.isArgumentSeparatorChanged = false;
        _this.sheetFamilyID = 0;
        _this.defaultFamilyItem = null;
        _this.sheetFamiliesList = null;
        _this.modelToSheetID = null;
        /** @hidden */
        _this.tokenCount = 0;
        _this.sortedSheetNames = null;
        _this.tempSheetPlaceHolder = String.fromCharCode(133);
        /** @hidden */
        _this.namedRanges = new Map();
        _this.formulaInfoTable = null;
        _this.millisecondsOfaDay = 24 * 60 * 60 * 1000;
        _this.parseDateTimeSeparator = '/';
        new BasicFormulas(_this);
        _this.parentObject = isNullOrUndefined(parent) ? _this : parent;
        _this.grid = _this.parentObject;
        _this.parser = new Parser(_this);
        return _this;
    }
    Object.defineProperty(Calculate.prototype, "libraryFormulas", {
        get: function () {
            return this.lFormulas;
        },
        set: function (formulaColl) {
            this.lFormulas.set(formulaColl.fName, { handler: formulaColl.handler, category: formulaColl.category, description: formulaColl.description });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * To get the argument separator to split the formula arguments.
     *
     * @returns {string} - To get the argument separator to split the formula arguments.
     */
    Calculate.prototype.getParseArgumentSeparator = function () {
        var seperator = ',';
        if (!this.isArgumentSeparatorChanged && seperator !== this.parseArgumentSeparator) {
            this.parseArgumentSeparator = seperator;
        }
        return this.parseArgumentSeparator;
    };
    /**
     * To set the argument separator to split the formula arguments.
     *
     * @param {string} value - Argument separator based on the culture.
     * @returns {void} - To set the argument separator to split the formula arguments.
     */
    Calculate.prototype.setParseArgumentSeparator = function (value) {
        this.parseArgumentSeparator = value;
        this.isArgumentSeparatorChanged = true;
    };
    /**
     * To get the date separator to split the date value.
     *
     * @returns {string} - To get the date separator to split the date value.
     */
    Calculate.prototype.getParseDateTimeSeparator = function () {
        return this.parseDateTimeSeparator;
    };
    /**
     * To set whether the empty string is treated as zero or not.
     *
     * @param {boolean} value - specify the boolean.
     * @returns {void} - To set whether the empty string is treated as zero or not.
     */
    Calculate.prototype.setTreatEmptyStringAsZero = function (value) {
        this.treatEmptyStringAsZero = value;
    };
    /**
     * To get whether the empty string is treated as zero or not.
     *
     * @returns {boolean} - To get whether the empty string is treated as zero or not.
     */
    Calculate.prototype.getTreatEmptyStringAsZero = function () {
        return this.treatEmptyStringAsZero;
    };
    /**
     * To set the date separator to split the date value.
     *
     * @param {string} value - Argument separator based on the culture.
     * @returns {void} - To set the date separator to split the date value.
     */
    Calculate.prototype.setParseDateTimeSeparator = function (value) {
        this.parseDateTimeSeparator = value;
    };
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Calculate.prototype.onPropertyChanged = function (newProp, oldProp) {
        /** code snippets */
    };
    Calculate.prototype.getModuleName = function () {
        return 'calculate';
    };
    /**
     * @hidden
     * @returns {string} - get Formula Character.
     */
    Calculate.prototype.getFormulaCharacter = function () {
        return '=';
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @returns {boolean} - Returns boolean value.
     */
    Calculate.prototype.isUpperChar = function (text) {
        var charCode = text.charCodeAt(0);
        return charCode > 64 && charCode < 91;
    };
    Calculate.prototype.resetKeys = function () {
        this.storedData.clear();
        this.keyToRowsMap.clear();
        this.rowsToKeyMap.clear();
    };
    /**
     * @hidden
     * @param {string} cellRef -  specify the cell reference
     * @returns {void} - update Dependent Cell
     */
    Calculate.prototype.updateDependentCell = function (cellRef) {
        var _this = this;
        var formulaCell = this.cell;
        if (formulaCell !== this.emptyString) {
            var family = this.getSheetFamilyItem(this.grid);
            if (family.sheetNameToParentObject) {
                if (!formulaCell.includes(this.sheetToken)) {
                    formulaCell = family.parentObjectToToken.get(this.grid) + formulaCell;
                }
                if (!cellRef.includes(this.sheetToken)) {
                    cellRef = family.parentObjectToToken.get(this.grid) + cellRef;
                }
            }
            if (formulaCell !== cellRef) {
                var dependentCellMap = this.getDependentCells();
                if (!dependentCellMap.has(cellRef)) {
                    dependentCellMap.set(cellRef, []);
                }
                var dependentCells = dependentCellMap.get(cellRef);
                if (dependentCells.indexOf(formulaCell) === -1) {
                    var formulaDependentCellMap_1 = this.getDependentFormulaCells();
                    var cellRefObj_1 = {};
                    var checkCircularReference_1 = function (refCell) {
                        if (formulaDependentCellMap_1.has(refCell)) {
                            var formalaRefCells = formulaDependentCellMap_1.get(refCell);
                            if (formalaRefCells.has(formulaCell)) {
                                throw _this.formulaErrorStrings[FormulasErrorsStrings.CircularReference];
                            }
                            else if (!cellRefObj_1[refCell]) {
                                cellRefObj_1[refCell] = true;
                                formalaRefCells.forEach(function (refCell) {
                                    checkCircularReference_1(refCell);
                                });
                            }
                        }
                    };
                    checkCircularReference_1(cellRef);
                    dependentCells.push(formulaCell);
                    if (!formulaDependentCellMap_1.has(formulaCell)) {
                        formulaDependentCellMap_1.set(formulaCell, new Map());
                        formulaDependentCellMap_1.get(formulaCell).set(cellRef, cellRef);
                    }
                    else if (!formulaDependentCellMap_1.get(formulaCell).has(cellRef)) {
                        formulaDependentCellMap_1.get(formulaCell).set(cellRef, cellRef);
                    }
                }
            }
        }
    };
    /**
     * @hidden
     * @returns {Map<string, string[]>} - get Dependent Cells
     */
    Calculate.prototype.getDependentCells = function () {
        if (this.dependentCells == null) {
            this.dependentCells = new Map();
        }
        return this.dependentCells;
    };
    /**
     * @hidden
     * @returns {Map<string, Map<string, string>>} - get Dependent Formula Cells
     */
    Calculate.prototype.getDependentFormulaCells = function () {
        if (this.isSheetMember()) {
            var family = this.getSheetFamilyItem(this.grid);
            if (family.sheetDependentFormulaCells == null) {
                family.sheetDependentFormulaCells = new Map();
            }
            return family.sheetDependentFormulaCells;
        }
        else {
            if (this.dependentFormulaCells == null) {
                this.dependentFormulaCells = new Map();
            }
            return this.dependentFormulaCells;
        }
    };
    /**
     * To get library formulas collection.
     *
     * @returns {Map<string, Function>} - To get library formulas collection.
     */
    Calculate.prototype.getLibraryFormulas = function () {
        return this.lFormulas;
    };
    /**
     * To get library function.
     *
     * @param {string} libFormula - Library formula to get a corresponding function.
     * @returns {Function} - To get library function.
     */
    Calculate.prototype.getFunction = function (libFormula) {
        if (this.getLibraryFormulas().has(libFormula.toUpperCase())) {
            return this.getLibraryFormulas().get(libFormula.toUpperCase()).handler;
        }
        else {
            return null;
        }
    };
    /**
     * @hidden
     * @param {string} val - specify the value.
     * @returns {Date} - convert integer to date.
     */
    Calculate.prototype.intToDate = function (val) {
        var dateVal = Number(val);
        dateVal = (dateVal > 0 && dateVal < 1) ? (1 + dateVal) : (dateVal === 0) ? 1 : dateVal;
        if (dateVal > 60) {
            dateVal -= 1; // Due to leap year issue of 1900 in MSExcel.
        }
        var startDate = new Date('01/01/1900');
        var startDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds());
        return new Date(new Date(((dateVal - 1) * (1000 * 3600 * 24)) + startDateUTC).toUTCString().replace(' GMT', ''));
    };
    Calculate.prototype.getFormulaInfoTable = function () {
        if (this.isSheetMember()) {
            var family = this.getSheetFamilyItem(this.grid);
            if (family.sheetFormulaInfotable === null) {
                family.sheetFormulaInfotable = new Map();
            }
            return family.sheetFormulaInfotable;
        }
        else {
            if (this.formulaInfoTable === null) {
                this.formulaInfoTable = new Map();
            }
            return this.formulaInfoTable;
        }
    };
    /**
     * To get the formula text.
     *
     * @returns {void} - To get the formula text.
     */
    Calculate.prototype.getParseDecimalSeparator = function () {
        var seperator = '.';
        if (!this.isParseDecimalSeparatorChanged && seperator !== this.parseDecimalSeparator) {
            this.parseDecimalSeparator = seperator;
        }
        return this.parseDecimalSeparator;
    };
    /**
     * To get the formula text.
     *
     * @param {string} value - Specifies the decimal separator value.
     * @returns {void} - To get the formula text.
     */
    Calculate.prototype.setParseDecimalSeparator = function (value) {
        this.parseDecimalSeparator = value;
        this.isParseDecimalSeparatorChanged = true;
    };
    /**
     * @hidden
     * @param {string} cellRef -  specify the cell reference
     * @returns {string} - get sheet token.
     */
    Calculate.prototype.getSheetToken = function (cellRef) {
        var i = 0;
        var temp = this.emptyString;
        if (i < cellRef.length && cellRef[i] === this.sheetToken) {
            i++;
            while (i < cellRef.length && cellRef[i] !== this.sheetToken) {
                i++;
            }
            temp = cellRef.substring(0, i + 1);
        }
        if (i < cellRef.length) {
            return temp;
        }
        throw this.formulaErrorStrings[FormulasErrorsStrings.BadIndex];
    };
    /**
     * @hidden
     * @param {Object} grd - specify the id
     * @returns {number} - get sheet id.
     */
    Calculate.prototype.getSheetID = function (grd) {
        var family = this.getSheetFamilyItem(grd);
        if (family.sheetNameToParentObject != null && family.sheetNameToParentObject.size > 0) {
            var token = family.parentObjectToToken.get(grd);
            if (token) {
                token = token.split(this.sheetToken).join(this.emptyString);
                var id = this.parseFloat(token);
                if (!this.isNaN(id)) {
                    return id;
                }
            }
        }
        return -1;
    };
    /**
     * @hidden
     * @param {string | number} value - specify the value.
     * @returns {number} - parse float
     */
    Calculate.prototype.parseFloat = function (value) {
        var convertedNum = Number(value);
        if (isNaN(convertedNum) && typeof value === 'string' && value.includes(',')) {
            convertedNum = Number(value.split(',').join(''));
        }
        return convertedNum;
    };
    /**
     * To get the row index of the given cell.
     *
     * @param {string} cell - Cell address for getting row index.
     * @returns {number} - To get the row index of the given cell.
     */
    Calculate.prototype.rowIndex = function (cell) {
        var i = 0;
        var isLetter = false;
        if (i < cell.length && cell[i] === this.sheetToken) {
            i++;
            while (i < cell.length && cell[i] !== this.sheetToken) {
                i++;
            }
            i++;
        }
        while (i < cell.length && this.isChar(cell[i])) {
            isLetter = true;
            i++;
        }
        var result = parseInt(cell.substring(i), 10);
        if (i < cell.length && !this.isNaN(result)) {
            return result;
        }
        if (isLetter) {
            return -1;
        }
        throw this.formulaErrorStrings[FormulasErrorsStrings.BadIndex];
    };
    /**
     * To get the column index of the given cell.
     *
     * @param {string} cell - Cell address for getting column index.
     * @returns {number} - To get the column index of the given cell.
     */
    Calculate.prototype.colIndex = function (cell) {
        var j = 0;
        var k = 0;
        cell = cell.toUpperCase();
        if (j < cell.length && cell[j] === this.sheetToken) {
            j++;
            while (j < cell.length && cell[j] !== this.sheetToken) {
                j++;
            }
            j++;
        }
        while (j < cell.length && this.isChar(cell[j])) {
            var charCode = cell[j].charCodeAt(0);
            k = k * 26 + charCode - 64;
            j++;
        }
        if (k === 0) {
            return -1;
        }
        return k;
    };
    /**
     * To get the valid error strings.
     *
     * @hidden
     * @returns {string[]} - to get error strings.
     */
    Calculate.prototype.getErrorStrings = function () {
        if (this.errorStrings === null) {
            this.errorStrings = ['#N/A', '#VALUE!', '#REF!', '#DIV/0!', '#NUM!', '#NAME?', '#NULL!', '#CALC!'];
        }
        return this.errorStrings;
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @param {number} startIndex - specify the start index
     * @param {number} length - specify the length
     * @returns {string} - Returns sub string
     */
    Calculate.prototype.substring = function (text, startIndex, length) {
        return text.substring(startIndex, length + startIndex);
    };
    /**
     * @hidden
     * @param {string} c - specify the characer of the string
     * @returns {boolean} - Return the boolean type
     */
    Calculate.prototype.isChar = function (c) {
        if ((c.charCodeAt(0) >= 65 && c.charCodeAt(0) <= 90) || (c.charCodeAt(0) >= 97 && c.charCodeAt(0) <= 122)) {
            return true;
        }
        return false;
    };
    /**
     * @hidden
     * @param {Object} model - specify the model
     * @param {Object} calcId - specify the calculate instance id.
     * @returns {CalcSheetFamilyItem} - get Sheet Family Item.
     */
    Calculate.prototype.getSheetFamilyItem = function (model, calcId) {
        if (this.sheetFamilyID === 0) {
            if (this.defaultFamilyItem == null) {
                this.defaultFamilyItem = new CalcSheetFamilyItem();
            }
            return this.defaultFamilyItem;
        }
        if (this.sheetFamiliesList == null) {
            this.sheetFamiliesList = new Map();
        }
        if (calcId === undefined) {
            calcId = this.modelToSheetID.get(model);
        }
        if (!this.sheetFamiliesList.has(calcId)) {
            this.sheetFamiliesList.set(calcId, new CalcSheetFamilyItem());
        }
        return this.sheetFamiliesList.get(calcId);
    };
    /**
     * Register a key value pair for formula.
     *
     * @param {string} key - Key for formula reference .
     * @param {string | number} value - Value for the corresponding key.
     * @returns {void} - Register a key value pair for formula.
     */
    Calculate.prototype.setKeyValue = function (key, value) {
        key = key.toUpperCase();
        var str = value.toString().trim();
        if (!this.storedData.get(key) || str.indexOf(this.leftBrace) === 0) {
            this.storedData.set(key, new FormulaInfo());
            this.keyToRowsMap.set(key, this.keyToRowsMap.size + 1);
            this.rowsToKeyMap.set(this.rowsToKeyMap.size + 1, key);
        }
        var fInfo = this.storedData.get(key);
        if (fInfo.getFormulaText() != null && fInfo.getFormulaText().length > 0 && fInfo.getFormulaText() !== str) {
            var s1 = this.cellPrefix + this.keyToRowsMap.get(key).toString();
            var formulaDependent = this.getDependentFormulaCells().get(s1);
            if (formulaDependent != null) {
                this.clearFormulaDependentCells(s1);
            }
        }
        if (str.length > 0 && str[0] === this.getFormulaCharacter()) {
            fInfo.setFormulaText(str);
        }
        else if (fInfo.getFormulaValue() !== str) {
            fInfo.setFormulaText('');
            fInfo.setParsedFormula('');
            fInfo.setFormulaValue(str);
        }
    };
    /**
     * @hidden
     * @param {string} cell - specify the cell
     * @returns {void} - clears the  Formula Dependent Cells.
     */
    Calculate.prototype.clearFormulaDependentCells = function (cell) {
        var _this = this;
        var dependentFormula = this.getDependentFormulaCells().get(cell);
        if (dependentFormula) {
            dependentFormula.forEach(function (value, key) {
                var s = key;
                var dependent = _this.getDependentCells().get(s);
                _this.arrayRemove(dependent, cell);
                if (dependent.length === 0) {
                    _this.getDependentCells().delete(s);
                }
            });
            this.getDependentFormulaCells().delete(cell);
        }
    };
    Calculate.prototype.arrayRemove = function (array, value) {
        var index = array.indexOf(value);
        if (index !== -1) {
            array.splice(index, 1);
        }
        return array;
    };
    /**
     * Register a key value pair for formula.
     *
     * @param {string} key - Key for getting the corresponding value.
     * @returns {string | number} - to get key value.
     */
    Calculate.prototype.getKeyValue = function (key) {
        key = key.toUpperCase();
        if (this.storedData.has(key) !== null) {
            var fInfo = this.storedData.get(key);
            var fText = fInfo.getFormulaText();
            if (fText.length > 0 && fText[0] === this.getFormulaCharacter()) {
                this.cell = this.cellPrefix + this.keyToRowsMap.get(key).toString();
                fText = fText.substring(1);
                try {
                    fInfo.setParsedFormula(this.parser.parseFormula(fText, key));
                }
                catch (ex) {
                    var args = {
                        message: ex.message, exception: ex, isForceCalculable: false,
                        computeForceCalculate: false
                    };
                    this.trigger('onFailure', args);
                    fInfo.setFormulaValue(args.message);
                    return this.storedData.get(key).getFormulaValue();
                }
                try {
                    fInfo.setFormulaValue(this.computeFormula(fInfo.getParsedFormula()));
                }
                catch (ex) {
                    var args = {
                        message: ex.message, exception: ex, isForceCalculable: false,
                        computeForceCalculate: false
                    };
                    this.trigger('onFailure', args);
                    var errorMessage = (typeof args.exception === 'string') ? args.exception : args.message;
                    return (isNullOrUndefined(this.getErrorLine(ex)) ? '' : '#' + this.getErrorLine(ex) + ': ') + errorMessage;
                }
            }
            return this.storedData.get(key).getFormulaValue();
        }
        else {
            return this.emptyString;
        }
    };
    Calculate.prototype.getNamedRanges = function () {
        return this.namedRanges;
    };
    /**
     * Adds a named range to the NamedRanges collection.
     *
     * @param {string} name - Name of the named range.
     * @param {string} range - Range for the specified name.
     * @returns {boolean} - Adds a named range to the NamedRanges collection.
     */
    Calculate.prototype.addNamedRange = function (name, range) {
        var sheetScopeName = name.split(this.sheetToken);
        if (sheetScopeName.length > 1) {
            var sheetId = (this.getSheetId(this.grid)).toString();
            var family = this.getSheetFamilyItem(sheetId);
            if (!family.parentObjectToToken.get(sheetId)) {
                return false;
            }
            name = sheetScopeName[0] + this.sheetToken + sheetScopeName[1].toUpperCase();
        }
        else {
            name = name.toUpperCase();
        }
        this.namedRanges.set(name, range);
        return true;
    };
    /**
     * Update the sheet name changes in the named range collection.
     *
     * @hidden
     * @param {string} pName - Previous name of the sheet.
     * @param {string} name -  Current name of the sheet.
     * @returns {void} - Update the sheet name changes in the named range collection.
     */
    Calculate.prototype.updateNamedRange = function (pName, name) {
        var updatedRange = new Map();
        this.namedRanges.forEach(function (value, key) {
            var updatedKey = key;
            if (key.includes(pName)) {
                var range = key.split('!');
                range[0] = name;
                updatedKey = range.join('!');
            }
            updatedRange.set(updatedKey, value);
        });
        this.namedRanges = updatedRange;
    };
    /**
     * Remove the specified named range form the named range collection.
     *
     * @param {string} name - Name of the specified named range.
     * @returns {boolean} - Remove the specified named range form the named range collection.
     */
    Calculate.prototype.removeNamedRange = function (name) {
        name = name.toUpperCase();
        if (this.namedRanges.get(name) != null) {
            this.namedRanges.delete(name);
            return true;
        }
        return false;
    };
    /**
     * @hidden
     * @param {number} col - specify the column
     * @returns {string} - to convert the alpha.
     */
    Calculate.prototype.convertAlpha = function (col) {
        var arrCol = [];
        var n = 0;
        var charText = 'A';
        while (col > 0) {
            col--;
            var aCharValue = charText.charCodeAt(0);
            arrCol[n] = String.fromCharCode(col % 26 + aCharValue);
            col = parseInt((col / 26).toString(), 10);
            n++;
        }
        var arr = [];
        for (var i = 0; i < n; i++) {
            arr[n - i - 1] = arrCol[i];
        }
        return arr.join('');
    };
    /**
     * @hidden
     * @param {string} cellRange - specify the cell range.
     * @returns {string} - to get cell collection.
     */
    Calculate.prototype.getCellCollection = function (cellRange) {
        if (cellRange.indexOf(':') < 0) {
            if (!this.isCellReference(cellRange)) {
                return cellRange.split(this.getParseArgumentSeparator());
            }
            else {
                cellRange = cellRange + ':' + cellRange;
            }
        }
        var token = this.emptyString;
        var sheetTokenIndex = cellRange.indexOf(this.sheetToken);
        if (sheetTokenIndex > -1) {
            var index = sheetTokenIndex;
            var s = index + 1;
            while (s < cellRange.length) {
                if (cellRange[s] === this.sheetToken) {
                    token = cellRange.substr(0, s + 1);
                    break;
                }
                s++;
            }
        }
        var i = cellRange.indexOf(':');
        var row1;
        var row2;
        var col1;
        var col2;
        if (i > 0 && this.isChar(cellRange[i - 1])) {
            var k = i - 2;
            while (k >= 0 && this.isDigit(cellRange[k])) {
                k--;
            }
        }
        row1 = this.rowIndex(this.substring(cellRange, 0, i));
        row2 = this.rowIndex(this.substring(cellRange, i + 1, i + cellRange.length - i - 1));
        col1 = this.colIndex(this.substring(cellRange, 0, i));
        col2 = this.colIndex(this.substring(cellRange, i + 1, i + cellRange.length - i - 1));
        if (row1 > row2) {
            i = row2;
            row2 = row1;
            row1 = i;
        }
        if (col1 > col2) {
            i = col2;
            col2 = col1;
            col1 = i;
        }
        var cells = [];
        var j;
        var c = 0;
        for (i = row1; i <= row2; i++) {
            for (j = col1; j <= col2; j++) {
                cells[c] = token + this.emptyString + this.convertAlpha(j) + i.toString();
                c++;
            }
        }
        return cells;
    };
    /**
     * Compute the given formula.
     *
     * @param {string} formulaText - Specifies to compute the given formula.
     * @param {boolean} isFromComputeExpression - Specifies to confirm it was called from the ComputeExpression function.
     * @returns {string | number} - compute the given formula
     */
    Calculate.prototype.computeFormula = function (formulaText, isFromComputeExpression) {
        return this.calculateFormula(formulaText, false, isFromComputeExpression);
    };
    Calculate.prototype.calculateFormula = function (formulaText, refresh, isFromComputeExpression) {
        var _this = this;
        var parsedText;
        var lastIndexOfq;
        var formulatResult;
        var nestedFormula = false;
        var fNested;
        if (this.parser.isError) {
            return formulaText;
        }
        if (!this.parser.isFormulaParsed) {
            parsedText = this.parser.parseFormula(formulaText);
        }
        else {
            parsedText = formulaText;
        }
        this.parser.isFormulaParsed = false;
        try {
            lastIndexOfq = this.findLastIndexOfq(parsedText);
            if (lastIndexOfq > 0) {
                nestedFormula = true;
            }
            if (parsedText !== this.emptyString && lastIndexOfq > -1) {
                var i = lastIndexOfq + 1;
                var _loop_1 = function () {
                    if (parsedText[i] !== this_1.rightBracket) {
                        i++;
                        return "continue";
                    }
                    var sFormula = parsedText.substring(lastIndexOfq, i + 1);
                    var libFormula = sFormula.split(this_1.leftBracket)[0].split('q').join(this_1.emptyString);
                    var args = void 0;
                    if (this_1.getLibraryFormulas().get(libFormula.toUpperCase()).isCustom) {
                        args = sFormula.substring(sFormula.indexOf(this_1.leftBracket) + 1, sFormula.indexOf(this_1.rightBracket))
                            .split(this_1.getParseArgumentSeparator());
                        var j = 0;
                        var customArgs = [];
                        var cellCol = void 0;
                        for (j = 0; j < args.length; j++) {
                            if (args[j].includes(':') && this_1.isCellReference(args[j])) {
                                cellCol = this_1.getCellCollection(args[j]);
                                if (cellCol.length > 1) {
                                    customArgs.push(args[j]);
                                    cellCol.forEach(function (cell) {
                                        _this.updateDependentCell(cell);
                                    });
                                }
                                else {
                                    customArgs.push(this_1.getValueFromArg(args[j]));
                                }
                            }
                            else {
                                customArgs.push(this_1.getValueFromArg(args[j]));
                            }
                        }
                        args = customArgs;
                    }
                    else {
                        var argStr = sFormula.substring(sFormula.indexOf(this_1.leftBracket) + 1, sFormula.indexOf(this_1.rightBracket));
                        args = [];
                        var separator = this_1.getParseArgumentSeparator();
                        var parameter = '';
                        var isInString = void 0;
                        for (var idx = 0, len = argStr.length - 1; idx <= len; idx++) {
                            if (argStr[idx] === '"') {
                                isInString = !isInString;
                            }
                            if (argStr[idx] === separator && !isInString) {
                                args.push(parameter);
                                parameter = '';
                                if (idx === len) {
                                    args.push(parameter);
                                }
                            }
                            else {
                                parameter += argStr[idx];
                                if (idx === len) {
                                    args.push(parameter);
                                }
                            }
                        }
                        if (!args.length) {
                            args = [''];
                        }
                        if (nestedFormula && libFormula) {
                            var formulas = ['IF', 'INDEX', 'SORT', 'T', 'EXACT', 'PROPER', 'DOLLAR', 'DATE', 'TEXT'];
                            if (formulas.some(function (formula) { return formula === libFormula; })) {
                                args.push('nestedFormulaTrue');
                            }
                            if (libFormula === 'IF') {
                                args.push('nestedFormulaTrue');
                            }
                        }
                        if (isFromComputeExpression && libFormula === 'UNIQUE') {
                            args.push('isComputeExp');
                        }
                    }
                    formulatResult = isNullOrUndefined(this_1.getFunction(libFormula)) ? this_1.getErrorStrings()[CommonErrors.Name] : this_1.getFunction(libFormula).apply(void 0, args);
                    if (nestedFormula) {
                        fNested = this_1.processNestedFormula(parsedText, sFormula, formulatResult);
                        var q = this_1.findLastIndexOfq(fNested);
                        if (q === 0) {
                            nestedFormula = false;
                        }
                        if (q === -1) {
                            formulatResult = this_1.computeValue(fNested, refresh);
                        }
                        lastIndexOfq = i = q;
                        parsedText = fNested;
                        return "continue";
                    }
                    return "break";
                };
                var this_1 = this;
                while (i > -1) {
                    var state_1 = _loop_1();
                    if (state_1 === "break")
                        break;
                }
            }
            else if (this.formulaErrorStrings.indexOf(parsedText) > -1) {
                formulatResult = parsedText;
            }
            else if (parsedText !== this.emptyString && lastIndexOfq === -1) {
                formulatResult = this.computeValue(parsedText, refresh);
            }
        }
        catch (ex) {
            var args = { message: ex.message, exception: ex, isForceCalculable: false, computeForceCalculate: false };
            this.trigger('onFailure', args);
            var errorMessage = (typeof args.exception === 'string') ? args.exception : args.message;
            formulatResult = (isNullOrUndefined(this.getErrorLine(ex)) ? '' : '#' + this.getErrorLine(ex) + ': ') + errorMessage;
        }
        return formulatResult;
    };
    /**
     * @hidden
     * @param {string[]} range - Specify the range.
     * @param {string} isAvgIf - Specify the AVERAGEIF computation.
     * @returns {number[] | string} - To compute the sum if and average if.
     */
    Calculate.prototype.computeSumIfAndAvgIf = function (range, isAvgIf) {
        if (isNullOrUndefined(range) || range[0] === this.emptyString || range.length === 0) {
            return this.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var argArr = range;
        for (var i = 0; i < argArr.length; i++) {
            if (this.isCellReference(argArr[i]) && isNullOrUndefined(argArr[i].match(/[0-9]/)) &&
                argArr[i].indexOf('!') < 0) {
                var splitArray = argArr[i].split(':');
                argArr[i] = splitArray[0] + '1' + ':' + splitArray[1] + this.spreadSheetUsedRange[0];
            }
        }
        var argCount = argArr.length;
        if (argCount !== 2 && argCount !== 3 && argCount === 0) {
            return this.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if (argArr[1] === '') {
            return isAvgIf ? this.getErrorStrings()[CommonErrors.DivZero] : '0';
        }
        var rangevalue = argArr[0];
        var isStringVal = argArr[1].startsWith(this.tic) && argArr[1].endsWith(this.tic);
        var criteria = argArr[1].split(this.tic).join(this.emptyString);
        if (criteria.length > 255) {
            return this.getErrorStrings()[CommonErrors.Value];
        }
        var isAsterisk = criteria.includes('*');
        var isQuestionMark = criteria.includes('?');
        var criteriaValue = isAsterisk ? criteria.replace(/\*/g, '').trim() : criteria;
        var isCellReferenceValue = false;
        if (!isStringVal && this.isCellReference(criteriaValue)) {
            criteriaValue = this.getValueFromArg(criteriaValue);
            isCellReferenceValue = true;
        }
        if (isAsterisk) {
            var asteriskIndex = criteria.indexOf('*');
            if (criteria[0] === '*') {
                criteriaValue = '*' + criteriaValue;
            }
            if (criteria[criteria.length - 1] === '*') {
                criteriaValue += '*';
            }
            if (asteriskIndex > 0 && asteriskIndex < criteria.length - 1) {
                criteriaValue = criteria.substring(0, asteriskIndex) + '*' + criteria.substring(asteriskIndex + 1);
            }
        }
        criteria = criteriaValue;
        var opt = this.parser.tokenEqual;
        if (criteria.startsWith('<=')) {
            opt = this.parser.tokenLessEq;
            criteria = criteria.substring(2);
        }
        else if (criteria.startsWith('>=')) {
            opt = this.parser.tokenGreaterEq;
            criteria = criteria.substring(2);
        }
        else if (criteria.startsWith('<>')) {
            opt = this.parser.tokenNotEqual;
            criteria = criteria.substring(2);
        }
        else if (criteria.startsWith('<')) {
            opt = this.parser.tokenLess;
            criteria = criteria.substring(1);
        }
        else if (criteria.startsWith('>')) {
            opt = this.parser.tokenGreater;
            criteria = criteria.substring(1);
        }
        else if (criteria.startsWith('=')) {
            opt = this.parser.tokenEqual;
            criteria = criteria.substring(1);
        }
        if ((!isStringVal && this.isCellReference(criteria) && !isCellReferenceValue) || criteria.includes(this.arithMarker) ||
            (criteria.includes(this.getParseDecimalSeparator()) && !isAsterisk && !isQuestionMark)) {
            criteria = this.getValueFromArg(criteria);
        }
        var checkCriteria = this.parseFloat(criteria);
        var criteriaRangeArray = argArr[0];
        var sumRange = this.getCellCollection(argCount > 2 ? argArr[2] : rangevalue);
        var criteriaRange = this.getCellCollection(criteriaRangeArray);
        if (criteriaRange.length > sumRange.length) {
            var sumEndCol = this.colIndex(sumRange[sumRange.length - 1]) +
                this.colIndex(criteriaRange[criteriaRange.length - 1]) - this.colIndex(criteriaRange[0]);
            var sumrange = argArr[2].split(':');
            sumrange[1] = (this.convertAlpha(sumEndCol) + this.rowIndex(criteriaRange[criteriaRange.length - 1])).toString();
            sumRange = this.getCellCollection(sumrange.join(':'));
        }
        var result = this.getComputeSumIfValue(criteriaRange, sumRange, criteria.toLowerCase(), checkCriteria, opt, isAsterisk, isQuestionMark);
        return [result[0], result[1]];
    };
    /**
     * @hidden
     * @param {string[]} range - specify the range
     * @returns {string} - to compute lookup
     */
    Calculate.prototype.computeLookup = function (range) {
        var _a, _b;
        var lookupArray;
        var matchArray;
        var lookupRange = [];
        var matchupRange = [];
        var checkCriteria = [];
        var findMaxVal = [];
        var lookupValue;
        var isArrayVector;
        var result = [];
        var argArr = range;
        var argCount = argArr.length;
        if (argCount === 1 || argCount > 3) {
            return this.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if (argArr[1] === '' || argArr[2] === '') {
            return this.getErrorStrings()[CommonErrors.Value];
        }
        lookupValue = this.getValueFromArg(argArr[0]);
        if (argArr[0].indexOf(this.tic) > -1 && argArr[0].toUpperCase().split(this.tic).join('') !== this.trueValue &&
            argArr[0].toUpperCase().split(this.tic).join('') !== this.falseValue && this.isNaN(this.parseFloat(argArr[0].split(this.tic).join('')))) {
            lookupValue = lookupValue.split(this.tic).join('');
        }
        if (this.getErrorStrings().indexOf(lookupValue) > -1) {
            return lookupValue;
        }
        var rangeSplit = argArr[1].split(':');
        if (rangeSplit.length === 2 && this.isCellReference(rangeSplit[0]) && this.isCellReference(rangeSplit[1]) && argCount === 2) {
            var index = argArr[1].indexOf(':');
            var rowIdx = this.rowIndex(this.substring(argArr[1], 0, index));
            var colIdx = this.colIndex(this.substring(argArr[1], 0, index));
            var endRowIdx = this.rowIndex(this.substring(argArr[1], index + 1, index + argArr[1].length - index - 1));
            var endColIdx = this.colIndex(this.substring(argArr[1], index + 1, index + argArr[1].length - index - 1));
            if (rowIdx > endRowIdx) {
                _a = [endRowIdx, rowIdx], rowIdx = _a[0], endRowIdx = _a[1];
            }
            if (colIdx > endColIdx) {
                _b = [endColIdx, colIdx], colIdx = _b[0], endColIdx = _b[1];
            }
            var sheetIdx = '';
            if (argArr[1].indexOf('!') === 0) {
                sheetIdx = argArr[1];
                sheetIdx = sheetIdx.replace('!', '');
                sheetIdx = sheetIdx.indexOf('!');
                sheetIdx = argArr[1].substring(0, sheetIdx + 2);
            }
            var colCount = endColIdx - colIdx + 1;
            var rowCount = endRowIdx - rowIdx + 1;
            if (rowCount > colCount || rowCount === colCount) { // Taller than Wide. vlookup
                lookupArray = sheetIdx + getAlphalabel(colIdx) + rowIdx + ':' + getAlphalabel(colIdx) + endRowIdx;
                matchArray = sheetIdx + getAlphalabel(endColIdx) + rowIdx + ':' + getAlphalabel(endColIdx) + endRowIdx;
            }
            else if (rowCount < colCount) { // Wider than Tall. hlookup
                lookupArray = sheetIdx + getAlphalabel(colIdx) + rowIdx + ':' + getAlphalabel(endColIdx) + rowIdx;
                matchArray = sheetIdx + getAlphalabel(colIdx) + endRowIdx + ':' + getAlphalabel(endColIdx) + endRowIdx;
            }
            if (rowIdx !== endRowIdx || colIdx !== endColIdx) {
                isArrayVector = true;
            }
        }
        if (isArrayVector) {
            lookupRange = this.getCellCollection(lookupArray);
            matchupRange = this.getCellCollection(matchArray);
        }
        else {
            lookupRange = this.getCellCollection(argArr[1]);
            var arrvalue = argCount === 2 ? argArr[1] : argArr[2];
            matchupRange = this.getCellCollection(arrvalue);
            var lookupIndex = getRangeIndexes(argArr[1]);
            var matchIndex = getRangeIndexes(arrvalue);
            var isValidLookup = lookupIndex[1] === lookupIndex[3] ? true : lookupIndex[0] === lookupIndex[2];
            var isValidMatch = matchIndex[1] === matchIndex[3] ? true : matchIndex[0] === matchIndex[2];
            if (!isValidLookup || !isValidMatch) {
                return this.getErrorStrings()[CommonErrors.NA];
            }
        }
        for (var i = 0; i < lookupRange.length; i++) {
            findMaxVal.push(this.getValueFromArg(lookupRange[i]).split(this.tic).join(''));
        }
        var num = findMaxVal.map(function (value) { return value === '' ? NaN : Number(value); }).sort(function (a, b) { return a - b; });
        var maxVal = num[num.length - 1];
        var minVal = num[0];
        var lookupVal = this.parseFloat(lookupValue);
        if (!this.isNaN(lookupVal)) {
            for (var a = 0; a < num.length; a++) {
                checkCriteria[a] = num[a].toString().split(this.tic).join('');
                if (!isNullOrUndefined(matchupRange[a]) && checkCriteria[a] !== '' && lookupVal === this.parseFloat(checkCriteria[a])) {
                    result.push(this.getValueFromArg(matchupRange[a]).split(this.tic).join('') || '0');
                }
            }
        }
        else {
            for (var j = 0; j < lookupRange.length; j++) {
                checkCriteria[j] = this.getValueFromArg(lookupRange[j]).split(this.tic).join('');
                if (!isNullOrUndefined(matchupRange[j]) && lookupValue !== '' && checkCriteria[j] !== '') {
                    if (lookupValue.toUpperCase() === checkCriteria[j].toUpperCase()) {
                        result.push(this.getValueFromArg(matchupRange[j]).split(this.tic).join('') || '0');
                    }
                    else if (lookupValue.indexOf('*') > -1 || lookupValue.indexOf('?') > -1) {
                        var criteriaValue = lookupValue;
                        if (lookupValue.indexOf('*') > -1) {
                            criteriaValue = criteriaValue.replace(/\*/g, '').trim();
                            if (this.isCellReference(criteriaValue)) {
                                criteriaValue = this.getValueFromArg(criteriaValue);
                            }
                            var asteriskIndex = lookupValue.indexOf('*');
                            if (lookupValue[0] === '*') {
                                criteriaValue = '*' + criteriaValue;
                            }
                            if (lookupValue[lookupValue.length - 1] === '*') {
                                criteriaValue += '*';
                            }
                            if (asteriskIndex > 0 && asteriskIndex < lookupValue.length - 1) {
                                criteriaValue = lookupValue.substring(0, asteriskIndex) + '*' + lookupValue.substring(asteriskIndex + 1);
                            }
                        }
                        var stack = [];
                        var wildcardResult = this.findWildCardValue(criteriaValue.toLowerCase(), checkCriteria[j].toLowerCase());
                        stack.push(wildcardResult);
                        stack.push(lookupValue);
                        if (this.processLogical(stack, 'equal') === this.trueValue) {
                            result.push(this.getValueFromArg(matchupRange[j]).split(this.tic).join('') || '0');
                        }
                    }
                }
            }
        }
        if (result.length > 0) {
            return result[result.length - 1];
        }
        if (lookupVal > maxVal && !isNullOrUndefined(matchupRange[lookupRange.length - 1])) {
            return this.getValueFromArg(matchupRange[lookupRange.length - 1]).split(this.tic).join('') || '0';
        }
        else if (lookupVal < minVal) {
            return this.getErrorStrings()[CommonErrors.NA];
        }
        if (findMaxVal.indexOf(lookupValue.split(this.tic).join('')) < 0 && lookupValue !== this.trueValue && lookupValue !== this.falseValue) {
            if (!this.isNaN(lookupVal) && !this.isNaN(maxVal) && !this.isNaN(minVal)) {
                var temp = [];
                for (var b = 0; b < num.length; b++) {
                    if (lookupVal > num[b]) {
                        temp.push(num[b]);
                    }
                }
                var index = temp.length - 1;
                if (!isNullOrUndefined(matchupRange[index]) && index >= 0) {
                    return this.getValueFromArg(matchupRange[index]).split(this.tic).join('') || '0';
                }
            }
            else if (this.isNaN(lookupVal) && lookupValue !== '' && /^[a-zA-Z!@#$%^&*()_+{}[\]:;<>,.?~\\/-]/.test(lookupValue)) {
                var str = findMaxVal.sort();
                var index = this.findClosestMatch(lookupValue.split(this.tic).join(''), str);
                if (!isNullOrUndefined(matchupRange[index]) && index >= 0) {
                    return this.getValueFromArg(matchupRange[index]).split(this.tic).join('') || '0';
                }
            }
        }
        return this.getErrorStrings()[CommonErrors.NA];
    };
    Calculate.prototype.computeVHLookup = function (range, isVlookup) {
        var _this = this;
        var _a, _b;
        var argArr = range;
        if (isNullOrUndefined(argArr) || argArr.length < 3 || argArr.length > 4) {
            return this.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        if (argArr[1] === '') {
            return this.getErrorStrings()[CommonErrors.NA];
        }
        var lookupValue = this.getValueFromArg(argArr[0]);
        if (lookupValue) {
            if (lookupValue.includes(this.tic)) {
                var lookupVal = lookupValue.split(this.tic).join('');
                if (lookupVal && !this.isNumber(lookupVal)) {
                    var lookupValUpper = lookupVal.toUpperCase();
                    if (lookupValUpper !== this.trueValue && lookupValUpper !== this.falseValue) {
                        lookupValue = lookupVal;
                    }
                }
            }
        }
        else {
            lookupValue = '0';
        }
        var errorStrings = this.getErrorStrings();
        if (errorStrings.indexOf(lookupValue) > -1) {
            return lookupValue;
        }
        var colIdxVal = (this.getValueFromArg(argArr[2]) || '0').split(this.tic).join('').toUpperCase();
        var colNumIdx = this.parseFloat(colIdxVal === this.trueValue ? '1' : colIdxVal);
        if (colNumIdx < 1) {
            return errorStrings[CommonErrors.Value];
        }
        var isExactMatchLookup;
        if (argArr[3]) {
            argArr[3] = this.getValueFromArg(argArr[3]).split(this.tic).join('');
            if (errorStrings.indexOf(argArr[3]) > -1) {
                return argArr[3];
            }
            var rangeLookup = argArr[3].toUpperCase();
            if (rangeLookup === this.falseValue || argArr[3] === '0') {
                isExactMatchLookup = true;
            }
            else if (!(rangeLookup === this.trueValue || argArr[3] === '1')) {
                return errorStrings[CommonErrors.Value];
            }
        }
        var rangeArr = argArr[1].split(':');
        var startIdx;
        var endIdx;
        var idx;
        var grid;
        var getLookupRangeValue;
        var getMatchRangeValue;
        if (this.isCellReference(rangeArr[0]) && this.isCellReference(rangeArr[1])) {
            var rowIdx_1 = this.rowIndex(rangeArr[0]);
            var colIdx_1 = this.colIndex(rangeArr[0]);
            var endRowIdx = this.rowIndex(rangeArr[1]);
            var endColIdx = this.colIndex(rangeArr[1]);
            if (rowIdx_1 > endRowIdx) {
                _a = [endRowIdx, rowIdx_1], rowIdx_1 = _a[0], endRowIdx = _a[1];
            }
            if (colIdx_1 > endColIdx) {
                _b = [endColIdx, colIdx_1], colIdx_1 = _b[0], endColIdx = _b[1];
            }
            if (!(rowIdx_1 > 0 && endRowIdx <= 1048576 && colIdx_1 > 0 && endColIdx <= 16384)) {
                return this.getErrorStrings()[CommonErrors.Name];
            }
            grid = this.grid;
            var sheetToken_1 = '';
            var family = this.getSheetFamilyItem(grid);
            if (argArr[1].startsWith('!')) {
                sheetToken_1 = argArr[1].substring(0, argArr[1].replace('!', '').indexOf('!') + 2);
                if (family.tokenToParentObject !== null) {
                    this.grid = family.tokenToParentObject.get(sheetToken_1);
                }
            }
            else if (family.parentObjectToToken !== null) {
                sheetToken_1 = family.parentObjectToToken.get(grid);
            }
            var sheetId = this.getSheetId(this.grid);
            var sheetInfoArgs = {
                action: 'getSheetInfo', sheetInfo: []
            };
            this.parentObject.notify(workbookFormulaOperation, sheetInfoArgs);
            if (getSheetIndexByName(this.parentObject, 'Sheet' + sheetId, sheetInfoArgs.sheetInfo) === -1) {
                this.grid = grid;
                return errorStrings[CommonErrors.Ref];
            }
            var getCellValue_1 = this.getCellValueFn(grid, this.cell, sheetId, true);
            if (isVlookup) {
                var matchIndex_1 = colIdx_1 + colNumIdx - 1;
                if (matchIndex_1 > endColIdx) {
                    return errorStrings[CommonErrors.Ref];
                }
                startIdx = rowIdx_1;
                endIdx = endRowIdx;
                var lookupColText_1 = sheetToken_1 + getAlphalabel(colIdx_1);
                getLookupRangeValue = function (idx) {
                    return getCellValue_1(idx, colIdx_1, lookupColText_1 + idx);
                };
                var matchColText_1 = sheetToken_1 + getAlphalabel(matchIndex_1);
                getMatchRangeValue = function () {
                    return getCellValue_1(idx, matchIndex_1, matchColText_1 + idx) || '0';
                };
            }
            else {
                var matchIndex_2 = rowIdx_1 + colNumIdx - 1;
                if (matchIndex_2 > endRowIdx) {
                    return errorStrings[CommonErrors.Ref];
                }
                startIdx = colIdx_1;
                endIdx = endColIdx;
                var matchColText_2;
                getLookupRangeValue = function (idx) {
                    matchColText_2 = sheetToken_1 + getAlphalabel(idx);
                    return getCellValue_1(rowIdx_1, idx, matchColText_2 + rowIdx_1);
                };
                getMatchRangeValue = function () {
                    return getCellValue_1(matchIndex_2, idx, matchColText_2 + matchIndex_2) || '0';
                };
            }
        }
        else {
            return errorStrings[CommonErrors.Value];
        }
        var result;
        var lookupRangeVal;
        var matchedResult = [];
        if (isExactMatchLookup) {
            var isMatchFound = void 0;
            if (this.isNumber(lookupValue)) {
                var lookupNumVal_1 = this.parseFloat(lookupValue);
                isMatchFound = function () {
                    return lookupNumVal_1 === _this.parseFloat(lookupRangeVal);
                };
            }
            else if (lookupValue.includes('*') || lookupValue.includes('?')) {
                var criteriaValue_1 = lookupValue;
                var asteriskIndex = lookupValue.indexOf('*');
                if (asteriskIndex > -1) {
                    criteriaValue_1 = criteriaValue_1.replace(/\*/g, '').trim();
                    if (this.isCellReference(criteriaValue_1)) {
                        criteriaValue_1 = this.getValueFromArg(criteriaValue_1);
                    }
                    if (asteriskIndex === 0) {
                        criteriaValue_1 = '*' + criteriaValue_1;
                    }
                    else if (asteriskIndex === lookupValue.length - 1) {
                        criteriaValue_1 += '*';
                    }
                    else {
                        criteriaValue_1 = lookupValue.substring(0, asteriskIndex) + '*' + lookupValue.substring(asteriskIndex + 1);
                    }
                }
                criteriaValue_1 = criteriaValue_1.toLowerCase();
                isMatchFound = function () {
                    return _this.processLogical([_this.findWildCardValue(criteriaValue_1, lookupRangeVal.toLowerCase()), lookupValue], 'equal') === _this.trueValue;
                };
            }
            else {
                var lookupValUpper_1 = lookupValue.toUpperCase();
                isMatchFound = function () {
                    return lookupValUpper_1 === lookupRangeVal.toUpperCase();
                };
            }
            for (idx = startIdx; idx <= endIdx; idx++) {
                lookupRangeVal = getLookupRangeValue(idx);
                if (lookupRangeVal && isMatchFound()) {
                    matchedResult.push(getMatchRangeValue());
                }
            }
            result = matchedResult.length ? matchedResult[0] : errorStrings[CommonErrors.NA];
        }
        else if (lookupValue.indexOf('*') > -1 || lookupValue.indexOf('?') > -1) {
            result = errorStrings[CommonErrors.NA];
        }
        else {
            var matchVal_1;
            var checkMatchFn = void 0;
            if (this.isNumber(lookupValue)) {
                var lookupNumVal_2 = this.parseFloat(lookupValue);
                var comparer_1 = DataUtil.fnSort('');
                checkMatchFn = function () {
                    matchVal_1 = comparer_1(_this.isNumber(lookupRangeVal) ? _this.parseFloat(lookupRangeVal) : lookupRangeVal || null, lookupNumVal_2);
                };
            }
            else {
                var collator_1 = new Intl.Collator(this.parentObject.locale || 'en-US', { sensitivity: 'base' });
                checkMatchFn = function () {
                    matchVal_1 = (!lookupRangeVal || _this.isNumber(lookupRangeVal)) ? null : collator_1.compare(lookupRangeVal, lookupValue);
                };
            }
            var skipCheck = void 0;
            for (idx = startIdx; idx <= endIdx; idx++) {
                lookupRangeVal = getLookupRangeValue(idx);
                if (!skipCheck) {
                    checkMatchFn();
                    if (matchVal_1 === 0) {
                        matchedResult.push(getMatchRangeValue());
                    }
                    else if (matchVal_1 < 0) {
                        matchedResult.push(getMatchRangeValue());
                    }
                    else if (matchVal_1 > 0 && matchedResult.length) {
                        skipCheck = true;
                    }
                }
            }
            result = matchedResult.length ? matchedResult[matchedResult.length - 1] : errorStrings[CommonErrors.NA];
        }
        this.grid = grid;
        return result;
    };
    Calculate.prototype.findClosestMatch = function (searchValue, sortedArray) {
        var start = 0;
        var end = sortedArray.length - 1;
        while (start <= end) {
            var mid = Math.floor((start + end) / 2);
            var midValue = sortedArray[mid];
            var compareResult = this.compareStrings(searchValue.toLowerCase(), midValue.toLowerCase());
            if (compareResult === 0) {
                return mid;
            }
            else if (compareResult === 1) {
                start = mid + 1;
            }
            else {
                end = mid - 1;
            }
        }
        // If no exact match is found, return the closest match based on the entire string
        for (var i = start - 1; i >= 0; i--) {
            if (this.compareStrings(searchValue.toLowerCase(), sortedArray[i].toLowerCase()) !== -1) {
                return i;
            }
        }
        return -1; // No match found
    };
    Calculate.prototype.compareStrings = function (str1, str2) {
        var minLength = Math.min(str1.length, str2.length);
        for (var i = 0; i < minLength; i++) {
            var charCode1 = str1.charCodeAt(i);
            var charCode2 = str2.charCodeAt(i);
            if (charCode1 < charCode2) {
                return -1;
            }
            else if (charCode1 > charCode2) {
                return 1;
            }
        }
        // If all characters are the same up to the length of the shorter string, compare lengths
        if (str1.length < str2.length) {
            return -1;
        }
        else if (str1.length > str2.length) {
            return 1;
        }
        else {
            return 0;
        }
    };
    Calculate.prototype.findWildCardValue = function (lookVal, cellValue) {
        var finalText = '';
        if (lookVal.indexOf('?') > -1) {
            var checkRegex = RegExp(lookVal.replace(/\?/g, '[\\s\\S]'));
            if (cellValue.length === lookVal.length && this.isNaN(this.parseFloat(cellValue))) {
                if (cellValue.match(checkRegex)) {
                    finalText = lookVal;
                }
                else {
                    finalText = cellValue;
                }
            }
            else {
                finalText = cellValue;
            }
        }
        else if (lookVal.indexOf('*') > -1) {
            var index = lookVal.indexOf('*');
            var left = '';
            var right = '';
            var compRight = this.falseValue;
            var compLeft = this.falseValue;
            for (var i = index - 1; i >= 0; i--) {
                left = left + lookVal[i];
                compLeft = this.trueValue;
            }
            for (var i = index + 1; i < lookVal.length; i++) {
                right = right + lookVal[i];
                compRight = this.trueValue;
            }
            var leftVal = left === '' ? -1 : cellValue.indexOf(left.split('').reverse().join(''));
            var rightVal = right === '' ? -1 : cellValue.indexOf(right);
            if (leftVal > -1 || rightVal > -1) {
                var isLeft = left.split('').reverse().join('') === cellValue.substr(0, left.length);
                var isRight = right === cellValue.substring(cellValue.length - right.length, cellValue.length);
                if (compLeft === this.trueValue && compRight === this.trueValue &&
                    this.isNaN(this.parseFloat(left)) && this.isNaN(this.parseFloat(right))) {
                    finalText = isLeft && isRight ? lookVal : cellValue;
                }
                else if (compLeft === this.trueValue && this.isNaN(this.parseFloat(left))) {
                    finalText = isLeft ? lookVal : cellValue;
                }
                else if (compRight === this.trueValue && this.isNaN(this.parseFloat(right))) {
                    finalText = isRight ? lookVal : cellValue;
                }
            }
            else {
                finalText = cellValue;
            }
        }
        return finalText;
    };
    /**
     * @hidden
     * @param {string[] | string} criteriaRange - Specifies the criteria reange.
     * @param {string[] | string} sumRange - Specifies the sum range.
     * @param {string} criteria - Specifies the criteria against which values are checked.
     * @param {number} checkCriteria - Specifies the check criteria value.
     * @param {string} op - Specifies the operator value.
     * @param {boolean} isAsterisk - Indicates whether asterisk (*) is used as a wildcard or not.
     * @param {boolean} isQuestionMark - Indicates whether question mark (?) is used as a wildcard or not.
     * @returns {number[]} - Returns computed sum if value.
     */
    Calculate.prototype.getComputeSumIfValue = function (criteriaRange, sumRange, criteria, checkCriteria, op, isAsterisk, isQuestionMark) {
        var sum = 0;
        var count = 0;
        // const isFirst: boolean = isAsterisk && criteria && criteria[0] === '*';
        switch (op) {
            case this.parser.tokenEqual:
                {
                    var criteriaValue = isAsterisk ? criteria.replace(/\*/g, '') : criteria;
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var sumVal = this.getValueFromRange(sumRange, i);
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join('')).toLowerCase();
                        var val = this.parseFloat(value);
                        if (value === criteria && val === checkCriteria) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            if (!this.isNaN(val1)) {
                                sum = sum + val1;
                                count = count + 1;
                            }
                        }
                        else if (value === criteria) {
                            if (!this.isNaN(sumVal)) {
                                sum = sum + sumVal;
                                count = count + 1;
                            }
                        }
                        else if (isAsterisk && criteriaValue && value && this.isNaN(this.parseFloat(value))) {
                            var asteriskIndex = criteria.indexOf('*');
                            if (criteria[0] === '*' && criteriaValue.length <= value.length && criteriaValue === value.slice(value.length - criteriaValue.length, value.length)) {
                                if (!this.isNaN(sumVal)) {
                                    sum = sum + sumVal;
                                    count = count + 1;
                                }
                            }
                            else if (criteria[criteria.length - 1] === '*' && criteriaValue.length <= value.length && criteriaValue === value.slice(0, criteriaValue.length)) {
                                if (!this.isNaN(sumVal)) {
                                    sum = sum + sumVal;
                                    count = count + 1;
                                }
                            }
                            else if (asteriskIndex > -1 && value.startsWith(criteria.substr(0, asteriskIndex))
                                && value.endsWith(criteria.substr(asteriskIndex + 1))) {
                                if (!this.isNaN(sumVal)) {
                                    sum = sum + sumVal;
                                    count = count + 1;
                                }
                            }
                        }
                        else if (isAsterisk && !criteriaValue && value && this.isNaN(this.parseFloat(value))) {
                            if (!this.isNaN(sumVal)) {
                                sum = sum + sumVal;
                                count = count + 1;
                            }
                        }
                        else if (isQuestionMark && criteriaValue && value && this.isNaN(this.parseFloat(value))) {
                            var checkRegex = RegExp(criteriaValue.replace(/\?/g, '[\\s\\S]'));
                            if (value.length === criteria.length && value.match(checkRegex)) {
                                if (!this.isNaN(sumVal)) {
                                    sum = sum + sumVal;
                                    count = count + 1;
                                }
                            }
                        }
                    }
                }
                break;
            case this.parser.tokenLess:
                {
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join(''));
                        var val = this.parseFloat(value);
                        if (val < checkCriteria) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            if (!this.isNaN(val1)) {
                                sum = sum + val1;
                                count = count + 1;
                            }
                        }
                    }
                }
                break;
            case this.parser.tokenGreater:
                {
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join(''));
                        var val = this.parseFloat(value);
                        if (val > checkCriteria) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            if (!this.isNaN(val1)) {
                                sum = sum + val1;
                                count = count + 1;
                            }
                        }
                    }
                }
                break;
            case this.parser.tokenLessEq:
                {
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join(''));
                        var val = this.parseFloat(value);
                        if (val <= checkCriteria) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            if (!this.isNaN(val1)) {
                                sum = sum + val1;
                                count = count + 1;
                            }
                        }
                    }
                }
                break;
            case this.parser.tokenGreaterEq:
                {
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join(''));
                        var val = this.parseFloat(value);
                        if (val >= checkCriteria) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            if (!this.isNaN(val1)) {
                                sum = sum + val1;
                                count = count + 1;
                            }
                        }
                    }
                }
                break;
            case this.parser.tokenNotEqual:
                {
                    var criteriaValue = isAsterisk ? criteria.replace(/\*/g, '') : criteria;
                    for (var i = 0; i < criteriaRange.length; i++) {
                        var sumVal = this.getValueFromRange(sumRange, i);
                        var value = this.getValueFromArg(criteriaRange[i].split(this.tic).join('')).toLowerCase();
                        var val = this.parseFloat(value);
                        if (value !== criteria && val !== checkCriteria && !isAsterisk && !isQuestionMark) {
                            var value1 = this.getValueFromArg(sumRange[i].split(this.tic).join(''));
                            var val1 = this.parseFloat(value1);
                            if (!this.isNaN(val1)) {
                                sum = sum + val1;
                                count = count + 1;
                            }
                        }
                        else if (isAsterisk && criteriaValue && value && this.isNaN(this.parseFloat(value))) {
                            var asteriskIndex = criteria.indexOf('*');
                            if (criteria[0] === '*' && criteriaValue.length <= value.length && criteriaValue !== value.slice(value.length - criteriaValue.length, value.length)) {
                                if (!this.isNaN(sumVal)) {
                                    sum = sum + sumVal;
                                    count = count + 1;
                                }
                            }
                            else if (criteria[criteria.length - 1] === '*' && criteriaValue.length <= value.length && criteriaValue !== value.slice(0, criteriaValue.length)) {
                                if (!this.isNaN(sumVal)) {
                                    sum = sum + sumVal;
                                    count = count + 1;
                                }
                            }
                            else if (asteriskIndex > -1 && !value.startsWith(criteria.substr(0, asteriskIndex))
                                || !value.endsWith(criteria.substr(asteriskIndex + 1))) {
                                if (!this.isNaN(sumVal)) {
                                    sum = sum + sumVal;
                                    count = count + 1;
                                }
                            }
                        }
                        else if (isAsterisk && !criteriaValue && !this.isNaN(this.parseFloat(value))) {
                            if (!this.isNaN(sumVal)) {
                                sum = sum + sumVal;
                                count = count + 1;
                            }
                        }
                        else if (isQuestionMark && criteriaValue && value && this.isNaN(this.parseFloat(value))) {
                            var checkRegex = RegExp(criteriaValue.replace(/\?/g, '[\\s\\S]'));
                            if (value.length !== criteria.length || !value.match(checkRegex)) {
                                if (!this.isNaN(sumVal)) {
                                    sum = sum + sumVal;
                                    count = count + 1;
                                }
                            }
                        }
                    }
                }
                break;
        }
        return [sum, count];
    };
    Calculate.prototype.getValueFromRange = function (sumRange, index) {
        var sumRangeVal = sumRange[index];
        sumRangeVal = this.getValueFromArg(sumRangeVal);
        return this.parseFloat(sumRangeVal.toString());
    };
    /**
     * @hidden
     * @param {string[]} args - specifies the args
     * @param {string} op - specify the operator.
     * @returns {string} - Compute and or.
     */
    Calculate.prototype.computeAndOrNot = function (args, op) {
        var _this = this;
        var isAnd = op === 'and';
        var isOr = op === 'or';
        var isNot = op === 'not';
        var result = (isAnd || isNot) ? true : false;
        var value;
        var parseVal;
        var resultant = [];
        var ranges = args;
        for (var i = 0; i < ranges.length; i++) {
            if (ranges[i] === (this.tic)) {
                return this.getErrorStrings()[CommonErrors.Value];
            }
            if (this.isCellReference(ranges[i])) {
                var cells = this.getCellCollection(ranges[i]);
                for (var j = 0; j < cells.length; j++) {
                    if (this.getErrorStrings().indexOf(cells[j]) > -1) {
                        return cells[j];
                    }
                    else if (cells[j][0] === this.tic) {
                        return this.getErrorStrings()[CommonErrors.Name];
                    }
                    value = this.getValueFromArg(cells[j]);
                    if (this.getErrorStrings().indexOf(value) > -1) {
                        return value;
                    }
                    parseVal = this.parseFloat(value);
                    if (value === this.falseValue || (value !== '' && parseVal === 0) || (isNot && value === '')) {
                        resultant.push(this.falseValue);
                    }
                    else if (value === this.trueValue || !isNaN(parseVal) && value !== '') {
                        resultant.push(this.trueValue);
                    }
                    else if (value === '' || isNaN(parseVal)) {
                        resultant.push(this.getErrorStrings()[CommonErrors.Value]);
                    }
                }
            }
            else {
                value = this.getValueFromArg(ranges[i]).split(this.tic).join('').toUpperCase();
                if (this.getErrorStrings().indexOf(value) > -1) {
                    return value;
                }
                parseVal = this.parseFloat(value);
                if (value === this.falseValue || ranges[i] === '' || (value !== '' && parseVal === 0)) {
                    resultant.push(this.falseValue);
                }
                else if (value === this.trueValue || !isNaN(parseVal) && value !== '') {
                    resultant.push(this.trueValue);
                }
                else if (value === '' || isNaN(parseVal)) {
                    resultant.push(this.getErrorStrings()[CommonErrors.Value]);
                }
            }
        }
        var containsOnlyValueError = resultant.every(function (item) { return item === _this.getErrorStrings()[CommonErrors.Value]; });
        if (containsOnlyValueError) {
            return this.getErrorStrings()[CommonErrors.Value];
        }
        for (var j = 0; j < resultant.length; j++) {
            if ((isAnd || isNot) && resultant[j] === this.falseValue) {
                result = false;
                break;
            }
            if (isOr && resultant[j] === this.trueValue) {
                result = true;
                break;
            }
        }
        result = isNot ? !result : result;
        return result ? this.trueValue : this.falseValue;
    };
    /**
     * @hidden
     * @param {string} text - specify the text
     * @returns {string} - to strip out the tic from the formula arguments.
     */
    // To strip out the tic from the formula arguments.
    Calculate.prototype.removeTics = function (text) {
        if (text.length > 1 && text[0] === this.tic[0] && text[text.length - 1] === this.tic[0]) {
            text = this.substring(text, 1, text.length - 2);
        }
        return text;
    };
    /**
     * @hidden
     * @param {string} range - specify the range
     * @returns {string} - to get cell from the range.
     */
    Calculate.prototype.getCellFrom = function (range) {
        var cellRange = '';
        var cells = range.indexOf(':') > -1 ? range.split(':') : [range];
        //this.getCellsFromArgs(range);
        var last = cells.length - 1;
        var r1 = this.rowIndex(cells[0]);
        var x;
        if (r1 === this.rowIndex(cells[last])) {
            var c1 = this.colIndex(cells[0]);
            var c2 = this.colIndex(cells[last]);
            var c = this.colIndex(this.cell);
            if (c >= c1 && c <= c2) {
                cellRange = getAlphalabel(c).toString() + r1.toString();
            }
        }
        else if (this.colIndex(cells[0]) === this.colIndex(cells[last])) {
            x = this.colIndex(cells[0]);
            var r2 = this.rowIndex(cells[last]);
            var r = this.rowIndex(this.cell);
            if (r >= r1 && r <= r2) {
                cellRange = getAlphalabel(x).toString() + r.toString();
            }
        }
        return cellRange;
    };
    Calculate.prototype.computeValue = function (pFormula, refresh, isIfError) {
        try {
            var stack = [];
            var i = 0;
            var sheet = '';
            stack.length = 0;
            var decimalSep = this.getParseDecimalSeparator();
            while (i < pFormula.length) {
                var uFound = pFormula[i] === 'u'; // for 3*-2
                if (uFound) {
                    i = i + 1; // for the cell reference cases, like A1*-A2.
                }
                if (pFormula[i] === this.arithMarker) {
                    i = i + 1;
                    continue;
                }
                else if (this.isDigit(pFormula[i])) {
                    var s = this.emptyString;
                    while (i < pFormula.length && (this.isDigit(pFormula[i]) ||
                        pFormula[i] === decimalSep)) {
                        s += pFormula[i] === decimalSep ? '.' : pFormula[i];
                        i = i + 1;
                    }
                    stack.push(s);
                    if (!pFormula[i]) {
                        return stack.toString();
                    }
                }
                if (pFormula[i] === this.sheetToken) {
                    sheet = pFormula[i];
                    i = i + 1;
                    while (i < pFormula.length && pFormula[i] !== this.sheetToken) {
                        sheet = sheet + pFormula[i];
                        i = i + 1;
                    }
                    if (i < pFormula.length) {
                        sheet = sheet + pFormula[i];
                        i = i + 1;
                    }
                }
                else if (this.isUpperChar(pFormula[i])) {
                    var s = this.emptyString;
                    var textName = '';
                    while (i < pFormula.length && this.isUpperChar(pFormula[i])) {
                        var char = pFormula[i];
                        s = s + char;
                        i = i + 1;
                    }
                    while (i < pFormula.length && this.isDigit(pFormula[i])) {
                        var digit = pFormula[i];
                        s = s + digit;
                        i = i + 1;
                    }
                    if (i < pFormula.length && pFormula[i] === ':') {
                        s = s + pFormula[i];
                        i = i + 1;
                        if (i < pFormula.length && pFormula[i] === this.sheetToken) {
                            s = s + pFormula[i];
                            i = i + 1;
                            while (i < pFormula.length && pFormula[i] !== this.sheetToken) {
                                s = s + pFormula[i];
                                i = i + 1;
                            }
                        }
                        while (i < pFormula.length && this.isUpperChar(pFormula[i])) {
                            s = s + pFormula[i];
                            i = i + 1;
                        }
                        while (i < pFormula.length && this.isDigit(pFormula[i])) {
                            s = s + pFormula[i];
                            i = i + 1;
                        }
                        s = sheet + this.getCellFrom(s);
                    }
                    else {
                        s = sheet + s;
                    }
                    textName = this.getParentObjectCellValue(s, refresh).toString();
                    sheet = '';
                    if (typeof textName === 'string' && this.getErrorStrings().indexOf(textName) > -1) {
                        return textName;
                    }
                    if (uFound) {
                        if (!this.isNaN(this.parseFloat(textName))) {
                            textName = (-(this.parseFloat(textName))).toString();
                        }
                        else {
                            textName = '-' + textName;
                        }
                    }
                    stack.push(textName);
                }
                else if (pFormula[i] === 'q') {
                    var leftIdx = pFormula.substring(i + 1).indexOf(this.leftBracket);
                    var j = pFormula.substring(i + leftIdx + 1).indexOf(this.rightBracket);
                    pFormula = this.substring(pFormula, i + leftIdx + 2, j - 1);
                }
                else if (pFormula[i] === this.tic[0]) {
                    var s = pFormula[i].toString();
                    i = i + 1;
                    while (i < pFormula.length && pFormula[i] !== this.tic[0]) {
                        s = s + pFormula[i];
                        i = i + 1;
                    }
                    var textName = s.split(this.tic).join(this.emptyString);
                    if (textName === this.trueValue || textName === this.falseValue ||
                        (!this.isNaN(this.parseFloat(textName)) && textName !== '')) {
                        stack.push(this.tic + textName + this.tic);
                    }
                    else {
                        stack.push(textName);
                    }
                    i = i + 1;
                }
                else if (pFormula[i] === '%' && stack.length > 0) {
                    var stackValue = stack[0];
                    var value = this.parseFloat(stackValue);
                    if (!this.isNaN(value)) {
                        stack.pop();
                        stack.push((value / 100).toString());
                    }
                    i = i + 1;
                }
                else if ((pFormula.substring(i)).indexOf(this.trueValue) === 0) {
                    stack.push(this.trueValue);
                    i += this.trueValue.length;
                }
                else if (pFormula.substring(i).indexOf(this.falseValue) === 0) {
                    stack.push(this.falseValue);
                    i += this.falseValue.length;
                }
                else if (pFormula[i] === this.tic[0] || pFormula[i] === '|') {
                    var s = pFormula[i].toString();
                    i++;
                    while (i < pFormula.length && pFormula[i] !== this.tic[0]) {
                        s = s + pFormula[i];
                        i = i + 1;
                    }
                    stack.push(s + this.tic);
                    i += 1;
                }
                else {
                    if (pFormula[i] === ' ' && i < pFormula.length - 1) {
                        i += 1;
                        continue;
                    }
                    switch (pFormula[i]) {
                        case '#':
                            {
                                var errIndex = 0;
                                if (this.getErrorStrings().indexOf(pFormula.substring(i)) > -1) {
                                    if (pFormula.indexOf('!') === -1 || pFormula.substring(i).indexOf('!') === -1) {
                                        errIndex = pFormula.indexOf('#N/A') > -1 ? (pFormula.indexOf('#N/A') + 4 + i) : pFormula.indexOf('?') + 1 + i;
                                    }
                                    else {
                                        errIndex = pFormula.indexOf('!') + 1 + i;
                                    }
                                    stack.push(this.substring(pFormula, i, errIndex - i));
                                }
                                else {
                                    errIndex = i + 1;
                                    stack.push(this.substring(pFormula, i, errIndex - i));
                                }
                                i = errIndex;
                            }
                            break;
                        case 'n':
                            {
                                i = i + 1;
                                var s = '';
                                if (pFormula[i] === 'n') {
                                    continue;
                                }
                                if (pFormula.substring(i).indexOf('Infinity') === 0) {
                                    s = 'Infinity';
                                    i += s.length;
                                }
                                else {
                                    if (pFormula[i] === 'u' || uFound || pFormula[i] === '-') {
                                        s = '-';
                                        if (!uFound) {
                                            i = i + 1;
                                        }
                                        else {
                                            uFound = false;
                                        }
                                    }
                                    while (i < pFormula.length && (this.isDigit(pFormula[i]) ||
                                        (pFormula[i] === decimalSep || pFormula[i] === '.'))) {
                                        s += pFormula[i] === decimalSep ? '.' : pFormula[i];
                                        i = i + 1;
                                    }
                                    if (i < pFormula.length && pFormula[i] === '%') {
                                        i = i + 1;
                                        if (s === '') {
                                            if (stack.length > 0) {
                                                var stackValue = stack[0];
                                                var value = this.parseFloat(stackValue);
                                                if (!this.isNaN(value)) {
                                                    stack.pop();
                                                    stack.push((value / 100).toString());
                                                }
                                            }
                                        }
                                        else {
                                            s = (this.parseFloat(s) / 100).toString();
                                        }
                                    }
                                }
                                if (s) {
                                    stack.push(s);
                                }
                            }
                            break;
                        case this.parser.tokenAdd:
                            {
                                this.getValArithmetic(stack, 'add', isIfError);
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenSubtract:
                            {
                                this.getValArithmetic(stack, 'sub', isIfError);
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenMultiply:
                            {
                                this.getValArithmetic(stack, 'mul', isIfError);
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenDivide:
                            {
                                this.getValArithmetic(stack, 'div', isIfError);
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenLess:
                            {
                                this.processLogical(stack, 'less');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenGreater:
                            {
                                this.processLogical(stack, 'greater');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenGreaterEq:
                            {
                                this.processLogical(stack, 'greaterEq');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenLessEq:
                            {
                                this.processLogical(stack, 'lessEq');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenNotEqual:
                            {
                                this.processLogical(stack, 'notEq');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenOr:
                            {
                                this.processLogical(stack, 'or');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenAnd:
                            {
                                this.processLogical(stack, 'and');
                                i = i + 1;
                            }
                            break;
                        case this.parser.tokenEqual:
                            {
                                this.processLogical(stack, 'equal');
                                i = i + 1;
                            }
                            break;
                        default: {
                            return this.getErrorStrings()[CommonErrors.Value];
                        }
                    }
                }
            }
            if (stack.length === 0) {
                return this.emptyString;
            }
            else {
                var s = this.emptyString;
                var countValue = stack.length;
                while (countValue > 0) {
                    var sCheck = stack.pop();
                    if (this.getErrorStrings().indexOf(sCheck) > -1) {
                        return sCheck;
                    }
                    else {
                        s = sCheck + s;
                        if (s === this.emptyString && this.isCellReference(pFormula) &&
                            this.getTreatEmptyStringAsZero()) {
                            return '0';
                        }
                        countValue--;
                    }
                }
                return s;
            }
        }
        catch (ex) {
            if (this.getErrorStrings().indexOf(ex) > -1 || this.formulaErrorStrings.indexOf(ex) > -1) {
                throw ex;
            }
            throw new FormulaError(this.formulaErrorStrings[FormulasErrorsStrings.InvalidExpression]);
        }
    };
    Calculate.prototype.getValArithmetic = function (stack, operator, isIfError) {
        var isErrorString = false;
        var num1 = stack.pop();
        var decimalCount1 = num1.indexOf('.') !== -1 ? num1.split('.')[1].length : 0;
        var factor1 = Math.pow(10, decimalCount1);
        var num2 = stack.pop();
        var decimalCount2 = num2.indexOf('.') !== -1 ? num2.split('.')[1].length : 0;
        var factor2 = Math.pow(10, decimalCount2);
        var bigFactor = factor1 >= factor2 ? factor1 : factor2;
        var factors = factor1 * factor2;
        num1 = num1 === this.trueValue ? '1' : (num1 === this.falseValue ? '0' : num1);
        num1 = num1 === this.emptyString ? '0' : (this.getErrorStrings().indexOf(num1.toString()) < 0 ? this.parseFloat(num1 + '').toString() : num1);
        var num = Number(num1);
        if (isNaN(num) && !isIfError) {
            isErrorString = true;
            if (num1 === this.getErrorStrings()[CommonErrors.DivZero]) {
                stack.push(this.getErrorStrings()[CommonErrors.DivZero]);
            }
            else {
                stack.push(this.getErrorStrings()[CommonErrors.Value]);
            }
        }
        num2 = num2 === this.trueValue ? '1' : (num2 === this.falseValue ? '0' : num2);
        num2 = num2 === this.emptyString ? '0' : (this.getErrorStrings().indexOf(num2.toString()) < 0 ? this.parseFloat(num2 + '').toString() : num2);
        num = Number(num2);
        if (isNaN(num) && !isIfError) {
            isErrorString = true;
            if (num2 === this.getErrorStrings()[CommonErrors.DivZero]) {
                stack.push(this.getErrorStrings()[CommonErrors.DivZero]);
            }
            else {
                stack.push(this.getErrorStrings()[CommonErrors.Value]);
            }
        }
        if (operator === 'add' && !isErrorString) {
            stack.push(((((Number(num2) * bigFactor) + (Number(num1) * bigFactor)) / bigFactor)).toString());
        }
        if (operator === 'sub' && !isErrorString) {
            stack.push(((((Number(num2) * bigFactor) - (Number(num1) * bigFactor)) / bigFactor)).toString());
        }
        if (operator === 'mul' && !isErrorString) {
            stack.push(((((Number(num2) * factor2) * (Number(num1) * factor1)) / factors)).toString());
        }
        if (operator === 'div' && !isErrorString) {
            if (this.isNaN(this.parseFloat(num1)) || this.isNaN(this.parseFloat(num2))) {
                stack.push(this.getErrorStrings()[CommonErrors.Value]);
            }
            else if (this.parseFloat(num1) === 0) {
                stack.push(this.getErrorStrings()[CommonErrors.DivZero]);
            }
            else {
                stack.push(((Number(num2) * factors) / (Number(num1) * factors)).toString());
            }
        }
    };
    /**
     * Used to perform logical operation between two values.
     *
     * @hidden
     * @param {string[]} stack - Specifies the values that are used to perform the logical operation.
     * @param {string} operator - Specifies the logical operator.
     * @returns {string} - It returns whether the logical operation is TRUE or FALSE.
     */
    Calculate.prototype.processLogical = function (stack, operator) {
        var val1;
        var val2;
        var value1;
        var value2;
        var isOnlyAsterisk;
        var result;
        var isErrorString = false;
        if (operator !== 'and' && operator !== 'equal') {
            val1 = stack.pop();
            val2 = stack.pop();
            if (this.getErrorStrings().indexOf(val1) > -1) {
                result = val1;
                isErrorString = true;
            }
            else if (this.getErrorStrings().indexOf(val2) > -1) {
                result = val2;
                isErrorString = true;
            }
            if (this.isNaN(this.parseFloat(val1)) && this.isNaN(this.parseFloat(val2))) {
                val1 = val1.toString().toLowerCase();
                val2 = val2.toString().toLowerCase();
            }
            if (!isNullOrUndefined(val1)) {
                value1 = val1.indexOf(this.tic) > -1 ? val1 : this.parseFloat(val1);
            }
            if (!isNullOrUndefined(val2)) {
                value2 = val2.indexOf(this.tic) > -1 ? val2 : this.parseFloat(val2);
            }
            if (val1 === '*' && this.isNaN(this.parseFloat(val2)) && val2 !== '') {
                isOnlyAsterisk = true;
            }
        }
        if (operator === 'less' && !isErrorString) {
            if (!this.isNaN(value1) && !this.isNaN(value2)) {
                result = (value2 < value1) ? this.trueValue : this.falseValue;
            }
            else {
                result = (val2.toUpperCase().split(this.tic).join('').localeCompare(val1.toUpperCase().split(this.tic).join('')) < 0) ?
                    this.trueValue : this.falseValue;
            }
        }
        if (operator === 'greater' && !isErrorString) {
            if (!this.isNaN(value1) && !this.isNaN(value2)) {
                result = (value2 > value1) ? this.trueValue : this.falseValue;
            }
            else {
                result = (val2.toUpperCase().split(this.tic).join('').localeCompare(val1.toUpperCase().split(this.tic).join('')) > 0) ?
                    this.trueValue : this.falseValue;
            }
        }
        if (operator === 'lessEq' && !isErrorString) {
            if (!this.isNaN(value1) && !this.isNaN(value2)) {
                result = (value2 <= value1) ? this.trueValue : this.falseValue;
            }
            else {
                result = (val2.toUpperCase().split(this.tic).join('').localeCompare(val1.toUpperCase().split(this.tic).join('')) <= 0) ?
                    this.trueValue : this.falseValue;
            }
        }
        if (operator === 'greaterEq' && !isErrorString) {
            if (!this.isNaN(value1) && !this.isNaN(value2)) {
                result = (value2 >= value1) ? this.trueValue : this.falseValue;
            }
            else {
                result = (val2.toUpperCase().split(this.tic).join('').localeCompare(val1.toUpperCase().split(this.tic).join('')) >= 0) ?
                    this.trueValue : this.falseValue;
            }
        }
        if (operator === 'notEq' && !isErrorString) {
            result = (val2 !== val1) ? this.trueValue : this.falseValue;
            if (isOnlyAsterisk) {
                result = this.falseValue;
            }
        }
        if (operator === 'and' && !isErrorString) {
            val1 = stack.pop().toString();
            val2 = '';
            if (stack.length > 0) {
                val2 = stack.pop().toString();
            }
            if (this.getErrorStrings().indexOf(val1) > -1) {
                result = val1;
            }
            else if (this.getErrorStrings().indexOf(val2) > -1) {
                result = val2;
            }
            else {
                result = this.emptyString + val2 + val1 + this.emptyString;
                result = result.split(this.tic).join('');
            }
        }
        if (operator === 'equal' && !isErrorString) {
            val1 = stack.pop();
            val2 = stack.pop();
            if (this.getErrorStrings().indexOf(val1) > -1) {
                result = val1;
            }
            else if (this.getErrorStrings().indexOf(val2) > -1) {
                result = val2;
            }
            else {
                if (this.isNaN(this.parseFloat(val1)) && this.isNaN(this.parseFloat(val2))) {
                    val1 = val1.toString().toLowerCase();
                    val2 = val2.toString().toLowerCase();
                }
                if (val1 === '*' && this.isNaN(this.parseFloat(val2)) && val2 !== '') {
                    isOnlyAsterisk = true;
                }
                result = val1 === val2 || isOnlyAsterisk ? this.trueValue : this.falseValue;
            }
        }
        if (operator === 'or' && !isErrorString) {
            result = Math.pow(this.parseFloat(value2), this.parseFloat(value1)).toString();
            result = this.isNaN(this.parseFloat(result)) ? this.getErrorStrings()[CommonErrors.Value] : result;
        }
        stack.push(result);
        return result;
    };
    /**
     * @hidden
     * @param {StoredCellInfo} sCell - specified the cell information
     * @returns {string[]} - compute stored cells
     */
    Calculate.prototype.computeStoreCells = function (sCell) {
        var cellValue = sCell.cellValue;
        var cellRanges = sCell.cellRange;
        var criterias = sCell.criteria;
        var argArr = sCell.argArray;
        var isCriteria = sCell.isCriteria;
        var storeCell = sCell.storedCells;
        var isCountIfs = sCell.isCountIfS === this.trueValue;
        var i = sCell.countVal || 0;
        var rangeLength = isCriteria === this.trueValue ? storeCell : cellValue;
        var tempStoredCell = [];
        var criteria;
        for (var j = 0; j < rangeLength.length; j++) {
            var stack = [];
            var cellVal = this.getValueFromArg(cellValue[j]);
            var arrValue = argArr[isCountIfs ? (1 + (i * 2)) : (2 + i)];
            var isStringVal = arrValue.startsWith(this.tic) && arrValue.endsWith(this.tic);
            criteria = arrValue.trim().split(this.tic).join(this.emptyString);
            var isAsterisk = criteria.includes('*');
            var isAsteriskOnly = criteria === '*' || criteria === '<>*';
            var criteriaValue = isAsterisk && !isAsteriskOnly ? criteria.replace(/\*/g, '').trim() : criteria;
            var isCellReferenceValue = false;
            if (!isStringVal && this.isCellReference(criteriaValue)) {
                criteriaValue = this.getValueFromArg(criteriaValue);
                isCellReferenceValue = true;
            }
            if (isAsterisk && !isAsteriskOnly) {
                var asteriskIndex = criteria.indexOf('*');
                if (criteria[0] === '*') {
                    criteriaValue = '*' + criteriaValue;
                }
                if (criteria[criteria.length - 1] === '*') {
                    criteriaValue += '*';
                }
                if (asteriskIndex > 0 && asteriskIndex < criteria.length - 1) {
                    criteriaValue = criteria.substring(0, asteriskIndex) + '*' + criteria.substring(asteriskIndex + 1);
                }
            }
            criteria = criteriaValue;
            var newCell = '';
            isCriteria = isCountIfs ? this.trueValue : isCriteria;
            if (isCriteria === this.trueValue) {
                var cell = '';
                var count = 0;
                var newCount = 0;
                var prevCriteria = void 0;
                var prevCriteriaIdx = void 0;
                var prevStoreCellIdx = void 0;
                var criteriaRangeIndexes = void 0;
                storeCell[j] = isCountIfs && !i ? cellValue[j] : storeCell[j];
                cell = storeCell[j];
                if (i) {
                    prevCriteria = cellRanges[i - 1];
                    prevCriteriaIdx = prevCriteria.indexOf('!') > -1 ? getRangeIndexes(prevCriteria.substring(prevCriteria.lastIndexOf('!') + 1)) : getRangeIndexes(prevCriteria);
                    prevStoreCellIdx = cell.indexOf('!') > -1 ? getCellIndexes(cell.substring(cell.lastIndexOf('!') + 1)) : getCellIndexes(cell);
                    criteriaRangeIndexes = cellRanges[i].indexOf('!') > -1 ?
                        getRangeIndexes(cellRanges[i].substring(cellRanges[i].lastIndexOf('!') + 1)) :
                        getRangeIndexes(cellRanges[i]);
                }
                var isCriteriaFromOtherSheet = cell.indexOf('!') > -1;
                var isSumFromOtherSheet = void 0;
                var sumRangeSheet = '';
                var criteriaRangeSheet = '';
                if (isCriteriaFromOtherSheet) {
                    criteriaRangeSheet = cell.substring(0, cell.lastIndexOf('!') + 1);
                    cell = cell.substring(cell.lastIndexOf('!') + 1);
                }
                // convert the new cell ranges  for find in range with criteria.
                while (!this.isDigit(cell[count])) {
                    count = count + 1;
                }
                if (this.isCellReference(cellRanges[i]) && cellRanges[i].indexOf(':') > -1) {
                    newCell = isCountIfs && !i ? (rangeLength[j].indexOf('!') > -1 ? rangeLength[j].substring(rangeLength[j].lastIndexOf('!') + 1) : rangeLength[j]) : getCellAddress(criteriaRangeIndexes[0] + (prevStoreCellIdx[0] - prevCriteriaIdx[0]), criteriaRangeIndexes[1] +
                        (prevStoreCellIdx[1] - prevCriteriaIdx[1]));
                    isSumFromOtherSheet = cellRanges[i].indexOf('!') > -1;
                    if (isSumFromOtherSheet) {
                        sumRangeSheet = cellRanges[i].substring(0, cellRanges[i].lastIndexOf('!') + 1);
                    }
                    while (!this.isDigit(newCell[newCount])) {
                        newCount = newCount + 1;
                    }
                }
                var cellAlpha = this.substring(cell, count);
                var newCellAlpha = this.substring(newCell, newCount);
                var cellNumeric = this.substring(cell, count, cell.length - count);
                var newCellNumeric = this.substring(newCell, newCount, newCell.length - count);
                if (isCriteriaFromOtherSheet) {
                    cellAlpha = criteriaRangeSheet + cellAlpha;
                    newCellAlpha = criteriaRangeSheet + newCellAlpha;
                }
                if (cellNumeric !== newCellNumeric) {
                    storeCell[j] = this.substring(storeCell[j], isCriteriaFromOtherSheet ? (criteriaRangeSheet.length + count) : count) + newCellNumeric;
                }
                newCell = storeCell[j].split(cellAlpha).join(newCellAlpha);
                if (isSumFromOtherSheet) {
                    if (newCell.indexOf('!') > -1) {
                        newCell = newCell.substring(newCell.lastIndexOf('!') + 1);
                    }
                    newCell = sumRangeSheet + newCell;
                }
                else {
                    newCell = newCell.substring(newCell.lastIndexOf('!') + 1);
                }
                cellVal = this.getValueFromArg(newCell);
                criteria = isCountIfs ? criteria : criterias[i - 1].split(this.tic).join(this.emptyString);
            }
            var op = 'equal';
            if (criteria.startsWith('<=')) {
                op = 'lessEq';
                criteria = criteria.substring(2);
            }
            else if (criteria.startsWith('>=')) {
                op = 'greaterEq';
                criteria = criteria.substring(2);
            }
            else if (criteria.startsWith('<>')) {
                op = 'notEq';
                criteria = criteria.substring(2);
            }
            else if (criteria.startsWith('<')) {
                op = 'less';
                criteria = criteria.substring(1);
            }
            else if (criteria.startsWith('>')) {
                op = 'greater';
                criteria = criteria.substring(1);
            }
            else if (criteria.startsWith('=')) {
                op = 'equal';
                criteria = criteria.substring(1);
            }
            if ((!isStringVal && this.isCellReference(criteria) && (!isCellReferenceValue || (newCell !== '' && !isCountIfs))) || criteria.includes(this.arithMarker)) {
                criteria = this.getValueFromArg(criteria);
            }
            if (criteria.indexOf('*') > -1 || criteria.indexOf('?') > -1) {
                cellVal = this.findWildCardValue(criteria.toLowerCase(), cellVal.toLowerCase());
            }
            stack.push(cellVal.toLowerCase());
            stack.push(criteria.toLowerCase());
            if (this.processLogical(stack, op) === this.trueValue) {
                if (isCriteria === this.falseValue) {
                    tempStoredCell.push(cellValue[j]);
                }
                else {
                    tempStoredCell.push(newCell);
                }
            }
        }
        storeCell = tempStoredCell;
        tempStoredCell = [];
        return storeCell;
    };
    Calculate.prototype.computeIfsFormulas = function (range, isCountIfs, isAvgIfs) {
        if (isCountIfs === this.trueValue && (isNullOrUndefined(range) || range[0] === '' || range.length < 2 || range.length > 127 ||
            range.length % 2 !== 0)) {
            return this.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        var argArr = range;
        var cellRanges = [];
        var criterias = [];
        var storedCell = [];
        var storedCellLength = 0;
        var sum = 0;
        for (var i = 0; i < argArr.length; i++) {
            if (argArr[i].indexOf(':') > -1 && this.isCellReference(argArr[i])) {
                cellRanges.push(argArr[i].trim());
            }
            else {
                criterias.push(argArr[i].trim());
            }
        }
        var len = [];
        for (var i = 0; i < cellRanges.length; i++) {
            len.push(this.getCellCollection(cellRanges[i]).length);
        }
        for (var j = 0; j < len.length; j++) {
            if (len[j] && len[j + 1] && len[j] !== len[j + 1]) {
                return this.getErrorStrings()[CommonErrors.Value];
            }
        }
        for (var k = 0; k < criterias.length; k++) {
            if (criterias[k] === '') {
                if (isAvgIfs === this.trueValue) {
                    return this.getErrorStrings()[CommonErrors.DivZero];
                }
                return 0;
            }
        }
        var cellvalue;
        var isCriteria;
        if (isCountIfs === this.falseValue) {
            isCriteria = this.falseValue;
            cellvalue = this.getCellCollection(cellRanges[1]);
            var sCell = {
                cellValue: cellvalue, cellRange: cellRanges, criteria: criterias,
                argArray: argArr, isCriteria: isCriteria, storedCells: storedCell, isCountIfS: isCountIfs
            };
            storedCell = this.computeStoreCells(sCell);
            storedCellLength = storedCell.length;
            if (storedCellLength === 0) {
                return isAvgIfs === this.trueValue ? this.getErrorStrings()[CommonErrors.DivZero] : 0;
            }
        }
        // Compare criteria and convert the new cell ranges.
        var startRange = isCountIfs === this.trueValue ? 0 : 2;
        for (var i = startRange; i < cellRanges.length; i++) {
            isCriteria = this.trueValue;
            isCriteria = isCountIfs === this.trueValue && i === 0 ? this.falseValue : this.trueValue;
            cellvalue = this.getCellCollection(cellRanges[i]);
            var sCell = {
                cellValue: cellvalue, cellRange: cellRanges, criteria: criterias,
                argArray: argArr, isCriteria: isCriteria, storedCells: storedCell, isCountIfS: isCountIfs, countVal: i
            };
            storedCell = this.computeStoreCells(sCell);
            storedCellLength = storedCell.length;
            if (storedCellLength === 0) {
                return isAvgIfs === this.trueValue ? this.getErrorStrings()[CommonErrors.DivZero] : 0;
            }
        }
        var avgValCount = 0;
        var sumRangeIndexes = cellRanges[0].indexOf('!') > -1 ?
            getRangeIndexes(cellRanges[0].substring(cellRanges[0].lastIndexOf('!') + 1)) : getRangeIndexes(cellRanges[0]);
        var lastCriteria = cellRanges[cellRanges.length - 1];
        var criteriaRangeIndexes = lastCriteria.indexOf('!') > -1 ?
            getRangeIndexes(lastCriteria.substring(lastCriteria.lastIndexOf('!') + 1)) : getRangeIndexes(lastCriteria);
        for (var j = 0; j < storedCell.length; j++) {
            // convert the new cell ranges  for find sum in range 0(first range)
            var cell = '';
            var newCell = '';
            var count = 0;
            var newCount = 0;
            cell = storedCell[j];
            var isCriteriaFromOtherSheet = cell.indexOf('!') > -1;
            var isSumFromOtherSheet = void 0;
            var sumRangeSheet = '';
            var criteriaRangeSheet = '';
            if (isCriteriaFromOtherSheet) {
                criteriaRangeSheet = cell.substring(0, cell.lastIndexOf('!') + 1);
                cell = cell.substring(cell.lastIndexOf('!') + 1);
            }
            while (!this.isDigit(cell[count])) {
                count = count + 1;
            }
            if (this.isCellReference(cellRanges[0]) && cellRanges[0].indexOf(':') > -1) {
                newCell = getCellAddress(sumRangeIndexes[0] + (getCellIndexes(cell)[0] - criteriaRangeIndexes[0]), sumRangeIndexes[1] + (getCellIndexes(cell)[1] - criteriaRangeIndexes[1]));
                isSumFromOtherSheet = cellRanges[0].indexOf('!') > -1;
                if (isSumFromOtherSheet) {
                    sumRangeSheet = cellRanges[0].substring(0, cellRanges[0].lastIndexOf('!') + 1);
                }
                while (!this.isDigit(newCell[newCount])) {
                    newCount = newCount + 1;
                }
            }
            var cellAlpha = this.substring(cell, count);
            var newCellAlpha = this.substring(newCell, newCount);
            var cellNumeric = this.substring(cell, count, cell.length - count);
            var newCellNumeric = this.substring(newCell, newCount, newCell.length - count);
            if (isCriteriaFromOtherSheet) {
                cellAlpha = criteriaRangeSheet + cellAlpha;
                newCellAlpha = criteriaRangeSheet + newCellAlpha;
            }
            if (cellNumeric !== newCellNumeric) {
                storedCell[j] = this.substring(storedCell[j], isCriteriaFromOtherSheet ? (criteriaRangeSheet.length + count) : count) + newCellNumeric;
            }
            cellvalue = storedCell[j].split(cellAlpha).join(newCellAlpha);
            if (isSumFromOtherSheet) {
                if (cellvalue.indexOf('!') > -1) {
                    cellvalue = cellvalue.substring(cellvalue.lastIndexOf('!') + 1);
                }
                cellvalue = sumRangeSheet + cellvalue;
            }
            else {
                cellvalue = cellvalue.substring(cellvalue.lastIndexOf('!') + 1);
            }
            if (isCountIfs === this.trueValue) {
                sum = sum + 1;
            }
            else {
                var argValue = this.getValueFromArg(cellvalue);
                var newArgValue = parseFloat(argValue === '' && isAvgIfs !== this.trueValue ? '0' : argValue);
                if (this.isNumber(newArgValue)) {
                    avgValCount++;
                    sum = sum + newArgValue;
                }
            }
        }
        if (isAvgIfs === this.trueValue) {
            sum = sum / avgValCount;
        }
        return sum;
    };
    Calculate.prototype.processNestedFormula = function (pText, sFormula, fResult) {
        if (fResult && !fResult.toString().includes('"')) {
            var formulaEndIdx = pText.indexOf(sFormula) + sFormula.length;
            if (pText[formulaEndIdx] === '"' && this.getErrorStrings().indexOf(fResult.toString()) < 0 &&
                !this.isNumber(fResult) && fResult !== this.trueValue && fResult !== this.falseValue) {
                return pText.split(sFormula).join('"' + fResult + '"');
            }
        }
        return pText.split(sFormula).join('n' + fResult);
    };
    /**
     * @hidden
     * @param {string | number} value - Specify the value
     * @returns {boolean} -  Returns boolean value
     */
    Calculate.prototype.isNaN = function (value) {
        if (value.toString() === 'NaN' || typeof value === 'string') {
            return true;
        }
        return false;
    };
    /**
     * @hidden
     * @param {string} val - Specifies the value.
     * @returns {boolean} - Returns boolean value.
     */
    Calculate.prototype.isNumber = function (val) {
        return val - parseFloat(val) >= 0;
    };
    /**
     * @hidden
     * @param {number} doubleNumber - To specify the double number
     * @returns {Date} - Returns date.
     */
    Calculate.prototype.fromOADate = function (doubleNumber) {
        doubleNumber = (doubleNumber > 0 && doubleNumber < 1) ? (1 + doubleNumber) : (doubleNumber === 0) ? 1 : doubleNumber;
        if (doubleNumber > 60) {
            doubleNumber -= 1; // Due to leap year issue of 1900 in MSExcel.
        }
        var result = new Date('01/01/1900');
        var resultDateUTC = Date.UTC(result.getFullYear(), result.getMonth(), result.getDate(), result.getHours(), result.getMinutes(), result.getSeconds(), result.getMilliseconds());
        return new Date(new Date(((doubleNumber - 1) * (this.millisecondsOfaDay)) + resultDateUTC).toUTCString().replace(' GMT', ''));
    };
    /**
     * @hidden
     * @param {number} year - Specify the year.
     * @param {number} month - Specify the month.
     * @param {number} day - Specify the day.
     * @returns {number} -  to get serial date from date.
     */
    Calculate.prototype.getSerialDateFromDate = function (year, month, day) {
        var days = 0;
        if (year < 1900) {
            year += 1900;
        }
        var isValidMonth = false;
        while (!isValidMonth) {
            while (month > 12) {
                year++;
                month -= 12;
            }
            while (month < 1) {
                month += 12;
                year--;
            }
            isValidMonth = true;
            var tempDay = new Date(year, month, 1, -1).getDate();
            while (day > tempDay) {
                tempDay = new Date(year, month, 1, -1).getDate();
                month++;
                day -= tempDay;
                isValidMonth = false;
            }
            if (day < 1) {
                month--;
                if (month < 1) {
                    month = 12;
                    year--;
                }
                tempDay = new Date(year, month, 1, -1).getDate();
                day = tempDay + day;
                isValidMonth = false;
            }
        }
        var dateTime = Date.parse(year + "/" + month + "/" + day);
        if (!this.isNaN(dateTime)) {
            days = this.toOADate(new Date(dateTime));
        }
        return days;
    };
    /**
     * @hidden
     * @param {string | number} value - Specify the Time
     * @returns {string} -  returns to time.
     */
    Calculate.prototype.intToTime = function (value) {
        var val = value.toString().split('.');
        if (!isNullOrUndefined(val[1])) {
            value = parseFloat(val[0] + 1 + '.' + val[1]) || value;
        }
        return this.intToDate(value.toString());
    };
    /**
     * @hidden
     * @param {Date} dateTime - Specify the date Time
     * @param {boolean} isTime - Specify the boolean value.
     * @param {boolean} isTimeOnly - Specify the value is only a time without date.
     * @returns {number} -  returns to date.
     */
    Calculate.prototype.toOADate = function (dateTime, isTime, isTimeOnly) {
        var startDate = new Date('01/01/1900');
        var date = isDateTime(dateTime) ? dateTime : new Date(dateTime);
        var startDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds());
        var dateUTC = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
        var diffDays = ((dateUTC - startDateUTC) / (1000 * 3600 * 24));
        return (isTime ? diffDays : parseInt(diffDays.toString(), 10)) + (isTimeOnly ? 0 : (diffDays > 60 ? 2 : 1));
    };
    /**
     * @hidden
     * @param {string} date - Specify the date
     * @returns {string} -  returns calculate Date
     */
    Calculate.prototype.calculateDate = function (date) {
        return (this.parseFloat(date) < 10) ? '0' + date : date;
    };
    /**
     * @hidden
     * @param {string} s - Specify the s
     * @returns {boolean} -  returns boolean value.
     */
    Calculate.prototype.isTextEmpty = function (s) {
        return s === null || s === '';
    };
    /**
     * @hidden
     * @param {string} text - Specify the text
     * @returns {boolean} -  returns boolean value.
     */
    Calculate.prototype.isDigit = function (text) {
        var charCode = text.charCodeAt(0);
        return charCode > 47 && charCode < 58;
    };
    Calculate.prototype.findLastIndexOfq = function (fString) {
        var lastIndexOfq = fString.lastIndexOf('q');
        var lastIndexOflLeftBracket = fString.lastIndexOf(this.leftBracket);
        while (lastIndexOflLeftBracket < lastIndexOfq) {
            lastIndexOfq = fString.substring(0, lastIndexOfq).lastIndexOf('q');
        }
        return lastIndexOfq;
    };
    /**
     * To get the exact value from argument.
     *
     * @param {string} val - Formula argument for getting a exact value.
     * @param {boolean} isUnique - It specifies unique formula or not.
     * @param {boolean} isIfError - It specifies `IFERROR` formula or not.
     * @param {boolean} isSubtotal - It specifies subtotal formula.
     * @returns {string} - To get the exact value from argument.
     */
    Calculate.prototype.getValueFromArg = function (val, isUnique, isIfError, isSubtotal) {
        val = val.trim();
        if (!val || this.getErrorStrings().indexOf(val) > -1) {
            return val;
        }
        var firstChar = val[0];
        if (firstChar === this.tic || firstChar === this.singleTic) {
            var parsedVal = val.split(this.tic).join('');
            if (this.isNaN(this.parseFloat(parsedVal))) {
                var dateTime = this.isDate(parsedVal);
                if (dateTime && !this.isNaN(dateTime.getDate())) {
                    return this.toOADate(dateTime, true).toString();
                }
            }
            if (val.endsWith(this.tic)) {
                var decimalSep = this.getParseDecimalSeparator();
                if (decimalSep !== '.' && parsedVal.includes(decimalSep)) {
                    parsedVal = parsedVal.replace(decimalSep, '.');
                    if (this.isNumber(parsedVal)) {
                        val = parsedVal;
                    }
                }
            }
            return val;
        }
        else if (firstChar === 'u' && val.includes(this.arithMarker)) {
            // To parse - sign with brackets, cell references and nested formulas in the formula arguments. Ex: -(I13+I14+I12)/(-D2+D1) as arguments in formulas.
            val = this.parser.parseSimpleOperators(val.split('u').join('0-'), [this.parser.tokenSubtract], ['-']);
        }
        else {
            var isFirstCharUpper = this.isUpperChar(firstChar);
            if (!isFirstCharUpper) {
                var decimalSep = this.getParseDecimalSeparator();
                if (this.isDigit(firstChar) || firstChar === decimalSep || firstChar === '-' || firstChar === 'n') {
                    if (firstChar === 'n') {
                        val = val.substring(1);
                        if (val.indexOf('"n') > -1) {
                            val = val.replace('"n', '"');
                        }
                    }
                    if (decimalSep !== '.' && val.includes(decimalSep)) {
                        var parsedVal = val.replace(decimalSep, '.');
                        if (this.isNumber(parsedVal)) {
                            val = parsedVal;
                        }
                    }
                    return val;
                }
            }
        }
        var tokenAvail = firstChar === this.sheetToken;
        if (tokenAvail || (this.isUpperChar(firstChar) && !['+', '-', '/', '*', ')', ')', '{'].some(function (opr) { return val.includes(opr); }))) {
            var isCellRef = this.isCellReference(val);
            if (isCellRef && !tokenAvail) {
                var family = this.getSheetFamilyItem(this.grid);
                if (family.sheetNameToParentObject !== null && family.parentObjectToToken.has(this.grid)) {
                    val = family.parentObjectToToken.get(this.grid) + val;
                }
            }
            if (val === this.cell) {
                var dependent = this.getDependentCells().get(val);
                if (dependent != null && dependent.indexOf(val) > -1) {
                    this.arrayRemove(dependent, val);
                }
                if (!this.getDependentFormulaCells().has(this.cell)) {
                    this.clearFormulaDependentCells(this.cell);
                }
                if (!isUnique) {
                    throw new FormulaError(this.formulaErrorStrings[FormulasErrorsStrings.CircularReference]);
                }
            }
            var result = this.getParentObjectCellValue(val, false, isUnique, isSubtotal).toString();
            if (isCellRef) {
                this.updateDependentCell(val);
            }
            return result;
        }
        else {
            return this.computeValue(val, false, isIfError);
        }
    };
    Calculate.prototype.isDate = function (date) {
        if (typeof date === 'object' || Date.parse(date) !== null) {
            var dateVal = void 0;
            if (typeof date === 'string') {
                dateVal = this.checkDateFormat(date);
            }
            else {
                dateVal = new Date(Date.parse(date));
            }
            if (dateVal >= this.dateTime1900) {
                return dateVal;
            }
            else {
                return null;
            }
        }
        else {
            return null;
        }
    };
    Calculate.prototype.isValidCellReference = function (text) {
        var start = 0;
        var end = 0;
        var j = 0;
        var numArr = [89, 71, 69];
        var cellTxt = this.emptyString;
        if (this.namedRanges.has(text)) {
            return false;
        }
        for (var i = 0; i < text.length; i++) {
            if (this.isChar(text[i])) {
                end++;
            }
        }
        cellTxt = text.substring(start, end);
        if (cellTxt.length < 4) {
            while (j < cellTxt.length) {
                if (!isNullOrUndefined(cellTxt[j]) && cellTxt[j].charCodeAt(0) < numArr[j]) {
                    j++;
                    continue;
                }
                else if (isNullOrUndefined(cellTxt[j]) && j > 0) {
                    break;
                }
                else {
                    return false;
                }
            }
            var cellNum = this.parseFloat(text.substring(end, text.length));
            if (cellNum < 1048576) { // Maximum number of rows in excel.
                return true;
            }
        }
        return false;
    };
    /**
     * @hidden
     * @param {any} date - Specify the date
     * @returns {any} - Returns date value.
     */
    Calculate.prototype.parseDate = function (date) {
        if (!this.isNaN(date)) {
            if (date instanceof Date) {
                return new Date(date);
            }
            var d = parseInt(date, 10);
            if (d < 0) {
                return this.getErrorStrings()[CommonErrors.Num];
            }
            if (d <= 60) {
                return new Date(this.dateTime1900.getTime() + (d - 1) * 86400000);
            }
            return new Date(this.dateTime1900.getTime() + (d - 2) * 86400000);
        }
        if (typeof date === 'string') {
            date = this.checkDateFormat(date, true);
            if (!this.isNaN(date)) {
                return date;
            }
        }
        return this.getErrorStrings()[CommonErrors.Value];
    };
    Calculate.prototype.checkDateFormat = function (date, pvtParse) {
        if (this.parentObject.getModuleName() === 'spreadsheet' &&
            this.parentObject.locale !== 'en-US') {
            var dateEventArgs = { value: date,
                cell: { value: date } };
            this.parentObject.notify('checkDateFormat', dateEventArgs);
            if (dateEventArgs.isDate) {
                return dateEventArgs.dateObj;
            }
        }
        if (!pvtParse) {
            return new Date(Date.parse(date));
        }
        return new Date(date);
    };
    /**
     * @hidden
     * @param {string} args - Specify the args
     * @returns {boolean} - Returns boolean value.
     */
    Calculate.prototype.isCellReference = function (args) {
        args = args.trim();
        if (args === this.emptyString) {
            return false;
        }
        args = this.setTokensForSheets(args);
        var sheetToken1 = this.getSheetToken(args);
        var containsBoth = false;
        if (sheetToken1 !== '') {
            args = args.split(sheetToken1).join(this.emptyString);
        }
        var isAlpha = false;
        var isNum = false;
        if (args.indexOf(':') !== args.lastIndexOf(':')) {
            return false;
        }
        var charArray = (args.split('').join(this.getParseArgumentSeparator())).split(this.getParseArgumentSeparator());
        for (var c = 0; c < charArray.length; c++) {
            if (this.isChar(charArray[c])) {
                isAlpha = true;
            }
            else if (this.isDigit(charArray[c])) {
                isNum = true;
            }
            else if (charArray[c] === ':') {
                if (isAlpha && isNum) {
                    containsBoth = true;
                }
                isAlpha = false;
                isNum = false;
            }
            else {
                return false;
            }
        }
        if (args.indexOf(':') > -1 && args.indexOf(this.tic) === -1) {
            if (containsBoth && isAlpha && isNum) {
                return true;
            }
            else if (((isAlpha && !isNum) || (!isAlpha && isNum)) && !containsBoth) {
                return true;
            }
            else {
                return false;
            }
        }
        if (isAlpha && isNum && args.indexOf(this.tic) === -1 && this.isValidCell(args)) {
            return true;
        }
        return false;
    };
    /**
     * @hidden
     * @param {string} text - Specify the text.
     * @returns {string} - set Tokens For Sheets.
     */
    Calculate.prototype.setTokensForSheets = function (text) {
        var family = this.getSheetFamilyItem(this.grid);
        var sortedSheetNamesCollection = this.getSortedSheetNames();
        if (sortedSheetNamesCollection != null) {
            for (var n = 0; n < sortedSheetNamesCollection.length; n++) {
                var token = family.sheetNameToToken.get(sortedSheetNamesCollection[n]);
                token = token.split(this.sheetToken).join(this.tempSheetPlaceHolder);
                var s = this.singleTic + 'SHEET' + sortedSheetNamesCollection[n] + this.singleTic + this.sheetToken;
                if (text.indexOf(s) === -1) {
                    s = 'SHEET' + sortedSheetNamesCollection[n] + this.sheetToken;
                }
                text = text.split(s).join(token);
                s = sortedSheetNamesCollection[n] + this.sheetToken;
                text = text.split(s).join(token);
            }
        }
        text = text.split(this.tempSheetPlaceHolder).join(this.sheetToken);
        if (text.indexOf('!!') > -1) {
            text = text.replace('!!', '!');
            var textSplit = text.split('!');
            textSplit[1] = (parseInt(textSplit[1], 10) + 1).toString();
            text = textSplit.join('!');
        }
        return text;
    };
    Calculate.prototype.getParentObjectCellValue = function (val, refresh, isUnique, isSubtotal) {
        if (val === this.trueValue || val === this.falseValue) {
            return val;
        }
        var tokenIdx = val.lastIndexOf(this.sheetToken);
        var grid = this.grid;
        var cellRef;
        if (tokenIdx > -1) {
            var family = this.getSheetFamilyItem(grid);
            if (family.tokenToParentObject !== null) {
                this.grid = family.tokenToParentObject.get(val.substring(0, tokenIdx + 1));
                cellRef = val.substring(tokenIdx + 1);
            }
            else {
                return this.getErrorStrings()[CommonErrors.Value];
            }
        }
        else {
            var j = 0;
            while (j < val.length && this.isChar(val[j])) {
                j++;
            }
            if (j === val.length) {
                return val === '' ? this.getErrorStrings()[CommonErrors.Value] : this.getErrorStrings()[CommonErrors.Name];
            }
            else {
                cellRef = val;
                var family = this.getSheetFamilyItem(grid);
                if (family.isSheetMember && family.parentObjectToToken != null) {
                    val = family.parentObjectToToken.get(this.grid) + val;
                }
            }
        }
        if (this.isDigit(cellRef[0])) {
            var alphabetStartIdx = cellRef.search(/[a-zA-Z]/);
            if (alphabetStartIdx > 0) {
                cellRef = cellRef.substring(alphabetStartIdx, cellRef.length) + cellRef.substring(0, alphabetStartIdx);
            }
        }
        var row = this.rowIndex(cellRef);
        var col = this.colIndex(cellRef);
        var result;
        if (!(row > 0 && row <= 1048576 && col > 0 && col <= 16384)) {
            result = this.getErrorStrings()[CommonErrors.Name];
        }
        else {
            var sheetId = this.getSheetId(this.grid);
            if (this.parentObject.notify) {
                var sheetInfoArgs = {
                    action: 'getSheetInfo', sheetInfo: []
                };
                this.parentObject.notify(workbookFormulaOperation, sheetInfoArgs);
                if (getSheetIndexByName(this.parentObject, 'Sheet' + sheetId, sheetInfoArgs.sheetInfo) === -1) {
                    this.grid = grid;
                    return this.getErrorStrings()[CommonErrors.Ref];
                }
            }
            result = this.getCellValueFn(grid, this.cell, sheetId, false, refresh, isUnique, isSubtotal)(row, col, val);
        }
        this.grid = grid;
        return result;
    };
    Calculate.prototype.getCellValueFn = function (grid, actCell, sheetId, updateDependentCell, refresh, isUnique, isSubtotal) {
        var _this = this;
        var fromCell = actCell;
        if (fromCell) {
            fromCell = grid === this.grid ? '' :
                fromCell + ',' + (typeof grid === 'string' && Number(grid) > -1 ? grid : this.getSheetID(grid));
        }
        var getValueRowCol = this.parentObject.getValueRowCol.bind(this.parentObject) ||
            this.getValueRowCol.bind(this);
        return function (row, col, curCell) {
            if (actCell === curCell && !isUnique) {
                throw _this.formulaErrorStrings[FormulasErrorsStrings.CircularReference];
            }
            _this.cell = curCell;
            var val = getValueRowCol(sheetId, row, col, fromCell, refresh, isUnique, isSubtotal);
            if (isNullOrUndefined(val)) {
                val = _this.emptyString;
            }
            else {
                val = val.toString();
                var decimalSep = _this.getParseDecimalSeparator();
                if (decimalSep !== '.' && val.includes(decimalSep)) {
                    var parsedVal = val.replace(decimalSep, '.');
                    if (_this.isNumber(parsedVal)) {
                        val = parsedVal;
                    }
                }
            }
            _this.cell = actCell;
            if (updateDependentCell) {
                _this.updateDependentCell(curCell);
            }
            return val;
        };
    };
    Calculate.prototype.isValidCell = function (args) {
        var digitStartIdx = args.search(/\d/);
        if (digitStartIdx === 0) {
            var alphabetStartIdx = args.search(/[a-zA-Z]/);
            args = args.substring(alphabetStartIdx, args.length) + args.substring(0, alphabetStartIdx);
        }
        var row = this.rowIndex(args);
        var col = this.colIndex(args);
        return row > 0 && row <= 1048576 && col > 0 && col <= 16384;
    };
    /**
     * Returns the Sheet ID based on parent object reference.
     *
     * @hidden
     * @param {Object} grd - Specify the parent object reference.
     * @returns {number} - Returns the Sheet ID.
     */
    Calculate.prototype.getSheetId = function (grd) {
        return grd && typeof grd === 'string' && Number(grd) > -1 ? Number(grd) : this.getSheetID(grd) + 1;
    };
    /**
     * Getting the formula result.
     *
     * @param {Object} grid - Specifies the parent object.
     * @param {number} row - Row index of the parent object or key.
     * @param {number} col - Column index of the parent object.
     * @returns {string} - Getting the formula result.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Calculate.prototype.getValueRowCol = function (grid, row, col) {
        var key = this.rowsToKeyMap.get(row).toString();
        var result = this.getKeyValue(key).toString();
        if (result != null && result[result.length - 1] === ('%') && result.length > 1) {
            var d = this.parseFloat(result.substring(0, result.length - 1));
            if (this.isNaN(d)) {
                result = (Number(d) / 100).toString();
            }
        }
        return result;
    };
    /**
     * To add custom library formula.
     *
     * @param {string} formulaName - Custom Formula name.
     * @param {string} functionName - Custom function name.
     * @param {string} formulaDescription - Formula Description.
     * @returns {void} - To add custom library formula.
     */
    Calculate.prototype.defineFunction = function (formulaName, functionName, formulaDescription) {
        if (typeof functionName === 'string') {
            functionName = getValue(functionName, window);
        }
        formulaName = formulaName.toUpperCase();
        this.libraryFormulas.set(formulaName, { handler: functionName, isCustom: true, description: formulaDescription });
    };
    /**
     * Specifies when changing the value.
     *
     * @param {string} grid - Parent object reference name.
     * @param {ValueChangedArgs} changeArgs - Value changed arguments.
     * @param {boolean} isCalculate - Value that allow to calculate.
     * @param {number[]} usedRangeCol - Specify the used range collection.
     * @param {boolean} refresh - Specifies for refreshing the value.
     * @param {string} sheetName - Specifies for sheet name for spreadsheet.
     * @param {boolean} isRandomFormula - Specifies for random formula values.
     * @param {boolean} randomFormulaRefreshing - Specifies for refreshing the random formula.
     * @param {boolean} isDelete - An optional flag indicating whether is from delete cells.
     * @param {number[]} deletedRange - An optional range array indicating the deleted cells.
     * @param {boolean} refreshDependentCells - Specifies dependent cell values are need to update or not.
     * @param {string} action - Specifies calculating option.
     * @returns {void} - Specifies when changing the value.
     */
    Calculate.prototype.valueChanged = function (grid, changeArgs, isCalculate, usedRangeCol, refresh, sheetName, isRandomFormula, randomFormulaRefreshing, isDelete, deletedRange, refreshDependentCells, action) {
        var pgrid = grid;
        this.spreadSheetUsedRange = usedRangeCol;
        this.grid = grid;
        var isComputedValueChanged = true;
        var isCompute = true;
        var calcFamily = this.getSheetFamilyItem(pgrid);
        var cellTxt = getAlphalabel(changeArgs.getColIndex()) + changeArgs.getRowIndex().toString();
        this.actCell = sheetName + '!' + cellTxt;
        if (calcFamily.sheetNameToParentObject !== null && calcFamily.sheetNameToParentObject.size > 0) {
            var token = calcFamily.parentObjectToToken.get(pgrid);
            cellTxt = token + cellTxt;
        }
        var argVal = changeArgs.getFormulaValue().toUpperCase();
        if (argVal.indexOf('=RAND()') > -1 || argVal.indexOf('=NOW()') > -1 || argVal.indexOf('NOW()') > -1 || argVal.indexOf('RAND()') > -1 || argVal.indexOf('=RANDBETWEEN(') > -1 ||
            argVal.indexOf('RANDBETWEEN(') > -1 || this.randomValues.has(cellTxt)) {
            var randStrVal = this.randCollection.toString();
            if (!this.randomValues.has(cellTxt)) {
                this.randomValues.set(cellTxt, changeArgs.getFormulaValue());
                this.randCollection.push(cellTxt);
                this.isRandomVal = true;
            }
            else if (this.randomValues.has(cellTxt)) {
                if (argVal.indexOf('=RAND()') > -1 || argVal.indexOf('=NOW()') > -1 || argVal.indexOf('NOW()') > -1 || argVal.indexOf('RAND()') > -1 || argVal.indexOf('=RANDBETWEEN(') > -1 ||
                    argVal.indexOf('RANDBETWEEN(') > -1) {
                    this.randomValues.set(cellTxt, changeArgs.getFormulaValue());
                }
                else if (changeArgs.getFormulaValue().toUpperCase() !== this.randomValues.get(cellTxt.toUpperCase())) {
                    this.randomValues.delete(cellTxt);
                    randStrVal = randStrVal.split(cellTxt + this.parseArgumentSeparator).join('').split(this.parseArgumentSeparator + cellTxt).join('').split(cellTxt).join('');
                    this.randCollection = randStrVal.split(this.parseArgumentSeparator);
                }
                if (this.randomValues.size === 0 && this.randCollection.length) {
                    this.isRandomVal = false;
                    this.randomValues.clear();
                    this.randCollection = [];
                }
            }
        }
        if (changeArgs.getFormulaValue() && changeArgs.getFormulaValue()[0] === this.getFormulaCharacter()) {
            this.cell = cellTxt;
            var formula = void 0;
            if (!isNullOrUndefined(isCompute)) {
                isCompute = isCalculate;
            }
            if (this.getFormulaInfoTable().has(cellTxt)) {
                formula = this.getFormulaInfoTable().get(cellTxt);
                if (changeArgs.getFormulaValue() !== formula.getFormulaText() || formula.getParsedFormula() == null) {
                    formula.setFormulaText(changeArgs.getFormulaValue());
                    if (this.getDependentFormulaCells().has(this.cell)) {
                        this.clearFormulaDependentCells(this.cell);
                    }
                    try {
                        formula.setParsedFormula(this.parser.parseFormula(changeArgs.getFormulaValue()));
                    }
                    catch (ex) {
                        formula.setFormulaValue(ex);
                        isCompute = false;
                    }
                }
                else {
                    this.parser.isError = false;
                }
                if (isCompute) {
                    this.parser.isFormulaParsed = true;
                    var cValue = this.calculateFormula(formula.getParsedFormula(), refresh);
                    isComputedValueChanged = cValue !== formula.getFormulaValue() && (!this.parentObject.isEdit ||
                        cValue !== this.formulaErrorStrings[FormulasErrorsStrings.CircularReference]);
                    formula.setFormulaValue(cValue);
                }
            }
            else {
                formula = new FormulaInfo();
                formula.setFormulaText(changeArgs.getFormulaValue());
                if (!this.getDependentFormulaCells().has(cellTxt)) {
                    this.getDependentFormulaCells().set(cellTxt, new Map());
                }
                this.getFormulaInfoTable().set(cellTxt, formula);
                try {
                    formula.setParsedFormula(this.parser.parseFormula(changeArgs.getFormulaValue()));
                }
                catch (ex) {
                    formula.setFormulaValue(ex);
                    isCompute = false;
                }
                if (isCompute) {
                    var cValue = this.calculateFormula(formula.getParsedFormula(), refresh);
                    isComputedValueChanged = cValue !== this.formulaErrorStrings[FormulasErrorsStrings.CircularReference];
                    formula.setFormulaValue(cValue);
                }
            }
            if (isCompute) {
                /* eslint-disable */
                if (this.parentObject.setValueRowCol === undefined) {
                    this.setValueRowCol(this.getSheetID(pgrid) + 1, formula.getFormulaValue(), changeArgs.getRowIndex(), changeArgs.getColIndex());
                }
                else {
                    this.parentObject.setValueRowCol(this.getSheetId(pgrid), formula.getFormulaValue(), changeArgs.getRowIndex(), changeArgs.getColIndex(), formula.getFormulaText(), isRandomFormula);
                }
                /* eslint-enable */
            }
        }
        else if (this.getFormulaInfoTable().has(cellTxt)) {
            this.getFormulaInfoTable().delete(cellTxt);
            if (this.getDependentFormulaCells().has(cellTxt)) {
                this.clearFormulaDependentCells(cellTxt);
            }
        }
        if (isCompute && isComputedValueChanged && this.getDependentCells().has(cellTxt) &&
            (this.parentObject.calculationMode === 'Automatic' ||
                !this.parentObject.isEdit ||
                refreshDependentCells) && this.getDependentCells().get(cellTxt).toString() !== cellTxt) {
            this.refresh(cellTxt, undefined, undefined, randomFormulaRefreshing, isDelete, deletedRange, refreshDependentCells, action);
        }
    };
    /**
     * @hidden
     * @param {number} value - specify the value
     * @param {string | number} formulaValue -  specify the formula value.
     * @param {number} row - specify the row
     * @param {number} col - specify the col.
     * @returns {void} - to set value row and column.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Calculate.prototype.setValueRowCol = function (value, formulaValue, row, col) {
        /* No Implementation */
    };
    Calculate.prototype.getSortedSheetNames = function () {
        var family = this.getSheetFamilyItem(this.grid);
        if (family != null && family.sheetNameToToken != null) {
            var arr_1 = [];
            family.sheetNameToToken.forEach(function (value, key) {
                arr_1.push(key);
                arr_1.sort();
            });
            this.sortedSheetNames = arr_1;
            this.sortedSheetNames.sort();
            if (this.sortedSheetNames.length > 9 && this.sortedSheetNames[0].includes('1') && this.sortedSheetNames[1].includes('10')) {
                this.sortedSheetNames.splice(this.sortedSheetNames.indexOf('2'), 0, this.sortedSheetNames[0]);
                this.sortedSheetNames.splice(0, 1);
            }
        }
        return this.sortedSheetNames;
    };
    /**
     * @hidden
     * @param {string} error -  specify the string
     * @returns {string} - to get error line.
     */
    Calculate.prototype.getErrorLine = function (error) {
        /* eslint-disable-next-line */
        var errorStack = error.stack ? error.stack.split('\n')[1].split(':') : null;
        return errorStack ? errorStack[errorStack.length - 2] : null; // Getting row number of the error file.
    };
    /** @hidden
     * @returns {number} - to return the sheet id
     */
    Calculate.prototype.createSheetFamilyID = function () {
        if (this.sheetFamilyID === Number.MAX_SAFE_INTEGER) {
            this.sheetFamilyID = Number.MIN_SAFE_INTEGER;
        }
        return this.sheetFamilyID++;
    };
    /**
     * @hidden
     * @param {string[]} args - Specify the args.
     * @param {string} operation - Specify the operation.
     * @returns {string} - To compute min max.
     */
    Calculate.prototype.computeMinMax = function (args, operation) {
        var result;
        var argVal;
        var isSubtotalFormula = false;
        var isAggregateComputation;
        var sheet;
        if (args.length) {
            var lastArgument = args[args.length - 1];
            if (lastArgument === 'isSubtotal') {
                isSubtotalFormula = true;
                args.pop();
            }
            else if (lastArgument === 'isAggregate') {
                sheet = this.parentObject.getActiveSheet();
                isAggregateComputation = true;
                args.pop();
            }
        }
        if (isNullOrUndefined(args) || args.length === 0) {
            return this.formulaErrorStrings[FormulasErrorsStrings.WrongNumberArguments];
        }
        result = (operation === 'max') ? this.minValue : this.maxValue;
        for (var k = 0, len = args.length; k < len; k++) {
            if (args[k].split(this.tic).join('').trim() === this.emptyString) {
                result = 0;
            }
        }
        var argArr = args;
        var indexes;
        if (argArr.length > 255) {
            return this.getErrorStrings()[CommonErrors.Value];
        }
        for (var i = 0; i < argArr.length; i++) {
            if (argArr[i].indexOf(':') > -1 && this.isCellReference(argArr[i])) {
                var cellValue = this.getCellCollection(argArr[i]);
                for (var j = 0; j < cellValue.length; j++) {
                    if (isAggregateComputation) {
                        indexes = getCellIndexes(cellValue[j]);
                        if (isHiddenRow(sheet, indexes[0]) || isHiddenCol(sheet, indexes[1])) {
                            continue;
                        }
                    }
                    argVal = !isSubtotalFormula ? this.getValueFromArg(cellValue[j]) :
                        this.getValueFromArg(cellValue[j], null, null, true);
                    if (isSubtotalFormula && argVal.includes('SUBTOTAL(')) {
                        continue;
                    }
                    var cellVal = this.parseFloat(argVal);
                    if (argVal === '' || this.isNaN(this.parseFloat(cellVal)) || this.getErrorStrings().indexOf(argVal) > -1) {
                        continue;
                    }
                    else {
                        result = (operation === 'max') ? Math.max(result, cellVal) : Math.min(result, cellVal);
                    }
                }
            }
            else {
                var val = !isSubtotalFormula ? this.getValueFromArg(argArr[i]) :
                    this.getValueFromArg(argArr[i], null, null, true);
                if (isSubtotalFormula && val.includes('SUBTOTAL(')) {
                    continue;
                }
                var cellVal = 0;
                var isCellRef = this.isCellReference(argArr[i]);
                var isEmptyCell = val === '' && isCellRef;
                var isStringCell = this.isNaN(this.parseFloat(val)) && isCellRef;
                var isBooleanCell = val === (this.trueValue || this.falseValue) && isCellRef;
                argArr[i] = argArr[i].startsWith('n') ? argArr[i].slice(1) : argArr[i];
                if (this.getErrorStrings().indexOf(val) > -1) {
                    return val;
                }
                if (val === this.trueValue && argArr[i] === this.trueValue) {
                    val = '1';
                }
                else if (val === this.falseValue && argArr[i] === this.falseValue) {
                    val = '0';
                }
                else if (isEmptyCell || isStringCell || isBooleanCell) {
                    continue;
                }
                if (val.indexOf('"') > -1) {
                    val = val.split(this.tic).join('');
                }
                if (this.isNaN(this.parseFloat(val))) {
                    return this.getErrorStrings()[CommonErrors.Value];
                }
                cellVal = this.parseFloat(val);
                result = operation === 'max' ? Math.max(result, cellVal) : Math.min(result, cellVal);
            }
        }
        if (result === this.minValue || result === this.maxValue) {
            result = 0;
        }
        return result.toString();
    };
    /**
     * @hidden
     * @param {string[]} args - Specify the args.
     * @param {boolean} isSubtotalFormula - Specify the args is from subtotal formula or not.
     * @param {boolean} isAggregateComputation - Specify the args is from aggregate calculation or not.
     * @returns {string} - to calculate average.
     */
    Calculate.prototype.calculateAvg = function (args, isSubtotalFormula, isAggregateComputation) {
        var argArr = args;
        var cellColl = [];
        var cellVal;
        var value;
        var avgVal = 0;
        var countNum = 0;
        var indexes;
        var sheet;
        if (isAggregateComputation) {
            sheet = this.parentObject.getActiveSheet();
        }
        for (var k = 0; k < argArr.length; k++) {
            if (this.isCellReference(argArr[k])) {
                if (argArr[k].indexOf(':') > -1) {
                    cellColl = this.getCellCollection(argArr[k]);
                    for (var i = 0; i < cellColl.length; i++) {
                        if (isAggregateComputation) {
                            indexes = getCellIndexes(cellColl[i]);
                            if (isHiddenRow(sheet, indexes[0]) || isHiddenCol(sheet, indexes[1])) {
                                continue;
                            }
                        }
                        cellVal = !isSubtotalFormula ? this.getValueFromArg(cellColl[i]) :
                            this.getValueFromArg(cellColl[i], null, null, true);
                        if (isSubtotalFormula && cellVal.includes('SUBTOTAL(')) {
                            continue;
                        }
                        if (this.getErrorStrings().indexOf(cellVal) > -1) {
                            return cellVal;
                        }
                        else if (isNullOrUndefined(cellVal) || isNaN(this.parseFloat(cellVal)) || cellVal === '') {
                            continue;
                        }
                        avgVal = avgVal + this.parseFloat(cellVal);
                        countNum = countNum + 1;
                    }
                }
                else {
                    cellVal = !isSubtotalFormula ? this.getValueFromArg(argArr[k]) :
                        this.getValueFromArg(argArr[k], null, null, true);
                    if (isSubtotalFormula && cellVal.includes('SUBTOTAL(')) {
                        continue;
                    }
                    if (this.getErrorStrings().indexOf(cellVal) > -1) {
                        return cellVal;
                    }
                    else if (isNullOrUndefined(cellVal) || isNaN(this.parseFloat(cellVal)) || cellVal === '') {
                        continue;
                    }
                    avgVal = avgVal + this.parseFloat(cellVal);
                    countNum = countNum + 1;
                }
            }
            else {
                if (argArr[k].indexOf(this.tic) > -1) {
                    if (isNaN(this.parseFloat(argArr[k].split(this.tic).join(''))) ||
                        argArr[k].split(this.tic).join('').trim() === '') {
                        return this.getErrorStrings()[CommonErrors.Value];
                    }
                }
                if (argArr[k].length === 0 || args[k] === this.falseValue) {
                    argArr[k] = '0';
                }
                if (args[k] === this.trueValue) {
                    argArr[k] = '1';
                }
                value = this.getValueFromArg(argArr[k].split(this.tic).join(''));
                if (this.getErrorStrings().indexOf(value) > -1) {
                    return value;
                }
                avgVal = avgVal + this.parseFloat(value);
                countNum = countNum + 1;
            }
        }
        if (countNum === 0) {
            return this.getErrorStrings()[CommonErrors.DivZero];
        }
        return (avgVal / countNum).toString();
    };
    /**
     * @hidden
     * @param {string} refName - specify the reference name.
     * @param {Object | string } model - model - Specify the model.model
     * @param {number} sheetFamilyID - specify the sheet family id.
     * @returns {string} - register Grid As Sheet.
     */
    Calculate.prototype.registerGridAsSheet = function (refName, model, sheetFamilyID) {
        if (isNullOrUndefined(this.modelToSheetID)) {
            this.modelToSheetID = new Map();
        }
        if (isNullOrUndefined(this.modelToSheetID.get(model))) {
            this.modelToSheetID.set(model, sheetFamilyID);
        }
        var family = this.getSheetFamilyItem(model);
        family.isSheetMember = true;
        var tempRef = refName.toUpperCase();
        if (family.parentObjectToToken.size === 0) {
            family.parentObjectToToken = new Map();
        }
        if (family.sheetNameToParentObject.size === 0) {
            family.sheetNameToParentObject = new Map();
        }
        if (family.sheetNameToToken.size === 0) {
            family.sheetNameToToken = new Map();
        }
        if (family.tokenToParentObject.size === 0) {
            family.tokenToParentObject = new Map();
        }
        if (!isUndefined$1(family.sheetNameToParentObject.get(tempRef))) {
            var token = family.sheetNameToToken.get(tempRef);
            family.tokenToParentObject.set(token, model);
            family.parentObjectToToken.set(model, token);
        }
        else {
            var token = this.sheetToken + this.tokenCount.toString() + this.sheetToken;
            this.tokenCount++;
            family.tokenToParentObject.set(token, model);
            family.parentObjectToToken.set(model, token);
            family.sheetNameToToken.set(tempRef, token);
            family.sheetNameToParentObject.set(tempRef, model);
        }
        return refName;
    };
    /**
     * @hidden
     * @param {string} refName - Specify the reference name
     * @param {string | Object} model - Specify the model
     * @param {boolean} unRegisterAll - Un registed all the availbe model.
     * @returns {void} - To un register grid sheet.
     */
    Calculate.prototype.unregisterGridAsSheet = function (refName, model, unRegisterAll) {
        var _this = this;
        var modelArr = [model];
        if (unRegisterAll) {
            modelArr = [];
            if (!isNullOrUndefined(this.modelToSheetID)) {
                this.modelToSheetID.forEach(function (value, key) {
                    modelArr.push(key);
                });
            }
        }
        modelArr.forEach(function (value) {
            var family = _this.getSheetFamilyItem(value);
            var refName1 = (unRegisterAll ? value : refName).toUpperCase();
            if (family.sheetNameToParentObject != null && family.sheetNameToParentObject.has(refName1)) {
                family.sheetNameToParentObject.delete(refName1);
                var token = family.sheetNameToToken.get(refName1);
                family.sheetNameToToken.delete(refName1);
                family.tokenToParentObject.delete(token);
                family.parentObjectToToken.delete(value);
            }
        });
    };
    /**
     * @hidden
     * @param {string} formula - Specify the formula.
     * @param {boolean} isFromComputeExpression - Specifies to confirm it was called from the ComputeExpression function.
     * @returns {string | number} - To compute the expression.
     */
    Calculate.prototype.computeExpression = function (formula, isFromComputeExpression) {
        var parsedFormula = this.parser.parseFormula(formula);
        var calcValue = this.computeFormula(parsedFormula, isFromComputeExpression);
        return calcValue;
    };
    Calculate.prototype.isSheetMember = function () {
        var family = this.getSheetFamilyItem(this.grid);
        return isNullOrUndefined(family) ? false : family.isSheetMember;
    };
    /**
     * To dispose the calculate engine.
     *
     * @returns {void} - To dispose the calculate engine.
     */
    Calculate.prototype.dispose = function () {
        this.resetKeys();
        // this.dependentCells.clear();
        // this.dependentFormulaCells.clear();
        this.namedRanges.clear();
        // this.sheetFamiliesList.clear();
        this.lFormulas.clear();
    };
    Calculate.prototype.refreshRandValues = function (cellRef) {
        var rowIdx;
        var colIdx;
        var value;
        var tokenRef = '';
        var family;
        if (this.randomValues.has(cellRef)) {
            this.randomValues.delete(cellRef);
            var randIdx = this.randCollection.indexOf(cellRef);
            if (randIdx > -1) {
                this.randCollection.splice(randIdx, 1);
            }
            if (this.randomValues.size === 0 && !this.randCollection.length) {
                this.randomValues.clear();
                this.randCollection = [];
            }
        }
        for (var i = 0; i < this.randomValues.size; i++) {
            rowIdx = this.rowIndex(this.randCollection[i]);
            colIdx = this.colIndex(this.randCollection[i]);
            tokenRef = (parseFloat(this.getSheetToken(this.randCollection[i]).split(this.sheetToken).join('')) + 1).toString();
            family = this.getSheetFamilyItem(tokenRef);
            this.grid = family.sheetNameToParentObject.get(tokenRef);
            value = this.randomValues.get(this.randCollection[i]);
            value = this.computeFormula(value);
            if (this.parentObject.setValueRowCol === undefined) {
                this.setValueRowCol(this.getSheetID(this.grid) + 1, value, rowIdx, colIdx);
            }
            else {
                this.parentObject.setValueRowCol(this.getSheetId(this.grid), value, rowIdx, colIdx);
            }
        }
    };
    Calculate.prototype.refresh = function (cellRef, uniqueCell, dependentCell, isRandomFormula, isDelete, deletedRange, refreshDependentCells, action) {
        var _this = this;
        var refreshCells;
        if (!dependentCell) {
            refreshCells = true;
            dependentCell = [];
        }
        var family = this.getSheetFamilyItem(this.grid);
        try {
            var dependentCells = this.getDependentCells().get(cellRef);
            if (dependentCells && dependentCells.length !== 0 &&
                (this.parentObject.calculationMode === 'Automatic' ||
                    refreshDependentCells || action === 'calculate')) {
                var i = void 0;
                for (i = 0; i < dependentCells.length; i++) {
                    var dCell = dependentCells[i];
                    if ((uniqueCell && dCell.indexOf(uniqueCell) > -1) || dCell === cellRef || dependentCell.indexOf(dCell) > -1) {
                        continue;
                    }
                    var token = this.getSheetToken(dCell);
                    var sheets = this.parentObject.sheets;
                    var sheetIdx = this.parentObject.activeSheetIndex;
                    if (token.length) {
                        this.grid = family.tokenToParentObject.get(token);
                        var sheetId = Number(this.grid);
                        var sheetName = '';
                        if (!this.isNaN(sheetId) && sheets) {
                            for (var i_1 = 0; i_1 < sheets.length; i_1++) {
                                if (sheets[i_1].id === sheetId) {
                                    sheetName = sheets[i_1].name;
                                    sheetIdx = i_1;
                                }
                            }
                        }
                        this.actCell = sheetName + '!' + dCell.split(token)[1];
                    }
                    else {
                        this.actCell = dCell.split(token)[1];
                    }
                    try {
                        var calculateFormula = function (cell, formulaInfo) {
                            if (formulaInfo) {
                                _this.cell = cell;
                                _this.parser.isFormulaParsed = true;
                                formulaInfo.setFormulaValue(_this.calculateFormula(formulaInfo.getParsedFormula(), true));
                            }
                        };
                        var rowIdx = this.rowIndex(dCell);
                        var colIdx = this.colIndex(dCell);
                        var formulaInfo = this.getFormulaInfoTable().get(dCell);
                        if (this.parentObject.setValueRowCol === undefined) {
                            calculateFormula(dCell, formulaInfo);
                            this.setValueRowCol(this.getSheetID(this.grid) + 1, formulaInfo.getFormulaValue(), rowIdx, colIdx);
                        }
                        else {
                            var cell = sheets && sheets[sheetIdx].rows &&
                                sheets[sheetIdx].rows[rowIdx - 1] && sheets[sheetIdx].rows[rowIdx - 1].cells &&
                                sheets[sheetIdx].rows[rowIdx - 1].cells[colIdx - 1];
                            var val = void 0;
                            if (cell && cell.formula && cell.formula.toLowerCase().includes('unique')) {
                                if (!this.uniqueCells || this.uniqueCells.indexOf(dCell) === -1) {
                                    if (!this.uniqueCells) {
                                        this.uniqueCells = [];
                                    }
                                    this.uniqueCells.push(dCell);
                                    calculateFormula(dCell, formulaInfo);
                                    val = formulaInfo.getFormulaValue();
                                    this.uniqueCells.splice(this.uniqueCells.indexOf(dCell), 1);
                                    if (!this.uniqueCells.length) {
                                        this.uniqueCells = null;
                                    }
                                }
                                else {
                                    continue;
                                }
                            }
                            else {
                                if (dependentCell.indexOf(dCell) === -1) {
                                    dependentCell.push(dCell);
                                }
                                val = null;
                            }
                            this.parentObject.setValueRowCol(this.getSheetId(this.grid), val, rowIdx, colIdx, formulaInfo.getFormulaText());
                        }
                        this.refresh(dCell, null, dependentCell, null, isDelete);
                    }
                    catch (ex) {
                        continue;
                    }
                }
            }
            if (refreshCells) {
                if (!isDelete && deletedRange && deletedRange.length === 4) {
                    var token = this.getSheetToken(cellRef);
                    var deletedCell = [];
                    for (var sRIdx = deletedRange[0], eRIdx = deletedRange[2]; sRIdx <= eRIdx; sRIdx++) {
                        for (var sCIdx = deletedRange[1], eCIdx = deletedRange[3]; sCIdx <= eCIdx; sCIdx++) {
                            if (sRIdx === eRIdx && sCIdx === eCIdx) {
                                break;
                            }
                            var cell = token + getCellAddress(sRIdx, sCIdx);
                            this.refresh(cell, null, dependentCell, null, isDelete);
                            deletedCell.push(cell);
                        }
                    }
                    var ranges_1 = new Set(deletedCell);
                    if (dependentCell) {
                        dependentCell = dependentCell.filter(function (item) { return !ranges_1.has(item); });
                    }
                }
                var sheets_1 = this.parentObject.sheets;
                if (!sheets_1) {
                    dependentCell = [];
                }
                dependentCell.forEach(function (cell) {
                    var sheetIdx;
                    var sheetId = _this.getSheetId(family.tokenToParentObject.get(_this.getSheetToken(cell)));
                    for (var idx = 0; idx < sheets_1.length; idx++) {
                        if (sheets_1[idx].id === sheetId) {
                            sheetIdx = idx;
                            break;
                        }
                    }
                    var rowIdx = _this.rowIndex(cell) - 1;
                    var colIdx = _this.colIndex(cell) - 1;
                    var cellObj = sheets_1[sheetIdx].rows[rowIdx] &&
                        sheets_1[sheetIdx].rows[rowIdx].cells[colIdx];
                    if (cellObj) {
                        _this.parentObject.notify('calculateFormula', { cell: cellObj, rowIdx: rowIdx, colIdx: colIdx, sheetIndex: sheetIdx, isDependentRefresh: true, isRandomFormula: isRandomFormula, action: action });
                    }
                });
            }
        }
        finally {
            if (this.getDependentCells().has(cellRef)) {
                this.grid = family.tokenToParentObject.get(this.getSheetToken(cellRef));
            }
        }
    };
    __decorate$3([
        Event$1()
    ], Calculate.prototype, "onFailure", void 0);
    Calculate = __decorate$3([
        NotifyPropertyChanges
    ], Calculate);
    return Calculate;
}(Base));
/** @hidden */
var FormulaError = /** @class */ (function () {
    function FormulaError(errorMessage, formulaAutoCorrection) {
        this.formulaCorrection = false;
        this.message = errorMessage;
        this.formulaCorrection = formulaAutoCorrection;
    }
    return FormulaError;
}());
/** @hidden */
var FormulaInfo = /** @class */ (function () {
    function FormulaInfo() {
        /**
         * @hidden
         */
        this.calcID = Number.MIN_VALUE + 1;
        this.calcID1 = Number.MIN_VALUE + 1;
    }
    /**
     * @hidden
     * @returns {void} - To get Formula Text
     */
    FormulaInfo.prototype.getFormulaText = function () {
        return this.formulaText;
    };
    /**
     * @hidden
     * @param {string} value - Specify the value
     * @returns {void} - To set Formula Text
     */
    FormulaInfo.prototype.setFormulaText = function (value) {
        this.formulaText = value;
    };
    /**
     * @hidden
     * @returns {string} - To get Formula Value
     */
    FormulaInfo.prototype.getFormulaValue = function () {
        return this.formulaValue;
    };
    /**
     * @hidden
     * @param {string | number} value - Specify the value
     * @returns {void} - To set Parsed Formula
     */
    FormulaInfo.prototype.setFormulaValue = function (value) {
        this.formulaValue = value;
    };
    /**
     * @hidden
     * @returns {string} - To get Parsed Formula
     */
    FormulaInfo.prototype.getParsedFormula = function () {
        return this.parsedFormula;
    };
    /**
     * @hidden
     * @param {string} value - Specify the value
     * @returns {void} - To set Parsed Formula
     */
    FormulaInfo.prototype.setParsedFormula = function (value) {
        this.parsedFormula = value;
    };
    return FormulaInfo;
}());
/** @hidden */
var CalcSheetFamilyItem = /** @class */ (function () {
    function CalcSheetFamilyItem() {
        /**
         * @hidden
         */
        this.isSheetMember = false;
        /**
         * @hidden
         */
        this.parentObjectToToken = new Map();
        /**
         * @hidden
         */
        this.sheetDependentFormulaCells = new Map();
        /**
         * @hidden
         */
        this.sheetNameToParentObject = new Map();
        /**
         * @hidden
         */
        this.sheetNameToToken = new Map();
        /**
         * @hidden
         */
        this.tokenToParentObject = new Map();
        /**
         * @hidden
         */
        this.sheetFormulaInfotable = new Map();
    }
    return CalcSheetFamilyItem;
}());
/**
 * @hidden
 * @param {number} col - Specify the column
 * @returns {string} - To returns get Alphalabel.
 */
function getAlphalabel(col) {
    var cols = [];
    var n = 0;
    var charText = 'A';
    while (col > 0 && n < 9) {
        col--;
        var aCharNo = charText.charCodeAt(0);
        cols[n] = String.fromCharCode(col % 26 + aCharNo);
        col = parseInt((col / 26).toString(), 10);
        n++;
    }
    var chs = [];
    for (var i = 0; i < n; i++) {
        chs[n - i - 1] = cols[i];
    }
    return chs.join('');
}
var ValueChangedArgs = /** @class */ (function () {
    function ValueChangedArgs(row, col, value) {
        this.row = row;
        this.col = col;
        this.value = value;
        this.getRowIndex = function () {
            return row;
        };
        this.setRowIndex = function (value) {
            row = value;
        };
        this.getColIndex = function () {
            return col;
        };
        this.setColIndex = function (value) {
            col = value;
        };
        this.getFormulaValue = function () {
            return value;
        };
        return this;
    }
    return ValueChangedArgs;
}());

/**
 * @hidden
 * The `WorkbookFormula` module is used to handle the formula operation in Workbook.
 */
var WorkbookFormula = /** @class */ (function () {
    /**
     * Constructor for formula module in Workbook.
     *
     * @param {Workbook} workbook - Specifies the workbook.
     * @private
     */
    function WorkbookFormula(workbook) {
        this.uniqueOBracket = String.fromCharCode(129);
        this.uniqueCBracket = String.fromCharCode(130);
        this.uniqueCSeparator = String.fromCharCode(131);
        this.uniqueCOperator = String.fromCharCode(132);
        this.uniquePOperator = String.fromCharCode(133);
        this.uniqueSOperator = String.fromCharCode(134);
        this.uniqueMOperator = String.fromCharCode(135);
        this.uniqueDOperator = String.fromCharCode(136);
        this.uniqueModOperator = String.fromCharCode(137);
        this.uniqueConcateOperator = String.fromCharCode(138);
        this.uniqueEqualOperator = String.fromCharCode(139);
        this.uniqueExpOperator = String.fromCharCode(140);
        this.uniqueGTOperator = String.fromCharCode(141);
        this.uniqueLTOperator = String.fromCharCode(142);
        this.sheetInfo = [];
        this.parent = workbook;
        this.init();
    }
    WorkbookFormula.prototype.init = function () {
        var _this = this;
        this.addEventListener();
        this.initCalculate();
        this.registerSheet();
        this.parent.customFormulaCollection.forEach(function (value, key) {
            _this.addCustomFunction(value.handler, key, value.description);
        });
    };
    /**
     * To destroy the formula module.
     *
     * @returns {void}
     * @hidden
     */
    WorkbookFormula.prototype.destroy = function () {
        var _this = this;
        this.removeEventListener();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (this.parent.refreshing) {
            this.clearAllUniqueFormulaValue();
            var formulaCollect = this.calculateInstance.getLibraryFormulas();
            formulaCollect.forEach(function (value, key) {
                if (value.isCustom) {
                    _this.parent.customFormulaCollection.set(key, { handler: value.handler, description: value.description });
                }
            });
        }
        this.calculateInstance.dispose();
        this.calculateInstance = null;
        if (this.sheetInfo) {
            this.sheetInfo = [];
        }
        this.parent = null;
    };
    WorkbookFormula.prototype.addEventListener = function () {
        this.parent.on(workbookFormulaOperation, this.performFormulaOperation, this);
        this.parent.on(aggregateComputation, this.aggregateComputation, this);
        this.parent.on(getUniqueRange, this.getUniqueRange, this);
        this.parent.on(removeUniquecol, this.removeUniquecol, this);
        this.parent.on(clearFormulaDependentCells, this.clearFormulaDependentCells, this);
        this.parent.on(formulaInValidation, this.formulaInValidation, this);
        this.parent.on(refreshInsertDelete, this.refreshInsertDelete, this);
        this.parent.on(getUpdatedFormulaOnInsertDelete, this.getUpdatedFormulaOnInsertDelete, this);
        this.parent.on(checkFormulaRef, this.autoCorrectCellRef, this);
        this.parent.on(parseFormulaArgument, this.parseFormulaArgument, this);
        this.parent.on(getCellRefValue, this.getCellRefValue, this);
        this.parent.on(commputeFormulaValue, this.commputeFormulaValue, this);
        this.parent.on(sheetRenameUpdate, this.renameUpdation, this);
    };
    WorkbookFormula.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(workbookFormulaOperation, this.performFormulaOperation);
            this.parent.off(aggregateComputation, this.aggregateComputation);
            this.parent.off(getUniqueRange, this.getUniqueRange);
            this.parent.off(removeUniquecol, this.removeUniquecol);
            this.parent.off(clearFormulaDependentCells, this.clearFormulaDependentCells);
            this.parent.off(formulaInValidation, this.formulaInValidation);
            this.parent.off(refreshInsertDelete, this.refreshInsertDelete);
            this.parent.off(getUpdatedFormulaOnInsertDelete, this.getUpdatedFormulaOnInsertDelete);
            this.parent.off(checkFormulaRef, this.autoCorrectCellRef);
            this.parent.off(parseFormulaArgument, this.parseFormulaArgument);
            this.parent.off(getCellRefValue, this.getCellRefValue);
            this.parent.off(commputeFormulaValue, this.commputeFormulaValue);
            this.parent.off(sheetRenameUpdate, this.renameUpdation);
        }
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    WorkbookFormula.prototype.getModuleName = function () {
        return 'workbookFormula';
    };
    WorkbookFormula.prototype.initCalculate = function () {
        this.calculateInstance = new Calculate(this.parent);
        this.calcID = this.calculateInstance.createSheetFamilyID();
        this.calculateInstance.setTreatEmptyStringAsZero(true);
        this.calculateInstance.grid = this.parent.getActiveSheet().id.toString();
        this.calculateInstance.setParseArgumentSeparator(this.parent.listSeparator);
        var decimalSeparator = getNumericObject(this.parent.locale).decimal;
        if (decimalSeparator !== '.' && this.parent.listSeparator !== decimalSeparator) {
            this.calculateInstance.setParseDecimalSeparator(decimalSeparator);
        }
    };
    WorkbookFormula.prototype.clearFormulaDependentCells = function (args) {
        if (args.isOpen) {
            this.calculateInstance.getDependentCells().clear();
            this.calculateInstance.getFormulaInfoTable().clear();
            this.calculateInstance.getDependentFormulaCells().clear();
            return;
        }
        var cellRef = args.cellRef.split(':')[0];
        var sheetId = this.parent.getActiveSheet().id.toString();
        var family = this.calculateInstance.getSheetFamilyItem(sheetId);
        if (family.isSheetMember && !isNullOrUndefined(family.parentObjectToToken)) {
            cellRef = family.parentObjectToToken.get(sheetId) + cellRef;
        }
        if (args.clearFormulaInfo && this.calculateInstance.getFormulaInfoTable().has(cellRef)) {
            this.calculateInstance.getFormulaInfoTable().delete(cellRef);
        }
        this.calculateInstance.clearFormulaDependentCells(cellRef);
    };
    WorkbookFormula.prototype.formulaInValidation = function (args) {
        var col = this.calculateInstance.getLibraryFormulas().get(args.value);
        args.skip = isNullOrUndefined(col);
    };
    WorkbookFormula.prototype.performFormulaOperation = function (args) {
        var action = args.action;
        var formulas;
        var formulaInfo;
        if (action !== 'refreshCalculate') {
            formulas = this.calculateInstance.getLibraryFormulas();
            formulaInfo = (Array.from(formulas.values()));
        }
        var collection;
        var family = this.calculateInstance.getSheetFamilyItem(args.sheetId);
        switch (action) {
            case 'getLibraryFormulas':
                args.formulaCollection = Array.from(formulas.keys());
                break;
            case 'getFormulaCategory':
                collection = ['All'];
                for (var i = 1; i < Array.from(formulas.values()).length; i++) {
                    if (collection.indexOf(formulaInfo[i].category) < 0) {
                        collection.push(formulaInfo[i].category);
                    }
                }
                args.categoryCollection = collection;
                break;
            case 'dropDownSelectFormulas':
                for (var i = 0; i < Array.from(formulas.values()).length; i++) {
                    if (args.selectCategory === formulaInfo[i].category) {
                        args.formulaCollection[i] = Array.from(formulas.keys())[i];
                    }
                }
                break;
            case 'getFormulaDescription':
                for (var i = 0; i < Array.from(formulas.values()).length; i++) {
                    if (args.selectedList === Array.from(formulas.keys())[i]) {
                        args.description = formulaInfo[i].description;
                        args.isCustom = formulaInfo[i].isCustom;
                    }
                }
                break;
            case 'registerSheet':
                this.registerSheet(args.sheetIndex, args.sheetCount);
                if (args.isImport) {
                    this.calculateInstance.setParseArgumentSeparator(this.parent.listSeparator);
                    this.updateSheetInfo();
                }
                break;
            case 'unRegisterSheet':
                this.unRegisterSheet(args.sheetIndex, args.sheetCount, args.propertyChange);
                break;
            case 'initSheetInfo':
                this.updateSheetInfo();
                break;
            case 'refreshCalculate':
                this.refreshCalculate(args);
                break;
            case 'refreshRandomFormula':
                this.refreshRandomFormula();
                this.calculateInstance.cell = '';
                break;
            case 'setArgumentSeparator':
                this.calculateInstance.setParseArgumentSeparator(this.parent.listSeparator);
                break;
            case 'addDefinedName':
                args.isAdded = this.addDefinedName(args.definedName, false, args.index, args.isEventTrigger);
                break;
            case 'removeDefinedName':
                args.isRemoved = this.removeDefinedName(args.definedName, args.scope, args.isEventTrigger);
                break;
            case 'initiateDefinedNames':
                this.initiateDefinedNames();
                break;
            case 'addSheet':
                this.sheetInfo.push({ visibleName: args.visibleName, sheet: args.sheetName, index: args.sheetId });
                break;
            case 'getSheetInfo':
                args.sheetInfo = this.sheetInfo;
                break;
            case 'deleteSheetTab':
                for (var i = 0; i < this.sheetInfo.length; i++) {
                    if (this.sheetInfo[i].index === args.sheetId) {
                        var visibleName = this.sheetInfo[i].visibleName;
                        var sheetName = this.sheetInfo[i].sheet;
                        this.sheetInfo.splice(i, 1);
                        var id = args.sheetId.toString();
                        this.sheetDeletion(sheetName, id);
                        this.calculateInstance.unregisterGridAsSheet(id, id);
                        this.definedNamesDeletion(visibleName);
                        break;
                    }
                }
                break;
            case 'getReferenceError':
                args.refError = this.referenceError();
                break;
            case 'getAlpha':
                args.col = getAlphalabel(args.col);
                break;
            case 'addCustomFunction':
                this.addCustomFunction(args.functionHandler, args.functionName, args.formulaDescription);
                break;
            case 'computeExpression':
                args.calcValue = this.calculateInstance.computeExpression(args.formula, args.isFromComputeExpression);
                break;
            case 'registerGridInCalc':
                this.calculateInstance.grid = args.sheetID;
                break;
            case 'dependentCellsAvailable':
            case 'checkFormulaAdded':
                if (family.isSheetMember && !isNullOrUndefined(family.parentObjectToToken)) {
                    args.address = family.parentObjectToToken.get(args.sheetId) + args.address;
                }
                if (action === 'checkFormulaAdded') {
                    args.added = this.calculateInstance.getFormulaInfoTable().has(args.address);
                }
                else {
                    args.isAvailable = this.calculateInstance.getDependentCells().has(args.address);
                }
                break;
            case 'calculateNow':
                this.calculateNow(args);
                break;
            case 'ClearDependentCellCollection':
                this.calculateInstance.getDependentFormulaCells().clear();
                this.calculateInstance.getDependentCells().clear();
                this.calculateInstance.getFormulaInfoTable().clear();
                break;
        }
    };
    WorkbookFormula.prototype.definedNamesDeletion = function (sheetName) {
        var definedNames = this.parent.definedNames;
        if (definedNames && definedNames.length > 0) {
            for (var i = definedNames.length - 1; i >= 0; i--) {
                if (definedNames[i].refersTo.substring(1, definedNames[i].refersTo.lastIndexOf('!')).split('\'').join('') === sheetName) {
                    this.removeDefinedName(definedNames[i].name, definedNames[i].scope);
                }
            }
        }
    };
    WorkbookFormula.prototype.referenceError = function () {
        return this.calculateInstance.getErrorStrings()[CommonErrors.Ref];
    };
    WorkbookFormula.prototype.getSheetInfo = function () {
        return this.sheetInfo;
    };
    WorkbookFormula.prototype.addCustomFunction = function (functionHandler, functionName, formulaDescription) {
        this.calculateInstance.defineFunction(functionName, functionHandler, formulaDescription);
    };
    WorkbookFormula.prototype.updateSheetInfo = function () {
        var _this = this;
        this.sheetInfo = [];
        this.parent.sheets.forEach(function (sheet) {
            _this.sheetInfo.push({ visibleName: sheet.name, sheet: 'Sheet' + sheet.id, index: sheet.id });
        });
    };
    WorkbookFormula.prototype.getSheetRefUpdateOnDelete = function () {
        var _this = this;
        var definedNames = this.calculateInstance.namedRanges;
        var keyArray;
        var valueArray;
        var isDefinedNamesAvail;
        if (definedNames && definedNames.size) {
            isDefinedNamesAvail = true;
            keyArray = Array.from(definedNames.keys());
            valueArray = Array.from(definedNames.values());
        }
        return function (delSheetName, formula) {
            var isNamedRange;
            if (isDefinedNamesAvail && !formula.includes(delSheetName)) {
                formula = formula.replace(/\w+/g, function (key) {
                    var index = keyArray.indexOf(key);
                    if (index !== -1) {
                        isNamedRange = true;
                        return valueArray[index];
                    }
                    return key;
                });
            }
            var sheetName = delSheetName.toUpperCase();
            formula = formula.toUpperCase();
            var idx = formula.indexOf(sheetName);
            while (idx > -1) {
                formula = formula.split((formula[idx - 1] === '\'' && formula[idx + sheetName.length] === '\'' ? "'" + sheetName + "'" : sheetName) +
                    _this.calculateInstance.sheetToken).join(_this.referenceError());
                idx = formula.indexOf(sheetName);
            }
            return { value: formula, isNamedRange: isNamedRange };
        };
    };
    WorkbookFormula.prototype.sheetDeletion = function (delSheetName, sheetId) {
        var _this = this;
        var dependentCell = this.calculateInstance.getDependentCells();
        var fInfo;
        var token;
        var family = this.calculateInstance.getSheetFamilyItem(sheetId);
        var updateSheetRef = this.getSheetRefUpdateOnDelete();
        var updatedInfo;
        dependentCell.forEach(function (dependentCellRefs, cellRef) {
            dependentCellRefs.forEach(function (dependentCellRef) {
                fInfo = _this.calculateInstance.getFormulaInfoTable().get(dependentCellRef);
                if (!isNullOrUndefined(fInfo)) {
                    updatedInfo = updateSheetRef(delSheetName, fInfo.formulaText);
                    if (updatedInfo.value !== fInfo.formulaText) {
                        token = dependentCellRef.slice(0, dependentCellRef.lastIndexOf(_this.calculateInstance.sheetToken) + 1);
                        updatedInfo.sheetId = family.tokenToParentObject.has(token) ? Number(family.tokenToParentObject.get(token)) :
                            parseInt(dependentCellRef.split('!')[1], 10) + 1;
                        _this.updateDataContainer([_this.calculateInstance.rowIndex(dependentCellRef) - 1, _this.calculateInstance.colIndex(dependentCellRef) - 1], updatedInfo);
                        _this.calculateInstance.refresh(fInfo.getParsedFormula());
                    }
                }
                token = cellRef.slice(0, cellRef.lastIndexOf(_this.calculateInstance.sheetToken) + 1);
                if (sheetId === (family.tokenToParentObject.has(token) ? family.tokenToParentObject.get(token) :
                    cellRef.split('!')[1])) {
                    _this.calculateInstance.getFormulaInfoTable().delete(cellRef);
                    _this.calculateInstance.clearFormulaDependentCells(cellRef);
                }
            });
        });
    };
    WorkbookFormula.prototype.renameUpdation = function (args) {
        var _this = this;
        var name = args.value;
        var pName = args.pName;
        var sheet;
        var cell;
        var uPName = args.pName.toUpperCase();
        var escapeRegx = new RegExp('[!@#$%^&()+=\';,.{}|\\":<>~_-]', 'g');
        var exp = '(?=[\'!])(?=[^"]*(?:"[^"]*"[^"]*)*$)';
        var regExp = RegExp;
        var regx = new regExp(pName.replace(escapeRegx, '\\$&') + exp, 'gi');
        var renameValidationSheetRef = function (validation) {
            if (checkIsFormula(validation.value1) && validation.value1.toUpperCase().includes(uPName) && validation.value1.match(regx)) {
                validation.value1 = validation.value1.replace(regx, name);
            }
            if (checkIsFormula(validation.value2) && validation.value2.toUpperCase().includes(uPName) && validation.value2.match(regx)) {
                validation.value2 = validation.value2.replace(regx, name);
            }
        };
        this.sheetInfo.forEach(function (info, index) {
            sheet = getSheet(_this.parent, index);
            if (sheet && sheet.rows && sheet.rows.length) {
                for (var i = 0, rowLen = sheet.rows.length; i < rowLen; i++) {
                    if (sheet.rows[i] && sheet.rows[i].cells) {
                        for (var j = 0, cellsLen = sheet.rows[i].cells.length; j < cellsLen; j++) {
                            cell = getCell(i, j, sheet, false, true);
                            if (cell.formula && checkIsFormula(cell.formula) && cell.formula.toUpperCase().includes(uPName) &&
                                cell.formula.match(regx)) {
                                cell.formula = cell.formula.replace(regx, name);
                            }
                            if (cell.validation) {
                                renameValidationSheetRef(cell.validation);
                            }
                        }
                    }
                }
            }
            if (sheet && sheet.columns && sheet.columns.length) {
                var column = void 0;
                for (var i = 0, colsLen = sheet.columns.length; i < colsLen; i++) {
                    column = sheet.columns[i];
                    if (column && column.validation) {
                        renameValidationSheetRef(column.validation);
                    }
                }
            }
            var definedNames = _this.parent.definedNames;
            for (var i = 0; i < definedNames.length; i++) {
                if (checkIsFormula(definedNames[i].refersTo) && definedNames[i].refersTo.includes(pName) &&
                    definedNames[i].refersTo.match(regx)) {
                    definedNames[i].refersTo = definedNames[i].refersTo.replace(regx, name);
                    if (definedNames[i].scope.includes(pName)) {
                        definedNames[i].scope = name;
                    }
                }
            }
            _this.calculateInstance.updateNamedRange(pName, name);
            if (info.visibleName === pName) {
                info.visibleName = name;
            }
        });
    };
    WorkbookFormula.prototype.updateDataContainer = function (indexes, data) {
        var sheet;
        var rowData;
        var colObj;
        for (var i = 0, len = this.parent.sheets.length; i < len; i++) {
            sheet = getSheet(this.parent, i);
            if (sheet.id === data.sheetId) {
                if (indexes[0] in sheet.rows) {
                    rowData = sheet.rows[indexes[0]];
                    if (indexes[1] in rowData.cells) {
                        colObj = rowData.cells[indexes[1]];
                        colObj.formula = data.isNamedRange ? colObj.formula : data.value;
                        if (data.visible) {
                            if (i === this.parent.activeSheetIndex && sheet.activeCell === getCellAddress(indexes[0], indexes[1])) {
                                this.parent.notify(selectionComplete, {});
                            }
                        }
                        else if (this.parent.calculationMode === 'Automatic') {
                            colObj.value = this.referenceError();
                        }
                    }
                    else {
                        rowData.cells[indexes[1]] = colObj = {};
                    }
                }
                else {
                    rowData = sheet.rows[indexes[0]] = {};
                    rowData[indexes[1]] = colObj = {};
                }
                break;
            }
        }
    };
    WorkbookFormula.prototype.parseSheetRef = function (value, addSheetQuotes) {
        var regx;
        // eslint-disable-next-line no-useless-escape
        var escapeRegx = new RegExp('[!@#$%^&()+=\';,.{}|\":<>~_-]', 'g');
        var i = 0;
        var sheetInfo = this.getSheetInfo();
        var sheetCount = sheetInfo.length;
        var temp = [];
        temp.length = 0;
        var regxTemp;
        var searchIdx;
        var idx;
        var valSearchIdx;
        var regxVisible;
        var exp = '(?=[\'!])(?=[^"]*(?:"[^"]*"[^"]*)*$)';
        var regExp = RegExp;
        for (i = 0; i < sheetCount; i++) {
            if (sheetInfo[i].sheet !== sheetInfo[i].visibleName) {
                regx = new regExp(sheetInfo[i].visibleName.replace(escapeRegx, '\\$&') + exp, 'gi');
                idx = i;
                if (value.match(regx)) {
                    for (var j = i + 1; j < sheetCount; j++) {
                        if (sheetInfo[j].visibleName.includes(sheetInfo[i].visibleName)) {
                            regxTemp = new regExp(sheetInfo[j].visibleName.replace(escapeRegx, '\\$&') + exp, 'gi');
                            searchIdx = value.search(regxTemp);
                            valSearchIdx = value.search(regx);
                            if (searchIdx > -1 && (searchIdx < valSearchIdx || (searchIdx === valSearchIdx &&
                                sheetInfo[j].visibleName.length > sheetInfo[i].visibleName.length))) {
                                regxVisible = new RegExp('Sheet', 'gi');
                                if (sheetInfo[j].visibleName.search(regxVisible) !== 0) {
                                    regx = regxTemp;
                                    idx = j;
                                }
                            }
                        }
                    }
                    value = value.replace(regx, idx + '/');
                    temp.push(idx);
                }
            }
        }
        i = 0;
        var sheetRef;
        while (i < temp.length) {
            regx = new regExp(temp[i] + '/' + exp, 'gi');
            sheetRef = addSheetQuotes ? '`' + sheetInfo[temp[i]].sheet + '`' : sheetInfo[temp[i]].sheet;
            value = value.replace(regx, sheetRef);
            i++;
        }
        return value;
    };
    WorkbookFormula.prototype.registerSheet = function (sheetIndex, sheetCount) {
        if (sheetIndex === void 0) { sheetIndex = 0; }
        if (sheetCount === void 0) { sheetCount = this.parent.sheets.length; }
        var id;
        while (sheetIndex < sheetCount) {
            id = getSheet(this.parent, sheetIndex).id + '';
            this.calculateInstance.registerGridAsSheet(id, id, this.calcID);
            sheetIndex++;
        }
    };
    WorkbookFormula.prototype.unRegisterSheet = function (sheetIndex, sheetCount, propertyChange) {
        if (sheetIndex === void 0) { sheetIndex = 0; }
        if (sheetCount === void 0) { sheetCount = this.parent.sheets.length; }
        var id;
        this.calculateInstance.tokenCount = 0;
        if (propertyChange) {
            this.calculateInstance.unregisterGridAsSheet(id, id, propertyChange);
        }
        else {
            while (sheetIndex < sheetCount) {
                id = getSheet(this.parent, sheetIndex).id + '';
                this.calculateInstance.unregisterGridAsSheet(id, id);
                sheetIndex++;
            }
        }
    };
    WorkbookFormula.prototype.getUniqueRange = function (args) {
        args.range = this.calculateInstance.uniqueRange;
    };
    WorkbookFormula.prototype.removeUniquecol = function (args) {
        if (args && args.clearAll) {
            this.clearAllUniqueFormulaValue();
            return;
        }
        var sheet = this.parent.getActiveSheet();
        for (var i = 0; i < this.calculateInstance.uniqueRange.length; i++) {
            var uniqRngAddress = this.calculateInstance.uniqueRange[i].split(':')[0].split('!');
            if (uniqRngAddress[0] === sheet.name && uniqRngAddress[1] === sheet.activeCell) {
                var range = getRangeIndexes(this.calculateInstance.uniqueRange[i]);
                this.calculateInstance.uniqueRange.splice(i, 1);
                for (var j = range[0]; j <= range[2]; j++) {
                    for (var k = range[1]; k <= range[3]; k++) {
                        var cell = getCell(j, k, this.parent.getActiveSheet());
                        cell.formula = '';
                        this.parent.updateCellDetails({ value: '', formula: '' }, getRangeAddress([j, k]), undefined, undefined, true);
                    }
                }
            }
        }
    };
    /**
     * Perform the formula calculation.
     *
     * @param {FormulaCalculateArgs} args - Specifies the formula calculation options.
     * @param {number} args.rowIndex - The index of the row.
     * @param {number} args.colIndex - The index of the column.
     * @param {string} args.value - The value of the cell.
     * @param {boolean} args.isFormula - A flag indicating whether the value is a formula.
     * @param {number} args.sheetIdx - The index of the sheet.
     * @param {boolean} args.isRefreshing - A flag indicating whether the calculation is being refreshed.
     * @param {boolean} [args.isDependentRefresh] - An optional flag indicating whether the refresh is dependent.
     * @param {boolean} [args.isRandomFormula] - An optional flag indicating whether the formula is random.
     * @param {boolean} [args.isDelete] - An optional flag indicating whether is from delete cells.
     * @param {number[]} [args.deletedRange] - An optional range array indicating the deleted cells.
     * @returns {void}
     * @private
     */
    WorkbookFormula.prototype.refreshCalculate = function (args) {
        args.sheet = isNullOrUndefined(args.sheetIndex) ? this.parent.getActiveSheet() : getSheet(this.parent, args.sheetIndex);
        var sheetId = args.sheet.id + '';
        var family = this.calculateInstance.getSheetFamilyItem(sheetId);
        var cellRef = getColumnHeaderText(args.colIndex + 1) + (args.rowIndex + 1);
        if (family.isSheetMember && !isNullOrUndefined(family.parentObjectToToken)) {
            cellRef = family.parentObjectToToken.get(sheetId) + cellRef;
        }
        if (args.isFormula) {
            this.calculateFormula(args, cellRef);
        }
        else {
            if (this.calculateInstance.getFormulaInfoTable().has(cellRef)) {
                this.calculateInstance.getFormulaInfoTable().delete(cellRef);
                this.calculateInstance.clearFormulaDependentCells(cellRef);
            }
            this.calculateInstance.refresh(cellRef, null, null, null, args.isDelete, args.deletedRange);
            if (this.parent.calculationMode === 'Automatic') {
                this.calculateInstance.refreshRandValues(cellRef);
            }
        }
        this.calculateInstance.cell = '';
        args.isFormulaDependent = this.calculateInstance.getDependentCells().has(cellRef);
        if (args.value) {
            args.value = args.value.toString().split('^+').join('^').split('&+').join('&');
        }
    };
    WorkbookFormula.prototype.calculateFormula = function (args, cellRef) {
        var _this = this;
        var sheet = args.sheet;
        this.autoCorrectFormula(args, sheet);
        var value = args.value;
        if (args.isClipboard && value.toUpperCase().includes('UNIQUE')) {
            setCell(args.rowIndex, args.colIndex, sheet, { value: '' }, true);
        }
        var formula = value;
        value = this.parseSheetRef(value);
        var cellArgs = new ValueChangedArgs(args.rowIndex + 1, args.colIndex + 1, value);
        var usedRange = [sheet.usedRange.rowIndex, sheet.usedRange.colIndex];
        this.calculateInstance.valueChanged(sheet.id.toString(), cellArgs, true, usedRange, args.isRefreshing, sheet.name, args.isRandomFormula, null, args.isDelete, args.deletedRange, args.isDependentRefresh, args.action);
        if (this.calculateInstance.isRandomVal === true && !args.isRandomFormula && this.parent.calculationMode === 'Automatic') {
            this.refreshRandomFormula();
        }
        var updatedCell = getCell(args.rowIndex, args.colIndex, sheet);
        if (updatedCell && formula && !args.isDependentRefresh) {
            formula = formula.toUpperCase();
            var formulaStr = void 0;
            if (formula.indexOf('=SUM(') === 0) {
                formulaStr = '=SUM(';
            }
            else if (formula.indexOf('=AVERAGE(') === 0) {
                formulaStr = '=AVERAGE(';
            }
            else if (formula.indexOf('=ROUNDDOWN(') === 0) {
                formulaStr = '=ROUNDDOWN(';
            }
            else if (formula.indexOf('=ROUNDUP(') === 0) {
                formulaStr = '=ROUNDUP(';
            }
            else if (formula.indexOf('=MOD(') === 0) {
                formulaStr = '=MOD(';
            }
            if (formulaStr) {
                formula = formula.replace(formulaStr, '');
                if (formula.includes(')')) {
                    formula = formula.slice(0, formula.lastIndexOf(')'));
                    var fStr = void 0;
                    var idx = void 0;
                    while (formula.includes('(') && formula.includes(')')) {
                        idx = formula.indexOf('(');
                        fStr = formula.slice(idx + 1);
                        formula = formula.slice(0, idx) + (fStr.includes(')') ? fStr.slice(fStr.indexOf(')') + 1) : fStr);
                    }
                }
                var cellRefArr = formula.split(this.calculateInstance.getParseArgumentSeparator());
                var cellRef_1;
                var fCell = void 0;
                var model = void 0;
                var sheetIdx = void 0;
                var sheetName = void 0;
                var index = void 0;
                var _loop_1 = function (idx) {
                    cellRef_1 = cellRefArr[idx].split(':')[0];
                    if (cellRef_1.includes('!')) {
                        sheetName = cellRef_1.substring(0, cellRef_1.lastIndexOf('!')).split('\'').join('');
                        cellRef_1 = cellRef_1.substring(cellRef_1.lastIndexOf('!') + 1);
                    }
                    else {
                        sheetName = '';
                    }
                    if (isCellReference(cellRef_1)) {
                        if (sheetName) {
                            sheetIdx = getSheetIndex(this_1.parent, sheetName);
                            model = sheetIdx !== undefined ? getSheet(this_1.parent, sheetIdx) : sheet;
                        }
                        else {
                            model = sheet;
                        }
                        index = getRangeIndexes(cellRef_1);
                        fCell = getCell(index[0], index[1], model);
                        var format_1 = getTypeFromFormat(updatedCell.format);
                        var excludedFormats = ['Number', 'Currency', 'LongDate', 'Time'];
                        if (fCell && fCell.format && (!updatedCell.format || (!args.fillType &&
                            (excludedFormats.every(function (fmt) { return format_1 !== fmt; }) &&
                                getTypeFromFormat(fCell.format) !== 'Number')))) {
                            updatedCell.format = fCell.format;
                            return "break";
                        }
                    }
                };
                var this_1 = this;
                for (var idx = 0; idx < cellRefArr.length; idx++) {
                    var state_1 = _loop_1(idx);
                    if (state_1 === "break")
                        break;
                }
            }
            else {
                var depCells = this.calculateInstance.getDependentFormulaCells().get(cellRef);
                if (depCells && depCells.size && this.calculateInstance.getFormulaInfoTable().has(cellRef) &&
                    this.calculateInstance.getFormulaInfoTable().get(cellRef).getParsedFormula().lastIndexOf('q') === -1 &&
                    !updatedCell.format) {
                    var format_2;
                    var fCell_1;
                    var sheetRef_1;
                    var model_1;
                    var sheetIdx_1;
                    var idx_1;
                    var family_1 = this.calculateInstance.getSheetFamilyItem(null, this.calcID);
                    depCells.forEach(function (cellRef) {
                        if (!format_2) {
                            sheetRef_1 = cellRef.slice(0, cellRef.lastIndexOf('!') + 1);
                            cellRef = cellRef.replace(sheetRef_1, '');
                            if (isCellReference(cellRef)) {
                                idx_1 = getRangeIndexes(cellRef);
                                if (family_1.tokenToParentObject.has(sheetRef_1)) {
                                    sheetIdx_1 = getSheetIndexFromId(_this.parent, Number(family_1.tokenToParentObject.get(sheetRef_1)));
                                    model_1 = sheetIdx_1 !== undefined ? getSheet(_this.parent, sheetIdx_1) : sheet;
                                }
                                else {
                                    model_1 = sheet;
                                }
                                fCell_1 = getCell(idx_1[0], idx_1[1], model_1);
                                if (fCell_1 && fCell_1.format) {
                                    format_2 = fCell_1.format;
                                }
                            }
                        }
                    });
                    if (format_2) {
                        updatedCell.format = format_2;
                    }
                }
            }
        }
    };
    WorkbookFormula.prototype.refreshRandomFormula = function () {
        var rowId;
        var colId;
        var refValue = '';
        var referenceCollection = this.calculateInstance.randCollection;
        if (this.calculateInstance.randomValues.size > 1 && this.calculateInstance.randomValues.size ===
            referenceCollection.length) {
            for (var i = 0; i < this.calculateInstance.randomValues.size; i++) {
                rowId = this.calculateInstance.rowIndex(referenceCollection[i]);
                colId = this.calculateInstance.colIndex(referenceCollection[i]);
                refValue = this.calculateInstance.randomValues.get(referenceCollection[i]);
                var sheetId = (parseFloat(this.calculateInstance.getSheetToken(referenceCollection[i]).split(this.calculateInstance.sheetToken).join('')) + 1).toString();
                var sheet = getSheet(this.parent, getSheetIndexFromId(this.parent, Number(sheetId)));
                if (sheet && getCell(rowId - 1, colId - 1, sheet).formula) {
                    var tempArgs = new ValueChangedArgs(rowId, colId, refValue);
                    this.calculateInstance.valueChanged(sheetId, tempArgs, true, undefined, undefined, undefined, false, true);
                }
            }
        }
    };
    WorkbookFormula.prototype.autoCorrectFormula = function (args, sheet) {
        if (!isNullOrUndefined(args.value)) {
            var formula = args.value;
            formula = this.autoCorrectCellRef({ formula: args.value });
            formula = formula.toString();
            if (formula.split('(').length === 2 && formula.indexOf(')') < 0) {
                formula += ')';
            }
            var isEqual = void 0;
            if (formula.indexOf('=') === 0) {
                formula = formula.slice(1);
                isEqual = true;
            }
            var lessEq = formula.match(/</g);
            var greaterEq = formula.match(/>/g);
            var equal = formula.match(/=/g);
            if (lessEq) {
                var lessOp = '';
                for (var i = 0; i < lessEq.length; i++) {
                    lessOp = lessOp + lessEq[i];
                }
                formula = formula.replace(lessOp, '<');
            }
            if (greaterEq) {
                var greaterOp = '';
                for (var j = 0; j < greaterEq.length; j++) {
                    greaterOp = greaterOp + greaterEq[j];
                }
                formula = formula.replace(greaterOp, '>');
            }
            if (equal) {
                var equalOp = '';
                for (var c = 0; c < equal.length; c++) {
                    equalOp = equalOp + equal[c];
                }
                formula = formula.split(equalOp).join('=');
            }
            formula = isEqual ? '=' + formula : formula;
            if (lessEq || greaterEq || equal) {
                getCell(args.rowIndex, args.colIndex, sheet).formula = formula;
            }
            args.value = formula;
        }
    };
    WorkbookFormula.prototype.correctCellReference = function (cellRef) {
        var _this = this;
        var cellRefArr = cellRef.split(':');
        var refArr;
        var sheetRefArr;
        var oprMatchArr;
        var isInvalid;
        var updatedRef;
        cellRefArr.forEach(function (cellAddr, idx) {
            sheetRefArr = cellAddr.split('!');
            cellRef = sheetRefArr[1] || cellAddr;
            updatedRef = null;
            if (cellRef.includes('&')) {
                refArr = cellRef.split('&');
                if (_this.calculateInstance.isCellReference(refArr[1].split('$').join(''))) {
                    refArr[1] = _this.getUpdatedCellRef(refArr[1]);
                    updatedRef = refArr.join('&');
                }
            }
            else if (_this.calculateInstance.isCellReference(cellRef.split('$').join(''))) {
                updatedRef = _this.getUpdatedCellRef(cellRef);
                if (sheetRefArr.length > 1) {
                    updatedRef = sheetRefArr[0] + '!' + updatedRef;
                }
            }
            else {
                oprMatchArr = cellAddr.match(/[/+\-*^><>=<=<>]+/g);
                if (oprMatchArr) {
                    refArr = cellAddr.split(oprMatchArr[0]);
                    for (var refIdx = 0; refIdx < refArr.length; refIdx++) {
                        sheetRefArr = refArr[refIdx].split('!');
                        cellRef = sheetRefArr[1] || sheetRefArr[0];
                        if (_this.calculateInstance.isCellReference(cellRef.split('$').join(''))) {
                            refArr[refIdx] = _this.getUpdatedCellRef(cellRef);
                            if (sheetRefArr.length > 1) {
                                refArr[refIdx] = sheetRefArr[0] + '!' + refArr[refIdx];
                            }
                        }
                    }
                    updatedRef = refArr.join(oprMatchArr[0]);
                }
            }
            if (updatedRef && updatedRef !== cellAddr) {
                isInvalid = true;
                cellRefArr[idx] = updatedRef;
            }
        });
        return { isInvalid: isInvalid, ref: cellRefArr.join(':') };
    };
    WorkbookFormula.prototype.autoCorrectCellRef = function (args) {
        var rightParens = args.formula.lastIndexOf(')');
        var refCorrectObj;
        if (rightParens > -1 && args.formula.split(')').length === 2) {
            var leftParens = rightParens - 1;
            while (leftParens > -1 && args.formula[leftParens] !== '(') {
                if (args.formula[leftParens] === ')') {
                    return args.formula;
                }
                leftParens--;
            }
            if (leftParens > -1) {
                var formulaArgs = args.formula.substring(leftParens + 1, rightParens);
                var listSeparator = this.calculateInstance.getParseArgumentSeparator();
                var formulaArgsArr = formulaArgs.split(listSeparator);
                var isInValidRef = void 0;
                for (var argsIdx = 0; argsIdx < formulaArgsArr.length; argsIdx++) {
                    refCorrectObj = this.correctCellReference(formulaArgsArr[argsIdx]);
                    if (refCorrectObj.isInvalid) {
                        isInValidRef = true;
                        formulaArgsArr[argsIdx] = refCorrectObj.ref;
                    }
                }
                if (isInValidRef) {
                    args.formula = args.formula.split(formulaArgs).join(formulaArgsArr.join(listSeparator));
                    args.isInvalid = true;
                }
            }
        }
        else if (args.formula.startsWith('=') && !args.formula.includes(')')) {
            refCorrectObj = this.correctCellReference(args.formula.substring(1, args.formula.length));
            if (refCorrectObj.isInvalid) {
                args.formula = '=' + refCorrectObj.ref;
                args.isInvalid = true;
            }
        }
        return args.formula;
    };
    WorkbookFormula.prototype.getUpdatedCellRef = function (cellRef) {
        var orgCellRef = cellRef;
        cellRef = cellRef.trim();
        var isAbsolute = cellRef.indexOf('$') === 0;
        var alphabetStartIdx = cellRef.search(/[a-zA-Z]/);
        var digitStartIdx = cellRef.search(/\d/);
        alphabetStartIdx = isAbsolute ? alphabetStartIdx - 1 : alphabetStartIdx;
        if ((isAbsolute ? digitStartIdx > 1 : digitStartIdx > 0) && isNumber(cellRef.substring(digitStartIdx, cellRef.length))) {
            return orgCellRef;
        }
        else {
            return cellRef.substring(alphabetStartIdx, cellRef.length) + cellRef.substring(0, alphabetStartIdx);
        }
    };
    WorkbookFormula.prototype.initiateDefinedNames = function () {
        var definedNames = this.parent.definedNames;
        var i = 0;
        while (i < definedNames.length) {
            var definedname = definedNames[i];
            var refersTo = this.parseSheetRef(definedname.refersTo);
            var range = getRangeFromAddress(refersTo);
            var cellRef = false;
            var isLink = refersTo.indexOf('http:') > -1 ? true : (refersTo.indexOf('https:') > -1 ? true : false);
            range = range.split('$').join('');
            range = range.split('=').join('');
            if (range.indexOf(':') > -1) {
                var rangeSplit = range.split(':');
                if ((isCellReference(rangeSplit[0]) && isCellReference(rangeSplit[1])) ||
                    ((rangeSplit[0].match(/[0-9]/) && rangeSplit[1].match(/[0-9]/)) ||
                        (rangeSplit[0].toUpperCase().match(/[A-Z]/) && rangeSplit[1].toUpperCase().match(/[A-Z]/)))) {
                    cellRef = true;
                }
            }
            else if (range.indexOf(':') < 0) {
                if (isCellReference(range)) {
                    cellRef = true;
                }
            }
            if (isLink) {
                cellRef = false;
            }
            if (cellRef) {
                this.addDefinedName(definedname, true, undefined, true);
            }
            else {
                this.removeDefinedName(definedname.name, definedname.scope, true);
                i--;
            }
            i++;
        }
    };
    /**
     * @hidden
     * Used to add defined name to workbook.
     *
     * @param {DefineNameModel} definedName - Define named range.
     * @param {boolean} isValidate - Specify the boolean value.
     * @param {number} index - Define named index.
     * @param {boolean} isEventTrigger - Specify the boolean value.
     * @returns {boolean} - Used to add defined name to workbook.
     */
    WorkbookFormula.prototype.addDefinedName = function (definedName, isValidate, index, isEventTrigger) {
        if (index === undefined || index < -1) {
            index = this.parent.definedNames.length;
        }
        var isAdded = true;
        var sheetIdx;
        var name = definedName.name;
        if (definedName.refersTo.indexOf('!') < 0) {
            var sheetName = getSheetName(this.parent);
            sheetName = sheetName.indexOf(' ') !== -1 ? '\'' + sheetName + '\'' : sheetName;
            definedName.refersTo = sheetName + '!' + ((definedName.refersTo.indexOf('=') < 0) ?
                definedName.refersTo : definedName.refersTo.split('=')[1]);
        }
        var visibleRefersTo = definedName.refersTo;
        var refersTo = this.parseSheetRef(definedName.refersTo);
        if (definedName.scope) {
            sheetIdx = getSheetIndex(this.parent, definedName.scope);
            if (sheetIdx > -1) {
                name = getSheetName(this.parent, sheetIdx) + '!' + name;
            }
        }
        else {
            definedName.scope = 'Workbook';
        }
        if (!definedName.comment) {
            definedName.comment = '';
        }
        //need to extend once internal sheet value changes done.
        if (!isValidate && this.checkIsNameExist(definedName.name, definedName.scope)) {
            isAdded = false;
        }
        else {
            this.calculateInstance.addNamedRange(name, refersTo[0] === '=' ? refersTo.substr(1) : refersTo);
            if (refersTo[0] !== '=') {
                definedName.refersTo = '=' + visibleRefersTo;
            }
            if (this.parent.definedNames.indexOf(definedName) < 0) {
                this.parent.definedNames.splice(index, 0, definedName);
                this.parent.notify(formulaBarOperation, { action: 'setNameBoxValue', definedName: definedName });
            }
        }
        var eventArgs = { name: definedName.name, scope: definedName.scope, comment: definedName.comment,
            refersTo: definedName.refersTo, cancel: false };
        if (!isEventTrigger) {
            this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'addDefinedName' });
        }
        return isAdded;
    };
    /**
     * @hidden
     * Used to remove defined name from workbook.
     *
     * @param {string} name - Specifies the defined name.
     * @param {string} scope - Specifies the scope of the define name.
     * @param {boolean} isEventTrigger - Specify the boolean value.
     * @returns {boolean} - To Return the bool value.
     */
    WorkbookFormula.prototype.removeDefinedName = function (name, scope, isEventTrigger) {
        var isRemoved = false;
        var scopeVal = !scope ? 'Workbook' : scope;
        var index = this.getIndexFromNameColl(name, scopeVal);
        if (index > -1) {
            var calcName = name;
            if (scope) {
                var sheetIdx = getSheetIndex(this.parent, scope);
                if (sheetIdx > -1) {
                    calcName = getSheetName(this.parent, sheetIdx) + '!' + name;
                }
            }
            this.calculateInstance.removeNamedRange(calcName);
            var removedName = this.parent.definedNames.splice(index, 1);
            this.parent.notify(formulaBarOperation, { action: 'setNameBoxValue', definedName: removedName[0], isRemove: true });
            if (!isEventTrigger) {
                var eventArgs = { name: name, scope: scopeVal, cancel: false };
                this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'removeDefinedName' });
            }
            isRemoved = true;
        }
        return isRemoved;
    };
    WorkbookFormula.prototype.checkIsNameExist = function (name, sheetName) {
        var isExist = this.parent.definedNames.some(function (key) {
            return key.name === name && (sheetName ? key.scope === sheetName : key.scope === '');
        });
        return isExist;
    };
    WorkbookFormula.prototype.getIndexFromNameColl = function (definedName, scope) {
        if (scope === void 0) { scope = ''; }
        var index = -1;
        this.parent.definedNames.filter(function (name, idx) {
            if (name.name === definedName && name.scope === scope) {
                index = idx;
            }
        });
        return index;
    };
    WorkbookFormula.prototype.calculateNow = function (args) {
        var _this = this;
        var deferred = new Deferred();
        args.promise = deferred.promise;
        var dependentCells;
        var initCalculate = function () {
            var family;
            var token;
            var sheetId;
            var cellRef;
            var options = { isRefreshing: true, action: 'calculate' };
            var formulaInfo = _this.calculateInstance.getFormulaInfoTable();
            args.sheets.forEach(function (sheet) {
                sheetId = sheet.id.toString();
                family = _this.calculateInstance.getSheetFamilyItem(sheetId);
                token = family.isSheetMember ? family.parentObjectToToken.get(sheetId) : '';
                _this.parent.setSheetPropertyOnMute(sheet, 'isSheetCalculated', true);
                options.sheet = sheet;
                sheet.rows.forEach(function (row, rowIdx) {
                    options.rowIndex = rowIdx;
                    if (row && row.cells) {
                        row.cells.forEach(function (cell, colIdx) {
                            if (cell && checkIsFormula(cell.formula)) {
                                cellRef = token + getColumnHeaderText(colIdx + 1) + (rowIdx + 1);
                                if (cell.value === undefined || cell.value === null || !formulaInfo.has(cellRef) || (dependentCells &&
                                    dependentCells[cellRef])) {
                                    options.colIndex = colIdx;
                                    options.value = cell.formula;
                                    _this.calculateFormula(options, cellRef);
                                }
                            }
                        });
                    }
                });
            });
            deferred.resolve();
            _this.calculateInstance.cell = '';
        };
        var totalLoadCount = args.sheets.length;
        var loadCompleteHandler = function () {
            totalLoadCount--;
            if (!totalLoadCount) {
                initCalculate();
                if (_this.parent.calculationMode === 'Automatic' && args.scope === 'CalculateWorkbook') {
                    _this.parent.setProperties({ calculationMode: 'Manual' }, true);
                }
                var sheet = _this.parent.getActiveSheet();
                if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
                    _this.parent.notify(applyCF, { indexes: [], isAction: true, refreshAll: true, isEdit: true });
                }
            }
        };
        var getDependentCellsCheckFn = function (sheet) {
            var sheetId = sheet.id.toString();
            var family = _this.calculateInstance.getSheetFamilyItem(sheetId);
            var token = family.isSheetMember ? family.parentObjectToToken.get(sheetId) : '';
            dependentCells = {};
            var dependentCellsInfo = _this.calculateInstance.getDependentCells();
            return function (rowIdx, colIdx) {
                var cellAddr = token + getCellAddress(rowIdx, colIdx);
                if (dependentCellsInfo.has(cellAddr)) {
                    dependentCellsInfo.get(cellAddr).forEach(function (cellRef) {
                        if (!dependentCells[cellRef]) {
                            dependentCells[cellRef] = true;
                        }
                    });
                }
            };
        };
        args.sheets.forEach(function (sheet) {
            if (sheet.ranges.some(function (range) { return range.dataSource && (!range.info || !range.info.loadedRange ||
                !range.info.loadedRange.length); })) {
                _this.parent.notify(updateSheetFromDataSource, { sheet: sheet, autoDetectFormat: true, loadFromStartCell: true,
                    updateDependentCellsCallback: getDependentCellsCheckFn(sheet), loadComplete: loadCompleteHandler });
            }
            else {
                loadCompleteHandler();
            }
        });
    };
    WorkbookFormula.prototype.toFixed = function (value) {
        var num = Number(value);
        if (Math.round(num) !== num) {
            value = num.toFixed(2);
        }
        return value;
    };
    WorkbookFormula.prototype.commputeFormulaValue = function (args) {
        var parsedSheetValue = this.parseSheetRef(args.value);
        args.value = this.calculateInstance.computeExpression(parsedSheetValue).toString();
    };
    WorkbookFormula.prototype.getCellRefValue = function (args) {
        var sheetId;
        var sheetInfo = this.getSheetInfo();
        var sheetCount = sheetInfo.length;
        var token = this.calculateInstance.sheetToken;
        var value = args.value;
        var tokenIndex = value.lastIndexOf(token);
        if (tokenIndex !== -1) {
            var sheetName = value.substring(0, tokenIndex);
            if (sheetName.length > 0 && sheetName[0] === this.calculateInstance.getFormulaCharacter()) {
                sheetName = sheetName.substring(1, args.value.length); // To get the sheetname without '=' symbol
            }
            for (var i = 0; i < sheetCount; i++) {
                if (sheetName.toUpperCase() === sheetInfo[i].visibleName.toUpperCase()) {
                    sheetId = i;
                    break;
                }
            }
            args.value = this.calculateInstance.getValueFromArg(token + sheetId + token + value.substring(tokenIndex + 1).toUpperCase());
        }
        else if (value.length > 0 && value[0] === this.calculateInstance.getFormulaCharacter()) {
            args.value = this.calculateInstance.getValueFromArg(value.substring(1, args.value.length).toUpperCase());
        }
    };
    WorkbookFormula.prototype.aggregateComputation = function (args) {
        var sheet = this.parent.getActiveSheet();
        var range = getSingleSelectedRange(sheet);
        var indexes = getRangeIndexes(range.split(':')[1]);
        if (indexes[0] + 1 === sheet.rowCount && indexes[1] + 1 === sheet.colCount) {
            range = "A1:" + getCellAddress(sheet.usedRange.rowIndex, sheet.usedRange.colIndex);
        }
        var calcValue;
        var i;
        var cellCol = this.calculateInstance.getCellCollection(range);
        for (i = 0; i < cellCol.length; i++) {
            calcValue = this.calculateInstance.getValueFromArg(cellCol[i]);
            if (isNumber(calcValue)) {
                args.countOnly = false;
                break;
            }
        }
        args.Count = this.calculateInstance.getFunction('COUNTA')(range, 'isAggregate');
        if (!args.Count || args.countOnly) {
            return;
        }
        var formulaVal = ['SUM', 'AVERAGE', 'MIN', 'MAX'];
        var formatedValues = [];
        var index = getRangeIndexes(sheet.activeCell);
        var cell = getCell(index[0], index[1], sheet, false, true);
        for (i = 0; i < 4; i++) {
            calcValue = this.toFixed(this.calculateInstance.getFunction(formulaVal[i])(range, 'isAggregate'));
            if (cell.format) {
                var eventArgs = { formattedText: calcValue, value: calcValue, format: cell.format,
                    cell: { value: calcValue, format: cell.format } };
                this.parent.notify(getFormattedCellObject, eventArgs);
                calcValue = eventArgs.formattedText;
            }
            formatedValues.push(calcValue);
        }
        args.Sum = formatedValues[0];
        args.Avg = formatedValues[1];
        args.Min = formatedValues[2];
        args.Max = formatedValues[3];
    };
    WorkbookFormula.prototype.refreshInsertDelete = function (args) {
        var _this = this;
        if (args.modelType === 'Sheet') {
            return;
        }
        var formulaDependentCells = this.calculateInstance.getDependentFormulaCells();
        var cell;
        var sheetIndex = getSheetIndexFromId(this.parent, args.sheet.id);
        this.parent.sheets.forEach(function (sheet, index) {
            for (var i = 0, rowLen = sheet.usedRange.rowIndex; i <= rowLen; i++) {
                for (var j = 0, colLen = sheet.usedRange.colIndex; j <= colLen; j++) {
                    cell = getCell(i, j, sheet, false, true);
                    if (cell.formula && checkIsFormula(cell.formula)) {
                        if (index === sheetIndex) {
                            if (args.isInsert || !(args.modelType === 'Row' ? i >= args.startIndex && i <= args.endIndex :
                                j >= args.startIndex && j <= args.endIndex)) {
                                _this.updateFormula(args, cell, i, j, sheetIndex);
                            }
                        }
                        else if (cell.formula.includes(args.sheet.name)) {
                            _this.updateFormula(args, cell, i, j, sheetIndex, true, sheet);
                        }
                    }
                }
            }
        });
        formulaDependentCells.clear();
        this.calculateInstance.getDependentCells().clear();
        this.calculateInstance.getFormulaInfoTable().clear();
        this.refreshNamedRange(args);
    };
    WorkbookFormula.prototype.getUpdatedFormulaOnInsertDelete = function (args) {
        if (args.sheetNames) {
            if (!args.updateSheetRef) {
                args.updateSheetRef = this.getSheetRefUpdateOnDelete();
            }
            var previousFormula = this.parseSheetRef(args.cell.formula, false);
            var formula_1 = previousFormula;
            args.sheetNames.forEach(function (sheetName) {
                formula_1 = args.updateSheetRef(sheetName, formula_1).value;
            });
            if (formula_1 !== previousFormula) {
                args.cell.formula = formula_1;
            }
        }
        else {
            this.updateFormula(args.insertDeleteArgs, args.cell, args.row, args.col, args.sheetIdx, args.otherSheet, args.formulaSheet);
        }
    };
    WorkbookFormula.prototype.updateFormula = function (args, cell, row, col, sheetIdx, otherSheet, formulaSheet) {
        var ref;
        var pVal;
        var index;
        var updated;
        var isRangeFormula;
        var containAlphabetAndDigit = new RegExp(/^(?=.*[a-zA-Z])(?=.*\d)/g);
        var isValidCellReference;
        var isFullColumn;
        if (cell.formula && cell.formula.includes('UNIQUE') && row !== undefined) {
            this.clearUniqueRange(row, col, formulaSheet || args.sheet);
        }
        var getAddress = function () {
            var range = (isAbsoluteRef ? '$' : '') + getColumnHeaderText(index[1] + 1) + (isAbsoluteRef ? '$' : '') + (index[0] + 1);
            if (index[0] !== index[2] || index[1] !== index[3]) {
                range += ':' + (isAbsoluteRef ? '$' : '') + getColumnHeaderText(index[3] + 1) + (isAbsoluteRef ? '$' : '') + (index[2] + 1);
            }
            return range;
        };
        var formulaArr = this.parseFormulaArgument({ formula: this.parseSheetRef(cell.formula, true), rangeRef: true });
        var sheetInfo = this.getSheetInfo();
        var sheetName;
        var refChanged;
        var isAbsoluteRef;
        var isSingleRangeRef = !cell.formula.includes(this.parent.listSeparator);
        for (var i = 0; i < formulaArr.length; i++) {
            ref = formulaArr[i].trim();
            isAbsoluteRef = ref.includes('$');
            if (isAbsoluteRef) {
                ref = ref.replace(/[$]/g, '');
            }
            isValidCellReference = true;
            if (this.calculateInstance.isCellReference(ref)) {
                isRangeFormula = ref.includes(':');
                pVal = i && formulaArr[i - 1].trim();
                if (pVal && pVal[pVal.length - 1] === '!') {
                    pVal = pVal.replace(/['!]/g, '');
                    sheetName = sheetInfo[sheetIdx].sheet === sheetInfo[sheetIdx].visibleName ? args.sheet.name :
                        '`' + sheetInfo[sheetIdx].sheet + '`';
                    if (pVal !== sheetName) {
                        continue;
                    }
                }
                else if (otherSheet) {
                    continue;
                }
                if (!containAlphabetAndDigit.test(ref) && ref.indexOf(':') > -1) {
                    isValidCellReference = false;
                    isFullColumn = isNullOrUndefined(ref.match(/[0-9]/)) ? true : false;
                }
                index = getSwapRange(getRangeIndexes(ref));
                updated = this.parent.updateRangeOnInsertDelete(args, index, isRangeFormula, row, col, isAbsoluteRef, isSingleRangeRef);
                if (updated) {
                    formulaArr[i] = index[2] < index[0] || index[3] < index[1] ?
                        this.calculateInstance.getErrorStrings()[CommonErrors.Ref] : !isValidCellReference ?
                        (isFullColumn ? getRangeAddress(index).replace(/\d/g, '') : getRangeAddress(index).replace(/[a-zA-Z]/g, '')) : getAddress();
                    refChanged = true;
                }
            }
        }
        var newFormula = '=' + formulaArr.join('');
        if (refChanged) {
            var regx_1;
            var regExp_1 = RegExp;
            sheetInfo.forEach(function (info) {
                if (newFormula.includes('`' + info.sheet + '`')) {
                    regx_1 = new regExp_1('`' + info.sheet + '`', 'gi');
                    newFormula = newFormula.replace(regx_1, info.visibleName);
                }
            });
            if (cell.formula !== newFormula) {
                cell.formula = newFormula;
                if (!(this.parent.calculationMode === 'Manual' && (args.isInsert || args.isDelete))) {
                    cell.value = null;
                }
            }
        }
    };
    WorkbookFormula.prototype.clearUniqueRange = function (row, col, sheet) {
        var uniqueArgs = { cellIdx: [row, col, row, col], isUnique: false, uniqueRange: '', sheetName: sheet.name };
        this.parent.notify(checkUniqueRange, uniqueArgs);
        var range = getRangeIndexes(uniqueArgs.uniqueRange);
        for (var i = range[0]; i <= range[2]; i++) {
            for (var j = range[1]; j <= range[3]; j++) {
                delete getCell(i, j, sheet, false, true).value;
            }
        }
    };
    WorkbookFormula.prototype.clearAllUniqueFormulaValue = function () {
        var ranges = this.calculateInstance.uniqueRange;
        var cell;
        var sheet;
        var range;
        for (var i = 0; i < ranges.length; i++) {
            var lastIndex = ranges[i].lastIndexOf('!');
            sheet = getSheet(this.parent, getSheetIndex(this.parent, ranges[i].substring(0, lastIndex)));
            range = getRangeIndexes(ranges[i].substring(lastIndex + 1));
            cell = getCell(range[0], range[1], sheet);
            if (cell && cell.value === '#SPILL!') {
                continue;
            }
            for (var j = range[0]; j <= range[2]; j++) {
                for (var k = range[1]; k <= range[3]; k++) {
                    cell = getCell(j, k, sheet);
                    if (cell && cell.value) {
                        delete cell.value;
                    }
                }
            }
        }
    };
    WorkbookFormula.prototype.parseFormulaArgument = function (args) {
        var temp;
        var str;
        var i = 0;
        var arr = [];
        var formulaVal = this.markSpecialChar(args.formula.replace('=', ''), args.rangeRef);
        var regExp = RegExp;
        var validCharRegx = new regExp(args.rangeRef ? /\(|\)|=|\^|>|<|\+|-|\*|\/|%|&/g : /\(|\)|=|\^|>|<|:|\+|-|\*|\/|%|&/g);
        var sepRegx = new regExp(this.parent.listSeparator, 'g');
        formulaVal = formulaVal.split(new regExp(validCharRegx.source + '|' + sepRegx.source, 'g'));
        var len = formulaVal.length;
        while (i < len) {
            temp = formulaVal[i];
            if (!temp) {
                i++;
                continue;
            }
            if (temp.length === 1) {
                arr.push(this.isUniqueChar(temp) ? this.getUniqueCharVal(temp) : temp);
            }
            else {
                str = temp[0];
                if (temp.indexOf('!') > 0) {
                    if (this.isUniqueChar(str)) {
                        arr.push(this.getUniqueCharVal(str));
                        temp = temp.substr(1);
                    }
                    str = temp.indexOf('!') + 1;
                    arr.push(temp.substring(0, str));
                    temp = temp.substring(str);
                    str = temp.indexOf(':');
                    if (str > -1 && temp.indexOf('!') > str) {
                        arr.push(temp.substring(0, str));
                        arr.push(':');
                        temp = temp.substring(str + 1);
                        str = temp.indexOf('!') + 1;
                        arr.push(temp.substring(0, str));
                        arr.push(temp.substring(str));
                    }
                    else {
                        arr.push(temp);
                    }
                }
                else if (this.isUniqueChar(str)) {
                    arr.push(this.getUniqueCharVal(str));
                    arr.push(temp.substr(1));
                }
                else {
                    arr.push(temp);
                }
            }
            i++;
        }
        args.formulaArr = arr;
        return arr;
    };
    WorkbookFormula.prototype.getUniqueCharVal = function (formula) {
        switch (formula) {
            case this.uniqueOBracket:
                return '(';
            case this.uniqueCBracket:
                return ')';
            case this.uniqueCSeparator:
                return this.parent.listSeparator;
            case this.uniqueCOperator:
                return ':';
            case this.uniquePOperator:
                return '+';
            case this.uniqueSOperator:
                return '-';
            case this.uniqueMOperator:
                return '*';
            case this.uniqueDOperator:
                return '/';
            case this.uniqueModOperator:
                return '%';
            case this.uniqueConcateOperator:
                return '&';
            case this.uniqueEqualOperator:
                return '=';
            case this.uniqueExpOperator:
                return '^';
            case this.uniqueGTOperator:
                return '>';
            case this.uniqueLTOperator:
                return '<';
        }
        return '';
    };
    WorkbookFormula.prototype.isUniqueChar = function (formula) {
        var code = formula.charCodeAt(formula);
        return code >= 129 && code <= 142;
    };
    WorkbookFormula.prototype.markSpecialChar = function (formula, rangeRef) {
        formula = formula.replace(/\(/g, '(' + this.uniqueOBracket).replace(/\)/g, ')' + this.uniqueCBracket);
        var regEx = RegExp;
        if (rangeRef) {
            formula = formula.replace(new regEx(this.parent.listSeparator, 'g'), this.parent.listSeparator + this.uniqueCSeparator);
        }
        else {
            formula = formula.replace(new regEx(this.parent.listSeparator, 'g'), this.parent.listSeparator + this.uniqueCSeparator).replace(/:/g, ":" + this.uniqueCOperator);
        }
        formula = formula.replace(/\+/g, '+' + this.uniquePOperator).replace(/-/g, '-' + this.uniqueSOperator);
        formula = formula.replace(/\*/g, '*' + this.uniqueMOperator).replace(/\//g, '/' + this.uniqueDOperator);
        formula = formula.replace(/&/g, '&' + this.uniqueConcateOperator);
        formula = formula.replace(/=/g, '=' + this.uniqueEqualOperator);
        formula = formula.replace(/\^/g, '^' + this.uniqueExpOperator);
        formula = formula.replace(/>/g, '>' + this.uniqueGTOperator).replace(/</g, '<' + this.uniqueLTOperator);
        return formula.replace(/%/g, '%' + this.uniqueModOperator);
    };
    WorkbookFormula.prototype.refreshNamedRange = function (args) {
        var _this = this;
        if (args.definedNames && args.definedNames.length) {
            args.definedNames.forEach(function (definedName) {
                _this.parent.removeDefinedName(definedName.name, definedName.scope);
                _this.parent.addDefinedName(definedName);
            });
            return;
        }
        var len = this.parent.definedNames.length;
        if (!len) {
            return;
        }
        var definedNames = Object.assign({}, this.parent.definedNames);
        var range;
        var sheetName;
        var refAddress;
        var definedName;
        var updated;
        var checkSheetName;
        var rangeAddress;
        var containAlphabetAndDigit = new RegExp(/^(?=.*[a-zA-Z])(?=.*\d)/g);
        var isValidCellReference;
        var isFullColumn;
        for (var i = 0; i < len; i++) {
            isValidCellReference = true;
            definedName = definedNames[i];
            var lastIndex = definedName.refersTo.lastIndexOf('!');
            refAddress = definedName.refersTo.substring(lastIndex + 1);
            sheetName = definedName.refersTo.substring(1, lastIndex);
            checkSheetName = sheetName;
            if (checkSheetName.match(/'/g)) {
                checkSheetName = checkSheetName.slice(1, -1);
            }
            if (checkSheetName !== args.sheet.name) {
                continue;
            }
            if (!containAlphabetAndDigit.test(refAddress) && refAddress.indexOf(':') > -1) {
                isValidCellReference = false;
                isFullColumn = isNullOrUndefined(refAddress.match(/[0-9]/)) ? true : false;
            }
            range = getRangeIndexes(refAddress);
            updated = this.parent.updateRangeOnInsertDelete(args, range);
            if (!isValidCellReference) {
                rangeAddress = isFullColumn ? getRangeAddress(range).replace(/\d/g, '') : getRangeAddress(range).replace(/[a-zA-Z]/g, '');
            }
            else {
                rangeAddress = getRangeAddress(range);
            }
            if (args.isInsert) {
                this.updateDefinedNames(definedName, sheetName, rangeAddress, updated);
            }
            else {
                if (args.modelType === 'Row') {
                    this.updateDefinedNames(definedName, sheetName, rangeAddress, updated, [range[0], range[2]], args);
                }
                else if (args.modelType === 'Column') {
                    this.updateDefinedNames(definedName, sheetName, rangeAddress, updated, [range[1], range[3]], args);
                }
            }
        }
    };
    WorkbookFormula.prototype.updateDefinedNames = function (definedName, sheetName, rangeAddress, changed, idx, args) {
        if (!changed) {
            return;
        }
        var index = this.parent.definedNames.indexOf(definedName);
        var eventArgs = {
            action: 'removeDefinedName',
            isRemoved: false,
            definedName: definedName.name,
            scope: definedName.scope,
            isEventTrigger: true
        };
        this.parent.notify(workbookFormulaOperation, eventArgs);
        if (idx) {
            var oldDefinedName = { name: definedName.name, comment: definedName.comment, refersTo: definedName.refersTo,
                scope: definedName.scope };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            oldDefinedName = new DefineName(this.parent, 'definedNames', oldDefinedName, true);
            if (args.definedNames) {
                args.definedNames.push(oldDefinedName);
            }
            else {
                args.definedNames = [oldDefinedName];
            }
            if (idx[1] < idx[0]) {
                return;
            }
        }
        definedName.refersTo = sheetName + '!' + rangeAddress;
        this.parent.notify(workbookFormulaOperation, { action: 'addDefinedName', definedName: definedName, isAdded: false, index: index, isEventTrigger: true });
        var refreshArgs = { name: definedName.name, scope: definedName.scope, comment: definedName.comment,
            refersTo: definedName.refersTo, cancel: false };
        this.parent.notify('actionComplete', { eventArgs: refreshArgs, action: 'refreshNamedRange' });
    };
    return WorkbookFormula;
}());

/**
 * Specifies number format.
 */
var WorkbookNumberFormat = /** @class */ (function () {
    function WorkbookNumberFormat(parent) {
        this.parent = parent;
        this.localeObj = getNumericObject(this.parent.locale);
        var dependables = IntlBase.getDependables(cldrData, this.parent.locale, null).dateObject;
        if (dependables.dayPeriods && dependables.dayPeriods && dependables.dayPeriods.format && dependables.dayPeriods.format.wide) {
            this.localeObj.am = dependables.dayPeriods.format.wide.am || 'AM';
            this.localeObj.pm = dependables.dayPeriods.format.wide.pm || 'PM';
        }
        else {
            this.localeObj.am = 'AM';
            this.localeObj.pm = 'PM';
        }
        this.updateLocalizedFormats(dependables);
        this.addEventListener();
    }
    WorkbookNumberFormat.prototype.numberFormatting = function (args) {
        var sheetIdx = this.parent.activeSheetIndex;
        var activeSheet = true;
        if (args.range && args.range.indexOf('!') > -1) {
            sheetIdx = getSheetIndex(this.parent, args.range.substring(0, args.range.lastIndexOf('!')));
            activeSheet = sheetIdx === this.parent.activeSheetIndex;
        }
        var sheet = getSheet(this.parent, sheetIdx);
        var formatRange = args.range ? ((args.range.lastIndexOf('!') > -1) ?
            args.range.substring(args.range.lastIndexOf('!') + 1) : args.range) : sheet.selectedRange;
        var selectedRange = getSwapRange(getRangeIndexes(formatRange));
        args.curSym = getNumberDependable(this.parent.locale, defaultCurrencyCode);
        var fArgs;
        var cell;
        var prevFormat;
        var row;
        var isVisibleRow;
        for (var rowIdx = selectedRange[0]; rowIdx <= selectedRange[2]; rowIdx++) {
            row = getRow(sheet, rowIdx);
            isVisibleRow = activeSheet && !isHiddenRow(sheet, rowIdx);
            for (var colIdx = selectedRange[1]; colIdx <= selectedRange[3]; colIdx++) {
                cell = getCell(rowIdx, colIdx, sheet, false, true);
                prevFormat = cell.format;
                if (!isReadOnly(cell, sheet.columns[colIdx], row) &&
                    !updateCell(this.parent, sheet, { cell: { format: args.format }, rowIdx: rowIdx, colIdx: colIdx })) {
                    cell = getCell(rowIdx, colIdx, sheet);
                    if (!(cell.rowSpan < 0 || cell.colSpan < 0)) {
                        fArgs = { value: cell.value, format: cell.format, rowIndex: rowIdx, colIndex: colIdx, sheetIndex: sheetIdx,
                            cell: cell, refresh: activeSheet, curSymbol: args.curSym };
                        this.getFormattedCell(fArgs);
                        if (isVisibleRow) {
                            this.setCell(fArgs);
                            if (fArgs.td) {
                                this.parent.notify(refreshCellElement, fArgs);
                                if (cell.wrap && (!row || !row.customHeight) && prevFormat !== args.format) {
                                    this.parent.notify(wrapEvent, { range: [rowIdx, colIdx, rowIdx, colIdx], wrap: true, sheet: sheet, initial: true,
                                        td: fArgs.td, isOtherAction: true });
                                }
                            }
                            if (prevFormat && prevFormat !== args.format && prevFormat.includes('[') &&
                                getCustomColors().indexOf(getColorCode(args.format)) === -1) {
                                this.removeFormatColor(fArgs, { format: prevFormat, style: cell.style });
                            }
                        }
                    }
                    this.parent.setUsedRange(rowIdx, colIdx);
                }
            }
        }
        if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
            this.parent.notify(applyCF, { indexes: selectedRange, isAction: true, isEdit: true });
        }
        if (this.parent.chartColl && this.parent.chartColl.length) {
            this.parent.notify(refreshChart, { range: selectedRange });
        }
    };
    WorkbookNumberFormat.prototype.isDigitPlaceHolder = function (char) {
        return char === '#' || char === '0' || char === '?' || char === '.';
    };
    WorkbookNumberFormat.prototype.parseToLocalizedFormat = function (args) {
        if (args.decimalGroupSepsChanged && (args.format.includes('.') || args.format.includes(','))) {
            var formatChar = void 0;
            var endPos = void 0;
            var prevChar_1;
            var formatChars = args.format.split('');
            for (var idx = 0; idx < formatChars.length; idx++) {
                formatChar = formatChars[idx];
                if (formatChar === '"') {
                    endPos = args.format.indexOf('"', idx + 1);
                    if (endPos > -1) {
                        idx = endPos;
                    }
                }
                else if (formatChar === '_' || formatChar === '*' || formatChar === '\\') {
                    idx++;
                }
                else if (formatChar === '[') {
                    endPos = args.format.indexOf(']', idx + 1);
                    if (endPos > -1) {
                        idx = endPos;
                    }
                }
                else if (formatChar === ',') {
                    if (this.isDigitPlaceHolder(formatChars[idx - 1])) {
                        formatChars[idx] = this.localeObj.group;
                    }
                }
                else if (formatChar === '.') {
                    if (formatChars[idx - 1]) {
                        prevChar_1 = formatChars[idx - 1].toLowerCase();
                        if (!['d', 'm', 'y', 'h'].some(function (char) { return prevChar_1 === char; })) {
                            formatChars[idx] = this.localeObj.decimal;
                        }
                    }
                    else {
                        formatChars[idx] = this.localeObj.decimal;
                    }
                }
            }
            args.format = formatChars.join('');
        }
        if (args.curChanged && args.format.includes("\"" + args.curSym + "\"")) {
            args.format = args.format.split("\"" + args.curSym + "\"").join(args.curSym);
        }
    };
    WorkbookNumberFormat.prototype.updateLocalizedFormats = function (dependables, isFormatMapping) {
        var _this = this;
        var _a;
        numberFormatsCode = {
            currency: ['$#,##0.00', '$#,##0', '$#,##0_);($#,##0)', '$#,##0_);[Red]($#,##0)', '$#,##0.00_);($#,##0.00)',
                '$#,##0.00_);[Red]($#,##0.00)'],
            accounting: ['_($* #,##0_);_($* (#,##0);_($* "-"_);_(@_)', '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',
                '_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)', '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)'],
            time: dependables.timeFormats && dependables.timeFormats.medium === 'HH:mm:ss' ? 'HH:mm:ss' : 'h:mm:ss AM/PM'
        };
        var curSym = getNumberDependable(this.parent.locale, defaultCurrencyCode);
        var args = { curChanged: curSym !== '$', curSym: curSym,
            decimalGroupSepsChanged: this.localeObj.decimal !== '.' && this.localeObj.group !== ',' };
        if (args.curChanged) {
            var intl = new Internationalization(this.parent.locale);
            var formatStr = intl.getNumberPattern({ currency: '$', useGrouping: true, format: 'c0' }, true);
            if (formatStr && formatStr.endsWith('$')) {
                var curSpacing_1 = formatStr[formatStr.indexOf('$') - 1].trim().length ? '' : ' ';
                numberFormatsCode.currency.forEach(function (format, index) {
                    if (format.includes('$#,##0')) {
                        var decimalFormat = '';
                        var decimalPart = format.split('$#,##0.')[1];
                        if (decimalPart) {
                            var decimalCount = 0;
                            while (decimalPart[decimalCount] === '0') {
                                decimalFormat += '0';
                                decimalCount++;
                            }
                        }
                        if (decimalFormat) {
                            decimalFormat = "." + decimalFormat;
                        }
                        numberFormatsCode.currency[index] = format.split("$#,##0" + decimalFormat).join("#,##0" + decimalFormat + curSpacing_1 + "\"" + curSym + "\"");
                    }
                });
                numberFormatsCode.accounting.forEach(function (format, index) {
                    if (format.slice(0, format.indexOf('#')).includes('$')) {
                        var formatArr_1 = format.split(';');
                        var replaceIdx_1;
                        formatArr_1.forEach(function (formatStr, index) {
                            if (formatStr.includes('$')) {
                                formatStr = formatStr.replace('$', '');
                                if (formatStr.includes('0)')) {
                                    replaceIdx_1 = formatStr.indexOf('0)') + 2;
                                }
                                else {
                                    replaceIdx_1 = formatStr.lastIndexOf(formatStr.includes('0') ? '0' : (formatStr.includes('?') ? '?' :
                                        (formatStr.includes('"-"') ? '"' : '#'))) + 1;
                                }
                                if (replaceIdx_1 > 0) {
                                    formatArr_1[index] = formatStr.slice(0, replaceIdx_1) + curSpacing_1 + ("\"" + curSym + "\"") +
                                        formatStr.slice(replaceIdx_1);
                                }
                            }
                        });
                        numberFormatsCode.accounting[index] = formatArr_1.join(';');
                    }
                });
            }
            else {
                var updateLocalizedCurrency = function (format, index, formats) { return formats[index] = format.split('$').join("\"" + curSym + "\""); };
                numberFormatsCode.currency.forEach(updateLocalizedCurrency);
                numberFormatsCode.accounting.forEach(updateLocalizedCurrency);
            }
        }
        var customFormats = ['General', '0', '0.00', '#,##0', '#,##0.00', '#,##0_);(#,##0)', '#,##0_);[Red](#,##0)',
            '#,##0.00_);(#,##0.00)', '#,##0.00_);[Red](#,##0.00)', numberFormatsCode.currency[2], numberFormatsCode.currency[3],
            numberFormatsCode.currency[4], numberFormatsCode.currency[5], '0%', '0.00%', '0.00E+00', '##0.0E+0', '# ?/?', '# ??/??',
            'm/d/yyyy', 'd-mmm-yy', 'd-mmm', 'mmm-yy', 'h:mm AM/PM', 'h:mm:ss AM/PM', 'h:mm', 'h:mm:ss', 'm/d/yyyy h:mm', 'mm:ss',
            'mm:ss.0', '@', '[h]:mm:ss'].concat(numberFormatsCode.accounting);
        if (isFormatMapping) {
            (_a = this.customFormats).splice.apply(_a, [0, customFormats.length].concat(customFormats));
        }
        else {
            this.customFormats = customFormats;
            this.localizedFormats = [];
        }
        var defaultFormatsId = [0, 1, 2, 3, 4, 37, 38, 39, 40, 5, 6, 7, 8, 9, 10, 11, 48, 12, 13, 14, 15, 16, 17, 18, 19, 20,
            21, 22, 45, 47, 49, 46, 42, 41, 44, 43];
        var formatIdx;
        defaultFormatsId.forEach(function (id, index) {
            if (defaultFormats && defaultFormats.has(id)) {
                _this.customFormats[index] = defaultFormats.get(id);
                formatIdx = [5, 6, 7, 8].indexOf(id);
                if (formatIdx > -1) {
                    numberFormatsCode.currency[formatIdx + 2] = _this.customFormats[index];
                }
                else {
                    formatIdx = [42, 41, 44, 43].indexOf(id);
                    if (formatIdx > -1) {
                        numberFormatsCode.accounting[formatIdx] = _this.customFormats[index];
                    }
                }
            }
            args.format = _this.customFormats[index];
            _this.parseToLocalizedFormat(args);
            _this.localizedFormats[index] = args.format;
        });
        var _loop_1 = function (idx) {
            var cusFormatIdx = this_1.localizedFormats.findIndex(function (format, index) { return format === _this.localizedFormats[idx] && index < defaultFormatsId.length; });
            if (cusFormatIdx > -1) {
                this_1.localizedFormats.splice(idx, 1);
                this_1.customFormats.splice(idx, 1);
                idx--;
            }
            out_idx_1 = idx;
        };
        var this_1 = this, out_idx_1;
        for (var idx = defaultFormatsId.length; idx < this.localizedFormats.length; idx++) {
            _loop_1(idx);
            idx = out_idx_1;
        }
    };
    WorkbookNumberFormat.prototype.localizedFormatAction = function (args) {
        if (args.action === 'getLocalizedFormats') {
            args.defaultFormats = this.customFormats;
            args.localizedFormats = this.localizedFormats;
        }
        else if (args.action === 'mapNumberFormatId') {
            this.updateLocalizedFormats(IntlBase.getDependables(cldrData, this.parent.locale, null).dateObject, true);
        }
        else {
            args.curSym = getNumberDependable(this.parent.locale, defaultCurrencyCode);
            if (args.action === 'parseToDefaultFormat') {
                this.parseToDefaultFormat(args);
            }
            else {
                // addToCustomFormats action
                args.decimalGroupSepsChanged = this.localeObj.decimal !== '.' && this.localeObj.group !== ',';
                args.curChanged = args.curSym !== '$';
                if (!args.defaultFormat) {
                    args.defaultFormat = args.format;
                    this.parseToLocalizedFormat(args);
                }
                if (this.localizedFormats.indexOf(args.format) === -1) {
                    this.localizedFormats.push(args.format);
                    this.customFormats.push(args.defaultFormat);
                }
            }
        }
    };
    WorkbookNumberFormat.prototype.parseToDefaultFormat = function (args) {
        var _this = this;
        var decimalSepChanged = this.localeObj.decimal !== '.' && args.format.includes(this.localeObj.decimal);
        var groupSepChanged = this.localeObj.group !== ',' && args.format.includes(this.localeObj.group);
        var curSymChanged = args.curSym !== '$' && args.format.includes(args.curSym);
        if (decimalSepChanged || groupSepChanged || curSymChanged) {
            var endPos_1;
            var prevChar_2;
            var formatChar_1;
            var formatSection_1 = args.format.split(';');
            formatSection_1.forEach(function (format, index) {
                var formatChars = format.split('');
                for (var idx = 0; idx < formatChars.length; idx++) {
                    formatChar_1 = formatChars[idx];
                    if (formatChar_1 === '"') {
                        idx = format.indexOf('"', idx + 1);
                    }
                    else if (formatChar_1 === '_' || formatChar_1 === '*' || formatChar_1 === '\\') {
                        idx++;
                    }
                    else if (formatChar_1 === '[') {
                        endPos_1 = format.indexOf(']', idx + 1);
                        if (endPos_1 > -1) {
                            idx = endPos_1;
                        }
                    }
                    else if (decimalSepChanged && formatChar_1 === _this.localeObj.decimal) {
                        prevChar_2 = formatChars[idx - 1];
                        if (prevChar_2) {
                            prevChar_2 = prevChar_2.toLowerCase();
                            if (!['d', 'm', 'y', 'h'].some(function (char) { return prevChar_2 === char; })) {
                                formatChars[idx] = '.';
                            }
                        }
                        else {
                            formatChars[idx] = '.';
                        }
                    }
                    else if (groupSepChanged && formatChar_1 === _this.localeObj.group) {
                        if (_this.isDigitPlaceHolder(formatChars[idx - 1])) {
                            formatChars[idx] = ',';
                        }
                    }
                    else if (curSymChanged) {
                        if (formatChar_1 === args.curSym) {
                            formatChars[idx] = "\"" + args.curSym + "\"";
                        }
                        else if (args.curSym.startsWith(formatChar_1) &&
                            format.substring(idx, idx + args.curSym.length) === args.curSym) {
                            formatChars.splice(idx, args.curSym.length, "\"" + args.curSym + "\"");
                        }
                    }
                }
                formatSection_1[index] = formatChars.join('');
            });
            args.format = formatSection_1.join(';');
        }
    };
    /**
     * @hidden
     *
     * @param {Object} args - Specifies the args.
     * @returns {string} - to get formatted cell.
     */
    WorkbookNumberFormat.prototype.getFormattedCell = function (args) {
        var fResult = args.value === undefined || args.value === null ? '' : args.value;
        args.sheetIndex = args.sheetIndex === undefined ? this.parent.activeSheetIndex : args.sheetIndex;
        var sheet = getSheet(this.parent, args.sheetIndex);
        var cell = args.cell || getCell(args.rowIndex, args.colIndex, sheet, false, true);
        var rightAlign = false;
        var intl = new Internationalization();
        if (!args.curSymbol) {
            args.curSymbol = getNumberDependable(this.parent.locale, defaultCurrencyCode);
        }
        if ((!args.format || args.format === 'General') && !args.skipFormatCheck && (!cell.formula ||
            !cell.formula.toLowerCase().startsWith('=text('))) {
            args.type = args.format = 'General';
            if (!cell.formula || (cell.formula && cell.formula.indexOf('&-') === -1)) { // for 5&-3=>5-3.
                var dateEventArgs = { value: fResult, updatedVal: fResult, cell: cell, isEdit: args.isEdit,
                    intl: intl };
                this.checkDateFormat(dateEventArgs);
                if (dateEventArgs.isDate || dateEventArgs.isTime) {
                    rightAlign = true;
                    cell.value = args.value = dateEventArgs.updatedVal;
                    if (cell.format && cell.format !== 'General') {
                        args.format = cell.format;
                        args.type = getTypeFromFormat(args.format);
                    }
                    else {
                        cell.format = args.format = getFormatFromType(dateEventArgs.isDate ? 'ShortDate' : 'Time');
                    }
                }
            }
        }
        else {
            args.type = getTypeFromFormat(args.format);
            if (args.skipFormatCheck && !args.format && args.type === 'General') {
                args.format = 'General';
            }
        }
        if (cell.format && this.isCustomType(cell)) {
            args.type = 'Custom';
            var isTextFormat = cell.format.indexOf('@') > -1;
            if (fResult !== '' && !isTextFormat && this.isPercentageValue(fResult.toString(), args, cell)) {
                fResult = args.value.toString();
            }
            var isCustomText = void 0;
            var option = {};
            if (defaultFormats && isImported(this.parent)) {
                cell.format = args.format = this.getMatchingCustomFormat(cell.format);
            }
            var orgFormat = cell.format;
            cell.format = cell.format.split('\\').join('');
            var formats = cell.format.split(';');
            if (isCustomDateTime(formats[0], true, option, true)) {
                if (fResult !== '') {
                    args.result = this.processCustomDateTime(args, cell, option.type !== 'time', formats);
                    isCustomText = !args.formatApplied;
                }
                args.result = args.result || cell.value;
            }
            else if (formats.length > 1) {
                if (cell.format.indexOf('<') > -1 || cell.format.indexOf('>') > -1) {
                    args.result = this.processCustomConditions(cell, args);
                }
                else {
                    var numObj = checkIsNumberAndGetNumber(cell, this.parent.locale, this.localeObj.group, this.localeObj.decimal, args.curSymbol);
                    if (numObj.isNumber) {
                        cell.value = numObj.value;
                        this.processCustomAccounting(cell, args, formats, formats[0]);
                        isCustomText = false;
                    }
                    else {
                        args.result = this.processCustomText(cell, args, formats);
                        isCustomText = true;
                    }
                }
                cell.format = orgFormat;
            }
            else if (isTextFormat) {
                isCustomText = true;
                args.result = this.processCustomText(cell, args);
            }
            else {
                var numObj = checkIsNumberAndGetNumber({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal);
                if (numObj.isNumber) {
                    cell.value = args.value = numObj.value;
                    if (cell.format.includes('E+0')) {
                        if (args.format !== cell.format) {
                            args.format = cell.format;
                        }
                        this.checkAndSetColor(args);
                        var numberFormat = args.format.split('E')[0];
                        var formatArr = numberFormat.split('.');
                        if (this.localeObj.decimal !== '.' && formatArr.length === 1) {
                            formatArr = numberFormat.split(this.localeObj.decimal);
                        }
                        args.result = formatArr[0].length > 1 ? this.scientificHashFormat(args, formatArr) : this.scientificFormat(args);
                    }
                    else {
                        args.result = this.processCustomNumberFormat(cell, args);
                        isCustomText = !isNumber(cell.value);
                    }
                }
                else {
                    if (cell.format && cell.format.includes('[')) {
                        this.removeFormatColor(args, { format: cell.format, style: cell.style });
                    }
                    isCustomText = args.dataUpdate = true;
                }
            }
            if (args.dataUpdate) {
                args.formattedText = args.result || (isNullOrUndefined(args.value) ? '' : args.value.toString());
            }
            else {
                args.value = args.result;
                args.formattedText = isNullOrUndefined(args.value) ? '' : args.value.toString();
            }
            if (isCustomText) {
                args.isRightAlign = false;
            }
            else {
                args.isRightAlign = !isNullOrUndefined(args.value);
            }
        }
        else {
            var result = this.processFormats(args, fResult, rightAlign, cell, intl, sheet);
            args.formattedText = result.fResult || (args.value === undefined || args.value === null ? '' : args.value.toString());
            args.isRightAlign = result.rightAlign;
        }
        if (args.rowIndex !== undefined) {
            if (cell.format && args.formattedText && args.formattedText !== cell.value && cell.format !== 'General') {
                cell.formattedText = args.formattedText;
            }
            else if (cell.formattedText) {
                delete cell.formattedText;
            }
        }
        return args.formattedText;
    };
    WorkbookNumberFormat.prototype.isCustomType = function (cell) {
        var format = getTypeFromFormat(cell.format);
        return (format === 'General' && cell.format !== 'General') || (format === 'Time' && this.parent.isEdit);
    };
    WorkbookNumberFormat.prototype.processCustomFill = function (format, cell, args, formatText) {
        var repeatChar = format[format.indexOf('*') + 1];
        var codes = format.split('*' + repeatChar);
        if (args.rowIndex === undefined || args.dataUpdate) {
            formatText = formatText || this.processCustomNumberFormat({ format: codes.join(''), value: cell.value }, args);
        }
        else {
            var secText = void 0;
            if (codes[1]) {
                var cellVal = parseFloat(cell.value);
                if (cellVal < 0) {
                    secText = this.processCustomNumberFormat({ format: codes[1], value: Math.abs(cellVal).toString() }, args);
                    formatText = "-" + codes[0].split('\'').join('');
                }
                else {
                    secText = this.processCustomNumberFormat({ format: codes[1], value: cell.value }, args);
                    formatText = codes[0].split('\'').join('');
                }
                if (cellVal === 0) {
                    secText = secText.split('0').join('');
                }
            }
            else {
                formatText = formatText || this.processCustomNumberFormat({ format: codes[0], value: cell.value }, args);
            }
            args.isRowFill = true;
            this.setCell(args);
            this.parent.notify(rowFillHandler, { cell: cell, cellEle: args.td, rowIdx: args.rowIndex, colIdx: args.colIndex, beforeFillText: formatText,
                repeatChar: repeatChar, afterFillText: secText });
            formatText = this.parent.isPrintingProcessing ? formatText + secText : formatText;
        }
        return formatText;
    };
    WorkbookNumberFormat.prototype.processCustomDateTime = function (args, cell, isDate, formatSections) {
        var _this = this;
        if (this.localeObj.decimal !== '.' && cell.value && cell.value.toString().includes(this.localeObj.decimal)) {
            var cellVal = cell.value.replace(this.localeObj.decimal, '.');
            if (isNumber(cellVal)) {
                cell.value = args.value = cellVal;
            }
        }
        var isCustomDate;
        var checkCustomDate = function () {
            var cellVal = cell.value.toString();
            if (cellVal.includes(_this.localeObj.dateSeparator) || cellVal.indexOf('-') > 0 || cellVal.includes(_this.localeObj.timeSeparator)) {
                return true;
            }
            var formats = IntlBase.getDependables(cldrData, _this.parent.locale, null).dateObject;
            var months = formats.months['stand-alone'] && formats.months['stand-alone'].abbreviated;
            return months && !!Object.keys(months).find(function (key) { return cellVal.includes(months["" + key]); });
        };
        if (!isNumber(cell.value)) {
            isCustomDate = checkCustomDate();
            if (!isCustomDate) {
                return this.processCustomText(cell, args, formatSections);
            }
        }
        else if (formatSections.length > 1 && parseFloat(cell.value) <= 0) {
            args.formatApplied = this.processCustomAccounting(cell, args, formatSections);
            if (args.formatApplied) {
                return args.result;
            }
        }
        var type;
        var custFormat = formatSections[0];
        var intl = new Internationalization();
        var formatDateTime = function (checkDate) {
            var isValidDate;
            var dateArgs;
            if (isCustomDate) {
                var noOfDays = void 0;
                if (cell.format.includes('[h]')) {
                    var timeArr = cell.value.toString().split(':');
                    if (timeArr.length > 1 && Number(timeArr[0]) >= 24) {
                        noOfDays = Number(timeArr[0]) / 24;
                        timeArr[0] = '24';
                        cell.value = timeArr.join(':');
                    }
                }
                dateArgs = toDate(cell.value, new Internationalization(), _this.parent.locale, custFormat, cell);
                isValidDate = dateArgs.dateObj && dateArgs.dateObj.toString() !== 'Invalid Date';
                if (isValidDate) {
                    if (dateArgs.dateObj.getFullYear() < 1900) {
                        return '';
                    }
                    else {
                        var dateIntVal = dateToInt(dateArgs.dateObj, cell.value.toString().includes(':'), dateArgs.type === 'time');
                        if (noOfDays >= 1) {
                            dateIntVal += noOfDays;
                            dateArgs.dateObj = intToDate(dateIntVal);
                        }
                        cell.value = dateIntVal.toString();
                    }
                }
            }
            else {
                if (_this.checkAndProcessNegativeValue(args, cell.value)) {
                    args.formatApplied = true;
                    return args.formattedText;
                }
                dateArgs = { dateObj: intToDate(parseFloat(cell.value)) };
                isValidDate = dateArgs.dateObj && dateArgs.dateObj.toString() !== 'Invalid Date';
            }
            if (isValidDate) {
                if (checkDate && isDate) {
                    args.dateObj = dateArgs.dateObj;
                }
                args.formatApplied = true;
                var result = void 0;
                if (custFormat.startsWith('MM-dd-yyyy ')) { // While auto detect date time value, we will set this format only.
                    custFormat = custFormat.split(' ').splice(1).join(' ');
                    result = intl.formatDate(dateArgs.dateObj, { type: 'date', skeleton: 'yMd' }) + (custFormat ? ' ' +
                        intl.formatDate(dateArgs.dateObj, { type: type, format: custFormat }) : '');
                }
                else {
                    result = intl.formatDate(dateArgs.dateObj, { type: type, format: custFormat });
                    custFormat = custFormat.toLowerCase();
                    if (custFormat.startsWith('[h]')) {
                        var totalHours = (Number(cell.value.toString().split('.')[0]) * 24) + dateArgs.dateObj.getHours();
                        result = totalHours.toString() + result.slice(result.indexOf(']') + 1);
                    }
                    else if (custFormat.startsWith('[m')) {
                        var totalMins = (Number(cell.value.toString().split('.')[0]) * 1440) + (dateArgs.dateObj.getHours() * 60)
                            + dateArgs.dateObj.getMinutes();
                        result = totalMins.toString() + result.slice(result.indexOf(']') + 1);
                    }
                    else if (custFormat.startsWith('[s')) {
                        result = ((Number(cell.value.toString().split('.')[0]) * 86400) + (((dateArgs.dateObj.getHours() * 60) +
                            dateArgs.dateObj.getMinutes()) * 60) + dateArgs.dateObj.getSeconds()).toString();
                    }
                }
                if (isShortMeridian) {
                    return result.replace(_this.localeObj.am, 'A').replace(_this.localeObj.pm, 'P');
                }
                return result;
            }
            return '';
        };
        custFormat = custFormat.split('_(').join(' ').split('_)').join(' ');
        if (cell.format.indexOf('h') > -1) {
            custFormat = custFormat.split('h').join('H');
            type = 'time';
        }
        if (cell.format.indexOf('s') > -1) {
            type = 'time';
        }
        var isShortMeridian = cell.format.indexOf('A/P') > -1;
        if (cell.format.indexOf('AM/PM') > -1 || isShortMeridian) {
            custFormat = custFormat.split('H').join('h');
            custFormat = custFormat.split('A/P').join('AM/PM').split('AM/PM').join('a');
            type = 'time';
        }
        if (cell.format.indexOf('d') > -1) {
            type = 'date';
            // Split the format with ' ' for replacing d with E only for a day of the week in the MMM d, yyyy ddd format
            var formatArr = custFormat.split(' ');
            var dayMatchStr = void 0;
            var splitFormat = void 0;
            var part = void 0;
            var separator = void 0;
            for (var formatIdx = 0; formatIdx < formatArr.length; formatIdx++) {
                separator = formatArr[formatIdx].includes(this.localeObj.dateSeparator) ? this.localeObj.dateSeparator : '-';
                splitFormat = formatArr[formatIdx].split(separator);
                for (var index = 0; index < splitFormat.length; index++) {
                    part = splitFormat[index];
                    dayMatchStr = part.match(/d/g);
                    if (dayMatchStr && dayMatchStr.length > 2) {
                        splitFormat[index] = part.split('d').join('E');
                    }
                }
                formatArr[formatIdx] = splitFormat.join(separator);
            }
            custFormat = formatArr.join(' ');
        }
        if (cell.format.indexOf('m') > -1) {
            if (cell.format.indexOf('s') > -1 || cell.format.indexOf('h') > -1) {
                type = 'time';
                if (cell.format.includes(' ')) {
                    var formatArr = custFormat.split(' ');
                    if (formatArr[0].includes('d') || formatArr[0].includes('y')) {
                        formatArr[0] = formatArr[0].split('m').join('M');
                        custFormat = formatArr.join(' ');
                    }
                }
            }
            else {
                type = 'date';
                custFormat = custFormat.split('m').join('M');
                if (custFormat.includes('MMMMM')) {
                    var prevFormat = custFormat;
                    custFormat = 'MMMM';
                    var monthName = formatDateTime()[0];
                    custFormat = prevFormat.split('MMMMM').join('p');
                    return formatDateTime(args.checkDate).split('p').join(monthName);
                }
            }
        }
        return formatDateTime(args.checkDate);
    };
    WorkbookNumberFormat.prototype.processCustomConditions = function (cell, args) {
        if (isNumber(cell.value)) {
            var formatArr = cell.format.split(';');
            var val = Number(cell.value);
            var compareVal = void 0;
            var conditionNotMatch = void 0;
            var colorCode = void 0;
            for (var i = 0; i < formatArr.length; i++) {
                cell.format = formatArr[i];
                colorCode = getColorCode(cell.format);
                if (colorCode) {
                    cell.format = cell.format.split("[" + colorCode + "]").join('');
                }
                if (cell.format.includes('[')) {
                    compareVal = cell.format.split('[')[1].split(']')[0];
                    var ltEqualTo = compareVal.split('<=');
                    var gtEqualTo = compareVal.split('>=');
                    var lessThan = compareVal.split('<');
                    var greaterThan = compareVal.split('>');
                    if ((ltEqualTo.length === 2 && val <= Number(ltEqualTo[1])) ||
                        (gtEqualTo.length === 2 && val >= Number(gtEqualTo[1])) ||
                        (lessThan.length === 2 && val < Number(lessThan[1])) ||
                        (greaterThan.length === 2 && val > Number(greaterThan[1]))) {
                        cell.format = formatArr[i].split("[" + compareVal + "]").join('');
                        conditionNotMatch = false;
                        break;
                    }
                    conditionNotMatch = compareVal.split(/<=|>=|<|>/).length === 2;
                }
                else {
                    cell.format = formatArr[i];
                    conditionNotMatch = false;
                    break;
                }
            }
            if (conditionNotMatch) {
                this.removeFormatColor(args, { format: formatArr.join(''), style: cell.style });
                return this.processCustomFill('*#', cell, args, '#####');
            }
            return this.processCustomNumberFormat(cell, args);
        }
        else {
            return cell.value;
        }
    };
    WorkbookNumberFormat.prototype.processCustomAccounting = function (cell, args, formats, format) {
        var cellVal = parseFloat(cell.value);
        if (cellVal < 0) {
            if (!formats[1].includes('@')) {
                format = formats[1];
            }
        }
        else if (cellVal === 0 && formats[2] && !formats[2].includes('@')) {
            format = formats[2].includes(args.curSymbol + "0") ? formats[2].split('0').join('#') : formats[2];
        }
        if (format) {
            args.result = this.processCustomNumberFormat({
                format: cell.format, value: cellVal < 0 ? Math.abs(cellVal).toString() : cell.value, style: cell.style
            }, args, format);
            return true;
        }
        return false;
    };
    WorkbookNumberFormat.prototype.processCustomText = function (cell, args, formatSections) {
        var cellVal = cell.value || cell.value ? cell.value.toString() : '';
        var format;
        if (formatSections) {
            if (formatSections[3]) {
                format = formatSections[3];
            }
            else if (formatSections[1] && formatSections[1].includes('@')) {
                format = formatSections[1];
            }
            else {
                return cellVal;
            }
        }
        else {
            format = cell.format;
        }
        var result = this.processCustomNumberFormat({ format: format.split('@').join('#'), value: cellVal.split(cellVal).join('1') }, args);
        if (result) {
            result = result.split('1').join(cellVal);
            if (this.localeObj.decimal !== '.' && isNumber(result) && result.includes('.')) {
                result = result.replace('.', this.localeObj.decimal);
            }
        }
        return result;
    };
    WorkbookNumberFormat.prototype.thousandSeparator = function (count, value) {
        while (count) {
            value = value / 1000;
            count--;
        }
        return value;
    };
    WorkbookNumberFormat.prototype.getSeparatorCount = function (cell) {
        var count = 0;
        var codes = ['#', '0'];
        for (var i = 0; i < cell.format.length; i++) {
            if (cell.format[i] === '"' && cell.format[i - 1] !== '\\') {
                i = cell.format.indexOf('"', i + 1);
            }
            else if (cell.format[i] === ',' && !(codes.indexOf(cell.format[i + 1]) > -1)) {
                count++;
            }
        }
        return count;
    };
    WorkbookNumberFormat.prototype.processDigits = function (cell, customFormat) {
        customFormat = customFormat.split('?').join('0');
        var cellValue = cell.value.toString();
        cellValue = this.getFormattedNumber(customFormat, parseFloat(cellValue));
        if (cellValue && cellValue.includes(this.localeObj.decimal)) {
            var valArr = cellValue.split(this.localeObj.decimal);
            cellValue = valArr[0] + this.localeObj.decimal + valArr[1].split('0').join('  ');
        }
        return cellValue || cell.value;
    };
    WorkbookNumberFormat.prototype.processFormatWithSpace = function (format, cell, cellValue) {
        var space = ' ';
        var args = { cell: cell, char: space, width: 0 };
        this.parent.notify(getTextSpace, args);
        var spaceWidth = args.width;
        var count;
        var result = { format: format, formattedText: '' };
        for (var i = 0; i < format.length; i++) {
            if (format[i] === '_') {
                args.char = format[i + 1];
                this.parent.notify(getTextSpace, args);
                var textWidth = args.width;
                count = Math.round(textWidth / spaceWidth);
                format = format.replace(format[i] + format[i + 1], space.repeat(count));
            }
        }
        var lastSpaceCount = format.length - format.trim().length;
        if (lastSpaceCount > 0) {
            result.formattedText = this.getFormattedNumber(format.trim(), cellValue);
            if (format[0] === ' ') {
                var frontSpaceCount = 1;
                var idx = 1;
                while (format[idx] === ' ') {
                    frontSpaceCount++;
                    idx++;
                }
                lastSpaceCount -= frontSpaceCount;
                result.formattedText = space.repeat(frontSpaceCount) + result.formattedText;
            }
            result.formattedText += space.repeat(lastSpaceCount);
        }
        else {
            result.formattedText = this.getFormattedNumber(format, cellValue);
        }
        result.format = format;
        return result;
    };
    WorkbookNumberFormat.prototype.removeFormatColor = function (args, cell) {
        if (getCustomColors().indexOf(getColorCode(cell.format)) > -1) {
            args.color = cell.style && cell.style.color ? cell.style.color : '';
            this.applyColor(args);
        }
    };
    WorkbookNumberFormat.prototype.processCustomNumberFormat = function (cell, args, format) {
        if (!cell.format) {
            return '';
        }
        var formattedText = cell.value;
        var numArgs = checkIsNumberAndGetNumber(cell, this.parent.locale, this.localeObj.group, this.localeObj.decimal);
        if (numArgs.isNumber) {
            var isFormatted = void 0;
            var isZeroFormat = void 0;
            cell.value = numArgs.value;
            var cellValue = parseFloat(cell.value.toString());
            var customFormat = format || cell.format;
            if (cell.format.indexOf('[') > -1) {
                var colorCode = getColorCode(customFormat);
                if (colorCode) {
                    customFormat = customFormat.split("[" + colorCode + "]").join('');
                    args.color = colorCode.toLowerCase();
                    this.applyColor(args);
                }
                else {
                    this.removeFormatColor(args, cell);
                }
            }
            if (customFormat.indexOf('"') > -1 || customFormat.indexOf('\\') > -1) {
                customFormat = this.processText(customFormat);
                isZeroFormat = cellValue === 0 && !customFormat.includes('#') && !customFormat.includes('0');
                if (isZeroFormat) {
                    customFormat += '#';
                }
            }
            var separatorCount = this.getSeparatorCount(cell);
            if (separatorCount) {
                isFormatted = true;
                var result = this.thousandSeparator(separatorCount, cellValue);
                if (customFormat.indexOf('.') === -1) {
                    result = Math.round(result);
                }
                formattedText = this.getFormattedNumber(customFormat.split(',').join(''), result);
                if (result === 0) {
                    formattedText = formattedText.replace('0', '');
                }
            }
            if (customFormat.indexOf('?') > -1) {
                isFormatted = true;
                formattedText = this.processDigits(cell, customFormat);
                customFormat = customFormat.split('?').join('');
            }
            if (customFormat.indexOf('_') > -1) {
                isFormatted = true;
                var result = this.processFormatWithSpace(customFormat, cell, cellValue);
                customFormat = result.format;
                formattedText = result.formattedText;
            }
            if (formattedText && customFormat.indexOf('?') > -1) {
                formattedText = formattedText.replace('?', ' ');
            }
            if (customFormat.indexOf('*') > -1) {
                isFormatted = true;
                formattedText = this.processCustomFill(customFormat, cell, args);
            }
            if (customFormat === 'General') {
                isFormatted = true;
                formattedText = cellValue.toString();
            }
            if (!isFormatted) {
                formattedText = this.getFormattedNumber(customFormat, cellValue);
            }
            if (isZeroFormat && formattedText) {
                formattedText = formattedText.replace('0', '');
            }
            // Need to remove this line once this case is handled by core team.
            if (customFormat[0] === '#' && cellValue >= 0 && cellValue < 1) {
                var formatArr = customFormat.split('#').join('').split('.');
                if (!formatArr[0].includes('0')) {
                    if (cellValue === 0 && customFormat.includes('.') && (!formatArr[1] || !formatArr[1].includes('0'))) {
                        formattedText = this.getFormattedNumber(customFormat, 0.1);
                        formattedText = formattedText.replace('1', '');
                    }
                    var textArr = formattedText.split(this.localeObj.decimal);
                    textArr[0] = textArr[0].toString().replace(/^0+/, '');
                    formattedText = textArr.join(this.localeObj.decimal);
                }
            }
            if (formattedText === '-0') { // Need to remove this line once this case is handled by core team.
                formattedText = '0';
            }
        }
        return formattedText;
    };
    WorkbookNumberFormat.prototype.processText = function (format) {
        var custFormat = format;
        if (custFormat.indexOf('"') > -1) {
            custFormat = custFormat.split('"').join('\'');
        }
        else if (custFormat.indexOf('\\') > -1) {
            custFormat = custFormat.split('\\').join('');
        }
        return custFormat;
    };
    WorkbookNumberFormat.prototype.processFormats = function (args, fResult, isRightAlign, cell, intl, sheet) {
        var options;
        if (this.parent.isEdit && (args.type === 'Scientific' && !isNumber(args.value))) {
            args.type = 'General';
        }
        if (fResult !== '') {
            var numArgs = void 0;
            if (args.type !== 'General' && args.type !== 'Text' && this.isPercentageValue(fResult.toString(), args, cell)) {
                fResult = args.value.toString();
            }
            switch (args.type) {
                case 'General':
                    options = { args: args, fResult: fResult, intl: intl, isRightAlign: isRightAlign,
                        cell: cell, rowIdx: Number(args.rowIndex), colIdx: Number(args.colIndex), sheet: sheet };
                    if (!(options.fResult.toString().startsWith('\n') || options.fResult.toString().endsWith('\n '))) {
                        this.autoDetectGeneralFormat(options);
                    }
                    fResult = options.fResult;
                    isRightAlign = options.isRightAlign;
                    break;
                case 'Number':
                    numArgs = checkIsNumberAndGetNumber({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal, args.curSymbol, true, true);
                    if (numArgs.isNumber) {
                        cell.value = args.value = numArgs.value;
                        fResult = this.applyNumberFormat(args, intl);
                        isRightAlign = true;
                    }
                    break;
                case 'Currency':
                    numArgs = checkIsNumberAndGetNumber({ value: fResult, format: args.format }, this.parent.locale, this.localeObj.group, this.localeObj.decimal, args.curSymbol);
                    if (numArgs.isNumber) {
                        cell.value = args.value = numArgs.value;
                        fResult = this.currencyFormat(args, intl, cell);
                        isRightAlign = true;
                    }
                    break;
                case 'Percentage':
                    numArgs = checkIsNumberAndGetNumber({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal, args.curSymbol, true, true);
                    if (numArgs.isNumber) {
                        cell.value = args.value = numArgs.value;
                        fResult = this.percentageFormat(args, intl);
                        isRightAlign = true;
                    }
                    break;
                case 'Accounting':
                    fResult = this.accountingFormat(args, fResult, intl, cell);
                    isRightAlign = args.formatApplied;
                    break;
                case 'ShortDate':
                    fResult = this.checkAndProcessNegativeValue(args, args.value) ? args.formattedText : this.shortDateFormat(args, intl, cell);
                    isRightAlign = !!fResult;
                    break;
                case 'LongDate':
                    fResult = this.checkAndProcessNegativeValue(args, args.value) ? args.formattedText : this.longDateFormat(args, intl);
                    isRightAlign = !!fResult;
                    break;
                case 'Time':
                    fResult = this.checkAndProcessNegativeValue(args, args.value) ? args.formattedText : this.timeFormat(args, intl, cell);
                    isRightAlign = !!fResult;
                    break;
                case 'Fraction':
                    numArgs = checkIsNumberAndGetNumber({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal, null, true);
                    if (numArgs.isNumber) {
                        cell.value = args.value = numArgs.value;
                        fResult = this.fractionFormat(args);
                        isRightAlign = true;
                    }
                    break;
                case 'Scientific':
                    numArgs = checkIsNumberAndGetNumber({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal);
                    if (numArgs.isNumber) {
                        cell.value = args.value = numArgs.value;
                        fResult = this.scientificFormat(args);
                        isRightAlign = true;
                    }
                    break;
                case 'Text':
                    if (this.localeObj.decimal !== '.' && isNumber(fResult) && fResult.toString().includes('.')) {
                        fResult = fResult.toString().replace('.', this.localeObj.decimal);
                    }
                    isRightAlign = false;
                    break;
            }
        }
        return { fResult: fResult, rightAlign: isRightAlign };
    };
    WorkbookNumberFormat.prototype.autoDetectGeneralFormat = function (options) {
        var val = options.fResult;
        var prevVal;
        var addressFormula = options.args.cell && options.args.cell.formula && options.args.cell.formula.indexOf('ADDRESS(') > 0;
        var isDollarFormula = options.args.cell && options.args.cell.formula && options.args.cell.formula.indexOf('DOLLAR(') > 0;
        var isTextFormula = options.args.cell && options.args.cell.formula && options.args.cell.formula.indexOf('TEXT(') > 0;
        if (isDollarFormula && options.fResult && options.fResult.toString().includes(options.args.curSymbol) || isTextFormula) {
            return;
        }
        if (options.fResult && this.localeObj.decimal !== '.') {
            var cellVal = options.fResult.toString();
            prevVal = cellVal;
            if (cellVal.includes(this.localeObj.decimal)) {
                cellVal = cellVal.replace(this.localeObj.decimal, '.');
                if (isNumber(cellVal)) {
                    if (cellVal.includes('E')) {
                        options.fResult = cellVal;
                    }
                    else {
                        options.fResult = options.args.value = cellVal = Number(cellVal).toString();
                        setCell(options.rowIdx, options.colIdx, options.sheet, { value: cellVal }, true);
                    }
                    prevVal = cellVal.replace('.', this.localeObj.decimal);
                }
            }
        }
        if (isNumber(options.fResult)) {
            var cellVal = Number(options.fResult).toString();
            if (options.fResult.toString().includes('E')) {
                options.args.format = getFormatFromType('Scientific');
                setCell(options.rowIdx, options.colIdx, options.sheet, { value: cellVal, format: options.args.format }, true);
                options.args.value = cellVal;
                options.fResult = this.scientificFormat(options.args);
            }
            else if (options.args.format) {
                if (options.args.format.indexOf('%') > -1) {
                    options.fResult = this.percentageFormat(options.args, options.intl);
                }
                else if (options.args.format.indexOf(options.args.curSymbol) > -1) {
                    options.fResult = this.currencyFormat(options.args, options.intl, options.args.cell);
                }
                else {
                    options.fResult = this.applyNumberFormat(options.args, options.intl);
                }
            }
            if (options.args.format === 'General') {
                if (options.args.cell && options.args.cell.formula && cellVal.includes('.') && cellVal.length > 11) {
                    var decIndex = cellVal.indexOf('.') + 1;
                    prevVal = null;
                    if (options.args.cell.formula.includes('RANDBETWEEN')) {
                        options.fResult = cellVal = decIndex < 7 ? cellVal : (parseFloat(cellVal)).toFixed(0);
                    }
                }
                options.cellVal = cellVal;
                options.prevVal = prevVal;
                this.parseDecimalNumber(options);
                if (isNullOrUndefined(options.fResult) && !isNullOrUndefined(options.cellVal)) {
                    options.fResult = options.cellVal;
                }
            }
            options.isRightAlign = true;
        }
        if (options.fResult) {
            this.updateAutoDetectNumberFormat(options);
        }
        if (addressFormula) {
            options.isRightAlign = false;
            options.fResult = val;
        }
    };
    WorkbookNumberFormat.prototype.parseDecimalNumber = function (options) {
        var cellValArr = options.cellVal.split('.');
        if (cellValArr[0].length > 11) {
            options.cellVal = (Math.abs(Number(cellValArr[0])).toString()).substring(0, 6).replace(/0+$/, '');
            var digitLen = options.cellVal.length - 1;
            if (digitLen > -1) {
                options.fResult = this.scientificFormat(options.args, digitLen > 5 ? 5 : digitLen);
            }
        }
        else if (cellValArr[1]) {
            if (options.cellVal.length > 11) {
                // Subtract with 10 to neglect the decimal point.
                var rightDigitLen = 10 - (cellValArr[0].length - (Math.sign(Number(options.cellVal)) < 0 ? 1 : 0));
                options.fResult = Number(Number(options.cellVal).toFixed(rightDigitLen > 0 ? rightDigitLen : 0)).toString();
            }
            else if (options.cellVal.includes('e-')) {
                var expVal = options.cellVal.split('e-');
                var digitLen = Number(expVal[1]) + (expVal[0].includes('.') ? expVal[0].split('.')[1].length : 0);
                expVal[0] = expVal[0].replace('.', this.localeObj.decimal);
                if (expVal[1].length === 1) {
                    expVal[1] = '0' + expVal[1];
                }
                if (!options.args.updateValue) {
                    setCell(options.rowIdx, options.colIdx, options.sheet, { value: Number(options.cellVal).toFixed(digitLen) }, true);
                }
                options.fResult = expVal.join('E-');
            }
            else if (options.prevVal) {
                options.fResult = options.prevVal;
            }
            else if (options.args.updateValue && this.localeObj.decimal !== '.') {
                options.fResult = options.cellVal.replace('.', this.localeObj.decimal);
            }
        }
    };
    WorkbookNumberFormat.prototype.updateAutoDetectNumberFormat = function (options) {
        var res = options.fResult.toString();
        var cell = options.args.cell || options.cell;
        if (this.isPercentageValue(res, options.args, cell)) {
            cell.format = res.includes(this.localeObj.decimal) ? getFormatFromType('Percentage') : '0%';
            if (!options.args.updateValue) {
                options.args.format = cell.format;
                options.fResult = this.percentageFormat(options.args, options.intl);
                options.isRightAlign = true;
            }
        }
        else {
            var fractionArr = res ? res.toString().split('/') : [];
            var isFraction = (this.parent.isEdit && getTypeFromFormat(cell.format) === 'Scientific' && fractionArr.length === 2 && isNumber(fractionArr[0]) && isNumber(fractionArr[1]));
            if (res.includes(' ') || isFraction) {
                var valArr = isFraction ? fractionArr : res.split(' ');
                if (isFraction || valArr[1].includes('/') && isNumber(valArr[0]) && Number(valArr[0]) % 1 === 0) {
                    var fracArr = isFraction ? fractionArr : valArr[1].split('/');
                    if (isNumber(fracArr[0]) && Number(fracArr[0]) % 1 === 0 && isNumber(fracArr[1]) && Number(fracArr[1]) % 1 === 0) {
                        cell.format = "# " + (fracArr[0].length > 1 || fracArr[1].length > 1 ? '??/??' : '?/?');
                        cell.value = isFraction ? (Number(fracArr[0]) / Number(fracArr[1])).toString() :
                            (Number(valArr[0]) + (Number(fracArr[0]) / Number(fracArr[1]))).toString();
                        if (!options.args.updateValue) {
                            options.args.value = cell.value;
                            options.args.format = cell.format;
                            options.fResult = this.fractionFormat(options.args);
                            options.isRightAlign = true;
                        }
                        return;
                    }
                }
            }
            var format = '';
            if (res.includes(options.args.curSymbol)) { // Auto detect 1000 separator format with currency symbol
                format = res.includes(this.localeObj.decimal) ? numberFormatsCode.currency[0] : numberFormatsCode.currency[1];
                res = res.replace(options.args.curSymbol, '');
            }
            var isEdit = this.localeObj.decimal === '.' || (options.args.isEdit && !cell.formula);
            if (isEdit && res.includes(this.localeObj.group) &&
                parseThousandSeparator(res, this.parent.locale, this.localeObj.group, this.localeObj.decimal)) {
                res = res.split(this.localeObj.group).join('');
                if (!format) { // Auto detect 1000 separator format
                    format = (res.includes(this.localeObj.decimal) ? '#,##0.00' : '#,##0');
                }
            }
            if (format) {
                res = res.replace(this.localeObj.decimal, '.');
                if (isNumber(res)) {
                    options.args.value = Number(res).toString();
                    if (options.args.updateValue) {
                        options.args.cell.value = options.args.value;
                        options.args.cell.format = format;
                    }
                    else {
                        options.args.format = format;
                        setCell(options.rowIdx, options.colIdx, options.sheet, { value: options.args.value, format: format }, true);
                        if (format.includes('"')) {
                            format = this.processText(format);
                        }
                        options.fResult = this.getFormattedNumber(format, Number(options.args.value));
                        options.isRightAlign = true;
                    }
                }
            }
            else if (this.localeObj.decimal !== '.' && options.args.format === 'General' && isNumber(res) && res.includes('.')) {
                options.fResult = Number(res).toString().replace('.', this.localeObj.decimal);
            }
        }
    };
    WorkbookNumberFormat.prototype.isPercentageValue = function (value, args, cell) {
        if (value.includes('%')) {
            var valArr = value.split('%');
            if (valArr[0] !== '' && valArr[1].trim() === '') {
                var numArgs = checkIsNumberAndGetNumber({ value: valArr[0] }, this.parent.locale, this.localeObj.group, this.localeObj.decimal);
                if (numArgs.isNumber) {
                    args.value = Number(numArgs.value) / 100;
                    cell.value = args.value.toString();
                    return true;
                }
            }
        }
        return false;
    };
    WorkbookNumberFormat.prototype.findSuffix = function (zeros, resultSuffix) {
        var len = zeros.length;
        var suffixLen = len - resultSuffix.length;
        return zeros.substr(0, suffixLen < 0 ? 0 : suffixLen) + resultSuffix;
    };
    WorkbookNumberFormat.prototype.applyNumberFormat = function (args, intl) {
        args.format = this.isCustomFormat(args.format);
        var formatArr = args.format.split(';');
        if (Number(args.value) > 0) {
            args.format = formatArr[0];
        }
        else if (Number(args.value) === 0) {
            args.format = formatArr[2] ? formatArr[2] : formatArr[0];
            if (args.format.indexOf('"') > -1 && args.format.indexOf('#') === -1) {
                args.format = args.format.split('_').join(' ').split('*').join(' ').split('?').join(' ').split('"').join('');
                return args.format;
            }
        }
        else if (Number(args.value) < 0) {
            args.format = !isNullOrUndefined(formatArr[1]) ? formatArr[1].split('*').join(' ') : formatArr[0];
            if (args.format.indexOf('-') > -1) {
                args.value = args.value.toString().split('-').join('');
            }
        }
        else {
            args.format = formatArr[3] ? formatArr[3] : formatArr[0];
            args.format = args.format.split('_').join(' ').split('*').join(' ').split('?').join(' ');
            if (args.format.indexOf('@') > -1) {
                return args.format.split('@').join(args.value.toString());
            }
        }
        args.format = args.format.split('_').join(' ').split('*').join(' ').split('"').join('');
        if (args.format.indexOf('?') > -1 && args.format.indexOf(this.localeObj.decimal) > -1) {
            var formatDecimalLen = args.format.split(this.localeObj.decimal)[1].length;
            var replaceString = '';
            if (Number(args.value) % 1) {
                var valueDecimalLen = args.value.toString().split('.')[1].length;
                if (formatDecimalLen > valueDecimalLen) {
                    replaceString = ' ';
                }
                else {
                    replaceString = '0';
                }
            }
            args.format = args.format.split('?').join(replaceString);
        }
        else {
            args.format = args.format.split('?').join(' ');
        }
        if (Number(args.value) < 0 && args.cell && args.cell.format) {
            args.format = args.cell.format;
        }
        return intl.formatNumber(Number(args.value), { format: args.format });
    };
    WorkbookNumberFormat.prototype.isCustomFormat = function (format) {
        if (format === '_-* #,##0.00_-;-* #,##0.00_-;_-* "-"_-;_-@_-' || format === '_-* #,##0_-;-* #,##0_-;_-* "-"_-;_-@_-') {
            format = '';
        }
        format = format === '' ? getFormatFromType('Number') : format;
        format = format.toString().split('_)').join(' ').split('_(').join(' ').split('[Red]').join('');
        return format;
    };
    WorkbookNumberFormat.prototype.currencyFormat = function (args, intl, cell) {
        args.format = args.format || getFormatFromType('Currency');
        args.format = args.format.split('_(').join(' ').split('_)').join(' ');
        var formatArr = args.format.split(';');
        var colorCode = getColorCode(args.format);
        var cellVal = Number(args.value);
        if (cellVal >= 0 || isNullOrUndefined(formatArr[1])) {
            if (colorCode) {
                args.color = cell.style && cell.style.color ? cell.style.color : '';
                this.applyColor(args);
            }
            args.format = formatArr[0];
        }
        else {
            cellVal = Math.abs(cellVal);
            args.format = formatArr[1].split("[" + colorCode + "]").join('').split('*').join(' ');
            if (colorCode) {
                args.color = colorCode.toLowerCase();
                this.applyColor(args);
            }
        }
        args.format = this.getFormatForOtherCurrency(args.format);
        if (args.format.includes('"')) {
            args.format = this.processText(args.format);
        }
        return intl.formatNumber(cellVal, { format: args.format, currency: defaultCurrencyCode });
    };
    WorkbookNumberFormat.prototype.applyColor = function (args) {
        if (args.refresh) {
            this.setCell(args);
            if (args.td && args.td.style.color !== args.color) {
                this.parent.notify(applyCellFormat, { style: { color: args.color }, rowIdx: args.rowIndex, colIdx: args.colIndex,
                    td: args.td });
            }
        }
    };
    WorkbookNumberFormat.prototype.setCell = function (args) {
        if (!args.td) {
            var mergeArgs = {
                sheet: getSheet(this.parent, args.sheetIndex),
                cell: args.cell, rowIdx: args.rowIndex, colIdx: args.colIndex
            };
            if (args.cell.rowSpan > 1 || args.cell.colSpan > 1) {
                setVisibleMergeIndex(mergeArgs);
            }
            args.td = this.parent.getCell(mergeArgs.rowIdx, mergeArgs.colIdx);
        }
    };
    WorkbookNumberFormat.prototype.percentageFormat = function (args, intl) {
        args.format = args.format === '' ? getFormatFromType('Percentage') : args.format;
        return intl.formatNumber(Number(args.value), {
            format: args.format
        });
    };
    WorkbookNumberFormat.prototype.accountingFormat = function (args, fResult, intl, cell) {
        args.format = args.format || getFormatFromType('Accounting');
        args.format = args.format.split('_(').join(' ').split('_)').join(' ').split('[Red]').join('').split('_').join('');
        var formatArr = args.format.split(';');
        var numArgs = checkIsNumberAndGetNumber({ value: fResult }, this.parent.locale, this.localeObj.group, this.localeObj.decimal, args.curSymbol, false, true);
        if (numArgs.isNumber) {
            cell.value = args.value = numArgs.value;
            var cellVal = Number(args.value);
            if (cellVal >= 0) {
                args.format = cellVal === 0 && formatArr[2] ? formatArr[2] : formatArr[0];
            }
            else {
                args.format = formatArr[1].split('*').join(' ');
                cellVal = Math.abs(cellVal);
            }
            if (args.format.includes(args.curSymbol)) {
                if (args.format.includes('"')) {
                    args.format = this.processText(args.format);
                }
            }
            args.format = this.getFormatForOtherCurrency(args.format);
            args.formatApplied = true;
            if (cellVal === 0) {
                args.format = this.processText(args.format.split('*').join(' ').split('?').join(' '));
                if (!args.format.includes('#') && !args.format.includes('0')) {
                    args.format += '#';
                    var formattedText = intl.formatNumber(cellVal, { format: args.format, currency: defaultCurrencyCode });
                    if (formattedText.includes('0')) {
                        formattedText = formattedText.replace('0', '');
                    }
                    return args.dataUpdate ? formattedText.split(' ').join('') : formattedText;
                }
                var result = intl.formatNumber(cellVal, { format: args.format, currency: defaultCurrencyCode });
                return args.dataUpdate ? result.split(' ').join('') : result;
            }
            else {
                var result = intl.formatNumber(cellVal, { format: args.format, currency: defaultCurrencyCode });
                return args.dataUpdate ? result.split(' ').join('') : result;
            }
        }
        else if (formatArr[3]) {
            return this.processCustomText(cell, args, formatArr);
        }
        return fResult;
    };
    WorkbookNumberFormat.prototype.getFormatForOtherCurrency = function (format) {
        if (format.indexOf('[$') > -1) {
            var symbol = format.split(']')[0].split('[$')[1].split('-')[0];
            if (format.indexOf('0') > format.indexOf('[$')) {
                format = symbol + format.slice(format.indexOf(']') + 1, format.length);
            }
            else {
                format = format.slice(0, format.indexOf('[$')) + symbol;
            }
        }
        return format;
    };
    WorkbookNumberFormat.prototype.checkAndProcessNegativeValue = function (args, cellValue) {
        if (cellValue && isNumber(cellValue) && Number(cellValue) < 0) {
            if (args.rowIndex === undefined || args.dataUpdate) {
                args.formattedText = '#'.repeat(args.dataUpdate ? 7 : 10);
                return true;
            }
            args.isRowFill = true;
            this.setCell(args);
            var eventArgs = { cell: args.cell, cellEle: args.td, rowIdx: args.rowIndex, colIdx: args.colIndex,
                repeatChar: '#' };
            this.parent.notify(rowFillHandler, eventArgs);
            args.formattedText = eventArgs.formattedText;
            return true;
        }
        return false;
    };
    WorkbookNumberFormat.prototype.shortDateFormat = function (args, intl, cell) {
        var dateObj;
        if (defaultFormats && isImported(this.parent) && cell && cell.format === 'm/d/yyyy' && defaultFormats.has(14)) {
            cell.format = args.format = defaultFormats.get(14);
        }
        var format;
        if (args.format === '' || args.format === 'General' || args.format === 'mm-dd-yyyy' || args.format === 'm/d/yyyy') {
            format = 'MM-dd-yyyy';
            dateObj = { type: 'date', skeleton: 'yMd' };
        }
        else {
            format = args.format;
            if (args.format === getFormatFromType('ShortDate')) {
                dateObj = { type: 'date', skeleton: 'yMd' };
            }
            else {
                dateObj = { type: 'date', format: args.format };
            }
        }
        var shortDate;
        args.value = args.value.toString();
        var checkForDateFormat = this.checkForDateFormat(args, cell);
        if (args.value && cell && (!isNumber(args.value) || checkForDateFormat)) {
            var dateArgs = {
                value: args.value, updatedVal: args.value, cell: cell, isEdit: args.isEdit, intl: intl,
                skipCellFormat: true, format: format
            };
            this.checkDateFormat(dateArgs);
            if (dateArgs.isDate || dateArgs.isTime) {
                cell.value = args.value = dateArgs.updatedVal;
                shortDate = dateArgs.dateObj;
            }
            else if (checkForDateFormat) {
                shortDate = intToDate(args.value);
            }
            else {
                return '';
            }
        }
        else {
            shortDate = intToDate(args.value);
        }
        if (!shortDate || shortDate.toString() === 'Invalid Date') {
            return '';
        }
        else if (shortDate.getFullYear() < 1900 || shortDate.getFullYear() > 9999) {
            return isNumber(args.value) ? args.value.toString() : '';
        }
        if (args.checkDate) {
            args.dateObj = shortDate;
        }
        return intl.formatDate(shortDate, dateObj);
    };
    WorkbookNumberFormat.prototype.longDateFormat = function (args, intl) {
        args.value = args.value.toString();
        var longDate;
        var checkForDateFormat = this.checkForDateFormat(args, args.cell);
        if ((args.value.includes(this.localeObj.dateSeparator) || args.value.indexOf('-') > 0) && (!isNumber(args.value)
            || checkForDateFormat)) {
            if (checkForDateFormat) {
                var dateEventArgs = {
                    value: args.value, updatedVal: args.value, cell: args.cell, isEdit: args.isEdit,
                    intl: intl
                };
                this.checkDateFormat(dateEventArgs);
                if (dateEventArgs.isDate || dateEventArgs.isTime) {
                    longDate = dateEventArgs.dateObj;
                    args.cell.value = args.value = dateToInt(longDate).toString();
                }
                else {
                    longDate = intToDate(args.value);
                }
            }
            else {
                longDate = toDate(args.value, intl, this.parent.locale, '', args.cell).dateObj;
                if (longDate && longDate.toString() !== 'Invalid Date' && longDate.getFullYear() >= 1900) {
                    args.cell.value = args.value = dateToInt(longDate).toString();
                }
                else {
                    return isNumber(args.value) ? args.value : '';
                }
            }
        }
        else {
            longDate = intToDate(args.value);
        }
        if (!longDate || longDate.toString() === 'Invalid Date') {
            return '';
        }
        else if (longDate.getFullYear() < 1900 || longDate.getFullYear() > 9999) {
            return isNumber(args.value) ? args.value.toString() : '';
        }
        if (args.checkDate) {
            args.dateObj = longDate;
        }
        return intl.formatDate(longDate, { type: 'date', skeleton: 'full' });
    };
    WorkbookNumberFormat.prototype.checkForDateFormat = function (args, cell) {
        var checkForDateFormat;
        var value = args.value;
        if (this.localeObj.decimal === '.' || (args.isEdit && !cell.formula)) {
            if (value.includes(this.localeObj.group) &&
                parseThousandSeparator(value, this.parent.locale, this.localeObj.group, this.localeObj.decimal)) {
                value = value.replace(this.localeObj.group, '');
                if (this.localeObj.decimal !== '.' && value.includes(this.localeObj.decimal)) {
                    value = value.replace(this.localeObj.decimal, '.');
                }
                if (isNumber(value) && cell) {
                    cell.value = args.value = value;
                }
                return false;
            }
            else {
                checkForDateFormat = this.localeObj.dateSeparator === '.' && value.includes('.');
            }
            if (this.localeObj.decimal !== '.' && !isNumber(value) && value.includes(this.localeObj.decimal)) {
                value = value.replace(this.localeObj.decimal, '.');
                if (isNumber(value) && cell) {
                    cell.value = args.value = value;
                }
            }
        }
        return checkForDateFormat;
    };
    WorkbookNumberFormat.prototype.timeFormat = function (args, intl, cell) {
        if (isNullOrUndefined(args.value)) {
            return '';
        }
        var defaultCode = getFormatFromType('Time');
        var code;
        if (args.format === '' || args.format === 'General') {
            code = defaultCode;
        }
        if (args.format === 'h:mm:ss AM/PM') {
            code = 'h:mm:ss a';
        }
        else {
            code = args.format;
        }
        var cellVal = args.value.toString();
        if (!isNumber(cellVal) && cell) {
            var timeArgs = { value: cellVal, updatedVal: cellVal, cell: cell, isEdit: args.isEdit, intl: intl,
                skipCellFormat: true };
            this.checkDateFormat(timeArgs);
            if (timeArgs.isDate || timeArgs.isTime) {
                cell.value = cellVal = timeArgs.updatedVal;
            }
            else {
                return '';
            }
        }
        var value = cellVal.split('.');
        if (!isNullOrUndefined(value[1])) {
            cellVal = parseFloat((value[0] + 1) + '.' + value[1]) || cellVal;
        }
        return intl.formatDate(intToDate(cellVal), { type: 'time', skeleton: 'medium', format: code });
    };
    WorkbookNumberFormat.prototype.scientificHashFormat = function (args, fArr) {
        var fractionCount = this.findDecimalPlaces(args.format);
        var wholeCount = (fArr[0].split('0').length - 1) + (fArr[0].split('#').length - 1);
        var formattedVal = Number(args.value).toExponential(fractionCount + wholeCount);
        var expoSeparator;
        if (formattedVal.includes('e+')) {
            expoSeparator = 'e+';
        }
        else if (formattedVal.includes('e-')) {
            expoSeparator = 'e-';
        }
        else {
            return formattedVal;
        }
        var exponentArr = formattedVal.split(expoSeparator);
        var decimalArr = exponentArr[0].split('.');
        var exponent = Number(exponentArr[1]);
        var fractionDiff;
        if (expoSeparator === 'e-') {
            var expoVal = exponent + Math.abs(exponent - (wholeCount * (exponent > wholeCount ? 2 : 1)));
            fractionDiff = expoVal - exponent;
            exponentArr[1] = expoVal.toString();
        }
        else {
            fractionDiff = exponent % wholeCount;
            exponentArr[1] = (exponent - fractionDiff).toString();
        }
        if (fractionDiff > 0) {
            decimalArr[0] += decimalArr[1].substring(0, fractionDiff);
            decimalArr[1] = decimalArr[1].slice(fractionDiff);
            exponentArr[0] = decimalArr.join('.');
        }
        var base = Number('1' + '0'.repeat(fractionCount));
        return this.getFormattedNumber(fArr.join('.'), Number((Math.round(Number(exponentArr[0]) * base) / base).toFixed(fractionCount))) +
            expoSeparator.toUpperCase() + this.findSuffix(args.format.split('+')[1], exponentArr[1]);
    };
    WorkbookNumberFormat.prototype.scientificFormat = function (args, prefix) {
        if (!args.format) {
            args.format = getFormatFromType('Scientific');
        }
        var zeros = args.format.split('+')[1] || '00';
        if (prefix === undefined) {
            prefix = this.findDecimalPlaces(args.format);
        }
        var fResult = Number(args.value).toExponential(prefix);
        if (fResult.indexOf('e+') > -1) {
            fResult = fResult.split('e+')[0] + 'E+' + this.findSuffix(zeros, fResult.split('e+')[1]);
        }
        else if (fResult.indexOf('e-') > -1) {
            fResult = fResult.split('e-')[0] + 'E-' + this.findSuffix(zeros, fResult.split('e-')[1]);
        }
        return fResult.replace('.', this.localeObj.decimal);
    };
    WorkbookNumberFormat.prototype.fractionFormat = function (args) {
        var _a, _b;
        var fractionResult;
        args.format = args.format || getFormatFromType('Fraction');
        this.checkAndSetColor(args);
        var valueArr = args.value.toString().split('.');
        var fractionDigit = args.format.split('?').length / 2;
        var formatArr = args.format.split(' ');
        var fractionArr = formatArr[1] ? formatArr[1].split('/') : [];
        if (/^\?{1,3}\/\?{1,3}$|^\?\/[248]$|^\?\?\/16$/.test(formatArr[1])) {
            if (valueArr.length === 2 && !valueArr[1].startsWith('0'.repeat(fractionArr[1].trim().length || 0))) {
                var _c = [0, 1, Number.MAX_VALUE], numerator = _c[0], denominator = _c[1], minError = _c[2];
                var denominatorLimit = fractionArr[1].includes('?') ?
                    Number('9'.repeat(fractionArr[1].split('?').length - 1)) : Number(fractionArr[1]);
                var decimalPart = parseFloat("0." + valueArr[1]);
                for (var tempDenom = 1; tempDenom <= denominatorLimit; tempDenom++) {
                    var tempNumer = Math.round(decimalPart * tempDenom);
                    var error = Math.abs(decimalPart - tempNumer / tempDenom);
                    if (error < minError) {
                        _a = [tempNumer, tempDenom, error], numerator = _a[0], denominator = _a[1], minError = _a[2];
                    }
                }
                var gcd = getGcd(numerator, denominator);
                _b = [numerator / gcd, denominator / gcd], numerator = _b[0], denominator = _b[1];
                if (numerator === denominator) {
                    valueArr[0] = "" + (parseInt(valueArr[0], 10) + 1);
                }
                else if (numerator !== 0) {
                    fractionResult = numerator + "/" + denominator;
                }
            }
        }
        else if (valueArr.length === 2 && !valueArr[1].startsWith('0'.repeat(fractionDigit))) {
            fractionResult = toFraction(Number(args.value));
        }
        var suffixVal = this.getFormattedNumber(formatArr[0], Math.abs(Number(valueArr[0])));
        if (fractionResult) {
            suffixVal = suffixVal === '0' ? '' : suffixVal;
            return (Number(args.value) < 0 ? '-' : '') + suffixVal + " " + fractionResult;
        }
        else {
            return (Number(args.value) < 0 ? '-' : '') + suffixVal + " " + '  '.repeat(fractionDigit * 2);
        }
    };
    WorkbookNumberFormat.prototype.checkAndSetColor = function (args) {
        var colorCode = getColorCode(args.format);
        if (colorCode) {
            args.format = args.format.split("[" + colorCode + "]").join('');
            args.color = colorCode.toLowerCase();
            this.applyColor(args);
        }
    };
    WorkbookNumberFormat.prototype.findDecimalPlaces = function (code) {
        var eIndex = code.toUpperCase().indexOf('E');
        if (eIndex > -1) {
            var decIndex = code.indexOf(this.localeObj.decimal);
            if (decIndex === -1 && this.localeObj.decimal !== '.') {
                decIndex = code.indexOf('.');
            }
            return decIndex > 0 ? code.substring(decIndex + 1, eIndex).length : 0;
        }
        return 2;
    };
    WorkbookNumberFormat.prototype.checkDateFormat = function (args) {
        if (isNullOrUndefined(args.value)) {
            return;
        }
        var cell = args.cell || getCell(args.rowIndex, args.colIndex, getSheet(this.parent, isNullOrUndefined(args.sheetIndex) ? this.parent.activeSheetIndex : args.sheetIndex), false, true);
        var cellFormat = cell.format;
        if (this.parent.isEdit && getTypeFromFormat(cell.format) === 'Scientific') {
            cell.format = '';
        }
        var props = this.checkCustomDateFormat(args.value.toString(), cell, args.isEdit);
        if (props.val !== 'Invalid') {
            var noOfDays = void 0;
            if (props.format.startsWith('[h]')) {
                var timeArr = props.val.split(':');
                if (timeArr.length > 1 && Number(timeArr[0]) >= 24) {
                    noOfDays = Number(timeArr[0]) / 24;
                    timeArr[0] = '24';
                    props.val = timeArr.join(':');
                }
            }
            var dateObj = toDate(props.val, args.intl || new Internationalization(this.parent.locale), this.parent.locale, props.format || args.format, args.skipCellFormat && cell, props.isDateTime);
            if (dateObj.dateObj && dateObj.dateObj.toString() !== 'Invalid Date') {
                var year = dateObj.dateObj.getFullYear();
                if (year >= 1900 && year <= 9999) {
                    args.isTime = dateObj.type === 'time';
                    var dateIntVal = dateToInt(dateObj.dateObj, props.val.includes(':'), args.isTime);
                    if (noOfDays >= 1) {
                        dateIntVal += noOfDays;
                        dateObj.dateObj = intToDate(dateIntVal);
                    }
                    props.val = dateIntVal.toString();
                    if (!cell.format || cell.format === 'General') {
                        if (args.isTime) {
                            cell.format = getFormatFromType('Time');
                        }
                        else {
                            cell.format = getFormatFromType('ShortDate');
                        }
                        if (args.updateValue) {
                            cell.value = props.val;
                            return;
                        }
                    }
                    args.isDate = dateObj.type === 'date' || dateObj.type === 'datetime';
                    args.dateObj = dateObj.dateObj;
                }
                args.updatedVal = props.val;
            }
        }
        else if (cellFormat) {
            cell.format = cellFormat;
        }
    };
    WorkbookNumberFormat.prototype.checkCustomTimeFormat = function (val, cell) {
        var _this = this;
        var format = [];
        var am = " " + this.localeObj.am;
        var pm = " " + this.localeObj.pm;
        var isTewlveHr = val.includes(am) || val.includes(pm);
        if (!isTewlveHr) {
            if (val.includes(am.toLowerCase()) || val.includes(pm.toLowerCase())) {
                val = val.replace(am.toLowerCase(), am).replace(pm.toLowerCase(), pm);
                isTewlveHr = true;
            }
        }
        var timeArr = val.split(this.localeObj.timeSeparator);
        var isDefaultTime = timeArr.length === 3 && isTewlveHr;
        var twelveHrRep;
        if (timeArr.length <= 3) {
            var timeProp_1;
            var valArr_1;
            var maxHour_1 = isTewlveHr ? 12 : 23;
            timeArr.forEach(function (timeVal, index) {
                timeVal = timeVal.trim();
                timeArr[index] = timeVal;
                if (timeVal.includes(am) || timeVal.includes(pm)) {
                    twelveHrRep = ' AM/PM';
                    timeVal = timeVal.replace(am, '').replace(pm, '');
                }
                else {
                    twelveHrRep = '';
                }
                timeProp_1 = Number(timeVal);
                if (isNumber(timeProp_1) && timeProp_1 >= 0) {
                    if (timeProp_1 >= 24 && index === 0 && timeArr.length > 1) {
                        format.push('[h]');
                    }
                    else if (timeProp_1 <= maxHour_1 && index === 0) {
                        format.push('h' + twelveHrRep);
                        if (timeArr.length === 1) {
                            if (twelveHrRep) {
                                valArr_1 = val.split(' ');
                                valArr_1[0] += _this.localeObj.timeSeparator + "00";
                                timeArr[0] = valArr_1.join(' ');
                            }
                            else {
                                format = [];
                                val = 'Invalid';
                            }
                        }
                    }
                    else if (timeProp_1 <= 60 && (format.length === 1 || format.length === 2)) {
                        if (format.length === 1) {
                            format.push('mm' + twelveHrRep);
                            if (timeArr.length === 2 && format[0] === '[h]') {
                                format.push('ss');
                            }
                        }
                        else {
                            format.push('ss');
                        }
                        if (timeVal.length === 1) {
                            timeArr[index] = "0" + timeArr[index];
                        }
                    }
                    else {
                        format = [];
                        val = 'Invalid';
                    }
                }
                else {
                    format = [];
                    val = 'Invalid';
                }
            });
        }
        else {
            val = 'Invalid';
        }
        if (format.length) {
            val = timeArr.join(this.localeObj.timeSeparator);
            var formatCode = void 0;
            if (isDefaultTime) {
                formatCode = this.customFormats[24];
            }
            else {
                formatCode = format.join(':');
                if (defaultFormats) {
                    formatCode = this.getMatchingCustomFormat(formatCode);
                }
            }
            if (!cell.format || cell.format === 'General') {
                cell.format = formatCode;
                return { val: val, format: formatCode };
            }
        }
        return { val: val, format: '' };
    };
    WorkbookNumberFormat.prototype.checkCustomDateFormat = function (val, cell, isEdit) {
        var _this = this;
        var separator;
        var cellFormat = cell.format;
        var timeArgs;
        if (val.includes(this.localeObj.dateSeparator) && ((!val.includes(" " + this.localeObj.am) &&
            !val.includes(" " + this.localeObj.pm)) ||
            val.replace(" " + this.localeObj.am, '').replace(" " + this.localeObj.pm, '').includes(this.localeObj.dateSeparator))) {
            separator = this.localeObj.dateSeparator;
        }
        else if (val.indexOf('-') > 0) {
            separator = '-';
        }
        else if (val.indexOf(',') > 0) {
            var intl = new Internationalization(this.parent.locale);
            var parsedDate = intl.parseDate(val, { skeleton: 'full' });
            if (parsedDate && !isNaN(parsedDate.getTime())) {
                return { val: val, format: '', isDateTime: false };
            }
            return { val: 'Invalid', format: '' };
        }
        else {
            if (val.includes(this.localeObj.timeSeparator) || val.includes(" " + this.localeObj.am) ||
                val.includes(" " + this.localeObj.pm)) {
                return this.checkCustomTimeFormat(val, cell);
            }
            return { val: 'Invalid', format: '' };
        }
        if (val.includes(this.localeObj.timeSeparator) && val.includes(' ')) {
            var valArr = val.split(' ');
            val = valArr.shift();
            timeArgs = this.checkCustomTimeFormat(valArr.join(' '), cell);
            if (timeArgs.val === 'Invalid') {
                return { val: 'Invalid', format: '' };
            }
        }
        var dateArr = val.split(separator);
        var format = '';
        var formatArr = [];
        var updateFormat = function (defaultCode) {
            format = formatArr.join(separator);
            if (!cellFormat || cellFormat === 'General') {
                cell.format = defaultCode;
            }
        };
        var firstVal;
        var formats = IntlBase.getDependables(cldrData, this.parent.locale, null).dateObject;
        var months = formats.months['stand-alone'] ? formats.months['stand-alone'].wide : {};
        var abbreviatedMonth = formats.months['stand-alone'] ? formats.months['stand-alone'].abbreviated : { '1': '' };
        var enUSMonth = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var isMonth = function (monthValue, monthKey, dateVal, dateLength) {
            if (abbreviatedMonth["" + monthKey] && abbreviatedMonth["" + monthKey].toLowerCase() === dateVal) {
                firstVal = enUSMonth[Number(monthKey) - 1];
                return;
            }
            var shortMonthValue = monthValue.substring(0, dateLength);
            if (shortMonthValue === dateVal) {
                firstVal = enUSMonth[Number(monthKey) - 1];
            }
        };
        if (dateArr.length === 2) {
            var updateSecValue = function (secVal) {
                val = firstVal;
                formatArr[0] = 'MMM';
                if (Number(secVal) <= 31 && Number(secVal) > 0) {
                    val = secVal + separator + val;
                    if (_this.localeObj.dateSeparator !== '/' && separator !== '-') {
                        val += separator + new Date().getFullYear();
                    }
                    formatArr.splice(0, 0, 'dd');
                    updateFormat(_this.customFormats[21]);
                }
                else {
                    if (secVal.length === 2 && isNumber(secVal) && Number(secVal) > -1) {
                        secVal = (Number(secVal) < 30 ? new Date().getFullYear().toString().slice(0, 2) : '19') + secVal;
                    }
                    if (Number(secVal) >= 1900 && Number(secVal) <= 9999) {
                        val = '1' + separator + val + separator + secVal;
                        formatArr[1] = 'yyyy';
                        updateFormat(_this.customFormats[22]);
                    }
                    else {
                        val = 'Invalid'; //Set as Invalid for invalid data like May-June.
                    }
                }
            };
            dateArr[0] = dateArr[0].toLowerCase().trim();
            dateArr[1] = dateArr[1].toLowerCase().trim();
            if (!Number(dateArr[0]) && dateArr[0].length >= abbreviatedMonth['1'].length) {
                Object.keys(months).find(function (key) { return isMonth(months["" + key].toLowerCase(), key, dateArr[0], dateArr[0].length); });
                if (!isNullOrUndefined(firstVal) && !dateArr[0].includes(',')) { // Added ',' checking to skip updating for the MMM d, yyyy ddd format.
                    updateSecValue(dateArr[1]);
                }
            }
            else if (!Number(dateArr[1]) && dateArr[1].length >= abbreviatedMonth['1'].length) {
                Object.keys(months).find(function (key) { return isMonth(months["" + key].toLowerCase(), key, dateArr[1], dateArr[1].length); });
                if (!isNullOrUndefined(firstVal)) {
                    updateSecValue(dateArr[0]);
                }
            }
            else if (Number(dateArr[0]) && Number(dateArr[0]) <= 12 && Number(dateArr[1]) && (this.localeObj.dateSeparator === '/' ||
                separator === '-' || (isEdit && !cell.formula))) {
                firstVal = enUSMonth[Number(dateArr[0]) - 1];
                updateSecValue(dateArr[1]);
            }
            if (!formatArr.length) {
                val = 'Invalid';
            }
        }
        else if (dateArr.length > 2) {
            var _loop_2 = function (i) {
                if (isNumber(dateArr[i])) {
                    if (dateArr[i].length !== 4 && dateArr[i].length !== 2 && dateArr[i].length !== 1) {
                        val = 'Invalid';
                    }
                }
                else {
                    dateArr[i] = dateArr[i].trim();
                    Object.keys(months).find(function (key) {
                        return isMonth(months["" + key].toLowerCase(), key, dateArr[i].trim().toLowerCase(), dateArr[i].length);
                    });
                    if (!isNullOrUndefined(firstVal)) {
                        if (i === 1) {
                            formatArr[1] = 'MMM';
                            dateArr[2] = dateArr[2].trim();
                            if (dateArr[2].length === 2 && isNumber(dateArr[2]) && Number(dateArr[2]) > -1) {
                                dateArr[2] = (Number(dateArr[2]) < 30 ? new Date().getFullYear().toString().slice(0, 2) : '19') + dateArr[2];
                            }
                            if (Number(dateArr[0]) <= 31 && Number(dateArr[2]) >= 1900 && Number(dateArr[2]) <= 9999) {
                                val = dateArr[0] + separator + firstVal;
                                val += (separator + dateArr[2]);
                                formatArr[0] = 'd';
                                formatArr[2] = 'yy';
                                updateFormat(this_2.customFormats[20]);
                                // Changed year format alone when given year value with 4 digits like 20-May-2022
                                formatArr[2] = 'yyyy';
                                format = formatArr.join(separator);
                            }
                        }
                    }
                    else {
                        val = 'Invalid';
                    }
                }
            };
            var this_2 = this;
            for (var i = 0; i < dateArr.length; i++) {
                _loop_2(i);
            }
        }
        var isDateTime;
        if (timeArgs && val !== 'Invalid') {
            if (!cellFormat || cellFormat === 'General') {
                cell.format = this.customFormats[27];
            }
            if (format && timeArgs.format) {
                format += " " + timeArgs.format;
            }
            val += " " + timeArgs.val;
            isDateTime = true;
        }
        return { val: val, format: format, isDateTime: isDateTime };
    };
    WorkbookNumberFormat.prototype.formattedBarText = function (args) {
        var _this = this;
        if (args.value === '' || isNullOrUndefined(args.value)) {
            return;
        }
        var option = {};
        var format = (args.cell && args.cell.format) || '';
        var type = args.type || (format && isCustomDateTime(format, true, option, true) ? option.type : '');
        var intl = new Internationalization();
        var beforeText = args.value;
        var date = args.showFormattedText && (format === 'dd-MM-yyyy' || format === 'dd/MM/yyyy') ? format :
            getFormatFromType('ShortDate');
        var time = getFormatFromType('Time');
        if (time === 'h:mm:ss AM/PM') {
            time = 'h:mm:ss a';
        }
        var timeFormat = format.toLowerCase();
        var parseOtherCultureNumber = function () {
            if (_this.localeObj.decimal !== '.' && args.value) {
                args.value = args.value.toString();
                if (isNumber(args.value) && args.value.includes('.')) {
                    args.value = args.value.replace('.', _this.localeObj.decimal);
                }
            }
        };
        if (type === 'time' && timeFormat.includes('m') && !timeFormat.includes(':m') && !timeFormat.includes('m:') &&
            !timeFormat.includes('[m') && !timeFormat.includes('am')) {
            type = 'date';
        }
        if (type === 'date') {
            var val = args.value.toString();
            args.value = this.shortDateFormat({ type: type, value: args.value, format: date }, intl, args.cell);
            if (args.value && val.includes('.')) {
                args.value += " " + this.timeFormat({ type: type, value: val, format: time }, intl);
            }
        }
        else if (type.includes('time')) {
            if (beforeText && Number(beforeText) >= 1 || type === 'datetime') {
                args.value = this.shortDateFormat({ type: type, value: args.value, format: date }, intl) + ' ' +
                    this.timeFormat({ type: type, value: args.value, format: time }, intl);
            }
            else {
                args.value = this.timeFormat({ type: type, value: args.value, format: time }, intl);
            }
        }
        else if (args.cell.format && args.cell.format.includes('%') && isNumber(args.cell.value)) {
            args.value = this.parent.getDisplayText(args.cell);
            if (!args.value.includes('%')) {
                args.value = beforeText;
                parseOtherCultureNumber();
            }
        }
        else {
            parseOtherCultureNumber();
        }
        if (!args.value || (args.value && args.value.toString().indexOf('null') > -1)) {
            args.value = beforeText;
        }
    };
    WorkbookNumberFormat.prototype.getFormattedNumber = function (format, value) {
        return new Internationalization().formatNumber(Number(value), { format: format }) || '';
    };
    WorkbookNumberFormat.prototype.getMatchingCustomFormat = function (format) {
        if (format === '#,##0_);(#,##0)' && defaultFormats.has(37)) {
            return defaultFormats.get(37);
        }
        else if (format === '#,##0_);[Red](#,##0)' && defaultFormats.has(38)) {
            return defaultFormats.get(38);
        }
        else if (format === '#,##0.00_);(#,##0.00)' && defaultFormats.has(39)) {
            return defaultFormats.get(39);
        }
        else if (format === '#,##0.00_);[Red](#,##0.00)' && defaultFormats.has(40)) {
            return defaultFormats.get(40);
        }
        else if (format === 'd-mmm-yy' && defaultFormats.has(15)) {
            return defaultFormats.get(15);
        }
        else if (format === 'd-mmm' && defaultFormats.has(16)) {
            return defaultFormats.get(16);
        }
        else if (format === 'mmm-yy' && defaultFormats.has(17)) {
            return defaultFormats.get(17);
        }
        else if (format === 'h:mm AM/PM' && defaultFormats.has(18)) {
            return defaultFormats.get(18);
        }
        else if (format === 'h:mm:ss AM/PM' && defaultFormats.has(19)) {
            return defaultFormats.get(19);
        }
        else if (format === 'h:mm' && defaultFormats.has(20)) {
            return defaultFormats.get(20);
        }
        else if (format === 'h:mm:ss' && defaultFormats.has(21)) {
            return defaultFormats.get(21);
        }
        else if (format === 'm/d/yyyy h:mm' && defaultFormats.has(22)) {
            return defaultFormats.get(22);
        }
        else if (format === 'mm:ss' && defaultFormats.has(45)) {
            return defaultFormats.get(45);
        }
        else {
            return format;
        }
    };
    /**
     * Adding event listener for number format.
     *
     * @returns {void} - Adding event listener for number format.
     */
    WorkbookNumberFormat.prototype.addEventListener = function () {
        this.parent.on(applyNumberFormatting, this.numberFormatting, this);
        this.parent.on(getFormattedCellObject, this.getFormattedCell, this);
        this.parent.on(checkDateFormat, this.checkDateFormat, this);
        this.parent.on(getFormattedBarText, this.formattedBarText, this);
        this.parent.on(checkNumberFormat, this.updateAutoDetectNumberFormat, this);
        this.parent.on(parseDecimalNumber, this.parseDecimalNumber, this);
        this.parent.on(localizedFormatAction, this.localizedFormatAction, this);
    };
    /**
     * Removing event listener for number format.
     *
     * @returns {void} -  Removing event listener for number format.
     */
    WorkbookNumberFormat.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(applyNumberFormatting, this.numberFormatting);
            this.parent.off(getFormattedCellObject, this.getFormattedCell);
            this.parent.off(checkDateFormat, this.checkDateFormat);
            this.parent.off(getFormattedBarText, this.formattedBarText);
            this.parent.off(checkNumberFormat, this.updateAutoDetectNumberFormat);
            this.parent.off(parseDecimalNumber, this.parseDecimalNumber);
            this.parent.off(localizedFormatAction, this.localizedFormatAction);
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    WorkbookNumberFormat.prototype.destroy = function () {
        this.removeEventListener();
        if (defaultFormats && !this.parent.refreshing) {
            defaultFormats.clear();
            defaultFormats = null;
        }
        numberFormatsCode = this.parent = this.localeObj = this.customFormats = this.localizedFormats = null;
    };
    /**
     * Get the workbook number format module name.
     *
     * @returns {string} - Get the module name.
     */
    WorkbookNumberFormat.prototype.getModuleName = function () {
        return 'workbookNumberFormat';
    };
    return WorkbookNumberFormat;
}());
var defaultFormats;
var numberFormatsCode;
/**
 * Retrieves the built-in format code based on the specified number format type in either localized or non-localized format.
 *
 * @param {string} type - Specifies the type of number formatting.
 * @returns {string} - The built-in format code for the specified number format type.
 */
function getFormatFromType(type) {
    var formatType = type.split(' ').join('');
    if (!numberFormatsCode) {
        switch (formatType) {
            case 'Currency':
                return '$#,##0.00';
            case 'Accounting':
                return '_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)';
            case 'Time':
                return 'h:mm:ss AM/PM';
            default:
                return 'General';
        }
    }
    var getDefaultFormat = function (format, id) {
        return defaultFormats && defaultFormats.has(id) ? defaultFormats.get(id) : format;
    };
    var code = 'General';
    switch (formatType) {
        case 'Number':
            code = getDefaultFormat('0.00', 2);
            break;
        case 'Currency':
            code = numberFormatsCode.currency[0];
            break;
        case 'Accounting':
            code = numberFormatsCode.accounting[2];
            break;
        case 'ShortDate':
            code = getDefaultFormat('m/d/yyyy', 14);
            break;
        case 'LongDate':
            code = 'dddd, mmmm dd, yyyy';
            break;
        case 'Time':
            code = numberFormatsCode.time;
            break;
        case 'Percentage':
            code = getDefaultFormat('0.00%', 10);
            break;
        case 'Fraction':
            code = getDefaultFormat('# ?/?', 12);
            break;
        case 'Scientific':
            code = getDefaultFormat('0.00E+00', 11);
            break;
        case 'Text':
            code = getDefaultFormat('@', 49);
            break;
        case 'CurrencyWithColorCode':
            code = numberFormatsCode.currency[5];
            break;
    }
    return code;
}
/**
 * @hidden
 * @param {string} format -  Specidfies the format.
 * @param {boolean} isRibbonUpdate - Specifies where we are updating the type in the number format button.
 * @returns {string} - To get type from format.
 */
function getTypeFromFormat(format, isRibbonUpdate) {
    var code = 'General';
    switch (format) {
        case '0':
        case '0.00':
        case '#,##0':
        case '#,##0.00':
            code = 'Number';
            break;
        case '$#,##0.00':
        case '$#,##0':
        case '$#,##0_);[Red]($#,##0)':
        case '$#,##0.00_);($#,##0.00)':
        case '$#,##0_);($#,##0)':
        case '$#,##0.00_);[Red]($#,##0.00)':
            code = 'Currency';
            break;
        case '_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)':
        case '_ $ * #,##0.00_ ;_ $ * -#,##0.00_ ;_ $ * "-"??_ ;_ @_ ':
        case '_($* #,##0_);_($* (#,##0);_($* "-"_);_(@_)':
            code = 'Accounting';
            break;
        case 'mm-dd-yyyy':
        case 'm/d/yyyy':
        case 'dd/MM/yyyy':
            code = 'ShortDate';
            break;
        case 'dddd, mmmm dd, yyyy':
            code = 'LongDate';
            break;
        case 'h:mm:ss AM/PM':
            code = 'Time';
            break;
        case '0.00%':
        case '0%':
            code = 'Percentage';
            break;
        case '0.00E+00':
            code = 'Scientific';
            break;
        case '@':
            code = 'Text';
            break;
        default:
            if (format) {
                if (!numberFormatsCode) {
                    break;
                }
                if (format === numberFormatsCode.time) {
                    code = 'Time';
                }
                else if (numberFormatsCode.currency.indexOf(format) > -1) {
                    code = 'Currency';
                }
                else if (numberFormatsCode.accounting.indexOf(format) > -1) {
                    if (isRibbonUpdate) {
                        code = 'Accounting';
                    }
                }
                else if (format.includes('?/?') || ['2', '4', '8', '16'].indexOf(format.split('?/')[1]) > -1) {
                    code = 'Fraction';
                }
                if (defaultFormats && code === 'General' && isRibbonUpdate) {
                    var isDefaultFormat = function (ids) {
                        return ids.some(function (id) { return defaultFormats.has(id) && defaultFormats.get(id) === format; });
                    };
                    if (isDefaultFormat([1, 2, 3, 4])) {
                        code = 'Number';
                    }
                    else if (isDefaultFormat([14])) {
                        code = 'ShortDate';
                    }
                    else if (isDefaultFormat([9, 10])) {
                        code = 'Percentage';
                    }
                    else if (isDefaultFormat([11])) {
                        code = 'Scientific';
                    }
                    else if (isDefaultFormat([49])) {
                        code = 'Text';
                    }
                }
                isRibbonUpdate = false;
            }
            break;
    }
    if (isRibbonUpdate && numberFormatsCode && ((code === 'Currency' && numberFormatsCode.currency[0] !== '$#,##0.00') ||
        (code === 'Accounting' && numberFormatsCode.accounting[2] !== '_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)'))) {
        code = 'General';
    }
    return code;
}
/**
 * This method converts a culture-specific format code, which may include localized decimal separators, group separators, and
 * currency symbols, to a default culture (en-US) format code. The default format uses a default decimal separator (.),
 * group separators (,), and a currency symbol.
 *
 * @param {Workbook} context - Specifies the workbook instance containing the format code to be converted.
 * @param {string} format - The culture-specific format code, with localized decimal separators, group separators, and currency symbols,
 * that needs to be converted to the default format.
 * @returns {string} - Returns the default culture (en-US) format code, using the default decimal separator (.), group separators (,), and
 * currency symbol.
 */
function convertToDefaultFormat(context, format) {
    var eventArgs = { action: 'parseToDefaultFormat', format: format };
    context.notify(localizedFormatAction, eventArgs);
    return eventArgs.format;
}
/**
 * Populates culture-based number formats in the custom format dialog. By default, the decimal separator, group separator, and
 * currency symbol are updated based on the current culture. Currency and date formats can vary across cultures.
 * Excel maintains a default number format ID for each format code in the custom format dialog. This method maps these culture-based
 * format codes to their corresponding number format IDs, and the mapped formats will be populated in the custom format dialog.
 *
 * @param {Workbook} context - Specifies the workbook instance. If the component is not initialized, pass null for this parameter.
 * @param {FormatOption[]} formatOptions - Specifies the collection of number format IDs and their corresponding format codes.
 * @param {boolean} [clearMappedFormats] - Specifies whether to clear existing mapped formats or not. By default, this is set to true.
 * @returns {void}
 */
function configureLocalizedFormat(context, formatOptions, clearMappedFormats) {
    if (clearMappedFormats === void 0) { clearMappedFormats = true; }
    if (clearMappedFormats && defaultFormats) {
        defaultFormats.clear();
        defaultFormats = null;
    }
    if (formatOptions && formatOptions.length) {
        if (!defaultFormats) {
            defaultFormats = new Map();
        }
        formatOptions.forEach(function (format) {
            defaultFormats.set(format.id, format.code);
        });
    }
    if (context) {
        context.notify(localizedFormatAction, { action: 'mapNumberFormatId' });
    }
}

/**
 * The `WorkbookSort` module is used to handle sort action in Spreadsheet.
 */
var WorkbookSort = /** @class */ (function () {
    /**
     * Constructor for WorkbookSort module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     */
    function WorkbookSort(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the sort module.
     *
     * @returns {void} - To destroy the sort module.
     */
    WorkbookSort.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookSort.prototype.addEventListener = function () {
        this.parent.on(initiateSort, this.initiateSortHandler, this);
        this.parent.on(updateSortedDataOnCell, this.updateSortedDataOnCell, this);
    };
    WorkbookSort.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(initiateSort, this.initiateSortHandler);
            this.parent.off(updateSortedDataOnCell, this.updateSortedDataOnCell);
        }
    };
    /**
     * Sorts range of cells in the sheet.
     *
     * @param {{ args: BeforeSortEventArgs, promise: Promise<SortEventArgs> }} eventArgs - Specify the arguments.
     * @param {BeforeSortEventArgs} eventArgs.args - arguments for sorting.
     * @param {Promise<SortEventArgs>} eventArgs.promise - Specify the promise.
     * @param {SortCollectionModel} eventArgs.previousSort - Specify the previous sort model.
     * @returns {void} - Sorts range of cells in the sheet.
     */
    WorkbookSort.prototype.initiateSortHandler = function (eventArgs) {
        var _this = this;
        var args = eventArgs.args;
        var deferred = new Deferred();
        var addressInfo = this.parent.getAddressInfo(args.range);
        var sheet = getSheet(this.parent, addressInfo.sheetIndex);
        var range = getSwapRange(addressInfo.indices);
        var sortOptions = args.sortOptions || { sortDescriptors: {}, containsHeader: true };
        var isSingleCell = false;
        eventArgs.promise = deferred.promise;
        if (range[0] > sheet.usedRange.rowIndex || range[1] > sheet.usedRange.colIndex) {
            deferred.reject(this.parent.serviceLocator.getService(workbookLocale).getConstant('SortOutOfRangeError'));
            return;
        }
        var containsHeader = sortOptions.containsHeader;
        var checkForHeader = args.checkForHeader;
        if (range[0] === range[2] || checkForHeader) { //if selected range is a single cell
            if (!checkForHeader) {
                range = getDataRange(range[0], range[1], sheet);
            }
            isSingleCell = true;
            if (isNullOrUndefined(sortOptions.containsHeader)) {
                if (typeof getCell(range[0], range[1], sheet, null, true).value ===
                    typeof getCell(range[0] + 1, range[1], sheet, null, true).value) {
                    containsHeader = this.isSameStyle(getCell(range[0], range[1], sheet, null, true).style, getCell(range[0] + 1, range[1], sheet, null, true).style) ? this.isHeaderRow(sheet, range) : true;
                }
                else {
                    containsHeader = true;
                }
            }
        }
        if ((isNullOrUndefined(args.sortOptions) || isNullOrUndefined(args.sortOptions.containsHeader)) && !isSingleCell) {
            var firstCell = getCell(range[0], range[1], sheet);
            var secondCell = getCell(range[0] + 1, range[1], sheet);
            if (firstCell && secondCell) {
                if (typeof firstCell.value === typeof secondCell.value) {
                    containsHeader = !this.isSameStyle(firstCell.style, secondCell.style) || this.isHeaderRow(sheet, range);
                }
                else {
                    containsHeader = true;
                }
            }
        }
        range[0] = containsHeader ? range[0] + 1 : range[0];
        var cell = getCellIndexes(sheet.activeCell);
        var header = getColumnHeaderText(cell[1] + 1);
        delete sortOptions.containsHeader;
        var sortDescriptors = sortOptions.sortDescriptors;
        var query = new Query();
        if (Array.isArray(sortDescriptors)) { //multi-column sorting.
            if (!sortDescriptors || sortDescriptors.length === 0) {
                sortDescriptors = [{ field: header }];
            }
            for (var length_1 = sortDescriptors.length, i = length_1 - 1; i > -1; i--) {
                if (!sortDescriptors[length_1 - 1].field) {
                    sortDescriptors[length_1 - 1].field = header;
                }
                if (!sortDescriptors[i].field) {
                    continue;
                }
                var comparerFn = sortDescriptors[i].sortComparer
                    || this.sortComparer.bind(this, sortDescriptors[i], sortOptions.caseSensitive);
                query.sortBy(sortDescriptors[i].field, comparerFn);
                header = sortDescriptors[i].field;
            }
        }
        else { //single column sorting.
            if (!sortDescriptors) {
                sortDescriptors = { field: header };
            }
            if (!sortDescriptors.field) {
                sortDescriptors.field = header;
            }
            var comparerFn = sortDescriptors.sortComparer
                || this.sortComparer.bind(this, sortDescriptors, sortOptions.caseSensitive);
            query.sortBy(sortDescriptors.field, comparerFn);
            header = sortDescriptors.field;
        }
        var address = getRangeAddress(range);
        getData(this.parent, sheet.name + "!" + address, true, null, null, null, null, null, undefined, null, getColIndex(header)).then(function (jsonData) {
            var dataManager = new DataManager(jsonData);
            if (jsonData.length === 1 && (jsonData[0].throwMergeAlert)) {
                var sortModel = _this.parent.sortCollection &&
                    _this.parent.sortCollection[_this.parent.sortCollection.length - 1];
                if (sortModel) {
                    var prevSortModel = void 0;
                    if (eventArgs.previousSort && eventArgs.previousSort.length) {
                        for (var i = 0; i < eventArgs.previousSort.length; i++) {
                            var sort = eventArgs.previousSort[i];
                            if (sortModel.sheetIndex === sort.sheetIndex) {
                                prevSortModel = sort;
                            }
                        }
                    }
                    if (prevSortModel) {
                        sortModel.columnIndex = prevSortModel.columnIndex;
                        sortModel.order = prevSortModel.order;
                        sortModel.sortRange = prevSortModel.sortRange;
                    }
                    else {
                        _this.parent.sortCollection.pop();
                    }
                    _this.parent.notify(refreshFilterRange, null);
                }
                deferred.reject(_this.parent.serviceLocator.getService(workbookLocale).getConstant('AutoFillMergeAlertMsg'));
                return;
            }
            dataManager.executeQuery(query).then(function (e) {
                _this.parent.notify('setActionData', { args: { action: 'beforeSort', eventArgs: { range: address, cellDetails: jsonData, sortedCellDetails: e.result } } });
                _this.updateSortedDataOnCell({ result: e.result, range: range, sheet: sheet, jsonData: jsonData });
                var sortArgs = { range: sheet.name + "!" + address, sortOptions: args.sortOptions };
                if (eventArgs.previousSort) {
                    sortArgs.previousSort = eventArgs.previousSort;
                }
                deferred.resolve(sortArgs);
            });
        });
    };
    WorkbookSort.prototype.isHeaderRow = function (sheet, range) {
        if (!sheet.ranges || !sheet.ranges.length) {
            return false;
        }
        return sheet.ranges.some(function (rangeItem) {
            if (!rangeItem.dataSource || !rangeItem.showFieldAsHeader) {
                return false;
            }
            var startCellIndexes = getCellIndexes(rangeItem.startCell);
            return startCellIndexes[0] === range[0] && startCellIndexes[1] >= range[1] && startCellIndexes[1] <= range[3];
        });
    };
    WorkbookSort.prototype.updateSortedDataOnCell = function (args) {
        var _this = this;
        var fields = [];
        var cell;
        var updateCell = function (rowIdx, data) {
            for (var j = args.range[1], k = 0; j <= args.range[3]; j++, k++) {
                if (!fields[k]) {
                    fields[k] = getColumnHeaderText(j + 1);
                }
                if (data[fields[k]]) {
                    cell = extend({}, data[fields[k]], null, true);
                }
                else {
                    if (!getCell(rowIdx, j, args.sheet)) {
                        continue;
                    }
                    cell = null;
                }
                cell = _this.skipBorderOnSorting(rowIdx, j, args.sheet, cell);
                if (cell && cell.validation) {
                    delete cell.validation;
                }
                var existingCell = getCell(rowIdx, j, args.sheet);
                if (existingCell) {
                    if (existingCell.validation) {
                        cell = Object.assign({}, cell, { validation: existingCell.validation }); // To preserve validation settings
                    }
                    if (existingCell.wrap) {
                        wrap(getCellAddress(rowIdx, j), false, _this.parent);
                    }
                }
                if (cell && cell.formula) {
                    cell.formula = getUpdatedFormula([rowIdx, j], [parseInt(data['__rowIndex'], 10) - 1, j], args.sheet, _this.parent, cell, true);
                }
                setCell(rowIdx, j, args.sheet, cell);
            }
        };
        var updatedCellDetails = args.isUndo && {};
        var rIdx;
        var result;
        for (var i = args.range[0], idx = 0; i <= args.range[2]; i++, idx++) {
            if (isHiddenRow(args.sheet, i)) {
                idx--;
                continue;
            }
            result = args.result[idx];
            if (args.isUndo) {
                if (result) {
                    rIdx = parseInt(result['__rowIndex'], 10) - 1;
                    updatedCellDetails[rIdx] = true;
                    updateCell(rIdx, result);
                    if (i === rIdx) {
                        continue;
                    }
                }
                if (!updatedCellDetails[i] && args.sheet.rows[i]) {
                    updateCell(i, {});
                }
            }
            else {
                updateCell(i, result || {});
            }
        }
    };
    WorkbookSort.prototype.skipBorderOnSorting = function (rowIndex, colIndex, sheet, cell) {
        var prevCell = getCell(rowIndex, colIndex, sheet);
        var borders = ['borderBottom', 'borderTop', 'borderRight', 'borderLeft', 'border'];
        if (cell && cell.style) {
            for (var _i = 0, borders_1 = borders; _i < borders_1.length; _i++) {
                var border = borders_1[_i];
                delete cell.style["" + border];
            }
        }
        if (prevCell && prevCell.style) {
            for (var _a = 0, borders_2 = borders; _a < borders_2.length; _a++) {
                var border = borders_2[_a];
                if (prevCell.style["" + border]) {
                    if (!cell) {
                        cell = {};
                    }
                    if (!cell.style) {
                        cell.style = {};
                    }
                    cell.style["" + border] = prevCell.style["" + border];
                }
            }
        }
        return cell;
    };
    WorkbookSort.prototype.isSameStyle = function (firstCellStyle, secondCellStyle) {
        if (!firstCellStyle) {
            firstCellStyle = {};
        }
        if (!secondCellStyle) {
            secondCellStyle = {};
        }
        var sameStyle = true;
        var keys = Object.keys(firstCellStyle);
        for (var i = 0; i < keys.length; i++) {
            if (firstCellStyle[keys[i]] === secondCellStyle[keys[i]] || this.parent.cellStyle[keys[i]] ===
                firstCellStyle[keys[i]]) {
                sameStyle = true;
            }
            else {
                sameStyle = false;
                break;
            }
        }
        return sameStyle;
    };
    /**
     * Compares the two cells for sorting.
     *
     * @param {SortDescriptor} sortDescriptor - protocol for sorting.
     * @param {boolean} caseSensitive - value for case sensitive.
     * @param {CellModel} x - first cell
     * @param {CellModel} y - second cell
     * @returns {number} - Compares the two cells for sorting.
     */
    WorkbookSort.prototype.sortComparer = function (sortDescriptor, caseSensitive, x, y) {
        var direction = sortDescriptor.order || '';
        var comparer = DataUtil.fnSort(direction);
        var xVal = x ? x.value : x;
        var yVal = y ? y.value : y;
        if (x && y && (typeof xVal === 'string' || typeof yVal === 'string') && xVal !== '' && yVal !== '') {
            var isXStringVal = void 0;
            var isYStringVal = void 0;
            if (isNumber(x.value)) { // Imported number values are of string type, need to handle this case in server side
                xVal = parseIntValue(x.value);
                if (x.format !== '@') {
                    x.value = xVal;
                }
                isXStringVal = true;
            }
            if (isNumber(y.value)) {
                yVal = parseIntValue(y.value);
                if (y.format !== '@') {
                    y.value = yVal;
                }
                isYStringVal = true;
            }
            if (!isXStringVal && !isYStringVal) {
                var caseOptions = { sensitivity: caseSensitive ? 'case' : 'base' };
                var collator = new Intl.Collator(this.parent.locale, caseOptions);
                if (!direction || direction.toLowerCase() === 'ascending') {
                    return collator.compare(xVal, yVal);
                }
                else {
                    return collator.compare(xVal, yVal) * -1;
                }
            }
        }
        if (isNullOrUndefined(yVal) || yVal === '') {
            return -1;
        }
        if (isNullOrUndefined(xVal) || xVal === '') {
            return 1;
        }
        return comparer(xVal, yVal);
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Get the module name.
     */
    WorkbookSort.prototype.getModuleName = function () {
        return 'workbookSort';
    };
    return WorkbookSort;
}());

/**
 * The `WorkbookFilter` module is used to handle filter action in Spreadsheet.
 */
var WorkbookFilter = /** @class */ (function () {
    /**
     * Constructor for WorkbookFilter module.
     *
     * @param {Workbook} parent - Constructor for WorkbookFilter module.
     */
    function WorkbookFilter(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the filter module.
     *
     * @returns {void} - To destroy the filter module.
     */
    WorkbookFilter.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookFilter.prototype.addEventListener = function () {
        this.parent.on(initiateFilter, this.initiateFilterHandler, this);
    };
    WorkbookFilter.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(initiateFilter, this.initiateFilterHandler);
        }
    };
    /**
     * Filters a range of cells in the sheet.
     *
     * @param { {args: BeforeFilterEventArgs, promise: Promise<FilterEventArgs>}} eventArgs - Specify the event args.
     * @param {BeforeFilterEventArgs} eventArgs.args - arguments for filtering..
     * @param {Promise<FilterEventArgs>} eventArgs.promise - Specify the promise.
     * @param {boolean} eventArgs.refresh - Specify the refresh.
     * @returns {void} - Filters a range of cells in the sheet.
     */
    WorkbookFilter.prototype.initiateFilterHandler = function (eventArgs) {
        var _this = this;
        var args = eventArgs.args;
        var deferred = new Deferred();
        var sheet = getSheet(this.parent, getSheetIndexFromAddress(this.parent, args.range));
        var filterOptions = args.filterOptions || {};
        eventArgs.promise = deferred.promise;
        if (filterOptions.datasource) {
            this.setFilter(filterOptions.datasource, filterOptions.predicates, args.range, eventArgs.refresh, filterOptions.equalOrPredicates);
            var filterEventArgs = { range: args.range, filterOptions: filterOptions };
            deferred.resolve(filterEventArgs);
        }
        else {
            var range = getSwapRange(getIndexesFromAddress(args.range));
            if (range[0] > sheet.usedRange.rowIndex || range[1] > sheet.usedRange.colIndex) {
                deferred.reject('Select a cell or range inside the used range and try again.');
                return;
            }
            if (range[0] === range[2] && (range[2] - range[0]) === 0) { //if selected range is a single cell
                range[0] = 0;
                range[1] = 0;
                range[3] = sheet.usedRange.colIndex;
            }
            range[2] = sheet.usedRange.rowIndex; //filter range should be till used range.
            range[0] = range[0] + 1; //ignore first row
            var address_1 = getRangeAddress(range);
            getData(this.parent, sheet.name + "!" + address_1, true, true, null, null, null, null, false).then(function (jsonData) {
                var dataManager = new DataManager(jsonData);
                _this.setFilter(dataManager, filterOptions.predicates, args.range, eventArgs.refresh);
                var filterEventArgs = { range: address_1, filterOptions: filterOptions };
                deferred.resolve(filterEventArgs);
            });
        }
    };
    /**
     * Hides or unhides the rows based on the filter predicates.
     *
     * @param {DataManager} dataManager - Specify the dataManager.
     * @param {Predicate[]} predicates - Specify the predicates.
     * @param {string} range - Specify the range.
     * @param {boolean} refresh - Specify the refresh.
     * @param {Predicate[]} equalOrPredicates - Specify the equal condition or predicates.
     * @returns {void} - Hides or unhides the rows based on the filter predicates.
     */
    WorkbookFilter.prototype.setFilter = function (dataManager, predicates, range, refresh, equalOrPredicates) {
        var _this = this;
        if (dataManager && predicates) {
            var jsonData = dataManager.dataSource.json;
            var result_1 = applyPredicates(dataManager, predicates, equalOrPredicates);
            var rowKey_1 = '__rowIndex';
            var sheet_1;
            var sheetIdx_1;
            if (range.indexOf('!') > -1) {
                sheetIdx_1 = getSheetIndex(this.parent, range.substring(0, range.lastIndexOf('!')));
                sheet_1 = getSheet(this.parent, sheetIdx_1);
            }
            else {
                sheet_1 = this.parent.getActiveSheet();
                sheetIdx_1 = getSheetIndex(this.parent, sheet_1.name);
            }
            if (this.parent.getModuleName() === 'spreadsheet') {
                /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
                var parent_1 = this.parent;
                var hide_1;
                var refreshUI_1;
                if ((parent_1.scrollSettings.enableVirtualization && ((sheet_1.rows || jsonData).length > (parent_1.viewport.rowCount +
                    (parent_1.getThreshold('row') * 2))) || sheet_1.frozenRows || sheet_1.frozenColumns) || refresh) {
                    jsonData.forEach(function (data) {
                        hide_1 = result_1.indexOf(data) < 0;
                        setRow(sheet_1, Number(data["" + rowKey_1]) - 1, { hidden: hide_1, isFiltered: hide_1 });
                    });
                    refreshUI_1 = sheetIdx_1 === parent_1.activeSheetIndex;
                    var paneIndexes = getRangeIndexes(sheet_1.paneTopLeftCell);
                    this.parent.updateTopLeftCell(skipHiddenIdx(sheet_1, paneIndexes[0], true) - this.parent.frozenRowCount(sheet_1), null, 'col');
                }
                else {
                    jsonData.forEach(function (data) {
                        hide_1 = result_1.indexOf(data) < 0;
                        if (refreshUI_1) {
                            setRow(sheet_1, Number(data["" + rowKey_1]) - 1, { hidden: hide_1, isFiltered: hide_1 });
                        }
                        else {
                            var eventArgs = { startIndex: Number(data["" + rowKey_1]) - 1, hide: hide_1,
                                isFiltering: true, sheetIndex: sheetIdx_1 };
                            eventArgs.endIndex = eventArgs.startIndex;
                            _this.parent.notify(hideShow, eventArgs);
                            refreshUI_1 = eventArgs.refreshUI;
                        }
                    });
                }
                if (refreshUI_1) {
                    parent_1.renderModule.refreshSheet(false, false, document.activeElement.id !== this.parent.element.id + "_SearchBox");
                }
            }
            else {
                var hide_2;
                jsonData.forEach(function (data) {
                    hide_2 = result_1.indexOf(data) < 0;
                    setRow(sheet_1, Number(data["" + rowKey_1]) - 1, { hidden: hide_2, isFiltered: hide_2 });
                });
            }
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Get the module name.
     */
    WorkbookFilter.prototype.getModuleName = function () {
        return 'workbookFilter';
    };
    return WorkbookFilter;
}());

/**
 * Specifies image.
 */
var WorkbookImage = /** @class */ (function () {
    function WorkbookImage(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    WorkbookImage.prototype.setImage = function (args) {
        var lastIndex = args.range ? args.range.lastIndexOf('!') : -1;
        var imgRange = args.range ? (lastIndex > -1) ? args.range.substring(lastIndex + 1) : args.range
            : this.parent.getActiveSheet().selectedRange;
        var sheetIdx = (args.range && lastIndex > -1) ?
            getSheetIndex(this.parent, args.range.substring(0, lastIndex)) : this.parent.activeSheetIndex;
        var indexes = getRangeIndexes(imgRange);
        var sheet = isUndefined$1(sheetIdx) ? this.parent.getActiveSheet() : getSheet(this.parent, sheetIdx);
        var cell = getCell(indexes[0], indexes[1], sheet);
        var oldImgData;
        var imgData = args.options;
        if (cell && cell.image) {
            oldImgData = cell.image;
            if (args.isPositionChanged) {
                for (var i = 0; i < oldImgData.length; i++) {
                    for (var j = 0; j < imgData.length; j++) {
                        if (oldImgData[i].id === imgData[j].id) {
                            oldImgData[i] = imgData[j];
                            if (document.getElementById(imgData[j].id)) {
                                args.isElementRemoved = true;
                                document.getElementById(imgData[j].id).remove();
                            }
                        }
                    }
                }
            }
            else {
                oldImgData = cell.image;
                for (var i = 0; i < imgData.length; i++) {
                    oldImgData.push(imgData[i]);
                }
            }
        }
        setCell(indexes[0], indexes[1], sheet, { image: (cell && cell.image) ? oldImgData : imgData }, true, true);
        return args.isElementRemoved;
    };
    /**
     * Adding event listener for number format.
     *
     * @returns {void} - Adding event listener for number format.
     */
    WorkbookImage.prototype.addEventListener = function () {
        this.parent.on(setImage, this.setImage, this);
    };
    /**
     * Removing event listener for number format.
     *
     * @returns {void}
     */
    WorkbookImage.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setImage, this.setImage);
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    WorkbookImage.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the workbook number format module name.
     *
     * @returns {string} - Get the module name.
     */
    WorkbookImage.prototype.getModuleName = function () {
        return 'workbookImage';
    };
    return WorkbookImage;
}());

/**
 * The `WorkbookChart` module is used to handle chart action in Spreadsheet.
 */
var WorkbookChart = /** @class */ (function () {
    /**
     * Constructor for WorkbookChart module.
     *
     * @param {Workbook} parent - Constructor for WorkbookChart module.
     */
    function WorkbookChart(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    WorkbookChart.prototype.addEventListener = function () {
        this.parent.on(setChart, this.setChartHandler, this);
        this.parent.on(deleteChartColl, this.deleteChartColl, this);
        this.parent.on(refreshChartSize, this.refreshChartSize, this);
        this.parent.on(focusChartBorder, this.focusChartBorder, this);
    };
    WorkbookChart.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setChart, this.setChartHandler);
            this.parent.off(deleteChartColl, this.deleteChartColl);
            this.parent.off(refreshChartSize, this.refreshChartSize);
            this.parent.off(focusChartBorder, this.focusChartBorder);
        }
    };
    WorkbookChart.prototype.setChartHandler = function (args) {
        var i = 0;
        var rangeIdx = [];
        args.isInitCell = isNullOrUndefined(args.isInitCell) ? false : args.isInitCell;
        args.isUndoRedo = isNullOrUndefined(args.isUndoRedo) ? true : args.isUndoRedo;
        args.isPaste = isNullOrUndefined(args.isPaste) ? false : args.isPaste;
        var chart = args.chart;
        var chartModel;
        var chartLength;
        if (chart.length > 0) {
            while (i < chart.length) {
                if (args.isCut === false) {
                    if (document.getElementById(args.chart[i].id)) {
                        chart[i] = {
                            range: chart[i].range, id: getUniqueID('e_spreadsheet_chart'), theme: chart[i].theme,
                            isSeriesInRows: chart[i].isSeriesInRows, type: chart[i].type,
                            markerSettings: chart[i].markerSettings,
                            title: chart[i].title, legendSettings: chart[i].legendSettings,
                            primaryXAxis: chart[i].primaryXAxis, primaryYAxis: chart[i].primaryYAxis,
                            dataLabelSettings: chart[i].dataLabelSettings
                        };
                    }
                }
                if (document.getElementById(args.chart[i].id)) {
                    return;
                }
                chartModel = chart[i];
                chartModel.theme = chartModel.theme || 'Material';
                chartModel.type = chartModel.type || 'Line';
                chartModel.isSeriesInRows = chartModel.isSeriesInRows || false;
                if (isNullOrUndefined(chartModel.range)) {
                    var sheet = this.parent.getActiveSheet();
                    chartModel.range = sheet.selectedRange;
                    rangeIdx = getSwapRange(getRangeIndexes(chartModel.range));
                    if (rangeIdx[0] === 0 && rangeIdx[2] === sheet.rowCount - 1 && rangeIdx[2] > sheet.usedRange.rowIndex) {
                        rangeIdx[2] = sheet.usedRange.rowIndex;
                    }
                    if (rangeIdx[1] === 0 && rangeIdx[3] === sheet.colCount - 1 && rangeIdx[3] > sheet.usedRange.colIndex) {
                        rangeIdx[3] = sheet.usedRange.colIndex;
                    }
                }
                else {
                    rangeIdx = getSwapRange(getRangeIndexes(chartModel.range));
                }
                var rangeAddress = getRangeAddress(rangeIdx);
                if (chartModel.range.indexOf('!') > 0) {
                    chartModel.range = chartModel.range.substring(0, chartModel.range.lastIndexOf('!')) + '!' + rangeAddress;
                }
                else {
                    chartModel.range = this.parent.getActiveSheet().name + '!' + rangeAddress;
                }
                if (isNullOrUndefined(chartModel.id)) {
                    chartModel.id = getUniqueID('e_spreadsheet_chart');
                }
                if (chartModel.markerSettings && chartModel.markerSettings.visible) {
                    if (chartModel.markerSettings.isFilled === undefined) {
                        chartModel.markerSettings.isFilled = true;
                    }
                    if (chartModel.markerSettings.shape === undefined) {
                        chartModel.markerSettings.shape = 'Circle';
                    }
                }
                chartModel.height = chartModel.height || 290;
                chartModel.width = chartModel.width || 480;
                this.parent.notify(initiateChart, {
                    option: chartModel, isInitCell: args.isInitCell, triggerEvent: args.isUndoRedo,
                    dataSheetIdx: args.dataSheetIdx, range: args.range, isPaste: args.isPaste
                });
                this.parent.chartColl.push(chartModel);
                if (!args.isInitCell || args.isPaste || args.isUndo || args.isRedo) {
                    var sheetIdx = void 0;
                    var rowIdx = void 0;
                    var colIdx = void 0;
                    if (args.range && (args.isUndo || args.isRedo)) {
                        sheetIdx = getSheetIndex(this.parent, args.range.substring(0, args.range.lastIndexOf('!')));
                        var range = getSwapRange(getRangeIndexes(args.range));
                        rowIdx = range[0];
                        colIdx = range[1];
                    }
                    else {
                        sheetIdx = args.sheetId === undefined
                            ? ((chartModel.range && chartModel.range.lastIndexOf('!') > 0)
                                ? getSheetIndex(this.parent, chartModel.range.substring(0, chartModel.range.lastIndexOf('!')))
                                : this.parent.activeSheetIndex) : getSheetIndexFromId(this.parent, args.sheetId);
                        var chartRowIdx = { clientY: chartModel.top, isImage: true };
                        var chartColIdx = { clientX: chartModel.left, isImage: true };
                        this.parent.notify(getChartRowIdxFromClientY, chartRowIdx);
                        this.parent.notify(getChartColIdxFromClientX, chartColIdx);
                        rowIdx = chartRowIdx.clientY;
                        colIdx = chartColIdx.clientX;
                    }
                    var sheet = isUndefined$1(sheetIdx) ? this.parent.getActiveSheet()
                        : this.parent.sheets[sheetIdx];
                    var cell = getCell(rowIdx, colIdx, sheet);
                    if (!this.parent.isPrintingProcessing) {
                        if (cell && cell.chart) {
                            cell.chart.push(chartModel);
                        }
                        else {
                            setCell(rowIdx, colIdx, sheet, { chart: [chartModel] }, true);
                        }
                    }
                }
                else {
                    var indexes = getRangeIndexes(args.range);
                    var chartRowIdx = { clientY: chartModel.top, isImage: true };
                    var chartColIdx = { clientX: chartModel.left, isImage: true };
                    this.parent.notify(getChartRowIdxFromClientY, chartRowIdx);
                    this.parent.notify(getChartColIdxFromClientX, chartColIdx);
                    var eventArgs = {
                        prevTop: chartModel.top, prevLeft: chartModel.left, prevRowIdx: indexes[0], prevColIdx: indexes[1],
                        prevHeight: chartModel.height, prevWidth: chartModel.width, currentTop: chartModel.top,
                        currentLeft: chartModel.left, currentRowIdx: chartRowIdx.clientY, currentColIdx: chartColIdx.clientX,
                        currentHeight: chartModel.height, currentWidth: chartModel.width, id: chartModel.id, requestType: 'chartRefreshOnInit'
                    };
                    if (indexes[0] !== chartRowIdx.clientY || indexes[1] !== chartColIdx.clientX) {
                        chartLength = chart.length;
                        this.parent.notify(refreshChartCellOnInit, eventArgs);
                        i -= chartLength - chart.length;
                    }
                }
                i++;
            }
        }
    };
    WorkbookChart.prototype.refreshChartSize = function (args) {
        var chartCnt;
        var j = 1;
        var sheetCnt = this.parent.sheets.length + 1;
        while (j < sheetCnt) {
            var charts = this.parent.chartColl;
            chartCnt = charts ? charts.length : 0;
            if (chartCnt) {
                while (chartCnt--) {
                    var chart = this.parent.chartColl[chartCnt];
                    if (!isNullOrUndefined(args.overlayEle.querySelector('#' + chart.id))) {
                        var chartObj = this.parent.element.querySelector('.' + chart.id);
                        var excelFilter = getComponent(chartObj, 'chart') || getComponent(chartObj, 'accumulationchart');
                        if (excelFilter) {
                            excelFilter.height = args.height;
                            excelFilter.width = args.width;
                        }
                    }
                }
            }
            j++;
        }
    };
    WorkbookChart.prototype.focusChartBorder = function (args) {
        for (var idx = 0; idx < this.parent.chartColl.length; idx++) {
            var overlayEle = document.getElementById(args.id);
            var chartEle = document.getElementById(this.parent.chartColl[idx].id);
            if (overlayEle && chartEle && closest(chartEle, '.' + overlayEle.classList[1]) === overlayEle) {
                this.parent.notify(initiateChart, {
                    option: this.parent.chartColl[idx], isRefresh: true
                });
            }
        }
    };
    WorkbookChart.prototype.deleteChartColl = function (args) {
        for (var idx = 0; idx < this.parent.chartColl.length; idx++) {
            if (this.parent.chartColl[idx].id + '_overlay' === args.id) {
                this.parent.chartColl.splice(idx, 1);
            }
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    WorkbookChart.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the workbook chart module name.
     *
     * @returns {string} - Get the workbook chart module name.
     */
    WorkbookChart.prototype.getModuleName = function () {
        return 'workbookChart';
    };
    return WorkbookChart;
}());

/**
 * Workbook Cell format.
 */
var WorkbookCellFormat = /** @class */ (function () {
    function WorkbookCellFormat(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    WorkbookCellFormat.prototype.format = function (args) {
        var _this = this;
        var sheet;
        var rng = args.range;
        if (rng && typeof rng === 'string' && rng.indexOf('!') > -1) {
            var lastIndex = rng.lastIndexOf('!');
            rng = rng.substring(lastIndex + 1);
            sheet = this.parent.sheets[getSheetIndex(this.parent, args.range.substring(0, lastIndex))];
        }
        else {
            sheet = this.parent.getActiveSheet();
        }
        if (rng === undefined) {
            rng = sheet.selectedRange;
        }
        var triggerEvt = typeof (rng) !== 'object' && args.onActionUpdate && !args.isUndoRedo;
        var eventArgs = {
            range: rng, style: Object.assign({}, args.style), requestType: 'CellFormat'
        };
        if (args.borderType) {
            eventArgs.borderType = args.borderType;
        }
        var style = {};
        var indexes = typeof (eventArgs.range) === 'object' ? eventArgs.range :
            getSwapRange(getRangeIndexes(eventArgs.range));
        var mergeBorderRows = [];
        var hasReadOnlyCells = isReadOnlyCells(this.parent, indexes);
        if (hasReadOnlyCells) {
            if (args.onActionUpdate) {
                this.parent.notify(workbookReadonlyAlert, null);
            }
            return;
        }
        Object.assign(style, eventArgs.style, null, true);
        if (triggerEvt) {
            this.parent.trigger('beforeCellFormat', eventArgs);
            this.parent.notify('actionBegin', { eventArgs: eventArgs, action: 'format' });
            if (eventArgs.cancel) {
                args.cancel = true;
                return;
            }
        }
        if (args.borderType) {
            this.setTypedBorder(sheet, args.style.border, indexes, args.borderType, args.onActionUpdate, mergeBorderRows);
            delete args.style.border;
            delete eventArgs.style.border;
        }
        var i;
        var j;
        var props = { cell: null, rowIdx: 0, colIdx: 0, eventOnly: true, preventEvt: !triggerEvt };
        var triggerBeforeEvent = function (cellStyle) {
            props.cell = { style: cellStyle };
            props.rowIdx = i;
            props.colIdx = j;
            return updateCell(_this.parent, sheet, props);
        };
        if (eventArgs.style.borderTop !== undefined) {
            for (j = indexes[1]; j <= indexes[3]; j++) {
                i = indexes[0];
                if (!triggerBeforeEvent({ borderTop: eventArgs.style.borderTop })) {
                    if (!args.isUndoRedo) {
                        this.checkAdjacentBorder(sheet, 'borderBottom', i - 1, j);
                        this.checkFullBorder(sheet, 'borderBottom', i - 1, j);
                    }
                    this.checkFullBorder(sheet, 'borderTop', i, j);
                    this.setCellBorder(sheet, props.cell.style, i, j, args.onActionUpdate, j === indexes[3], null, null, args.isUndoRedo, mergeBorderRows);
                }
            }
            delete eventArgs.style.borderTop;
        }
        if (eventArgs.style.borderBottom !== undefined) {
            var firstCell = void 0;
            var lastCell = void 0;
            for (j = indexes[1]; j <= indexes[3]; j++) {
                i = indexes[0];
                firstCell = getCell(i, j, sheet, false, true);
                if (firstCell.rowSpan > 0) {
                    lastCell = getCell(indexes[2], indexes[1], sheet, false, true);
                }
                else {
                    lastCell = getCell(indexes[2], indexes[3], sheet, false, true);
                }
                if (!(firstCell.rowSpan > 1 && lastCell.rowSpan < 0)) {
                    i = indexes[2];
                }
                var mergeArgs = { range: [i, j, i, j] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                i = mergeArgs.range[0];
                if (!triggerBeforeEvent({ borderBottom: eventArgs.style.borderBottom })) {
                    if (!args.isUndoRedo) {
                        this.checkAdjacentBorder(sheet, 'borderTop', indexes[2] + 1, j);
                        this.checkFullBorder(sheet, 'borderTop', indexes[2] + 1, j);
                    }
                    this.checkFullBorder(sheet, 'borderBottom', indexes[2], j);
                    this.setCellBorder(sheet, props.cell.style, i, j, args.onActionUpdate, j === indexes[3], null, null, args.isUndoRedo);
                    this.setBottomBorderPriority(sheet, indexes[2], j);
                }
            }
            delete eventArgs.style.borderBottom;
        }
        if (eventArgs.style.borderLeft !== undefined) {
            for (var i_1 = indexes[0]; i_1 <= indexes[2]; i_1++) {
                j = indexes[1];
                if (!triggerBeforeEvent({ borderLeft: eventArgs.style.borderLeft })) {
                    if (!args.isUndoRedo) {
                        this.checkAdjacentBorder(sheet, 'borderRight', i_1, j - 1);
                        this.checkFullBorder(sheet, 'borderRight', i_1, j - 1);
                    }
                    this.checkFullBorder(sheet, 'borderLeft', i_1, j);
                    this.setCellBorder(sheet, props.cell.style, i_1, j, args.onActionUpdate, null, null, null, args.isUndoRedo);
                }
            }
            delete eventArgs.style.borderLeft;
        }
        if (eventArgs.style.borderRight !== undefined) {
            for (var i_2 = indexes[0]; i_2 <= indexes[2]; i_2++) {
                j = indexes[3];
                var mergeArgs = { range: [i_2, j, i_2, j] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                j = mergeArgs.range[1];
                if (!triggerBeforeEvent({ borderRight: eventArgs.style.borderRight })) {
                    if (!args.isUndoRedo) {
                        this.checkAdjacentBorder(sheet, 'borderLeft', i_2, j + 1);
                        this.checkFullBorder(sheet, 'borderLeft', i_2, j + 1);
                    }
                    this.checkFullBorder(sheet, 'borderRight', i_2, j);
                    this.setCellBorder(sheet, props.cell.style, i_2, j, args.onActionUpdate, null, null, null, args.isUndoRedo);
                }
            }
            delete eventArgs.style.borderRight;
        }
        var border;
        var isFullBorder;
        var styleKeys = Object.keys(eventArgs.style);
        if (styleKeys.length) {
            var cell = void 0;
            var validation = void 0;
            var col = void 0;
            var parent_1 = this.parent;
            var activeSheet = parent_1.viewport && this.parent.getActiveSheet().id === sheet.id;
            var frozenRow = this.parent.frozenRowCount(sheet);
            var frozenCol = this.parent.frozenColCount(sheet);
            var viewport = [frozenRow + parent_1.viewport.topIndex, frozenCol + parent_1.viewport.leftIndex,
                parent_1.viewport.bottomIndex, parent_1.viewport.rightIndex];
            var uiRefresh = void 0;
            var row = void 0;
            var checkHeight = void 0;
            var formatColor = void 0;
            var isFontColorApplied = styleKeys.indexOf('color') > -1;
            var isColorApplied = isFontColorApplied || styleKeys.indexOf('backgroundColor') > -1;
            for (i = indexes[0]; i <= indexes[2]; i++) {
                row = getRow(sheet, i) || {};
                if (row.isFiltered) {
                    continue;
                }
                uiRefresh = (i >= viewport[0] && i <= viewport[2]) || i < frozenRow;
                checkHeight = false;
                for (j = indexes[1]; j <= indexes[3]; j++) {
                    if (triggerBeforeEvent(eventArgs.style)) {
                        continue;
                    }
                    if (isFullBorder === undefined) {
                        if (eventArgs.style.border !== undefined) {
                            border = eventArgs.style.border;
                            delete eventArgs.style.border;
                            isFullBorder = true;
                        }
                        else {
                            isFullBorder = false;
                        }
                    }
                    cell = getCell(i, j, sheet, false, true);
                    col = sheet.columns[j];
                    if (cell.rowSpan > 1 || cell.colSpan > 1) {
                        for (var k = i, rowSpanLen = cell.rowSpan > 1 ? i + (cell.rowSpan - 1) : i; k <= rowSpanLen; k++) {
                            for (var l = j, colSpanLen = cell.colSpan > 1 ? j + (cell.colSpan - 1) : j; l <= colSpanLen; l++) {
                                if (isFullBorder) {
                                    this.setFullBorder(sheet, border, indexes, k, l, args.onActionUpdate, true);
                                }
                                this.setCellStyle(sheet, k, l, eventArgs.style);
                            }
                        }
                    }
                    if (isFullBorder) {
                        this.setFullBorder(sheet, border, indexes, i, j, args.onActionUpdate, undefined, mergeBorderRows);
                    }
                    this.setCellStyle(sheet, i, j, eventArgs.style);
                    if (!activeSheet) {
                        continue;
                    }
                    if (uiRefresh && ((j >= viewport[1] && j <= viewport[3]) || j < frozenCol)) {
                        formatColor = null;
                        if (isFontColorApplied && cell.format && cell.format.includes('[')) {
                            var colorCode = getColorCode(cell.format);
                            if (colorCode) {
                                formatColor = colorCode.toLowerCase();
                            }
                        }
                        this.parent.notify(applyCellFormat, { style: eventArgs.style, rowIdx: i, colIdx: j,
                            lastCell: j === indexes[3], isHeightCheckNeeded: true, manualUpdate: true, onActionUpdate: args.onActionUpdate,
                            formatColor: formatColor });
                        if (isColorApplied) {
                            validation = cell.validation || (checkColumnValidation(col, i, j) && col.validation);
                            if (validation && validation.isHighlighted) {
                                this.parent.notify(updateHighlight, {
                                    rowIdx: i, colIdx: j, cell: cell, validation: validation, col: cell.validation && col
                                });
                            }
                        }
                    }
                    else if (!row.customHeight) {
                        checkHeight = checkHeight || isHeightCheckNeeded(eventArgs.style, args.onActionUpdate);
                        if (checkHeight) {
                            this.parent.notify(applyCellFormat, { rowIdx: i, colIdx: j, lastCell: j === indexes[3], checkHeight: true,
                                outsideViewport: !uiRefresh, onActionUpdate: args.onActionUpdate });
                        }
                    }
                }
            }
        }
        if (isFullBorder) {
            eventArgs.style.border = border;
        }
        updateMergeBorder(this.parent, mergeBorderRows, [indexes[1], indexes[3]]);
        this.parent.setUsedRange(indexes[2], indexes[3]);
        if (args.refreshRibbon) {
            this.parent.notify(activeCellChanged, null);
        }
        if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
            this.parent.notify(applyCF, { indexes: indexes });
        }
        if (triggerEvt) {
            eventArgs.style = style;
            eventArgs.range = sheet.name + "!" + rng;
            this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'format' });
        }
    };
    WorkbookCellFormat.prototype.setBottomBorderPriority = function (sheet, rowIdx, colIdx) {
        if (isHiddenRow(sheet, rowIdx + 1)) {
            var pIdx = this.skipHiddenRows(sheet, rowIdx + 1);
            var pCellStyle = this.parent.getCellStyleValue(['borderTop'], [pIdx, colIdx]).borderTop;
            if (pCellStyle !== '') {
                sheet.rows[rowIdx].cells[colIdx].style.bottomPriority = true;
            }
        }
    };
    WorkbookCellFormat.prototype.setFullBorder = function (sheet, border, indexes, i, j, actionUpdate, modelUpdate, mergeBorderRows) {
        var style = {};
        if (i === indexes[0]) {
            this.checkAdjacentBorder(sheet, 'borderBottom', i - 1, j);
            this.checkFullBorder(sheet, 'borderBottom', i - 1, j);
        }
        if (j === indexes[1]) {
            this.checkAdjacentBorder(sheet, 'borderRight', i, j - 1);
            this.checkFullBorder(sheet, 'borderRight', i, j - 1);
        }
        if (j === indexes[3]) {
            this.checkAdjacentBorder(sheet, 'borderLeft', i, j + 1);
            this.checkFullBorder(sheet, 'borderLeft', i, j + 1);
        }
        else {
            this.checkAdjacentBorder(sheet, 'border', i, j + 1);
        }
        style.borderRight = border;
        style.borderTop = border;
        style.borderLeft = border;
        style.borderBottom = border;
        this.setCellBorder(sheet, style, i, j, actionUpdate, j === indexes[3], null, modelUpdate, undefined, mergeBorderRows);
        if (i === indexes[2]) {
            this.checkAdjacentBorder(sheet, 'borderTop', i + 1, j);
            this.checkFullBorder(sheet, 'borderTop', i + 1, j);
            this.setBottomBorderPriority(sheet, i, j);
        }
        else {
            this.checkAdjacentBorder(sheet, 'border', i + 1, j);
        }
    };
    WorkbookCellFormat.prototype.checkAdjacentBorder = function (sheet, prop, rowIdx, colIdx) {
        var style = {};
        if (this.parent.getCellStyleValue([prop], [rowIdx, colIdx])["" + prop] !== '') {
            style["" + prop] = undefined;
            this.setCellStyle(sheet, rowIdx, colIdx, style);
        }
    };
    WorkbookCellFormat.prototype.checkFullBorder = function (sheet, prop, rowIdx, colIdx) {
        var border = this.parent.getCellStyleValue(['border'], [rowIdx, colIdx]).border;
        if (border !== '') {
            var style_1 = { border: undefined };
            ['borderBottom', 'borderTop', 'borderLeft', 'borderRight'].forEach(function (value) {
                if (value !== prop) {
                    style_1["" + value] = border;
                }
            });
            this.setCellStyle(sheet, rowIdx, colIdx, style_1);
        }
    };
    WorkbookCellFormat.prototype.textDecorationActionUpdate = function (args) {
        var sheet = this.parent.getActiveSheet();
        var eventArgs = { range: sheet.selectedRange, style: args.style, requestType: 'CellFormat' };
        var indexes = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var hasReadOnlyCells = isReadOnlyCells(this.parent, indexes);
        if (hasReadOnlyCells) {
            this.parent.notify(workbookReadonlyAlert, null);
            return;
        }
        this.parent.trigger('beforeCellFormat', eventArgs);
        this.parent.notify('actionBegin', { eventArgs: eventArgs, action: 'format' });
        if (eventArgs.cancel) {
            args.cancel = true;
            return;
        }
        var value = args.style.textDecoration.toLowerCase();
        var changedValue = value;
        var activeCellIndexes = getRangeIndexes(sheet.activeCell);
        var cellValue = this.parent.getCellStyleValue(['textDecoration'], activeCellIndexes).textDecoration.toLowerCase();
        var removeProp = false;
        if (cellValue === 'underline') {
            changedValue = value === 'underline' ? 'none' : 'underline line-through';
        }
        else if (cellValue === 'line-through') {
            changedValue = value === 'line-through' ? 'none' : 'underline line-through';
        }
        else if (cellValue === 'underline line-through') {
            changedValue = value === 'underline' ? 'line-through' : 'underline';
            removeProp = true;
        }
        if (changedValue === 'none') {
            removeProp = true;
        }
        var changedStyle = { textDecoration: changedValue };
        this.format({ style: changedStyle, range: activeCellIndexes, refreshRibbon: args.refreshRibbon, onActionUpdate: true });
        for (var i = indexes[0]; i <= indexes[2]; i++) {
            for (var j = indexes[1]; j <= indexes[3]; j++) {
                if (i === activeCellIndexes[0] && j === activeCellIndexes[1]) {
                    continue;
                }
                changedStyle = {};
                cellValue = this.parent.getCellStyleValue(['textDecoration'], [i, j]).textDecoration.toLowerCase();
                if (cellValue === 'none') {
                    if (removeProp) {
                        continue;
                    }
                    changedStyle.textDecoration = value;
                }
                else if (cellValue === 'underline' || cellValue === 'line-through') {
                    if (removeProp) {
                        if (value === cellValue) {
                            changedStyle.textDecoration = 'none';
                        }
                        else {
                            continue;
                        }
                    }
                    else {
                        changedStyle.textDecoration = value !== cellValue ? 'underline line-through' : value;
                    }
                }
                else if (cellValue === 'underline line-through') {
                    if (removeProp) {
                        changedStyle.textDecoration = value === 'underline' ? 'line-through' : 'underline';
                    }
                    else {
                        continue;
                    }
                }
                this.format({ style: changedStyle, range: [i, j, i, j], refreshRibbon: args.refreshRibbon, onActionUpdate: true });
            }
        }
        eventArgs.range = sheet.name + '!' + eventArgs.range;
        eventArgs.style.textDecoration = changedValue;
        this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'format' });
    };
    WorkbookCellFormat.prototype.setTypedBorder = function (sheet, border, range, type, actionUpdate, mergeBorderRows) {
        var prevBorder;
        if (type === 'Outer') {
            for (var colIdx = range[1]; colIdx <= range[3]; colIdx++) {
                this.checkAdjacentBorder(sheet, 'borderBottom', range[0] - 1, colIdx);
                this.checkFullBorder(sheet, 'borderBottom', range[0] - 1, colIdx);
                this.setCellBorder(sheet, { borderTop: border }, range[0], colIdx, actionUpdate, colIdx === range[3], undefined, undefined, undefined, mergeBorderRows);
                this.checkAdjacentBorder(sheet, 'borderTop', range[2] + 1, colIdx);
                this.checkFullBorder(sheet, 'borderTop', range[2] + 1, colIdx);
                this.setCellBorder(sheet, { borderBottom: border }, range[2], colIdx, actionUpdate, colIdx === range[3], type);
                this.setBottomBorderPriority(sheet, range[2], colIdx);
            }
            for (var rowIdx = range[0]; rowIdx <= range[2]; rowIdx++) {
                this.checkAdjacentBorder(sheet, 'borderRight', rowIdx, range[1] - 1);
                this.checkFullBorder(sheet, 'borderRight', rowIdx, range[1] - 1);
                this.setCellBorder(sheet, { borderLeft: border }, rowIdx, range[1], actionUpdate);
                this.checkAdjacentBorder(sheet, 'borderLeft', rowIdx, range[3] + 1);
                this.checkFullBorder(sheet, 'borderLeft', rowIdx, range[3] + 1);
                this.setCellBorder(sheet, { borderRight: border }, rowIdx, range[3], actionUpdate, null, type);
            }
        }
        else if (type === 'Inner') {
            var mergeArgs = { range: [range[0], range[1], range[0], range[1]] };
            this.parent.notify(mergedRange, mergeArgs);
            if (mergeArgs.range[0] === range[0] && mergeArgs.range[1] === range[1] &&
                mergeArgs.range[2] === range[2] && mergeArgs.range[3] === range[3]) {
                return;
            }
            for (var i = range[0]; i <= range[2]; i++) {
                for (var j = range[1]; j <= range[3]; j++) {
                    var style = {};
                    prevBorder = this.parent.getCellStyleValue(['border'], [i, j]).border;
                    if (prevBorder !== '') {
                        style.border = undefined;
                        if (j === range[3] || j === range[1] || i === range[0] || i === range[2]) {
                            if (i === range[0]) {
                                style.borderTop = prevBorder;
                            }
                            if (i === range[2]) {
                                style.borderBottom = prevBorder;
                            }
                            if (j === range[3]) {
                                style.borderRight = prevBorder;
                            }
                            if (j === range[1]) {
                                style.borderLeft = prevBorder;
                            }
                        }
                    }
                    if (j !== range[3]) {
                        style.borderRight = border;
                    }
                    if (i !== range[0]) {
                        style.borderTop = border;
                    }
                    if (i !== range[2]) {
                        style.borderBottom = border;
                    }
                    if (j !== range[1]) {
                        style.borderLeft = border;
                    }
                    this.setCellBorder(sheet, style, i, j, actionUpdate, j === range[3], undefined, undefined, undefined, mergeBorderRows);
                }
            }
        }
        else if (type === 'Vertical') {
            for (var i = range[0]; i <= range[2]; i++) {
                for (var j = range[1]; j <= range[3]; j++) {
                    var style = { borderRight: border, borderLeft: border };
                    if (j === range[1]) {
                        this.checkAdjacentBorder(sheet, 'borderRight', i, j - 1);
                        this.checkFullBorder(sheet, 'borderRight', i, j - 1);
                    }
                    if (j === range[3]) {
                        this.checkAdjacentBorder(sheet, 'borderLeft', i, j + 1);
                        this.checkFullBorder(sheet, 'borderLeft', i, j + 1);
                    }
                    this.setCellBorder(sheet, style, i, j, actionUpdate);
                }
            }
        }
        else {
            for (var i = range[0]; i <= range[2]; i++) {
                for (var j = range[1]; j <= range[3]; j++) {
                    var style = { borderTop: border, borderBottom: border };
                    if (i === range[0]) {
                        this.checkAdjacentBorder(sheet, 'borderBottom', i - 1, j);
                        this.checkFullBorder(sheet, 'borderBottom', i - 1, j);
                    }
                    this.setCellBorder(sheet, style, i, j, actionUpdate, j === range[3]);
                    if (i === range[2]) {
                        this.checkAdjacentBorder(sheet, 'borderTop', i + 1, j);
                        this.checkFullBorder(sheet, 'borderTop', i + 1, j);
                        this.setBottomBorderPriority(sheet, i, j);
                    }
                }
            }
        }
    };
    WorkbookCellFormat.prototype.setCellBorder = function (sheet, style, rowIdx, colIdx, actionUpdate, lastCell, type, modelUpdate, isUndoRedo, mergeBorderRows) {
        var cell = getCell(rowIdx, colIdx, sheet);
        var column = getColumn(sheet, colIdx);
        var row = getRow(sheet, rowIdx);
        if ((cell && cell.isReadOnly) || (column && column.isReadOnly) || (row && row.isReadOnly)) {
            return;
        }
        this.setCellStyle(sheet, rowIdx, colIdx, style);
        if (!modelUpdate && this.parent.getActiveSheet().id === sheet.id) {
            if (type === 'Outer' && (style.borderBottom || style.borderRight)) {
                var mergeArgs = { range: [rowIdx, colIdx, rowIdx, colIdx] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                rowIdx = mergeArgs.range[0];
                colIdx = mergeArgs.range[1];
            }
            if (isUndoRedo) {
                if (style.borderTop === '' && this.parent.getCellStyleValue(['borderBottom'], [rowIdx - 1, colIdx]).borderBottom !== '') {
                    style.borderTop = this.parent.getCellStyleValue(['borderBottom'], [rowIdx - 1, colIdx]).borderBottom;
                }
                if (style.borderLeft === '' && this.parent.getCellStyleValue(['borderRight'], [rowIdx, colIdx - 1]).borderRight !== '') {
                    style.borderLeft = this.parent.getCellStyleValue(['borderRight'], [rowIdx, colIdx - 1]).borderRight;
                }
                if (style.borderRight === '' && this.parent.getCellStyleValue(['borderLeft'], [rowIdx, colIdx + 1]).borderLeft !== '') {
                    style.borderRight = this.parent.getCellStyleValue(['borderLeft'], [rowIdx, colIdx + 1]).borderLeft;
                }
            }
            this.parent.notify(applyCellFormat, {
                style: style, rowIdx: rowIdx, colIdx: colIdx, onActionUpdate: actionUpdate, first: '', lastCell: lastCell,
                isHeightCheckNeeded: true, manualUpdate: true, mergeBorderRows: mergeBorderRows
            });
        }
    };
    WorkbookCellFormat.prototype.setCellStyle = function (sheet, rowIdx, colIdx, style) {
        if (!sheet.rows[rowIdx]) {
            sheet.rows[rowIdx] = { cells: [] };
        }
        else if (!sheet.rows[rowIdx].cells) {
            sheet.rows[rowIdx].cells = [];
        }
        if (!sheet.rows[rowIdx].cells[colIdx]) {
            sheet.rows[rowIdx].cells[colIdx] = {};
        }
        if (!sheet.rows[rowIdx].cells[colIdx].style) {
            sheet.rows[rowIdx].cells[colIdx].style = {};
        }
        Object.assign(sheet.rows[rowIdx].cells[colIdx].style, style, null, true);
    };
    WorkbookCellFormat.prototype.skipHiddenRows = function (sheet, startIdx) {
        startIdx++;
        if (isHiddenRow(sheet, startIdx)) {
            startIdx = this.skipHiddenRows(sheet, startIdx);
        }
        return startIdx;
    };
    WorkbookCellFormat.prototype.addEventListener = function () {
        this.parent.on(setCellFormat, this.format, this);
        this.parent.on(textDecorationUpdate, this.textDecorationActionUpdate, this);
        this.parent.on(clear, this.clearCellObj, this);
    };
    WorkbookCellFormat.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setCellFormat, this.format);
            this.parent.off(textDecorationUpdate, this.textDecorationActionUpdate);
            this.parent.off(clear, this.clearCellObj);
        }
    };
    WorkbookCellFormat.prototype.clearCellObj = function (options) {
        var lastIndex = options.range ? options.range.lastIndexOf('!') : 0;
        var clrRange = options.range ? (lastIndex > 0) ? options.range.substring(lastIndex + 1) : options.range
            : this.parent.getActiveSheet().selectedRange;
        var sheetIdx = (options.range && lastIndex > 0) ?
            getSheetIndex(this.parent, options.range.substring(0, lastIndex)) : this.parent.activeSheetIndex;
        var sheet = getSheet(this.parent, sheetIdx);
        var range = getSwapRange(getIndexesFromAddress(clrRange));
        var sRowIdx = range[0];
        var eRowIdx = range[2];
        var cf = sheet.conditionalFormats && sheet.conditionalFormats.length &&
            [].slice.call(sheet.conditionalFormats);
        var cfRule = [];
        var cfRefreshAll;
        var evtArgs;
        var sColIdx;
        var eColIdx;
        var isValExist;
        for (sRowIdx; sRowIdx <= eRowIdx; sRowIdx++) {
            sColIdx = range[1];
            eColIdx = range[3];
            for (sColIdx; sColIdx <= eColIdx; sColIdx++) {
                var cell = getCell(sRowIdx, sColIdx, sheet);
                var isReadonlyCell = isReadOnly(cell, getColumn(sheet, sColIdx), getRow(sheet, sRowIdx));
                if (cell && (options.type === 'Clear All' || options.type === 'Clear Formats')) {
                    if (cell.rowSpan > 1 || cell.colSpan > 1) {
                        var mergeArgs = { range: [sRowIdx, sColIdx, sRowIdx, sColIdx] };
                        this.parent.notify(mergedRange, mergeArgs);
                        var mergedRanges = mergeArgs.range;
                        if (range[0] <= mergedRanges[0] && range[1] <= mergedRanges[1] && range[2] >= mergedRanges[2] &&
                            range[3] >= mergedRanges[3]) {
                            this.parent.notify(setMerge, { merge: false, range: mergedRanges, type: 'All', sheetIndex: sheetIdx,
                                preventRefresh: sheetIdx !== this.parent.activeSheetIndex });
                        }
                    }
                    if (!!cell.rowSpan && cell.rowSpan !== 1 || !!cell.colSpan && cell.colSpan !== 1) {
                        continue;
                    }
                }
                if (cell && !isReadonlyCell) {
                    switch (options.type) {
                        case 'Clear Formats':
                            delete cell.format;
                            delete cell.rowSpan;
                            delete cell.style;
                            delete cell.wrap;
                            delete cell.colSpan;
                            delete cell.formattedText;
                            if (cell.hyperlink) {
                                cell.style = { textDecoration: 'none', color: 'inherit' };
                            }
                            break;
                        case 'Clear Contents':
                            if (cell.hyperlink) {
                                this.parent.notify(deleteHyperlink, { sheet: sheet, rowIdx: sRowIdx, colIdx: sColIdx, preventRefresh: true });
                                cell.style = { textDecoration: 'underline', color: '#00e' };
                            }
                            isValExist = !!(cell.value || cell.formula);
                            delete cell.value;
                            delete cell.formula;
                            delete cell.formattedText;
                            if (isValExist) {
                                evtArgs = { action: 'refreshCalculate', rowIndex: sRowIdx, colIndex: sColIdx, sheetIndex: sheetIdx };
                                this.parent.notify(workbookFormulaOperation, evtArgs);
                                if (cf && !cfRefreshAll) {
                                    cfRefreshAll = evtArgs.isFormulaDependent;
                                    if (!cfRefreshAll) {
                                        updateCFModel(cf, cfRule, sRowIdx, sColIdx);
                                    }
                                }
                            }
                            break;
                        case 'Clear Hyperlinks':
                            delete cell.hyperlink;
                            break;
                        case 'Clear All':
                            isValExist = !!(cell.value || cell.formula);
                            setCell(sRowIdx, sColIdx, sheet, {}, false);
                            if (isValExist) {
                                evtArgs = { action: 'refreshCalculate', rowIndex: sRowIdx, colIndex: sColIdx, sheetIndex: sheetIdx };
                                this.parent.notify(workbookFormulaOperation, evtArgs);
                                if (cf && !cfRefreshAll) {
                                    cfRefreshAll = evtArgs.isFormulaDependent;
                                }
                            }
                            break;
                    }
                }
            }
        }
        if ((cfRule.length || cfRefreshAll) && sheetIdx === this.parent.activeSheetIndex) {
            this.parent.notify(applyCF, { cfModel: !cfRefreshAll && cfRule, refreshAll: cfRefreshAll, isAction: true });
        }
    };
    /**
     * To destroy workbook cell format.
     *
     * @returns {void} - To destroy workbook cell format.
     */
    WorkbookCellFormat.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the workbook cell format module name.
     *
     *  @returns {void}
     */
    WorkbookCellFormat.prototype.getModuleName = function () {
        return 'workbookcellformat';
    };
    return WorkbookCellFormat;
}());

/**
 * The `WorkbookEdit` module is used to handle the editing functionalities in Workbook.
 */
var WorkbookEdit = /** @class */ (function () {
    /**
     * Constructor for edit module in Workbook.
     *
     * @private
     * @param {Workbook} workbook - Specifies the workbook.
     */
    function WorkbookEdit(workbook) {
        this.parent = workbook;
        this.addEventListener();
    }
    /**
     * To destroy the edit module.
     *
     * @returns {void} - destroy the edit module
     * @hidden
     */
    WorkbookEdit.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookEdit.prototype.addEventListener = function () {
        this.parent.on(workbookEditOperation, this.performEditOperation, this);
    };
    WorkbookEdit.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(workbookEditOperation, this.performEditOperation);
        }
    };
    /**
     * Get the module name.
     *
     * @returns {string} - string
     * @private
     */
    WorkbookEdit.prototype.getModuleName = function () {
        return 'workbookEdit';
    };
    WorkbookEdit.prototype.performEditOperation = function (args) {
        var action = args.action;
        switch (action) {
            case 'updateCellValue':
                args.isFormulaDependent = this.updateCellValue(args.address, args.value, args.sheetIndex, args.isValueOnly, args.skipFormatCheck, args.isRandomFormula, args.skipCellFormat, args.isDelete, args.deletedRange, args.fillType, args.cellInformation, args.isRedo, args.isDependentUpdate, args.actionName, args.isPaste);
                break;
        }
    };
    WorkbookEdit.prototype.updateCellValue = function (address, value, sheetIdx, isValueOnly, skipFormatCheck, isRandomFormula, skipCellFormat, isDelete, deletedRange, fillType, cellInformation, isRedo, isDependentUpdate, actionName, isPaste) {
        if (sheetIdx === undefined) {
            sheetIdx = this.parent.activeSheetIndex;
        }
        var range;
        var isFormulaDependent;
        if (typeof address === 'string') {
            range = getRangeIndexes(address);
        }
        else {
            range = address;
        }
        var sheet = getSheet(this.parent, sheetIdx);
        var cell = getCell(range[0], range[1], sheet, true);
        if (!cell) {
            cell = sheet.rows[range[0]].cells[range[1]] = {};
        }
        if (!isValueOnly) {
            var isFormula = checkIsFormula(value);
            isFormula = value === '#SPILL!' ? true : isFormula;
            var skipFormula = false; // for unique formula
            if (cell.formula && cell.formula.indexOf('UNIQUE') > -1 && value === '') {
                skipFormula = true;
            }
            var isNotTextFormat = getTypeFromFormat(cell.format) !== 'Text' && (!isFormula ||
                !value.toLowerCase().startsWith('=text('));
            isFormula = getTypeFromFormat(cell.format) === 'Text' ? false : isFormula;
            if (!isFormula && !skipFormula) {
                if (cell.formula) {
                    cell.formula = '';
                }
                cell.value = isNotTextFormat ? parseIntValue(value, isPaste) : value;
            }
            var eventArgs = {
                action: 'refreshCalculate',
                value: value,
                rowIndex: range[0],
                colIndex: range[1],
                sheetIndex: sheetIdx,
                isFormula: isFormula,
                isRandomFormula: isRandomFormula,
                isDelete: isDelete,
                deletedRange: deletedRange,
                fillType: fillType,
                isDependentRefresh: isDependentUpdate
            };
            if (isNotTextFormat && !skipFormatCheck) {
                var dateEventArgs = {
                    value: value,
                    rowIndex: range[0],
                    colIndex: range[1],
                    sheetIndex: sheetIdx,
                    updatedVal: '',
                    skipCellFormat: skipCellFormat
                };
                if (!isFormula) {
                    var cellType = getTypeFromFormat(cell.format);
                    var valArr = value ? value.toString().split('/') : [];
                    if ((cellType !== 'Number' && cellType !== 'Percentage' && cellType !== 'Fraction' && !(cellType === 'Scientific' && valArr.length === 2)) ||
                        (cellType === 'Fraction' && valArr.length !== 2)) {
                        this.parent.notify(checkDateFormat, dateEventArgs);
                    }
                    if (!isNullOrUndefined(dateEventArgs.updatedVal) && dateEventArgs.updatedVal.length > 0) {
                        cell.value = dateEventArgs.updatedVal;
                    }
                    else if (this.parent.isEdit && value && !isNumber(value)) {
                        var curSymbol = getNumberDependable(this.parent.locale, defaultCurrencyCode);
                        if (cell.format) {
                            if ((value.includes('%') || value.includes(curSymbol)) && isCustomDateTime(cell.format)) {
                                var formatArgs = {
                                    formattedText: value, value: value, format: 'General',
                                    cell: { value: value, format: 'General' }, isEdit: true
                                };
                                this.parent.notify(getFormattedCellObject, formatArgs);
                                if (formatArgs.format !== 'General' && ['Currency', 'Percentage'].indexOf(getTypeFromFormat(formatArgs.format)) > -1) {
                                    cell.format = formatArgs.format;
                                    cell.value = formatArgs.value;
                                }
                            }
                            else {
                                var evtArgs = {
                                    value: cell.value, format: cell.format, formattedText: cell.value,
                                    type: 'General', cell: cell, rowIndex: range[0], colIndex: range[1]
                                };
                                this.parent.notify(getFormattedCellObject, evtArgs);
                            }
                        }
                        else {
                            if (value.includes(curSymbol) || value.includes('%') ||
                                value.includes(getNumericObject(this.parent.locale).group)) {
                                var intl = new Internationalization();
                                var eventArgs_1 = {
                                    intl: intl, updateValue: true, value: '', curSymbol: curSymbol,
                                    cell: cell
                                };
                                this.parent.notify(checkNumberFormat, {
                                    args: eventArgs_1, intl: intl, fResult: value,
                                    cell: cell
                                });
                            }
                        }
                    }
                }
                else if (!isNullOrUndefined(value) && value.toLowerCase().includes('unique(') && value.length > 0) {
                    cell.value = value;
                }
            }
            if (value === '#SPILL!') {
                cell.value = value;
            }
            else {
                var args = { cellIdx: range, isUnique: false };
                this.parent.notify(checkUniqueRange, args);
                if (this.parent.calculationMode === 'Manual' && isFormula && isNullOrUndefined(isDependentUpdate) &&
                    (actionName !== 'autofill' || cell.formula !== '') && !this.parent.isEdit &&
                    isNullOrUndefined(this.parent.element.querySelector('.e-text-replaceInp'))) {
                    skipFormula = true;
                    if (!isRedo && cell.value === undefined) {
                        skipFormula = false;
                    }
                }
                if (!skipFormula && !isDelete) {
                    this.parent.notify(workbookFormulaOperation, eventArgs);
                    isFormulaDependent = eventArgs.isFormulaDependent;
                }
                else {
                    value = cell.value;
                }
                if (isFormula) {
                    cell.formula = eventArgs.value;
                    if (this.parent.calculationMode === 'Manual' && skipFormula && isRedo && !this.parent.isEdit && cellInformation &&
                        cellInformation.cellDetails && cellInformation.cellDetails.length > 0 &&
                        cellInformation.cutCellDetails.length === 0 &&
                        (!isNullOrUndefined(cellInformation.cellDetails[0].autoFillText) ||
                            !isNullOrUndefined(cellInformation.cellDetails[0].copyCellValue))) {
                        for (var i = 0; i < cellInformation.cellDetails.length; i++) {
                            if (cellInformation.cellDetails[i].rowIndex === address[0] &&
                                cellInformation.cellDetails[i].colIndex === address[1]) {
                                if (cellInformation.cellDetails[i].copyCellValue) {
                                    value = cell.value = cellInformation.cellDetails[i].copyCellValue;
                                }
                                else {
                                    value = cell.value = cellInformation.cellDetails[i].autoFillText;
                                }
                                break;
                            }
                        }
                    }
                    else {
                        value = cell.value;
                        if (this.parent.calculationMode === 'Manual' && cellInformation && isRedo && cellInformation.displayText) {
                            value = cell.value = cellInformation.displayText;
                        }
                    }
                    var formula = cell.formula.toLowerCase();
                    var isNeedFormatUpdate = getTypeFromFormat(cell.format) === 'Scientific' && !skipFormatCheck && this.parent.isEdit;
                    if (formula === '=now()' && (!cell.format || cell.format === 'General' || isNeedFormatUpdate)) {
                        cell.format = getFormatFromType('ShortDate') + " h:mm";
                    }
                    else if (formula.includes('=time(') && (!cell.format || isNeedFormatUpdate)) {
                        cell.format = 'h:mm AM/PM';
                    }
                    else if (formula.includes('=date(') && isNeedFormatUpdate) {
                        cell.format = getFormatFromType('ShortDate');
                    }
                }
                else if (cell.value && typeof cell.value === 'string' && (cell.value.indexOf('www.') === 0 ||
                    cell.value.indexOf('https://') === 0 || cell.value.indexOf('http://') === 0 || cell.value.indexOf('ftp://') === 0)) {
                    this.parent.notify(setLinkModel, { hyperlink: cell.value, cell: sheet.name + "!" + getCellAddress(range[0], range[1]) });
                }
            }
        }
        else {
            cell.value = value;
            if (cell.formattedText) {
                delete cell.formattedText;
            }
        }
        this.parent.setUsedRange(range[0], range[1], sheet);
        if (this.parent.chartColl.length && !this.parent.isEdit && !isRandomFormula) {
            this.parent.notify(refreshChart, { cell: cell, rIdx: range[0], cIdx: range[1], sheetIdx: sheetIdx, isRefreshChart: true });
        }
        return isFormulaDependent;
    };
    return WorkbookEdit;
}());

/**
 * The `WorkbookHyperlink` module is used to handle Hyperlink action in Spreadsheet.
 */
var WorkbookHyperlink = /** @class */ (function () {
    /**
     * Constructor for WorkbookSort module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     */
    function WorkbookHyperlink(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the sort module.
     *
     * @returns {void} - To destroy the sort module.
     */
    WorkbookHyperlink.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookHyperlink.prototype.addEventListener = function () {
        this.parent.on(setLinkModel, this.setLinkHandler, this);
    };
    WorkbookHyperlink.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setLinkModel, this.setLinkHandler);
        }
    };
    WorkbookHyperlink.prototype.setLinkHandler = function (args) {
        var hyperlink = args.hyperlink;
        var cellAddr = args.cell;
        var sheet;
        if (cellAddr && cellAddr.indexOf('!') !== -1) {
            var lastIndex = cellAddr.lastIndexOf('!');
            sheet = getSheet(this.parent, getSheetIndex(this.parent, cellAddr.substring(0, lastIndex)));
            cellAddr = cellAddr.substring(lastIndex + 1);
            if (!sheet) {
                return;
            }
        }
        else {
            sheet = this.parent.getActiveSheet();
            cellAddr = cellAddr || sheet.selectedRange;
        }
        var isProtected = !args.triggerEvt && sheet.isProtected;
        if (isProtected && !sheet.protectSettings.insertLink) {
            return;
        }
        var cellIdx = getSwapRange(getRangeIndexes(cellAddr));
        if (typeof (hyperlink) === 'string') {
            if (hyperlink.toLowerCase().indexOf('www.') === 0) {
                hyperlink = 'http://' + hyperlink;
            }
        }
        else {
            if (hyperlink.address.toLowerCase().indexOf('www.') === 0) {
                hyperlink.address = 'http://' + hyperlink.address;
            }
        }
        var cellModel;
        var activeCell = getRangeIndexes(sheet.activeCell);
        for (var rIdx = cellIdx[0]; rIdx <= cellIdx[2]; rIdx++) {
            for (var cIdx = cellIdx[1]; cIdx <= cellIdx[3]; cIdx++) {
                if (isProtected && isLocked(getCell(rIdx, cIdx, sheet), getColumn(sheet, cIdx))) {
                    continue;
                }
                cellModel = { hyperlink: hyperlink };
                if (!isNullOrUndefined(args.displayText)) {
                    if (args.triggerEvt || args.isUndoRedo) {
                        if (rIdx === activeCell[0] && cIdx === activeCell[1]) {
                            cellModel.value = args.displayText;
                            delete cellModel.formattedText;
                        }
                    }
                    else {
                        cellModel.value = args.displayText;
                        delete cellModel.formattedText;
                    }
                }
                cellModel.style = { textDecoration: 'underline', color: '#00e' };
                updateCell(this.parent, sheet, { cell: cellModel, rowIdx: rIdx, colIdx: cIdx, preventEvt: !args.triggerEvt });
            }
        }
    };
    /**
     * Gets the module name.
     *
     *@returns {string} - returns the module name.
     */
    WorkbookHyperlink.prototype.getModuleName = function () {
        return 'workbookHyperlink';
    };
    return WorkbookHyperlink;
}());

/**
 * The `WorkbookInsert` module is used to insert cells, rows, columns and sheets in to workbook.
 */
var WorkbookInsert = /** @class */ (function () {
    /**
     * Constructor for the workbook insert module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     * @private
     */
    function WorkbookInsert(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    // tslint:disable-next-line
    WorkbookInsert.prototype.insertModel = function (args) {
        var _this = this;
        var _a, _b, _c, _d;
        if (!args.model) {
            return;
        }
        var index;
        var model = [];
        var mergeCollection;
        var isModel;
        var maxHgtObj;
        if (typeof (args.start) === 'number') {
            index = args.start;
            args.end = args.end || index;
            if (index > args.end) {
                index = args.end;
                args.end = args.start;
            }
            if (args.modelType === 'Row' && index < args.model.maxHgts.length) {
                maxHgtObj = [];
            }
            for (var i = index; i <= args.end; i++) {
                model.push({});
                if (maxHgtObj) {
                    maxHgtObj.push(null);
                }
            }
        }
        else {
            if (args.start) {
                index = args.start[0].index || 0;
                model = args.start;
                isModel = true;
            }
            else {
                index = 0;
                model.push({});
            }
            if (args.modelType === 'Row' && index < args.model.maxHgts.length) {
                maxHgtObj = [];
                model.forEach(function () {
                    maxHgtObj.push(null);
                });
            }
        }
        var eventArgs = { model: model, index: index, modelType: args.modelType, insertType: args.insertType,
            cancel: false, isUndoRedo: args.isUndoRedo };
        var actionArgs = { eventArgs: eventArgs, action: 'insert' };
        if (args.isAction) {
            this.parent.notify(beginAction, actionArgs);
            if (eventArgs.cancel) {
                return;
            }
            delete eventArgs.cancel;
            eventArgs.isAction = args.isAction;
        }
        var insertArgs = { startIndex: index, endIndex: index + model.length - 1, modelType: args.modelType, sheet: args.model, isInsert: true };
        if (args.modelType === 'Row') {
            if (args.checkCount !== undefined && args.model.rows && args.checkCount === args.model.rows.length) {
                return;
            }
            this.parent.notify(refreshInsertDelete, insertArgs);
            args.model = args.model;
            if (!args.model.rows) {
                args.model.rows = [];
            }
            if (isModel && args.model.usedRange.rowIndex > -1 && index > args.model.usedRange.rowIndex) {
                for (var i = args.model.usedRange.rowIndex; i < index - 1; i++) {
                    model.splice(0, 0, {});
                }
            }
            var frozenRow = this.parent.frozenRowCount(args.model);
            if (index < frozenRow || (index <= frozenRow && args.freezePane)) {
                var newFrozenRows = args.model.frozenRows + model.length - ((index === frozenRow && frozenRow > 0) ? 1 : 0);
                this.parent.setSheetPropertyOnMute(args.model, 'frozenRows', newFrozenRows);
                eventArgs.freezePane = true;
            }
            (_a = args.model.rows).splice.apply(_a, [index, 0].concat(model));
            if (maxHgtObj) {
                (_b = args.model.maxHgts).splice.apply(_b, [index, 0].concat(maxHgtObj));
            }
            //this.setInsertInfo(args.model, index, model.length, 'count');
            this.setRowColCount(insertArgs.startIndex, insertArgs.endIndex, args.model, 'row');
            if (index > args.model.usedRange.rowIndex) {
                this.parent.setUsedRange(index + (model.length - 1), args.model.usedRange.colIndex, args.model, true);
            }
            else {
                this.parent.setUsedRange(args.model.usedRange.rowIndex + model.length, args.model.usedRange.colIndex, args.model, true);
            }
            var curIdx = index + model.length;
            var style_1;
            var cell = void 0;
            var newStyle_1;
            var parentCell_1;
            var mergeArgs = void 0;
            var _loop_1 = function (i) {
                if (args.model.rows[curIdx] && args.model.rows[curIdx].cells &&
                    args.model.rows[curIdx].cells[i]) {
                    cell = args.model.rows[curIdx].cells[i];
                    if (cell.rowSpan !== undefined && cell.rowSpan < 0 && cell.colSpan === undefined) {
                        mergeArgs = { range: [curIdx, i, curIdx, i], insertCount: model.length, insertModel: 'Row' };
                        this_1.parent.notify(insertMerge, mergeArgs);
                        if (!eventArgs.freezePane && mergeArgs.range[0] < frozenRow && mergeArgs.range[2] > frozenRow) {
                            eventArgs.freezePane = true;
                        }
                    }
                }
                parentCell_1 = getCell(index - 1, i, args.model, false, true);
                style_1 = parentCell_1.style;
                cell = getCell(index + 1, i, args.model, false, true);
                if (style_1 || parentCell_1.wrap) {
                    if (style_1) {
                        newStyle_1 = {};
                        Object.keys(style_1).forEach(function (key) {
                            if (!(key === 'borderLeft' || key === 'borderRight' || key === 'borderTop' || key === 'borderBottom')) {
                                newStyle_1[key] = style_1[key];
                            }
                        });
                        if (cell.style) {
                            this_1.checkBorder(cell.style, args.model.rows[index - 1].cells[i].style, newStyle_1);
                        }
                    }
                    if (!args.isUndoRedo || args.isRedo) {
                        model.forEach(function (row) {
                            if (!row.cells) {
                                row.cells = [];
                            }
                            if (!row.cells[i]) {
                                row.cells[i] = {};
                            }
                            if (style_1) {
                                if (!row.cells[i].style) {
                                    row.cells[i].style = {};
                                }
                                Object.assign(row.cells[i].style, newStyle_1);
                            }
                            if (parentCell_1.wrap) {
                                row.cells[i].wrap = true;
                            }
                        });
                    }
                }
            };
            var this_1 = this;
            for (var i = 0; i <= args.model.usedRange.colIndex; i++) {
                _loop_1(i);
            }
            eventArgs.sheetCount = args.model.rows.length;
        }
        else if (args.modelType === 'Column') {
            if (args.checkCount !== undefined && args.model.columns && args.checkCount === args.model.columns.length) {
                return;
            }
            this.parent.notify(refreshInsertDelete, insertArgs);
            args.model = args.model;
            if (!args.model.columns) {
                args.model.columns = [];
            }
            if (index && !args.model.columns[index - 1]) {
                args.model.columns[index - 1] = {};
            }
            (_c = args.model.columns).splice.apply(_c, [index, 0].concat(model));
            var frozenCol_1 = this.parent.frozenColCount(args.model);
            if (index < frozenCol_1 || (index <= frozenCol_1 && args.freezePane)) {
                var newFrozenCols = args.model.frozenColumns + model.length - ((index === frozenCol_1 && frozenCol_1 > 0) ? 1 : 0);
                this.parent.setSheetPropertyOnMute(args.model, 'frozenColumns', newFrozenCols);
                eventArgs.freezePane = true;
            }
            //this.setInsertInfo(args.model, index, model.length, 'fldLen', 'Column');
            this.setRowColCount(insertArgs.startIndex, insertArgs.endIndex, args.model, 'col');
            if (index > args.model.usedRange.colIndex) {
                this.parent.setUsedRange(args.model.usedRange.rowIndex, index + (model.length - 1), args.model, true);
            }
            else {
                this.parent.setUsedRange(args.model.usedRange.rowIndex, args.model.usedRange.colIndex + model.length, args.model, true);
            }
            if (!args.model.rows) {
                args.model.rows = [];
            }
            var cellModel = [];
            if (!args.columnCellsModel) {
                args.columnCellsModel = [];
            }
            for (var i = 0; i < model.length; i++) {
                cellModel.push(null);
            }
            mergeCollection = [];
            var cell = void 0;
            var style_2;
            var newStyle_2;
            var parentCell = void 0;
            for (var i = 0; i <= args.model.usedRange.rowIndex; i++) {
                if (!args.model.rows[i]) {
                    args.model.rows[i] = { cells: [] };
                }
                else if (!args.model.rows[i].cells) {
                    args.model.rows[i].cells = [];
                }
                if (index && !args.model.rows[i].cells[index - 1]) {
                    args.model.rows[i].cells[index - 1] = {};
                }
                (_d = args.model.rows[i].cells).splice.apply(_d, [index, 0].concat((args.columnCellsModel[i] &&
                    args.columnCellsModel[i].cells ? args.columnCellsModel[i].cells : cellModel)));
                var curIdx = index + model.length;
                if (args.model.rows[i].cells[curIdx]) {
                    cell = args.model.rows[i].cells[curIdx];
                    if (cell.colSpan !== undefined && cell.colSpan < 0 && cell.rowSpan === undefined) {
                        mergeCollection.push({
                            range: [i, curIdx, i, curIdx], insertCount: cellModel.length, insertModel: 'Column'
                        });
                    }
                }
                parentCell = getCell(i, index - 1, args.model, false, true);
                style_2 = parentCell.style;
                cell = getCell(i, index + 1, args.model, false, true);
                if (style_2 || parentCell.wrap) {
                    if (style_2) {
                        newStyle_2 = {};
                        Object.keys(style_2).forEach(function (key) {
                            if (!(key === 'borderLeft' || key === 'borderRight' || key === 'borderTop' || key === 'borderBottom')) {
                                newStyle_2[key] = style_2[key];
                            }
                        });
                        if (cell.style) {
                            this.checkBorder(cell.style, args.model.rows[i].cells[index - 1].style, newStyle_2);
                        }
                    }
                    if (!args.isUndoRedo || args.isRedo) {
                        for (var j = index; j < curIdx; j++) {
                            if (!args.model.rows[i].cells[j]) {
                                args.model.rows[i].cells[j] = {};
                            }
                            if (style_2) {
                                if (!args.model.rows[i].cells[j].style) {
                                    args.model.rows[i].cells[j].style = {};
                                }
                                Object.assign(args.model.rows[i].cells[j].style, newStyle_2);
                            }
                            if (parentCell.wrap) {
                                args.model.rows[i].cells[j].wrap = true;
                            }
                        }
                    }
                }
            }
            mergeCollection.forEach(function (mergeArgs) {
                _this.parent.notify(insertMerge, mergeArgs);
                if (!eventArgs.freezePane && mergeArgs.range[1] < frozenCol_1 && mergeArgs.range[3] > frozenCol_1) {
                    eventArgs.freezePane = true;
                }
            });
            eventArgs.sheetCount = args.model.columns.length;
        }
        else {
            if (args.checkCount !== undefined && args.checkCount === this.parent.sheets.length) {
                return;
            }
            var sheetModel = model;
            var sheetName = getSheetName(this.parent);
            var isFromUpdateAction = args.isFromUpdateAction;
            for (var i = 0; i < sheetModel.length; i++) {
                if (sheetModel[i].name) {
                    for (var j = 0; j < this.parent.sheets.length; j++) {
                        if (sheetModel[i].name === this.parent.sheets[j].name) {
                            sheetModel.splice(i, 1);
                            i--;
                            break;
                        }
                    }
                }
            }
            if (!sheetModel.length) {
                return;
            }
            delete model[0].index;
            this.parent.createSheet(index, model);
            var id_1;
            if (args.activeSheetIndex) {
                eventArgs.activeSheetIndex = args.activeSheetIndex;
                this.parent.setProperties({ activeSheetIndex: args.activeSheetIndex }, true);
            }
            else if (!args.isAction && args.start < this.parent.activeSheetIndex) {
                this.parent.setProperties({ activeSheetIndex: this.parent.skipHiddenSheets(this.parent.activeSheetIndex) }, true);
            }
            if (isFromUpdateAction) {
                this.parent.setProperties({ activeSheetIndex: getSheetIndex(this.parent, sheetName) }, true);
            }
            model.forEach(function (sheet) {
                if (isModel) {
                    _this.updateRangeModel(sheet.ranges);
                }
                var viewport = _this.parent.viewport;
                var refreshRange = [viewport.topIndex, viewport.leftIndex, viewport.bottomIndex, viewport.rightIndex];
                var args = {
                    sheet: sheet, resolveAfterFullDataLoaded: true,
                    indexes: refreshRange, promise: new Promise(function (resolve) { resolve((function () { })()); })
                };
                _this.parent.notify(updateSheetFromDataSource, args);
                id_1 = sheet.id;
                _this.parent.notify(workbookFormulaOperation, {
                    action: 'addSheet', visibleName: sheet.name, sheetName: 'Sheet' + id_1, sheetId: id_1
                });
            });
            eventArgs.activeSheetIndex = args.activeSheetIndex;
            eventArgs.sheetCount = this.parent.sheets.length;
        }
        if (args.modelType !== 'Sheet') {
            this.insertConditionalFormats(args);
            this.parent.notify(refreshClipboard, { start: index, end: index + model.length - 1, modelType: args.modelType, model: args.model, isInsert: true });
            eventArgs.activeSheetIndex = getSheetIndex(this.parent, args.model.name);
        }
        this.parent.notify(insert, actionArgs);
    };
    WorkbookInsert.prototype.setRowColCount = function (startIdx, endIdx, sheet, layout) {
        var prop = layout + 'Count';
        this.parent.setSheetPropertyOnMute(sheet, prop, sheet["" + prop] + ((endIdx - startIdx) + 1));
        if (sheet.id === this.parent.getActiveSheet().id) {
            this.parent.notify(updateRowColCount, { index: sheet["" + prop] - 1, update: layout, isInsert: true, start: startIdx, end: endIdx });
        }
    };
    WorkbookInsert.prototype.updateRangeModel = function (ranges) {
        ranges.forEach(function (range) {
            if (range.dataSource) {
                range.startCell = range.startCell || 'A1';
                range.showFieldAsHeader = range.showFieldAsHeader === undefined || range.showFieldAsHeader;
                range.template = range.template || '';
                range.address = range.address || 'A1';
            }
        });
    };
    WorkbookInsert.prototype.checkBorder = function (style, adjStyle, newStyle) {
        if (style.borderLeft && style.borderLeft === adjStyle.borderLeft) {
            newStyle.borderLeft = style.borderLeft;
        }
        if (style.borderRight && style.borderRight === adjStyle.borderRight) {
            newStyle.borderRight = style.borderRight;
        }
        if (style.borderTop && style.borderTop === adjStyle.borderTop) {
            newStyle.borderTop = style.borderTop;
        }
        if (style.borderBottom && style.borderBottom === adjStyle.borderBottom) {
            newStyle.borderBottom = style.borderBottom;
        }
    };
    WorkbookInsert.prototype.setInsertInfo = function (sheet, startIndex, count, totalKey, modelType) {
        if (modelType === void 0) { modelType = 'Row'; }
        var endIndex = count = startIndex + (count - 1);
        sheet.ranges.forEach(function (range) {
            if (range.info && startIndex < range.info["" + totalKey]) {
                if (!range.info["insert" + modelType + "Range"]) {
                    range.info["insert" + modelType + "Range"] = [[startIndex, endIndex]];
                }
                else {
                    range.info["insert" + modelType + "Range"].push([startIndex, endIndex]);
                }
                range.info["" + totalKey] += ((endIndex - startIndex) + 1);
            }
        });
    };
    WorkbookInsert.prototype.insertConditionalFormats = function (args) {
        var cfCollection = args.model.conditionalFormats;
        if (args.prevAction === 'delete') {
            this.parent.setSheetPropertyOnMute(args.model, 'conditionalFormats', args.conditionalFormats);
        }
        else if (cfCollection) {
            for (var i = 0, cfLength = cfCollection.length; i < cfLength; i++) {
                cfCollection[i].range = getRangeAddress(insertFormatRange(args, getRangeIndexes(cfCollection[i].range), !args.isAction && !args.isUndoRedo));
            }
        }
    };
    WorkbookInsert.prototype.addEventListener = function () {
        this.parent.on(insertModel, this.insertModel, this);
    };
    /**
     * Destroy workbook insert module.
     *
     * @returns {void} - destroy the workbook insert module.
     */
    WorkbookInsert.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookInsert.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(insertModel, this.insertModel);
        }
    };
    /**
     * Get the workbook insert module name.
     *
     * @returns {string} - Return the string.
     */
    WorkbookInsert.prototype.getModuleName = function () {
        return 'workbookinsert';
    };
    return WorkbookInsert;
}());

/**
 * The `WorkbookDelete` module is used to delete cells, rows, columns and sheets from workbook.
 */
var WorkbookDelete = /** @class */ (function () {
    /**
     * Constructor for the workbook delete module.
     *
     * @param {Workbook} parent - Specify the workbook
     * @private
     */
    function WorkbookDelete(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    // tslint:disable-next-line
    WorkbookDelete.prototype.deleteModel = function (args) {
        var _this = this;
        var sheetLength = this.parent.sheets.length;
        if (args.modelType === 'Sheet' && sheetLength === 1) {
            return;
        }
        var modelName = args.modelType.toLowerCase() + "s";
        args.start = args.start;
        if (args.start > args.end) {
            var startIdx = args.start;
            args.start = args.end;
            args.end = startIdx;
        }
        var eventArgs = { startIndex: args.start, endIndex: args.end, modelType: args.modelType,
            cancel: false, isUndoRedo: args.isUndoRedo };
        var actionArgs = { eventArgs: eventArgs, action: 'delete' };
        if (args.isAction) {
            this.parent.notify(beginAction, actionArgs);
            if (eventArgs.cancel) {
                return;
            }
        }
        var deletedCells;
        var prevCell;
        var mergeArgsCollection = [];
        var count = (args.end - args.start) + 1;
        var insertArgs = { startIndex: args.start, endIndex: args.end, modelType: args.modelType, sheet: args.model, isDelete: true };
        var isFinite = this.parent.scrollSettings.isFinite;
        if (args.modelType === 'Row') {
            if (args.checkCount !== undefined && args.checkCount === args.model.usedRange.rowIndex) {
                return;
            }
            this.parent.notify(refreshInsertDelete, insertArgs);
            args.model = args.model;
            if (isFinite) {
                if (args.start >= args.model.rowCount) {
                    return;
                }
                if (args.end >= args.model.rowCount) {
                    args.end = args.model.rowCount - 1;
                }
            }
            else {
                if (args.start > args.model.usedRange.rowIndex) {
                    return;
                }
                if (args.end > args.model.usedRange.rowIndex) {
                    args.end -= (args.end - args.model.usedRange.rowIndex);
                }
            }
            this.setRowColCount(args.start, args.end, args.model, 'row');
            if (args.start <= args.model.usedRange.rowIndex) {
                this.parent.setSheetPropertyOnMute(args.model, 'usedRange', { rowIndex: args.model.usedRange.rowIndex - ((args.end - args.start) + 1),
                    colIndex: args.model.usedRange.colIndex });
                if (args.model.usedRange.rowIndex < 0) {
                    this.parent.setSheetPropertyOnMute(args.model, 'usedRange', { rowIndex: 0, colIndex: args.model.usedRange.colIndex });
                }
            }
            var frozenRow = this.parent.frozenRowCount(args.model);
            if (args.start < frozenRow) {
                frozenRow = args.end < frozenRow ? (args.end - args.start) + 1 : frozenRow - args.start;
                frozenRow = args.model.frozenRows - frozenRow;
                this.parent.setSheetPropertyOnMute(args.model, 'frozenRows', frozenRow);
                eventArgs.freezePane = true;
            }
            var curIdx = args.end + 1;
            var cell = void 0;
            var mergeArgs = void 0;
            if (args.model.rows[args.start] && args.model.rows[args.start].cells) {
                for (var i = 0; i <= args.model.usedRange.colIndex; i++) {
                    if (args.model.rows[args.start].cells[i] &&
                        args.model.rows[args.start].cells[i].rowSpan !== undefined &&
                        args.model.rows[args.start].cells[i].rowSpan < 0 &&
                        args.model.rows[args.start].cells[i].colSpan === undefined) {
                        mergeArgs = { range: [args.start, i, args.start, i] };
                        this.parent.notify(activeCellMergedRange, mergeArgs);
                        mergeArgs.range = mergeArgs.range;
                        if (mergeArgs.range[2] <= args.end) {
                            prevCell = getCell(mergeArgs.range[0], i, args.model);
                            if (prevCell && prevCell.rowSpan > 1) {
                                if (prevCell.rowSpan - ((mergeArgs.range[2] - args.start) + 1) > 1) {
                                    setCell(mergeArgs.range[0], i, args.model, { colSpan: prevCell.rowSpan - ((mergeArgs.range[2] - args.start) + 1) }, true);
                                }
                                else {
                                    delete args.model.rows[mergeArgs.range[0]].cells[i].rowSpan;
                                }
                            }
                            mergeArgs = null;
                        }
                    }
                    if (args.model.rows[curIdx] && args.model.rows[curIdx].cells &&
                        args.model.rows[curIdx].cells[i] && args.model.rows[curIdx].cells[i].rowSpan
                        !== undefined && args.model.rows[curIdx].cells[i].rowSpan < 0 &&
                        args.model.rows[curIdx].cells[i].colSpan === undefined) {
                        if (!mergeArgs) {
                            mergeArgs = { range: [curIdx, i, curIdx, i] };
                            this.parent.notify(activeCellMergedRange, mergeArgs);
                        }
                        cell = new Object();
                        mergeArgs.range = mergeArgs.range;
                        Object.assign(cell, getCell(mergeArgs.range[0], mergeArgs.range[1], args.model));
                        if (cell && cell.rowSpan && (cell.rowSpan > 1 || cell.colSpan > 1)) {
                            var indexes = [];
                            indexes[1] = i;
                            indexes[3] = cell.colSpan > 1 ? i + (cell.colSpan - 1) : i;
                            mergeArgs.range = mergeArgs.range;
                            if (mergeArgs.range[0] < args.start) {
                                indexes[0] = indexes[2] = mergeArgs.range[0];
                                if (cell.rowSpan - count > 1) {
                                    indexes[2] += (cell.rowSpan - count - 1);
                                }
                            }
                            else {
                                indexes[0] = indexes[2] = args.start;
                                if (cell.rowSpan - ((args.end - mergeArgs.range[0]) + 1) > 1) {
                                    indexes[2] += ((cell.rowSpan - ((args.end - mergeArgs.range[0]) + 1)) - 1);
                                }
                            }
                            mergeArgsCollection.push({
                                range: indexes, isAction: false, preventRefresh: true, merge: true,
                                type: 'All', skipChecking: true
                            });
                        }
                    }
                    mergeArgs = null;
                }
            }
            eventArgs.sheetCount = args.model.usedRange.rowIndex;
        }
        else if (args.modelType === 'Column') {
            if (args.checkCount !== undefined && args.checkCount === args.model.usedRange.colIndex) {
                return;
            }
            this.parent.notify(refreshInsertDelete, insertArgs);
            args.model = args.model;
            if (isFinite) {
                if (args.start >= args.model.colCount) {
                    return;
                }
                if (args.end >= args.model.colCount) {
                    args.end = args.model.colCount - 1;
                }
            }
            else {
                if (args.start > args.model.usedRange.colIndex) {
                    return;
                }
                if (args.end > args.model.usedRange.colIndex) {
                    args.end -= (args.end - args.model.usedRange.colIndex);
                }
            }
            this.setRowColCount(args.start, args.end, args.model, 'col');
            if (args.start <= args.model.usedRange.colIndex) {
                this.parent.setSheetPropertyOnMute(args.model, 'usedRange', { rowIndex: args.model.usedRange.rowIndex, colIndex: args.model.usedRange.colIndex - count });
                if (args.model.usedRange.colIndex < 0) {
                    this.parent.setSheetPropertyOnMute(args.model, 'usedRange', { rowIndex: args.model.usedRange.rowIndex, colIndex: 0 });
                }
            }
            //this.setDeleteInfo(args.start, args.end, 'fldLen', 'Column');
            var frozenCol = this.parent.frozenColCount(args.model);
            if (args.start < frozenCol) {
                frozenCol = args.end < frozenCol ? (args.end - args.start) + 1 : frozenCol - args.start;
                frozenCol = args.model.frozenColumns - frozenCol;
                this.parent.setSheetPropertyOnMute(args.model, 'frozenColumns', frozenCol);
                this.parent.updateTopLeftCell();
                eventArgs.freezePane = true;
            }
            deletedCells = [];
            var curIdx = args.end + 1;
            var cell = void 0;
            var mergeArgs = void 0;
            for (var i = 0; i <= args.model.usedRange.rowIndex; i++) {
                deletedCells.push({});
                if (args.model.rows[i] && args.model.rows[i].cells) {
                    if (args.model.rows[i].cells[args.start] && args.model.rows[i].cells[args.start].colSpan !==
                        undefined && args.model.rows[i].cells[args.start].colSpan < 0 &&
                        args.model.rows[i].cells[args.start].rowSpan === undefined) {
                        mergeArgs = { range: [i, args.start, i, args.start] };
                        this.parent.notify(activeCellMergedRange, mergeArgs);
                        mergeArgs.range = mergeArgs.range;
                        if (mergeArgs.range[3] <= args.end) {
                            var prevCell_1 = getCell(i, mergeArgs.range[1], args.model);
                            if (prevCell_1 && prevCell_1.colSpan > 1) {
                                if (prevCell_1.colSpan - ((mergeArgs.range[3] - args.start) + 1) > 1) {
                                    setCell(i, mergeArgs.range[1], args.model, { colSpan: prevCell_1.colSpan - ((mergeArgs.range[3] - args.start) + 1) }, true);
                                }
                                else {
                                    delete args.model.rows[i].cells[mergeArgs.range[1]].colSpan;
                                }
                            }
                            mergeArgs = null;
                        }
                    }
                    if (args.model.rows[i].cells[curIdx] && args.model.rows[i].cells[curIdx].colSpan
                        !== undefined && args.model.rows[i].cells[curIdx].colSpan < 0 &&
                        args.model.rows[i].cells[curIdx].rowSpan === undefined) {
                        if (!mergeArgs) {
                            mergeArgs = { range: [i, curIdx, i, curIdx] };
                            this.parent.notify(activeCellMergedRange, mergeArgs);
                        }
                        cell = new Object();
                        mergeArgs.range = mergeArgs.range;
                        Object.assign(cell, getCell(mergeArgs.range[0], mergeArgs.range[1], args.model));
                        if (cell && cell.colSpan && (cell.colSpan > 1 || cell.rowSpan > 1)) {
                            var indexes = [];
                            indexes[0] = i;
                            indexes[2] = cell.rowSpan > 1 ? i + (cell.rowSpan - 1) : i;
                            mergeArgs.range = mergeArgs.range;
                            if (mergeArgs.range[1] < args.start) {
                                indexes[1] = indexes[3] = mergeArgs.range[1];
                                if (cell.colSpan - count > 1) {
                                    indexes[3] += (cell.colSpan - count - 1);
                                }
                            }
                            else {
                                indexes[1] = indexes[3] = args.start;
                                if (cell.colSpan - ((args.end - mergeArgs.range[1]) + 1) > 1) {
                                    indexes[3] += ((cell.colSpan - ((args.end - mergeArgs.range[1]) + 1)) - 1);
                                }
                            }
                            mergeArgsCollection.push({
                                range: indexes, isAction: false, preventRefresh: true, merge: true,
                                type: 'All', skipChecking: true
                            });
                        }
                    }
                    deletedCells[i].cells = args.model.rows[i].cells.splice(args.start, count);
                    mergeArgs = null;
                }
            }
            eventArgs.sheetCount = args.model.usedRange.colIndex;
            eventArgs.deletedCellsModel = deletedCells;
        }
        else {
            if ((args.end - args.start === this.parent.sheets.length - 1) || (args.checkCount !== undefined && args.checkCount ===
                this.parent.sheets.length)) {
                return;
            }
            this.parent.notify(refreshInsertDelete, insertArgs);
            eventArgs.sheetCount = this.parent.sheets.length;
            eventArgs.activeSheetIndex = this.parent.activeSheetIndex;
        }
        var deletedModel = [];
        var deleteMaxHgt = args.modelType === 'Row' && args.start < args.model.maxHgts.length;
        var sheetsModel = args.model["" + modelName];
        for (var i = args.start; i <= args.end; i++) {
            if (args.modelType === 'Sheet' && sheetsModel[i]) {
                this.parent.notify(workbookFormulaOperation, { action: 'deleteSheetTab', sheetId: sheetsModel[i].id });
            }
            if (sheetsModel[args.start] || args.start < sheetsModel.length) {
                deletedModel.push(sheetsModel[args.start] || {});
                sheetsModel.splice(args.start, 1);
            }
            else {
                deletedModel.push({});
            }
            if (i === args.start) {
                deletedModel[0].index = args.start;
            }
            if (deleteMaxHgt) {
                args.model.maxHgts.splice(args.start, 1);
            }
        }
        mergeArgsCollection.forEach(function (merge) { return _this.parent.notify(setMerge, merge); });
        this.parent.notify(beforeDelete, args);
        if (args.modelType !== 'Sheet') {
            this.parent.notify(refreshClipboard, args);
            eventArgs.refreshSheet = args.refreshSheet;
            eventArgs.activeSheetIndex = getSheetIndex(this.parent, args.model.name);
            eventArgs['conditionalFormats'] = [];
            this.deleteConditionalFormats(args, eventArgs);
        }
        eventArgs.definedNames = insertArgs.definedNames;
        eventArgs.isAction = args.isAction;
        eventArgs.deletedModel = deletedModel;
        delete eventArgs.cancel;
        this.parent.notify(deleteAction, actionArgs);
    };
    WorkbookDelete.prototype.setRowColCount = function (startIdx, endIdx, sheet, layout) {
        var prop = layout + 'Count';
        var curCount = sheet["" + prop];
        if (endIdx >= curCount) {
            endIdx = curCount - 1;
        }
        if (endIdx < startIdx) {
            return;
        }
        this.parent.setSheetPropertyOnMute(sheet, prop, curCount - ((endIdx - startIdx) + 1));
        if (sheet.id === this.parent.getActiveSheet().id) {
            this.parent.notify(updateRowColCount, { index: curCount - 1, update: layout, isDelete: true, start: startIdx, end: endIdx });
        }
    };
    WorkbookDelete.prototype.deleteConditionalFormats = function (args, eventArgs) {
        var cfCollection = args.model.conditionalFormats;
        if (cfCollection) {
            for (var i = 0; i < cfCollection.length; i++) {
                eventArgs['conditionalFormats'].push(extend({}, cfCollection[i], null, true));
                var cfRange = getRangeIndexes(cfCollection[i].range);
                var sltRangeIndex = getRangeIndexes(args.model.selectedRange);
                if ((args.modelType === 'Column' && sltRangeIndex[1] <= cfRange[1] && sltRangeIndex[3] >= cfRange[3]) || (args.modelType === 'Row' && sltRangeIndex[0] <= cfRange[0] && sltRangeIndex[2] >= cfRange[2])) {
                    cfCollection.splice(cfCollection.indexOf(cfCollection[i]), 1);
                    i--;
                }
                else {
                    cfCollection[i].range = getRangeAddress(deleteFormatRange(args, cfRange));
                }
            }
        }
    };
    WorkbookDelete.prototype.addEventListener = function () {
        this.parent.on(deleteModel, this.deleteModel, this);
    };
    /**
     * Destroy workbook delete module.
     *
     * @returns {void}
     */
    WorkbookDelete.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookDelete.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(deleteModel, this.deleteModel);
        }
    };
    /**
     * Get the workbook delete module name.
     *
     * @returns {string} - returns the module name.
     */
    WorkbookDelete.prototype.getModuleName = function () {
        return 'workbookdelete';
    };
    return WorkbookDelete;
}());

/**
 * The `WorkbookHyperlink` module is used to handle Hyperlink action in Spreadsheet.
 */
var WorkbookDataValidation = /** @class */ (function () {
    /**
     * Constructor for WorkbookSort module.
     *
     * @param {Workbook} parent - Specifies the parent element.
     */
    function WorkbookDataValidation(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the sort module.
     *
     * @returns {void}
     */
    WorkbookDataValidation.prototype.destroy = function () {
        this.removeEventListener();
        this.highlightInvalidData = null;
        this.parent = null;
    };
    WorkbookDataValidation.prototype.addEventListener = function () {
        this.parent.on(cellValidation, this.updateValidationHandler, this);
        this.parent.on(addHighlight, this.addHighlightHandler, this);
        this.parent.on(removeHighlight, this.removeHighlightHandler, this);
        this.parent.on(beforeInsert, this.beforeInsertDeleteHandler, this);
        this.parent.on(beforeDelete, this.beforeInsertDeleteHandler, this);
        this.parent.on(refreshInsertDelete, this.beforeInsertDeleteHandler, this);
    };
    WorkbookDataValidation.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(cellValidation, this.updateValidationHandler);
            this.parent.off(addHighlight, this.addHighlightHandler);
            this.parent.off(removeHighlight, this.removeHighlightHandler);
            this.parent.off(beforeInsert, this.beforeInsertDeleteHandler);
            this.parent.off(beforeDelete, this.beforeInsertDeleteHandler);
            this.parent.off(refreshInsertDelete, this.beforeInsertDeleteHandler);
        }
    };
    WorkbookDataValidation.prototype.updateValidationHandler = function (args) {
        var _this = this;
        var sheetName;
        var lastIndex = args.range.lastIndexOf('!');
        var sheet;
        var isActiveSheet;
        if (lastIndex > -1) {
            sheetName = args.range.substring(0, lastIndex);
            args.range = args.range.substring(lastIndex + 1);
            var sheetIdx = getSheetIndex(this.parent, sheetName);
            sheet = getSheet(this.parent, sheetIdx);
            isActiveSheet = sheetIdx === this.parent.activeSheetIndex;
        }
        else {
            sheet = this.parent.getActiveSheet();
            isActiveSheet = true;
        }
        var rangeInfo = this.getRangeWhenColumnSelected(args.range, sheet);
        if (sheetName) {
            args.range = sheetName + '!' + rangeInfo.range;
        }
        var indexes = getSwapRange(getRangeIndexes(rangeInfo.range));
        var column;
        var cell;
        var frozenRow;
        var uiRefresh;
        var viewport;
        var updateCellHighlightOnUI;
        var updateColHighlightOnUI;
        var options = { colIdx: indexes[1] };
        if (isActiveSheet) {
            frozenRow = this.parent.frozenRowCount(sheet);
            var frozenCol_1 = this.parent.frozenColCount(sheet);
            var parent_1 = this.parent;
            var viewOffset = parent_1.viewport || {};
            viewport = parent_1.scrollSettings && parent_1.scrollSettings.enableVirtualization ? [frozenRow + viewOffset.topIndex, frozenCol_1 +
                    viewOffset.leftIndex, viewOffset.bottomIndex, viewOffset.rightIndex] : [0, 0, sheet.rowCount - 1, sheet.colCount - 1];
            if (rangeInfo.isFullCol) {
                var viewportRowIndexes_1 = [[viewport[0], viewport[2]]];
                if (frozenRow) {
                    viewportRowIndexes_1.push([getRangeIndexes(sheet.topLeftCell)[0], frozenRow - 1]);
                }
                updateColHighlightOnUI = function (validation) {
                    if (validation.isHighlighted && ((options.colIdx >= viewport[1] && options.colIdx <= viewport[3]) ||
                        options.colIdx < frozenCol_1) && !isHiddenCol(sheet, options.colIdx)) {
                        viewportRowIndexes_1.forEach(function (indexes) {
                            for (options.rowIdx = indexes[0]; options.rowIdx <= indexes[1]; options.rowIdx++) {
                                if (!isHiddenRow(sheet, options.rowIdx)) {
                                    options.cell = getCell(options.rowIdx, options.colIdx, sheet, false, true);
                                    options.validation = options.cell.validation ? options.cell.validation : validation;
                                    _this.parent.notify(updateHighlight, options);
                                }
                            }
                        });
                    }
                };
            }
            updateCellHighlightOnUI = function (validation) {
                if (validation.isHighlighted && uiRefresh && ((options.colIdx >= viewport[1] && options.colIdx <= viewport[3]) ||
                    options.colIdx < frozenCol_1) && !isHiddenCol(sheet, options.colIdx)) {
                    _this.parent.notify(updateHighlight, options);
                }
            };
        }
        var highlightObj;
        var isListType;
        var activeIdx;
        var updateFormula;
        if (args.isRemoveValidation) {
            if (isActiveSheet) {
                activeIdx = getRangeIndexes(sheet.activeCell);
                if (activeIdx[0] >= indexes[0] && activeIdx[1] >= indexes[1] && activeIdx[0] <= indexes[2] && activeIdx[1] <= indexes[3]) {
                    var validation = getCell(activeIdx[0], activeIdx[1], sheet, false, true).validation ||
                        (checkColumnValidation(sheet.columns[indexes[1]], activeIdx[0], activeIdx[1]) &&
                            sheet.columns[activeIdx[1]].validation);
                    isListType = validation && validation.type === 'List';
                }
                options.isRemoveValidation = true;
                options.isRemoveHighlightedData = true;
            }
        }
        else {
            if (args.isAction && this.highlightInvalidData) {
                highlightObj = { isHighlighted: this.highlightInvalidData };
            }
            if (args.rules.type === 'List') {
                activeIdx = getRangeIndexes(sheet.activeCell);
                isListType = isActiveSheet && activeIdx[0] >= indexes[0] && activeIdx[1] >= indexes[1] && activeIdx[0] <= indexes[2] &&
                    activeIdx[1] <= indexes[3];
                if (args.rules.value1) {
                    args.rules.value1 = args.rules.value1.trim();
                    if (args.rules.value1[args.rules.value1.length - 1] === this.parent.listSeparator) {
                        args.rules.value1 = args.rules.value1.substring(0, args.rules.value1.length - 1);
                    }
                }
            }
            else if (args.rules.type === 'Custom' && !isNullOrUndefined(args.rules.value2)) {
                delete args.rules.value2;
            }
            if (isActiveSheet) {
                options.removeOnValidData = true;
            }
            var isFormulaVal1_1 = checkIsFormula(args.rules.value1);
            var isFormulaVal2_1 = checkIsFormula(args.rules.value2);
            updateFormula = function (rowIdx) {
                // Calculate previous indexes based on the original starting point of the formula
                if (isFormulaVal1_1) {
                    options.validation.value1 = getUpdatedFormula([rowIdx, options.colIdx, rowIdx, options.colIdx], indexes, sheet, _this.parent, { formula: args.rules.value1 });
                }
                if (isFormulaVal2_1) {
                    options.validation.value2 = getUpdatedFormula([rowIdx, options.colIdx, rowIdx, options.colIdx], indexes, sheet, _this.parent, { formula: args.rules.value2 });
                }
            };
        }
        for (options.colIdx; options.colIdx <= indexes[3]; options.colIdx++) {
            if (rangeInfo.isFullCol) {
                if (args.isRemoveValidation) {
                    column = sheet.columns[options.colIdx];
                    if (column && column.validation) {
                        if (isActiveSheet) {
                            updateColHighlightOnUI(column.validation);
                        }
                        delete column.validation;
                    }
                }
                else {
                    options.validation = Object.assign({}, args.rules, highlightObj);
                    updateFormula(0);
                    if (!sheet.columns[options.colIdx]) {
                        sheet.columns[options.colIdx] = {};
                    }
                    sheet.columns[options.colIdx].validation = options.validation;
                    if (isActiveSheet) {
                        updateColHighlightOnUI(options.validation);
                    }
                    continue;
                }
            }
            for (options.rowIdx = indexes[0]; options.rowIdx <= indexes[2]; options.rowIdx++) {
                uiRefresh = isActiveSheet && ((options.rowIdx >= viewport[0] && options.rowIdx <= viewport[2]) ||
                    options.rowIdx < frozenRow) && !isHiddenRow(sheet, options.rowIdx);
                if (args.isRemoveValidation) {
                    column = sheet.columns[options.colIdx];
                    if (column && column.validation) {
                        if (options.rowIdx === indexes[2]) {
                            column.validation.address = getSplittedAddressForColumn(column.validation.address, [indexes[0], options.colIdx, indexes[2], options.colIdx], options.colIdx);
                        }
                        if (isActiveSheet) {
                            updateCellHighlightOnUI(column.validation);
                        }
                    }
                    cell = getCell(options.rowIdx, options.colIdx, sheet);
                    if (cell && cell.validation && !updateCell(this.parent, sheet, { cell: { validation: {} }, rowIdx: options.rowIdx, colIdx: options.colIdx })) {
                        if (isActiveSheet) {
                            updateCellHighlightOnUI(cell.validation);
                        }
                        delete cell.validation;
                    }
                }
                else {
                    options.validation = Object.assign({}, args.rules, highlightObj);
                    updateFormula(options.rowIdx);
                    if (!updateCell(this.parent, sheet, { cell: { validation: options.validation }, rowIdx: options.rowIdx, colIdx: options.colIdx })) {
                        if (isActiveSheet) {
                            options.cell = getCell(options.rowIdx, options.colIdx, sheet);
                            updateCellHighlightOnUI(options.validation);
                        }
                    }
                }
            }
        }
        if (isListType) {
            cell = getCell(activeIdx[0], activeIdx[1], sheet, false, true);
            var validation = cell.validation;
            if (!validation) {
                validation = checkColumnValidation(sheet.columns[activeIdx[1]], activeIdx[0], activeIdx[1]) ?
                    sheet.columns[activeIdx[1]].validation : {};
            }
            this.parent.notify(addListValidationDropdown, { validation: validation, cell: cell, rowIdx: activeIdx[0], colIdx: activeIdx[1], isRefresh: true });
        }
    };
    WorkbookDataValidation.prototype.addHighlightHandler = function (args) {
        if (args.isAction) {
            this.highlightInvalidData = true;
        }
        this.invalidDataHandler(args.range);
    };
    WorkbookDataValidation.prototype.removeHighlightHandler = function (args) {
        if (args.isAction) {
            this.highlightInvalidData = null;
        }
        this.invalidDataHandler(args.range, true);
    };
    WorkbookDataValidation.prototype.invalidDataHandler = function (range, isRemoveHighlightedData) {
        var _this = this;
        var cell;
        var col;
        var rowIdx;
        var colIdx;
        var indexes;
        var uiRefresh;
        var isActiveSheet;
        var isFullRange;
        var lastColIdx;
        var row;
        var parent = this.parent;
        var sheet = this.parent.getActiveSheet();
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        var viewport = parent.scrollSettings && parent.scrollSettings.enableVirtualization ? (parent.viewport ?
            [frozenRow + parent.viewport.topIndex, frozenCol + parent.viewport.leftIndex, parent.viewport.bottomIndex,
                parent.viewport.rightIndex] : []) : [0, 0, sheet.rowCount - 1, sheet.colCount - 1];
        var updateHighlightOnUI = function (validation, col) {
            if (uiRefresh && ((colIdx >= viewport[1] && colIdx <= viewport[3]) || colIdx < frozenCol) && !isHiddenCol(sheet, colIdx)) {
                _this.parent.notify(updateHighlight, {
                    isRemoveHighlightedData: isRemoveHighlightedData, rowIdx: rowIdx, colIdx: colIdx, cell: cell,
                    validation: validation, removeOnValidData: true, col: col
                });
            }
        };
        var updateHighlightProp;
        if (isRemoveHighlightedData) {
            updateHighlightProp = function (validation, updateHighlight) {
                if (validation.isHighlighted) {
                    if (updateHighlight) {
                        delete validation.isHighlighted;
                    }
                    updateHighlightOnUI(validation);
                }
            };
        }
        else {
            updateHighlightProp = function (validation, updateHighlight, col) {
                if (updateHighlight) {
                    validation.isHighlighted = true;
                }
                updateHighlightOnUI(validation, col);
            };
        }
        var updateValidationHighlight = function () {
            for (rowIdx = indexes[0]; rowIdx <= indexes[2]; rowIdx++) {
                uiRefresh = isActiveSheet && ((rowIdx >= viewport[0] && rowIdx <= viewport[2]) || rowIdx < frozenRow) &&
                    !isHiddenRow(sheet, rowIdx);
                if (isFullRange) {
                    row = getRow(sheet, rowIdx);
                    lastColIdx = Math.max(row && row.cells ? row.cells.length - 1 : null, sheet.columns.length - 1, indexes[3]);
                }
                for (colIdx = indexes[1]; colIdx <= lastColIdx; colIdx++) {
                    cell = getCell(rowIdx, colIdx, sheet, false, true);
                    col = sheet.columns[colIdx];
                    if (cell.validation) {
                        updateHighlightProp(cell.validation, true, col);
                    }
                    else {
                        if (checkColumnValidation(col, rowIdx, colIdx)) {
                            updateHighlightProp(col.validation, rowIdx === indexes[2]);
                        }
                    }
                }
            }
        };
        if (range) {
            if (range.includes('!')) {
                var sheetIdx = getSheetIndexFromAddress(this.parent, range);
                sheet = getSheet(this.parent, sheetIdx);
                range = getRangeFromAddress(range);
                isActiveSheet = sheetIdx === this.parent.activeSheetIndex;
            }
            else {
                isActiveSheet = true;
            }
            indexes = getSwapRange(getRangeIndexes(this.getRangeWhenColumnSelected(getUpdatedRange(sheet, range), sheet).range));
            lastColIdx = indexes[3];
            updateValidationHighlight();
        }
        else {
            isFullRange = true;
            this.parent.sheets.forEach(function (model, sheetIdx) {
                sheet = model;
                indexes = [0, 0, Math.max(sheet.rows.length - 1, viewport[2]), Math.max(sheet.usedRange.colIndex, viewport[3])];
                isActiveSheet = sheetIdx === _this.parent.activeSheetIndex;
                updateValidationHighlight();
            });
        }
    };
    WorkbookDataValidation.prototype.beforeInsertDeleteHandler = function (args) {
        var _this = this;
        var isSheetAction;
        if (args.modelType === 'Sheet') {
            if (args.name !== refreshInsertDelete) {
                return;
            }
            isSheetAction = true;
        }
        else if (args.name === refreshInsertDelete) {
            return;
        }
        var isInsert = args.name === beforeInsert;
        var eventArgs;
        var endIdx;
        var curSheet;
        var prevIdx;
        if (isInsert) {
            curSheet = getSheet(this.parent, args.activeSheetIndex);
            endIdx = args.index + (args.model.length - 1);
            eventArgs = { insertDeleteArgs: { startIndex: args.index, endIndex: endIdx, modelType: args.modelType, isInsert: true,
                    sheet: curSheet }, sheetIdx: args.activeSheetIndex };
            prevIdx = args.index - 1;
        }
        else if (isSheetAction) {
            var sheetNames = [];
            var sheetId = void 0;
            var formulaArgs = {
                action: 'getSheetInfo', sheetInfo: []
            };
            this.parent.notify(workbookFormulaOperation, formulaArgs);
            for (var idx = args.startIndex; idx <= args.endIndex; idx++) {
                sheetId = this.parent.sheets[idx].id;
                for (var i = 0; i < formulaArgs.sheetInfo.length; i++) {
                    if (formulaArgs.sheetInfo[i].index === sheetId) {
                        sheetNames.push(formulaArgs.sheetInfo[i].sheet);
                        break;
                    }
                }
            }
            eventArgs = { sheetNames: sheetNames };
        }
        else {
            curSheet = args.model;
            eventArgs = { insertDeleteArgs: { startIndex: args.start, modelType: args.modelType,
                    endIndex: args.end, sheet: curSheet }, sheetIdx: getSheetIndexFromId(this.parent, curSheet.id) };
        }
        var updateFormula = function (validation) {
            if (checkIsFormula(validation.value1) && (!eventArgs.otherSheet || validation.value1.includes(curSheet.name))) {
                eventArgs.cell = { formula: validation.value1 };
                _this.parent.notify(getUpdatedFormulaOnInsertDelete, eventArgs);
                validation.value1 = eventArgs.cell.formula;
            }
            if (checkIsFormula(validation.value2) && (!eventArgs.otherSheet || validation.value2.includes(curSheet.name))) {
                eventArgs.cell = { formula: validation.value2 };
                _this.parent.notify(getUpdatedFormulaOnInsertDelete, eventArgs);
                validation.value2 = eventArgs.cell.formula;
            }
        };
        var isColAction = args.modelType === 'Column';
        var updateValidationToInsertedModel = function (validation, isColUpdate) {
            if (validation) {
                eventArgs.insertDeleteArgs.forceUpdate = true;
                for (var insertIdx = args.index; insertIdx <= endIdx; insertIdx++) {
                    validation = extend({}, validation);
                    updateFormula(validation);
                    if (isColUpdate) {
                        setColumn(curSheet, insertIdx, { validation: validation });
                    }
                    else if (isColAction) {
                        setCell(rowIdx, insertIdx, curSheet, { validation: validation }, true);
                    }
                    else {
                        setCell(insertIdx, colIdx, curSheet, { validation: validation }, true);
                    }
                }
                delete eventArgs.insertDeleteArgs.forceUpdate;
            }
        };
        var cell;
        var column;
        var endRowCount;
        var endColCount;
        var rowIdx;
        var colIdx;
        var isInsertOnCurSheet;
        this.parent.sheets.forEach(function (sheet, sheetIdx) {
            if (isSheetAction) {
                if (sheetIdx >= args.startIndex && sheetIdx <= args.endIndex) {
                    return;
                }
            }
            else {
                if (sheetIdx === eventArgs.sheetIdx) {
                    isInsertOnCurSheet = isInsert;
                    delete eventArgs.otherSheet;
                    delete eventArgs.formulaSheet;
                }
                else {
                    eventArgs.otherSheet = true;
                    eventArgs.formulaSheet = sheet;
                    isInsertOnCurSheet = false;
                }
            }
            endRowCount = sheet.usedRange.rowIndex + 1;
            for (colIdx = 0, endColCount = sheet.usedRange.colIndex + 1; colIdx < endColCount; colIdx++) {
                if (isInsertOnCurSheet && isColAction && colIdx >= args.index && colIdx <= endIdx) {
                    continue;
                }
                column = sheet.columns && sheet.columns[colIdx];
                if (column && column.validation) {
                    updateFormula(column.validation);
                    if (isInsertOnCurSheet && isColAction && prevIdx === colIdx) {
                        updateValidationToInsertedModel(column.validation, true);
                    }
                }
                for (rowIdx = 0; rowIdx < endRowCount; rowIdx++) {
                    cell = getCell(rowIdx, colIdx, sheet, false, true);
                    if (cell.validation && (!isInsertOnCurSheet || isColAction || rowIdx < args.index || rowIdx > endIdx)) {
                        updateFormula(cell.validation);
                        if (isInsertOnCurSheet && prevIdx === (isColAction ? colIdx : rowIdx)) {
                            updateValidationToInsertedModel(cell.validation);
                        }
                    }
                }
            }
        });
    };
    WorkbookDataValidation.prototype.getRangeWhenColumnSelected = function (range, sheet) {
        var isFullCol;
        var colNames = range.split(':');
        if (range.match(/\D/g) && !range.match(/[0-9]/g)) {
            colNames[0] += 1;
            colNames[1] += sheet.rowCount;
            range = colNames[0] + ':' + colNames[1];
            isFullCol = true;
        }
        else if (!range.match(/\D/g) && range.match(/[0-9]/g)) {
            colNames[0] = 'A' + colNames[0];
            colNames[1] = getCellAddress(0, sheet.colCount - 1).replace(/[0-9]/g, '') + colNames[1];
            range = colNames[0] + ':' + colNames[1];
        }
        return { range: range, isFullCol: isFullCol };
    };
    /**
     * Gets the module name.
     *
     * @returns {string} string
     */
    WorkbookDataValidation.prototype.getModuleName = function () {
        return 'workbookDataValidation';
    };
    return WorkbookDataValidation;
}());

var __assign$1 = (undefined && undefined.__assign) || function () {
    __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};
/**
 * `WorkbookFindAndReplace` module is used to handle the search action in Spreadsheet.
 */
var WorkbookFindAndReplace = /** @class */ (function () {
    /**
     * Constructor for WorkbookFindAndReplace module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     */
    function WorkbookFindAndReplace(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the FindAndReplace module.
     *
     * @returns {void} - To destroy the FindAndReplace module.
     */
    WorkbookFindAndReplace.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookFindAndReplace.prototype.addEventListener = function () {
        this.parent.on(find, this.find, this);
        this.parent.on(replace, this.replace, this);
        this.parent.on(replaceAll, this.replaceAll, this);
        this.parent.on(count, this.totalCount, this);
        this.parent.on(findAllValues, this.findAllValues, this);
    };
    WorkbookFindAndReplace.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(find, this.find);
            this.parent.off(replace, this.replace);
            this.parent.off(replaceAll, this.replaceAll);
            this.parent.off(count, this.totalCount);
            this.parent.off(findAllValues, this.findAllValues);
        }
    };
    WorkbookFindAndReplace.prototype.find = function (args) {
        args.sheetIndex = isUndefined$1(args.sheetIndex) ? this.parent.activeSheetIndex : args.sheetIndex;
        var sheet = this.parent.sheets[args.sheetIndex];
        var activeCell = getRangeIndexes(sheet.activeCell);
        var findArgs = { startRow: activeCell[0], startCol: activeCell[1],
            findVal: args.isCSen ? args.value : args.value.toLowerCase(), activeCell: activeCell };
        if (args.searchBy === 'By Row' ? findArgs.startRow > sheet.usedRange.rowIndex : findArgs.startCol > sheet.usedRange.colIndex) {
            if (args.findOpt === 'next') {
                findArgs.startRow = findArgs.startCol = 0;
            }
            else {
                findArgs.startRow = sheet.usedRange.rowIndex;
                findArgs.startCol = sheet.usedRange.colIndex;
            }
        }
        else {
            if (args.searchBy === 'By Row') {
                if (findArgs.startCol > sheet.usedRange.colIndex) {
                    if (args.findOpt === 'next') {
                        findArgs.startRow++;
                        if (findArgs.startRow > sheet.usedRange.rowIndex) {
                            findArgs.startRow = 0;
                        }
                        findArgs.startCol = 0;
                    }
                    else {
                        findArgs.startRow--;
                        if (findArgs.startRow < 0) {
                            findArgs.startRow = sheet.usedRange.rowIndex;
                        }
                        findArgs.startCol = sheet.usedRange.colIndex;
                    }
                }
            }
            else {
                if (findArgs.startRow > sheet.usedRange.rowIndex) {
                    if (args.findOpt === 'next') {
                        findArgs.startCol++;
                        if (findArgs.startCol > sheet.usedRange.colIndex) {
                            findArgs.startRow = 0;
                        }
                        findArgs.startRow = 0;
                    }
                    else {
                        findArgs.startCol--;
                        if (findArgs.startCol < 0) {
                            findArgs.startCol = sheet.usedRange.colIndex;
                        }
                        findArgs.startRow = sheet.usedRange.colIndex;
                    }
                }
            }
        }
        if (args.mode === 'Workbook') {
            findArgs.sheets = this.parent.sheets;
            findArgs.sheetIdx = args.sheetIndex;
        }
        else {
            findArgs.sheets = [sheet];
            findArgs.sheetIdx = 0;
        }
        var headerHgt;
        var hdrPanel = args.showDialog && this.parent.element && this.parent.element.querySelector('.e-header-panel');
        if (hdrPanel) {
            headerHgt = (hdrPanel.offsetHeight || (sheet.showHeaders ? 30 : 0)) + 1;
        }
        args.localeObj = getNumericObject(this.parent.locale);
        if (args.findOpt === 'next') {
            this.findNext(args, findArgs);
        }
        else {
            this.findPrevious(args, findArgs);
        }
        if (args.showDialog) {
            this.parent.notify(findToolDlg, { findValue: args.value, isPublic: true, headerHgt: headerHgt });
        }
    };
    WorkbookFindAndReplace.prototype.findNext = function (args, findArgs) {
        var _this = this;
        var findOnSheet = function (startIdx, endIdx, initIteration) {
            var sheet;
            var cellAddr;
            for (var sheetIdx = startIdx; sheetIdx <= endIdx; sheetIdx++) {
                sheet = findArgs.sheets[sheetIdx];
                if (sheetIdx === findArgs.sheetIdx) {
                    if (initIteration) {
                        cellAddr = _this.findNextOnSheet(args, findArgs.startRow, findArgs.startCol, findArgs.findVal, sheet, undefined, findArgs.activeCell);
                    }
                    else {
                        cellAddr = _this.findNextOnSheet(args, 0, 0, findArgs.findVal, sheet, args.searchBy === 'By Row' ? findArgs.startRow : findArgs.startCol);
                    }
                }
                else {
                    cellAddr = _this.findNextOnSheet(args, 0, 0, findArgs.findVal, sheet);
                }
                if (cellAddr) {
                    break;
                }
            }
            return cellAddr;
        };
        var cellAddr = findOnSheet(findArgs.sheetIdx, findArgs.sheets.length - 1, true);
        if (!cellAddr) {
            cellAddr = findOnSheet(0, findArgs.sheetIdx);
        }
        if (cellAddr) {
            this.parent.notify(goto, { address: cellAddr });
        }
        else {
            this.parent.notify(showFindAlert, null);
        }
    };
    WorkbookFindAndReplace.prototype.findNextOnSheet = function (args, startRow, startCol, findVal, sheet, endIdx, activeCell) {
        var cellAddr;
        var rowIdx;
        var colIdx;
        if (args.searchBy === 'By Row') {
            if (endIdx === undefined) {
                endIdx = sheet.rows.length - 1;
            }
            var colLen = void 0;
            for (rowIdx = startRow; rowIdx <= endIdx; rowIdx++) {
                if (isHiddenRow(sheet, rowIdx)) {
                    continue;
                }
                colIdx = activeCell && rowIdx === startRow ? startCol : 0;
                colLen = sheet.rows[rowIdx] && sheet.rows[rowIdx].cells && sheet.rows[rowIdx].cells.length;
                for (colIdx; colIdx < colLen; colIdx++) {
                    if (!isHiddenCol(sheet, colIdx)) {
                        cellAddr = this.checkMatch(args, findVal, rowIdx, colIdx, sheet, activeCell);
                        if (cellAddr) {
                            return cellAddr;
                        }
                    }
                }
            }
        }
        else {
            if (endIdx === undefined) {
                endIdx = sheet.usedRange.colIndex;
            }
            var endRow = sheet.rows && sheet.rows.length - 1;
            for (colIdx = startCol; colIdx <= endIdx; colIdx++) {
                if (isHiddenCol(sheet, colIdx)) {
                    continue;
                }
                rowIdx = activeCell && colIdx === startCol ? startRow : 0;
                for (rowIdx; rowIdx <= endRow; rowIdx++) {
                    if (!isHiddenRow(sheet, rowIdx)) {
                        cellAddr = this.checkMatch(args, findVal, rowIdx, colIdx, sheet, activeCell);
                        if (cellAddr) {
                            return cellAddr;
                        }
                    }
                }
            }
        }
        return cellAddr;
    };
    WorkbookFindAndReplace.prototype.findPrevious = function (args, findArgs) {
        var _this = this;
        var findOnSheet = function (startIdx, endIdx, initIteration) {
            var sheet;
            var cellAddr;
            for (var sheetIdx = startIdx; sheetIdx >= endIdx; sheetIdx--) {
                sheet = findArgs.sheets[sheetIdx];
                if (sheetIdx === findArgs.sheetIdx) {
                    if (initIteration) {
                        cellAddr = _this.findPrevOnSheet(args, findArgs.startRow, findArgs.startCol, 0, 0, findArgs.findVal, sheet, findArgs.activeCell);
                    }
                    else {
                        if (args.searchBy === 'By Row') {
                            cellAddr = _this.findPrevOnSheet(args, sheet.usedRange.rowIndex, sheet.usedRange.colIndex, findArgs.startRow, 0, findArgs.findVal, sheet);
                        }
                        else {
                            cellAddr = _this.findPrevOnSheet(args, sheet.usedRange.rowIndex, sheet.usedRange.colIndex, 0, findArgs.startCol, findArgs.findVal, sheet);
                        }
                    }
                }
                else {
                    cellAddr = _this.findPrevOnSheet(args, sheet.usedRange.rowIndex, sheet.usedRange.colIndex, 0, 0, findArgs.findVal, sheet);
                }
                if (cellAddr) {
                    break;
                }
            }
            return cellAddr;
        };
        var cellAddr;
        cellAddr = findOnSheet(findArgs.sheetIdx, 0, true);
        if (!cellAddr) {
            cellAddr = findOnSheet(findArgs.sheets.length - 1, findArgs.sheetIdx);
        }
        if (cellAddr) {
            this.parent.notify(goto, { address: cellAddr });
        }
        else {
            this.parent.notify(showFindAlert, null);
        }
    };
    WorkbookFindAndReplace.prototype.findPrevOnSheet = function (args, startRow, startCol, endRow, endCol, findVal, sheet, activeCell) {
        var cellAddr;
        var colIdx;
        var rowIdx;
        if (args.searchBy === 'By Row') {
            for (rowIdx = startRow; rowIdx >= endRow; rowIdx--) {
                if (isHiddenRow(sheet, rowIdx)) {
                    continue;
                }
                colIdx = activeCell && rowIdx === startRow ? startCol : sheet.rows[rowIdx] &&
                    sheet.rows[rowIdx].cells && sheet.rows[rowIdx].cells.length - 1;
                for (colIdx; colIdx >= endCol; colIdx--) {
                    if (!isHiddenCol(sheet, colIdx)) {
                        cellAddr = this.checkMatch(args, findVal, rowIdx, colIdx, sheet, activeCell);
                        if (cellAddr) {
                            return cellAddr;
                        }
                    }
                }
            }
        }
        else {
            for (colIdx = startCol; colIdx >= endCol; colIdx--) {
                if (isHiddenCol(sheet, colIdx)) {
                    continue;
                }
                rowIdx = activeCell && colIdx === startCol ? startRow : sheet.rows && sheet.rows.length - 1;
                for (rowIdx; rowIdx >= endRow; rowIdx--) {
                    if (!isHiddenRow(sheet, rowIdx)) {
                        cellAddr = this.checkMatch(args, findVal, rowIdx, colIdx, sheet, activeCell);
                        if (cellAddr) {
                            return cellAddr;
                        }
                    }
                }
            }
        }
        return cellAddr;
    };
    WorkbookFindAndReplace.prototype.checkMatch = function (args, findVal, rowIdx, colIdx, sheet, curCell) {
        if (curCell && rowIdx === curCell[0] && colIdx === curCell[1]) {
            return null;
        }
        var cell = getCell(rowIdx, colIdx, sheet, false, true);
        if (sheet.isProtected && !sheet.protectSettings.selectCells && sheet.protectSettings.selectUnLockedCells &&
            isLocked(cell, getColumn(sheet, colIdx))) {
            return null;
        }
        var checkValues = function (cellVal) {
            if (cellVal) {
                if (!args.isCSen) {
                    cellVal = cellVal.toLowerCase();
                }
                if (args.isEMatch) {
                    if (cellVal === findVal) {
                        return sheet.name + "!" + getCellAddress(rowIdx, colIdx);
                    }
                }
                else if (cellVal.includes(findVal)) {
                    return sheet.name + "!" + getCellAddress(rowIdx, colIdx);
                }
            }
            return null;
        };
        var displayText = this.getDisplayText(cell, rowIdx, colIdx, args.localeObj);
        var cellAddr = checkValues(displayText);
        if (!cellAddr) {
            cell = getCell(rowIdx, colIdx, sheet, false, true);
            if (cell.format && !isCustomDateTime(cell.format, true) && !displayText.includes('%')) {
                cellAddr = checkValues(this.getCellVal(cell, args.localeObj));
            }
        }
        return cellAddr;
    };
    WorkbookFindAndReplace.prototype.replace = function (args) {
        var _this = this;
        var sheetIndex = isUndefined$1(args.sheetIndex) ? this.parent.activeSheetIndex : args.sheetIndex;
        var sheet = getSheet(this.parent, args.sheetIndex);
        if (sheet.isProtected) {
            this.parent.notify(workBookeditAlert, null);
            return;
        }
        var address = args.address;
        var activeCell = getRangeIndexes(address || sheet.activeCell);
        var activeCellModel = getCell(activeCell[0], activeCell[1], sheet, false, true);
        var compareVal = this.parent.getDisplayText(activeCellModel).toString();
        var checkValue;
        args.value = args.value.toString();
        if (!args.isCSen) {
            checkValue = args.value.toLowerCase();
        }
        var localeObj = getNumericObject(this.parent.locale);
        var getReplaceValue = function (isRecursive) {
            var replaceVal;
            if (args.isCSen) {
                if (args.isEMatch) {
                    replaceVal = compareVal === args.value && args.replaceValue;
                }
                else {
                    replaceVal = compareVal.indexOf(args.value) > -1 && compareVal.replace(args.value, args.replaceValue);
                }
            }
            else {
                if (args.isEMatch) {
                    replaceVal = compareVal.toLowerCase() === checkValue && args.replaceValue;
                }
                else {
                    var regExp = RegExp;
                    replaceVal = (compareVal.toLowerCase().includes(checkValue)) &&
                        compareVal.replace(new regExp(args.value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'ig'), args.replaceValue);
                }
            }
            if (!isRecursive && !replacedValue && activeCellModel.format && !isCustomDateTime(activeCellModel.format, true) &&
                !compareVal.includes('%')) {
                compareVal = _this.getCellVal(activeCellModel, localeObj);
                if (compareVal) {
                    replaceVal = getReplaceValue(true);
                }
            }
            return replaceVal;
        };
        var replacedValue = getReplaceValue();
        if (!replacedValue) {
            args.findOpt = 'next';
            this.find(args);
            activeCell = getCellIndexes(sheet.activeCell);
            activeCellModel = getCell(activeCell[0], activeCell[1], sheet, false, true);
            compareVal = this.parent.getDisplayText(activeCellModel).toString();
            replacedValue = getReplaceValue();
            if (!replacedValue) {
                return;
            }
        }
        if (isReadOnly(getCell(activeCell[0], activeCell[1], sheet), getColumn(sheet, activeCell[1]), getRow(sheet, activeCell[0]))) {
            this.parent.notify(workbookReadonlyAlert, null);
            return;
        }
        var eventArgs = { address: sheet.name + "!" + getCellAddress(activeCell[0], activeCell[1]), cancel: false,
            compareValue: args.value, replaceValue: args.replaceValue, sheetIndex: sheetIndex };
        if (args.isAction) {
            this.parent.notify(beginAction, { action: 'beforeReplace', eventArgs: eventArgs });
            if (eventArgs.cancel) {
                return;
            }
            delete eventArgs.cancel;
        }
        updateCell(this.parent, sheet, { cell: { value: replacedValue }, rowIdx: activeCell[0], colIdx: activeCell[1], uiRefresh: true,
            checkCF: true, valChange: true });
        if (args.isAction) {
            this.parent.notify('actionComplete', { action: 'replace', eventArgs: eventArgs });
        }
    };
    WorkbookFindAndReplace.prototype.replaceAll = function (args) {
        var _this = this;
        var startSheet = args.mode === 'Sheet' ? args.sheetIndex : 0;
        var sheet = this.parent.sheets[startSheet];
        var endRow = sheet.usedRange.rowIndex;
        var startRow = 0;
        var endColumn = sheet.usedRange.colIndex;
        var startColumn = 0;
        var addressCollection = [];
        var triggerEvent = args.isAction;
        var activeCellIdx = getCellIndexes(sheet.activeCell);
        var eventArgs = __assign$1({ addressCollection: addressCollection, cancel: false }, args);
        var replaceCount = 0;
        var updateAsync = function (val, index, cell) {
            if (requestAnimationFrame) {
                requestAnimationFrame(function () {
                    if (!eventArgs.cancel && eventArgs.addressCollection[index]) {
                        var indexes = getCellIndexes(eventArgs.addressCollection[index].substring(eventArgs.addressCollection[index].lastIndexOf('!') + 1));
                        var sheetIndex = getSheetIndexFromAddress(_this.parent, eventArgs.addressCollection[index]);
                        updateCell(_this.parent, _this.parent.sheets[sheetIndex], { cell: { value: val }, rowIdx: indexes[0],
                            uiRefresh: true, checkCF: true, colIdx: indexes[1], valChange: true,
                            skipFormatCheck: args.skipFormatCheck });
                        if (activeCellIdx[0] === indexes[0] && activeCellIdx[1] === indexes[1]) {
                            _this.parent.notify('formulaBarOperation', { action: 'refreshFormulabar',
                                cell: getCell(indexes[0], indexes[1], _this.parent.sheets[sheetIndex], false, true) });
                        }
                        if (index === eventArgs.addressCollection.length - 1 && triggerEvent) {
                            _this.parent.notify('actionComplete', { action: 'replaceAll', eventArgs: eventArgs });
                        }
                    }
                });
            }
            else {
                _this.parent.updateCellDetails({ value: val }, eventArgs.addressCollection[index], undefined, undefined, true);
            }
            if (!cell.formula) {
                replaceCount++;
            }
        };
        var checkMatch = function (cellval, cell) {
            var matchFound;
            if (cellval) {
                if (args.isCSen) {
                    if (args.isEMatch) {
                        if (cellval === args.value) {
                            updateAsync(args.replaceValue, addressCollection.length, cell);
                            addressCollection.push(sheet.name + '!' + getCellAddress(startRow, startColumn));
                            matchFound = true;
                        }
                    }
                    else {
                        if (cellval.indexOf(args.value) > -1) {
                            updateAsync(cellval.replace(args.value, args.replaceValue), addressCollection.length, cell);
                            addressCollection.push(sheet.name + '!' + getCellAddress(startRow, startColumn));
                            matchFound = true;
                        }
                    }
                }
                else {
                    if (args.isEMatch) {
                        if (cellval.toLowerCase() === args.value) {
                            updateAsync(args.replaceValue, addressCollection.length, cell);
                            addressCollection.push(sheet.name + '!' + getCellAddress(startRow, startColumn));
                            matchFound = true;
                        }
                    }
                    else {
                        var val = cellval.toLowerCase();
                        if ((cellval === args.value || val.indexOf(args.value.toString().toLowerCase()) > -1) || val ===
                            args.value || cellval === args.value || val.indexOf(args.value) > -1) {
                            var regExp = RegExp;
                            regX = new regExp(args.value.toString().replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'ig');
                            updateAsync(cellval.replace(regX, args.replaceValue), addressCollection.length, cell);
                            addressCollection.push(sheet.name + '!' + getCellAddress(startRow, startColumn));
                            matchFound = true;
                        }
                    }
                }
            }
            return matchFound;
        };
        var displayText;
        var row;
        var regX;
        var localeObj = getNumericObject(this.parent.locale);
        var cell;
        for (startRow; startRow <= endRow + 1; startRow++) {
            if (startColumn > endColumn && startRow > endRow) {
                if (args.mode === 'Workbook') {
                    startSheet++;
                    sheet = this.parent.sheets[startSheet];
                    if (sheet) {
                        startColumn = 0;
                        startRow = 0;
                        endColumn = sheet.usedRange.colIndex;
                        endRow = sheet.usedRange.rowIndex;
                    }
                    else {
                        break;
                    }
                }
            }
            row = sheet.rows[startRow];
            if (row) {
                if (startColumn === endColumn + 1) {
                    startColumn = 0;
                }
                for (startColumn; startColumn <= endColumn; startColumn++) {
                    if (row) {
                        cell = row.cells && row.cells[startColumn];
                        if (cell) {
                            if (isReadOnly(cell, getColumn(sheet, startColumn), row)) {
                                continue;
                            }
                            displayText = this.getDisplayText(cell, startRow, startColumn, localeObj).toString();
                            if (!checkMatch(displayText, cell) && cell.format && !isCustomDateTime(cell.format, true) &&
                                !displayText.includes('%')) {
                                checkMatch(this.getCellVal(row.cells[startColumn], localeObj), cell);
                            }
                        }
                    }
                }
            }
        }
        if (addressCollection.length && triggerEvent) {
            this.parent.notify('actionBegin', { action: 'beforeReplaceAll', eventArgs: eventArgs });
            if (!eventArgs.cancel) {
                this.parent.notify(replaceAllDialog, { count: replaceCount, replaceValue: eventArgs.replaceValue });
            }
        }
        else {
            this.parent.notify(replaceAllDialog, { count: replaceCount, replaceValue: eventArgs.replaceValue });
        }
    };
    WorkbookFindAndReplace.prototype.getDisplayText = function (cell, rowIdx, colIdx, localeObj) {
        if (!cell) {
            return '';
        }
        if (!cell.value && cell.value !== 0) {
            if (cell.hyperlink) {
                return typeof cell.hyperlink === 'string' ? cell.hyperlink : cell.hyperlink.address || '';
            }
            return '';
        }
        var cellValue = cell.value.toString();
        if (cell.format || cellValue.includes(localeObj.dateSeparator)) {
            var eventArgs = { value: cell.value, format: cell.format, formattedText: cell.value, cell: cell,
                rowIndex: rowIdx, colIndex: colIdx };
            this.parent.notify(getFormattedCellObject, eventArgs);
            return eventArgs.formattedText;
        }
        else {
            return cellValue;
        }
    };
    WorkbookFindAndReplace.prototype.getCellVal = function (cell, localeObj) {
        if (isNumber(cell.value)) {
            if (localeObj.decimal !== '.') {
                return cell.value.toString().split('.').join(localeObj.decimal);
            }
            return cell.value.toString();
        }
        return cell.value ? cell.value.toString().toLowerCase() : '';
    };
    WorkbookFindAndReplace.prototype.totalCount = function (args) {
        var _this = this;
        var sheet = this.parent.sheets[args.sheetIndex];
        var activeCell = getCellIndexes(sheet.activeCell);
        var count = 0;
        var requiredCount = 0;
        var findValue = args.value.toLowerCase();
        var localeObj = getNumericObject(this.parent.locale);
        var displayText;
        sheet.rows.filter(function (row, rowIdx) { return row && row.cells && (!row.isFiltered && !row.hidden) &&
            row.cells.filter(function (cell, colIdx) {
                if (cell && (cell.value || cell.value === 0) && !isHiddenCol(sheet, colIdx) && (!sheet.isProtected ||
                    sheet.protectSettings.selectCells || !isLocked(cell, getColumn(sheet, colIdx)))) {
                    displayText = _this.getDisplayText(cell, rowIdx, colIdx, localeObj).toLowerCase();
                    if (displayText.includes(findValue) || (cell.format && !isCustomDateTime(cell.format, true) &&
                        !displayText.includes('%') && _this.getCellVal(cell, localeObj).includes(findValue))) {
                        count++;
                        if ((rowIdx === activeCell[0] && colIdx >= activeCell[1]) || rowIdx > activeCell[0]) {
                            requiredCount++;
                        }
                    }
                }
            }); });
        requiredCount -= 1;
        var totalCount = count;
        count = totalCount - requiredCount;
        if (count > totalCount) {
            count = totalCount;
        }
        if (count !== 0 && !this.parent.getDisplayText(getCell(activeCell[0], activeCell[1], sheet)).toLowerCase().includes(findValue)) {
            count -= 1;
        }
        args.findCount = count + " of " + totalCount;
    };
    WorkbookFindAndReplace.prototype.findAllValues = function (findAllArguments) {
        var startSheet = findAllArguments.sheetIndex;
        var sheet = this.parent.sheets[startSheet];
        var endRow = sheet.usedRange.rowIndex;
        var rowIndex = 0;
        var count = 0;
        var address;
        var endColumn = sheet.usedRange.colIndex;
        var columnIndex = 0;
        var sheetLength = this.parent.sheets.length;
        var initialSheet = findAllArguments.sheetIndex;
        for (rowIndex; rowIndex <= endRow + 1; rowIndex++) {
            if ((initialSheet !== 1) && (findAllArguments.sheetIndex === sheetLength)) {
                startSheet = 1;
            }
            if (rowIndex > endRow && columnIndex > endColumn) {
                if (findAllArguments.mode === 'Workbook') {
                    startSheet++;
                    if (startSheet > sheetLength - 1) {
                        startSheet = 0;
                    }
                    if (initialSheet === startSheet) {
                        if (count === 0) {
                            return;
                        }
                        return;
                    }
                    sheet = this.parent.sheets[startSheet];
                    if (sheet) {
                        rowIndex = 0;
                        columnIndex = 0;
                        endColumn = sheet.usedRange.colIndex;
                        endRow = sheet.usedRange.rowIndex;
                    }
                }
            }
            if (!isNullOrUndefined(sheet)) {
                if (sheet.rows[rowIndex]) {
                    var row = sheet.rows[rowIndex];
                    if (columnIndex === endColumn + 2) {
                        columnIndex = 0;
                    }
                    for (columnIndex; columnIndex <= endColumn + 1; columnIndex++) {
                        if (row) {
                            if (row.cells && row.cells[columnIndex]) {
                                var cell = sheet.rows[rowIndex].cells[columnIndex];
                                if (cell && !isNullOrUndefined(cell.value) && cell.value !== '' && (!sheet.isProtected ||
                                    sheet.protectSettings.selectCells || (sheet.protectSettings.selectUnLockedCells &&
                                    !isLocked(cell, getColumn(sheet, columnIndex))))) {
                                    var cellFormat = cell.format;
                                    var cellvalue = void 0;
                                    if (cellFormat) {
                                        var displayTxt = this.parent.getDisplayText(sheet.rows[rowIndex].cells[columnIndex]);
                                        cellvalue = displayTxt.toString();
                                    }
                                    else {
                                        cellvalue = cell.value.toString();
                                    }
                                    if (findAllArguments.isCSen && findAllArguments.isEMatch) {
                                        if (cellvalue === findAllArguments.value) {
                                            address = sheet.name + '!' + getCellAddress(rowIndex, columnIndex);
                                            findAllArguments.findCollection.push(address);
                                            count++;
                                        }
                                    }
                                    else if (findAllArguments.isCSen && !findAllArguments.isEMatch) {
                                        var index = cellvalue.indexOf(findAllArguments.value) > -1;
                                        if ((cellvalue === findAllArguments.value) || (index)) {
                                            address = sheet.name + '!' + getCellAddress(rowIndex, columnIndex);
                                            findAllArguments.findCollection.push(address);
                                            count++;
                                        }
                                    }
                                    else if (!findAllArguments.isCSen && findAllArguments.isEMatch) {
                                        var val = cellvalue.toString().toLowerCase();
                                        if (val === findAllArguments.value.toLowerCase()) {
                                            address = sheet.name + '!' + getCellAddress(rowIndex, columnIndex);
                                            findAllArguments.findCollection.push(address);
                                            count++;
                                        }
                                    }
                                    else if (!findAllArguments.isCSen && !findAllArguments.isEMatch) {
                                        var val = cellvalue.toString().toLowerCase();
                                        var index = val.indexOf(findAllArguments.value.toLowerCase()) > -1;
                                        if ((val === findAllArguments.value) || ((cellvalue === findAllArguments.value) || (index)) ||
                                            ((cellvalue === findAllArguments.value))) {
                                            address = sheet.name + '!' + getCellAddress(rowIndex, columnIndex);
                                            findAllArguments.findCollection.push(address);
                                            count++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (count === 0) {
            return;
        }
        return;
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Return the string
     */
    WorkbookFindAndReplace.prototype.getModuleName = function () {
        return 'workbookfindAndReplace';
    };
    return WorkbookFindAndReplace;
}());

/**
 * The `WorkbookSpreadSheet` module is used to handle the Protecting functionalities in Workbook.
 */
var WorkbookProtectSheet = /** @class */ (function () {
    /**
     * Constructor for edit module in Workbook.
     *
     * @param {Workbook} workbook - Specifies the workbook.
     * @private
     */
    function WorkbookProtectSheet(workbook) {
        this.parent = workbook;
        this.addEventListener();
    }
    WorkbookProtectSheet.prototype.protectsheetHandler = function (args) {
        var sheetIndex = isNullOrUndefined(args.sheetIndex) ? this.parent.activeSheetIndex : args.sheetIndex;
        var sheet = getSheet(this.parent, sheetIndex);
        this.parent.setSheetPropertyOnMute(sheet, 'isProtected', true);
        this.parent.setSheetPropertyOnMute(sheet, 'protectSettings', {
            selectCells: args.protectSettings.selectCells, formatCells: args.protectSettings.formatCells,
            formatColumns: args.protectSettings.formatColumns, formatRows: args.protectSettings.formatRows,
            insertLink: args.protectSettings.insertLink, selectUnLockedCells: args.protectSettings.selectUnLockedCells
        });
        this.parent.notify(protectSheetWorkBook, { sheetIndex: sheetIndex, triggerEvent: args.triggerEvent });
        this.parent.notify(updateToggle, { props: 'Protect' });
        sheet.password = args.password ? args.password : '';
        sheet.columns.forEach(function (column) {
            if (column && isUndefined$1(column.isLocked)) {
                column.isLocked = true;
            }
        });
    };
    WorkbookProtectSheet.prototype.unprotectsheetHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        if (!isNullOrUndefined(args.sheet)) {
            sheet = this.parent.sheets[args.sheet];
        }
        if (sheet.isImportProtected) {
            sheet.isImportProtected = false;
        }
        sheet.protectSettings.formatCells = sheet.protectSettings.formatColumns = false;
        sheet.protectSettings.formatRows = sheet.protectSettings.selectCells = false;
        this.parent.setSheetPropertyOnMute(sheet, 'isProtected', false);
        this.parent.notify(protectSheetWorkBook, sheet.protectSettings);
        this.parent.notify(updateToggle, { props: 'Protect' });
    };
    /**
     * To destroy the edit module.
     *
     * @returns {void} - To destroy the edit module.
     * @hidden
     */
    WorkbookProtectSheet.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookProtectSheet.prototype.addEventListener = function () {
        this.parent.on(protectsheetHandler, this.protectsheetHandler, this);
        this.parent.on(unprotectsheetHandler, this.unprotectsheetHandler, this);
        this.parent.on(setLockCells, this.lockCells, this);
    };
    WorkbookProtectSheet.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(protectsheetHandler, this.protectsheetHandler);
            this.parent.off(setLockCells, this.lockCells);
            this.parent.off(protectsheetHandler, this.unprotectsheetHandler);
        }
    };
    WorkbookProtectSheet.prototype.lockCells = function (args) {
        var addressInfo = this.parent.getAddressInfo(args.range);
        var indexes = getSwapRange(addressInfo.indices);
        var sheet = getSheet(this.parent, addressInfo.sheetIndex);
        var isLocked = args.isLocked ? args.isLocked : false;
        if (indexes[0] === 0 && indexes[2] === sheet.rowCount - 1) {
            for (var i = indexes[1]; i <= indexes[3]; i++) {
                setColumn(sheet, i, { isLocked: args.isLocked });
            }
        }
        for (var i = indexes[0]; i <= indexes[2]; i++) {
            for (var j = indexes[1]; j <= indexes[3]; j++) {
                setCell(i, j, sheet, { isLocked: isLocked }, true);
            }
        }
        if (args.triggerEvent) {
            this.parent.notify('actionComplete', { action: 'lockCells', eventArgs: args });
        }
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Return the string.
     * @private
     */
    WorkbookProtectSheet.prototype.getModuleName = function () {
        return 'workbookProtectSheet';
    };
    return WorkbookProtectSheet;
}());

/**
 * The `WorkbookMerge` module is used to merge the range of cells.
 */
var WorkbookMerge = /** @class */ (function () {
    /**
     * Constructor for the workbook merge module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     * @private
     */
    function WorkbookMerge(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    WorkbookMerge.prototype.merge = function (args) {
        args.sheetIndex = isUndefined$1(args.sheetIndex) ? this.parent.activeSheetIndex : args.sheetIndex;
        if (args.isAction) {
            this.parent.notify('actionBegin', { eventArgs: args, action: 'merge' });
            if (!args.model) {
                args.model = [];
            }
        }
        if (typeof args.range === 'string') {
            args.range = getRangeIndexes(args.range);
        }
        var range = args.range = getSwapRange(args.range);
        if (!args.skipChecking) {
            this.mergedRange(args);
        }
        if (!args.merge || args.type === 'All') {
            this.mergeAll(args);
            if (args.refreshRibbon) {
                this.parent.notify(activeCellChanged, null);
            }
        }
        else if (args.type === 'Horizontally') {
            for (var rowIdx = args.range[0], endIdx = args.range[2]; rowIdx <= endIdx; rowIdx++) {
                args.range = [rowIdx, range[1], rowIdx, range[3]];
                this.mergeAll(args, rowIdx - range[0]);
            }
        }
        else if (args.type === 'Vertically') {
            for (var colIdx = args.range[1], endIdx = args.range[3]; colIdx <= endIdx; colIdx++) {
                args.range = [range[0], colIdx, range[2], colIdx];
                this.mergeAll(args, 0, colIdx - range[1]);
            }
        }
        args.range = range;
        this.parent.setUsedRange(args.range[2], args.range[3]);
        if (args.isAction) {
            this.parent.notify('actionComplete', { eventArgs: args, action: 'merge' });
        }
        if (args.sheetIndex === this.parent.activeSheetIndex) {
            this.parent.notify('selectRange', { address: getSheet(this.parent, args.sheetIndex).selectedRange, skipChecking: true });
            if (this.parent.chartColl && this.parent.chartColl.length) {
                this.parent.notify(refreshChart, { range: args.range });
            }
        }
    };
    WorkbookMerge.prototype.mergeAll = function (args, startRow, startCol) {
        if (startRow === void 0) { startRow = 0; }
        if (startCol === void 0) { startCol = 0; }
        var rowSpan = 0;
        var cell;
        args.range = args.range;
        var colSpan;
        var cellValue;
        var refreshAllCF;
        var format;
        var modelCell;
        var sheet = isUndefined$1(args.sheetIndex) ? this.parent.getActiveSheet() : getSheet(this.parent, args.sheetIndex);
        var updateObj = { cell: new Object(), rowIdx: args.range[0], colIdx: args.range[1], valChange: !args.merge,
            preventEvt: true, uiRefresh: !args.preventRefresh, skipFormatCheck: true };
        for (var rowIdx = args.range[0], rIdx = startRow; rowIdx <= args.range[2]; rowIdx++, rIdx++) {
            colSpan = 0;
            if (args.isAction && !args.model[rIdx]) {
                args.model.push({ cells: [] });
            }
            for (var colIdx = args.range[1], cIdx = startCol; colIdx <= args.range[3]; colIdx++, cIdx++) {
                cell = getCell(rowIdx, colIdx, sheet);
                if (cell && (cell.value || cell.value === 0 || cell.formula) && !cellValue) {
                    cellValue = cell.formula || cell.value;
                    format = cell.format;
                }
                if (args.isAction && args.merge) {
                    modelCell = args.model[rIdx].cells[cIdx] = {};
                    extend(modelCell, cell, null, true);
                }
                if (cell) {
                    delete cell.rowSpan;
                    delete cell.colSpan;
                    modelCell = !args.merge && !args.isAction && args.model && args.model[rIdx] &&
                        args.model[rIdx].cells[cIdx];
                    var isManualCalcMode = this.parent.calculationMode === 'Manual' &&
                        this.parent.getActiveSheet().isSheetCalculated &&
                        !isNullOrUndefined(cell.value) && cell.value !== '';
                    if (modelCell) {
                        if (isManualCalcMode) {
                            modelCell.value = cell.value;
                        }
                        setCell(rowIdx, colIdx, sheet, modelCell);
                    }
                    else if (args.model && args.model[rIdx].cells[cIdx] && isManualCalcMode) {
                        args.model[rIdx].cells[cIdx].value = cell.value;
                    }
                }
                if (rowIdx === args.range[0] && colIdx === args.range[1]) {
                    if (args.merge) {
                        if (args.range[3] - args.range[1] > 0) {
                            updateObj.cell.colSpan = (args.range[3] - args.range[1]) + 1;
                        }
                        if (args.range[2] - args.range[0] > 0) {
                            updateObj.cell.rowSpan = (args.range[2] - args.range[0]) + 1;
                        }
                        updateCell(this.parent, sheet, updateObj);
                        updateObj.valChange = updateObj.mergedCells = true;
                        continue;
                    }
                }
                else {
                    updateObj.rowIdx = rowIdx;
                    updateObj.colIdx = colIdx;
                    updateObj.cell = {};
                    if (args.merge) {
                        if (rowIdx !== args.range[0]) {
                            updateObj.cell.rowSpan = -rowSpan;
                        }
                        if (colIdx !== args.range[1]) {
                            colSpan++;
                            updateObj.cell.colSpan = -colSpan;
                        }
                    }
                }
                updateCell(this.parent, sheet, updateObj);
                if (!refreshAllCF) {
                    refreshAllCF = updateObj.isFormulaDependent;
                }
            }
            rowSpan++;
        }
        if (args.merge) {
            if (cellValue || cellValue === 0) {
                delete updateObj.mergedCells;
                updateObj.cell = {};
                var curCell = getCell(args.range[0], args.range[1], sheet);
                if (!curCell || (!curCell.value && !curCell.formula)) {
                    if (checkIsFormula(cellValue)) {
                        updateObj.cell.formula = cellValue;
                    }
                    else {
                        updateObj.cell.value = cellValue;
                    }
                    if (format) {
                        updateObj.cell.format = format;
                    }
                }
                updateObj.rowIdx = args.range[0];
                updateObj.colIdx = args.range[1];
                updateCell(this.parent, sheet, updateObj);
            }
            else if (!args.preventRefresh) {
                this.parent.notify(applyMerge, { rowIdx: args.range[0], colIdx: args.range[1] });
            }
        }
        if (!args.preventRefresh) {
            this.refreshCF(sheet, args.range.slice(), refreshAllCF, args.merge);
        }
    };
    WorkbookMerge.prototype.refreshCF = function (sheet, range, refreshAll, isMerge) {
        if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
            if (isMerge) {
                this.parent.notify(applyCF, { indexes: [range[0], range[1]], refreshAll: refreshAll, isAction: true });
            }
            else {
                this.parent.notify(applyCF, { indexes: range, refreshAll: refreshAll, isAction: true });
            }
        }
    };
    WorkbookMerge.prototype.activeCellRange = function (args) {
        args.range = args.range;
        var sheet = this.parent.getActiveSheet();
        var cell = getCell(args.range[0], args.range[1], sheet);
        if (cell) {
            if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                args.range[0] += cell.rowSpan;
                if (args.insertCount) {
                    args.range[0] -= args.insertCount;
                }
            }
            if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                args.range[1] += cell.colSpan;
                if (args.insertCount) {
                    args.range[1] -= args.insertCount;
                }
            }
            cell = getCell(args.range[0], args.range[1], sheet);
            if (cell) {
                if (cell.rowSpan > 1 && (args.range[0] + (cell.rowSpan - 1) >= args.range[2] || args.insertCount)) {
                    args.range[2] = args.range[0] + (cell.rowSpan - 1);
                }
                if (cell.colSpan > 1 && (args.range[1] + (cell.colSpan - 1) >= args.range[3] || args.insertCount)) {
                    args.range[3] = args.range[1] + (cell.colSpan - 1);
                }
            }
        }
    };
    WorkbookMerge.prototype.mergedRange = function (args) {
        if (typeof (args.range) === 'string') {
            args.range = getRangeIndexes(args.range);
        }
        if (args.range[0] <= args.range[2] && args.range[1] <= args.range[3]) {
            this.forward(args);
        }
        else if (args.range[0] >= args.range[2] && args.range[1] >= args.range[3]) {
            this.reverse(args);
        }
        else if (args.range[0] < args.range[2] && args.range[1] > args.range[3]) {
            this.forwardReverse(args);
        }
        else if (args.range[0] > args.range[2] && args.range[1] < args.range[3]) {
            this.reverseForward(args);
        }
    };
    WorkbookMerge.prototype.forward = function (args) {
        args.range = args.range;
        var sheet = isUndefined$1(args.sheetIndex) ? this.parent.getActiveSheet() : getSheet(this.parent, args.sheetIndex);
        var cell = getCell(args.range[0], args.range[1], sheet);
        var endRowIdx;
        var endColIdx;
        var rowIdx = endRowIdx = args.range[0];
        var colIdx = endColIdx = args.range[1];
        if (cell) {
            if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                rowIdx = endRowIdx = args.range[0] + cell.rowSpan;
            }
            if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                colIdx = endColIdx = args.range[1] + cell.colSpan;
            }
            cell = getCell(rowIdx, colIdx, sheet);
            if (cell) {
                if (cell.rowSpan > 1) {
                    endRowIdx += (cell.rowSpan - 1);
                    if (rowIdx + (cell.rowSpan - 1) >= args.range[2]) {
                        args.range[2] = args.range[0];
                        args.range[2] = rowIdx + (cell.rowSpan - 1);
                    }
                }
                if (cell.colSpan > 1) {
                    endColIdx += (cell.colSpan - 1);
                    if (colIdx + (cell.colSpan - 1) >= args.range[3]) {
                        args.range[3] = args.range[1];
                        args.range[3] = colIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
        args.range[0] = rowIdx;
        args.range[1] = colIdx;
        if (args.range[0] === rowIdx && args.range[1] === colIdx && args.range[2] === endRowIdx && args.range[3] === endColIdx) {
            args.isActiveCell = true;
        }
        if (args.skipChecking) {
            return;
        }
        for (var i = args.range[1]; i <= args.range[3]; i++) {
            cell = getCell(args.range[2], i, sheet);
            if (cell) {
                rowIdx = args.range[2];
                colIdx = i;
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    colIdx += cell.colSpan;
                    if (colIdx < args.range[1]) {
                        args.range[1] = colIdx;
                    }
                }
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rowIdx += cell.rowSpan;
                    if (rowIdx < args.range[0]) {
                        args.range[0] = rowIdx;
                    }
                }
                cell = getCell(rowIdx, colIdx, sheet);
                if (cell) {
                    if (cell.colSpan > 1 && colIdx + (cell.colSpan - 1) > args.range[3]) {
                        args.range[3] = colIdx;
                        args.range[3] = colIdx + (cell.colSpan - 1);
                    }
                    if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) > args.range[2]) {
                        args.range[2] = rowIdx;
                        args.range[2] = rowIdx + (cell.rowSpan - 1);
                    }
                }
            }
        }
        var startRowIdx;
        var startColIdx;
        for (var i = args.range[1]; i <= args.range[3]; i++) {
            cell = getCell(args.range[0], i, sheet);
            if (cell) {
                startColIdx = i;
                startRowIdx = args.range[0];
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    startColIdx += cell.colSpan;
                    if (startColIdx < args.range[1]) {
                        args.range[1] = startColIdx;
                    }
                }
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    startRowIdx += cell.rowSpan;
                    if (startRowIdx < args.range[0]) {
                        args.range[0] = startRowIdx;
                    }
                }
            }
        }
        for (var i = args.range[0]; i <= args.range[2]; i++) {
            cell = getCell(i, args.range[3], sheet);
            if (cell) {
                rowIdx = i;
                colIdx = args.range[3];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rowIdx += cell.rowSpan;
                    if (rowIdx < args.range[0]) {
                        args.range[0] = rowIdx;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    colIdx += cell.colSpan;
                    if (colIdx < args.range[1]) {
                        args.range[1] = colIdx;
                    }
                }
                cell = getCell(rowIdx, colIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) > args.range[2]) {
                        args.range[2] = rowIdx;
                        args.range[2] = rowIdx + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && colIdx + (cell.colSpan - 1) > args.range[3]) {
                        args.range[3] = colIdx;
                        args.range[3] = colIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
    };
    WorkbookMerge.prototype.forwardReverse = function (args) {
        var sheet = this.parent.getActiveSheet();
        args.range = args.range;
        var colIndex = args.range[1];
        var cell = getCell(args.range[0], args.range[1], sheet);
        var rowIndex = args.range[0];
        if (cell) {
            if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                colIndex += cell.colSpan;
                if (args.range[3] >= colIndex) {
                    args.range[3] = colIndex;
                }
            }
            if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                rowIndex += cell.rowSpan;
                if (rowIndex < args.range[0]) {
                    args.range[0] = rowIndex;
                }
            }
            cell = getCell(rowIndex, colIndex, sheet);
            if (cell) {
                if (cell.rowSpan > 1 && rowIndex + (cell.rowSpan - 1) >= args.range[2]) {
                    args.range[2] = rowIndex + (cell.rowSpan - 1);
                }
                if (cell.colSpan > 1 && colIndex + (cell.colSpan - 1) >= args.range[1]) {
                    args.range[1] = colIndex + (cell.colSpan - 1);
                }
            }
        }
        args.range[0] = rowIndex;
        if (args.skipChecking) {
            return;
        }
        var rowIdx;
        var cellIdx;
        for (var i = args.range[3]; i <= args.range[1]; i++) {
            cell = getCell(args.range[2], i, sheet);
            if (cell) {
                cellIdx = i;
                rowIdx = args.range[2];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rowIdx += cell.rowSpan;
                    if (rowIdx < args.range[0]) {
                        args.range[0] = rowIdx;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    cellIdx += cell.colSpan;
                    if (cellIdx < args.range[3]) {
                        args.range[3] = cellIdx;
                    }
                }
                cell = getCell(rowIdx, cellIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) > args.range[2]) {
                        args.range[2] = rowIdx + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && cellIdx + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = cellIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
        var startRowIndex;
        for (var i = args.range[3]; i <= args.range[1]; i++) {
            cell = getCell(args.range[0], i, sheet);
            if (cell) {
                cellIdx = i;
                startRowIndex = args.range[0];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    startRowIndex += cell.rowSpan;
                    if (startRowIndex < args.range[0]) {
                        args.range[0] = startRowIndex;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    cellIdx += cell.colSpan;
                }
                cell = getCell(startRowIndex, cellIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && startRowIndex + (cell.rowSpan - 1) > args.range[2]) {
                        args.range[2] = startRowIndex + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && cellIdx + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = cellIdx;
                        args.range[1] = cellIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
        var colIdx;
        for (var i = args.range[0]; i <= args.range[2]; i++) {
            cell = getCell(i, args.range[3], sheet);
            if (cell) {
                startRowIndex = i;
                colIdx = args.range[3];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    startRowIndex += cell.rowSpan;
                    if (startRowIndex < args.range[0]) {
                        args.range[0] = startRowIndex;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    colIdx += cell.colSpan;
                    if (colIdx < args.range[3]) {
                        args.range[3] = colIdx;
                    }
                }
                cell = getCell(startRowIndex, colIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && startRowIndex + (cell.rowSpan - 1) > args.range[2]) {
                        args.range[2] = startRowIndex;
                        args.range[2] = startRowIndex + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && colIdx + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = colIdx;
                        args.range[1] = colIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
    };
    WorkbookMerge.prototype.reverse = function (args) {
        args.range = args.range;
        var colnIdx = args.range[1];
        var sheet = isUndefined$1(args.sheetIndex) ? this.parent.getActiveSheet() : getSheet(this.parent, args.sheetIndex);
        var cell = getCell(args.range[0], args.range[1], sheet);
        var rowIdx = args.range[0];
        if (cell) {
            if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                colnIdx += cell.colSpan;
            }
            if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                rowIdx += cell.rowSpan;
            }
            if (args.range[2] >= rowIdx) {
                args.range[2] = rowIdx;
                args.isActiveCell = true;
            }
            if (args.range[3] >= colnIdx) {
                args.range[3] = colnIdx;
                if (args.range[2] === rowIdx) {
                    args.isActiveCell = true;
                }
            }
            else if (args.isActiveCell) {
                args.isActiveCell = false;
            }
            cell = getCell(rowIdx, colnIdx, sheet);
            if (cell) {
                if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) >= args.range[0]) {
                    args.range[0] = rowIdx;
                    args.range[0] = rowIdx + (cell.rowSpan - 1);
                }
                if (cell.colSpan > 1 && colnIdx + (cell.colSpan - 1) >= args.range[1]) {
                    args.range[1] = colnIdx;
                    args.range[1] = colnIdx + (cell.colSpan - 1);
                }
            }
        }
        var colIdx = args.range[3];
        if (args.skipChecking) {
            return;
        }
        for (var i = args.range[3]; i <= args.range[1]; i++) {
            cell = getCell(args.range[2], i, sheet);
            if (cell) {
                colIdx = i;
                rowIdx = args.range[2];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rowIdx += cell.rowSpan;
                    if (rowIdx < args.range[2]) {
                        args.range[2] = rowIdx;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    colIdx += cell.colSpan;
                    if (colIdx < args.range[3]) {
                        args.range[3] = colIdx;
                    }
                }
                cell = getCell(rowIdx, colIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) > args.range[0]) {
                        args.range[0] = rowIdx;
                        args.range[0] = rowIdx + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && colIdx + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = colIdx;
                        args.range[1] = colIdx + (cell.colSpan - 1);
                    }
                }
            }
        }
        colIdx = args.range[3];
        for (var i = args.range[3]; i <= args.range[1]; i++) {
            cell = getCell(args.range[0], i, sheet);
            if (cell) {
                colIdx = i;
                rowIdx = args.range[0];
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    colIdx += cell.colSpan;
                }
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rowIdx += cell.rowSpan;
                }
                cell = getCell(rowIdx, colIdx, sheet);
                if (cell) {
                    if (cell.colSpan > 1 && colIdx + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = colIdx;
                        args.range[1] = colIdx + (cell.colSpan - 1);
                    }
                    if (cell.rowSpan > 1 && rowIdx + (cell.rowSpan - 1) > args.range[0]) {
                        args.range[0] = rowIdx;
                        args.range[0] = rowIdx + (cell.rowSpan - 1);
                    }
                }
            }
        }
        var cellIndex;
        var rIdx;
        for (var i = args.range[2]; i <= args.range[0]; i++) {
            cell = getCell(i, args.range[3], sheet);
            if (cell) {
                rIdx = i;
                cellIndex = args.range[3];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rIdx += cell.rowSpan;
                    if (rIdx < args.range[2]) {
                        args.range[2] = rIdx;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    cellIndex += cell.colSpan;
                    if (cellIndex < args.range[3]) {
                        args.range[3] = cellIndex;
                    }
                }
                cell = getCell(rIdx, cellIndex, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && rIdx + (cell.rowSpan - 1) > args.range[0]) {
                        args.range[0] = rIdx;
                        args.range[0] = rIdx + (cell.rowSpan - 1);
                    }
                    if (cell.colSpan > 1 && cellIndex + (cell.colSpan - 1) > args.range[1]) {
                        args.range[1] = cellIndex;
                        args.range[1] = cellIndex + (cell.colSpan - 1);
                    }
                }
            }
        }
    };
    WorkbookMerge.prototype.reverseForward = function (args) {
        args.range = args.range;
        var sheet = isUndefined$1(args.sheetIndex) ? this.parent.getActiveSheet() : getSheet(this.parent, args.sheetIndex);
        var rIdx = args.range[0];
        var cIdx = args.range[1];
        var cell = getCell(args.range[0], args.range[1], sheet);
        if (cell) {
            if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                rIdx += cell.rowSpan;
                if (args.range[2] >= rIdx) {
                    args.range[2] = rIdx;
                }
            }
            if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                cIdx += cell.colSpan;
            }
            cell = getCell(rIdx, cIdx, sheet);
            if (cell) {
                if (cell.rowSpan > 1 && rIdx + (cell.rowSpan - 1) >= args.range[0]) {
                    args.range[0] = rIdx;
                    args.range[0] = rIdx + (cell.rowSpan - 1);
                }
                if (cell.colSpan > 1 && cIdx + (cell.colSpan - 1) >= args.range[3]) {
                    args.range[3] = args.range[1];
                    args.range[3] = cIdx + (cell.colSpan - 1);
                }
            }
        }
        if (args.skipChecking) {
            return;
        }
        var cIndex = args.range[3];
        var rIndex;
        for (var i = args.range[1]; i <= args.range[3]; i++) {
            cell = getCell(args.range[2], i, sheet);
            if (cell) {
                rIndex = args.range[2];
                cIndex = i;
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rIndex += cell.rowSpan;
                    if (rIndex < args.range[2]) {
                        args.range[2] = rIndex;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    cIndex += cell.colSpan;
                    if (cIndex < args.range[1]) {
                        args.range[1] = cIndex;
                    }
                }
                cell = getCell(rIndex, cIndex, sheet);
                if (cell) {
                    if (cell.colSpan > 1 && cIndex + (cell.colSpan - 1) > args.range[3]) {
                        args.range[3] = cIndex + (cell.colSpan - 1);
                    }
                    if (cell.rowSpan > 1 && (cell.rowSpan - 1) + rIndex > args.range[0]) {
                        args.range[0] = (cell.rowSpan - 1) + rIndex;
                    }
                }
            }
        }
        var sRowIdx;
        var sColIdx;
        for (var i = args.range[1]; i <= args.range[3]; i++) {
            cell = getCell(args.range[0], i, sheet);
            if (cell) {
                sColIdx = i;
                sRowIdx = args.range[0];
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    sColIdx += cell.colSpan;
                    if (sColIdx < args.range[1]) {
                        args.range[1] = sColIdx;
                    }
                }
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    sRowIdx += cell.rowSpan;
                }
                cell = getCell(sRowIdx, sColIdx, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && sRowIdx + (cell.rowSpan - 1) > args.range[0]) {
                        args.range[0] = sRowIdx + (cell.rowSpan - 1);
                    }
                }
            }
        }
        var cellIndex;
        for (var i = args.range[2]; i <= args.range[0]; i++) {
            cell = getCell(i, args.range[3], sheet);
            if (cell) {
                rIndex = i;
                cellIndex = args.range[3];
                if (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan < 0) {
                    rIndex += cell.rowSpan;
                    if (rIndex < args.range[2]) {
                        args.range[2] = rIndex;
                    }
                }
                if (!isNullOrUndefined(cell.colSpan) && cell.colSpan < 0) {
                    cellIndex += cell.colSpan;
                    if (cellIndex < args.range[1]) {
                        args.range[1] = cellIndex;
                    }
                }
                cell = getCell(rIndex, cellIndex, sheet);
                if (cell) {
                    if (cell.rowSpan > 1 && (cell.rowSpan - 1) + rIndex > args.range[0]) {
                        args.range[0] = (cell.rowSpan - 1) + rIndex;
                    }
                    if (cell.colSpan > 1 && (cell.colSpan - 1) + cellIndex > args.range[3]) {
                        args.range[3] = cellIndex;
                        args.range[3] = (cell.colSpan - 1) + cellIndex;
                    }
                }
            }
        }
    };
    WorkbookMerge.prototype.insertHandler = function (args) {
        this.activeCellRange(args);
        args.range = args.range;
        if (args.insertModel === 'Row') {
            args.range[2] += args.insertCount;
        }
        else {
            args.range[3] += args.insertCount;
        }
        args.preventRefresh = true;
        args.merge = true;
        this.mergeAll(args);
    };
    WorkbookMerge.prototype.addEventListener = function () {
        this.parent.on(setMerge, this.merge, this);
        this.parent.on(mergedRange, this.mergedRange, this);
        this.parent.on(activeCellMergedRange, this.activeCellRange, this);
        this.parent.on(insertMerge, this.insertHandler, this);
    };
    /**
     * Destroy workbook merge module.
     *
     * @returns {void} - destroy the workbook merge module.
     */
    WorkbookMerge.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookMerge.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setMerge, this.merge);
            this.parent.off(mergedRange, this.mergedRange);
            this.parent.off(activeCellMergedRange, this.activeCellRange);
            this.parent.off(insertMerge, this.insertHandler);
        }
    };
    /**
     * Get the workbook merge module name.
     *
     * @returns {string} - Return the string.
     */
    WorkbookMerge.prototype.getModuleName = function () {
        return 'workbookmerge';
    };
    return WorkbookMerge;
}());

/**
 * The `WorkbookConditionalFormat` module is used to handle conditional formatting action in Spreadsheet.
 */
var WorkbookConditionalFormat = /** @class */ (function () {
    /**
     * Constructor for WorkbookConditionalFormat module.
     *
     * @param {Workbook} parent - Specifies the parent element.
     */
    function WorkbookConditionalFormat(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the conditional format module.
     *
     * @returns {void}
     */
    WorkbookConditionalFormat.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookConditionalFormat.prototype.addEventListener = function () {
        this.parent.on(setCFRule, this.setCFRule, this);
        this.parent.on(clearCFRule, this.clearCFRule, this);
    };
    WorkbookConditionalFormat.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setCFRule, this.setCFRule);
            this.parent.off(clearCFRule, this.clearCFRule);
        }
    };
    WorkbookConditionalFormat.prototype.setCFRule = function (e) {
        var cf = e.cfModel;
        var sheetIndex = e.sheetIdx === undefined ? getSheetIndexFromAddress(this.parent, cf.range) : e.sheetIdx;
        var sheet = getSheet(this.parent, sheetIndex);
        var indexes = getSwapRange(getRangeIndexes(cf.range || sheet.selectedRange));
        cf.range = getRangeAddress(indexes);
        if (e.isAction) {
            var eventArgs = { range: cf.range, type: cf.type, cancel: false, cFColor: cf.cFColor, value: cf.value,
                sheetIdx: sheetIndex };
            this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'conditionalFormat' });
            if (eventArgs.cancel) {
                return;
            }
            cf.type = eventArgs.type;
            cf.cFColor = eventArgs.cFColor;
            cf.value = eventArgs.value;
            if (eventArgs.range !== cf.range) {
                cf.range = eventArgs.range;
                indexes = getSwapRange(getRangeIndexes(eventArgs.range));
            }
            delete eventArgs.cancel;
        }
        if (!sheet.conditionalFormats) {
            this.parent.setSheetPropertyOnMute(sheet, 'conditionalFormats', []);
        }
        sheet.conditionalFormats.push(cf);
        if (sheetIndex !== this.parent.activeSheetIndex) {
            if (e.isUndoRedo && !e.isFromUpdateAction) {
                this.parent.notify(goto, { address: sheet.name + '!' + cf.range });
            }
        }
        else {
            this.parent.notify(applyCF, { cfModel: [cf], isAction: true });
        }
        this.parent.setUsedRange(indexes[2], indexes[3]);
        if (e.isAction) {
            this.parent.notify('actionComplete', { eventArgs: { range: cf.range, type: cf.type, cFColor: cf.cFColor, value: cf.value, sheetIdx: sheetIndex },
                action: 'conditionalFormat' });
        }
    };
    WorkbookConditionalFormat.prototype.clearCFRule = function (args) {
        if (args.sheetIdx === undefined) {
            args.sheetIdx = this.parent.activeSheetIndex;
        }
        var sheet = getSheet(this.parent, args.sheetIdx);
        var cfRule = sheet.conditionalFormats;
        var allowActionComplete = cfRule && cfRule[cfRule.length - 1] && cfRule[cfRule.length - 1].action !== 'autofillWithCF';
        if (args.isUndo) {
            if (args.updatedCFModel) {
                args.updatedCFModel.forEach(function (cf) {
                    for (var i = 0; i < cfRule.length; i++) {
                        if (cfRule[i].type === cf.type && cfRule[i].cFColor === cf.cFColor &&
                            cfRule[i].range === cf.range && cfRule[i].value === cf.value) {
                            cfRule.splice(i, 1);
                            break;
                        }
                    }
                });
            }
            cfRule.push.apply(cfRule, args.oldCFModel.map(function (item) { return Object.assign({}, item); }));
            this.parent.notify(applyCF, { cfModel: args.oldCFModel, isAction: true });
            if (args.sheetIdx !== this.parent.activeSheetIndex) {
                this.parent.notify(goto, { address: sheet.name + '!' + args.range });
            }
            return;
        }
        if (!cfRule || !cfRule.length) {
            return;
        }
        var cf;
        var cfRange;
        var cfIdx;
        var newRange;
        var left;
        var right;
        var top;
        var bottom;
        var range;
        var idx = args.range && (typeof args.range === 'string' ? getRangeIndexes(args.range) : args.range);
        idx = idx ? getSwapRange(idx) : idx;
        args.oldCFModel = [];
        args.updatedCFModel = [];
        var updatedCFModel = [];
        var oldRange = [];
        var refreshCF = [];
        for (var i = 0; i < cfRule.length; i++) {
            cf = cfRule[i];
            cfRange = cf.range.split(',');
            for (var j = 0; j < cfRange.length; j++) {
                cfIdx = getRangeIndexes(cfRange[j]);
                if (args.range) {
                    if (idx[0] <= cfIdx[0] && idx[1] <= cfIdx[1] && idx[2] >= cfIdx[2] && idx[3] >= cfIdx[3]) {
                        cfRange.splice(j, 1);
                        j--;
                    }
                    else {
                        top = idx[0] >= cfIdx[0] && idx[0] <= cfIdx[2];
                        bottom = idx[2] >= cfIdx[0] && idx[2] <= cfIdx[2];
                        left = idx[1] >= cfIdx[1] && idx[1] <= cfIdx[3];
                        right = idx[3] >= cfIdx[1] && idx[3] <= cfIdx[3];
                        newRange = [];
                        if (top && bottom) {
                            if (left || right || (idx[1] < cfIdx[1] && idx[3] > cfIdx[3])) {
                                if (idx[0] - cfIdx[0] > 0) {
                                    newRange.push(getRangeAddress([cfIdx[0], cfIdx[1], idx[0] - 1, cfIdx[3]]));
                                }
                                if (cfIdx[2] - idx[2] > 0) {
                                    newRange.push(getRangeAddress([idx[2] + 1, cfIdx[1], cfIdx[2], cfIdx[3]]));
                                }
                            }
                            if (left && idx[1] !== cfIdx[1]) {
                                newRange.push(getRangeAddress([idx[0], cfIdx[1], idx[2], idx[1] - 1]));
                            }
                            if (right && idx[3] !== cfIdx[3]) {
                                newRange.push(getRangeAddress([idx[0], idx[3] + 1, idx[2], cfIdx[3]]));
                            }
                        }
                        else if (left && right) {
                            if (top || bottom || (idx[0] < cfIdx[0] && idx[2] > cfIdx[2])) {
                                if (idx[1] - cfIdx[1] > 0) {
                                    newRange.push(getRangeAddress([cfIdx[0], cfIdx[1], cfIdx[2], idx[1] - 1]));
                                }
                                if (cfIdx[3] - idx[3] > 0) {
                                    newRange.push(getRangeAddress([cfIdx[0], idx[3] + 1, cfIdx[2], cfIdx[3]]));
                                }
                            }
                            if (top) {
                                if (idx[0] !== cfIdx[0]) {
                                    newRange.push(getRangeAddress([cfIdx[0], idx[1], idx[0] - 1, idx[3]]));
                                }
                            }
                            else if (bottom && idx[2] !== cfIdx[2]) {
                                newRange.push(getRangeAddress([idx[2] + 1, idx[1], cfIdx[2], idx[3]]));
                            }
                        }
                        else if (top || bottom) {
                            if (left) {
                                if (idx[1] !== cfIdx[1]) {
                                    newRange.push(getRangeAddress([cfIdx[0], cfIdx[1], cfIdx[2], idx[1] - 1]));
                                }
                                if (idx[0] - cfIdx[0] > 0) {
                                    newRange.push(getRangeAddress([cfIdx[0], idx[1], idx[0] - 1, cfIdx[3]]));
                                }
                                else if (cfIdx[2] - idx[2] > 0) {
                                    newRange.push(getRangeAddress([idx[2] + 1, idx[1], cfIdx[2], cfIdx[3]]));
                                }
                            }
                            else if (right) {
                                if (idx[3] !== cfIdx[3]) {
                                    newRange.push(getRangeAddress([cfIdx[0], idx[3] + 1, cfIdx[2], cfIdx[3]]));
                                }
                                if (idx[0] - cfIdx[0] > 0) {
                                    newRange.push(getRangeAddress([cfIdx[0], cfIdx[1], idx[0] - 1, idx[3]]));
                                }
                                else if (cfIdx[2] - idx[2] > 0) {
                                    newRange.push(getRangeAddress([idx[2] + 1, cfIdx[1], cfIdx[2], idx[3]]));
                                }
                            }
                        }
                        if (newRange.length) {
                            cfRange[j] = newRange.join(',');
                        }
                        else {
                            continue;
                        }
                    }
                }
                else {
                    idx = cfIdx;
                    cfRange.splice(j, 1);
                    j--;
                }
                if (args.sheetIdx === this.parent.activeSheetIndex) {
                    this.parent.notify(clearCF, { indexes: idx.slice() });
                }
            }
            range = cfRange.join(',');
            if (range !== cf.range) {
                if (args.cfModel && (args.cfModel.cFColor !== cf.cFColor || args.cfModel.type !== cf.type ||
                    args.cfModel.value !== cf.value)) {
                    refreshCF.push(cf);
                    continue;
                }
                oldRange.push(cf.range);
                if (!range) {
                    args.oldCFModel.push(cf);
                    updatedCFModel.concat(cfRule.splice(i, 1));
                    i--;
                }
                else {
                    args.oldCFModel.push({ type: cf.type, cFColor: cf.cFColor, format: cf.format, range: cf.range, value: cf.value });
                    cf.range = range;
                    if (cf.result) {
                        delete cf.result;
                        this.parent.notify(applyCF, { cfModel: [cf], isAction: true });
                    }
                    args.updatedCFModel.push(cf);
                    updatedCFModel.push(cf);
                }
            }
        }
        if (args.sheetIdx !== this.parent.activeSheetIndex) {
            if (args.isUndoRedo && !args.isFromUpdateAction) {
                this.parent.notify(goto, { address: sheet.name + '!' + args.range });
            }
        }
        else if (refreshCF.length) {
            this.parent.notify(applyCF, { cfModel: refreshCF, isAction: true });
        }
        if ((args.isAction || args.isClear) && args.oldCFModel.length) {
            var eventArgs = { cFormats: updatedCFModel, oldRange: oldRange,
                previousConditionalFormats: args.oldCFModel, sheetIdx: args.sheetIdx, selectedRange: args.range };
            if (args.updatedCFModel.length) {
                eventArgs.conditionalFormats = args.updatedCFModel;
            }
            if (args.isClear) {
                args.cfClearActionArgs = eventArgs;
            }
            else {
                if (allowActionComplete) {
                    this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'clearCF' });
                }
            }
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {void} string
     */
    WorkbookConditionalFormat.prototype.getModuleName = function () {
        return 'workbookConditionalFormatting';
    };
    return WorkbookConditionalFormat;
}());

/**
 * WorkbookAutoFill module allows to perform auto fill functionalities.
 */
var WorkbookAutoFill = /** @class */ (function () {
    /**
     * Constructor for the workbook AutoFill module.
     *
     * @param {Workbook} parent - Specifies the workbook.
     * @private
     */
    function WorkbookAutoFill(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    WorkbookAutoFill.prototype.getFillInfo = function (options) {
        var l10n = this.parent.serviceLocator.getService(workbookLocale);
        var val = '';
        var isStringType = true;
        var fillType = 'CopyCells';
        var disableItems = [];
        var isVFill = ['Down', 'Up'].indexOf(options.direction) > -1;
        var data = this.getRangeData({ range: options.dataRange, sheetIdx: this.parent.activeSheetIndex });
        var len = data.join().replace(/,/g, '').length;
        var i = this.isRange(options.dataRange) && len ? data.length : 1;
        while (i--) {
            val = data[i] && !isNullOrUndefined(data[i].value) ? data[i].value : '';
            if (isNumber(val) || checkIsFormula(val) || isNumber(val[val.length - 1])) {
                isStringType = false;
                fillType = this.parent.autoFillSettings.fillType;
                break;
            }
        }
        if (!len || isStringType) {
            disableItems.push(l10n.getConstant('FillSeries'));
            fillType = (options.fillType === 'FillSeries') ? fillType : options.fillType;
        }
        if (!isVFill || (isVFill && options.dataRange[1] !== options.dataRange[3])) {
            disableItems.push('Flash Fill'); // for flash fill option
        }
        return { fillType: fillType, disableItems: disableItems };
    };
    WorkbookAutoFill.prototype.isRange = function (range) {
        return range && (range[0] !== range[2] || range[1] !== range[3]);
    };
    WorkbookAutoFill.prototype.autoFill = function (options) {
        if (!options.dataRange || !options.fillRange || !options.direction || !this.parent.allowEditing ||
            (this.parent.getActiveSheet().isProtected && options.isLockedCell)) {
            return;
        }
        var dataRangeIndices = getSwapRange(getRangeIndexes(options.dataRange));
        var fillRangeIndices = getSwapRange(getRangeIndexes(options.fillRange));
        var autoFillOptions = {
            dataRange: dataRangeIndices, fillRange: fillRangeIndices, direction: options.direction, fillType: options.fillType || this.fillInfo.fillType, dataSheetIndex: getSheetIndexFromAddress(this.parent, options.dataRange),
            fillSheetIndex: getSheetIndexFromAddress(this.parent, options.fillRange), cells: options.cells
        };
        this.fillInfo = this.getFillInfo({ dataRange: dataRangeIndices, fillRange: fillRangeIndices, fillType: options.fillType,
            direction: options.direction });
        this.fillInfo.fillType = options.isFillOptClick ? options.fillType : this.fillInfo.fillType;
        switch (options.fillType) {
            case 'FillSeries':
            case 'FillWithoutFormatting':
                this.fillSeries(autoFillOptions);
                break;
            case 'CopyCells':
            case 'FillFormattingOnly':
                this.copyCells(autoFillOptions);
                break;
        }
    };
    WorkbookAutoFill.prototype.fillSeries = function (options) {
        var val;
        var plen;
        var patterns;
        var patrn;
        var pRanges;
        var patrnRange;
        var fillRange;
        var data;
        var nextStringValue;
        var match;
        var temp;
        var dlen;
        var j;
        var k;
        var l;
        var tlen;
        var tot;
        var hasRef;
        var cells;
        var clen;
        var cellIdx;
        var cellProps = {};
        var i = 0;
        var prevCellData;
        var dateVal;
        var dateObj;
        var dataSheetIndex = isUndefined$1(options.dataSheetIndex) ? this.parent.activeSheetIndex : options.dataSheetIndex;
        var dataSheet = getSheet(this.parent, dataSheetIndex);
        var fillSheetIndex;
        var activeSheet;
        if (isUndefined$1(options.fillSheetIndex)) {
            fillSheetIndex = this.parent.activeSheetIndex;
            activeSheet = true;
        }
        else {
            fillSheetIndex = options.fillSheetIndex;
            activeSheet = fillSheetIndex === this.parent.activeSheetIndex;
        }
        var fillSheet = getSheet(this.parent, fillSheetIndex);
        var dminr = options.dataRange[0];
        var dminc = options.dataRange[1];
        var dmaxr = options.dataRange[2];
        var dmaxc = options.dataRange[3];
        var fminr = options.fillRange[0];
        var fminc = options.fillRange[1];
        var fmaxr = options.fillRange[2];
        var fmaxc = options.fillRange[3];
        var isVFill = ['Down', 'Up'].indexOf(options.direction) > -1;
        var isReverseFill = ['Up', 'Left'].indexOf(options.direction) > -1;
        var len = isVFill ? dmaxc - dminc : dmaxr - dminr;
        var fillWithFrmt = options.fillType === 'FillSeries';
        var prop;
        var cfRefreshAll;
        var cancel;
        var cf = dataSheet.conditionalFormats && dataSheet.conditionalFormats.length &&
            [].slice.call(dataSheet.conditionalFormats);
        var cfRule = [];
        var applyWrapToOuterCells = activeSheet && this.applyWrapToOuterCells(fillSheet);
        var isRowHeightCheck = options.fillType !== 'FillWithoutFormatting' && activeSheet && isVFill;
        while (i <= len) {
            pRanges = this.updateFillValues(isVFill, dminr, dminc, dmaxr, dmaxc, fminr, fminc, fmaxr, fmaxc, i);
            patrnRange = pRanges.patternRange;
            fillRange = pRanges.fillRange;
            patterns = this.getPattern(patrnRange, { isReverseFill: isReverseFill, isVFill: isVFill }, dataSheetIndex);
            data = this.getRangeData({ range: patrnRange, sheetIdx: dataSheetIndex });
            if (!isVFill) {
                data = this.getRangeData({ range: patrnRange, sheetIdx: dataSheetIndex }, true);
            }
            var isRefFormula = false;
            if (data[0] && data[0].formula && data[0].formula.match(/=[A-Za-z]+\(([^:]+):([^:]+)\)/)) {
                isRefFormula = true;
            }
            dlen = data.length;
            for (var l_1 = 0; l_1 < dlen; l_1++) {
                if (data[l_1] && data[l_1].isReadOnly) {
                    this.parent.notify(workbookReadonlyAlert, null);
                    return;
                }
            }
            if (!patterns || !patterns.length) {
                return;
            }
            plen = patterns.length;
            cells = this.getSelectedRange(fillSheet, { rowIndex: fillRange[0], colIndex: fillRange[1] }, { rowIndex: fillRange[2],
                colIndex: fillRange[3] });
            clen = cells.length;
            if (isReverseFill) {
                cells = cells.reverse();
                patterns = patterns.reverse();
                patterns = this.ensurePattern(patterns);
                data = data.reverse();
            }
            j = 0;
            while (j < clen) {
                cellIdx = cells[j];
                patrn = patterns[j % plen];
                if (isNumber(patrn)) {
                    patrn = patterns[patrn];
                }
                l = j % dlen;
                switch (patrn['type']) {
                    case 'number':
                    case 'date':
                        patrn = patrn;
                        if (patrn.isStartWithMonth && dlen === 1) {
                            dateVal = intToDate(patrn.regVal.a);
                            dateObj = new Date(dateVal);
                            dateVal.setMonth(dateVal.getMonth() + (patrn.regVal.b * patrn.i));
                            if (dateObj.getDate() > 28 && dateObj.getDate() !== dateVal.getDate()) {
                                dateObj.setDate(1);
                                dateObj.setMonth(dateObj.getMonth() + (patrn.regVal.b * patrn.i));
                                dateObj.setDate(new Date(dateObj.getFullYear(), dateObj.getMonth() + 1, 0).getDate());
                                dateVal = dateObj;
                            }
                            val = dateToInt(dateVal).toString();
                        }
                        else {
                            val = (this.round(patrn['regVal'].a + (patrn['regVal'].b * patrn['i']), 5)).toString();
                            if (patrn.val) {
                                match = (typeof (patrn.val[0]) === 'string') && patrn.val[0].match(/^0+/);
                                if (match) {
                                    nextStringValue = this.getNextFormattedValue(patrn.val[0], Number(val));
                                }
                            }
                        }
                        if (patrn.dataVal) {
                            if (patrn.copy === undefined && !match) {
                                patrn.copy = patrn.val.length > 2;
                                if (patrn.copy) {
                                    for (var m = 2; m < patrn.val.length; m++) {
                                        patrn.copy = Math.abs(this.round(patrn['regVal'].a + (patrn['regVal'].b * m), 5)) !==
                                            patrn.val[m];
                                        if (patrn.copy) {
                                            break;
                                        }
                                    }
                                }
                            }
                            val = patrn.copy ? (data[l] && !isNullOrUndefined(data[l].value) ? data[l].value : '') :
                                (patrn.start ? Math.abs(Number(val)) + patrn.dataVal :
                                    (match ? patrn.dataVal + nextStringValue : patrn.dataVal + Math.abs(Number(val))));
                        }
                        if (isReverseFill) {
                            patrn['i']--;
                        }
                        else {
                            patrn['i']++;
                        }
                        break;
                    case 'string':
                        // eslint-disable-next-line no-case-declarations
                        var newVal = patrn['i'] % patrn['val'].length;
                        val = patrn['val'][newVal];
                        patrn['i']++;
                        break;
                    case 'formula':
                        hasRef = false;
                        val = '=';
                        k = 0;
                        tlen = patrn['val'].length;
                        while (k < tlen) {
                            temp = patrn['val'][k];
                            if (typeof temp === 'object') {
                                hasRef = true;
                                tot = this.round(temp['a'] + (temp['b'] * patrn['i']), 5);
                                if (tot < 1) {
                                    val += '#REF!';
                                    if (isRefFormula) {
                                        k = tlen - 1;
                                        val += patrn['val'][k];
                                    }
                                }
                                else {
                                    val += isVFill ? temp['c'] + (temp['b'] ? tot : '$' + tot) : (temp['b'] ? getColumnHeaderText(tot) : temp['c'].substring(0, temp['c'].search(/\d/)) + '$' + getColumnHeaderText(tot)) + temp['c'].trim();
                                }
                            }
                            else {
                                val += temp;
                            }
                            k++;
                        }
                        if (hasRef && isReverseFill) {
                            patrn['i']--;
                        }
                        else {
                            patrn['i']++;
                        }
                        break;
                    case 'time':
                        val = (patrn['regVal'].a + (patrn['regVal'].b * patrn['i'])).toString();
                        if (Number(val) < 0 && isReverseFill) {
                            val = ((patrn['regVal'].a + Math.ceil(Math.abs(patrn['i'] / 24))) + (patrn['regVal'].b * patrn['i'])).toString();
                        }
                        if (isReverseFill) {
                            patrn['i']--;
                        }
                        else {
                            patrn['i']++;
                        }
                        break;
                }
                prevCellData = getCell(cellIdx.rowIndex, cellIdx.colIndex, fillSheet, false, true);
                if (prevCellData && prevCellData.isReadOnly) {
                    this.parent.notify(workbookReadonlyAlert, null);
                    return;
                }
                if (fillWithFrmt) {
                    Object.assign(cellProps, data[l], null, true);
                }
                else {
                    if (options.fillType === 'FillWithoutFormatting' && data[l] && data[l].hyperlink) {
                        cellProps.hyperlink = data[l].hyperlink;
                        cellProps.style = { textDecoration: 'none', color: 'inherit' };
                    }
                    else {
                        cellProps.style = prevCellData.style;
                    }
                    cellProps.format = prevCellData.format;
                    cellProps.wrap = prevCellData.wrap;
                    cellProps.rowSpan = prevCellData.rowSpan;
                    cellProps.colSpan = prevCellData.colSpan;
                }
                if (data[l] && data[l].validation) {
                    cellProps.validation = Object.assign({}, data[l].validation);
                    var currIdx = [cellIdx.rowIndex, cellIdx.colIndex, cellIdx.rowIndex, cellIdx.colIndex];
                    var prevIdx = [options.dataRange[0], options.dataRange[1], options.dataRange[2], options.dataRange[3]];
                    var sheet = this.parent.sheets[this.parent.activeSheetIndex];
                    var updatedValue = getUpdatedFormula(currIdx, prevIdx, sheet, this.parent, { formula: cellProps.validation.value1 });
                    cellProps.validation.value1 = updatedValue;
                    if (cellProps.validation.value2 !== '') {
                        updatedValue = getUpdatedFormula(currIdx, prevIdx, sheet, this.parent, { formula: cellProps.validation.value2 });
                        cellProps.validation.value2 = updatedValue;
                    }
                }
                var isFormula = checkIsFormula(val);
                if (isFormula) {
                    cellProps.formula = val;
                }
                if (val !== '0' || (val === '0' && options.fillType !== 'FillWithoutFormatting')) {
                    cellProps.value = isFormula && this.parent.calculationMode === 'Manual' ?
                        (data[l] ? data[l].value : '0') : val;
                }
                if (!isNullOrUndefined(cellProps.notes)) {
                    delete cellProps.notes;
                }
                prop = { cell: cellProps, rowIdx: cellIdx.rowIndex, colIdx: cellIdx.colIndex, valChange: true, uiRefresh: activeSheet,
                    pvtExtend: true, skipFormatCheck: true, fillType: options.fillType };
                if (activeSheet && !isHiddenRow(fillSheet, cellIdx.rowIndex) && !isHiddenCol(fillSheet, cellIdx.colIndex)) {
                    prop.td = this.parent.getCell(cellIdx.rowIndex, cellIdx.colIndex);
                    if (prop.td) {
                        prop.uiRefresh = true;
                    }
                }
                cancel = updateCell(this.parent, fillSheet, prop, options.cells);
                if (!cancel) {
                    if (activeSheet) {
                        applyWrapToOuterCells(prop);
                    }
                    if (cf && !cfRefreshAll) {
                        cfRefreshAll = prop.isFormulaDependent;
                        if (!cfRefreshAll) {
                            updateCFModel(cf, cfRule, cellIdx.rowIndex, cellIdx.colIndex, options.dataRange, options.fillRange, dataSheet);
                        }
                    }
                    if (isRowHeightCheck && cellProps.style && isHeightCheckNeeded(cellProps.style)) {
                        this.parent.notify(applyCellFormat, {
                            rowIdx: cellIdx.rowIndex, colIdx: cellIdx.colIndex, style: cellProps.style,
                            lastCell: true, isHeightCheckNeeded: true, onActionUpdate: true, manualUpdate: true
                        });
                    }
                }
                cellProps = {};
                j++;
            }
            i++;
        }
        if (cfRule.length || cfRefreshAll) {
            this.parent.notify(applyCF, { cfModel: !cfRefreshAll && cfRule, refreshAll: cfRefreshAll, isAction: true, isEdit: true });
        }
    };
    WorkbookAutoFill.prototype.copyCells = function (options) {
        var i = 0;
        var j;
        var k;
        var patrnRange;
        var fillRange;
        var pRanges;
        var data;
        var dlen;
        var cells;
        var clen;
        var cellProperty = {};
        var cellIdx;
        var dMinR = options.dataRange[0];
        var dMinC = options.dataRange[1];
        var dMaxR = options.dataRange[2];
        var dMaxC = options.dataRange[3];
        var fMinR = options.fillRange[0];
        var fMinC = options.fillRange[1];
        var fMaxR = options.fillRange[2];
        var fMaxC = options.fillRange[3];
        var isVFill = ['Down', 'Up'].indexOf(options.direction) > -1;
        var isReverseFill = ['Up', 'Left'].indexOf(options.direction) > -1;
        var len = isVFill ? dMaxC - dMinC : dMaxR - dMinR;
        var dataSheetIndex = isUndefined$1(options.dataSheetIndex) ? this.parent.activeSheetIndex : options.dataSheetIndex;
        var dataSheet = getSheet(this.parent, dataSheetIndex);
        var fillSheetIndex;
        var activeSheet;
        if (isUndefined$1(options.fillSheetIndex)) {
            activeSheet = true;
            fillSheetIndex = this.parent.activeSheetIndex;
        }
        else {
            activeSheet = options.fillSheetIndex === this.parent.activeSheetIndex;
            fillSheetIndex = options.fillSheetIndex;
        }
        var fillSheet = getSheet(this.parent, fillSheetIndex);
        var formatOnly = options.fillType === 'FillFormattingOnly';
        var prevCellData;
        var cfRefreshAll;
        var prop;
        var cf = dataSheet.conditionalFormats && dataSheet.conditionalFormats.length &&
            [].slice.call(dataSheet.conditionalFormats);
        var cancel;
        var applyWrapToOuterCells = activeSheet && this.applyWrapToOuterCells(fillSheet);
        var cfRule = [];
        var isRowHeightCheck = activeSheet && isVFill;
        while (i <= len) {
            pRanges = this.updateFillValues(isVFill, dMinR, dMinC, dMaxR, dMaxC, fMinR, fMinC, fMaxR, fMaxC, i);
            patrnRange = pRanges.patternRange;
            fillRange = pRanges.fillRange;
            data = this.getRangeData({ range: patrnRange, sheetIdx: dataSheetIndex });
            dlen = data.length;
            for (var m = 0; m < dlen; m++) {
                if (data[m] && data[m].isReadOnly) {
                    this.parent.notify(workbookReadonlyAlert, null);
                    return;
                }
            }
            cells = this.getSelectedRange(fillSheet, { rowIndex: fillRange[0], colIndex: fillRange[1] }, { rowIndex: fillRange[2], colIndex: fillRange[3] });
            clen = cells.length;
            j = 0;
            if (isReverseFill) {
                cells = cells.reverse();
            }
            while (j < clen) {
                k = j % dlen;
                cellIdx = cells[j];
                if (formatOnly) {
                    prevCellData = getCell(cellIdx.rowIndex, cellIdx.colIndex, fillSheet);
                }
                Object.assign(cellProperty, data[k], null, true);
                if (formatOnly) {
                    cellProperty.value = prevCellData.value;
                    cellProperty.formula = prevCellData.formula;
                    if (!isNullOrUndefined(cellProperty.notes)) {
                        delete cellProperty.notes;
                    }
                    if (cellProperty.validation) {
                        delete cellProperty.validation;
                    }
                }
                if (cellProperty && cellProperty.isReadOnly) {
                    this.parent.notify(workbookReadonlyAlert, null);
                    return;
                }
                if (!isNullOrUndefined(cellProperty.notes) && !isNullOrUndefined(cellProperty.isNoteEditable)) {
                    delete cellProperty.notes;
                    delete cellProperty.isNoteEditable;
                }
                prop = { cell: cellProperty, rowIdx: cellIdx.rowIndex, colIdx: cellIdx.colIndex, valChange: true,
                    pvtExtend: true, fillType: options.fillType };
                if (activeSheet && !isHiddenRow(fillSheet, cellIdx.rowIndex) && !isHiddenCol(fillSheet, cellIdx.colIndex)) {
                    prop.td = this.parent.getCell(cellIdx.rowIndex, cellIdx.colIndex);
                    prop.uiRefresh = !!prop.td;
                }
                cancel = updateCell(this.parent, fillSheet, prop, options.cells);
                if (!cancel) {
                    if (activeSheet) {
                        applyWrapToOuterCells(prop);
                    }
                    if (cf && !cfRefreshAll) {
                        cfRefreshAll = prop.isFormulaDependent;
                        if (!cfRefreshAll) {
                            updateCFModel(cf, cfRule, cellIdx.rowIndex, cellIdx.colIndex, options.dataRange, options.fillRange, dataSheet);
                        }
                    }
                    if (isRowHeightCheck && cellProperty.style && isHeightCheckNeeded(cellProperty.style)) {
                        this.parent.notify(applyCellFormat, {
                            rowIdx: cellIdx.rowIndex, colIdx: cellIdx.colIndex, style: cellProperty.style,
                            lastCell: true, isHeightCheckNeeded: true, onActionUpdate: true, manualUpdate: true
                        });
                    }
                }
                cellProperty = {};
                j++;
            }
            i++;
        }
        if (cfRule.length || cfRefreshAll) {
            this.parent.notify(applyCF, { cfModel: !cfRefreshAll && cfRule, refreshAll: cfRefreshAll, isAction: true, isEdit: true });
        }
    };
    WorkbookAutoFill.prototype.applyWrapToOuterCells = function (sheet) {
        var _this = this;
        var viewTopIdx;
        var viewLeftIdx;
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        var viewport = this.parent.viewport;
        if (viewport) {
            viewTopIdx = viewport.topIndex + frozenRow;
            viewLeftIdx = viewport.leftIndex + frozenCol;
        }
        var wrapArgs;
        return function (options) {
            if (!options.td && getCell(options.rowIdx, options.colIdx, sheet, false, true).wrap && ((options.rowIdx >= frozenRow &&
                options.rowIdx < viewTopIdx) || (options.colIdx >= frozenCol && options.colIdx < viewLeftIdx))) {
                if (!wrapArgs) {
                    wrapArgs = { range: null, wrap: true, sheet: sheet, initial: true, outsideViewport: true };
                }
                wrapArgs.range = [options.rowIdx, options.colIdx, options.rowIdx, options.colIdx];
                _this.parent.notify(wrapEvent, wrapArgs);
            }
        };
    };
    WorkbookAutoFill.prototype.updateFillValues = function (isVFill, dminr, dminc, dmaxr, dmaxc, fminr, fminc, fmaxr, fmaxc, i) {
        var pStart;
        var pEnd;
        var fStart;
        var fEnd;
        if (isVFill) {
            pStart = { rowIndex: dminr, colIndex: dminc + i };
            pEnd = { rowIndex: dmaxr, colIndex: dminc + i };
            fStart = { rowIndex: fminr, colIndex: fminc + i };
            fEnd = { rowIndex: fmaxr, colIndex: fminc + i };
        }
        else {
            pStart = { rowIndex: dminr + i, colIndex: dminc };
            pEnd = { rowIndex: dminr + i, colIndex: dmaxc };
            fStart = { rowIndex: fminr + i, colIndex: fminc };
            fEnd = { rowIndex: fminr + i, colIndex: fmaxc };
        }
        var patternRange = [pStart.rowIndex, pStart.colIndex, pEnd.rowIndex, pEnd.colIndex];
        var fillRange = [fStart.rowIndex, fStart.colIndex, fEnd.rowIndex, fEnd.colIndex];
        return { patternRange: patternRange, fillRange: fillRange };
    };
    WorkbookAutoFill.prototype.getDataPattern = function (range, sheetIdx) {
        var val;
        var numValue;
        var type;
        var i = 0;
        var obj = { val: null,
            type: null };
        var patrn = [];
        var data = this.getRangeData({
            range: range, sheetIdx: isUndefined$1(sheetIdx) ? this.parent.activeSheetIndex
                : sheetIdx
        });
        var dlen = data.length;
        var isStartNum;
        var isDateStartsWithMonth;
        if (dlen) {
            var count = void 0;
            var dataVal = void 0;
            var format = void 0;
            var isNumVal = void 0;
            var minusOperator = function (data) {
                return !isStartNum && data && data[data.length - 1] === '-' ? data.slice(0, data.length - 1) : data;
            };
            while (i < dlen) {
                isDateStartsWithMonth = false;
                if (data[i]) {
                    if (data[i].formula && checkIsFormula(data[i].formula)) {
                        val = data[i].formula;
                        type = 'formula';
                    }
                    else {
                        val = isNullOrUndefined(data[i].value) ? '' : data[i].value;
                        var option = {};
                        format = data[i].format;
                        isNumVal = isNumber(val);
                        if (format && isCustomDateTime(format, true, option)) {
                            type = option.type;
                            if (val && !isNumVal) {
                                var dateEventArgs = { value: val, updatedVal: val, cell: data[i] };
                                this.parent.notify(checkDateFormat, dateEventArgs);
                                if (dateEventArgs.isDate || dateEventArgs.isTime) {
                                    data[i].value = val = dateEventArgs.updatedVal;
                                }
                                else {
                                    type = 'string';
                                }
                            }
                            isDateStartsWithMonth = type === 'date' && format.toLowerCase().startsWith('mmm');
                        }
                        else {
                            type = isNumVal ? 'number' : 'string';
                        }
                    }
                }
                else {
                    val = '';
                    type = 'string';
                }
                dataVal = '';
                if (type === 'string') {
                    isStartNum = false;
                    if (isNumber(val[0])) {
                        count = 0;
                        do {
                            count++;
                        } while (isNumber(val[count]));
                        if (val[count] === ' ') {
                            isStartNum = true;
                            type = 'number';
                            dataVal = val.slice(count, val.length);
                            val = Number(val.slice(0, count));
                        }
                    }
                    val = val;
                    if (!isStartNum && isNumber(val[val.length - 1])) {
                        count = 1;
                        do {
                            count++;
                        } while (isNumber(val[val.length - count]));
                        type = 'number';
                        count -= 1;
                        dataVal = val.slice(0, val.length - count);
                        numValue = val.slice(val.length - count, val.length);
                        val = numValue.match(/^0+/) ? numValue : Number(numValue);
                        if (obj.dataVal && obj.dataVal !== dataVal && obj.dataVal === minusOperator(dataVal)) {
                            dataVal = obj.dataVal;
                        }
                    }
                }
                if (i === 0) {
                    obj = { val: [val], type: type, isStartWithMonth: isDateStartsWithMonth };
                    if (dataVal) {
                        obj.dataVal = dataVal;
                        obj.start = isStartNum;
                    }
                }
                else if (type === obj.type && (!obj.dataVal || minusOperator(obj.dataVal) === minusOperator(dataVal))) {
                    obj.val.push(val);
                }
                else {
                    patrn.push(obj);
                    obj = { val: [val], type: type };
                    if (dataVal) {
                        obj.dataVal = dataVal;
                        obj.start = isStartNum;
                    }
                }
                i++;
            }
            patrn.push(obj);
            return patrn;
        }
        else {
            return [{ val: null, type: null }];
        }
    };
    WorkbookAutoFill.prototype.getPredictionValue = function (args, isTime) {
        var i = 0;
        var sumx = 0;
        var sumy = 0;
        var sumxy = 0;
        var sumxx = 0;
        var a = 0;
        var b = 0;
        var n = args.length;
        while (i < n) {
            sumx = sumx + i;
            sumy = sumy + Number(args[i]);
            sumxy = sumxy + (i * Number(args[i]));
            sumxx = sumxx + (i * i);
            i++;
        }
        if (!isTime) {
            a = this.round(((sumy * sumxx) - (sumx * sumxy)) / ((n * sumxx) - (sumx * sumx)), 5);
            b = this.round(((n * sumxy) - (sumx * sumy)) / ((n * sumxx) - (sumx * sumx)), 5);
        }
        else {
            a = ((sumy * sumxx) - (sumx * sumxy)) / ((n * sumxx) - (sumx * sumx));
            b = ((n * sumxy) - (sumx * sumy)) / ((n * sumxx) - (sumx * sumx));
        }
        return { a: a, b: b };
    };
    WorkbookAutoFill.prototype.getPattern = function (range, options, sheetIdx) {
        var j;
        var idx;
        var temp;
        var regVal;
        var diff;
        var len;
        var i = 0;
        var pattern = [];
        var patrns = this.getDataPattern(range, sheetIdx);
        var plen = patrns.length;
        var patrn;
        if (patrns) {
            while (i < plen) {
                patrn = patrns[i];
                switch (patrn.type) {
                    case 'number':
                    case 'date':
                        idx = pattern.length;
                        len = patrn.val.length;
                        diff = options.isReverseFill ? -1 : len;
                        if (len === 1) {
                            var newVal = parseFloat(patrn.val[0]) + 1;
                            if (typeof (patrn.val[0]) === 'string' && patrn.val[0].match(/^0+/)) {
                                patrn.val.push(this.getNextFormattedValue(patrn.val[0], newVal));
                            }
                            else {
                                patrn.val.push(newVal);
                            }
                        }
                        regVal = this.getPredictionValue(patrn.dataVal ? patrn.val.slice(0, 2) : patrn.val);
                        temp = { regVal: regVal, type: patrn.type, i: diff, isStartWithMonth: patrn.isStartWithMonth };
                        if (patrn.dataVal) {
                            temp.dataVal = patrn.dataVal;
                            temp.val = patrn.val;
                            temp.start = patrn.start;
                        }
                        pattern.push(temp);
                        j = 1;
                        while (j < len) {
                            pattern.push(idx);
                            j++;
                        }
                        break;
                    case 'string':
                        idx = pattern.length;
                        temp = { val: patrn.val, type: patrn.type, i: 0 };
                        pattern.push(temp);
                        j = 1;
                        len = patrn.val.length;
                        while (j < len) {
                            pattern.push(idx);
                            j++;
                        }
                        break;
                    case 'formula':
                        len = patrn.val.length;
                        patrn = this.getFormulaPattern(patrn.val, options);
                        diff = options.isReverseFill ? -1 : len;
                        if (patrn.isInPattern) {
                            idx = pattern.length;
                            temp = { val: patrn.val, type: 'formula', i: diff };
                            pattern.push(temp);
                            j = 1;
                            while (j < len) {
                                pattern.push(idx);
                                j++;
                            }
                        }
                        else {
                            j = 0;
                            diff = options.isReverseFill ? -1 : 1;
                            while (j < len) {
                                pattern.push({ val: patrn.val[j], type: 'formula', i: diff });
                                j++;
                            }
                        }
                        break;
                    case 'time':
                        idx = pattern.length;
                        len = patrn.val.length;
                        diff = options.isReverseFill ? -1 : len;
                        if (len === 1) {
                            var oldTimeVal = intToDate(patrn.val[0]);
                            var patrnVal = Number(patrn.val[0]);
                            var isTimeOnly = patrnVal >= 0 && patrnVal < 1;
                            var newTimeVal = dateToInt(new Date(oldTimeVal.getTime() + 60 * 60000), true, isTimeOnly);
                            patrn.val.push(newTimeVal);
                        }
                        regVal = this.getPredictionValue(patrn.val, true);
                        temp = { regVal: regVal, type: patrn.type, i: diff };
                        pattern.push(temp);
                        j = 1;
                        while (j < len) {
                            pattern.push(idx);
                            j++;
                        }
                        break;
                }
                i++;
            }
            return pattern;
        }
        else {
            return [{ regVal: null }];
        }
    };
    WorkbookAutoFill.prototype.getNextFormattedValue = function (value, numValue) {
        var val = new Internationalization().formatNumber(Math.abs(numValue), { minimumIntegerDigits: value.length, useGrouping: false });
        var numeArgs = checkIsNumberAndGetNumber({ value: val }, this.parent.locale);
        return numeArgs.isNumber ? numeArgs.value : val;
    };
    WorkbookAutoFill.prototype.isCellReference = function (text) {
        return /^[a-z]{1,3}\d{1,7}$/gi.test(text) ? 'relative' : (/^\$[a-z]{1,3}\$\d{1,7}$/gi.test(text) ? 'absolute' : (/^((\$[a-z]{1,3})\d{1,7}|[a-z]{1,3}(\$\d{1,7}))$/gi.test(text) ? 'mixed' : false));
    };
    WorkbookAutoFill.prototype.round = function (value, round) {
        return Number(Math.round(parseFloat(value + 'e' + round)) + 'e-' + round) || Number(value);
    };
    WorkbookAutoFill.prototype.getRangeData = function (options, isVFill) {
        var arr = [];
        var sheet = isUndefined$1(options.sheetIdx) ? this.parent.getActiveSheet() : getSheet(this.parent, options.sheetIdx);
        var minR = options.range[0];
        var minC = options.range[1];
        var maxR = options.range[2];
        var maxC = options.range[3];
        var minCol = minC;
        var cell;
        var column;
        while (minR <= maxR) {
            if (isHiddenRow(sheet, minR)) {
                minR++;
                continue;
            }
            minC = minCol;
            while (minC <= maxC) {
                if (isHiddenCol(sheet, minC)) {
                    minC++;
                    continue;
                }
                cell = getCell(minR, minC, sheet);
                if (isVFill) {
                    cell = Object.assign({}, getCell(minR, minC, sheet));
                    column = Object.assign({}, getColumn(sheet, minC));
                    if (cell && !cell.validation) {
                        if (column && column.validation) {
                            cell.validation = Object.assign({}, getColumn(sheet, minC).validation);
                            var currIdx = [minR, minC, minR, minC];
                            var prevIdx = [0, minC, 0, minC];
                            var updateVal = getUpdatedFormula(currIdx, prevIdx, sheet, this.parent, { formula: column.validation.value1 });
                            cell.validation.value1 = updateVal;
                            if (cell.validation.value2 !== '') {
                                updateVal = getUpdatedFormula(currIdx, prevIdx, sheet, this.parent, { formula: column.validation.value2 });
                                cell.validation.value2 = updateVal;
                            }
                        }
                    }
                }
                arr.push(cell);
                minC++;
            }
            minR++;
        }
        return arr;
    };
    WorkbookAutoFill.prototype.getFormulaPattern = function (data, options) {
        var j;
        var temp;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var patrn;
        var patrns = [];
        var i = 0;
        var len = data.length;
        var cRfrType;
        var eventArgs = {};
        while (i < len) {
            eventArgs.formula = data[i];
            this.parent.notify(parseFormulaArgument, eventArgs);
            patrns.push(eventArgs.formulaArr);
            i++;
        }
        var isInPatrn = this.isInPattern(patrns, options.isVFill);
        if (isInPatrn) {
            patrn = patrns[0];
            i = patrn.length;
            while (i--) {
                temp = patrn[i];
                cRfrType = this.isCellReference(temp);
                if (cRfrType && (cRfrType !== 'absolute')) {
                    patrn[i] = this.getCellRefPrediction(temp, options, null, cRfrType);
                }
            }
            return { isInPattern: isInPatrn, val: patrn };
        }
        else {
            i = 0;
            while (i < len) {
                patrn = patrns[i];
                j = patrn.length;
                while (j--) {
                    temp = patrn[j];
                    cRfrType = this.isCellReference(temp.trim());
                    if (cRfrType && (cRfrType !== 'absolute')) {
                        patrns[i][j] = this.getCellRefPrediction(temp, options, len, cRfrType);
                    }
                }
                i++;
            }
            return { isInPattern: isInPatrn, val: patrns };
        }
    };
    WorkbookAutoFill.prototype.generateColCount = function (text) {
        var colCount = 0;
        for (var i = 0; i < text.length; i++) {
            var charValue = text.charCodeAt(i) - 64;
            colCount = colCount * 26 + charValue;
        }
        return colCount;
    };
    WorkbookAutoFill.prototype.getCellRefPrediction = function (text, options, length, rfrType) {
        text = text.toUpperCase();
        var eStr = '';
        var aRegx = new RegExp('[a-z$]', 'gi');
        var nRegx = new RegExp('[0-9$]', 'g');
        var str = options.isVFill ? text.replace(nRegx, eStr) : text.replace(aRegx, eStr);
        var temp = options.isVFill ? Number(text.replace(aRegx, eStr)) :
            this.generateColCount(text.replace(nRegx, eStr).trim());
        var dollarPosition = null;
        var arr = [temp];
        var isColAbslt = text[0] === '$';
        if (!isColAbslt && text.includes('$') && text.trim()[0] === '$') {
            for (var idx = 1; idx < text.length; idx++) {
                if (text[idx] === '$') {
                    dollarPosition = idx;
                    isColAbslt = true;
                    break;
                }
            }
        }
        if (length && length !== 1) {
            arr.push(temp + length);
        }
        else {
            arr.push(temp + 1);
        }
        temp = this.getPredictionValue(arr);
        if (rfrType && (rfrType === 'mixed')) {
            if (isColAbslt === options.isVFill) {
                if (dollarPosition) {
                    str = str.substring(0, dollarPosition) + '$' + str.substring(dollarPosition);
                }
                else {
                    str = '$' + str;
                }
            }
            else {
                temp['b'] = 0;
            }
        }
        temp['c'] = str;
        return temp;
    };
    WorkbookAutoFill.prototype.isInPattern = function (patrn, isVFill) {
        var oldPatrn;
        var olen;
        var newPatrn;
        var nlen;
        var oldStr;
        var newStr;
        var oldInt;
        var newInt;
        var eStr = '';
        var i = 0;
        var j = 1;
        var plen = patrn.length;
        var nregx = new RegExp('[0-9$]', 'g');
        var aregx = new RegExp('[a-z$]', 'gi');
        if (plen === 1) {
            return false;
        }
        while (j < plen) {
            oldPatrn = patrn[i];
            newPatrn = patrn[j];
            olen = oldPatrn.length;
            nlen = newPatrn.length;
            if (olen !== nlen) {
                return false;
            }
            else {
                while (olen--) {
                    oldStr = oldPatrn[olen];
                    newStr = newPatrn[olen];
                    if (this.isCellReference(oldStr) === this.isCellReference(newStr)) {
                        if (isVFill) {
                            oldInt = Number(oldStr.replace(aregx, eStr));
                            newInt = Number(newStr.replace(aregx, eStr));
                        }
                        else {
                            oldInt = this.generateColCount(oldStr.replace(nregx, eStr));
                            newInt = this.generateColCount(newStr.replace(nregx, eStr));
                        }
                        if (oldInt !== newInt - 1) {
                            return false;
                        }
                    }
                    else if (oldStr !== newStr) {
                        return false;
                    }
                }
            }
            i++;
            j++;
        }
        return true;
    };
    WorkbookAutoFill.prototype.ensurePattern = function (patterns) {
        var patrn;
        var idx = -1;
        var i = patterns.length;
        while (i--) {
            patrn = patterns[i];
            if (typeof (patrn) === 'object') {
                idx = i;
                if (patrn.type === 'string') {
                    patrn.val = patrn.val.reverse();
                }
            }
            else {
                patterns[i] = idx;
            }
        }
        return patterns;
    };
    WorkbookAutoFill.prototype.getSelectedRange = function (sheet, startcell, endcell) {
        var i;
        var k;
        var l;
        var arr = [];
        var range = getSwapRange([startcell.rowIndex, startcell.colIndex, endcell.rowIndex, endcell.colIndex]);
        i = range[0];
        var j = range[2];
        while (i <= j) {
            if (isFilterHidden(sheet, i)) {
                i++;
                continue;
            }
            k = range[1];
            l = range[3];
            while (k <= l) {
                arr.push({ rowIndex: i, colIndex: k });
                k++;
            }
            i++;
        }
        return arr;
    };
    WorkbookAutoFill.prototype.getFillType = function (args) {
        args.fillType = this.fillInfo.fillType;
        args.disableItems = this.fillInfo.disableItems;
        return args;
    };
    WorkbookAutoFill.prototype.addEventListener = function () {
        this.parent.on(setAutoFill, this.autoFill, this);
        this.parent.on(getFillInfo, this.getFillType, this);
    };
    /**
     * Destroy workbook AutoFill module.
     *
     * @returns {void} - destroy the workbook AutoFill module.
     */
    WorkbookAutoFill.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    WorkbookAutoFill.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(setAutoFill, this.autoFill);
            this.parent.off(getFillInfo, this.getFillType);
        }
    };
    /**
     * Get the workbook AutoFill module name.
     *
     * @returns {string} - Return the string.
     */
    WorkbookAutoFill.prototype.getModuleName = function () {
        return 'workbookautofill';
    };
    return WorkbookAutoFill;
}());

/**
 * ServiceLocator
 *
 * @hidden
 */
var ServiceLocator = /** @class */ (function () {
    function ServiceLocator() {
        this.services = {};
    }
    ServiceLocator.prototype.getService = function (name) {
        if (isNullOrUndefined(this.services["" + name])) {
            // eslint-disable-next-line no-throw-literal
            throw "The service " + name + " is not registered";
        }
        return this.services["" + name];
    };
    ServiceLocator.prototype.register = function (name, type) {
        if (isNullOrUndefined(this.services["" + name])) {
            this.services["" + name] = type;
        }
    };
    return ServiceLocator;
}());

var __extends$5 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$2 = (undefined && undefined.__assign) || function () {
    __assign$2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$2.apply(this, arguments);
};
var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the Workbook.
 */
var Workbook = /** @class */ (function (_super) {
    __extends$5(Workbook, _super);
    /**
     * Constructor for initializing the library.
     *
     * @param {WorkbookModel} options - Configures Workbook model.
     */
    function Workbook(options) {
        var _this = _super.call(this, options) || this;
        /** @hidden */
        _this.isEdit = false;
        /**
         * To generate sheet name based on sheet count.
         *
         * @hidden
         */
        _this.sheetNameCount = 1;
        /**
         * @hidden
         */
        _this.dataValidationRange = '';
        /**
         * @hidden
         */
        _this.isOpen = false;
        /**
         * @hidden
         */
        _this.chartColl = [];
        /**
         * @hidden
         */
        _this.isPrintingProcessing = false;
        /**
         * @hidden
         */
        _this.currentPrintSheetIndex = 0;
        /** @hidden */
        _this.customFormulaCollection = new Map();
        Workbook_1.Inject(DataBind, WorkbookSave, WorkbookOpen, WorkbookNumberFormat, WorkbookCellFormat, WorkbookEdit, WorkbookFormula, WorkbookSort, WorkbookHyperlink, WorkbookFilter, WorkbookInsert, WorkbookFindAndReplace, WorkbookDataValidation, WorkbookProtectSheet, WorkbookMerge, WorkbookConditionalFormat, WorkbookImage, WorkbookChart, WorkbookAutoFill);
        _this.commonCellStyle = {};
        if (options && options.cellStyle) {
            _this.commonCellStyle = options.cellStyle;
        }
        if (_this.getModuleName() === 'workbook') {
            _this.serviceLocator = new ServiceLocator;
            _this.initWorkbookServices();
            _this.dataBind();
            _this.initEmptySheet();
        }
        return _this;
    }
    Workbook_1 = Workbook;
    /**
     * For internal use only.
     *
     * @returns {void} - For internal use only.
     * @hidden
     */
    Workbook.prototype.preRender = function () {
        if (!Object.keys(this.commonCellStyle).length) {
            this.commonCellStyle = skipDefaultValue(this.cellStyle, true);
        }
        if (this.getModuleName() === 'spreadsheet' && !this.refreshing) {
            this.initEmptySheet();
        }
    };
    Workbook.prototype.initWorkbookServices = function () {
        this.serviceLocator.register(workbookLocale, new L10n(this.getModuleName(), localeData, this.locale));
    };
    /**
     * For internal use only.
     *
     * @returns {void} - For internal use only.
     * @hidden
     */
    Workbook.prototype.render = function () {
        /** code snippets */
    };
    /**
     * To provide the array of modules needed for workbook.
     *
     * @returns {ModuleDeclaration[]} - To provide the array of modules needed for workbook.
     * @hidden
     */
    Workbook.prototype.requiredModules = function () {
        return getWorkbookRequiredModules(this);
    };
    /**
     * Get the properties to be maintained in the persisted state.
     *
     * @returns {string} - Get the properties to be maintained in the persisted state.
     * @hidden
     */
    Workbook.prototype.getPersistData = function () {
        return this.addOnPersist([]);
    };
    /**
     * Applies the style (font family, font weight, background color, etc...) to the specified range of cells.
     *
     * {% codeBlock src='spreadsheet/cellFormat/index.md' %}{% endcodeBlock %}
     *
     * @param {CellStyleModel} style - Specifies the cell style.
     * @param {string} range - Specifies the address for the range of cells.
     * @returns {void} - Applies the style (font family, font weight, background color, etc...) to the specified range of cells.
     */
    Workbook.prototype.cellFormat = function (style, range) {
        var sheet = this.getActiveSheet();
        if (sheet && (!sheet.isProtected || sheet.protectSettings.formatCells)) {
            range = range || sheet.selectedRange;
            this.notify(setCellFormat, { style: style, range: range, refreshRibbon: range.indexOf(sheet.activeCell) > -1 ? true : false });
        }
    };
    /**
     * Applies cell lock to the specified range of cells.
     *
     * {% codeBlock src='spreadsheet/lockCells/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - Specifies the address for the range of cells.
     * @param {boolean} isLocked -Specifies the cell is locked or not.
     * @returns {void} - To Applies cell lock to the specified range of cells.
     */
    Workbook.prototype.lockCells = function (range, isLocked) {
        var sheet = this.getActiveSheet();
        range = range || sheet.selectedRange;
        this.notify(setLockCells, { range: range, isLocked: isLocked, triggerEvent: true });
    };
    /**
     * @hidden
     * @param {Workbook} cssProps - Specifies the cssProps.
     * @param {number[]} indexes - Specifies the indexes.
     * @returns {CellStyleModel} - To get Cell Style Value.
     */
    Workbook.prototype.getCellStyleValue = function (cssProps, indexes) {
        var _this = this;
        var cell = getCell(indexes[0], indexes[1], this.getActiveSheet());
        var style = {};
        cssProps.forEach(function (cssProp) {
            style["" + cssProp] = _this.cellStyle["" + cssProp];
            if (cell && cell.style && cell.style["" + cssProp]) {
                style["" + cssProp] = cell.style["" + cssProp];
            }
        });
        return style;
    };
    /**
     * Applies the number format (number, currency, percentage, short date, etc...) to the specified range of cells.
     *
     * {% codeBlock src='spreadsheet/numberFormat/index.md' %}{% endcodeBlock %}
     *
     * @param {string} format - Specifies the number format code.
     * @param {string} range - Specifies the address of the range of cells.
     * @returns {void} - Applies the number format (number, currency, percentage, short date, etc...) to the specified range of cells.
     */
    Workbook.prototype.numberFormat = function (format, range) {
        this.notify(applyNumberFormatting, { format: format, range: range });
        this.notify(localizedFormatAction, { action: 'addToCustomFormats', format: format });
    };
    /**
     * Used to create new sheet.
     *
     * @hidden
     * @param {number} index - Specifies the index.
     * @param {SheetModel[]} sheets - Specifies the sheets.
     * @returns {void} - To create new sheet.
     */
    Workbook.prototype.createSheet = function (index, sheets) {
        if (index === void 0) { index = this.sheets.length; }
        if (sheets === void 0) { sheets = [{}]; }
        var _a;
        (_a = this.sheets).splice.apply(_a, [index, 0].concat(sheets));
        initSheet(this, sheets);
        this.notify(sheetCreated, { sheetIndex: index || 0, sheets: sheets });
        this.notify(workbookFormulaOperation, {
            action: 'registerSheet', sheetIndex: index || 0, sheetCount: index + sheets.length
        });
    };
    /**
     * Used to remove sheet.
     *
     * @hidden
     * @param  {number} idx - Specifies the index.
     * @returns {void} - To remove sheet
     */
    Workbook.prototype.removeSheet = function (idx) {
        this.sheets.splice(idx, 1);
    };
    /**
     * Destroys the Workbook library.
     *
     * @returns {void} - To destroy sheet
     */
    Workbook.prototype.destroy = function () {
        this.notify(workbookDestroyed, null);
        _super.prototype.destroy.call(this);
    };
    /**
     * Called internally if any of the property value changed.
     *
     * @param {WorkbookModel} newProp - To set the properties
     * @param {WorkbookModel} oldProp - To get the properties
     * @returns {void} - property value changed
     * @hidden
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Workbook.prototype.onPropertyChanged = function (newProp, oldProp) {
        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'cellStyle':
                    merge(this.commonCellStyle, newProp.cellStyle);
                    break;
                case 'sheets':
                    if (newProp.sheets === this.sheets) {
                        this.notify(workbookFormulaOperation, { action: 'unRegisterSheet', propertyChange: true });
                        this.sheetNameCount = 1;
                        this.notify(sheetsDestroyed, {});
                        initSheet(this);
                        this.notify(sheetCreated, null);
                        this.notify(workbookFormulaOperation, { action: 'registerSheet' });
                    }
                    else {
                        initSheet(this);
                    }
                    break;
                case 'listSeparator':
                    this.notify(workbookFormulaOperation, { action: 'setArgumentSeparator' });
                    break;
            }
        }
    };
    /**
     * Not applicable for workbook.
     *
     * @hidden
     * @param {string | HTMLElement} selector - Specifies the selector.
     * @returns {void} - To append the element.
     */
    Workbook.prototype.appendTo = function (selector) {
        _super.prototype.appendTo.call(this, selector);
    };
    /**
     * Used to hide/show the rows in spreadsheet.
     *
     * @param {number} startIndex - Specifies the start row index.
     * @param {number} endIndex - Specifies the end row index.
     * @param {boolean} hide - To hide/show the rows in specified range.
     * @returns {void} - To hide/show the rows in spreadsheet.
     */
    Workbook.prototype.hideRow = function (startIndex, endIndex, hide) {
        if (endIndex === void 0) { endIndex = startIndex; }
        if (hide === void 0) { hide = true; }
        var sheet = this.getActiveSheet();
        for (var i = startIndex; i <= endIndex; i++) {
            setRow(sheet, i, { hidden: hide });
        }
    };
    /**
     * Used to hide/show the columns in spreadsheet.
     *
     * @param {number} startIndex - Specifies the start column index.
     * @param {number} endIndex - Specifies the end column index.
     * @param {boolean} hide - Set `true` / `false` to hide / show the columns.
     * @returns {void} - To hide/show the columns in spreadsheet.
     */
    Workbook.prototype.hideColumn = function (startIndex, endIndex, hide) {
        if (endIndex === void 0) { endIndex = startIndex; }
        if (hide === void 0) { hide = true; }
        var sheet = this.getActiveSheet();
        for (var i = startIndex; i <= endIndex; i++) {
            setColumn(sheet, i, { hidden: hide });
        }
    };
    /**
     * Sets the border to specified range of cells.
     *
     * {% codeBlock src='spreadsheet/setBorder/index.md' %}{% endcodeBlock %}
     *
     * @param {CellStyleModel} style - Specifies the style property which contains border value.
     * @param {string} range - Specifies the range of cell reference. If not specified, it will considered the active cell reference.
     * @param {BorderType} type - Specifies the range of cell reference. If not specified, it will considered the active cell reference.
     * @param {boolean} isUndoRedo - Specifies is undo redo or not.
     * @returns {void} - To Sets the border to specified range of cells.
     */
    Workbook.prototype.setBorder = function (style, range, type, isUndoRedo) {
        this.notify(setCellFormat, {
            style: style, borderType: type, range: range || this.getActiveSheet().selectedRange, isUndoRedo: isUndoRedo
        });
    };
    /**
     * Used to insert rows in to the spreadsheet.
     *
     * {% codeBlock src='spreadsheet/insertRow/index.md' %}{% endcodeBlock %}
     *
     * @param {number | RowModel[]} startRow - Specifies the start row index / row model which needs to be inserted.
     * @param {number} endRow - Specifies the end row index.
     * @param {number | string} sheet - Specifies the sheet name or index in which the insert operation will perform. By default,
     * active sheet will be considered.
     * @returns {void} - To insert rows in to the spreadsheet.
     */
    Workbook.prototype.insertRow = function (startRow, endRow, sheet) {
        this.notify(insertModel, { model: this.getSheetModel(sheet), start: startRow, end: endRow,
            modelType: 'Row', insertType: 'below' });
    };
    /**
     * Used to insert columns in to the spreadsheet.
     *
     * {% codeBlock src='spreadsheet/insertColumn/index.md' %}{% endcodeBlock %}
     *
     * @param {number | ColumnModel[]} startColumn - Specifies the start column index / column model which needs to be inserted.
     * @param {number} endColumn - Specifies the end column index.
     * @param {number | string} sheet - Specifies the sheet name or index in which the insert operation will perform. By default,
     * active sheet will be considered.
     * @returns {void} - To insert columns in to the spreadsheet.
     */
    Workbook.prototype.insertColumn = function (startColumn, endColumn, sheet) {
        this.notify(insertModel, { model: this.getSheetModel(sheet), start: startColumn, end: endColumn,
            modelType: 'Column', insertType: 'after' });
    };
    /**
     * Used to insert sheets in to the spreadsheet.
     *
     * {% codeBlock src='spreadsheet/insertSheet/index.md' %}{% endcodeBlock %}
     *
     * @param {number | SheetModel[]} startSheet - Specifies the start sheet index / sheet model which needs to be inserted.
     * @param {number} endSheet - Specifies the end sheet index.
     * @returns {void} - To insert sheets in to the spreadsheet.
     */
    Workbook.prototype.insertSheet = function (startSheet, endSheet) {
        if (this.isProtected) {
            return;
        }
        this.notify(insertModel, { model: this, start: startSheet, end: endSheet, modelType: 'Sheet' });
    };
    /**
     * Used to delete rows, columns and sheets from the spreadsheet.
     *
     * {% codeBlock src='spreadsheet/delete/index.md' %}{% endcodeBlock %}
     *
     * @param {number} startIndex - Specifies the start sheet / row / column index.
     * @param {number} endIndex - Specifies the end sheet / row / column index.
     * @param {ModelType} model - Specifies the delete model type. By default, the model is considered as `Sheet`. The possible values are,
     * - Row: To delete rows.
     * - Column: To delete columns.
     * - Sheet: To delete sheets.
     * @param {number | string} sheet - Specifies the sheet name or index in which the delete operation will perform. By default,
     * active sheet will be considered. It is applicable only for model type Row and Column.
     * @returns {void} - To delete rows, columns and sheets from the spreadsheet.
     */
    Workbook.prototype.delete = function (startIndex, endIndex, model, sheet) {
        if (this.isProtected) {
            return;
        }
        startIndex = startIndex || 0;
        var sheetModel;
        endIndex = isNullOrUndefined(endIndex) ? startIndex : endIndex;
        if (!model || model === 'Sheet') {
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            sheetModel = this;
            if (Math.abs(endIndex - startIndex) >= this.sheets.length) {
                return;
            }
        }
        else {
            sheetModel = this.getSheetModel(sheet);
            if (!sheetModel) {
                return;
            }
        }
        this.notify(deleteModel, {
            model: sheetModel, start: startIndex, end: endIndex, modelType: model || 'Sheet'
        });
    };
    /**
     * Used to move the sheets to the specified position in the list of sheets.
     *
     * {% codeBlock src='spreadsheet/moveSheet/index.md' %}{% endcodeBlock %}
     *
     * @param {number} position - Specifies the position to move a sheet in the list of sheets.
     * @param {number[]} sheetIndexes - Specifies the indexes of the sheet to be moved. By default, the active sheet will be moved.
     * @returns {void} - Used to move the sheets to the specified position in the list of sheets.
     */
    Workbook.prototype.moveSheet = function (position, sheetIndexes) {
        if (this.isProtected) {
            return;
        }
        moveSheet(this, position, sheetIndexes);
    };
    /**
     * Used to make a duplicate/copy of the sheet in the spreadsheet.
     *
     * {% codeBlock src='spreadsheet/duplicateSheet/index.md' %}{% endcodeBlock %}
     *
     * @param {number} sheetIndex - Specifies the index of the sheet to be duplicated. By default, the active sheet will be duplicated.
     * @returns {void} - Used to make a duplicate/copy of the sheet in the spreadsheet.
     */
    Workbook.prototype.duplicateSheet = function (sheetIndex) {
        if (this.isProtected) {
            return;
        }
        duplicateSheet(this, sheetIndex);
    };
    Workbook.prototype.getSheetModel = function (sheet) {
        if (isNullOrUndefined(sheet)) {
            return this.getActiveSheet();
        }
        else {
            var index = typeof sheet === 'string' ? getSheetIndex(this, sheet) : sheet;
            if (isNullOrUndefined(index) || index >= this.sheets.length) {
                return null;
            }
            return this.sheets[index];
        }
    };
    /**
     * Used to merge the range of cells.
     *
     * {% codeBlock src='spreadsheet/merge/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - Specifies the range of cells as address.
     * @param {MergeType} type - Specifies the merge type. The possible values are,
     * - All: Merge all the cells between provided range.
     * - Horizontally: Merge the cells row-wise.
     * - Vertically: Merge the cells column-wise.
     * @returns {void} - To merge the range of cells.
     */
    Workbook.prototype.merge = function (range, type) {
        var sheetIdx;
        var sheet;
        if (range) {
            sheetIdx = this.isPrintingProcessing ? this.currentPrintSheetIndex : getSheetIndexFromAddress(this, range);
            sheet = getSheet(this, sheetIdx);
        }
        else {
            sheet = this.getActiveSheet();
            range = sheet.selectedRange;
            sheetIdx = this.activeSheetIndex;
        }
        this.notify(setMerge, { merge: true, range: range, type: type || 'All', sheetIndex: sheetIdx, refreshRibbon: range.indexOf(sheet.activeCell) > -1 ? true : false, preventRefresh: this.activeSheetIndex !== sheetIdx });
    };
    /**
     * Used to split the merged cell into multiple cells.
     *
     * {% codeBlock src='spreadsheet/unMerge/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - Specifies the range of cells as address.
     * @returns {void} - To split the merged cell into multiple cells.
     */
    Workbook.prototype.unMerge = function (range) {
        var sheetIdx;
        var sheet;
        if (range) {
            sheetIdx = getSheetIndexFromAddress(this, range);
            sheet = getSheet(this, sheetIdx);
        }
        else {
            sheet = this.getActiveSheet();
            range = sheet.selectedRange;
            sheetIdx = this.activeSheetIndex;
        }
        this.notify(setMerge, {
            merge: false, range: range, sheetIndex: sheetIdx, type: 'All',
            refreshRibbon: range.indexOf(sheet.activeCell) > -1 ? true : false, preventRefresh: this.activeSheetIndex !== sheetIdx
        });
    };
    /** Used to compute the specified expression/formula.
     *
     * {% codeBlock src='spreadsheet/computeExpression/index.md' %}{% endcodeBlock %}
     *
     * @param {string} formula - Specifies the formula(=SUM(A1:A3)) or expression(2+3).
     * @returns {string | number} - to compute the specified expression/formula.
     */
    Workbook.prototype.computeExpression = function (formula) {
        var args = {
            action: 'computeExpression', formula: formula, isFromComputeExpression: true
        };
        this.notify(workbookFormulaOperation, args);
        return args.calcValue;
    };
    Workbook.prototype.initEmptySheet = function () {
        if (!this.sheets.length) {
            this.createSheet();
        }
        else {
            initSheet(this);
        }
    };
    /**
     * @hidden
     * @returns {SheetModel} - To get Active Sheet.
     */
    Workbook.prototype.getActiveSheet = function () {
        return this.sheets[this.activeSheetIndex];
    };
    /** @hidden
     * @param {number} index - Specifies the index.
     * @param {number} initIdx - Specifies the initIdx.
     * @param {number} hiddenCount - Specifies the initIdx.
     * @returns {number} - To skip Hidden Sheets.
     */
    Workbook.prototype.skipHiddenSheets = function (index, initIdx, hiddenCount) {
        if (hiddenCount === void 0) { hiddenCount = 0; }
        if (this.sheets[index] && this.sheets[index].state !== 'Visible') {
            if (initIdx === undefined) {
                initIdx = index;
            }
            if (index && index + 1 === this.sheets.length) {
                index = initIdx - 1;
            }
            else {
                index = index < initIdx ? --index : ++index;
            }
            index = this.skipHiddenSheets(index, initIdx, ++hiddenCount);
        }
        if (hiddenCount === this.sheets.length) {
            this.setSheetPropertyOnMute(this.sheets[0], 'state', 'Visible');
            return 0;
        }
        return index;
    };
    /**
     * Used for setting the used range row and column index.
     *
     * @hidden
     * @param {number} rowIdx - Specifies the rowIndex.
     * @param {number} colIdx - Specifies the colIndex.
     * @param {SheetModel} sheet - Specifies the active sheet.
     * @param {boolean} preventRowColUpdate - To prevent updating row and column count.
     * @param {boolean} forceUpdate - To force updating row and column count.
     * @returns {void} - To setting the used range row and column index.
     */
    Workbook.prototype.setUsedRange = function (rowIdx, colIdx, sheet, preventRowColUpdate, forceUpdate) {
        if (sheet === void 0) { sheet = this.getActiveSheet(); }
        if (forceUpdate) {
            this.setSheetPropertyOnMute(sheet, 'usedRange', { rowIndex: rowIdx, colIndex: colIdx });
            return;
        }
        if (rowIdx > sheet.usedRange.rowIndex) {
            this.setSheetPropertyOnMute(sheet, 'usedRange', { rowIndex: rowIdx, colIndex: sheet.usedRange.colIndex });
            if (sheet === this.getActiveSheet() && !preventRowColUpdate) {
                this.notify(updateRowColCount, { index: rowIdx, update: 'row' });
            }
        }
        if (colIdx > sheet.usedRange.colIndex) {
            this.setSheetPropertyOnMute(sheet, 'usedRange', { rowIndex: sheet.usedRange.rowIndex, colIndex: colIdx });
            if (sheet === this.getActiveSheet() && !preventRowColUpdate) {
                this.notify(updateRowColCount, { index: colIdx, update: 'col' });
            }
        }
    };
    /**
     * Gets the range of data as JSON from the specified address.
     *
     * {% codeBlock src='spreadsheet/getData/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the address for range of cells.
     * @returns {Promise<Map<string, CellModel>>} - Gets the range of data as JSON from the specified address.
     */
    Workbook.prototype.getData = function (address) {
        return getData(this, address);
    };
    /**
     * Get component name.
     *
     * @returns {string} - Gets the module name.
     * @hidden
     */
    Workbook.prototype.getModuleName = function () {
        return 'workbook';
    };
    /** @hidden
     * @param {string} address - Specifies the sheet id.
     * @returns {void} - To set the value for row and col.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Workbook.prototype.goTo = function (address) {
        /** */
    };
    /** @hidden
     * @param {number} sheetId - Specifies the sheet id.
     * @param {number} rowIndex - Specifies the rowIndex.
     * @param {number} colIndex - Specifies the colIndex.
     * @param {string} formulaCellReference - Specifies the formulaCellReference.
     * @param {boolean} refresh - Specifies the refresh.
     * @param {boolean} isUnique - Specifies is unique formula or not.
     * @param {boolean} isSubtotal - Specifies is from Subtotal formula or not.
     * @returns {string | number} - To set the value for row and col.
     */
    Workbook.prototype.getValueRowCol = function (sheetId, rowIndex, colIndex, formulaCellReference, refresh, isUnique, isSubtotal) {
        var sheetIndex = getSheetIndexFromId(this, sheetId);
        var sheet = getSheet(this, sheetIndex);
        var cell = getCell(rowIndex - 1, colIndex - 1, sheet);
        if (formulaCellReference && formulaCellReference.includes('!') && !cell && sheet.ranges && sheet.ranges.length) {
            var isNotLoaded_1;
            if (this.formulaRefCell && this.formulaRefCell === formulaCellReference) {
                return cell && cell.value;
            }
            sheet.ranges.forEach(function (range) {
                if (!range.info || !range.info.loadedRange || !range.info.loadedRange.length) {
                    isNotLoaded_1 = true;
                    return;
                }
            });
            if (isNotLoaded_1) {
                this.formulaRefCell = formulaCellReference;
                sheetIndex = getSheetIndexFromId(this, Number(formulaCellReference.substring(formulaCellReference.lastIndexOf(',') + 1, formulaCellReference.length)));
                if (isNullOrUndefined(sheetIndex)) {
                    return cell && cell.value;
                }
                formulaCellReference = formulaCellReference.substring(formulaCellReference.lastIndexOf('!') + 1, formulaCellReference.lastIndexOf(','));
                getData(this, sheet.name + "!A1:" + getCellAddress(rowIndex - 1, colIndex - 1), null, null, null, null, formulaCellReference, sheetIndex);
            }
        }
        else if (cell && cell.formula && (refresh || isNullOrUndefined(cell.value)) &&
            !isUnique && this.calculationMode === 'Automatic') {
            this.notify(calculateFormula, {
                cell: cell, rowIdx: rowIndex - 1, colIdx: colIndex - 1, sheetIndex: sheetIndex,
                formulaRefresh: true
            });
        }
        if (cell && !isNumber(cell.value) && !this.isEdit) {
            var eventArgs = { formattedText: cell.value, value: cell.value, format: cell.format, cell: cell,
                skipFormatCheck: false };
            this.notify(getFormattedCellObject, eventArgs);
            cell = eventArgs.cell;
        }
        if (isSubtotal && cell && cell.formula && cell.formula.includes('SUBTOTAL(')) {
            return cell.formula; // To ignore subtotal result in the subtotal formula.
        }
        return cell && cell.value;
    };
    /** @hidden
     * @param {number} sheetId - Specifies the sheet id.
     * @param {string | number} value - Specifies the value.
     * @param {number} rowIndex - Specifies the rowIndex.
     * @param {number} colIndex - Specifies the colIndex.
     * @param {string} formula - Specifies the colIndex.
     * @param {boolean} isRandomFormula - Specifies is random formula or not.
     * @returns {void} - To set the value for row and col.
     */
    Workbook.prototype.setValueRowCol = function (sheetId, value, rowIndex, colIndex, formula, isRandomFormula) {
        this.notify(workbookEditOperation, {
            action: 'updateCellValue', address: [rowIndex - 1, colIndex - 1], value: value,
            sheetIndex: getSheetIndexFromId(this, sheetId), isValueOnly: true, formula: formula, isRandomFormula: isRandomFormula
        });
    };
    /**
     * Opens the specified excel file or stream.
     *
     * @param {OpenOptions} options - Options for opening the excel file.
     * @returns {void} - Opens the specified excel file or stream.
     */
    Workbook.prototype.open = function (options) {
        this.notify(workbookOpen, options);
    };
    /**
     * Opens the specified JSON object.
     *
     * {% codeBlock src='spreadsheet/openFromJson/index.md' %}{% endcodeBlock %}
     *
     * The available arguments in options are:
     * * file: Specifies the spreadsheet model as object or string. And the object contains the jsonObject,
     * which is saved from spreadsheet using saveAsJson method.
     * * triggerEvent: Specifies whether to trigger the `openComplete` event or not.
     *
     * @param {Object} options - Options for opening the JSON object.
     * @param {string | object} options.file - Options for opening the JSON object.
     * @param {boolean} options.triggerEvent - Specifies whether to trigger the `openComplete` event or not.
     * @param {SerializationOptions} jsonConfig - Specify the serialization options to customize the loading of the JSON data.
     * @param {boolean} jsonConfig.onlyValues - If true, only the cell values will be loaded, excluding styles, formulas, etc.
     * @param {boolean} jsonConfig.ignoreStyle - If true, styles will be excluded when loading the JSON data.
     * @param {boolean} jsonConfig.ignoreFormula - If true, formulas will be excluded when loading the JSON data.
     * @param {boolean} jsonConfig.ignoreFormat - If true, number formats will be excluded when loading the JSON data.
     * @param {boolean} jsonConfig.ignoreConditionalFormat - If true, conditional formatting will be excluded when loading the JSON data.
     * @param {boolean} jsonConfig.ignoreValidation - If true, data validation rules will be excluded when loading the JSON data.
     * @param {boolean} jsonConfig.ignoreFreezePane - If true, freeze panes will be excluded when loading the JSON data.
     * @param {boolean} jsonConfig.ignoreWrap - If true, text wrapping settings will be excluded when loading the JSON data.
     * @param {boolean} jsonConfig.ignoreChart - If true, charts will be excluded when loading the JSON data.
     * @param {boolean} jsonConfig.ignoreImage - If true, images will be excluded when loading the JSON data.
     * @param {boolean} jsonConfig.ignoreNote -  If true, notes will be excluded when loading the JSON data.
     * @returns {void} - Opens the specified JSON object.
     */
    Workbook.prototype.openFromJson = function (options, jsonConfig) {
        this.isOpen = true;
        var jsonObject = typeof options.file === 'object' ? JSON.stringify(options.file) : options.file;
        if (jsonObject !== '' && jsonConfig) {
            var skipProps_1 = [];
            if (jsonConfig.onlyValues) {
                skipProps_1.push.apply(skipProps_1, ['style', 'formula', 'format', 'conditionalFormats', 'validation',
                    'hyperlink', 'wrap', 'chart', 'image', 'notes']);
            }
            else {
                var ignoreProps = {
                    style: jsonConfig.ignoreStyle,
                    formula: jsonConfig.ignoreFormula,
                    format: jsonConfig.ignoreFormat,
                    conditionalFormats: jsonConfig.ignoreConditionalFormat,
                    validation: jsonConfig.ignoreValidation,
                    wrap: jsonConfig.ignoreWrap,
                    chart: jsonConfig.ignoreChart,
                    image: jsonConfig.ignoreImage,
                    notes: jsonConfig.ignoreNote
                };
                if (jsonConfig.ignoreFreezePane) {
                    skipProps_1.push.apply(skipProps_1, ['frozenColumns', 'frozenRows']);
                }
                for (var prop in ignoreProps) {
                    if (ignoreProps[prop]) {
                        skipProps_1.push(prop);
                    }
                }
            }
            jsonObject = JSON.stringify(JSON.parse(jsonObject), function (key, value) {
                if (skipProps_1.indexOf(key) > -1) {
                    return undefined;
                }
                return value;
            });
        }
        this.notify(workbookOpen, { jsonObject: jsonObject, triggerEvent: options.triggerEvent });
    };
    /**
     * Saves the Spreadsheet data to Excel file.
     *
     * {% codeBlock src='spreadsheet/save/index.md' %}{% endcodeBlock %}
     *
     * The available arguments in saveOptions are:
     * * url: Specifies the save URL.
     * * fileName: Specifies the file name.
     * * saveType: Specifies the file type need to be saved.
     *
     * @param {SaveOptions} saveOptions - Options for saving the excel file.
     * @param {SerializationOptions} jsonConfig - Specify the serialization options to customize the JSON output.
     * @param {boolean} jsonConfig.onlyValues - If true, only the cell values will be included, excluding styles, formulas, etc.
     * @param {boolean} jsonConfig.ignoreStyle - If true, styles will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreFormula - If true, formulas will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreFormat - If true, number formats will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreConditionalFormat - If true, conditional formatting will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreValidation - If true, data validation rules will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreFreezePane - If true, freeze panes will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreWrap - If true, text wrapping settings will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreChart - If true, charts will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreImage - If true, images will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreNote -  If true, notes will be excluded from the JSON output.
     * @returns {void} - To Saves the Spreadsheet data to Excel file.
     */
    Workbook.prototype.save = function (saveOptions, jsonConfig) {
        if (saveOptions === void 0) { saveOptions = {}; }
        if (this.allowSave) {
            var defaultProps = {
                url: this.saveUrl,
                fileName: saveOptions.fileName || 'Sample',
                saveType: 'Xlsx'
                //passWord: args.passWord
            };
            var eventArgs = __assign$2({}, defaultProps, saveOptions, { customParams: {}, isFullPost: true, needBlobData: false, cancel: false, autoDetectFormat: false, pdfLayoutSettings: { fitSheetOnOnePage: false, orientation: 'Portrait' } });
            this.trigger('beforeSave', eventArgs);
            this.notify(beginAction, { eventArgs: eventArgs, action: 'beforeSave' });
            if (!eventArgs.cancel) {
                this.notify(beginSave, {
                    saveSettings: eventArgs, isFullPost: eventArgs.isFullPost, needBlobData: eventArgs.needBlobData,
                    customParams: eventArgs.customParams, pdfLayoutSettings: eventArgs.pdfLayoutSettings,
                    jsonConfig: jsonConfig
                });
            }
        }
    };
    /**
     * Saves the Spreadsheet data as JSON object.
     *
     * {% codeBlock src='spreadsheet/saveAsJson/index.md' %}{% endcodeBlock %}
     *
     * @param {SerializationOptions} jsonConfig - Specify the serialization options to customize the JSON output.
     * @param {boolean} jsonConfig.onlyValues - If true, only the cell values will be included, excluding styles, formulas, etc.
     * @param {boolean} jsonConfig.ignoreStyle - If true, styles will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreFormula - If true, formulas will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreFormat - If true, number formats will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreConditionalFormat - If true, conditional formatting will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreValidation - If true, data validation rules will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreFreezePane - If true, freeze panes will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreWrap - If true, text wrapping settings will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreChart - If true, charts will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreImage - If true, images will be excluded from the JSON output.
     * @param {boolean} jsonConfig.ignoreNote -  If true, notes will be excluded from the JSON output.
     * @returns {Promise<object>} - To Saves the Spreadsheet data as JSON object.
     */
    Workbook.prototype.saveAsJson = function (jsonConfig) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.on(onSave, function (args) {
                args.cancel = true;
                _this.off(onSave);
                resolve({ jsonObject: { Workbook: args.jsonObject } });
                _this.notify(saveCompleted, args);
            });
            _this.save({}, jsonConfig);
        });
    };
    Workbook.prototype.addHyperlink = function (hyperlink, cellAddress) {
        var args = { hyperlink: hyperlink, cell: cellAddress };
        this.notify(setLinkModel, args);
    };
    /**
     * To find the specified cell value.
     *
     * @hidden
     * @param {FindOptions} args - options for find.
     * {% codeBlock src='spreadsheet/findHandler/index.md' %}{% endcodeBlock %}
     * @returns {void} - To find the specified cell value.
     */
    Workbook.prototype.findHandler = function (args) {
        this.notify(find, args);
    };
    /**
     * @hidden
     * @param {FindOptions} args - Specifies the FindOptions.
     * @returns {void} - To replace the value.
     */
    Workbook.prototype.replaceHandler = function (args) {
        if (args.replaceBy === 'replace') {
            this.notify(replace, args);
        }
        else {
            this.notify(replaceAll, args);
        }
    };
    /**
     * Protect the active sheet based on the protect sheetings.
     *
     * @param {number} sheet - Specifies the sheet to protect.
     * @param {ProtectSettingsModel} protectSettings - Specifies the protect settings of the sheet.
     * @param {string} password - Specifies the password to protect
     * @returns {void} - protect the active sheet.
     */
    Workbook.prototype.protectSheet = function (sheet, protectSettings, password) {
        if (isNullOrUndefined(sheet)) {
            sheet = this.activeSheetIndex;
        }
        else if (typeof (sheet) === 'string') {
            sheet = getSheetIndex(this, sheet);
        }
        var sheetModel = this.sheets[sheet];
        if (!sheetModel) {
            return;
        }
        this.setSheetPropertyOnMute(sheetModel, 'isProtected', true);
        this.setSheetPropertyOnMute(sheetModel, 'password', password ? password : '');
        this.setSheetPropertyOnMute(sheetModel, 'protectSettings', protectSettings ? protectSettings : {});
        this.notify(protectsheetHandler, {
            protectSettings: sheetModel.protectSettings, password: sheetModel.password, sheetIndex: sheet
        });
    };
    /**
     * Unprotect the active sheet.
     *
     * @param {number} sheet - Specifies the sheet to Unprotect.
     * @returns {void} - Unprotect the active sheet.
     */
    Workbook.prototype.unprotectSheet = function (sheet) {
        if (isNullOrUndefined(sheet)) {
            sheet = this.activeSheetIndex;
        }
        else if (typeof (sheet) === 'string') {
            sheet = getSheetIndex(this, sheet);
        }
        if (!this.sheets[sheet]) {
            return;
        }
        var args = { sheet: sheet };
        this.notify(unprotectsheetHandler, args);
    };
    /**
     * Sorts the range of cells in the active Spreadsheet.
     *
     * @param {SortOptions} sortOptions - options for sorting.
     * @param {string} range - address of the data range.
     * @param {SortCollectionModel[]} previousSort - specifies previous sort collection.
     * @returns {Promise<SortEventArgs>} - Sorts the range of cells in the active Spreadsheet.
     */
    Workbook.prototype.sort = function (sortOptions, range, previousSort) {
        if (!this.allowSorting) {
            return Promise.reject();
        }
        var eventArgs = {
            range: range || this.getActiveSheet().selectedRange,
            sortOptions: sortOptions || { sortDescriptors: {} },
            cancel: false
        };
        var promise = new Promise(function (resolve) { resolve((function () { })()); });
        var sortArgs = { args: eventArgs, promise: promise, previousSort: previousSort };
        this.notify(initiateSort, sortArgs);
        return sortArgs.promise;
    };
    Workbook.prototype.addDataValidation = function (rules, range) {
        if (isNullOrUndefined(rules.value1)) {
            return;
        }
        if (rules.type === 'List') {
            if (rules.value1.length > 256) {
                rules.value1 = rules.value1.substring(0, 255);
            }
        }
        else {
            rules.value1 = parseLocaleNumber([rules.value1], this)[0];
            if (rules.value2) {
                rules.value2 = parseLocaleNumber([rules.value2], this)[0];
            }
        }
        this.notify(cellValidation, { rules: rules, range: range || getUpdatedRange(this.getActiveSheet()) });
    };
    Workbook.prototype.removeDataValidation = function (range) {
        this.notify(cellValidation, {
            range: range || getUpdatedRange(this.getActiveSheet()),
            isRemoveValidation: true
        });
    };
    Workbook.prototype.addInvalidHighlight = function (range) {
        this.notify(addHighlight, { range: range });
    };
    Workbook.prototype.removeInvalidHighlight = function (range) {
        this.notify(removeHighlight, { range: range });
    };
    /**
     * To determine whether the cell value in a data validation applied cell is valid or not.
     *
     * @param {string} cellAddress - Address of the cell.
     * @returns {boolean} - It return true if the cell value is valid; otherwise, false.
     */
    Workbook.prototype.isValidCell = function (cellAddress) {
        var sheet;
        var sheetIdx;
        var range;
        if (cellAddress) {
            var addressInfo = getAddressInfo(this, cellAddress);
            sheetIdx = addressInfo.sheetIndex;
            range = addressInfo.indices;
            sheet = getSheet(this, sheetIdx);
        }
        else {
            sheet = this.getActiveSheet();
            range = getCellIndexes(sheet.activeCell);
            sheetIdx = this.activeSheetIndex;
        }
        var cell = getCell(range[0], range[1], sheet, false, true);
        if (cell.validation || checkColumnValidation(sheet.columns[range[1]], range[0], range[1])) {
            var value = cell.value ? cell.value : '';
            var validEventArgs = { value: value, range: range, sheetIdx: sheetIdx, td: null, isValid: true };
            this.notify(isValidation, validEventArgs);
            return validEventArgs.isValid;
        }
        else {
            return true;
        }
    };
    Workbook.prototype.conditionalFormat = function (conditionalFormat) {
        var _this = this;
        if (conditionalFormat.range) {
            if (this.listSeparator !== ',' && conditionalFormat.range.includes(this.listSeparator)) {
                conditionalFormat.range = conditionalFormat.range.split(this.listSeparator).join(',');
            }
        }
        else {
            conditionalFormat.range = this.getActiveSheet().selectedRange;
        }
        if (conditionalFormat.value) {
            var cfValues = void 0;
            if (conditionalFormat.type === 'Between') {
                if (this.listSeparator !== ',' && conditionalFormat.value.includes(this.listSeparator)) {
                    var dateValues = conditionalFormat.value.split('"').filter(function (date) { return date.trim() && date.trim() !== _this.listSeparator; });
                    cfValues = dateValues.length > 1 ? dateValues : conditionalFormat.value.split(this.listSeparator);
                }
                else {
                    var dateValues = conditionalFormat.value.split('"').filter(function (date) { return date.trim() && date.trim() !== ','; });
                    cfValues = dateValues.length > 1 ? dateValues : conditionalFormat.value.split(',');
                }
            }
            else {
                cfValues = [conditionalFormat.value];
            }
            parseLocaleNumber(cfValues, this);
            conditionalFormat.value = cfValues.join(',');
        }
        this.notify(setCFRule, { cfModel: conditionalFormat });
    };
    Workbook.prototype.clearConditionalFormat = function (range) {
        var clearCFArgs = {};
        if (!range || !range.includes('!')) {
            clearCFArgs.range = range || this.getActiveSheet().selectedRange;
            clearCFArgs.sheetIdx = this.activeSheetIndex;
        }
        else {
            var lastIndex = range.lastIndexOf('!');
            clearCFArgs.range = range.substring(lastIndex + 1);
            clearCFArgs.sheetIdx = getSheetIndex(this, range.substring(0, lastIndex));
        }
        this.notify(clearCFRule, clearCFArgs);
    };
    /**
     * Updates the properties of a specified cell.
     *
     * {% codeBlock src='spreadsheet/updateCell/index.md' %}{% endcodeBlock %}
     *
     * @param {CellModel} cell - The properties to update for the specified cell.
     * @param {string} address - The address of the cell to update. If not provided, the active cell's address will be used.
     * @param {boolean} enableDependentCellUpdate - Specifies whether dependent cells should also be updated. Default value is <c>true</c>.
     * @returns {void} - This method does not return a value.
     */
    Workbook.prototype.updateCell = function (cell, address, enableDependentCellUpdate) {
        if (isNullOrUndefined(enableDependentCellUpdate)) {
            enableDependentCellUpdate = true;
        }
        this.updateCellDetails(cell, address, undefined, undefined, enableDependentCellUpdate);
    };
    /**
     * Updates the properties of a specified cell.
     *
     * @param {CellModel} cell - The properties to update for the specified cell.
     * @param {string} address - The address of the cell to update. If not provided, the active cell's address will be used.
     * @param {UndoRedoEventArgs} cellInformation - It holds the undoRedoCollections.
     * @param {boolean} isRedo - It holds the undo redo information.
     * @param {boolean} isDependentUpdate - Specifies whether dependent cells should also be updated.
     * @param {boolean} isFinite - Specifies scroll settings of the sheet is finite or not.
     * @param {boolean} isPublic - It holds whether updateCell public method is used.
     * @returns {void} - This method does not return a value.
     *
     * @hidden
     */
    Workbook.prototype.updateCellDetails = function (cell, address, cellInformation, isRedo, isDependentUpdate, isFinite, isPublic) {
        var range;
        var sheetIdx;
        if (!address) {
            address = this.getActiveSheet().activeCell;
        }
        if (address.includes('!')) {
            range = getIndexesFromAddress(address);
            sheetIdx = getSheetIndex(this, address.substring(0, address.lastIndexOf('!')));
            if (sheetIdx === undefined) {
                return;
            }
        }
        else {
            range = getRangeIndexes(address);
            sheetIdx = this.activeSheetIndex;
        }
        var sheet = getSheet(this, sheetIdx);
        if (isFinite && !(sheet.rowCount > range[0] && sheet.rowCount > range[2] &&
            sheet.colCount > range[1] && sheet.colCount > range[3])) {
            this.notify(finiteAlert, null);
            return;
        }
        updateCell(this, sheet, { cell: cell, rowIdx: range[0], colIdx: range[1], preventEvt: true });
        var val = isPublic ? cell.formula || (isNullOrUndefined(cell.value) ? null : cell.value) :
            isNullOrUndefined(cell.value) ? (cell.formula || null) : cell.value;
        var valChange = val !== null;
        var cellModel = getCell(range[0], range[1], sheet, false, true);
        if (cellInformation && cellInformation.format && isRedo) {
            cellModel.format = cellInformation.format;
        }
        if (valChange) {
            delete cellModel.formattedText;
            this.notify(workbookEditOperation, {
                action: 'updateCellValue', address: range, value: val, sheetIndex: sheetIdx,
                cellInformation: cellInformation, isRedo: isRedo, isDependentUpdate: isDependentUpdate
            });
            if (this.isEdit && cellModel.value === '#CIRCULARREF!') {
                cellModel.value = '0';
            }
        }
        else if (!isNullOrUndefined(cell.format) && cellModel.formattedText) {
            delete cellModel.formattedText;
        }
        if (sheetIdx === this.activeSheetIndex) {
            var eventArgs = { sheet: sheet, cell: cellModel, rowIdx: range[0], colIdx: range[1] };
            if (cellModel.rowSpan > 1 || cellModel.colSpan > 1) {
                setVisibleMergeIndex(eventArgs);
            }
            var cellEle = !isHiddenRow(sheet, eventArgs.rowIdx) && !isHiddenCol(sheet, eventArgs.colIdx) &&
                this.getCell(eventArgs.rowIdx, eventArgs.colIdx);
            if (cellEle) {
                this.serviceLocator.getService('cell').refresh(eventArgs.rowIdx, eventArgs.colIdx, true, cellEle, valChange, valChange);
            }
            var activeCellIdx = getCellIndexes(sheet.activeCell);
            if (range[0] === activeCellIdx[0] && range[1] === activeCellIdx[1]) {
                this.notify(refreshRibbonIcons, null);
                this.notify(formulaBarOperation, { action: 'refreshFormulabar', cell: cellModel });
                if (cellEle && cell.validation) {
                    eventArgs.validation = cellModel.validation;
                    eventArgs.td = cellEle;
                    eventArgs.isRefresh = true;
                    this.notify(addListValidationDropdown, eventArgs);
                }
            }
        }
    };
    /**
     * Used to get a row data from the data source with updated cell value.
     *
     * {% codeBlock src='spreadsheet/getRowData/index.md' %}{% endcodeBlock %}
     *
     * @param {number} index - Specifies the row index.
     * @param {number} sheetIndex - Specifies the sheet index. By default, it consider the active sheet index.
     * @returns {Object[]} - Return row data.
     */
    Workbook.prototype.getRowData = function (index, sheetIndex) {
        if (isNullOrUndefined(index)) {
            index = 0;
        }
        if (isNullOrUndefined(sheetIndex)) {
            sheetIndex = this.activeSheetIndex;
        }
        var eventArgs = { sheetIdx: sheetIndex, startIndex: index, modelType: 'Row', isDataRequest: true };
        this.notify(dataChanged, eventArgs);
        return eventArgs.data;
    };
    /**
     * This method is used to update the Range property in specified sheet index.
     *
     * @param {RangeModel} range - Specifies the range properties to update.
     * @param {number} [sheetIndex] - Specifies the sheet index to update the range. By default, it consider the active sheet index.
     * @returns {void} - To update a range properties.
     */
    Workbook.prototype.updateRange = function (range, sheetIndex) {
        if (sheetIndex === void 0) { sheetIndex = this.activeSheetIndex; }
        var sheet = getSheet(this, sheetIndex);
        if (!sheet) {
            return;
        }
        if (!range.startCell) {
            range.startCell = 'A1';
        }
        if (range.showFieldAsHeader === undefined) {
            range.showFieldAsHeader = true;
        }
        if (range.template && !range.address) {
            range.address = range.startCell;
        }
        sheet.ranges.push(range);
        this.setSheetPropertyOnMute(sheet, 'ranges', sheet.ranges);
        if (range.dataSource) {
            this.notify(dataSourceChanged, { sheetIdx: sheetIndex, rangeIdx: sheet.ranges.length - 1, changedData: range.dataSource });
        }
    };
    /**
     * This method is used to wrap/unwrap the text content of the cell.
     *
     * {% codeBlock src='spreadsheet/wrap/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Address of the cell to be wrapped.
     * @param {boolean} wrap - Set `false` if the text content of the cell to be unwrapped.
     * @returns {void} - To wrap/unwrap the text content of the cell.
     * {% codeBlock src='spreadsheet/wrap/index.md' %}{% endcodeBlock %}
     */
    Workbook.prototype.wrap = function (address, wrap$1) {
        if (wrap$1 === void 0) { wrap$1 = true; }
        wrap(address, wrap$1, this, null, true);
    };
    /**
     * Adds the defined name to the Spreadsheet.
     *
     * @param {DefineNameModel} definedName - Specifies the name.
     * @returns {boolean} - Return the added status of the defined name.
     * {% codeBlock src='spreadsheet/addDefinedName/index.md' %}{% endcodeBlock %}
     */
    Workbook.prototype.addDefinedName = function (definedName) {
        var eventArgs = {
            action: 'addDefinedName',
            isAdded: false,
            definedName: definedName
        };
        this.notify(workbookFormulaOperation, eventArgs);
        return eventArgs.isAdded;
    };
    /**
     * Removes the defined name from the Spreadsheet.
     *
     * @param {string} definedName - Specifies the name.
     * @param {string} scope - Specifies the scope of the defined name.
     * @returns {boolean} - Return the removed status of the defined name.
     * {% codeBlock src='spreadsheet/removeDefinedName/index.md' %}{% endcodeBlock %}
     */
    Workbook.prototype.removeDefinedName = function (definedName, scope) {
        if (scope === void 0) { scope = ''; }
        var eventArgs = {
            action: 'removeDefinedName',
            isRemoved: false,
            definedName: definedName,
            scope: scope
        };
        this.notify(workbookFormulaOperation, eventArgs);
        return eventArgs.isRemoved;
    };
    /**
     * Used to set the image in spreadsheet.
     *
     * @param {ImageModel} images - Specifies the options to insert image in spreadsheet.
     * @param {string} range - Specifies the range in spreadsheet.
     * @returns {void} - To set the image in spreadsheet.
     */
    Workbook.prototype.insertImage = function (images, range) {
        this.notify(setImage, { options: images, range: range ? range : this.getActiveSheet().selectedRange });
    };
    /**
     * Used to perform autofill action based on the specified range in spreadsheet.
     *
     * @param {string} fillRange - Specifies the fill range.
     * @param {string} dataRange - Specifies the data range.
     * @param {AutoFillDirection} direction - Specifies the direction("Down","Right","Up","Left") to be filled.
     * @param {AutoFillType} fillType - Specifies the fill type("FillSeries","CopyCells","FillFormattingOnly","FillWithoutFormatting") for autofill action.
     * @returns {void} - To perform autofill action based on the specified range in spreadsheet.
     */
    Workbook.prototype.autoFill = function (fillRange, dataRange, direction, fillType) {
        var options = {
            dataRange: dataRange ? dataRange : this.getActiveSheet().selectedRange,
            fillRange: fillRange,
            direction: direction ? direction : 'Down',
            fillType: fillType ? fillType : 'FillSeries'
        };
        this.notify(setAutoFill, options);
    };
    /**
     * Used to set the chart in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/insertChart/index.md' %}{% endcodeBlock %}
     *
     * @param {ChartModel} chart - Specifies the options to insert chart in spreadsheet
     * @returns {void} - To set the chart in spreadsheet.
     */
    Workbook.prototype.insertChart = function (chart) {
        this.notify(setChart, { chart: chart });
    };
    /**
     * Used to delete the chart from spreadsheet.
     *
     * {% codeBlock src='spreadsheet/deleteChart/index.md' %}{% endcodeBlock %}
     *
     * @param {string} id - Specifies the chart element id.
     * @returns {void} - To delete the chart from spreadsheet.
     */
    Workbook.prototype.deleteChart = function (id) {
        this.notify(deleteChart, { id: id });
    };
    /**
     * Filters the range of cells in the sheet.
     *
     * @param {FilterOptions} filterOptions - Specifies the filterOptions
     * @param {string} range - Specifies the range
     * @returns {Promise<FilterEventArgs>} - To Filters the range of cells in the sheet.
     */
    Workbook.prototype.filter = function (filterOptions, range) {
        if (!this.allowFiltering) {
            return Promise.reject();
        }
        var eventArgs = {
            range: range || this.getActiveSheet().selectedRange,
            filterOptions: filterOptions,
            cancel: false
        };
        var promise = new Promise(function (resolve) { resolve((function () { })()); });
        var filterArgs = { args: eventArgs, promise: promise };
        this.notify(initiateFilter, filterArgs);
        return filterArgs.promise;
    };
    /**
     * To add custom library function.
     *
     * @param {string} functionHandler - Custom function handler name
     * @param {string} functionName - Custom function name
     * @param {string} formulaDescription - Specifies formula description.
     * {% codeBlock src='spreadsheet/addCustomFunction/index.md' %}{% endcodeBlock %}
     * @returns {void} - To add custom library function.
     */
    Workbook.prototype.addCustomFunction = function (functionHandler, functionName, formulaDescription) {
        functionName = functionName ? functionName : typeof functionHandler === 'string' ? functionHandler :
            functionHandler.name.replace('bound ', '');
        var eventArgs = {
            action: 'addCustomFunction',
            functionHandler: functionHandler,
            functionName: functionName,
            formulaDescription: formulaDescription
        };
        this.notify(workbookFormulaOperation, eventArgs);
    };
    /**
     * This method is used to Clear contents, formats and hyperlinks in spreadsheet.
     *
     * @param {ClearOptions} options - Options for clearing the content, formats and hyperlinks in spreadsheet.
     * @returns {void} - To Clear contents, formats and hyperlinks.
     */
    Workbook.prototype.clear = function (options) {
        this.notify(clear, options);
    };
    /**
     * Gets the formatted text of the cell.
     *
     * {% codeBlock src='spreadsheet/getDisplayText/index.md' %}{% endcodeBlock %}
     *
     * @param {CellModel} cell - Specifies the cell.
     * @returns {string} - To get Display Text.
     */
    Workbook.prototype.getDisplayText = function (cell) {
        if (!cell) {
            return '';
        }
        if (cell.format && !isNullOrUndefined(cell.value)) {
            var eventArgs = { formattedText: cell.value, value: cell.value, format: cell.format, cell: cell,
                skipFormatCheck: true };
            this.notify(getFormattedCellObject, eventArgs);
            return eventArgs.formattedText;
        }
        else if (!cell.value && cell.hyperlink) {
            return typeof cell.hyperlink === 'string' ? cell.hyperlink : cell.hyperlink.address;
        }
        else {
            return cell.value || typeof cell.value === 'number' ? cell.value.toString() : '';
        }
    };
    /**
     * This method is used to freeze rows and columns after the specified cell in the Spreadsheet.
     *
     * @param {number} row - Specifies the freezed row count.
     * @param {number} column - Specifies the freezed column count.
     * @param {number | string} sheet - Specifies the sheet name or index in which the freeze operation will perform. By default,
     * active sheet will be considered.
     * {% codeBlock src='spreadsheet/freezePanes/index.md' %}{% endcodeBlock %}
     * @returns {void}
     */
    Workbook.prototype.freezePanes = function (row, column, sheet) {
        if (row === void 0) { row = 1; }
        if (column === void 0) { column = 1; }
        var model = this.getSheetModel(sheet);
        if (!this.allowFreezePane || (model.frozenRows === row && model.frozenColumns === column)) {
            return;
        }
        this.setSheetPropertyOnMute(model, 'frozenRows', row);
        this.setSheetPropertyOnMute(model, 'frozenColumns', column);
        this.updateTopLeftCell();
        if (model.id === this.getActiveSheet().id && this.getModuleName() === 'spreadsheet') {
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            this.renderModule.refreshSheet();
        }
    };
    /**
     * This method is used to unfreeze the frozen rows and columns from the active sheet.
     *
     * @param {number | string} sheet - Specifies the sheet name or index in which the unfreeze operation will perform. By default,
     * active sheet will be considered.
     * {% codeBlock src='spreadsheet/unfreezePanes/index.md' %}{% endcodeBlock %}
     * @returns {void}
     * @deprecated This method is deprecated, use `unfreezePanes` method to unfreeze the frozen rows and columns.
     */
    Workbook.prototype.Unfreeze = function (sheet) {
        this.freezePanes(0, 0, sheet);
    };
    /**
     * This method is used to unfreeze the frozen rows and columns from spreadsheet.
     *
     * @param {number | string} sheet - Specifies the sheet name or index in which the unfreeze operation will perform. By default,
     * active sheet will be considered.
     * {% codeBlock src='spreadsheet/unfreezePanes/index.md' %}{% endcodeBlock %}
     * @returns {void}
     */
    Workbook.prototype.unfreezePanes = function (sheet) {
        this.freezePanes(0, 0, sheet);
    };
    /**
     * The `calculateNow` method is used to calculate any uncalculated formulas in a spreadsheet.
     * This method accepts an option to specify whether the calculation should be performed for the entire workbook or a specific sheet.
     *
     * @param {string} [scope] - Specifies the scope of the calculation. Acceptable values are `Sheet` or `Workbook`.
     * If not provided, the default scope is `Sheet`.
     * * `Sheet`: Calculates formulas only on the current sheet or a specified sheet.
     * * `Workbook`: Calculates formulas across the entire workbook.
     * @param {number | string} [sheet] - The index or name of the sheet to calculate if the scope is set to `Sheet`.
     * If not provided and the scope is `Sheet`, the current active sheet will be used.
     * @returns {Promise<void>} - A promise that resolves when the calculation is complete.
     * The promise does not return a specific value, but it can be used to perform actions after the calculation has finished.
     */
    Workbook.prototype.calculateNow = function (scope, sheet) {
        var sheets;
        if (scope === 'Workbook' && this.calculationMode === 'Manual') {
            scope = 'CalculateWorkbook';
            this.setProperties({ calculationMode: 'Automatic' }, true);
        }
        if (scope === 'Workbook' || scope === 'CalculateWorkbook') {
            sheets = this.sheets;
        }
        else {
            if (typeof sheet === 'string') {
                sheet = getSheetIndex(this, sheet);
            }
            else {
                sheet = isNullOrUndefined(sheet) ? this.activeSheetIndex : sheet;
            }
            sheets = [getSheet(this, sheet)];
        }
        var calcArgs = { action: 'calculateNow',
            scope: scope, sheets: sheets, promise: new Promise(function (resolve) { resolve((function () { })()); }) };
        this.notify(workbookFormulaOperation, calcArgs);
        return calcArgs.promise;
    };
    /**
     * @param {number} top - Specifies the top.
     * @param {number} left - Specifies the fleft.
     * @param {string} model - Specifies the model.
     * @param {SheetModel} sheet - Specifies the sheet.
     * @returns {void}
     * @hidden
     */
    Workbook.prototype.updateTopLeftCell = function (top, left, model, sheet) {
        if (!sheet) {
            sheet = this.getActiveSheet();
        }
        var indexes = getCellIndexes(sheet.topLeftCell);
        if (sheet.frozenRows || sheet.frozenColumns) {
            if (isNullOrUndefined(top) || top < 0) {
                top = sheet.frozenRows ? 0 : indexes[0];
            }
            if (isNullOrUndefined(left) || left < 0) {
                left = sheet.frozenColumns ? 0 : indexes[1];
            }
            top += this.frozenRowCount(sheet);
            left += this.frozenColCount(sheet);
            if (model) {
                if (model === 'row') {
                    top = getCellIndexes(sheet.paneTopLeftCell)[0];
                }
                else {
                    left = getCellIndexes(sheet.paneTopLeftCell)[1];
                }
            }
            this.setSheetPropertyOnMute(sheet, 'paneTopLeftCell', getCellAddress(top, left));
            if (sheet.frozenRows) {
                top = indexes[0];
            }
            if (sheet.frozenColumns) {
                left = indexes[1];
            }
        }
        else {
            if (isNullOrUndefined(top)) {
                top = indexes[0];
            }
            if (isNullOrUndefined(left)) {
                left = indexes[1];
            }
            this.setSheetPropertyOnMute(sheet, 'paneTopLeftCell', getCellAddress(top, left));
        }
        this.setSheetPropertyOnMute(sheet, 'topLeftCell', getCellAddress(top, left));
    };
    /**
     * @hidden
     * @param {string} address - Specifies the address.
     * @returns {number | number[]} - To get address info.
     */
    Workbook.prototype.getAddressInfo = function (address) {
        return getAddressInfo(this, address);
    };
    /**
     * @hidden
     * @param {SheetModel} sheet - Specifies the sheet.
     * @param {string} prop - Specifies the prop.
     * @param {Object} value - Specifies the value.
     * @returns {void} - To set sheet properties.
     */
    Workbook.prototype.setSheetPropertyOnMute = function (sheet, prop, value) {
        this.isProtectedOnChange = true;
        sheet["" + prop] = value;
        this.isProtectedOnChange = false;
    };
    /**
     * To get frozen row count from top index.
     *
     * @hidden
     * @param {SheetModel} sheet - Specifies the sheet.
     * @returns {number} - to get the frozen count.
     */
    Workbook.prototype.frozenRowCount = function (sheet) {
        return sheet.frozenRows ? (sheet.topLeftCell === 'A1' ? sheet.frozenRows : getCellIndexes(sheet.topLeftCell)[0] + sheet.frozenRows)
            : 0;
    };
    /**
     * To get frozen column count from left index.
     *
     * @hidden
     * @param {SheetModel} sheet - Specifies the sheet.
     * @returns {number} - to get the frozen count.
     */
    Workbook.prototype.frozenColCount = function (sheet) {
        return sheet.frozenColumns ? (sheet.topLeftCell === 'A1' ? sheet.frozenColumns : getCellIndexes(sheet.topLeftCell)[1] +
            sheet.frozenColumns) : 0;
    };
    /**
     * To update the provided range while inserting or deleting rows and columns.
     *
     * @param {InsertDeleteEventArgs} args - Insert / Detele event arguments.
     * @param {number[]} index - Existing range.
     * @param {boolean} isRangeFormula - Specifies is range formula or not.
     * @param {number} rowIndex - Specifies the row index of the cell that contains the formula which is going to be refreshed.
     * @param {number} colIndex - Specifies the column index of the cell that contains the formula which is going to be refreshed.
     * @param {boolean} isAbsoluteRef - Specifies is the range used in the formula is Absolute reference or not.
     * @param {boolean} isSingleRangeRef - Specifies whether the formula as single range reference or not.
     * @returns {boolean} - It return `true`, if the insert / delete action happens between the provided range, otherwise `false`.
     * @hidden
     */
    Workbook.prototype.updateRangeOnInsertDelete = function (args, index, isRangeFormula, rowIndex, colIndex, isAbsoluteRef, isSingleRangeRef) {
        var diff;
        var updated = false;
        if (args.isInsert) {
            diff = (args.endIndex - args.startIndex) + 1;
            if (args.modelType === 'Row') {
                if (args.forceUpdate) {
                    index[0] += 1;
                    index[2] += 1;
                    updated = true;
                }
                else {
                    var isRangeRefresh = !isAbsoluteRef && isSingleRangeRef
                        && index[2] === args.startIndex - 1 && rowIndex === args.startIndex && index[1] === index[3];
                    if (args.startIndex <= index[0]) {
                        index[0] += diff;
                        updated = true;
                    }
                    if (args.startIndex <= index[2] || (isRangeFormula && args.startIndex === index[2] + 1 && isRangeRefresh)) {
                        index[2] += diff;
                        updated = true;
                    }
                }
            }
            else {
                if (args.forceUpdate) {
                    index[1] += 1;
                    index[3] += 1;
                    updated = true;
                }
                else {
                    var isRangeRefresh = !isAbsoluteRef && isSingleRangeRef
                        && index[3] === args.startIndex - 1 && colIndex === args.startIndex && index[0] === index[2];
                    if (args.startIndex <= index[1]) {
                        index[1] += diff;
                        updated = true;
                    }
                    if (args.startIndex <= index[3] || (isRangeFormula && args.startIndex === index[3] + 1 && isRangeRefresh)) {
                        index[3] += diff;
                        updated = true;
                    }
                }
            }
        }
        else {
            if (args.modelType === 'Row') {
                diff = index[0] - args.startIndex;
                if (diff > 0) {
                    if (index[0] > args.endIndex) {
                        diff = (args.endIndex - args.startIndex) + 1;
                        if (diff > 0) {
                            index[0] -= diff;
                            updated = true;
                        }
                    }
                    else {
                        index[0] -= diff;
                        updated = true;
                    }
                }
                if (args.startIndex <= index[2]) {
                    if (args.endIndex <= index[2]) {
                        index[2] -= (args.endIndex - args.startIndex) + 1;
                    }
                    else {
                        index[2] -= (index[2] - args.startIndex) + 1;
                    }
                    updated = true;
                }
            }
            else {
                diff = index[1] - args.startIndex;
                if (diff > 0) {
                    if (index[1] > args.endIndex) {
                        diff = (args.endIndex - args.startIndex) + 1;
                        if (diff > 0) {
                            index[1] -= diff;
                            updated = true;
                        }
                    }
                    else {
                        index[1] -= diff;
                        updated = true;
                    }
                }
                if (args.startIndex <= index[3]) {
                    if (args.endIndex <= index[3]) {
                        index[3] -= (args.endIndex - args.startIndex) + 1;
                    }
                    else {
                        index[3] -= (index[3] - args.startIndex) + 1;
                    }
                    updated = true;
                }
            }
        }
        return updated;
    };
    /**
     * @param {number} rowIndex - Specifies the row index.
     * @param {number} colIndex - Specifies the column index.
     * @param {HTMLTableRowElement} row - Specifies the row.
     * @returns {HTMLElement} - returns cell element.
     * @hidden
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    Workbook.prototype.getCell = function (rowIndex, colIndex, row) {
        return null;
    };
    /**
     * Used in calculate to compute integer value of date
     *
     * @param {Date} date - Specifies the date value.
     * @param {boolean} isTime -Specifies is Time or not.
     * @returns {number} - Returns integer value of date.
     */
    Workbook.prototype.dateToInt = function (date, isTime) {
        return dateToInt(date, isTime);
    };
    /**
     * Used to update format from calculate.
     *
     * @param {number} sheetId - Specifies the sheetId.
     * @param {number} rowIndex - Specifies the row index.
     * @param {number} colIndex - Specifies the col index.
     * @returns {void} - Update format from calculate.
     */
    Workbook.prototype.setDateFormat = function (sheetId, rowIndex, colIndex) {
        var sheet = getSheet(this, getSheetIndexFromId(this, sheetId));
        var formatType = getCell(rowIndex, colIndex, sheet, null, true).format;
        if (!formatType || formatType === 'General') {
            setCell(rowIndex, colIndex, sheet, { format: getFormatFromType('ShortDate') }, true);
        }
    };
    var Workbook_1;
    __decorate$4([
        Collection([], Sheet)
    ], Workbook.prototype, "sheets", void 0);
    __decorate$4([
        Property(0)
    ], Workbook.prototype, "activeSheetIndex", void 0);
    __decorate$4([
        Property('100%')
    ], Workbook.prototype, "height", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowFindAndReplace", void 0);
    __decorate$4([
        Property()
    ], Workbook.prototype, "filterCollection", void 0);
    __decorate$4([
        Property()
    ], Workbook.prototype, "sortCollection", void 0);
    __decorate$4([
        Property('100%')
    ], Workbook.prototype, "width", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "showRibbon", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "showFormulaBar", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "showSheetTabs", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowEditing", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowOpen", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowSave", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowSorting", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowFiltering", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowNumberFormatting", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowCellFormatting", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowHyperlink", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "enableNotes", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowInsert", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowDelete", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowMerge", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowDataValidation", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowImage", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowChart", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowAutoFill", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowPrint", void 0);
    __decorate$4([
        Property('Automatic')
    ], Workbook.prototype, "calculationMode", void 0);
    __decorate$4([
        Complex({}, AutoFillSettings)
    ], Workbook.prototype, "autoFillSettings", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowConditionalFormat", void 0);
    __decorate$4([
        Complex({}, CellStyle)
    ], Workbook.prototype, "cellStyle", void 0);
    __decorate$4([
        Property('')
    ], Workbook.prototype, "openUrl", void 0);
    __decorate$4([
        Complex({}, OpenSettings)
    ], Workbook.prototype, "openSettings", void 0);
    __decorate$4([
        Property('')
    ], Workbook.prototype, "saveUrl", void 0);
    __decorate$4([
        Property('')
    ], Workbook.prototype, "password", void 0);
    __decorate$4([
        Property(false)
    ], Workbook.prototype, "isProtected", void 0);
    __decorate$4([
        Collection([], DefineName)
    ], Workbook.prototype, "definedNames", void 0);
    __decorate$4([
        Event$1()
    ], Workbook.prototype, "beforeOpen", void 0);
    __decorate$4([
        Event$1()
    ], Workbook.prototype, "openFailure", void 0);
    __decorate$4([
        Event$1()
    ], Workbook.prototype, "beforeSave", void 0);
    __decorate$4([
        Event$1()
    ], Workbook.prototype, "saveComplete", void 0);
    __decorate$4([
        Event$1()
    ], Workbook.prototype, "beforeCellFormat", void 0);
    __decorate$4([
        Event$1()
    ], Workbook.prototype, "queryCellInfo", void 0);
    __decorate$4([
        Event$1()
    ], Workbook.prototype, "beforeCellUpdate", void 0);
    __decorate$4([
        Property(true)
    ], Workbook.prototype, "allowFreezePane", void 0);
    __decorate$4([
        Property(',')
    ], Workbook.prototype, "listSeparator", void 0);
    Workbook = Workbook_1 = __decorate$4([
        NotifyPropertyChanges
    ], Workbook);
    return Workbook;
}(Component));

var __extends$6 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Configures the Row behavior for the spreadsheet.
 *  ```html
 * <div id='Spreadsheet'></div>
 * ```
 * ```typescript
 * let spreadsheet: Spreadsheet = new Spreadsheet({
 *      sheets: [{
 *                rows: [{
 *                        index: 30,
 *                        cells: [{ index: 4, value: 'Total Amount:' },
 *                               { formula: '=SUM(F2:F30)', style: { fontWeight: 'bold' } }]
 *                }]
 * ...
 * });
 * spreadsheet.appendTo('#Spreadsheet');
 * ```
 */
var Row = /** @class */ (function (_super) {
    __extends$6(Row, _super);
    function Row() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$5([
        Collection([], Cell)
    ], Row.prototype, "cells", void 0);
    __decorate$5([
        Property(0)
    ], Row.prototype, "index", void 0);
    __decorate$5([
        Property(20)
    ], Row.prototype, "height", void 0);
    __decorate$5([
        Property(false)
    ], Row.prototype, "customHeight", void 0);
    __decorate$5([
        Property(false)
    ], Row.prototype, "hidden", void 0);
    __decorate$5([
        Complex({}, Format)
    ], Row.prototype, "format", void 0);
    __decorate$5([
        Property(false)
    ], Row.prototype, "isReadOnly", void 0);
    return Row;
}(ChildProperty));
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} rowIndex - Specifies the rowIndex.
 * @returns {RowModel} - To get the row.
 */
function getRow(sheet, rowIndex) {
    return sheet.rows[rowIndex];
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} rowIndex - Specifies the rowIndex.
 * @param {RowModel} row - Specifies the row.
 * @returns {void} - To set the row.
 */
function setRow(sheet, rowIndex, row) {
    if (!sheet.rows[rowIndex]) {
        sheet.rows[rowIndex] = {};
    }
    Object.keys(row).forEach(function (key) {
        sheet.rows[rowIndex]["" + key] = row["" + key];
    });
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} index - Specifies the index.
 * @returns {boolean} - To return the bool value.
 */
function isHiddenRow(sheet, index) {
    return sheet.rows[index] && sheet.rows[index].hidden;
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} index - Specifies the index.
 * @returns {boolean} - To return the bool value.
 */
function isFilterHidden(sheet, index) {
    return sheet.rows[index] && sheet.rows[index].isFiltered;
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} rowIndex - Specifies the rowIndex.
 * @param {boolean} checkDPR - Specifies the bool value.
 * @param {boolean} addHidden - By default hidden rows are considered as 0, set `true` if you want to add the hidden rows height.
 * @returns {number} - To get the row height.
 */
function getRowHeight(sheet, rowIndex, checkDPR, addHidden) {
    var hgt;
    var stdHeight;
    if (sheet && sheet.standardHeight) {
        stdHeight = sheet.standardHeight;
    }
    if (sheet && sheet.rows && sheet.rows[rowIndex]) {
        if (!addHidden && sheet.rows[rowIndex].hidden) {
            return 0;
        }
        hgt = sheet.rows[rowIndex].height === undefined ?
            (stdHeight === undefined ? 20 : stdHeight) : sheet.rows[rowIndex].height;
    }
    else {
        hgt = stdHeight === undefined ? 20 : stdHeight;
    }
    if (checkDPR && window.devicePixelRatio % 1 > 0) {
        var pointValue = (hgt * window.devicePixelRatio) % 1;
        return hgt + (pointValue ? ((pointValue > 0.5 ? (1 - pointValue) : -1 * pointValue) / window.devicePixelRatio) : 0);
    }
    else {
        return hgt;
    }
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} rowIndex - Specifies the rowIndex.
 * @param {number} height - Specifies the height.
 * @returns {void} - To set the row height.
 */
function setRowHeight(sheet, rowIndex, height) {
    if (sheet && sheet.rows) {
        if (!sheet.rows[rowIndex]) {
            sheet.rows[rowIndex] = {};
        }
        sheet.rows[rowIndex].height = height;
    }
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} startRow - Specifies the startRow.
 * @param {number} endRow - Specifies the endRow.
 * @param {boolean} checkDPR - Specifies the boolean value.
 * @param {boolean} addHidden - By default hidden rows are considered as 0, set `true` if you want to add the hidden rows height.
 * @returns {number} - To get the rows height.
 */
function getRowsHeight(sheet, startRow, endRow, checkDPR, addHidden) {
    if (endRow === void 0) { endRow = startRow; }
    var height = 0;
    var swap;
    if (startRow > endRow) {
        swap = startRow;
        startRow = endRow;
        endRow = swap;
    }
    for (var i = startRow; i <= endRow; i++) {
        height += getRowHeight(sheet, i, checkDPR, addHidden);
    }
    return height;
}

var __extends$7 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Configures the Column behavior for the spreadsheet.
 */
var Column = /** @class */ (function (_super) {
    __extends$7(Column, _super);
    function Column() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$6([
        Property(0)
    ], Column.prototype, "index", void 0);
    __decorate$6([
        Property(64)
    ], Column.prototype, "width", void 0);
    __decorate$6([
        Property(false)
    ], Column.prototype, "customWidth", void 0);
    __decorate$6([
        Property(false)
    ], Column.prototype, "hidden", void 0);
    __decorate$6([
        Complex({}, Format)
    ], Column.prototype, "format", void 0);
    __decorate$6([
        Property(true)
    ], Column.prototype, "isLocked", void 0);
    __decorate$6([
        Property('')
    ], Column.prototype, "validation", void 0);
    __decorate$6([
        Property(false)
    ], Column.prototype, "isReadOnly", void 0);
    return Column;
}(ChildProperty));
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} colIndex - Specifies the colIndex.
 * @returns {ColumnModel} - To get Column.
 */
function getColumn(sheet, colIndex) {
    if (sheet.columns) {
        if (!sheet.columns[colIndex]) {
            sheet.columns[colIndex] = {};
        }
    }
    else {
        sheet.columns = [];
        sheet.columns[colIndex] = {};
    }
    return sheet.columns[colIndex];
}
/** @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} colIndex - Specifies the colIndex.
 * @param {ColumnModel} column - Specifies the column.
 * @returns {void} - To set Column.
 */
function setColumn(sheet, colIndex, column) {
    var curColumn = getColumn(sheet, colIndex);
    Object.keys(column).forEach(function (key) {
        curColumn["" + key] = column["" + key];
    });
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} index - Specifies the index.
 * @param {boolean} skipHidden - Specifies the bool.
 * @param {boolean} checkDPR - Specifies the bool.
 * @returns {number} - To get Column width.
 */
function getColumnWidth(sheet, index, skipHidden, checkDPR) {
    var width;
    if (sheet && sheet.columns && sheet.columns[index]) {
        if (!skipHidden && sheet.columns[index].hidden) {
            return 0;
        }
        width = (sheet.columns[index].width || sheet.columns[index].customWidth) ?
            sheet.columns[index].width : 64;
    }
    else {
        width = 64;
    }
    if (checkDPR && window.devicePixelRatio % 1 > 0) {
        var pointValue = (width * window.devicePixelRatio) % 1;
        return width + (pointValue ? ((pointValue > 0.5 ? (1 - pointValue) : -1 * pointValue) / window.devicePixelRatio) : 0);
    }
    else {
        return width;
    }
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} startCol - Specifies the startCol.
 * @param {number} endCol - Specifies the endCol.
 * @param {boolean} checkDPR - Specifies the boolean value.
 * @returns {number} - returns the column width.
 */
function getColumnsWidth(sheet, startCol, endCol, checkDPR) {
    if (endCol === void 0) { endCol = startCol; }
    var width = 0;
    if (startCol > endCol) {
        var swap = startCol;
        startCol = endCol;
        endCol = swap;
    }
    for (var i = startCol; i <= endCol; i++) {
        width += getColumnWidth(sheet, i, null, checkDPR);
    }
    return width;
}
/**
 * @hidden
 * @param {SheetModel} sheet - Specifies the sheet.
 * @param {number} index - Specifies the index.
 * @returns {boolean} - returns the boolean value.
 */
function isHiddenCol(sheet, index) {
    return sheet.columns[index] && sheet.columns[index].hidden;
}
/**
 * @hidden
 * @param {ColumnModel} column - Specifies the column.
 * @param {number} rowIndex - Specifies the row index.
 * @param {number} colIndex - Specifies the column index.
 * @returns {boolean} - Specifies boolean values by checking column validation or not.
 */
function checkColumnValidation(column, rowIndex, colIndex) {
    return column && column.validation && (!column.validation.address || isInMultipleRange(column.validation.address, rowIndex, colIndex));
}

/**
 * To get Spreadsheet required modules.
 *
 * @hidden
 * @param {Spreadsheet} context - To get Spreadsheet required modules.
 * @returns {ModuleDeclaration[]} - To get Spreadsheet required modules.
 */
function getRequiredModules(context) {
    var modules = [];
    pushBasicModules(context, modules);
    getWorkbookRequiredModules(context, modules);
    return modules;
}
/**
 * To push basic modules to the spreadsheet.
 *
 * @param {Spreadsheet} context - Specifies the Spreadsheet instances.
 * @param {ModuleDeclaration[]} modules - Specifies the modules declaration.
 * @returns {void} - To push basic modules to the spreadsheet.
 */
function pushBasicModules(context, modules) {
    if (context.showRibbon) {
        modules.push({
            member: 'ribbon',
            args: [context]
        });
    }
    if (context.showFormulaBar) {
        modules.push({
            member: 'formulaBar',
            args: [context]
        });
    }
    if (context.showSheetTabs) {
        modules.push({
            member: 'sheetTabs',
            args: [context]
        });
    }
    if (context.allowEditing) {
        modules.push({
            member: 'edit',
            args: [context]
        });
        modules.push({
            member: 'formula',
            args: [context]
        });
    }
    if (context.allowOpen) {
        modules.push({
            member: 'open',
            args: [context]
        });
    }
    if (context.allowSave) {
        modules.push({
            member: 'save',
            args: [context]
        });
    }
    if (context.enableContextMenu) {
        modules.push({
            member: 'contextMenu',
            args: [context]
        });
    }
    if (context.allowAutoFill) {
        modules.push({ member: 'autofill', args: [context] });
    }
    if (context.selectionSettings.mode !== 'None') {
        modules.push({
            member: 'selection',
            args: [context]
        });
    }
    if (context.enableKeyboardNavigation) {
        modules.push({
            member: 'keyboardNavigation',
            args: [context]
        });
    }
    if (context.allowNumberFormatting) {
        modules.push({
            member: 'numberFormat',
            args: [context]
        });
    }
    if (context.enableKeyboardShortcut) {
        modules.push({
            member: 'keyboardShortcut',
            args: [context]
        });
    }
    if (context.enableClipboard) {
        modules.push({
            member: 'clipboard',
            args: [context]
        });
    }
    if (context.allowCellFormatting) {
        modules.push({
            member: 'cellformat',
            args: [context]
        });
    }
    if (context.allowSorting) {
        modules.push({ member: 'sort', args: [context] });
    }
    if (context.allowResizing) {
        modules.push({
            member: 'resize',
            args: [context]
        });
    }
    modules.push({
        member: 'protectSheet',
        args: [context]
    });
    modules.push({
        member: 'workbookFormula',
        args: [context]
    });
    modules.push({
        member: 'workbookEdit',
        args: [context]
    });
    if (context.allowHyperlink) {
        modules.push({
            member: 'spreadsheetHyperlink',
            args: [context]
        });
    }
    if (context.enableNotes) {
        modules.push({
            member: 'spreadsheetNote',
            args: [context]
        });
    }
    if (context.allowUndoRedo) {
        modules.push({
            member: 'undoredo',
            args: [context]
        });
    }
    if (context.allowFiltering) {
        modules.push({ member: 'filter', args: [context] });
    }
    if (context.allowWrap) {
        modules.push({ member: 'wrapText', args: [context] });
    }
    if (context.allowInsert) {
        modules.push({ member: 'insert', args: [context] });
    }
    if (context.allowDelete) {
        modules.push({ member: 'delete', args: [context] });
    }
    if (context.allowDataValidation) {
        modules.push({ member: 'dataValidation', args: [context] });
    }
    if (context.allowFindAndReplace) {
        modules.push({ member: 'findAndReplace', args: [context] });
    }
    if (context.allowMerge) {
        modules.push({ member: 'merge', args: [context] });
    }
    if (context.allowConditionalFormat) {
        modules.push({ member: 'conditionalFormatting', args: [context] });
    }
    if (context.allowImage) {
        modules.push({ member: 'spreadsheetImage', args: [context] });
    }
    if (context.allowChart) {
        modules.push({ member: 'spreadsheetChart', args: [context] });
    }
}

/** @hidden */
var DISABLED = 'e-disabled';
/** @hidden */
var WRAPTEXT = 'e-wraptext';
/** @hidden */
var locale = 'spreadsheetLocale';
/** @hidden */
var dialog = 'dialog';
/** @hidden */
var actionEvents = 'actionEvents';
/** @hidden */
var overlay = 'shape';
/** @hidden */
var fontColor = {
    'Custom': [
        '#ffffff', '#000000', '#e7e6e6', '#44546a', '#4472c4', '#ed7d31', '#a5a5a5', '#ffc000', '#70ad47', '#ff0000',
        '#f2f2f2', '#808080', '#cfcdcd', '#d5dce4', '#d9e2f3', '#fbe4d5', '#ededed', '#fff2cc', '#e2efd9', '#ffcccc',
        '#d9d9d9', '#595959', '#aeaaaa', '#acb9ca', '#b4c6e7', '#f7caac', '#dbdbdb', '#ffe599', '#c5e0b3', '#ff8080',
        '#bfbfbf', '#404040', '#747070', '#8496b0', '#8eaadb', '#f4b083', '#c9c9c9', '#ffd966', '#a8d08d', '#ff3333',
        '#a6a6a6', '#262626', '#3b3838', '#323e4f', '#2f5496', '#c45911', '#7b7b7b', '#bf8f00', '#538135', '#b30000',
        '#7f7f7f', '#0d0d0d', '#161616', '#212934', '#1f3763', '#823b0b', '#525252', '#7f5f00', '#375623', '#660000'
    ]
};
/** @hidden */
var fillColor = {
    'Custom': [
        '#ffffff', '#000000', '#ffff00', '#00ff00', '#00ffff', '#0000ff', '#ff0000', '#000080', '#800080', '#996633',
        '#f2f2f2', '#808080', '#ffffcc', '#b3ffb3', '#ccffff', '#ccccff', '#ffcccc', '#ccccff', '#ff80ff', '#f2e6d9',
        '#d9d9d9', '#595959', '#ffff80', '#80ff80', '#b3ffff', '#8080ff', '#ff8080', '#8080ff', '#ff00ff', '#dfbf9f',
        '#bfbfbf', '#404040', '#ffff33', '#33ff33', '#33ffff', '#3333ff', '#ff3333', '#0000b3', '#b300b3', '#c68c53',
        '#a6a6a6', '#262626', '#e6e600', '#00b300', '#009999', '#000099', '#b30000', '#000066', '#660066', '#86592d',
        '#7f7f7f', '#0d0d0d', '#999900', '#006600', '#006666', '#000066', '#660000', '#00004d', '#4d004d', '#734d26'
    ]
};
/** @hidden */
var keyCodes = {
    UP: 38,
    DOWN: 40,
    LEFT: 37,
    RIGHT: 39,
    FIRSTALPHABET: 65,
    LASTALPHABET: 90,
    SPACE: 32,
    BACKSPACE: 8,
    TAB: 9,
    DELETE: 46,
    ENTER: 13,
    ESC: 27
};
/**
 * Default locale text
 *
 * @hidden
 */
var defaultLocale = {
    FindValue: 'Find value',
    ReplaceValue: 'Replace value',
    FindReplaceTooltip: 'Find & Replace',
    InsertingEmptyValue: 'Reference value is not valid.',
    ReplaceAllEnd: ' matches replaced with ',
    ByRow: 'By Rows',
    ByColumn: 'By Columns',
    MatchCase: 'Match case',
    MatchExactCellElements: 'Match entire cell contents',
    EnterCellAddress: 'Enter cell address',
    FindAndReplace: 'Find and Replace',
    FindNextBtn: 'Find Next',
    FindPreviousBtn: 'Find Previous',
    ReplaceBtn: 'Replace',
    ReplaceAllBtn: 'Replace All',
    GotoHeader: 'Go To',
    Sheet: 'Sheet',
    Workbook: 'Workbook',
    NoElements: 'We couldn\'t find what you were looking for.',
    FindWhat: 'Find what',
    ReplaceWith: 'Replace with',
    Cut: 'Cut',
    Copy: 'Copy',
    Paste: 'Paste',
    PasteSpecial: 'Paste Special',
    Link: 'Link',
    Spreadsheet: 'Spreadsheet',
    AddNote: 'Add Note',
    EditNote: 'Edit Note',
    DeleteNote: 'Delete Note',
    Hyperlink: 'Hyperlink',
    EditHyperlink: 'Edit Hyperlink',
    OpenHyperlink: 'Open Hyperlink',
    RemoveHyperlink: 'Remove Hyperlink',
    InvalidHyperlinkAlert: 'The address of this site is not valid. Check the address and try again.',
    InsertLink: 'Insert Link',
    EditLink: 'Edit Link',
    All: 'All',
    Values: 'Values',
    Formats: 'Formats',
    Bold: 'Bold',
    Font: 'Font',
    FontSize: 'Font Size',
    Italic: 'Italic',
    Underline: 'Underline',
    Strikethrough: 'Strikethrough',
    TextColor: 'Text Color',
    FillColor: 'Fill Color',
    HorizontalAlignment: 'Horizontal Alignment',
    AlignLeft: 'Align Left',
    AlignCenter: 'Center',
    AlignRight: 'Align Right',
    VerticalAlignment: 'Vertical Alignment',
    AlignTop: 'Align Top',
    AlignMiddle: 'Align Middle',
    AlignBottom: 'Align Bottom',
    WrapText: 'Wrap Text',
    MergeCells: 'Merge Cells',
    MergeAll: 'Merge All',
    MergeHorizontally: 'Merge Horizontally',
    MergeVertically: 'Merge Vertically',
    Unmerge: 'Unmerge',
    UnmergeCells: 'Unmerge Cells',
    SelectMergeType: 'Select Merge Type',
    MergeCellsAlert: 'Merging cells will only preserve the top-leftmost(Uppermost) value. Merge anyway?',
    Borders: 'Borders',
    TopBorders: 'Top Borders',
    LeftBorders: 'Left Borders',
    RightBorders: 'Right Borders',
    BottomBorders: 'Bottom Borders',
    AllBorders: 'All Borders',
    HorizontalBorders: 'Horizontal Borders',
    VerticalBorders: 'Vertical Borders',
    OutsideBorders: 'Outside Borders',
    InsideBorders: 'Inside Borders',
    NoBorders: 'No Borders',
    BorderColor: 'Border Color',
    BorderStyle: 'Border Style',
    InsertFunction: 'Insert Function',
    CalcOptions: 'Calculation Options',
    CalcOptionsTip: 'Choose to calculate formulas either automatically or manually',
    CalcActiveSheet: 'Calculate Sheet',
    CalcWorkbook: 'Calculate Workbook',
    Automatic: 'Automatic',
    Manual: 'Manual',
    CalcSheetTip: 'Calculate the active sheet',
    CalcWorkbookTip: 'Calculate the entire workbook',
    Insert: 'Insert',
    Delete: 'Delete',
    DuplicateSheet: 'Duplicate',
    MoveRight: 'Move Right',
    MoveLeft: 'Move Left',
    Rename: 'Rename',
    Hide: 'Hide',
    FileName: 'File Name',
    PROPER: 'Converts a text to proper case; first letter to uppercase and other letters to lowercase.',
    NameBox: 'Name Box',
    ShowHeaders: 'Show Headers',
    HideHeaders: 'Hide Headers',
    ShowGridLines: 'Show Gridlines',
    ExtendValidation: 'The selection contains some cells without data validation. Do you want to extend validation to these cells?',
    Yes: 'Yes',
    No: 'No',
    HideGridLines: 'Hide Gridlines',
    FreezePanes: 'Freeze Panes',
    FreezeRows: 'Freeze Rows',
    FreezeColumns: 'Freeze Columns',
    UnfreezePanes: 'Unfreeze Panes',
    UnfreezeRows: 'Unfreeze Rows',
    UnfreezeColumns: 'Unfreeze Columns',
    AddSheet: 'Add Sheet',
    ListAllSheets: 'List All Sheets',
    CollapseToolbar: 'Collapse Toolbar',
    ExpandToolbar: 'Expand Toolbar',
    CollapseFormulaBar: 'Collapse Formula Bar',
    ExpandFormulaBar: 'Expand Formula Bar',
    File: 'File',
    Home: 'Home',
    Formulas: 'Formulas',
    View: 'View',
    New: 'New',
    Open: 'Open',
    SaveAs: 'Save As',
    Print: 'Print',
    Update: 'Update',
    ExcelXlsx: 'Microsoft Excel',
    ExcelXls: 'Microsoft Excel 97-2003',
    CSV: 'Comma-separated values',
    FormulaBar: 'Formula Bar',
    Sort: 'Sort',
    SortAscending: 'Ascending',
    SortDescending: 'Descending',
    CustomSort: 'Custom Sort',
    AddColumn: 'Add Column',
    ContainsHeader: 'Data contains header',
    CaseSensitive: 'Case sensitive',
    SortBy: 'Sort by',
    ThenBy: 'Then by',
    SelectAColumn: 'Select a column',
    SortEmptyFieldError: 'All sort criteria must have a column specified. Check the selected sort criteria and try again.',
    SortDuplicateFieldError: '  is being sorted by values more than once. Delete the duplicate sort criteria and try again.',
    SortOutOfRangeError: 'Select a cell or range inside the used range and try again.',
    MultiRangeSortError: 'This can\'t be done on a multiple range selection. Select a single range and try again.',
    SortAndFilter: 'Sort & Filter',
    Filter: 'Filter',
    ClearAllFilter: 'Clear',
    ClearFilterFrom: 'Clear Filter From ',
    ReapplyFilter: 'Reapply',
    FilterCellValue: 'Filter by Value of Selected Cell',
    FilterOutOfRangeError: 'Select a cell or range inside the used range and try again.',
    HideRow: 'Hide Row',
    HideRows: 'Hide Rows',
    UnhideRows: 'Unhide Rows',
    HideColumn: 'Hide Column',
    HideColumns: 'Hide Columns',
    UnhideColumns: 'Unhide Columns',
    InsertRow: 'Insert Row',
    InsertRows: 'Insert Rows',
    Above: 'Above',
    Below: 'Below',
    InsertColumn: 'Insert Column',
    InsertColumns: 'Insert Columns',
    Before: 'Before',
    After: 'After',
    DeleteRow: 'Delete Row',
    DeleteRows: 'Delete Rows',
    DeleteColumn: 'Delete Column',
    DeleteColumns: 'Delete Columns',
    Ok: 'OK',
    Close: 'Close',
    MoreOptions: 'More Options',
    Cancel: 'Cancel',
    Apply: 'Apply',
    MoreColors: 'More Colors',
    StandardColors: 'Standard Colors',
    General: 'General',
    Number: 'Number',
    Currency: 'Currency',
    Accounting: 'Accounting',
    ShortDate: 'Short Date',
    LongDate: 'Long Date',
    Time: 'Time',
    Percentage: 'Percentage',
    Fraction: 'Fraction',
    Scientific: 'Scientific',
    Text: 'Text',
    Custom: 'Custom',
    MobileFormulaBarPlaceHolder: 'Enter value or Formula',
    NumberFormat: 'Number Format',
    PasteAlert: 'You can\'t paste this here, because the copy area and paste area aren\'t in the same size. ' +
        'Please try pasting in a different range.',
    DestroyAlert: 'Are you sure you want to destroy the current workbook without saving and create a new workbook?',
    SheetRenameInvalidAlert: 'Sheet name contains invalid character.',
    SheetRenameEmptyAlert: 'Sheet name cannot be empty.',
    SheetRenameAlreadyExistsAlert: 'Sheet name already exists. Please enter another name.',
    DeleteSheetAlert: 'You can\'t undo deleting sheets, and you might be removing some data. If you don\'t need it, click OK to delete.',
    DeleteSingleLastSheetAlert: 'A Workbook must contain at least one visible worksheet.',
    PickACategory: 'Pick a category',
    Description: 'Description',
    UnsupportedFile: 'Unsupported File',
    DataLimitExceeded: 'File data is too large and it takes more time to process, do you want to continue?',
    FileSizeLimitExceeded: 'File size is too large and it takes more time to process, do you want to continue?',
    InvalidUrl: 'Invalid URL',
    SUM: 'Adds a series of numbers and/or cells.',
    SUMIF: 'Adds the cells based on specified condition.',
    SUMIFS: 'Adds the cells based on specified conditions.',
    ABS: 'Returns the value of a number without its sign.',
    RAND: 'Returns a random number between 0 and 1.',
    RANDBETWEEN: 'Returns a random integer based on specified values.',
    FLOOR: 'Rounds a number down to the nearest multiple of a given factor.',
    CEILING: 'Rounds a number up to the nearest multiple of a given factor.',
    PRODUCT: 'Multiplies a series of numbers and/or cells.',
    INT: 'Returns a number to the nearest integer.',
    ROUNDUP: 'Rounds a number away from zero.',
    SUMPRODUCT: 'Returns sum of the product of given ranges of arrays.',
    SORT: 'Sorts a range of an array',
    T: 'Checks whether a value is text or not and returns the text.',
    EXACT: 'Checks whether a two text strings are exactly same and returns TRUE or FALSE.',
    LEN: 'Returns a number of characters in a given string.',
    MOD: 'Returns a remainder after a number is divided by divisor.',
    ODD: 'Rounds a positive number up and negative number down to the nearest odd integer.',
    PI: 'Returns the value of pi.',
    COUNTBLANK: 'Returns the number of empty cells in a specified range of cells.',
    EVEN: 'Rounds a positive number up and negative number down to the nearest even integer.',
    DECIMAL: 'Converts a text representation of a number in a given base into a decimal number.',
    DEGREES: 'Converts radians to degrees.',
    ADDRESS: 'Returns a cell reference as text, given specified row and column numbers.',
    TIME: 'Converts hours, minutes, seconds to the time formatted text.',
    CHAR: 'Returns the character from the specified number.',
    CODE: 'Returns the numeric code for the first character in a given string.',
    DOLLAR: 'Converts the number to currency formatted text.',
    SMALL: 'Returns the k-th smallest value in a given array.',
    LARGE: 'Returns the k-th largest value in a given array.',
    FACT: 'Returns the factorial of a number.',
    MEDIAN: 'Returns the median of the given set of numbers.',
    EDATE: 'Returns a date with given number of months before or after the specified date.',
    DATEVALUE: 'Converts a date string into date value.',
    HOUR: 'Returns the number of hours in a specified time string.',
    SECOND: 'Returns the number of seconds in a specified time string.',
    MINUTE: 'Returns the number of minutes in a specified time string.',
    NOW: 'Returns the current date and time.',
    MONTH: 'Returns the number of months in a specified date string.',
    TODAY: 'Returns the current date as date value.',
    WEEKDAY: 'Returns the day of the week corresponding to a date.',
    AVERAGE: 'Calculates average for the series of numbers and/or cells excluding text.',
    AVERAGEIF: 'Calculates average for the cells based on specified criterion.',
    AVERAGEIFS: 'Calculates average for the cells based on specified conditions.',
    AVERAGEA: 'Calculates the average for the cells evaluating TRUE as 1, text and FALSE as 0.',
    COUNT: 'Counts the cells that contain numeric values in a range.',
    COUNTIF: 'Counts the cells based on specified condition.',
    COUNTIFS: 'Counts the cells based on specified conditions.',
    COUNTA: 'Counts the cells that contains values in a range.',
    MIN: 'Returns the smallest number of the given arguments.',
    MAX: 'Returns the largest number of the given arguments.',
    DATE: 'Returns the date based on given year, month, and day.',
    DAY: 'Returns the day from the given date.',
    DAYS: 'Returns the number of days between two dates.',
    IF: 'Returns value based on the given expression.',
    IFS: 'Returns value based on the given multiple expressions.',
    CalculateAND: 'Returns TRUE if all the arguments are TRUE, otherwise returns FALSE.',
    CalculateOR: 'Returns TRUE if any of the arguments are TRUE, otherwise returns FALSE.',
    IFERROR: 'Returns value if no error found else it will return specified value.',
    CHOOSE: 'Returns a value from list of values, based on index number.',
    INDEX: 'Returns a value of the cell in a given range based on row and column number.',
    FIND: 'Returns the position of a string within another string, which is case sensitive.',
    TEXT: 'Converts a value to text in specified number format.',
    CONCATENATE: 'Combines two or more strings together.',
    CONCAT: 'Concatenates a list or a range of text strings.',
    SUBTOTAL: 'Returns subtotal for a range using the given function number.',
    RADIANS: 'Converts degrees into radians.',
    MATCH: 'Returns the relative position of a specified value in given range.',
    LN: 'Returns the natural logarithm of a number.',
    INTERCEPT: 'Calculates the point of the Y-intercept line via linear regression.',
    UNIQUE: 'Returns a unique values from a range or array',
    SLOPE: 'Returns the slope of the line from linear regression of the data points.',
    LOOKUP: 'Looks for a value in a one-row or one-column range, then returns a value from the same position in a second one-row or one-column range.',
    HLOOKUP: 'Looks for a value in the top row of the array of values and then returns a value in the same column from a row in the array that you specify.',
    VLOOKUP: 'Looks for a specific value in the first column of a lookup range and returns a corresponding value from a different column within the same row.',
    NOT: 'Returns the inverse of a given logical expression.',
    EOMONTH: 'Returns the last day of the month that is a specified number of months before or after an initially supplied start date.',
    SQRT: 'Returns the square root of a positive number.',
    ROUNDDOWN: 'Rounds a number down, toward zero.',
    RSQ: 'Returns the square of the Pearson product moment correlation coefficient based on data points in known_y\'s and known_x\'s.',
    DefineNameExists: 'This name already exists, try different name.',
    DefineNameInValid: 'The name that you entered is not valid.',
    CircularReference: 'When a formula refers to one or more circular references, this may result in an incorrect calculation.',
    OR: 'OR',
    AND: 'AND',
    CustomFilterDatePlaceHolder: 'Choose a date',
    CustomFilterPlaceHolder: 'Enter the value',
    CustomFilter: 'Custom Filter',
    Between: 'Between',
    DateTimeFilter: 'DateTime Filters',
    Undo: 'Undo',
    Redo: 'Redo',
    DateFilter: 'Date Filters',
    TextFilter: 'Text Filters',
    NumberFilter: 'Number Filters',
    ClearFilter: 'Clear Filter',
    NoResult: 'No Matches Found',
    FilterFalse: 'False',
    FilterTrue: 'True',
    Blanks: 'Blanks',
    SelectAll: 'Select All',
    GreaterThanOrEqual: 'Greater Than Or Equal',
    GreaterThan: 'Greater Than',
    LessThanOrEqual: 'Less Than Or Equal',
    LessThan: 'Less Than',
    NotEqual: 'Not Equal',
    Equal: 'Equal',
    Contains: 'Contains',
    NotContains: 'Does Not Contains',
    EndsWith: 'Ends With',
    NotEndsWith: 'Does Not End With',
    StartsWith: 'Starts With',
    NotStartsWith: 'Does Not Start With',
    IsEmpty: 'Empty',
    IsNotEmpty: 'Not Empty',
    ClearButton: 'Clear',
    FilterButton: 'Filter',
    CancelButton: 'Cancel',
    OKButton: 'OK',
    Search: 'Search',
    ProtectSheet: 'Protect Sheet',
    UnprotectSheet: 'Unprotect Sheet',
    SelectCells: 'Select locked cells',
    SelectUnlockedCells: 'Select unlocked cells',
    FormatCells: 'Format cells',
    FormatRows: 'Format rows',
    FormatColumns: 'Format columns',
    InsertLinks: 'Insert links',
    ProtectContent: 'Protect the contents of locked cells',
    ProtectAllowUser: ' Allow all users of this worksheet to:',
    EditAlert: 'The cell you\'re trying to change is protected. To make change, unprotect the sheet.',
    ReadonlyAlert: 'You are trying to modify a cell that is in read-only mode. To make changes, please disable the read-only status.',
    FiniteAlert: 'Finite mode is active: Cannot access the specified cell range outside the defined limits.',
    Alert: 'Alert',
    SearchWithin: 'Search within',
    SearchBy: 'Search by',
    Reference: 'Reference',
    DataValidation: 'Data Validation',
    CellRange: 'Cell Range',
    Allow: 'Allow',
    Data: 'Data',
    Minimum: 'Minimum',
    Maximum: 'Maximum',
    IgnoreBlank: 'Ignore blank',
    WholeNumber: 'Whole Number',
    Decimal: 'Decimal',
    Date: 'Date',
    TextLength: 'Text Length',
    List: 'List',
    NotBetween: 'Not Between',
    EqualTo: 'Equal To',
    NotEqualTo: 'Not Equal To',
    GreaterThanOrEqualTo: 'Greater Than Or Equal To',
    LessThanOrEqualTo: 'Less Than Or Equal To',
    InCellDropDown: 'In-cell-dropdown',
    Sources: 'Sources',
    Value: 'Value',
    Formula: 'Formula',
    Retry: 'Retry',
    DialogError: 'The list source must be a reference to single row or column.',
    NamedRangeError: 'A named range you specified cannot be found.',
    MinMaxError: 'The Maximum must be greater than or equal to the Minimum.',
    InvalidNumberError: 'Please enter a valid number.',
    InvalidFormula: 'Please enter a valid formula.',
    MoreValidation: 'This selection contains more than one validation. \n Erase current settings and continue?',
    FileNameError: 'A file name can\'t contain characters like \\ / : * ? " < > [ ] |',
    ListLengthError: 'The list values allows only upto 256 characters',
    ValidationError: 'This value doesn' + '\'' + 't match the data validation restrictions defined for the cell.',
    EmptyError: 'You must enter a value',
    ClearHighlight: 'Clear Highlight',
    HighlightInvalidData: 'Highlight Invalid Data',
    ClearValidation: 'Clear Validation',
    HighlightCellsRules: 'Highlight Cells Rules',
    CFEqualTo: 'Equal To',
    TextThatContains: 'Text that Contains',
    Save: 'Save',
    EmptyFileName: 'File name cannot be empty.',
    LargeName: 'The name is too long.',
    ADateOccuring: 'A Date Occuring',
    DuplicateValues: 'Duplicate Values',
    TopBottomRules: 'Top/Bottom Rules',
    Directional: 'Directional',
    Shapes: 'Shapes',
    Indicators: 'Indicators',
    Ratings: 'Ratings',
    Top10Items: 'Top 10 Items',
    Top10: 'Top 10',
    Bottom10Items: 'Bottom 10 Items',
    Bottom10: 'Bottom 10',
    AboveAverage: 'Above Average',
    BelowAverage: 'Below Average',
    FormatCellsGreaterThan: 'Format cells that are GREATER THAN:',
    FormatCellsLessThan: 'Format cells that are LESS THAN:',
    FormatCellsBetween: 'Format cells that are BETWEEN:',
    FormatCellsEqualTo: 'Format cells that are EQUAL TO:',
    FormatCellsThatContainTheText: 'Format cells that contain the text:',
    FormatCellsThatContainADateOccurring: 'Format cells that contain a date occurring:',
    FormatCellsDuplicate: 'Format cells that contain:',
    FormatCellsTop: 'Format cells that rank in the TOP:',
    FormatCellsBottom: 'Format cells that rank in the BOTTOM:',
    FormatCellsAbove: 'Format cells that are ABOVE AVERAGE:',
    FormatCellsBelow: 'Format cells that are BELOW AVERAGE:',
    With: 'with',
    DataBars: 'Data Bars',
    ColorScales: 'Color Scales',
    IconSets: 'Icon Sets',
    ClearRules: 'Clear Rules',
    SelectedCells: 'Clear Rules from Selected Cells',
    EntireSheet: 'Clear Rules from Entire Sheet',
    ISNUMBER: 'Returns true when the value parses as a numeric value.',
    ROUND: 'Rounds a number to a specified number of digits.',
    GEOMEAN: 'Returns the geometric mean of an array or range of positive data.',
    POWER: 'Returns the result of a number raised to power',
    LOG: 'Returns the logarithm of a number to the base that you specify.',
    TRUNC: 'Returns the truncated value of a number to a specified number of decimal places.',
    EXP: 'Returns e raised to the power of the given number.',
    Clear: 'Clear',
    ClearContents: 'Clear Contents',
    ClearAll: 'Clear All',
    ClearFormats: 'Clear Formats',
    ClearHyperlinks: 'Clear Hyperlinks',
    LightRedFillWithDarkRedText: 'Light Red Fill with Dark Red Text',
    YellowFillWithDarkYellowText: 'Yellow Fill with Dark Yellow Text',
    GreenFillWithDarkGreenText: 'Green Fill with Dark Green Text',
    RedFill: 'Red Fill',
    RedText: 'Red Text',
    Duplicate: 'Duplicate',
    Unique: 'Unique',
    And: 'and',
    WebPage: 'Web Page',
    ThisDocument: 'This Document',
    DisplayText: 'Display Text',
    Url: 'URL',
    CellReference: 'Cell Reference',
    DefinedNames: 'Defined Names',
    EnterTheTextToDisplay: 'Enter the text to display',
    EnterTheUrl: 'Enter the URL',
    Image: 'Image',
    ConditionalFormatting: 'Conditional Formatting',
    BlueDataBar: 'Blue Data Bar',
    GreenDataBar: 'Green Data Bar',
    RedDataBar: 'Red Data Bar',
    OrangeDataBar: 'Orange Data Bar',
    LightBlueDataBar: 'Light blue Data Bar',
    PurpleDataBar: 'Purple Data Bar',
    GYRColorScale: 'Green - Yellow - Red Color Scale',
    RYGColorScale: 'Red - Yellow - Green Color Scale',
    GWRColorScale: 'Green - White - Red Color Scale',
    RWGColorScale: 'Red - White - Green Color Scale',
    BWRColorScale: 'Blue - White - Red Color Scale',
    RWBColorScale: 'Red - White - Blue Color Scale',
    WRColorScale: 'White - Red Color Scale',
    RWColorScale: 'Red - White Color Scale',
    GWColorScale: 'Green - White Color Scale',
    WGColorScale: 'White - Green Color Scale',
    GYColorScale: 'Green - Yellow Color Scale',
    YGColorScale: 'Yellow - Green Color Scale',
    ThreeArrowsColor: '3 Arrows (Colored)',
    ThreeArrowsGray: '3 Arrows (Gray)',
    ThreeTriangles: '3 Triangles',
    FourArrowsColor: '4 Arrows (Gray)',
    FourArrowsGray: '4 Arrows (Colored)',
    FiveArrowsColor: '5 Arrows (Gray)',
    FiveArrowsGray: '5 Arrows (Colored)',
    ThreeTrafficLights1: '3 Traffic Lights (Unrimmed)',
    ThreeTrafficLights2: '3 Traffic Lights (Rimmed)',
    ThreeSigns: '3 Signs',
    FourTrafficLights: '4 Traffic Lights',
    RedToBlack: 'Red To Black',
    ThreeSymbols1: '3 Symbols (Circled)',
    ThreeSymbols2: '3 Symbols (Uncircled)',
    ThreeFlags: '3 Flags',
    ThreeStars: '3 Stars',
    FourRatings: '4 Ratings',
    FiveQuarters: '5 Quarters',
    FiveRatings: '5 Ratings',
    FiveBoxes: '5 Boxes',
    Chart: 'Chart',
    Column: 'Column',
    Bar: 'Bar',
    Area: 'Area',
    Pie: 'Pie',
    Doughnut: 'Doughnut',
    PieAndDoughnut: 'Pie/Doughnut',
    Line: 'Line',
    LineMarker: 'Line with Markers',
    Radar: 'Radar',
    Scatter: 'Scatter',
    ChartDesign: 'Chart Design',
    ClusteredColumn: 'Clustered Column',
    StackedColumn: 'Stacked Column',
    StackedColumn100: '100% Stacked Column',
    ClusteredBar: 'Clustered Bar',
    StackedBar: 'Stacked Bar',
    StackedBar100: '100% Stacked Bar',
    StackedArea: 'Stacked Area',
    StackedArea100: '100% Stacked Area',
    StackedLine: 'Stacked Line',
    StackedLineMarker: 'Stacked Line with Markers',
    StackedLine100: '100% Stacked Line',
    StackedLine100Marker: '100% Stacked Line with Markers',
    AddChartElement: 'Add Chart Element',
    Axes: 'Axes',
    AxisTitle: 'Axis Title',
    ChartTitle: 'Chart Title',
    DataLabels: 'Data Labels',
    Gridlines: 'Gridlines',
    Legends: 'Legends',
    PrimaryHorizontal: 'Primary Horizontal',
    PrimaryVertical: 'Primary Vertical',
    None: 'None',
    AboveChart: 'Above Chart',
    Center: 'Center',
    InsideEnd: 'Inside End',
    InsideBase: 'Inside Base',
    OutsideEnd: 'OutSide End',
    PrimaryMajorHorizontal: 'Primary Major Horizontal',
    PrimaryMajorVertical: 'Primary Major Vertical',
    PrimaryMinorHorizontal: 'Primary Minor Horizontal',
    PrimaryMinorVertical: 'Primary Minor Vertical',
    Right: 'Right',
    Left: 'Left',
    Bottom: 'Bottom',
    Top: 'Top',
    SwitchRowColumn: 'Switch Row/Column',
    ChartTheme: 'Chart Theme',
    ChartType: 'Chart Type',
    Material: 'Material',
    Fabric: 'Fabric',
    Bootstrap: 'Bootstrap',
    HighContrastLight: 'HighContrast Light',
    MaterialDark: 'Material Dark',
    FabricDark: 'Fabric Dark',
    HighContrast: 'HighContrast',
    BootstrapDark: 'Bootstrap Dark',
    Bootstrap4: 'Bootstrap4',
    Bootstrap5Dark: 'Bootstrap5 Dark',
    Bootstrap5: 'Bootstrap5',
    Tailwind: 'Tailwind',
    TailwindDark: 'Tailwind Dark',
    Tailwind3: 'Tailwind 3',
    Tailwind3Dark: 'Tailwind 3 Dark',
    VerticalAxisTitle: 'Vertical Axis Title',
    HorizontalAxisTitle: 'Horizontal Axis Title',
    EnterTitle: 'Enter Title',
    ProtectWorkbook: 'Protect Workbook',
    Password: 'Password (optional):',
    EnterThePassword: 'Enter the password',
    ConfirmPassword: 'Confirm Password',
    EnterTheConfirmPassword: 'Re-enter your password',
    PasswordAlert: 'Confirmation password is not identical',
    UnprotectWorkbook: 'Unprotect Workbook',
    UnprotectPasswordAlert: 'The password you supplied is not correct.',
    IncorrectPassword: 'Unable to open the file or worksheet with the given password',
    PasswordAlertMsg: 'Please enter the password',
    ConfirmPasswordAlertMsg: 'Please enter the confirm password',
    IsProtected: 'is protected',
    PDF: 'PDF Document',
    AutoFillMergeAlertMsg: 'To do this, all the merged cells need to be the same size.',
    FillSeries: 'Fill Series',
    CopyCells: 'Copy Cells',
    FillFormattingOnly: 'Fill Formatting Only',
    FillWithoutFormatting: 'Fill Without Formatting',
    CustomFormat: 'Custom Number Formats',
    CustomFormatPlaceholder: 'Type or Select a custom format',
    CustomFormatTypeList: 'Type',
    UnprotectWorksheet: 'Unprotect Sheet',
    ReEnterPassword: 'Re-enter password to proceed',
    SheetPassword: 'Password to unprotect sheet:',
    Fluent: 'Fluent',
    FluentDark: 'Fluent Dark',
    Fluent2: 'Fluent 2',
    Fluent2Dark: 'Fluent 2 Dark',
    Fluent2HighContrast: 'Fluent 2 HighContrast',
    Material3: 'Material 3',
    Material3Dark: 'Material 3 Dark',
    CellReferenceTypoError: 'We found a typo in your cell reference. Do you want to correct this reference as follows?',
    InvalidFormulaError: 'We found that you typed a formula which is invalid.',
    InvalidArguments: 'We found that you typed a formula with an invalid arguments.',
    EmptyExpression: 'We found that you typed a formula with an empty expression.',
    MismatchedParenthesis: 'We found that you typed a formula with one or more missing opening or closing parenthesis.',
    ImproperFormula: 'We found that you typed a formula which is improper.',
    WrongNumberOfArguments: 'We found that you typed a formula with a wrong number of arguments.',
    Requires3Arguments: 'We found that you typed a formula which requires 3 arguments.',
    MismatchedStringQuotes: 'We found that you typed a formula with a mismatched quotes.',
    FormulaCircularRef: 'We found that you typed a formula with a circular reference.',
    AddCurrentSelection: 'Add current selection to filter',
    ExternalWorkbook: 'An imported excel file contains an external workbook reference. Do you want to import that file?'
};

/**
 * The function used to update Dom using requestAnimationFrame.
 *
 * @param  {Function} fn - Function that contains the actual action
 * @returns {void}
 * @hidden
 */
function getUpdateUsingRaf(fn) {
    requestAnimationFrame(function () {
        fn();
    });
}
/**
 * The function used to remove the dom element children.
 *
 * @param  {Element} parent - Specify the parent
 * @returns {void} - The function used to get colgroup width based on the row index.
 * @hidden
 */
function removeAllChildren(parent) {
    while (parent.firstChild) {
        parent.removeChild(parent.firstChild);
    }
}
/**
 * The function used to get colgroup width based on the row index.
 *
 * @param  {number} index - Specify the index
 * @returns {number} - The function used to get colgroup width based on the row index.
 * @hidden
 */
function getColGroupWidth(index) {
    var width = 30;
    if (index.toString().length > 3) {
        width = index.toString().length * 10;
    }
    return width;
}
var scrollAreaWidth = null;
var textLineHeight = 1.24;
/**
 * @hidden
 * @returns {number} - To get scrollbar width
 */
function getScrollBarWidth() {
    if (scrollAreaWidth !== null) {
        return scrollAreaWidth;
    }
    var htmlDivNode = document.createElement('div');
    var result = 0;
    htmlDivNode.style.cssText = 'width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;';
    document.body.appendChild(htmlDivNode);
    result = (htmlDivNode.offsetWidth - htmlDivNode.clientWidth) | 0;
    document.body.removeChild(htmlDivNode);
    return scrollAreaWidth = result;
}
/**
 * @hidden
 * @param {HTMLElement} element - Specify the element.
 * @param {string[]} classList - Specify the classList
 * @param {number} scaleY - Specify the scaleY value.
 * @returns {number} - get Siblings Height
 */
function getSiblingsHeight(element, classList, scaleY) {
    if (scaleY === void 0) { scaleY = 1; }
    classList = classList || ['e-ribbon', 'e-formula-bar-panel', 'e-sheet-tab-panel', 'e-header-toolbar'];
    var previous = getHeightFromDirection(element, 'previous', classList, scaleY);
    var next = getHeightFromDirection(element, 'next', classList, scaleY);
    return previous + next;
}
/**
 * @param {HTMLElement} element - Specify the element.
 * @param {string} direction - Specify the direction.
 * @param {string[]} classList - Specify the classList.
 * @param {number} scaleY - Specify the scaleY value.
 * @returns {number} - get Height FromDirection
 */
function getHeightFromDirection(element, direction, classList, scaleY) {
    var sibling = (element)[direction + 'ElementSibling'];
    var result = 0;
    while (sibling) {
        if (classList.some(function (value) { return sibling.classList.contains(value); })) {
            result += (sibling.getBoundingClientRect().height * scaleY);
        }
        sibling = (sibling)[direction + 'ElementSibling'];
    }
    return result;
}
/**
 * @hidden
 * @param {Spreadsheet} context - Specify the spreadsheet.
 * @param {number[]} range - Specify the range.
 * @param {boolean} isModify - Specify the boolean value.
 * @returns {boolean} - Returns boolean value.
 */
function inView(context, range, isModify) {
    if (context.scrollSettings.enableVirtualization) {
        var sheet = context.getActiveSheet();
        var frozenRow = context.frozenRowCount(sheet);
        var frozenCol = context.frozenColCount(sheet);
        var topIdx = context.viewport.topIndex + frozenRow;
        var leftIdx = context.viewport.leftIndex + frozenCol;
        var bottomIdx = context.viewport.bottomIndex;
        var rightIdx = context.viewport.rightIndex;
        if (sheet.frozenRows || sheet.frozenColumns) {
            if (context.insideViewport(range[0], range[1]) || context.insideViewport(range[2], range[3])) {
                return true;
            }
        }
        else if (topIdx <= range[0] && bottomIdx >= range[2] && leftIdx <= range[1] && rightIdx >= range[3]) {
            return true;
        }
        var inView_1 = false;
        if (isModify) {
            if (range[0] < topIdx && range[2] < topIdx || range[0] > bottomIdx && range[2] > bottomIdx) {
                return false;
            }
            else {
                if (range[0] < topIdx && range[2] > topIdx && range[0] >= frozenRow) {
                    range[0] = topIdx;
                    inView_1 = true;
                }
                if (range[2] > bottomIdx) {
                    range[2] = bottomIdx;
                    inView_1 = true;
                }
            }
            if (range[1] < leftIdx && range[3] < leftIdx || range[1] > rightIdx && range[3] > rightIdx) {
                return false;
            }
            else {
                if (range[1] < leftIdx && range[3] > leftIdx && range[1] >= frozenCol) {
                    range[1] = leftIdx;
                    inView_1 = true;
                }
                if (range[3] > rightIdx) {
                    range[3] = rightIdx;
                    inView_1 = true;
                }
            }
        }
        return inView_1;
    }
    else {
        return true;
    }
}
/**
 * To get the top left cell position in viewport.
 *
 * @hidden
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {number[]} indexes - Specify the indexes.
 * @param {number} frozenRow - Specify the frozen row.
 * @param {number} frozenColumn - Specify the frozen column
 * @param {number} freezeScrollHeight - Specify the freeze scroll height
 * @param {number} freezeScrollWidth - Specify the freeze scroll width
 * @param {number} rowHdrWidth - Specify the row header width
 * @param {boolean} isOverlay - Specify the overlay.
 * @returns {number} - To get the top left cell position in viewport.
 */
function getCellPosition(sheet, indexes, frozenRow, frozenColumn, freezeScrollHeight, freezeScrollWidth, rowHdrWidth, isOverlay) {
    var i;
    var offset = { left: { idx: 0, size: 0 }, top: { idx: 0, size: 0 } };
    var top = offset.top.size;
    var left = offset.left.size;
    for (i = offset.top.idx; i < indexes[0]; i++) {
        if (frozenRow) {
            if (frozenRow - 1 < indexes[0] && i < frozenRow) {
                continue;
            }
        }
        top += getRowHeight(sheet, i, !isOverlay);
    }
    for (i = offset.left.idx; i < indexes[1]; i++) {
        if (frozenColumn && frozenColumn - 1 < indexes[1] && i < frozenColumn) {
            continue;
        }
        left += getColumnWidth(sheet, i, null, !isOverlay);
    }
    if (frozenRow && indexes[0] < frozenRow) {
        if (sheet.showHeaders) {
            top += 30;
        }
        if (freezeScrollHeight) {
            top -= freezeScrollHeight;
        }
    }
    if (frozenColumn && indexes[1] < frozenColumn) {
        if (sheet.showHeaders) {
            left += rowHdrWidth ? rowHdrWidth : 30;
        }
        if (freezeScrollWidth) {
            left -= freezeScrollWidth;
        }
    }
    return { top: top, left: left };
}
/**
 * @param {Spreadsheet} parent - Specify the parent
 * @param {HTMLElement} ele - Specify the element
 * @param {number[]} range - Specify the range
 * @param {string} cls - Specify the class name
 * @param {boolean} preventAnimation - Specify the preventAnimation.
 * @param {boolean} isMultiRange - Specify the multi range selection.
 * @param {boolean} removeCls - Specify to remove the class from selection.
 * @returns {void} - To set the position
 * @hidden
 */
function setPosition(parent, ele, range, cls, preventAnimation, isMultiRange, removeCls) {
    if (cls === void 0) { cls = 'e-selection'; }
    var sheet = parent.getActiveSheet();
    if (sheet.frozenRows || sheet.frozenColumns) {
        var content_1;
        var frozenRow_1 = parent.frozenRowCount(sheet);
        var frozenCol_1 = parent.frozenColCount(sheet);
        if (cls === 'e-active-cell') {
            if (range[0] < frozenRow_1 || range[1] < frozenCol_1) {
                ele.style.display = 'none';
                content_1 = range[0] < frozenRow_1 && range[1] < frozenCol_1 ? parent.getSelectAllContent() :
                    (range[0] < frozenRow_1 ? parent.getColumnHeaderContent() : parent.getRowHeaderContent());
                var rangeEle = content_1.querySelector('.' + cls);
                if (!rangeEle) {
                    rangeEle = ele.cloneNode(true);
                    content_1.appendChild(rangeEle);
                }
                ele = rangeEle;
                locateElem(parent, ele, range, sheet, parent.enableRtl, frozenRow_1, frozenCol_1, preventAnimation, true, parent.viewport.beforeFreezeHeight, parent.viewport.beforeFreezeWidth, parent.sheetModule.colGroupWidth);
            }
            else {
                locateElem(parent, ele, range, sheet, parent.enableRtl, frozenRow_1, frozenCol_1, preventAnimation);
            }
            if (ele.style.display) {
                ele.style.display = '';
            }
            removeRangeEle(parent.getSelectAllContent(), content_1, 'e-active-cell');
            removeRangeEle(parent.getColumnHeaderContent(), content_1, 'e-active-cell');
            removeRangeEle(parent.getRowHeaderContent(), content_1, 'e-active-cell');
        }
        else if (cls === 'e-autofill') {
            var contentElem = void 0;
            var freezeRow = parent.frozenRowCount(sheet);
            var freezeCol = parent.frozenColCount(sheet);
            if (range[0] < freezeRow || range[1] < freezeCol) {
                ele.style.display = 'none';
                contentElem = range[0] < freezeRow && range[1] < freezeCol ? parent.getSelectAllContent() :
                    (range[0] < freezeRow ? parent.getColumnHeaderContent() : parent.getRowHeaderContent());
                var rangeEle = contentElem.querySelector('.' + cls);
                if (!rangeEle) {
                    rangeEle = ele.cloneNode(true);
                    contentElem.appendChild(rangeEle);
                }
                ele = rangeEle;
                locateElem(parent, ele, range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, true, parent.viewport.beforeFreezeHeight, parent.viewport.beforeFreezeWidth, parent.sheetModule.colGroupWidth, 'e-autofill');
            }
            else {
                locateElem(parent, ele, range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-autofill');
            }
            if (ele.style.display) {
                ele.style.display = '';
            }
            removeRangeEle(parent.getSelectAllContent(), contentElem, 'e-autofill');
            removeRangeEle(parent.getColumnHeaderContent(), contentElem, 'e-autofill');
            removeRangeEle(parent.getRowHeaderContent(), contentElem, 'e-autofill');
        }
        else if (cls === 'e-filloption') {
            var contentElem = void 0;
            var freezeRow = parent.frozenRowCount(sheet);
            var freezeCol = parent.frozenColCount(sheet);
            if ((range[0] < freezeRow || range[1] < freezeCol)) {
                if (range[3] + 1 === freezeCol && range[2] + 1 > freezeRow) {
                    locateElem(parent, parent.getMainContent().querySelector('.e-filloption'), range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-filloption', true, { left: -4 });
                }
                else if (range[2] + 1 === freezeRow && range[3] + 1 > freezeCol) {
                    locateElem(parent, parent.getMainContent().querySelector('.e-filloption'), range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-filloption', true, { top: -4 });
                }
                else if (range[3] + 1 === freezeCol && range[2] + 1 < freezeRow) { // for upper side
                    contentElem = parent.getColumnHeaderContent();
                    var rangeElem = contentElem.querySelector('.' + cls);
                    if (!rangeElem) {
                        parent.notify(getautofillDDB, { id: parent.element.id + '_autofilloptionbtn', appendElem: contentElem });
                    }
                    ele = parent.autofillModule.autoFillDropDown.element;
                    locateElem(parent, ele, range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-filloption', true, { left: -4 });
                }
                else if (range[2] + 1 === freezeRow && range[3] + 1 === freezeCol) { // corner cell
                    locateElem(parent, parent.getMainContent().querySelector('.e-filloption'), range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-filloption', true, { top: -4, left: -4 });
                }
                else {
                    contentElem = range[0] < freezeRow && range[1] < freezeCol ? parent.getSelectAllContent() :
                        (range[0] < freezeRow ? parent.getColumnHeaderContent() : parent.getRowHeaderContent());
                    var rangeEle = contentElem.querySelector('.' + cls);
                    if (!rangeEle) {
                        parent.notify(getautofillDDB, { id: parent.element.id + '_autofilloptionbtn', appendElem: contentElem });
                    }
                    ele = parent.autofillModule.autoFillDropDown.element;
                    locateElem(parent, ele, range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, true, parent.viewport.
                        beforeFreezeHeight, parent.viewport.beforeFreezeWidth, parent.sheetModule.colGroupWidth, 'e-filloption', true);
                }
            }
            else {
                locateElem(parent, parent.getMainContent().querySelector('.e-filloption'), range, sheet, parent.enableRtl, freezeRow, freezeCol, preventAnimation, false, 0, 0, 0, 'e-filloption', true);
            }
            if (ele.style.display) {
                ele.style.display = '';
            }
            removeRangeEle(parent.getSelectAllContent(), contentElem, 'e-filloption');
            removeRangeEle(parent.getColumnHeaderContent(), contentElem, 'e-filloption');
            removeRangeEle(parent.getRowHeaderContent(), contentElem, 'e-filloption');
        }
        else {
            var swapRange = getSwapRange(range);
            if (swapRange[0] < frozenRow_1 || swapRange[1] < frozenCol_1) {
                if (ele && !ele.classList.contains('e-multi-range')) {
                    ele.classList.add('e-hide');
                }
                var ranges_1 = [];
                if (swapRange[0] < frozenRow_1 && swapRange[1] < frozenCol_1) {
                    if (swapRange[2] < frozenRow_1 && swapRange[3] < frozenCol_1) {
                        ranges_1.push(range);
                        if (!isMultiRange) {
                            removeRangeEle(parent.getColumnHeaderContent(), content_1, cls, true);
                            removeRangeEle(parent.getRowHeaderContent(), content_1, cls, true);
                        }
                    }
                    else if (swapRange[2] > frozenRow_1 - 1) {
                        if (swapRange[3] < frozenCol_1) {
                            if (!isMultiRange) {
                                removeRangeEle(parent.getColumnHeaderContent(), content_1, cls, true);
                            }
                            ranges_1.push([swapRange[0], swapRange[1], frozenRow_1 - 1, swapRange[3]]);
                            ranges_1.push([frozenRow_1, swapRange[1], swapRange[2], swapRange[3]]);
                        }
                        else {
                            ranges_1.push([swapRange[0], swapRange[1], frozenRow_1 - 1, frozenCol_1 - 1]);
                            ranges_1.push([frozenRow_1, swapRange[1], swapRange[2], frozenCol_1 - 1]);
                            ranges_1.push([swapRange[0], frozenCol_1, frozenRow_1 - 1, swapRange[3]]);
                            ranges_1.push([frozenRow_1, frozenCol_1, swapRange[2], swapRange[3]]);
                        }
                    }
                    else {
                        if (swapRange[2] < frozenRow_1) {
                            ranges_1.push([swapRange[0], swapRange[1], swapRange[2], frozenCol_1 - 1]);
                            ranges_1.push([swapRange[0], frozenCol_1, swapRange[2], swapRange[3]]);
                            if (!isMultiRange) {
                                removeRangeEle(parent.getRowHeaderContent(), content_1, cls, true);
                            }
                        }
                        else {
                            ranges_1.push([frozenRow_1, swapRange[1], swapRange[2], frozenCol_1 - 1]);
                            ranges_1.push([swapRange[0], swapRange[1], frozenRow_1 - 1, frozenCol_1 - 1]);
                            ranges_1.push([frozenRow_1, frozenCol_1, swapRange[2], swapRange[3]]);
                            ranges_1.push([swapRange[0], frozenCol_1, frozenRow_1 - 1, swapRange[3]]);
                        }
                    }
                }
                else if (swapRange[0] < frozenRow_1) {
                    if (swapRange[2] < frozenRow_1) {
                        ranges_1.push(range);
                        if (!isMultiRange) {
                            removeRangeEle(parent.getRowHeaderContent(), content_1, cls, true);
                        }
                    }
                    else {
                        ranges_1.push([swapRange[0], swapRange[1], frozenRow_1 - 1, swapRange[3]]);
                        ranges_1.push([frozenRow_1, swapRange[1], swapRange[2], swapRange[3]]);
                        if (!isMultiRange) {
                            removeRangeEle(parent.getSelectAllContent(), content_1, cls, true);
                            removeRangeEle(parent.getRowHeaderContent(), content_1, cls, true);
                        }
                    }
                }
                else {
                    if (swapRange[3] < frozenCol_1) {
                        ranges_1.push(range);
                        if (!isMultiRange) {
                            removeRangeEle(parent.getSelectAllContent(), content_1, cls, true);
                        }
                    }
                    else {
                        ranges_1.push([swapRange[0], swapRange[1], swapRange[2], frozenCol_1 - 1]);
                        ranges_1.push([swapRange[0], frozenCol_1, swapRange[2], swapRange[3]]);
                        if (!isMultiRange) {
                            removeRangeEle(parent.getSelectAllContent(), content_1, cls, true);
                            removeRangeEle(parent.getColumnHeaderContent(), content_1, cls, true);
                        }
                    }
                }
                var removeEle_1;
                ranges_1.forEach(function (rng) {
                    var zIndex;
                    if (rng[2] < frozenRow_1 && rng[3] < frozenCol_1) {
                        content_1 = parent.getSelectAllContent();
                    }
                    else {
                        if (frozenRow_1 || frozenCol_1) {
                            var selectAllEle = parent.getSelectAllContent();
                            if (selectAllEle) {
                                zIndex = selectAllEle.style.zIndex;
                            }
                        }
                        if (rng[2] < frozenRow_1) {
                            content_1 = parent.getColumnHeaderContent();
                        }
                        else if (rng[3] < frozenCol_1) {
                            content_1 = parent.getRowHeaderContent();
                        }
                        else {
                            content_1 = parent.getMainContent();
                            if (frozenRow_1 && !zIndex) {
                                var colHdrEle = parent.getColumnHeaderContent();
                                if (colHdrEle) {
                                    zIndex = colHdrEle.style.zIndex;
                                }
                            }
                            if (frozenCol_1 && !zIndex) {
                                var rowHdrEle = parent.getRowHeaderContent();
                                if (rowHdrEle) {
                                    zIndex = rowHdrEle.style.zIndex;
                                }
                            }
                        }
                    }
                    var rangeEle;
                    if (cls === 'e-copy-indicator' || cls === 'e-range-indicator') {
                        rangeEle = ele.cloneNode(true);
                        content_1.appendChild(rangeEle);
                        if (frozenRow_1) {
                            if (rng[2] + 1 === frozenRow_1) {
                                ranges_1.forEach(function (subRng) {
                                    if (subRng !== rng) {
                                        removeEle_1 = rangeEle.getElementsByClassName('e-bottom')[0];
                                        if (removeEle_1 && subRng[0] === frozenRow_1) {
                                            detach(removeEle_1);
                                        }
                                    }
                                });
                            }
                            if (rng[0] === frozenRow_1 && content_1.parentElement.classList.contains('e-main-panel')) {
                                ranges_1.forEach(function (subRng) {
                                    if (subRng !== rng) {
                                        removeEle_1 = rangeEle.getElementsByClassName('e-top')[0];
                                        if (removeEle_1 && subRng[2] + 1 === frozenRow_1) {
                                            detach(removeEle_1);
                                        }
                                    }
                                });
                            }
                        }
                        if (frozenCol_1) {
                            if (rng[3] + 1 === frozenCol_1) {
                                ranges_1.forEach(function (subRng) {
                                    if (subRng !== rng) {
                                        removeEle_1 = rangeEle.getElementsByClassName('e-right')[0];
                                        if (removeEle_1 && subRng[1] === frozenCol_1) {
                                            detach(removeEle_1);
                                        }
                                    }
                                });
                            }
                            if (rng[1] === frozenCol_1 && (content_1.classList.contains('e-sheet-content') || content_1.classList.contains('e-column-header'))) {
                                ranges_1.forEach(function (subRng) {
                                    if (subRng !== rng) {
                                        removeEle_1 = rangeEle.getElementsByClassName('e-left')[0];
                                        if (removeEle_1 && subRng[3] + 1 === frozenCol_1) {
                                            detach(removeEle_1);
                                        }
                                    }
                                });
                            }
                        }
                    }
                    else {
                        rangeEle = content_1.querySelector('.' + cls);
                        if (!rangeEle) {
                            rangeEle = ele.cloneNode(true);
                            if (isMultiRange && !rangeEle.classList.contains('e-multi-range')) {
                                rangeEle.classList.add('e-multi-range');
                            }
                            content_1.appendChild(rangeEle);
                        }
                        if (removeCls) {
                            rangeEle.classList.remove(cls);
                        }
                    }
                    if (frozenRow_1 || frozenCol_1) {
                        if (zIndex) {
                            rangeEle.style.zIndex = zIndex;
                        }
                        else if (rangeEle.style.zIndex) {
                            rangeEle.style.zIndex = '';
                        }
                    }
                    locateElem(parent, rangeEle, rng, sheet, parent.enableRtl, frozenRow_1, frozenCol_1, preventAnimation, false, parent.viewport.beforeFreezeHeight, parent.viewport.beforeFreezeWidth, parent.sheetModule.colGroupWidth);
                    if (rangeEle.classList.contains('e-hide')) {
                        rangeEle.classList.remove('e-hide');
                    }
                });
            }
            else {
                if (!isMultiRange) {
                    removeRangeEle(parent.getSelectAllContent(), null, cls, true);
                    removeRangeEle(parent.getColumnHeaderContent(), null, cls, true);
                    removeRangeEle(parent.getRowHeaderContent(), null, cls, true);
                }
                locateElem(parent, ele, range, sheet, parent.enableRtl, frozenRow_1, frozenCol_1, preventAnimation);
                if (cls === 'e-range-indicator' || !parent.getMainContent().querySelector('.' + cls)) {
                    parent.getMainContent().appendChild(ele);
                }
                if (ele.classList.contains('e-hide')) {
                    ele.classList.remove('e-hide');
                }
                if (removeCls) {
                    ele.classList.remove(cls);
                }
            }
        }
    }
    else {
        var promise = locateElem(parent, ele, range, sheet, parent.enableRtl, 0, 0, preventAnimation);
        if (ele && !parent.getMainContent().querySelector('.' + cls)) {
            parent.getMainContent().appendChild(ele);
        }
        return promise;
    }
}
/**
 * @param {Element} content - Specify the content element.
 * @param {HTMLElement} checkEle - Specify the element.
 * @param {string} cls - Specify the class name.
 * @param {string} isSelection - Specify the selection element.
 * @param {string} removeCls - Specify to remove class from element.
 * @returns {void} - remove element with given range
 */
function removeRangeEle(content, checkEle, cls, isSelection, removeCls) {
    if (isSelection || content !== checkEle) {
        if (removeCls) {
            var collection = content.querySelectorAll('.' + cls);
            var i = 0;
            while (i < collection.length) {
                collection[i].classList.remove(cls);
                i++;
            }
        }
        else {
            var ele = content.querySelector('.' + cls);
            if (ele && !ele.classList.contains('e-multi-range')) {
                detach(ele);
            }
        }
    }
}
/**
 * Position element with given range
 *
 * @hidden
 * @param {Spreadsheet} parent - Specify the parent.
 * @param {HTMLElement} ele - Specify the element.
 * @param {number[]} range - specify the range.
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {boolean} isRtl - Specify the boolean value.
 * @param {number} frozenRow - Specidy the frozen row.
 * @param {number} frozenColumn - Specify the frozen column
 * @param {boolean} preventAnimation - Specify the preventAnimation.
 * @param {boolean} isActiveCell - Specidy the boolean value.
 * @param {number} freezeScrollHeight - Specify the freeze scroll height
 * @param {number} freezeScrollWidth - Specify the freeze scroll width
 * @param {number} rowHdrWidth - Specify the row header width
 * @param {number} cls - Specify the class
 * @param {number} isFillOptShow - Specify the fill option
 * @param {number} freezeFillOpt - Specifies the fill option
 * @param {number} freezeFillOpt.top - Specifies the fill option
 * @param {number} freezeFillOpt.left - Specifies the fill option
 * @returns {void} - Position element with given range
 */
function locateElem(parent, ele, range, sheet, isRtl, frozenRow, frozenColumn, preventAnimation, isActiveCell, freezeScrollHeight, freezeScrollWidth, rowHdrWidth, cls, isFillOptShow, freezeFillOpt) {
    var swapRange = getSwapRange(range);
    var cellPosition = getCellPosition(sheet, swapRange, frozenRow, frozenColumn, freezeScrollHeight, freezeScrollWidth, rowHdrWidth);
    var startIndex = [skipHiddenIdx(sheet, 0, true), skipHiddenIdx(sheet, 0, true, 'columns')];
    var height;
    var width;
    if (parent.scrollSettings.isFinite) {
        height = swapRange[0] >= sheet.rowCount ? 0 : getRowsHeight(sheet, swapRange[0], swapRange[2] < sheet.rowCount ? swapRange[2] : sheet.rowCount - 1, true);
        width = swapRange[1] >= sheet.colCount ? 0 : getColumnsWidth(sheet, swapRange[1], swapRange[3] < sheet.colCount ? swapRange[3] : sheet.colCount - 1, true);
    }
    else {
        height = getRowsHeight(sheet, swapRange[0], swapRange[2], true);
        width = getColumnsWidth(sheet, swapRange[1], swapRange[3], true);
    }
    var isRowSelected = (swapRange[1] === 0 && swapRange[3] === sheet.colCount - 1);
    var isColSelected = (swapRange[0] === 0 && swapRange[2] === sheet.rowCount - 1);
    var top = 0;
    var tdiff = -5;
    var ldiff = -5;
    var left = 0;
    var otdiff = 6;
    var oldiff = 6;
    if (isNullOrUndefined(cls)) {
        var attrs = {
            'top': (swapRange[0] === startIndex[0] ? cellPosition.top : cellPosition.top - getDPRValue(1)) + 'px',
            'height': height && height + (swapRange[0] === startIndex[0] ? 0 : getDPRValue(1)) + 'px',
            'width': width && width + (swapRange[1] === startIndex[1] ? 0 : getDPRValue(1)) + (isActiveCell
                && frozenColumn && swapRange[1] < frozenColumn && swapRange[3] >= frozenColumn ? 1 : 0) + 'px'
        };
        attrs[isRtl ? 'right' : 'left'] = (swapRange[1] === startIndex[1] ? cellPosition.left : cellPosition.left - 1) + 'px';
        if (ele) {
            var promise = setStyleAttribute([{ element: ele, attrs: attrs }], preventAnimation);
            return promise;
        }
    }
    else {
        if (isRowSelected) {
            tdiff = -5;
            ldiff = -2;
            otdiff = 6;
            oldiff = 3;
        }
        if (isColSelected) {
            ldiff = -5;
            tdiff = 0;
            otdiff = 1;
            oldiff = 6;
        }
        if (!isColSelected) {
            top += height;
        }
        if (!isRowSelected) {
            left += width;
        }
        top += Math.round(cellPosition.top) + tdiff;
        left += Math.round(cellPosition.left) + ldiff;
        var attrs = {};
        if (isFillOptShow) {
            removeClass([ele], 'e-hide');
            top = freezeFillOpt && freezeFillOpt.top ? freezeFillOpt.top : top;
            left = freezeFillOpt && freezeFillOpt.left ? freezeFillOpt.left : left;
            attrs = {
                'top': top + otdiff + 'px'
            };
            attrs[isRtl ? 'right' : 'left'] = left + oldiff + 'px';
            if (ele) {
                setStyleAttribute([{ element: ele, attrs: attrs }], preventAnimation);
            }
        }
        else {
            attrs = {
                'top': top + 'px'
            };
            attrs[isRtl ? 'right' : 'left'] = left + 'px';
            if (ele) {
                setStyleAttribute([{ element: ele, attrs: attrs }], preventAnimation);
            }
        }
    }
}
/**
 * To update element styles using request animation frame
 *
 * @hidden
 * @param {StyleType[]} styles - Specify the styles
 * @param {boolean} preventAnimation - Specify the preventAnimation.
 * @returns {void} - To update element styles using request animation frame
 */
function setStyleAttribute(styles, preventAnimation) {
    var promise = new Promise(function (resolve) {
        var setStyleFn = function () {
            styles.forEach(function (style) {
                setStyleAttribute$1(style.element, style.attrs);
                resolve();
            });
        };
        if (preventAnimation) {
            setStyleFn();
        }
        else {
            requestAnimationFrame(function () { return setStyleFn(); });
        }
    });
    return promise;
}
/**
 * @hidden
 * @returns {string} - to get Start Event
 */
function getStartEvent() {
    return (Browser.isPointer ? 'pointerdown' : 'mousedown touchstart');
}
/**
 * @hidden
 * @returns {string} - to get Move Event
 */
function getMoveEvent() {
    return (Browser.isPointer ? 'pointermove' : 'mousemove touchmove');
}
/**
 * @hidden
 * @returns {string} - Returns string value.
 */
function getEndEvent() {
    return (Browser.isPointer ? 'pointerup' : 'mouseup touchend');
}
/**
 * @hidden
 * @param {Event} e - To specify the event.
 * @returns {boolean} - Returns boolean value.
 */
function isTouchStart(e) {
    return e.type === 'touchstart' || (e.type === 'pointerdown' && e.pointerType === 'touch');
}
/**
 * @hidden
 * @param {Event} e - To specify the event.
 * @returns {boolean} - Returns boolean value.
 */
function isTouchMove(e) {
    return e.type === 'touchmove' || (e.type === 'pointermove' && e.pointerType === 'touch');
}
/**
 * @hidden
 * @param {Event} e - To specify the event.
 * @returns {boolean} - Returns boolean value.
 */
function isTouchEnd(e) {
    return e.type === 'touchend' || (e.type === 'pointerup' && e.pointerType === 'touch');
}
/**
 * @hidden
 * @param {TouchEvent | MouseEvent} e - To specify the mouse and touch event.
 * @returns {number} - To get client value
 */
function isMouseDown(e) {
    return e && (e.type === 'mousedown' || e.type === 'pointerdown');
}
/**
 * @param {MouseEvent} e - Specify the event.
 * @returns {boolean} - To get boolean value.
 * @hidden
 */
function isMouseMove(e) {
    return e && (e.type === 'mousemove' || e.type === 'pointermove');
}
/**
 * @param {MouseEvent} e - Specify the event.
 * @returns {boolean} - To get boolean value
 * @hidden
 */
function isMouseUp(e) {
    return e && (e.type === 'mouseup' || e.type === 'pointerup');
}
/**
 * @param {number} keyCode - Specify  the keycode.
 * @returns {boolean} - to get boolean value.
 * @hidden
 */
function isNavigationKey(keyCode) {
    return (keyCode === keyCodes.UP) || (keyCode === keyCodes.DOWN) || (keyCode === keyCodes.LEFT)
        || (keyCode === keyCodes.RIGHT);
}
/**
 * @param {MouseEvent | TouchEvent} e - To specify the mouse or touch event.
 * @returns {number} - To get client X value.
 * @hidden
 */
function getClientX(e) {
    return e.changedTouches ? e.changedTouches[0].clientX : e.clientX;
}
/**
 * @hidden
 * @param {MouseEvent | TouchEvent} e - To specify the mouse and touch event.
 * @returns {number} - To get client value
 */
function getClientY(e) {
    return e.changedTouches ? e.changedTouches[0].clientY : e.clientY;
}
/**
 * To get the `pageX` value from the mouse or touch event.
 *
 * @param {MouseEvent | TouchEvent} e - Specifies the mouse or touch event.
 * @returns {number} - Return the `pageX` value.
 * @hidden
 */
function getPageX(e) {
    return e.changedTouches ? e.changedTouches[0].pageX : e.pageX;
}
/**
 * To get the `pageY` value from the mouse or touch event.
 *
 * @param {MouseEvent | TouchEvent} e - Specifies the mouse or touch event.
 * @returns {number} - Return the `pageY` value.
 * @hidden
 */
function getPageY(e) {
    return e.changedTouches ? e.changedTouches[0].pageY : e.pageY;
}
/**
 * Get even number based on device pixel ratio
 *
 * @param {number} value - Specify the number
 * @param {boolean} preventDecrease - Specify the boolean value
 * @returns {number} - To get DPR value
 * @hidden
 */
function getDPRValue(value, preventDecrease) {
    if (window.devicePixelRatio % 1 > 0) {
        var pointValue = (value * window.devicePixelRatio) % 1;
        return value + (pointValue ? (((pointValue > 0.5 || preventDecrease) ? (1 - pointValue) : -1 * pointValue)
            / window.devicePixelRatio) : 0);
    }
    else {
        return value;
    }
}
var config = {
    role: 'role',
    selected: 'aria-selected',
    multiselectable: 'aria-multiselectable',
    busy: 'aria-busy',
    colcount: 'aria-colcount'
};
/**
 * @hidden
 * @param {HTMLElement} target - specify the target.
 * @param {IAriaOptions<boolean>} options - Specify the options.
 * @returns {void} -  to set Aria Options
 */
function setAriaOptions(target, options) {
    var props = Object.keys(options);
    props.forEach(function (name) {
        if (target) {
            target.setAttribute(config["" + name], options["" + name]);
        }
    });
}
/**
 * @hidden
 * @param {HTMLElement} element - specify the element.
 * @param {Object} component - Specify the component.
 * @returns {void} -  to destroy the component.
 */
function destroyComponent(element, component) {
    if (element) {
        var compObj = getComponent(element, component);
        if (compObj) {
            compObj.destroy();
        }
    }
}
/**
 * @hidden
 * @param {number} idx - Specify the index
 * @param {number} index - Specify the index
 * @param {string} value - Specify the value.
 * @param {boolean} isCol - Specify the boolean value.
 * @param {Spreadsheet} parent - Specify the parent.
 * @returns {void} - To set resize.
 */
function setResize(idx, index, value, isCol, parent) {
    var curEle;
    var curEleH;
    var curEleC;
    var preEle;
    var preEleH;
    var preEleC;
    var nxtEle;
    var nxtEleH;
    var nxtEleC;
    var sheet = parent.getActiveSheet();
    var frozenRow = parent.frozenRowCount(sheet);
    var frozenCol = parent.frozenColCount(sheet);
    if (isCol) {
        var header = idx < frozenCol ? parent.getSelectAllContent() : parent.getColumnHeaderContent();
        curEle = header.getElementsByTagName('th')[index];
        curEleH = header.getElementsByTagName('col')[index];
        curEleC = (idx < frozenCol ? parent.getRowHeaderContent() : parent.getMainContent()).getElementsByTagName('col')[index];
    }
    else {
        curEle = curEleH = frozenRow || frozenCol ? parent.getRow(idx, null, frozenCol - 1) :
            parent.getRow(idx, parent.getRowHeaderTable());
        curEleH.style.height = parseInt(value, 10) > 0 ? getDPRValue(parseInt(value, 10)) + 'px' : '2px';
        curEleC = parent.getRow(idx, null, frozenCol);
        curEleC.style.height = parseInt(value, 10) > 0 ? getDPRValue(parseInt(value, 10)) + 'px' : '0px';
        var hdrFntSize = void 0;
        if (sheet.showHeaders) {
            var hdrRow = parent.getRowHeaderContent().getElementsByClassName('e-row');
            var hdrClone = [];
            hdrClone[0] = hdrRow[index].getElementsByTagName('td')[0].cloneNode(true);
            hdrFntSize = findMaxValue(parent.getRowHeaderTable(), hdrClone, false, parent) + 1;
        }
        var contentRow = parent.getMainContent().getElementsByClassName('e-row');
        var contentClone = [];
        var eleTextHeight = 0;
        var eleMaxHeight = 0;
        var rIdx = idx;
        for (var idx_1 = 0; idx_1 < contentRow[index].getElementsByTagName('td').length; idx_1++) {
            var td = contentRow[index].getElementsByTagName('td')[idx_1];
            contentClone[idx_1] = td.cloneNode(true);
            var cell = getCell(rIdx, idx_1, sheet, false, true);
            eleTextHeight = cell.value ? getTextHeight(parent, cell.style) : eleTextHeight;
            eleMaxHeight = eleMaxHeight < eleTextHeight ? eleTextHeight : eleMaxHeight;
            if (td.getElementsByClassName('e-cf-databar')[0]) {
                var rHeight = Number((curEleC.style.height).split('px')[0]);
                parent.notify(applyCF, { indexes: [rIdx, idx_1], cell: cell, ele: td, isRender: true,
                    resizedRowHeight: rHeight });
            }
        }
        var cntFntSize = eleMaxHeight + 1;
        var fntSize = hdrFntSize >= cntFntSize ? hdrFntSize : cntFntSize;
        if (parseInt(curEleC.style.height, 10) < fntSize ||
            (curEle && curEle.classList.contains('e-reach-fntsize') && parseInt(curEleC.style.height, 10) === fntSize)) {
            if (sheet.showHeaders) {
                curEle.classList.add('e-reach-fntsize');
                curEleH.style.lineHeight = parseInt(value, 10) >= 4 ? ((parseInt(value, 10)) - 4) + 'px' :
                    parseInt(value, 10) > 0 ? ((parseInt(value, 10)) - 1) + 'px' : '0px';
            }
            curEleC.style.lineHeight = parseInt(value, 10) > 0 ? ((parseInt(value, 10)) - 1) + 'px' : '0px';
        }
        else {
            if (curEleH) {
                curEleH.style.removeProperty('line-height');
            }
            curEleC.style.removeProperty('line-height');
            if (curEle && curEle.classList.contains('e-reach-fntsize')) {
                curEle.classList.remove('e-reach-fntsize');
            }
        }
    }
    preEleC = curEleC.previousElementSibling;
    nxtEleC = curEleC.nextElementSibling;
    if (preEleC) {
        if (sheet.showHeaders) {
            preEle = curEle.previousElementSibling;
            preEleH = curEleH.previousElementSibling;
        }
        preEleC = curEleC.previousElementSibling;
    }
    if (nxtEleC) {
        if (sheet.showHeaders) {
            nxtEle = curEle.nextElementSibling;
            nxtEleH = curEleH.nextElementSibling;
        }
        nxtEleC = curEleC.nextElementSibling;
    }
    if (parseInt(value, 10) <= 0 && !(curEleC.classList.contains('e-zero') || curEleC.classList.contains('e-zero-start'))) {
        if (preEleC && nxtEleC) {
            if (isCol) {
                if (sheet.showHeaders) {
                    curEleH.style.width = '2px';
                }
                curEleC.style.width = '0px';
            }
            else {
                if (sheet.showHeaders) {
                    curEleH.style.height = '2px';
                }
                curEleC.style.height = '0px';
            }
            if (preEleC.classList.contains('e-zero-start')) {
                if (sheet.showHeaders) {
                    curEle.classList.add('e-zero-start');
                }
                curEleC.classList.add('e-zero-start');
            }
            else {
                if (sheet.showHeaders) {
                    curEle.classList.add('e-zero');
                }
                curEleC.classList.add('e-zero');
            }
            if (nxtEle && !nxtEle.classList.contains('e-zero') && !nxtEle.classList.contains('e-zero-last')) {
                if (sheet.showHeaders) {
                    curEle.classList.add('e-zero-last');
                }
                curEleC.classList.add('e-zero-last');
            }
            if (preEleC.classList.contains('e-zero-last')) {
                if (sheet.showHeaders) {
                    preEle.classList.remove('e-zero-last');
                }
                preEleC.classList.remove('e-zero-last');
            }
            if (sheet.showHeaders && preEle.classList.contains('e-zero')) {
                if (curEle.classList.contains('e-zero-end')) {
                    setWidthAndHeight(preEleH, -2, isCol);
                }
                else {
                    setWidthAndHeight(preEleH, -2, isCol);
                }
            }
            else if (sheet.showHeaders) {
                setWidthAndHeight(preEleH, -1, isCol);
            }
            if (sheet.showHeaders && preEle.classList.contains('e-zero-start')) {
                setWidthAndHeight(curEleH, -1, isCol);
            }
            if (sheet.showHeaders && nxtEle.classList.contains('e-zero')) {
                if (curEle.classList.contains('e-zero-start')) {
                    while (nxtEle) {
                        if (nxtEle.classList.contains('e-zero') && (parseInt(nxtEleH.style.height, 10) !== 0 && !isCol) ||
                            (parseInt(nxtEleH.style.width, 10) !== 0 && isCol)) {
                            if (isCol) {
                                curEleH.style.width = parseInt(curEleH.style.width, 10) - 1 + 'px';
                                nxtEleH.style.width = parseInt(nxtEleH.style.width, 10) - 1 + 'px';
                            }
                            else {
                                curEleH.style.height = parseInt(curEleH.style.height, 10) - 1 + 'px';
                                nxtEleH.style.height = parseInt(nxtEleH.style.height, 10) - 1 + 'px';
                            }
                            nxtEle.classList.remove('e-zero');
                            nxtEle.classList.add('e-zero-start');
                            break;
                        }
                        else {
                            var nxtIndex = void 0;
                            nxtEle.classList.remove('e-zero');
                            nxtEle.classList.add('e-zero-start');
                            if (isCol) {
                                nxtIndex = parseInt(nxtEle.getAttribute('aria-colindex'), 10) - 1;
                                nxtEle = parent.getColHeaderTable().getElementsByTagName('th')[nxtIndex + 1];
                                nxtEleH = parent.getColHeaderTable().getElementsByTagName('col')[nxtIndex + 1];
                            }
                            else {
                                nxtIndex = parseInt(nxtEle.getAttribute('aria-rowindex'), 10) - 1;
                                nxtEle = parent.getRowHeaderTable().getElementsByTagName('tr')[nxtIndex + 1];
                                nxtEleH = parent.getRowHeaderTable().getElementsByTagName('tr')[nxtIndex + 1];
                            }
                        }
                    }
                }
                else {
                    setWidthAndHeight(curEleH, -2, isCol);
                }
            }
            else if (sheet.showHeaders) {
                if (nxtEle.classList.contains('e-zero-end')) {
                    if (isCol) {
                        curEleH.style.width = '0px';
                    }
                    else {
                        curEleH.style.height = '0px';
                    }
                }
                else {
                    setWidthAndHeight(nxtEleH, -1, isCol);
                }
            }
        }
        else if (preEleC) {
            if (isCol) {
                if (sheet.showHeaders) {
                    curEleH.style.width = '1px';
                }
                curEleC.style.width = '0px';
            }
            else {
                if (sheet.showHeaders) {
                    curEleH.style.height = '1px';
                }
                curEleC.style.height = '0px';
            }
            if (sheet.showHeaders) {
                curEle.classList.add('e-zero-end');
            }
            curEleC.classList.add('e-zero-end');
            if (sheet.showHeaders) {
                curEle.classList.add('e-zero-last');
            }
            curEleC.classList.add('e-zero-last');
            if (sheet.showHeaders && preEle.classList.contains('e-zero')) {
                setWidthAndHeight(preEleH, -2, isCol);
            }
            else {
                setWidthAndHeight(preEleH, -1, isCol);
            }
        }
        else if (nxtEle) {
            curEle.classList.add('e-zero-start');
            curEleC.classList.add('e-zero-start');
            if (!nxtEle.classList.contains('e-zero')) {
                curEle.classList.add('e-zero-last');
                curEleC.classList.add('e-zero-last');
            }
            if (isCol) {
                curEleH.style.width = '1px';
                curEleC.style.width = '0px';
            }
            else {
                curEleH.style.height = '1px';
                curEleC.style.height = '0px';
            }
            if (sheet.showHeaders && nxtEle.classList.contains('e-zero')) {
                while (nxtEle) {
                    if (nxtEle.classList.contains('e-zero') && (parseInt(nxtEleH.style.width, 10) !== 0
                        && isCol) || (parseInt(nxtEleH.style.height, 10) !== 0 && !isCol)) {
                        if (isCol) {
                            nxtEleH.style.width = parseInt(nxtEleH.style.width, 10) - 1 + 'px';
                            curEleH.style.width = parseInt(curEleH.style.width, 10) - 1 + 'px';
                        }
                        else {
                            nxtEleH.style.height = parseInt(nxtEleH.style.height, 10) - 1 + 'px';
                            curEleH.style.height = parseInt(curEleH.style.height, 10) - 1 + 'px';
                        }
                        nxtEle.classList.add('e-zero-start');
                        nxtEle.classList.remove('e-zero');
                        break;
                    }
                    else {
                        var nxtIndex = void 0;
                        nxtEle.classList.add('e-zero-start');
                        nxtEle.classList.remove('e-zero');
                        if (isCol) {
                            nxtIndex = parseInt(nxtEle.getAttribute('aria-colindex'), 10) - 1;
                            nxtEleH = parent.getColHeaderTable().getElementsByTagName('col')[nxtIndex + 1];
                            nxtEle = parent.getColHeaderTable().getElementsByTagName('th')[nxtIndex + 1];
                        }
                        else {
                            nxtIndex = parseInt(nxtEle.getAttribute('aria-rowindex'), 10) - 1;
                            nxtEleH = parent.getRowHeaderTable().getElementsByTagName('tr')[nxtIndex + 1];
                            nxtEle = parent.getRowHeaderTable().getElementsByTagName('tr')[nxtIndex + 1];
                        }
                    }
                }
            }
            else if (sheet.showHeaders) {
                setWidthAndHeight(nxtEleH, -1, isCol);
            }
        }
    }
    else if (parseInt(value, 10) > 0) {
        var DPRValue = getDPRValue(parseInt(value, 10)) + 'px';
        if (isCol) {
            curEleH.style.width = DPRValue;
            curEleC.style.width = DPRValue;
        }
        else {
            curEleH.style.height = DPRValue;
            curEleC.style.height = DPRValue;
        }
        if (sheet.showHeaders && preEle && nxtEle) {
            if (preEle.classList.contains('e-zero')) {
                if (curEle.classList.contains('e-zero')) {
                    if (isCol) {
                        preEleH.style.width = parseInt(preEleH.style.width, 10) + 2 + 'px';
                        curEleH.style.width = parseInt(curEleH.style.width, 10) - 1 + 'px';
                    }
                    else {
                        preEleH.style.height = parseInt(preEleH.style.height, 10) + 2 + 'px';
                        curEleH.style.height = parseInt(curEleH.style.height, 10) - 1 + 'px';
                    }
                }
                else {
                    setWidthAndHeight(curEleH, -1, isCol);
                }
            }
            else {
                if (curEle.classList.contains('e-zero')) {
                    setWidthAndHeight(preEleH, 1, isCol);
                }
                else {
                    if (curEle.classList.contains('e-zero-start')) {
                        if (isCol) {
                            preEleH.style.width = parseInt(preEleH.style.width, 10) + 1 + 'px';
                            curEleH.style.width = parseInt(curEleH.style.width, 10) - 1 + 'px';
                        }
                        else {
                            preEleH.style.height = parseInt(preEleH.style.height, 10) + 1 + 'px';
                            curEleH.style.height = parseInt(curEleH.style.height, 10) - 1 + 'px';
                        }
                    }
                }
            }
            if (nxtEle.classList.contains('e-zero')) {
                setWidthAndHeight(curEleH, -1, isCol);
            }
            else {
                if (curEle.classList.contains('e-zero') || curEle.classList.contains('e-zero-start')) {
                    setWidthAndHeight(nxtEleH, 1, isCol);
                }
            }
            if (curEle.classList.contains('e-zero')) {
                curEle.classList.remove('e-zero');
            }
            if (curEle.classList.contains('e-zero-start')) {
                curEle.classList.remove('e-zero-start');
            }
            if (curEleC.classList.contains('e-zero')) {
                curEleC.classList.remove('e-zero');
            }
            if (curEleC.classList.contains('e-zero-start')) {
                curEleC.classList.remove('e-zero-start');
            }
            if (curEle.classList.contains('e-zero-last')) {
                curEle.classList.remove('e-zero-last');
            }
            if (curEleC.classList.contains('e-zero-last')) {
                curEleC.classList.remove('e-zero-last');
            }
            if (preEle.classList.contains('e-zero') || preEle.classList.contains('e-zero-start')) {
                preEle.classList.add('e-zero-last');
                preEleC.classList.add('e-zero-last');
            }
        }
        else if (sheet.showHeaders && preEle) {
            if (preEle.classList.contains('e-zero')) {
                if (curEle.classList.contains('e-zero')) {
                    if (isCol) {
                        curEleH.style.width = parseInt(curEleH.style.width, 10) - 1 + 'px';
                        preEleH.style.width = parseInt(preEleH.style.width, 10) + 2 + 'px';
                    }
                    else {
                        curEleH.style.height = parseInt(curEleH.style.height, 10) - 1 + 'px';
                        preEleH.style.height = parseInt(preEleH.style.height, 10) + 2 + 'px';
                    }
                }
                else {
                    setWidthAndHeight(curEleH, -1, isCol);
                }
            }
            else {
                if (curEle.classList.contains('e-zero')) {
                    setWidthAndHeight(preEleH, 1, isCol);
                }
                else {
                    setWidthAndHeight(curEleH, -1, isCol);
                }
            }
            if (curEle.classList.contains('e-zero')) {
                curEle.classList.remove('e-zero');
            }
            if (curEle.classList.contains('e-zero-end')) {
                curEle.classList.remove('e-zero-end');
            }
            if (curEleC.classList.contains('e-zero')) {
                curEleC.classList.remove('e-zero');
            }
            if (curEleC.classList.contains('e-zero-end')) {
                curEleC.classList.remove('e-zero-end');
            }
        }
        else if (sheet.showHeaders && nxtEle) {
            if (nxtEle.classList.contains('e-zero')) {
                setWidthAndHeight(curEleH, -1, isCol);
            }
            else if (curEle.classList.contains('e-zero-start')) {
                setWidthAndHeight(nxtEleH, 1, isCol);
                curEle.classList.remove('e-zero-start');
            }
            if (curEle.classList.contains('e-zero')) {
                curEle.classList.remove('e-zero');
            }
            if (curEleC.classList.contains('e-zero')) {
                curEleC.classList.remove('e-zero');
            }
            if (curEle.classList.contains('e-zero-start')) {
                curEle.classList.remove('e-zero-start');
            }
            if (curEleC.classList.contains('e-zero-start')) {
                curEleC.classList.remove('e-zero-start');
            }
        }
    }
}
/**
 * @hidden
 * @param {HTMLElement} trgt - Specify the target element.
 * @param {number} value - specify the number.
 * @param {boolean} isCol - Specify the boolean vlaue.
 * @returns {void} -  to set width and height.
 */
function setWidthAndHeight(trgt, value, isCol) {
    if (isCol) {
        trgt.style.width = parseInt(trgt.style.width, 10) + value + 'px';
    }
    else {
        trgt.style.height = parseInt(trgt.style.height, 10) + value + 'px';
    }
}
/**
 * @hidden
 * @param {number} lineHeight - Specify the line height for other culture text.
 * @returns {void} -  to set the line height for other culture text.
 */
function setTextLineHeight(lineHeight) {
    textLineHeight = lineHeight;
}
/**
 * @hidden
 * @param {HTMLElement} table - Specify the table.
 * @param {HTMLElement[]} text - specify the text.
 * @param {boolean} isCol - Specifyt boolean value
 * @param {Spreadsheet} parent - Specify the parent.
 * @param {string} prevData - specify the prevData.
 * @param {boolean} isWrap - Specifyt boolean value
 * @returns {number} - To find maximum value.
 */
function findMaxValue(table, text, isCol, parent, prevData, isWrap) {
    var myTableDiv = parent.createElement('div', { className: parent.element.className, styles: 'display: block' });
    var myTable = parent.createElement('table', {
        className: table.className + 'e-resizetable',
        styles: 'width: auto;height: auto'
    });
    var myTr = parent.createElement('tr');
    if (isCol) {
        text.forEach(function (element) {
            var tr = myTr.cloneNode();
            tr.appendChild(element);
            myTable.appendChild(tr);
        });
    }
    else {
        text.forEach(function (element) {
            myTr.appendChild(element.cloneNode(true));
        });
        myTable.appendChild(myTr);
    }
    myTableDiv.appendChild(myTable);
    document.body.appendChild(myTableDiv);
    var offsetWidthValue;
    var offsetHeightValue;
    var tableMaxWidth = myTable.getBoundingClientRect().width;
    var tableMaxHeight = myTable.getBoundingClientRect().height;
    if (!isWrap) {
        offsetHeightValue = tableMaxHeight;
        offsetWidthValue = tableMaxWidth;
    }
    else {
        if (isCol && parseInt(prevData, 10) > tableMaxWidth) {
            offsetWidthValue = tableMaxWidth;
        }
        else {
            offsetWidthValue = parseInt(prevData, 10);
        }
        if (!isCol && parseInt(prevData, 10) > tableMaxHeight) {
            offsetHeightValue = tableMaxHeight;
        }
        else {
            offsetHeightValue = parseInt(prevData, 10);
        }
    }
    document.body.removeChild(myTableDiv);
    if (isCol) {
        return Math.ceil(offsetWidthValue);
    }
    else {
        return Math.ceil(offsetHeightValue);
    }
}
/**
 * @hidden
 * @param {CollaborativeEditArgs} options - Specify the collaborative edit arguments.
 * @param {Spreadsheet} spreadsheet - specify the spreadsheet.
 * @param {boolean} isRedo - Specifyt the boolean value.
 * @param {CollaborativeEditArgs[]} undoCollections - Specify the undo collections.
 * @param {object} actionEventArgs - Specify the actionEventArgs.
 * @param {ActionEventArgs} actionEventArgs.eventArgs - Specify the eventArgs.
 * @param {boolean} isRecursive - Specify the recursive.
 * @returns {void} - To update the Action.
 */
function updateAction(options, spreadsheet, isRedo, undoCollections, actionEventArgs, isRecursive) {
    /* eslint-disable-next-line  @typescript-eslint/no-explicit-any */
    var eventArgs = options.eventArgs;
    var chartElement;
    var element;
    var args;
    var promise;
    var sortArgs;
    var cellEvtArgs;
    var cellValue;
    var clipboardPromise;
    var model;
    var sheet;
    var column;
    var row;
    var addressInfo;
    var isFromUpdateAction = options.isFromUpdateAction || isUndefined$1(isRedo);
    if (options.isUndoRedo) {
        isFromUpdateAction = options.isFromUpdateAction = true;
        delete options.isUndoRedo;
        spreadsheet.notify(performUndoRedo, options);
        return;
    }
    if (isFromUpdateAction && !isRecursive) {
        var address = eventArgs.address || eventArgs.range || eventArgs.pastedRange
            || (eventArgs.addressCollection && eventArgs.addressCollection[0]) || eventArgs.dataRange;
        var sheetIndex_1 = isUndefined$1(eventArgs.sheetIndex) ? isUndefined$1(eventArgs.sheetIdx)
            ? isUndefined$1(eventArgs.activeSheetIndex) ? address ? getSheetIndexFromAddress(spreadsheet, address)
                : spreadsheet.activeSheetIndex : eventArgs.activeSheetIndex : eventArgs.sheetIdx : eventArgs.sheetIndex;
        if (sheetIndex_1 !== spreadsheet.activeSheetIndex) {
            var args_1 = {
                sheet: getSheet(spreadsheet, sheetIndex_1), resolveAfterFullDataLoaded: true,
                indexes: [0, 0, 0, 0], promise: new Promise(function (resolve) { resolve((function () { })()); })
            };
            spreadsheet.notify(updateSheetFromDataSource, args_1);
            args_1.promise.then(function () {
                updateAction(options, spreadsheet, isRedo, undoCollections, actionEventArgs, true);
            });
            return;
        }
    }
    var cellSaveArgs;
    var addrInfo;
    var clearArgs;
    var sheetIndex = getSheetIndexFromId(spreadsheet, eventArgs.index);
    var cellIndexes;
    switch (options.action) {
        case 'sorting':
            args = {
                range: options.eventArgs.range,
                sortOptions: options.eventArgs.sortOptions,
                cancel: false
            };
            promise = new Promise(function (resolve) { resolve((function () { })()); });
            sortArgs = { args: args, promise: promise };
            spreadsheet.notify(initiateSort, sortArgs);
            sortArgs.promise.then(function (args) {
                spreadsheet.serviceLocator.getService('cell').refreshRange(getIndexesFromAddress(args.range));
            });
            break;
        case 'cellSave':
            cellEvtArgs = options.eventArgs;
            cellSaveArgs = { element: cellEvtArgs.element, value: cellEvtArgs.value,
                oldValue: cellEvtArgs.oldValue, address: cellEvtArgs.address, displayText: cellEvtArgs.displayText,
                formula: cellEvtArgs.formula, originalEvent: cellEvtArgs.originalEvent, format: cellEvtArgs.format };
            cellValue = cellSaveArgs.formula ? { formula: cellSaveArgs.formula } : { value: cellSaveArgs.value };
            spreadsheet.updateCellInfo(cellValue, cellSaveArgs.address, false, options.eventArgs, isRedo);
            if (isRedo === true) {
                spreadsheet.trigger('cellSave', cellSaveArgs);
            }
            break;
        case 'addNote':
        case 'editNote':
        case 'deleteNote':
            cellIndexes = getIndexesFromAddress(options.eventArgs.address);
            if (isRedo) {
                updateCell(spreadsheet, spreadsheet.getActiveSheet(), { rowIdx: cellIndexes[0], colIdx: cellIndexes[1], preventEvt: true,
                    cell: { notes: options.eventArgs.notes } });
                spreadsheet.serviceLocator.getService('cell').refreshRange(getIndexesFromAddress(eventArgs.address), false, false, true, true, isImported(spreadsheet));
            }
            break;
        case 'cellDelete':
            addrInfo = getAddressInfo(spreadsheet, options.eventArgs.address);
            clearRange(spreadsheet, addrInfo.indices, addrInfo.sheetIndex);
            break;
        case 'format':
            if (eventArgs.requestType === 'CellFormat') {
                if (eventArgs.style && eventArgs.style.border && !isNullOrUndefined(eventArgs.borderType)) {
                    var style = {};
                    Object.assign(style, eventArgs.style, null, true);
                    eventArgs.style.border = undefined;
                    spreadsheet.notify(setCellFormat, { style: eventArgs.style, refreshRibbon: true, range: eventArgs.range,
                        onActionUpdate: true, isUndoRedo: true });
                    eventArgs.style.border = style.border;
                    spreadsheet.setBorder(eventArgs.style, eventArgs.range, eventArgs.borderType);
                    eventArgs.style = style;
                }
                else {
                    spreadsheet.notify(setCellFormat, { style: eventArgs.style, refreshRibbon: true, range: eventArgs.range,
                        onActionUpdate: true, isUndoRedo: true });
                }
                getUpdateUsingRaf(function () { return spreadsheet.selectRange(spreadsheet.getActiveSheet().selectedRange); });
            }
            else {
                spreadsheet.numberFormat(eventArgs.format, eventArgs.range);
            }
            break;
        case 'clipboard':
            clipboardPromise = new Promise(function (resolve) { resolve((function () { })()); });
            addressInfo = spreadsheet.getAddressInfo(eventArgs.copiedRange);
            spreadsheet.notify(eventArgs.copiedInfo.isCut ? cut : copy, {
                range: addressInfo.indices, sId: getSheet(spreadsheet, addressInfo.sheetIndex).id,
                promise: promise, invokeCopy: true, isPublic: true, isFromUpdateAction: true
            });
            clipboardPromise.then(function () { return spreadsheet.notify(paste, {
                range: getIndexesFromAddress(eventArgs.pastedRange),
                sIdx: getSheetIndex(spreadsheet, getSheetNameFromAddress(eventArgs.pastedRange)),
                type: eventArgs.type, isAction: false, isInternal: true, isFromUpdateAction: true
            }); });
            break;
        case 'gridLines':
            spreadsheet.setSheetPropertyOnMute(spreadsheet.sheets[eventArgs.sheetIdx], 'showGridLines', eventArgs.isShow);
            spreadsheet.serviceLocator.getService('sheet').toggleGridlines();
            spreadsheet.notify(refreshRibbonIcons, null);
            break;
        case 'headers':
            spreadsheet.setSheetPropertyOnMute(spreadsheet.sheets[eventArgs.sheetIdx], 'showHeaders', eventArgs.isShow);
            spreadsheet.serviceLocator.getService('sheet').showHideHeaders();
            spreadsheet.notify(refreshRibbonIcons, null);
            break;
        case 'resize':
        case 'resizeToFit':
            if (isFromUpdateAction) {
                sheet = spreadsheet.sheets[eventArgs.sheetIndex];
                column = getColumn(sheet, eventArgs.index);
                row = getRow(sheet, eventArgs.index);
                if ((eventArgs.isCol && column && column.hidden) || (row && row.hidden)) {
                    spreadsheet.notify(hideShow, { startIndex: eventArgs.index, endIndex: eventArgs.index, hide: false, isCol: eventArgs.isCol,
                        sheetIndex: eventArgs.sheetIndex });
                }
            }
            if (eventArgs.isCol) {
                if (eventArgs.hide === undefined) {
                    spreadsheet.setColWidth(isFromUpdateAction && !isUndefined$1(isRedo) ? eventArgs.oldWidth :
                        eventArgs.width, eventArgs.index, eventArgs.sheetIndex);
                }
                else {
                    spreadsheet.hideColumn(eventArgs.index, eventArgs.index, eventArgs.hide);
                }
            }
            else {
                if (eventArgs.hide === undefined) {
                    spreadsheet.setRowHeight(isFromUpdateAction && !isUndefined$1(isRedo) ? eventArgs.oldHeight :
                        eventArgs.height, eventArgs.index, eventArgs.sheetIndex);
                }
                else {
                    spreadsheet.hideRow(eventArgs.index, eventArgs.index, eventArgs.hide);
                }
                spreadsheet.notify(refreshFilterCellsOnResize, { rowIndex: eventArgs.index });
            }
            break;
        case 'renameSheet':
            spreadsheet.setSheetPropertyOnMute(spreadsheet.sheets[sheetIndex], 'name', eventArgs.value);
            spreadsheet.notify(sheetNameUpdate, {
                items: spreadsheet.element.querySelector('.e-sheet-tabs-items'),
                value: eventArgs.value,
                idx: sheetIndex
            });
            break;
        case 'hideSheet':
            spreadsheet.notify(hideSheet, { sheetIndex: eventArgs.sheetIndex });
            break;
        case 'showSheet':
            spreadsheet.notify(showSheet, eventArgs);
            break;
        case 'removeSheet':
            spreadsheet.notify(removeSheetTab, { index: eventArgs.index, isAction: true, count: eventArgs.sheetCount, clicked: true });
            break;
        case 'gotoSheet':
            spreadsheet.notify(goToSheet, { selectedIndex: eventArgs.currentSheetIndex, previousIndex: eventArgs.previousSheetIndex });
            break;
        case 'moveSheet':
            moveSheet(spreadsheet, eventArgs.position, eventArgs.sheetIndexes, null, isFromUpdateAction);
            break;
        case 'wrap':
            wrap(options.eventArgs.address, options.eventArgs.wrap, spreadsheet);
            break;
        case 'hideShow':
            if (eventArgs.isCol) {
                spreadsheet.notify(hideShow, { startIndex: eventArgs.startIndex, endIndex: eventArgs.endIndex, isCol: true,
                    hide: isRedo === false ? !eventArgs.hide : eventArgs.hide, sheetIndex: eventArgs.sheetIndex,
                    hiddenIndexes: eventArgs.hiddenIndexes });
            }
            else {
                spreadsheet.notify(hideShow, { startIndex: eventArgs.startIndex, endIndex: eventArgs.endIndex,
                    hide: isRedo === false ? !eventArgs.hide : eventArgs.hide, sheetIndex: eventArgs.sheetIndex });
            }
            break;
        case 'replace':
            spreadsheet.notify(replace, { value: eventArgs.compareValue, replaceValue: eventArgs.replaceValue,
                sheetIndex: eventArgs.sheetIndex, address: eventArgs.address });
            break;
        case 'replaceAll':
            spreadsheet.notify(replaceAll, eventArgs);
            break;
        case 'filter':
            promise = new Promise(function (resolve) { resolve((function () { })()); });
            if (isRedo === false) {
                spreadsheet.notify(initiateFilterUI, { predicates: eventArgs.previousPredicates, range: eventArgs.range, sIdx: eventArgs.sheetIndex, promise: promise, isInternal: true });
            }
            else {
                spreadsheet.notify(initiateFilterUI, { predicates: eventArgs.predicates, range: eventArgs.range, sIdx: eventArgs.sheetIndex, promise: promise,
                    isInternal: true, useFilterRange: eventArgs.useFilterRange, allowHeaderFilter: eventArgs.allowHeaderFilter });
            }
            if (actionEventArgs && !isFromUpdateAction) {
                promise.then(function () {
                    spreadsheet.notify(completeAction, extend({ isUndo: !isRedo, isUndoRedo: !isFromUpdateAction }, actionEventArgs));
                });
            }
            break;
        case 'insert':
            if (options.eventArgs.modelType === 'Sheet') {
                sheet = spreadsheet;
            }
            else {
                sheet = getSheet(spreadsheet, options.eventArgs.activeSheetIndex);
                if (!sheet) {
                    break;
                }
            }
            if (isRedo === false) {
                spreadsheet.notify(deleteModel, { model: sheet, start: options.eventArgs.index, isUndoRedo: true, end: options.eventArgs.index + (options.eventArgs.model.length - 1), modelType: options.eventArgs.modelType });
            }
            else {
                spreadsheet.notify(insertModel, { model: sheet, start: options.eventArgs.index, end: options.eventArgs.index +
                        (options.eventArgs.model.length - 1), modelType: options.eventArgs.modelType, checkCount: isRedo === undefined ?
                        options.eventArgs.sheetCount : null, activeSheetIndex: options.eventArgs.activeSheetIndex, isUndoRedo: true,
                    insertType: options.eventArgs.insertType, isFromUpdateAction: isFromUpdateAction, isRedo: isRedo });
            }
            break;
        case 'delete':
            if (options.eventArgs.modelType === 'Sheet') {
                sheet = spreadsheet;
            }
            else {
                sheet = getSheet(spreadsheet, options.eventArgs.activeSheetIndex);
                if (!sheet) {
                    break;
                }
            }
            if (isRedo === false) {
                spreadsheet.notify(insertModel, { model: sheet, start: options.eventArgs.deletedModel, modelType: options.eventArgs.modelType, columnCellsModel: options.eventArgs.deletedCellsModel, definedNames: options.eventArgs.definedNames, activeSheetIndex: options.eventArgs.activeSheetIndex, isUndoRedo: true,
                    insertType: options.eventArgs.modelType === 'Row' ? 'above' : 'before',
                    conditionalFormats: options.eventArgs.conditionalFormats, prevAction: options.action, freezePane: eventArgs.freezePane });
            }
            else {
                spreadsheet.notify(deleteModel, { model: sheet, start: options.eventArgs.startIndex,
                    checkCount: options.eventArgs.sheetCount, end: options.eventArgs.endIndex, modelType: options.eventArgs.modelType,
                    isUndoRedo: true, insertType: options.eventArgs.modelType === 'Row' ? 'above' : 'before' });
            }
            break;
        case 'validation':
            if (isRedo === false) {
                spreadsheet.notify(removeDataValidation, { range: eventArgs.range });
            }
            else {
                spreadsheet.notify(cellValidation, { rules: { type: eventArgs.type, operator: eventArgs.operator, value1: eventArgs.value1, value2: eventArgs.value2, ignoreBlank: eventArgs.ignoreBlank, inCellDropDown: eventArgs.inCellDropDown },
                    range: eventArgs.range, isAction: true });
            }
            break;
        case 'removeHighlight':
        case 'addHighlight':
            spreadsheet.notify(invalidData, { isRemoveHighlight: options.action === 'removeHighlight', isPublic: true });
            break;
        case 'merge':
            options.eventArgs.isAction = false;
            model = [];
            for (var rIdx = 0, rCnt = eventArgs.model.length; rIdx < rCnt; rIdx++) {
                model.push({ cells: [] });
                for (var cIdx = 0, cCnt = eventArgs.model[rIdx].cells.length; cIdx < cCnt; cIdx++) {
                    model[rIdx].cells[cIdx] = {};
                    Object.assign(model[rIdx].cells[cIdx], eventArgs.model[rIdx].cells[cIdx]);
                }
            }
            if (isRedo === false && eventArgs.mergeCollection) {
                var mergeItem = void 0;
                for (var i = 0; i < eventArgs.mergeCollection.length; i++) {
                    mergeItem = { range: null };
                    Object.assign(mergeItem, eventArgs);
                    mergeItem.range = eventArgs.mergeCollection[i];
                    spreadsheet.notify(setMerge, mergeItem);
                }
            }
            else {
                spreadsheet.notify(setMerge, options.eventArgs);
            }
            if (spreadsheet.calculationMode === 'Manual' && isRedo &&
                spreadsheet.getActiveSheet().isSheetCalculated) {
                for (var i = 0; i < eventArgs.model.length; i++) {
                    var cells = eventArgs.model[i].cells;
                    for (var j = 0; j < cells.length; j++) {
                        var value = eventArgs.model[i].cells[j].value;
                        model[i].cells[j].value =
                            (!isNullOrUndefined(value) && value !== '' ? value : model[i].cells[j].value);
                    }
                }
            }
            eventArgs.model = model;
            break;
        case 'clear':
            clearArgs = { options: options.eventArgs, isFromUpdateAction: isFromUpdateAction };
            spreadsheet.notify(clearViewer, clearArgs);
            if (!isFromUpdateAction && clearArgs.cfClearActionArgs) {
                eventArgs.cfClearActionArgs.previousConditionalFormats = clearArgs.cfClearActionArgs.previousConditionalFormats;
                eventArgs.cfClearActionArgs.conditionalFormats = clearArgs.cfClearActionArgs.conditionalFormats;
            }
            break;
        case 'conditionalFormat':
            if (isRedo === false) {
                spreadsheet.notify(clearCFRule, { range: eventArgs.range, cfModel: { type: eventArgs.type, cFColor: eventArgs.cFColor,
                        value: eventArgs.value }, sheetIdx: eventArgs.sheetIdx, isUndoRedo: !eventArgs.cancel,
                    isFromUpdateAction: isFromUpdateAction });
            }
            else {
                spreadsheet.notify(setCFRule, { cfModel: { type: eventArgs.type, cFColor: eventArgs.cFColor, value: eventArgs.value,
                        range: eventArgs.range }, sheetIdx: eventArgs.sheetIdx, isUndoRedo: true, isFromUpdateAction: isFromUpdateAction });
            }
            break;
        case 'clearCF':
            if (isRedo === false) {
                spreadsheet.notify(clearCFRule, { oldCFModel: eventArgs.previousConditionalFormats, updatedCFModel: eventArgs.conditionalFormats,
                    range: eventArgs.selectedRange, isUndo: true, sheetIdx: eventArgs.sheetIdx });
            }
            else {
                var clearArgs_1 = { range: eventArgs.selectedRange, sheetIdx: eventArgs.sheetIdx,
                    isUndoRedo: true, isFromUpdateAction: isFromUpdateAction };
                spreadsheet.notify(clearCFRule, clearArgs_1);
                if (!isFromUpdateAction) {
                    eventArgs.previousConditionalFormats = clearArgs_1.oldCFModel;
                    if (clearArgs_1.updatedCFModel.length) {
                        eventArgs.conditionalFormats = clearArgs_1.updatedCFModel;
                    }
                    else {
                        delete eventArgs.conditionalFormats;
                    }
                }
            }
            break;
        case 'insertImage':
            if (isRedo === false) {
                spreadsheet.notify(deleteImage, { id: options.eventArgs.id, sheetIdx: options.eventArgs.sheetIndex + 1, range: options.eventArgs.range,
                    preventEventTrigger: true });
            }
            else {
                spreadsheet.notify(createImageElement, { options: { src: options.eventArgs.imageData, height: options.eventArgs.imageHeight, width: options.eventArgs.imageWidth, id: options.eventArgs.id }, range: options.eventArgs.range, isPublic: false,
                    isUndoRedo: true });
            }
            break;
        case 'deleteImage':
            if (isRedo === false) {
                spreadsheet.notify(createImageElement, { options: { src: options.eventArgs.imageData, height: options.eventArgs.imageHeight, width: options.eventArgs.imageWidth, id: options.eventArgs.id }, range: options.eventArgs.address, isPublic: false,
                    isUndoRedo: true });
            }
            else {
                spreadsheet.notify(deleteImage, { id: options.eventArgs.id, range: options.eventArgs.address, preventEventTrigger: true });
            }
            break;
        case 'imageRefresh':
            element = document.getElementById(options.eventArgs.id);
            if (isRedo === false) {
                spreadsheet.notify(refreshImgCellObj, { prevTop: options.eventArgs.currentTop, prevLeft: options.eventArgs.currentLeft, currentTop: options.eventArgs.prevTop, currentLeft: options.eventArgs.prevLeft, id: options.eventArgs.id, currentHeight: options.eventArgs.prevHeight, currentWidth: options.eventArgs.prevWidth, requestType: 'imageRefresh',
                    prevHeight: options.eventArgs.currentHeight, prevWidth: options.eventArgs.currentWidth, isUndoRedo: true });
            }
            else {
                options.eventArgs.isUndoRedo = true;
                spreadsheet.notify(refreshImgCellObj, options.eventArgs);
            }
            if (element) {
                element.style.height = isRedo === false ? options.eventArgs.prevHeight + 'px' : options.eventArgs.currentHeight + 'px';
                element.style.width = isRedo === false ? options.eventArgs.prevWidth + 'px' : options.eventArgs.currentWidth + 'px';
                element.style.top = isRedo === false ? options.eventArgs.prevTop + 'px' : options.eventArgs.currentTop + 'px';
                element.style.left = isRedo === false ? options.eventArgs.prevLeft + 'px' : options.eventArgs.currentLeft + 'px';
            }
            break;
        case 'insertChart':
            if (isRedo === false) {
                spreadsheet.notify(deleteChart, { id: eventArgs.id, range: eventArgs.posRange || eventArgs.range, isUndoRedo: true });
            }
            else {
                var chartOptions = [{
                        type: eventArgs.type, theme: eventArgs.theme,
                        markerSettings: eventArgs.markerSettings, isSeriesInRows: eventArgs.isSeriesInRows,
                        range: eventArgs.range, id: eventArgs.id, height: eventArgs.height, width: eventArgs.width, top: eventArgs.top,
                        left: eventArgs.left
                    }];
                spreadsheet.notify(setChart, {
                    chart: chartOptions, isUndoRedo: false, range: eventArgs.posRange || eventArgs.range, isInitCell: true, isRedo: true
                });
            }
            break;
        case 'deleteChart':
            if (isRedo === false) {
                var chartOpts = [{
                        type: eventArgs.type, theme: eventArgs.theme, markerSettings: eventArgs.markerSettings,
                        dataLabelSettings: eventArgs.dataLabelSettings, title: eventArgs.title,
                        legendSettings: eventArgs.legendSettings, primaryXAxis: eventArgs.primaryXAxis,
                        primaryYAxis: eventArgs.primaryYAxis, isSeriesInRows: eventArgs.isSeriesInRows,
                        range: eventArgs.range, id: eventArgs.id, height: eventArgs.height,
                        width: eventArgs.width, top: eventArgs.top, left: eventArgs.left
                    }];
                spreadsheet.notify(setChart, { chart: chartOpts, isUndoRedo: false, range: eventArgs.posRange, isInitCell: true, isUndo: true });
            }
            else {
                spreadsheet.notify(deleteChart, { id: eventArgs.id, range: eventArgs.range, isUndoRedo: true });
            }
            break;
        case 'chartRefresh':
            chartElement = document.getElementById(options.eventArgs.id);
            if (chartElement) {
                chartElement.style.height = isRedo === false ? options.eventArgs.prevHeight + 'px' : options.eventArgs.currentHeight + 'px';
                chartElement.style.width = isRedo === false ? options.eventArgs.prevWidth + 'px' : options.eventArgs.currentWidth + 'px';
                chartElement.style.top = isRedo === false ? options.eventArgs.prevTop + 'px' : options.eventArgs.currentTop + 'px';
                chartElement.style.left = isRedo === false ? options.eventArgs.prevLeft + 'px' : options.eventArgs.currentLeft + 'px';
            }
            if (isRedo === false) {
                spreadsheet.notify(refreshChartCellObj, extend({}, options.eventArgs, {
                    currentColIdx: options.eventArgs.prevColIdx, currentHeight: options.eventArgs.prevHeight,
                    currentLeft: options.eventArgs.prevLeft, currentRowIdx: options.eventArgs.prevRowIdx,
                    currentTop: options.eventArgs.prevTop, currentWidth: options.eventArgs.prevWidth,
                    prevColIdx: options.eventArgs.currentColIdx, prevHeight: options.eventArgs.currentHeight,
                    prevLeft: options.eventArgs.currentLeft, prevRowIdx: options.eventArgs.currentRowIdx,
                    prevTop: options.eventArgs.currentTop, prevWidth: options.eventArgs.currentWidth, isUndoRedo: true
                }));
                spreadsheet.notify(refreshChartSize, {
                    height: options.eventArgs.prevHeight.toString(),
                    width: options.eventArgs.prevWidth.toString(), overlayEle: chartElement
                });
            }
            else {
                options.eventArgs.isUndoRedo = true;
                spreadsheet.notify(refreshChartCellObj, options.eventArgs);
                spreadsheet.notify(refreshChartSize, {
                    height: options.eventArgs.currentHeight.toString(),
                    width: options.eventArgs.currentWidth.toString(), overlayEle: chartElement
                });
            }
            break;
        case 'chartDesign':
            spreadsheet.notify(chartDesignTab, options.eventArgs);
            break;
        case 'autofill':
            if (isFromUpdateAction && eventArgs.undoArgs) {
                eventArgs.undoArgs.isFromUpdateAction = eventArgs.undoArgs.isUndo = eventArgs.undoArgs.preventEvt = true;
                eventArgs.undoArgs.isPublic = true;
                spreadsheet.notify(performUndoRedo, eventArgs.undoArgs);
            }
            spreadsheet.notify(setAutoFill, { fillRange: options.eventArgs.fillRange, dataRange: options.eventArgs.dataRange,
                fillType: options.eventArgs.fillType, direction: options.eventArgs.direction, cells: options.eventArgs.beforeActionData });
            break;
        case 'removeValidation':
            if (isRedo !== false) {
                spreadsheet.notify(removeDataValidation, { range: eventArgs.range, isCol: eventArgs.isColSelected });
            }
            break;
        case 'addDefinedName':
            if (isRedo === false) {
                spreadsheet.notify(workbookFormulaOperation, { action: 'removeDefinedName', isRemoved: false, definedName: eventArgs.name, scope: eventArgs.scope, isEventTrigger: true });
            }
            else {
                var definedName = { name: eventArgs.name, refersTo: eventArgs.refersTo, scope: eventArgs.scope, comment: eventArgs.comment };
                spreadsheet.notify(workbookFormulaOperation, { action: 'addDefinedName', isAdded: false, definedName: definedName, isEventTrigger: true });
            }
            break;
        case 'hyperlink':
            spreadsheet.notify(setLinkModel, { hyperlink: eventArgs.hyperlink, cell: eventArgs.address, displayText: eventArgs.displayText,
                isUndoRedo: true });
            spreadsheet.serviceLocator.getService('cell').refreshRange(getIndexesFromAddress(eventArgs.address), false, false, false, true, isImported(spreadsheet));
            break;
        case 'removeHyperlink':
            spreadsheet.notify(removeHyperlink, { range: eventArgs.address, preventEventTrigger: true });
            break;
        case 'freezePanes':
            spreadsheet.freezePanes(eventArgs.row, eventArgs.column, eventArgs.sheetIndex);
            break;
        case 'duplicateSheet':
            duplicateSheet(spreadsheet, eventArgs.sheetIndex, null, isFromUpdateAction);
            break;
        case 'protectSheet':
            if (eventArgs.isProtected) {
                spreadsheet.notify(protectsheetHandler, eventArgs);
            }
            else {
                spreadsheet.setSheetPropertyOnMute(getSheet(spreadsheet, eventArgs.sheetIndex), 'password', '');
                spreadsheet.notify(applyProtect, { isActive: true, sheetIndex: eventArgs.sheetIndex });
            }
            break;
        case 'protectWorkbook':
            if (eventArgs.isProtected) {
                spreadsheet.notify(setProtectWorkbook, eventArgs);
            }
            else {
                spreadsheet.notify(removeWorkbookProtection, null);
            }
            break;
        case 'lockCells':
            spreadsheet.notify(setLockCells, eventArgs);
    }
}
/**
 * @hidden
 * @param {Workbook} workbook - Specify the workbook
 * @param {number} rowIdx - specify the roe index
 * @param {number} colIdx - specify the column Index.
 * @param {number} sheetIdx - specify the sheet index.
 * @returns {boolean} - Returns the boolean value.
 */
function hasTemplate(workbook, rowIdx, colIdx, sheetIdx) {
    var sheet = workbook.sheets[sheetIdx];
    var ranges = sheet.ranges;
    var range;
    for (var i = 0, len = ranges.length; i < len; i++) {
        if (ranges[i].template) {
            range = getRangeIndexes(ranges[i].address.length ? ranges[i].address : ranges[i].startCell);
            if (range[0] <= rowIdx && range[1] <= colIdx && range[2] >= rowIdx && range[3] >= colIdx) {
                return true;
            }
        }
    }
    return false;
}
/**
 * Setting row height in view an model.
 *
 * @hidden
 * @param {Spreadsheet} parent - Specify the parent
 * @param {SheetModel} sheet - specify the column width
 * @param {number} height - specify the style.
 * @param {number} rowIdx - specify the rowIdx
 * @param {HTMLElement} row - specify the row
 * @param {HTMLElement} hRow - specify the hRow.
 * @param {boolean} notifyRowHgtChange - specify boolean value.
 * @param {boolean} outsideViewport - Specify whether the row is outside the viewport.
 * @returns {void} - Setting row height in view an model.
 */
function setRowEleHeight(parent, sheet, height, rowIdx, row, hRow, notifyRowHgtChange, outsideViewport) {
    if (notifyRowHgtChange === void 0) { notifyRowHgtChange = true; }
    var prevHgt = getRowHeight(sheet, rowIdx, true);
    var dprHgt = getDPRValue(height);
    if (!outsideViewport) {
        var frozenCol = parent.frozenColCount(sheet);
        row = row || (sheet.frozenRows ? parent.getRow(rowIdx, null, frozenCol) : parent.getRow(rowIdx));
        if (row) {
            row.style.height = dprHgt + "px";
        }
        if (sheet.frozenColumns) {
            hRow = hRow || parent.getRow(rowIdx, null, frozenCol - 1);
        }
        else {
            var frozenRow = parent.frozenRowCount(sheet);
            hRow = hRow || parent.getRow(rowIdx, rowIdx < frozenRow ? parent.sheetModule.getSelectAllTable() : parent.getRowHeaderTable());
        }
        if (hRow) {
            hRow.style.height = dprHgt + "px";
        }
    }
    setRowHeight(sheet, rowIdx, height);
    parent.setProperties({ sheets: parent.sheets }, true);
    if (notifyRowHgtChange) {
        parent.notify(rowHeightChanged, { rowIdx: rowIdx, threshold: dprHgt - prevHgt });
    }
}
/**
 * @hidden
 * @param {Workbook} context - Specify the context
 * @param {CellStyleModel} style - specify the style.
 * @param {number} lines - specify the lines
 * @param {number} lineHeight - Specify the line height.
 * @returns {number} - get Text Height
 */
function getTextHeight(context, style, lines, lineHeight) {
    if (lines === void 0) { lines = 1; }
    var fontSize = (style && style.fontSize) || context.cellStyle.fontSize;
    var fontSizePx = fontSize.indexOf('pt') > -1 ? parseInt(fontSize, 10) / 0.75 : parseInt(fontSize, 10);
    var hgt = fontSizePx * (lineHeight || getLineHeight(style && style.fontFamily ? style : context.cellStyle)) * lines;
    return Math.ceil(hgt % 1 > 0.9 ? hgt + 1 : hgt); // 0.9 -> if it is nearest value adding extra 1 pixel
}
/**
 * @hidden
 * @param {CellStyleModel} style - cell style
 * @returns {number} - returns line height
 */
function getLineHeight(style) {
    var lineHeight = textLineHeight;
    if (style) {
        if (style.fontFamily === 'Arial Black' || style.fontFamily === 'Comic Sans MS') {
            lineHeight = 1.44;
        }
        else if (style.fontFamily === '"Segoe UI", sans-serif') {
            lineHeight = 1.36;
        }
    }
    return lineHeight;
}
/**
 * @hidden
 * @param {string} text - Specify the text
 * @param {CellStyleModel} style - specify the style.
 * @param {CellStyleModel} parentStyle - specify the parentStyle
 * @param  {boolean} preventDpr - specify the preventDpr.
 * @returns {number} - get Text Width
 */
function getTextWidth(text, style, parentStyle, preventDpr) {
    if (!style) {
        style = parentStyle;
    }
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    context.font = (style.fontStyle || parentStyle.fontStyle) + ' ' + (style.fontWeight || parentStyle.fontWeight) + ' '
        + (style.fontSize || parentStyle.fontSize) + ' ' + (style.fontFamily || parentStyle.fontFamily);
    return preventDpr ? context.measureText(text).width : getDPRValue(context.measureText(text).width, true);
}
/**
 * @hidden
 * @param {string} text - Specify the text
 * @param {number} colwidth - specify the column width
 * @param {CellStyleModel} style - specify the style.
 * @param {CellStyleModel} parentStyle - specify the parentStyle
 * @returns {number} - Setting maximum height while doing formats and wraptext
 */
function getLines(text, colwidth, style, parentStyle) {
    var width;
    var splitTextArr;
    var lWidth;
    var cWidth;
    var prevWidth = 0;
    var textArr = text.toString().split(' ');
    var spaceWidth = getTextWidth(' ', style, parentStyle);
    var hypenWidth;
    var lines;
    var cnt = 0;
    var lineCnt = 0;
    var maxCnt = 0;
    var calculateCount = function (txt, isHypenSplit) {
        if (prevWidth) {
            cnt++;
        }
        if (width / colwidth >= 1) {
            txt.split('').forEach(function (val) {
                cWidth = getTextWidth(val, style, parentStyle, true);
                lWidth += cWidth;
                if (lWidth > colwidth) {
                    cnt++;
                    lWidth = cWidth;
                }
            });
            width = getDPRValue(lWidth, true);
        }
        if (!isHypenSplit) {
            addSpace(width);
        }
        prevWidth = width;
    };
    var addSpace = function (size) {
        width += ((size + spaceWidth) / colwidth >= 1 ? 0 : spaceWidth);
    };
    textArr.forEach(function (txt) {
        lWidth = 0;
        cWidth = 0;
        width = getTextWidth(txt, style, parentStyle);
        lines = (prevWidth + width) / colwidth;
        if (lines > 1) {
            splitTextArr = txt.split('-');
            if (splitTextArr.length > 1) {
                var lastIdx_1 = splitTextArr.length - 1;
                splitTextArr.forEach(function (splitText, index) {
                    lWidth = 0;
                    cWidth = 0;
                    if (!hypenWidth) {
                        hypenWidth = getTextWidth('-', style, parentStyle);
                    }
                    width = getTextWidth(splitText, style, parentStyle);
                    if (index < lastIdx_1) {
                        width += hypenWidth;
                    }
                    lines = (prevWidth + width) / colwidth;
                    if (lines >= 1) {
                        calculateCount(splitText, index !== lastIdx_1);
                    }
                    else {
                        if (index === lastIdx_1 && textArr[textArr.length - 1] !== txt) {
                            addSpace(prevWidth + width);
                        }
                        prevWidth += width;
                    }
                });
            }
            else {
                calculateCount(txt, false);
            }
        }
        else {
            addSpace(prevWidth + width);
            prevWidth += width;
        }
    });
    if (prevWidth) {
        lineCnt = (prevWidth - spaceWidth) / colwidth;
        maxCnt = parseFloat((lineCnt).toString().split('.')[0]);
        cnt += (lineCnt + 0.05 >= maxCnt + 1 ? Math.ceil(lineCnt) + 1 : Math.ceil(lineCnt));
    }
    return cnt;
}
/**
 * calculation for width taken by border inside a cell
 *
 * @param {number} rowIdx - Specify the row index.
 * @param {number} colIdx - Specify the column index.
 * @param {SheetModel} sheet - Specify the sheet.
 * @returns {number} - get border width.
 * @hidden
 */
function getBorderWidth(rowIdx, colIdx, sheet) {
    var width = 0;
    var cell = getCell(rowIdx, colIdx, sheet, null, true);
    var rightSideCell = getCell(rowIdx, colIdx + 1, sheet, null, true);
    if (cell.style) {
        if (cell.style.border) {
            width = (colIdx === 0 ? 2 : 1) * parseFloat(cell.style.border.split('px')[0]);
        }
        else {
            if (colIdx === 0 && cell.style.borderLeft) {
                width = parseFloat(cell.style.borderLeft.split('px')[0]);
            }
            if (cell.style.borderRight) {
                width += parseFloat(cell.style.borderRight.split('px')[0]);
            }
        }
    }
    if (!(cell.style && (cell.style.border || cell.style.borderRight)) && rightSideCell.style && rightSideCell.style.borderLeft) {
        width += parseFloat(rightSideCell.style.borderLeft.split('px')[0]);
    }
    return width > 0 && width < 1 ? 1 : width;
}
/**
 * calculation for height taken by border inside a cell
 *
 * @param {number} rowIdx - Specify the row index.
 * @param {number} colIdx - Specify the column index.
 * @param {SheetModel} sheet - Specify the sheet.
 * @returns {number} - get border height.
 * @hidden
 */
function getBorderHeight(rowIdx, colIdx, sheet) {
    var height = 0;
    var cell = getCell(rowIdx, colIdx, sheet, null, true);
    if (cell.style) {
        if (cell.style.border) {
            height = (rowIdx === 0 ? 2 : 1) * parseFloat(cell.style.border.split('px')[0]);
        }
        else {
            if (rowIdx === 0 && cell.style.borderTop) {
                height = parseFloat(cell.style.borderTop.split('px')[0]);
            }
            if (cell.style.borderBottom) {
                height += parseFloat(cell.style.borderBottom.split('px')[0]);
            }
        }
    }
    var bottomSideCell = getCell(rowIdx + 1, colIdx, sheet, null, true);
    if (!(cell.style && (cell.style.border || cell.style.borderBottom)) && bottomSideCell.style && bottomSideCell.style.borderTop) {
        height += parseFloat(bottomSideCell.style.borderTop.split('px')[0]);
    }
    return Math.ceil(height) || 1; // 1 -> For default bottom border
}
/**
 * Calculating column width by excluding cell padding and border width
 *
 * @param {SheetModel} sheet - Specify the sheet
 * @param {number} rowIdx - Specify the row index.
 * @param {number} startColIdx - Specify the start column index.
 * @param {number} endColIdx - Specify the end column index.
 * @returns {number} - get excluded column width.
 * @hidden
 */
function getExcludedColumnWidth(sheet, rowIdx, startColIdx, endColIdx) {
    if (endColIdx === void 0) { endColIdx = startColIdx; }
    return getColumnsWidth(sheet, startColIdx, endColIdx, true) - getDPRValue((4 + (getBorderWidth(rowIdx, startColIdx, sheet) || 1))); // 4 -> For cell padding
}
/**
 * @param {Workbook} context - Specify the Workbook.
 * @param {number} rowIdx - Specify the row index.
 * @param {number} colIdx - Specify the column index.
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {CellStyleModel} style - Specify the style.
 * @param {number} lines - Specify the lines.
 * @param {number} lineHeight - Specify the line height.
 * @returns {number} - get text height with border.
 * @hidden
 */
function getTextHeightWithBorder(context, rowIdx, colIdx, sheet, style, lines, lineHeight) {
    return getTextHeight(context, style, lines, lineHeight) + getBorderHeight(rowIdx, colIdx, sheet);
}
/**
 * Setting maximum height while doing formats and wraptext
 *
 * @hidden
 * @param {SheetModel} sheet - Specify the sheet
 * @param {number} rIdx - specify the row Index
 * @param {number} cIdx - specify the column Index.
 * @param {number} hgt - specify the hgt
 * @returns {void} - Setting maximum height while doing formats and wraptext
 */
function setMaxHgt(sheet, rIdx, cIdx, hgt) {
    if (!sheet.maxHgts[rIdx]) {
        sheet.maxHgts[rIdx] = {};
    }
    sheet.maxHgts[rIdx][cIdx] = hgt;
}
/**
 * Getting maximum height by comparing each cell's modified height.
 *
 * @hidden
 * @param {SheetModel} sheet - Specify the sheet.
 * @param {number} rIdx - Specify the row index.
 * @returns {number} - Getting maximum height by comparing each cell's modified height.
 */
function getMaxHgt(sheet, rIdx) {
    var maxHgt = 0;
    var rowHgt = sheet.maxHgts[rIdx];
    if (rowHgt) {
        Object.keys(rowHgt).forEach(function (key) {
            if (rowHgt["" + key] > maxHgt) {
                maxHgt = rowHgt["" + key];
            }
        });
    }
    return maxHgt;
}
/**
 * @hidden
 * @param {HTMLElement} ele - Specify the element.
 * @returns {void} - Specify the focus.
 */
function focus(ele) {
    if (!document.activeElement.classList.contains('e-text-findNext-short')) {
        if (Browser.isIE) {
            var scrollX_1 = window.scrollX;
            var scrollY_1 = window.scrollY;
            ele.focus();
            window.scrollTo(scrollX_1, scrollY_1);
        }
        else {
            if (ele.classList.contains('e-input')) {
                var inputEle = ele;
                var position = inputEle.value.length;
                inputEle.setSelectionRange(position, position);
            }
            ele.focus({ preventScroll: true });
        }
    }
}
/**
 * Checks whether a specific range of cells is locked or not.
 *
 * @param {Spreadsheet} parent - Specify the spreadsheet.
 * @param {number[]} rangeIndexes - Specify the range indexes.
 * @returns {boolean} - Returns true if any of the cells is locked and returns false if none of the cells is locked.
 * @hidden
 */
function isLockedCells(parent, rangeIndexes) {
    var sheet = parent.getActiveSheet();
    var hasLockCell;
    var address = !isNullOrUndefined(rangeIndexes) ? rangeIndexes : getSwapRange(getRangeIndexes(sheet.selectedRange));
    for (var row = address[0]; row <= address[2]; row++) {
        for (var col = address[1]; col <= address[3]; col++) {
            var cell = getCell(row, col, sheet);
            if (isLocked(cell, getColumn(sheet, col))) {
                hasLockCell = true;
                break;
            }
        }
    }
    return hasLockCell;
}
/**
 * Checks whether the range is discontinuous or not.
 *
 * @param {string} range - Specify the sheet
 * @returns {boolean} - Returns true if the range is discontinuous range.
 * @hidden
 */
function isDiscontinuousRange(range) {
    return range.includes(' ');
}
/**
 * @hidden
 * @param {Spreadsheet} context - Specifies the context.
 * @param {number[]} range - Specifies the address range.
 * @param {number} sheetIdx - Specifies the sheetIdx.
 * @returns {void} - To clear the range.
 */
function clearRange(context, range, sheetIdx) {
    var sheet = getSheet(context, sheetIdx);
    var skip;
    var cell;
    var newCell;
    var td;
    var prop;
    var uiRefresh = sheetIdx === context.activeSheetIndex;
    var cfRefreshAll;
    var cf = sheet.conditionalFormats && sheet.conditionalFormats.length && [].slice.call(sheet.conditionalFormats);
    var cfRule = [];
    var isCellUpdated = false;
    for (var sRIdx = range[0], eRIdx = range[2]; sRIdx <= eRIdx; sRIdx++) {
        if (isFilterHidden(sheet, sRIdx)) {
            continue;
        }
        for (var sCIdx = range[1], eCIdx = range[3]; sCIdx <= eCIdx; sCIdx++) {
            var args = { cellIdx: [sRIdx, sCIdx], isUnique: false,
                uniqueRange: '' };
            context.notify(checkUniqueRange, args);
            skip = false;
            if (args.uniqueRange !== '') {
                var rangeIndex = getIndexesFromAddress(args.uniqueRange);
                skip = getCell(rangeIndex[0], rangeIndex[1], sheet).value === '#SPILL!';
            }
            // Determine if it's the last iteration of the given range.
            var isLastIteration = (sRIdx === eRIdx) && (sCIdx === eCIdx);
            if (!args.isUnique || skip) {
                cell = getCell(sRIdx, sCIdx, sheet);
                if ((cell && cell.value === 0) || cell && cell.value && (isNullOrUndefined(cell.value) || cell.value !== '')) {
                    isCellUpdated = false;
                    newCell = {};
                    if (cell.formula) {
                        newCell.formula = '';
                    }
                    if (cell.value || cell.value === 0) {
                        newCell.value = '';
                    }
                    if (cell.hyperlink) {
                        newCell.hyperlink = '';
                    }
                    var mergeArgs = { sheet: sheet, cell: cell, rowIdx: sRIdx, colIdx: sCIdx };
                    if (cell.colSpan > 1 || cell.rowSpan > 1) {
                        setVisibleMergeIndex(mergeArgs);
                    }
                    td = context.getCell(mergeArgs.rowIdx, mergeArgs.colIdx);
                    prop = { cell: newCell, rowIdx: sRIdx, colIdx: sCIdx, valChange: true, uiRefresh: uiRefresh, td: td,
                        cellDelete: true, isDelete: !isLastIteration, deletedRange: range };
                    if (!Object.keys(newCell).length || updateCell(context, sheet, prop)) {
                        continue;
                    }
                    if (cf && !cfRefreshAll) {
                        cfRefreshAll = prop.isFormulaDependent;
                        if (!cfRefreshAll) {
                            updateCFModel(cf, cfRule, sRIdx, sCIdx);
                        }
                    }
                    if (td) {
                        if (td.querySelector('.e-cf-databar')) {
                            td.removeChild(td.querySelector('.e-cf-databar'));
                        }
                        if (td.querySelector('.e-iconsetspan')) {
                            td.removeChild(td.querySelector('.e-iconsetspan'));
                        }
                    }
                }
                else {
                    if (!isCellUpdated && prop) {
                        isCellUpdated = isLastIteration;
                        prop.isDelete = !isLastIteration;
                        if (!Object.keys(newCell).length || updateCell(context, sheet, prop)) {
                            continue;
                        }
                    }
                }
            }
        }
    }
    if ((cfRule.length || cfRefreshAll) && uiRefresh) {
        context.notify(applyCF, { cfModel: !cfRefreshAll && cfRule, refreshAll: cfRefreshAll, isAction: true, isEdit: true });
    }
}
/**
 * @param {Spreadsheet} parent - Specifies the spreadsheet instance.
 * @param {number} top - Specifies the top.
 * @returns {number} - It returns bottom offset.
 * @hidden
 */
function getBottomOffset(parent, top) {
    var hgt = 0;
    var sheet = parent.getActiveSheet();
    var viewPortHeight = (sheet.frozenRows ? parent.viewport.height - parent.sheetModule.getColHeaderHeight(sheet, true) :
        parent.viewport.height) - 17 || 20;
    for (var rowIdx = top;; rowIdx++) {
        hgt += getRowHeight(sheet, rowIdx, true);
        if (hgt >= viewPortHeight) {
            return { index: rowIdx, height: hgt };
        }
    }
}
/**
 * @param {Spreadsheet} parent - Specifies the spreadsheet instance.
 * @param {number} left - Specifies the left.
 * @returns {number} -It returns right index using given left value.
 * @hidden
 */
function getRightIdx(parent, left) {
    var width = 0;
    var sheet = parent.getActiveSheet();
    var contWidth = parent.getMainContent().parentElement.offsetWidth -
        parent.sheetModule.getRowHeaderWidth(sheet) - parent.sheetModule.getScrollSize();
    for (var i = left;; i++) {
        width += getColumnWidth(sheet, i, null, true);
        if (width >= contWidth) {
            return i;
        }
    }
}
/**
 * @param {Spreadsheet} spreadsheet - Specifies the spreadsheet instance.
 * @param {number} minWidth - Specifies the minimum width.
 * @returns {void}
 * @hidden
 */
function setColMinWidth(spreadsheet, minWidth) {
    spreadsheet.renderModule.setSheetPanelSize(minWidth);
}
/**
 * Calculating resolution based windows value
 *
 * @param {number} size - Specify the end column index.
 * @returns {number} - get excluded column width.
 * @hidden
 */
function addDPRValue(size) {
    if (window.devicePixelRatio % 1 > 0) {
        var pointValue = (size * window.devicePixelRatio) % 1;
        return size + (pointValue ? ((pointValue > 0.5 ? (1 - pointValue) : -1 * pointValue) / window.devicePixelRatio) : 0);
    }
    return size;
}
/**
 * @param {Spreadsheet} context - Specifies the spreadsheet instance.
 * @param {string[]} keys - Specifies key array.
 * @returns {string} - It returns sheet property of the given key and context.
 * @hidden
 */
function getSheetProperties(context, keys) {
    var skipProps = [];
    if (keys) {
        /* eslint-disable */
        var propList = Object.getPrototypeOf(new Cell(context, 'cells', {}, true)).constructor.prototype.propList;
        var cellProps = propList.colPropNames.concat(propList.complexPropNames).concat(propList.propNames);
        cellProps.push('formattedText');
        propList = Object.getPrototypeOf(new Row(context, 'rows', {}, true)).constructor.prototype.propList;
        var rowProps = propList.colPropNames.concat(propList.complexPropNames).concat(propList.propNames);
        propList = Object.getPrototypeOf(new Column(context, 'columns', {}, true)).constructor.prototype.propList;
        var colProps = propList.colPropNames.concat(propList.complexPropNames).concat(propList.propNames);
        propList = Object.getPrototypeOf(new Sheet(context, 'sheets', {}, true)).constructor.prototype.propList;
        /* eslint-enable */
        var sheetProps = propList.colPropNames.concat(propList.complexPropNames).concat(propList.propNames);
        sheetProps.splice(sheetProps.indexOf('rows'), 1);
        sheetProps.splice(sheetProps.indexOf('columns'), 1);
        sheetProps.splice(sheetProps.indexOf('cells'), 1);
        rowProps.splice(rowProps.indexOf('cells'), 1);
        skipProps.push.apply(skipProps, sheetProps);
        if (keys.indexOf('rows') === -1) {
            skipProps.push.apply(skipProps, rowProps);
        }
        if (keys.indexOf('columns') === -1) {
            skipProps.push.apply(skipProps, colProps);
        }
        if (keys.indexOf('cells') === -1) {
            skipProps.push.apply(skipProps, cellProps);
        }
        var idx_2;
        keys.forEach(function (key) {
            idx_2 = skipProps.indexOf(key);
            if (skipProps.indexOf(key) > -1) {
                skipProps.splice(idx_2, 1);
            }
        });
    }
    else {
        skipProps.push('ranges');
    }
    var eventArgs = { skipProps: skipProps };
    context.notify('getStringifyObject', eventArgs);
    return eventArgs.model;
}
/**
 * Returns the row indexes and column indexes of the charts in the active sheet
 *
 * @param {Spreadsheet} context - Specifies the Spreadsheet instance.
 * @returns { {chart: ChartModel, chartRowIdx: number, chartColIdx: number}[] } - Returns the row indexes and column indexes of the charts in the active sheet
 * @hidden
 */
function getChartsIndexes(context) {
    var chart;
    var chartIndexes = [];
    var sheetName = context.getActiveSheet().name;
    for (var i = 0, len = context.chartColl.length; i < len; i++) {
        chart = context.chartColl[i];
        if (sheetName === getSheetNameFromAddress(chart.range)) {
            var prevTop = { clientY: chart.top, isImage: true };
            var prevLeft = { clientX: chart.left, isImage: true };
            context.notify(getRowIdxFromClientY, prevTop);
            context.notify(getColIdxFromClientX, prevLeft);
            chartIndexes.push({ chart: chart, chartRowIdx: prevTop.clientY, chartColIdx: prevLeft.clientX });
        }
    }
    return chartIndexes;
}
/**
 * Checks if the given range string represents a valid column range.
 *
 * @param {string} range - The range string to validate.
 * @returns {boolean} - Returns `true` if the range is a valid column range, otherwise `false`.
 * @hidden
 */
function isColumnRange(range) {
    return /^[A-Za-z]+:[A-Za-z]+$/.test(range);
}
/**
 * Checks if the given range string represents a valid row range.
 *
 * @param {string} range - The range string to validate.
 * @returns {boolean} - Returns `true` if the range is a valid row range, otherwise `false`.
 * @hidden
 */
function isRowRange(range) {
    return /^[0-9]+:[0-9]+$/.test(range);
}
/**
 * Sets the standard height for a specified sheet in a spreadsheet.
 *
 * @param {Spreadsheet} context - The spreadsheet instance.
 * @param {number} sheetIndex - The index of the sheet to set the standard height.
 * @param {number} standardHeight - The standard height to set for the sheet.
 * @returns {void}
 * @hidden
 */
function setStandardHeight(context, sheetIndex, standardHeight) {
    var sheet = context.sheets[sheetIndex];
    if (sheet) {
        sheet.standardHeight = standardHeight;
        context.dataBind();
    }
}
/**
 * Retrieves the standard height of a specific sheet in the spreadsheet.
 *
 * @param {Spreadsheet} context - The spreadsheet instance.
 * @param {number} sheetIndex - The index of the sheet to retrieve the standard height.
 * @returns {number} - The standard height of the specified sheet.
 * @hidden
 */
function getStandardHeight(context, sheetIndex) {
    return context.sheets[sheetIndex].standardHeight;
}
/**
 * Removes the specified elements from the DOM.
 *
 * @param {HTMLElement[]} elements - An array of HTML elements that need to be removed from the DOM.
 * @returns {void}
 * @hidden
 */
function removeElements(elements) {
    elements.forEach(function (element) {
        if (element && element.parentNode) {
            element.parentNode.removeChild(element);
        }
    });
}

var __extends$8 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the scroll settings.
 */
var ScrollSettings = /** @class */ (function (_super) {
    __extends$8(ScrollSettings, _super);
    function ScrollSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$7([
        Property(false)
    ], ScrollSettings.prototype, "isFinite", void 0);
    __decorate$7([
        Property(true)
    ], ScrollSettings.prototype, "enableVirtualization", void 0);
    return ScrollSettings;
}(ChildProperty));
/**
 * Represents the selection settings.
 */
var SelectionSettings = /** @class */ (function (_super) {
    __extends$8(SelectionSettings, _super);
    function SelectionSettings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$7([
        Property('Multiple')
    ], SelectionSettings.prototype, "mode", void 0);
    return SelectionSettings;
}(ChildProperty));

/**
 * Sheet module is used to render Sheet
 *
 * @hidden
 */
var SheetRender = /** @class */ (function () {
    function SheetRender(parent) {
        this.colGroupWidth = 30; //Row header and selectall table colgroup width
        this.parent = parent;
        this.col = parent.createElement('col');
        this.rowRenderer = parent.serviceLocator.getService('row');
        this.cellRenderer = parent.serviceLocator.getService('cell');
        this.addEventListener();
    }
    SheetRender.prototype.refreshSelectALLContent = function () {
        var cell;
        var sheet = this.parent.getActiveSheet();
        if (sheet.frozenColumns || sheet.frozenRows) {
            var tHead = this.getSelectAllTable().querySelector('thead');
            var row = this.rowRenderer.render();
            tHead.appendChild(row);
            cell = this.parent.createElement('th', { className: 'e-select-all-cell' });
            row.appendChild(cell);
        }
        else {
            cell = this.headerPanel.firstElementChild;
            cell.classList.add('e-select-all-cell');
        }
        cell.appendChild(this.parent.createElement('button', {
            className: 'e-selectall', id: this.parent.element.id + "_select_all",
            attrs: { 'aria-label': this.parent.serviceLocator.getService(locale).getConstant('SelectAll'), 'type': 'button' }
        }));
    };
    SheetRender.prototype.updateLeftColGroup = function (width, rowHdr) {
        if (width) {
            this.colGroupWidth = width;
        }
        if (!rowHdr) {
            rowHdr = this.getRowHeaderPanel();
        }
        var table = rowHdr.querySelector('table');
        var sheet = this.parent.getActiveSheet();
        var frag = document.createDocumentFragment(); // Using a fragment for batch updates
        var colGrp;
        if (width) {
            table.querySelector('colgroup').firstElementChild.style.width = this.colGroupWidth + "px";
        }
        else {
            colGrp = this.parent.createElement('colgroup');
            var col = this.col.cloneNode();
            col.style.width = this.colGroupWidth + "px";
            frag.appendChild(col);
            colGrp.appendChild(frag);
            table.insertBefore(colGrp, table.querySelector('tbody'));
        }
        if (sheet.frozenRows || sheet.frozenColumns) {
            table = this.getSelectAllTable();
            if (width) {
                table.querySelector('colgroup').firstElementChild.style.width = this.colGroupWidth + "px";
            }
            else {
                table.insertBefore(colGrp.cloneNode(true), table.querySelector('thead'));
            }
        }
        this.setPanelWidth(sheet, rowHdr);
        this.setPanelHeight(sheet);
    };
    SheetRender.prototype.setPanelWidth = function (sheet, rowHdr, isRtlChange) {
        var scrollSize = this.getScrollSize(true);
        var width = this.getRowHeaderWidth(sheet);
        var isRtl = this.parent.enableRtl;
        var offset = isRtl ? 'right' : 'left';
        var rtlOffset;
        var colHeaderPanel = this.getColHeaderPanel();
        var contentPanel = this.getContentPanel();
        if (isRtlChange) {
            rtlOffset = isRtl ? 'left' : 'right';
            contentPanel.style["" + rtlOffset] = colHeaderPanel.style["" + rtlOffset] = '';
        }
        if (sheet.frozenColumns) {
            var frozenCol = document.getElementById(this.parent.element.id + '_sheet').getElementsByClassName('e-frozen-column')[0];
            frozenCol.style.height = "calc(100% - " + scrollSize + "px)";
            if (isRtlChange) {
                frozenCol.style["" + rtlOffset] = '';
            }
            frozenCol.style["" + offset] = width - getDPRValue(1) + 'Px';
            frozenCol.style.display = '';
        }
        var widthCalc = "calc(100% - " + width + "px)";
        this.setHeaderPanelWidth(this.getSelectAllContent(), width);
        colHeaderPanel.style.width = widthCalc;
        colHeaderPanel.style["" + offset] = width + 'px';
        this.setHeaderPanelWidth(rowHdr, width);
        contentPanel.style.width = widthCalc;
        contentPanel.style["" + offset] = width + 'px';
        var scroll = (this.contentPanel.nextElementSibling ? this.contentPanel.nextElementSibling : null);
        if (scroll) {
            if (scrollSize) {
                scroll.style.height = scrollSize + 1 + 'px';
            }
            else {
                scroll.style.height = '1px';
                scroll.style.borderTopWidth = '0px';
            }
            scroll = scroll.firstElementChild;
            if (isRtlChange) {
                scroll.style["" + rtlOffset] = '';
            }
            scroll.style["" + offset] = width + 'px';
            scroll.style.width = widthCalc;
            if (Browser.userAgent.indexOf('Mac OS') > -1 && Browser.info.name === 'safari') {
                scroll.style.height = '7px';
                scroll.style.top = '-7px';
            }
        }
    };
    SheetRender.prototype.getScrollSize = function (addOffset) {
        var scrollSize = parseInt(this.headerPanel.style[this.parent.enableRtl ? 'margin-left' : 'margin-right'], 10);
        return scrollSize ? scrollSize + (addOffset ? 1 : 0) : 0;
    };
    SheetRender.prototype.setHeaderPanelWidth = function (content, width) {
        var emptyCol = [].slice.call(content.querySelectorAll('col.e-empty'));
        emptyCol.forEach(function (col) {
            width += parseInt(col.style.width, 10);
        });
        content.style.width = width + 'px';
    };
    SheetRender.prototype.setPanelHeight = function (sheet) {
        var scrollSize = this.getScrollSize(true);
        var contentPanel = this.contentPanel;
        var headerPanel = this.headerPanel;
        if (sheet.frozenRows) {
            var frozenHeight = this.getColHeaderHeight(sheet);
            if (!sheet.showHeaders && !sheet.frozenColumns) {
                headerPanel.style.height = frozenHeight + 'px';
            }
            else {
                headerPanel.style.height = '';
            }
            contentPanel.style.height = "calc(100% - " + (frozenHeight + scrollSize) + "px)";
            var frozenRow = document.getElementById(this.parent.element.id + '_sheet').getElementsByClassName('e-frozen-row')[0];
            frozenRow.style.width = Browser.isDevice ? '100%' : "calc(100% - " + scrollSize + "px)";
            frozenRow.style.top = frozenHeight - 1 - (sheet.showHeaders ? 1 : 0) + 'px';
            frozenRow.style.display = '';
        }
        else {
            contentPanel.style.height = "calc(100% - " + ((sheet.showHeaders ? getDPRValue(31) : 0) + scrollSize) + "px)";
        }
    };
    SheetRender.prototype.renderPanel = function () {
        this.contentPanel = this.parent.createElement('div', { className: 'e-main-panel', attrs: { 'tabindex': '0' } });
        var sheet = this.parent.getActiveSheet();
        var id = this.parent.element.id;
        var frag = document.createDocumentFragment();
        var rowHeader = this.parent.createElement('div', { className: 'e-row-header', id: id + "_row_header" });
        frag.appendChild(rowHeader);
        this.initHeaderPanel();
        if (this.parent.allowScrolling) {
            this.parent.scrollModule.setPadding();
        }
        var sheetEle = document.getElementById(this.parent.element.id + '_sheet');
        if (sheet.frozenColumns) {
            sheetEle.classList.add('e-frozen-columns');
        }
        if (sheet.frozenRows) {
            sheetEle.classList.add('e-frozen-rows');
        }
        this.updateHideHeaders(sheet, sheetEle);
        if (!sheet.showGridLines) {
            sheetEle.classList.add('e-hide-gridlines');
        }
        var content = this.parent.createElement('div', { className: 'e-sheet-content', id: id + "_main_content" });
        frag.appendChild(content);
        if (!this.parent.allowScrolling) {
            content.style.overflow = 'hidden';
        }
        if (sheet.frozenRows) {
            sheetEle.appendChild(this.parent.createElement('div', { className: 'e-frozen-row', styles: 'display: none' }));
        }
        if (sheet.frozenColumns) {
            sheetEle.appendChild(this.parent.createElement('div', { className: 'e-frozen-column', styles: 'display: none' }));
        }
        if (Browser.userAgent.indexOf('Mac OS') > -1 && Browser.info.name === 'safari') {
            sheetEle.classList.add('e-mac-safari');
        }
        this.contentPanel.appendChild(frag); // Append all created elements to the content panel in a single operation using fragment.
    };
    SheetRender.prototype.initHeaderPanel = function () {
        var id = this.parent.element.id;
        var frag = document.createDocumentFragment();
        this.headerPanel = this.parent.createElement('div', { className: 'e-header-panel' });
        var selectAllContainer = this.parent.createElement('div', { className: 'e-selectall-container', id: id + "_selectall" });
        frag.appendChild(selectAllContainer);
        var columnHeader = this.parent.createElement('div', { className: 'e-column-header', id: id + "_col_header" });
        frag.appendChild(columnHeader);
        this.headerPanel.appendChild(frag);
    };
    SheetRender.prototype.createHeaderTable = function () {
        var rowHdrEle = this.contentPanel.querySelector('.e-row-header');
        var sheet = this.parent.getActiveSheet();
        if (sheet.frozenRows || sheet.frozenColumns) {
            this.updateTable(sheet.frozenRows ? ['thead', 'tbody'] : ['thead'], 'selectall', this.headerPanel.querySelector('.e-selectall-container'));
        }
        this.updateTable(sheet.frozenRows ? ['thead', 'tbody'] : ['thead'], 'colhdr', this.headerPanel.querySelector('.e-column-header'));
        this.updateTable(['tbody'], 'rowhdr', rowHdrEle);
        this.updateLeftColGroup(null, rowHdrEle);
    };
    SheetRender.prototype.updateTable = function (tagName, name, appendTo) {
        var _this = this;
        var frag = document.createDocumentFragment();
        var table = this.parent.createElement('table', {
            className: "e-table e-" + name + "-table", attrs: { 'role': 'grid' }
        });
        tagName.forEach(function (tag) { frag.appendChild(_this.parent.createElement(tag)); });
        table.appendChild(frag);
        appendTo.appendChild(table);
    };
    /**
     * It is used to refresh the select all, row header, column header and content of the spreadsheet.
     *
     * @param {SheetRenderArgs} args - Specifies the cells, indexes, direction, skipUpdateOnFirst, top, left, initload properties.
     * @returns {void}
     */
    SheetRender.prototype.renderTable = function (args) {
        var _this = this;
        var indexes;
        var row;
        var hRow;
        var sheet = this.parent.getActiveSheet();
        var cell;
        var cellArgs;
        var mergeBorderRows = [];
        var frag = document.createDocumentFragment();
        frag.appendChild(this.headerPanel);
        frag.appendChild(this.contentPanel);
        if (this.parent.allowScrolling) {
            var scrollPanel = this.parent.createElement('div', { className: 'e-scrollbar' });
            scrollPanel.appendChild(this.parent.createElement('div', { className: 'e-scroller' }));
            frag.appendChild(scrollPanel);
        }
        this.createHeaderTable();
        this.updateTable(['tbody'], 'content', this.contentPanel.lastElementChild);
        var colGrp = this.parent.createElement('colgroup');
        var col;
        var cTBody = this.contentPanel.querySelector('.e-sheet-content tbody');
        this.refreshSelectALLContent();
        var selectAllColGrp = this.getSelectAllContent().querySelector('colgroup');
        var rowHdrColGrp = this.getRowHeaderPanel().querySelector('colgroup');
        var selectAllHdrRow = this.getSelectAllContent().querySelector('thead .e-header-row');
        var rHdrTBody = this.contentPanel.querySelector('.e-row-header tbody');
        var selectAllTBody = this.getSelectAllContent().querySelector('tbody');
        var cHdrTHead = this.headerPanel.querySelector('.e-column-header thead');
        var cHdrTBody = this.headerPanel.querySelector('.e-column-header tbody');
        var cHdrRow = this.rowRenderer.render();
        cHdrTHead.appendChild(cHdrRow);
        this.getColHeaderTable().insertBefore(colGrp, cHdrTHead);
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        var lastFrozenCol = skipHiddenIdx(sheet, frozenCol - 1, false, 'columns');
        this.parent.notify(beforeContentLoaded, { top: args.top, left: args.left });
        var colCount = sheet.colCount.toString();
        var rowCount = sheet.colCount.toString();
        var layout = args.top && args.left ? 'RowColumn' : (args.top ? 'Row' : (args.left ? 'Column' : ''));
        this.parent.getColHeaderTable().setAttribute('aria-colcount', colCount);
        this.parent.getRowHeaderTable().setAttribute('aria-rowcount', rowCount);
        var emptyRow;
        attributes(this.parent.getContentTable(), { 'aria-rowcount': rowCount, 'aria-colcount': colCount });
        args.cells.forEach(function (value, key) {
            indexes = getRangeIndexes(key);
            if (indexes[1] === args.indexes[1] || !row) {
                if (indexes[1] === args.indexes[1]) {
                    hRow = _this.rowRenderer.render(indexes[0], true);
                }
                if (frozenCol && frozenRow && indexes[1] < frozenCol && indexes[0] < frozenRow) {
                    emptyRow = selectAllTBody.querySelector('.e-empty');
                    if (emptyRow) {
                        selectAllTBody.insertBefore(hRow, emptyRow);
                    }
                    else {
                        selectAllTBody.appendChild(hRow);
                    }
                    row = hRow;
                }
                else if (frozenCol && indexes[1] < frozenCol) {
                    rHdrTBody.appendChild(hRow);
                    row = hRow;
                }
                else {
                    row = _this.rowRenderer.render(indexes[0]);
                    if (frozenRow && indexes[0] < frozenRow) {
                        emptyRow = cHdrTBody.querySelector('.e-empty');
                        if (emptyRow) {
                            cHdrTBody.insertBefore(row, emptyRow);
                        }
                        else {
                            cHdrTBody.appendChild(row);
                        }
                    }
                    else {
                        cTBody.appendChild(row);
                    }
                    if (indexes[1] === args.indexes[1]) {
                        if (frozenRow && indexes[0] < frozenRow) {
                            selectAllTBody.appendChild(hRow);
                        }
                        else {
                            rHdrTBody.appendChild(hRow);
                        }
                    }
                }
                if (indexes[1] === args.indexes[1]) {
                    _this.cellRenderer.renderRowHeader(indexes[0], hRow);
                }
            }
            cellArgs = { colIdx: indexes[1], rowIdx: indexes[0], cell: value, mergeBorderRows: mergeBorderRows,
                address: key, lastCell: indexes[1] === args.indexes[3], isHeightCheckNeeded: true, row: row, hRow: hRow,
                pRow: row.previousSibling, pHRow: hRow.previousSibling, isRefreshing: args.isRefreshing,
                first: layout ? (layout.includes('Row') ? (indexes[0] === args.indexes[0] ? 'Row' : (layout.includes('Column') ? (indexes[1] === args.indexes[1] ? 'Column' : '') : '')) : (indexes[1] === args.indexes[1] ? 'Column' : '')) : '' };
            cell = _this.cellRenderer.render(cellArgs);
            var notFirstRow = _this.parent.scrollSettings.enableVirtualization && _this.parent.viewport.topIndex !==
                skipHiddenIdx(sheet, 0, true);
            var notFirstCol = _this.parent.scrollSettings.enableVirtualization && _this.parent.viewport.leftIndex !==
                skipHiddenIdx(sheet, 0, true, 'columns');
            if (notFirstRow) {
                _this.checkRowMerge(indexes, args.indexes, cell, value, sheet);
            }
            if (notFirstCol) {
                _this.checkColMerge(indexes, args.indexes, cell, value, sheet);
            }
            if (frozenCol && indexes[1] === lastFrozenCol) {
                row = null;
            }
            if (indexes[0] === args.indexes[0]) {
                if (frozenCol && indexes[1] < frozenCol) {
                    col = _this.updateCol(sheet, indexes[1], selectAllColGrp);
                    var empty = rowHdrColGrp.querySelector('.e-empty');
                    if (empty) {
                        rowHdrColGrp.insertBefore(col.cloneNode(true), empty);
                    }
                    else {
                        rowHdrColGrp.appendChild(col.cloneNode(true));
                    }
                    _this.cellRenderer.renderColHeader(indexes[1], selectAllHdrRow);
                }
                else {
                    _this.updateCol(sheet, indexes[1], colGrp);
                    _this.cellRenderer.renderColHeader(indexes[1], cHdrRow);
                }
            }
        });
        if (this.parent.isReact) {
            this.parent['renderReactTemplates']();
        }
        updateMergeBorder(this.parent, mergeBorderRows);
        cTBody.parentElement.insertBefore(colGrp.cloneNode(true), cTBody);
        getUpdateUsingRaf(function () {
            if (!_this.parent) {
                return;
            }
            var content = _this.parent.getMainContent();
            var sheetContent = document.getElementById(_this.parent.element.id + '_sheet');
            if (sheetContent.childElementCount && sheetContent.querySelector('.e-header-panel') !== _this.headerPanel) {
                var sheetChild = sheetContent.children;
                for (var i = 0; i < sheetChild.length; i++) {
                    if (!sheetChild[i].classList.contains('e-frozen-row') &&
                        !sheetChild[i].classList.contains('e-frozen-column') &&
                        !sheetChild[i].classList.contains('e-ss-overlay')) {
                        sheetContent.removeChild(sheetChild[i]);
                    }
                }
            }
            sheetContent.appendChild(frag);
            sheetContent.style.backgroundColor = '';
            if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
                _this.parent.notify(applyCF, { indexes: args.indexes });
            }
            _this.checkRowHeightChanged(args, sheet);
            if (args.top) {
                content.parentElement.scrollTop = args.top;
            }
            if (args.left) {
                content.scrollLeft = args.left;
                _this.parent.getColumnHeaderContent().scrollLeft = args.left;
            }
            _this.parent.notify(contentLoaded, args);
            _this.checkTableWidth(sheet);
            _this.parent.notify(editOperation, { action: 'renderEditor', initLoad: args.initLoad && !_this.parent.isOpen });
            if (!args.initLoad && !_this.parent.isOpen) {
                _this.parent.hideSpinner();
            }
            setAriaOptions(content, { busy: false });
            _this.parent.trigger(dataBound, {});
            if (_this.parent.isEdit) {
                _this.parent.notify(initiateEdit, null);
            }
            if (args.openOptions && args.openOptions.eventArgs && args.openOptions.eventArgs.triggerEvent) {
                _this.parent.trigger('openComplete', { response: args.openOptions });
            }
            if (args.initLoad) {
                var triggerEvent = true;
                if (_this.parent.scrollSettings.enableVirtualization) {
                    for (var i = 0; i < sheet.ranges.length; i++) {
                        if (sheet.ranges[i].info.count - 1 > _this.parent.viewport.bottomIndex) {
                            triggerEvent = false;
                            break;
                        }
                    }
                }
                if (triggerEvent) {
                    if (_this.parent.isReact) {
                        setTimeout(function () {
                            if (!_this.parent) {
                                return;
                            }
                            _this.triggerCreatedEvent();
                        });
                    }
                    else {
                        _this.triggerCreatedEvent();
                    }
                }
                else if (!_this.parent.isOpen) {
                    _this.parent.hideSpinner();
                }
            }
        });
    };
    SheetRender.prototype.triggerCreatedEvent = function () {
        if (!this.parent.isOpen) {
            this.parent.hideSpinner();
        }
        if (this.parent.createdHandler) {
            if (this.parent.createdHandler.observers) {
                this.parent['created'].observers =
                    this.parent.createdHandler.observers;
                if (this.parent.isAngular &&
                    this.parent.createdHandler.currentObservers) {
                    this.parent['created'].currentObservers =
                        this.parent.createdHandler.currentObservers;
                }
            }
            else {
                this.parent.setProperties({ created: this.parent.createdHandler }, true);
            }
            this.parent.createdHandler = undefined;
            this.parent.trigger(created, null);
            if (this.parent) {
                this.parent.notify(clearUndoRedoCollection, null);
            }
        }
        if (this.parent) {
            this.parent.notify(spreadsheetCreated, null);
        }
    };
    /**
     * This method is used to check whether row height increased above the viewport after import
     *
     * @param {Object} args - Specify the args.
     * @param {number} args.top - Specify the top value.
     * @param {number} args.left - Specify the left value.
     * @param {SheetModel} sheet - Specify the sheet.
     * @returns {void} - This method is used to check whether row height increased above the viewport after import
     */
    SheetRender.prototype.checkRowHeightChanged = function (args, sheet) {
        var eventArgs = { top: args.top, left: args.left, sheet: sheet };
        this.parent.notify(getUpdatedScrollPosition, eventArgs);
        if (args.top !== eventArgs.top) {
            if (this.parent.scrollModule && this.parent.scrollModule.offset.top.idx && (eventArgs.top - args.top) <
                getRowHeight(sheet, this.parent.scrollModule.offset.top.idx)) {
                this.parent.scrollModule.offset.top.size = eventArgs.top;
            }
            args.top = eventArgs.top;
        }
        if (args.left !== eventArgs.left) {
            if (this.parent.scrollModule && this.parent.scrollModule.offset.left.idx && (eventArgs.left - args.left) <
                getColumnWidth(sheet, this.parent.scrollModule.offset.left.idx)) {
                this.parent.scrollModule.offset.left.size = eventArgs.left;
            }
            args.left = eventArgs.left;
        }
    };
    SheetRender.prototype.checkTableWidth = function (sheet) {
        if (this.parent.scrollSettings.isFinite && !this.parent.scrollSettings.enableVirtualization && sheet.colCount - 1 ===
            this.parent.viewport.rightIndex) {
            var cellsWidth = getColumnsWidth(sheet, this.parent.viewport.leftIndex + this.parent.frozenColCount(sheet), this.parent.viewport.rightIndex);
            var rowHdrWidth = this.getRowHeaderWidth(sheet);
            var scrollSize = this.getScrollSize();
            if (cellsWidth < this.contentPanel.getBoundingClientRect().width - rowHdrWidth - scrollSize) {
                this.getContentPanel().style.width = cellsWidth + 'px';
                this.getColHeaderPanel().style.width = cellsWidth + 'px';
            }
            else if (!this.getContentPanel().style.width.includes('calc')) {
                this.getContentPanel().style.width = "calc(100% - " + rowHdrWidth + "px)";
                this.getColHeaderPanel().style.width = "calc(100% - " + rowHdrWidth + "px)";
            }
        }
    };
    SheetRender.prototype.clearCFResult = function (sheet) {
        if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
            sheet.conditionalFormats.forEach(function (cfRule) {
                delete cfRule.result;
            });
        }
    };
    SheetRender.prototype.refreshColumnContent = function (args) {
        var _this = this;
        var row;
        var count = 0;
        var sheet = this.parent.getActiveSheet();
        var cellArgs;
        var mergeBorderRows = [];
        var frag = document.createDocumentFragment();
        var hFrag = document.createDocumentFragment();
        var tBody = this.parent.element.querySelector('.e-sheet-content tbody');
        var hTBody = this.parent.element.querySelector('.e-column-header tbody');
        var colGrp = this.parent.element.querySelector('.e-sheet-content colgroup');
        colGrp = colGrp.cloneNode();
        frag.appendChild(colGrp);
        tBody = frag.appendChild(tBody.cloneNode(true));
        var hColGrp = colGrp.cloneNode();
        hFrag.appendChild(hColGrp);
        var tHead = this.parent.element.querySelector('.e-column-header thead');
        tHead = hFrag.appendChild(tHead.cloneNode(true));
        var hRow = tHead.querySelector('tr');
        hRow.innerText = '';
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        if (frozenRow) {
            hTBody = hFrag.appendChild(hTBody.cloneNode(true));
        }
        var lastFrozenRow = skipHiddenIdx(sheet, frozenRow - 1, false);
        var notFirstRow = this.parent.scrollSettings.enableVirtualization && this.parent.viewport.topIndex !==
            skipHiddenIdx(sheet, 0, true);
        this.clearCFResult(sheet);
        args.cells.forEach(function (value, key) {
            var indexes = getRangeIndexes(key);
            if (indexes[0] === args.indexes[0]) {
                var col = _this.updateCol(sheet, indexes[1], hColGrp);
                colGrp.appendChild(col.cloneNode());
                _this.cellRenderer.renderColHeader(indexes[1], hRow);
            }
            if (indexes[1] - frozenCol === args.indexes[1]) {
                row = (indexes[0] < frozenRow) ? hTBody.children[count] : tBody.children[count];
                if (row) {
                    row.innerText = '';
                    count++;
                }
                else {
                    return;
                }
            }
            if (!row) {
                return;
            }
            cellArgs = {
                colIdx: indexes[1], rowIdx: indexes[0], cell: value, address: key, row: row, pRow: row.previousSibling,
                first: !args.skipUpdateOnFirst && indexes[1] === args.indexes[1] ? 'Column' :
                    (notFirstRow && indexes[0] === args.indexes[0] ? 'Row' : ''), isRefreshing: true, mergeBorderRows: mergeBorderRows
            };
            var cell = _this.cellRenderer.render(cellArgs);
            _this.checkColMerge(indexes, args.indexes, cell, value, sheet);
            if (frozenRow && indexes[0] === lastFrozenRow) {
                count = 0;
            } // Reset count for frozen row
        });
        var appendColumns = function () {
            var table = _this.getColHeaderTable();
            removeAllChildren(table);
            table.appendChild(hFrag);
            table = _this.getContentTable();
            removeAllChildren(table);
            table.appendChild(frag);
            _this.parent.notify(virtualContentLoaded, { refresh: 'Column', prevRowColCnt: args.prevRowColCnt });
            updateMergeBorder(_this.parent, mergeBorderRows);
            if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
                _this.parent.notify(applyCF, { indexes: args.indexes, isRender: true });
            }
            if (_this.parent.isEdit) {
                _this.parent.notify(forRefSelRender, {});
            }
            if (_this.parent.allowChart) {
                _this.parent.notify(chartRangeSelection, null);
            }
            if (!_this.parent.isOpen) {
                _this.parent.hideSpinner();
            }
            setAriaOptions(_this.parent.getMainContent(), { busy: false });
        };
        if (args.insertDelete) {
            appendColumns();
        }
        else {
            getUpdateUsingRaf(function () { return appendColumns(); });
        }
    };
    SheetRender.prototype.refreshRowContent = function (args) {
        var _this = this;
        var row;
        var hdrRow;
        var colGroupWidth = this.colGroupWidth;
        var sheet = this.parent.getActiveSheet();
        var cell;
        var cellArgs;
        var mergeBorderRows = [];
        var frag = document.createDocumentFragment();
        var hFrag = document.createDocumentFragment();
        var tBody = this.parent.createElement('tbody');
        var hTBody = tBody.cloneNode();
        hFrag.appendChild(hTBody);
        frag.appendChild(tBody);
        var frozenCol = this.parent.frozenColCount(sheet);
        var lastFrozenCol = skipHiddenIdx(sheet, frozenCol - 1, false, 'columns');
        var notFirstCol = this.parent.scrollSettings.enableVirtualization && this.parent.viewport.leftIndex !==
            skipHiddenIdx(sheet, 0, true, 'columns');
        this.clearCFResult(sheet);
        args.cells.forEach(function (value, key) {
            var indexes = getRangeIndexes(key);
            if (indexes[1] === args.indexes[1] || !row) {
                if (indexes[1] === args.indexes[1]) {
                    hdrRow = _this.rowRenderer.render(indexes[0], true);
                }
                if (frozenCol && indexes[1] < frozenCol) {
                    hTBody.appendChild(hdrRow);
                    row = hdrRow;
                }
                else {
                    if (indexes[1] === args.indexes[1]) {
                        hTBody.appendChild(hdrRow);
                    }
                    row = _this.rowRenderer.render(indexes[0]);
                    tBody.appendChild(row);
                }
                if (indexes[1] === args.indexes[1]) {
                    _this.cellRenderer.renderRowHeader(indexes[0], hdrRow);
                    colGroupWidth = getColGroupWidth(indexes[0] + 1);
                }
            }
            if (frozenCol) {
                hdrRow = hTBody.lastElementChild || hdrRow;
            }
            cellArgs = {
                rowIdx: indexes[0], colIdx: indexes[1], cell: value, address: key, lastCell: indexes[1] === args.indexes[3], row: row, hRow: hdrRow, pRow: row.previousSibling,
                pHRow: hdrRow.previousSibling, isHeightCheckNeeded: true, first: !args.skipUpdateOnFirst && indexes[0] === args.indexes[0] ?
                    'Row' : (notFirstCol && indexes[1] === args.indexes[1] ? 'Column' : ''), isRefreshing: true, mergeBorderRows: mergeBorderRows
            };
            cell = _this.cellRenderer.render(cellArgs);
            _this.checkRowMerge(indexes, args.indexes, cell, value, sheet);
            if (frozenCol && indexes[1] === lastFrozenCol) {
                row = null;
            }
        });
        if (this.colGroupWidth !== colGroupWidth) {
            this.updateLeftColGroup(colGroupWidth);
        }
        var rowHeaderTbody = this.contentPanel.querySelector('.e-row-header tbody');
        if (rowHeaderTbody) {
            detach(rowHeaderTbody);
            this.getRowHeaderTable().appendChild(hFrag);
        }
        var sheetContentTbody = this.contentPanel.querySelector('.e-sheet-content tbody');
        if (sheetContentTbody) {
            detach(sheetContentTbody);
            this.getContentTable().appendChild(frag);
        }
        this.parent.notify(virtualContentLoaded, { refresh: 'Row', prevRowColCnt: args.prevRowColCnt });
        updateMergeBorder(this.parent, mergeBorderRows);
        if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
            this.parent.notify(applyCF, { indexes: args.indexes, isRender: true });
        }
        if (this.parent.allowChart) {
            this.parent.notify(chartRangeSelection, {});
        }
        if (this.parent.isEdit) {
            this.parent.notify(forRefSelRender, null);
        }
        if (!this.parent.isOpen) {
            this.parent.hideSpinner();
        }
        setAriaOptions(this.parent.getMainContent(), { busy: false });
    };
    SheetRender.prototype.updateCol = function (sheet, idx, appendTo) {
        var col = this.col.cloneNode();
        col.style.width = formatUnit(getColumnWidth(sheet, idx, null, true));
        if (appendTo) {
            var empty = appendTo.querySelector('.e-empty');
            return empty ? appendTo.insertBefore(col, empty) : appendTo.appendChild(col);
        }
        else {
            return col;
        }
    };
    SheetRender.prototype.updateColContent = function (args) {
        var _this = this;
        getUpdateUsingRaf(function () {
            var row;
            var refChild;
            var rowCount = 0;
            var cell;
            var col;
            var skipRender;
            var cellArgs;
            var sheet = _this.parent.getActiveSheet();
            var mergeBorderRows = [];
            var hRow = _this.parent.element.querySelector('.e-column-header .e-header-row');
            var colGrp = _this.parent.element.querySelector('.e-sheet-content colgroup');
            var hColGrp = _this.parent.element.querySelector('.e-column-header colgroup');
            var hRefChild = hRow.firstElementChild;
            var colRefChild = colGrp.firstElementChild;
            var hColRefChild = hColGrp.firstElementChild;
            var tBody = _this.parent.element.querySelector('.e-sheet-content tbody');
            var hTBody = _this.parent.element.querySelector('.e-column-header tbody');
            var frozenRow = _this.parent.frozenRowCount(sheet);
            var frozenCol = _this.parent.frozenColCount(sheet);
            var lastFrozenRow = skipHiddenIdx(sheet, frozenRow - 1, false);
            var firstRow = skipHiddenIdx(sheet, args.indexes[0], true);
            _this.clearCFResult(sheet);
            args.cells.forEach(function (value, key) {
                if (skipRender) {
                    return;
                }
                var indexes = getRangeIndexes(key);
                if (args.direction === 'first' && indexes[1] === args.indexes[1]) {
                    _this.checkColMerge([indexes[0], _this.parent.viewport.leftIndex + frozenCol], args.indexes, ((indexes[0] < frozenRow ? hTBody : tBody).rows[rowCount] ||
                        { cells: [] }).cells[(args.indexes[3] - args.indexes[1]) + 1], getCell(indexes[0], _this.parent.viewport.leftIndex + frozenCol, sheet) || {}, sheet);
                }
                if (indexes[0] === firstRow) {
                    if (args.direction === 'last') {
                        col = _this.col.cloneNode();
                        col.style.width = formatUnit(getColumnWidth(sheet, indexes[1], null, true));
                        colGrp.insertBefore(col, colRefChild);
                        hColGrp.insertBefore(col.cloneNode(), hColRefChild);
                        _this.cellRenderer.renderColHeader(indexes[1], hRow, hRefChild);
                    }
                    else {
                        col = _this.updateCol(sheet, indexes[1], colGrp);
                        hColGrp.appendChild(col.cloneNode());
                        _this.cellRenderer.renderColHeader(indexes[1], hRow);
                    }
                    if (_this.parent.scrollSettings.enableVirtualization && args.direction) {
                        /* eslint-disable */
                        detach(colGrp[args.direction + 'ElementChild']);
                        detach(hColGrp[args.direction + 'ElementChild']);
                        detach(hRow[args.direction + 'ElementChild']);
                        /* eslint-enable */
                    }
                }
                if (indexes[1] === args.indexes[1]) {
                    if (indexes[0] < frozenRow) {
                        row = hTBody.children[rowCount];
                    }
                    else {
                        row = tBody.children[rowCount];
                        if (!row) {
                            skipRender = true;
                            return;
                        }
                    }
                    rowCount++;
                    refChild = row.firstElementChild;
                }
                cellArgs = {
                    colIdx: indexes[1], rowIdx: indexes[0], cell: value, address: key, row: row, pRow: row.previousSibling,
                    lastCell: indexes[1] === args.indexes[3], isHeightCheckNeeded: args.direction === 'first', first: args.direction ===
                        'last' && !args.skipUpdateOnFirst && indexes[1] === args.indexes[1] ? 'Column' : '', checkNextBorder: args.direction
                        === 'last' && indexes[3] === args.indexes[3] ? 'Column' : '', isRefreshing: args.direction === 'first',
                    mergeBorderRows: mergeBorderRows
                };
                if (args.direction === 'last') {
                    cellArgs.refChild = refChild;
                    cell = _this.cellRenderer.render(cellArgs);
                    _this.checkColMerge(indexes, args.indexes, cell, value, sheet, ((indexes[0] < frozenRow ? hTBody : tBody).rows[rowCount - 1] ||
                        { cells: [] }).cells[1]);
                }
                else {
                    cell = _this.cellRenderer.render(cellArgs);
                }
                if (_this.parent.scrollSettings.enableVirtualization && args.direction) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    detach(row[args.direction + 'ElementChild']);
                }
                if (frozenRow && indexes[0] === lastFrozenRow) {
                    rowCount = 0;
                }
            });
            _this.parent.notify(virtualContentLoaded, { refresh: 'Column', prevRowColCnt: args.prevRowColCnt });
            updateMergeBorder(_this.parent, mergeBorderRows);
            if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
                _this.parent.notify(applyCF, { indexes: args.indexes, isRender: true });
            }
            if (_this.parent.allowChart) {
                _this.parent.notify(chartRangeSelection, null);
            }
            if (_this.parent.isEdit) {
                _this.parent.notify(forRefSelRender, {});
            }
            if (!_this.parent.isOpen) {
                _this.parent.hideSpinner();
            }
            setAriaOptions(_this.parent.getMainContent(), { busy: false });
        });
    };
    SheetRender.prototype.updateRowContent = function (args) {
        var _this = this;
        var mainContent = this.parent.getMainContent();
        if (args.direction === '' && !mainContent.children.length) {
            return;
        }
        var row;
        var hRow;
        var cell;
        var firstRow;
        var cellArgs;
        var mergeBorderRows = [];
        var count = 0;
        var colGroupWidth = this.colGroupWidth;
        var sheet = this.parent.getActiveSheet();
        var tBody = mainContent.querySelector('tbody');
        var rTBody = this.parent.getRowHeaderContent().querySelector('tbody');
        var rFrag = document.createDocumentFragment();
        var frag = document.createDocumentFragment();
        this.parent.showSpinner();
        var frozenCol = this.parent.frozenColCount(sheet);
        var frozenRow = this.parent.frozenRowCount(sheet);
        var firstCol = skipHiddenIdx(sheet, args.indexes[1], true, 'columns');
        var lastFrozenCol = skipHiddenIdx(sheet, frozenCol - 1, false, 'columns');
        this.clearCFResult(sheet);
        args.cells.forEach(function (value, cKey) {
            var indexes = getRangeIndexes(cKey);
            var pHRow;
            var pRow;
            if (args.direction === 'first' && indexes[0] === args.indexes[0]) {
                pHRow = rTBody.rows[rTBody.rows.length - 1];
                pRow = tBody.rows[tBody.rows.length - 1];
                if (firstRow === undefined) {
                    firstRow = (indexes[1] < frozenCol ? rTBody : tBody).rows[(args.indexes[2] - args.indexes[0]) + 1] || null;
                }
                _this.checkRowMerge([_this.parent.viewport.topIndex + frozenRow, indexes[1]], args.indexes, (firstRow || { cells: [] }).cells[indexes[1] < frozenCol ? count + 1 : count], getCell(_this.parent.viewport.topIndex + frozenRow, indexes[1], sheet) || {}, sheet);
            }
            if (indexes[1] === firstCol || !row) {
                if (indexes[1] === firstCol) {
                    hRow = _this.rowRenderer.render(indexes[0], true);
                }
                if (frozenCol && indexes[1] < frozenCol) {
                    rFrag.appendChild(hRow);
                    row = hRow;
                }
                else {
                    row = _this.rowRenderer.render(indexes[0]);
                    frag.appendChild(row);
                    if (indexes[1] === firstCol) {
                        rFrag.appendChild(hRow);
                    }
                    if (_this.parent.scrollSettings.enableVirtualization && args.direction) {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        detach(tBody[args.direction + 'ElementChild']);
                    }
                }
                if (indexes[1] === firstCol) {
                    _this.cellRenderer.renderRowHeader(indexes[0], hRow);
                    colGroupWidth = getColGroupWidth(indexes[0] + 1);
                    if (_this.parent.scrollSettings.enableVirtualization && args.direction) {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        detach(rTBody[args.direction + 'ElementChild']);
                    }
                }
            }
            if (frozenCol) {
                hRow = rFrag.lastElementChild || hRow;
            }
            cellArgs = {
                colIdx: indexes[1], rowIdx: indexes[2], cell: value, address: cKey, row: row,
                lastCell: indexes[1] === args.indexes[3], pHRow: hRow.previousSibling || pHRow, checkNextBorder: args.direction === 'last' &&
                    indexes[2] === args.indexes[2] ? 'Row' : '', pRow: row.previousSibling || pRow, isHeightCheckNeeded: args.direction === 'first'
                    || args.direction === '', hRow: hRow, first: args.direction === 'last' && !args.skipUpdateOnFirst && indexes[0] ===
                    args.indexes[0] ? 'Row' : '', isRefreshing: args.direction === 'first', mergeBorderRows: mergeBorderRows
            };
            cell = _this.cellRenderer.render(cellArgs);
            if (args.direction === 'last' && tBody.rows.length) {
                _this.checkRowMerge(indexes, args.indexes, cell, value, sheet, (indexes[1] < frozenCol ? rTBody : tBody).rows[0].cells[indexes[1] < frozenCol ? count + 1 : count]);
            }
            count++;
            if (frozenCol && indexes[1] === lastFrozenCol) {
                row = null;
                firstRow = undefined;
                count = 0;
            }
        });
        if (this.colGroupWidth !== colGroupWidth) {
            this.updateLeftColGroup(colGroupWidth);
        }
        if (args.direction === 'last') {
            rTBody.insertBefore(rFrag, rTBody.firstElementChild);
            tBody.insertBefore(frag, tBody.firstElementChild);
        }
        else {
            rTBody.appendChild(rFrag);
            tBody.appendChild(frag);
        }
        if (this.parent.scrollSettings.enableVirtualization) {
            this.parent.notify(virtualContentLoaded, { refresh: 'Row', prevRowColCnt: args.prevRowColCnt });
        }
        updateMergeBorder(this.parent, mergeBorderRows);
        if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
            this.parent.notify(applyCF, { indexes: args.indexes, isRender: true });
        }
        if (this.parent.isEdit) {
            this.parent.notify(forRefSelRender, null);
        }
        if (this.parent.allowChart) {
            this.parent.notify(chartRangeSelection, {});
        }
        if (!this.parent.isOpen) {
            this.parent.hideSpinner();
        }
        setAriaOptions(this.parent.getMainContent(), { busy: false });
    };
    SheetRender.prototype.checkRowMerge = function (indexes, range, cell, model, sheet, firstcell) {
        if (this.parent.scrollSettings.enableVirtualization && cell &&
            (!isNullOrUndefined(model.rowSpan) || !isNullOrUndefined(model.colSpan))) {
            var frozenRow = this.parent.frozenRowCount(sheet);
            var viewportTopIdx = this.parent.viewport.topIndex + frozenRow;
            if (indexes[0] === viewportTopIdx) {
                if (model.rowSpan < 0) {
                    var args = { td: cell, rowIdx: indexes[0], colIdx: indexes[1], isRow: true,
                        isFreezePane: true
                    };
                    this.parent.notify(checkMerge, args);
                    if (args.insideFreezePane) {
                        return;
                    }
                    if (viewportTopIdx >= range[2]) {
                        this.refreshPrevMerge(range[2] + 1, indexes[1]);
                    }
                }
                if (firstcell) {
                    this.refreshFirstCell(indexes[0] + (range[2] - range[0]) + 1, indexes[1], sheet, firstcell);
                }
            }
            else if (model.rowSpan > 1) {
                var prevTopIdx = range[2] + 1;
                if (indexes[0] + model.rowSpan - 1 >= prevTopIdx && indexes[0] < prevTopIdx) {
                    this.refreshPrevMerge(prevTopIdx, indexes[1], viewportTopIdx);
                }
            }
        }
    };
    SheetRender.prototype.refreshPrevMerge = function (prevTopIdx, colIndex, currTopIdx) {
        var td = this.parent.getCell(prevTopIdx, colIndex, this.parent.getRow(currTopIdx ?
            currTopIdx : 0, null, colIndex));
        if (td) {
            this.cellRenderer.refresh(prevTopIdx, colIndex, null, td);
        }
    };
    SheetRender.prototype.refreshFirstCell = function (rowIdx, colIdex, sheet, firstcell) {
        var cell = getCell(rowIdx, colIdex, sheet, false, true);
        if (cell.rowSpan < 0 || cell.colSpan < 0) {
            this.cellRenderer.refresh(rowIdx, colIdex, null, firstcell);
        }
    };
    SheetRender.prototype.checkColMerge = function (indexes, range, cell, model, sheet, firstcell) {
        if (this.parent.scrollSettings.enableVirtualization && cell && (!isNullOrUndefined(model.rowSpan) ||
            !isNullOrUndefined(model.colSpan))) {
            var frozenCol = this.parent.frozenColCount(sheet);
            var viewportLeftIdx = this.parent.viewport.leftIndex + frozenCol;
            if (indexes[1] === viewportLeftIdx) {
                if (model.colSpan < 0) {
                    var e = {
                        td: cell,
                        colIdx: indexes[1], rowIdx: indexes[0], isFreezePane: true
                    };
                    this.parent.notify(checkMerge, e);
                    if (e.insideFreezePane) {
                        return;
                    }
                    if (viewportLeftIdx >= range[3]) {
                        var td = this.parent.getCell(indexes[0], indexes[3] + 1, this.parent.getRow(indexes[0], null, indexes[3] + 1));
                        if (td) {
                            this.cellRenderer.refresh(indexes[0], range[3] + 1, null, td);
                        }
                    }
                }
                if (firstcell) {
                    this.refreshFirstCell(indexes[0], indexes[1] + (range[3] - range[1]) + 1, sheet, firstcell);
                }
            }
            else if (model.colSpan > 1) {
                if (indexes[1] + model.colSpan - 1 >= range[3] + 1 && indexes[1] < range[3] + 1) {
                    var td = this.parent.getCell(indexes[0], indexes[3] + 1, this.parent.getRow(indexes[0], null, indexes[3] + 1));
                    if (td) {
                        this.cellRenderer.refresh(indexes[0], range[3] + 1, null, td);
                    }
                }
            }
        }
    };
    SheetRender.prototype.toggleGridlines = function () {
        var sheetElem = document.getElementById(this.parent.element.id + '_sheet');
        if (this.parent.getActiveSheet().showGridLines) {
            sheetElem.classList.remove('e-hide-gridlines');
        }
        else {
            sheetElem.classList.add('e-hide-gridlines');
        }
    };
    /**
     * Used to toggle row and column headers.
     *
     * @returns {void}
     */
    SheetRender.prototype.showHideHeaders = function () {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        getUpdateUsingRaf(function () {
            if (sheet.showHeaders) {
                var content = _this.getContentPanel();
                _this.setPanelWidth(sheet, _this.getRowHeaderPanel());
                _this.setPanelHeight(sheet);
                document.getElementById(_this.parent.element.id + '_sheet').classList.remove('e-hide-headers');
                _this.getColHeaderPanel().scrollLeft = content.scrollLeft;
                _this.parent.selectRange(sheet.selectedRange);
            }
            else {
                _this.updateHideHeaders(sheet, document.getElementById(_this.parent.element.id + '_sheet'));
                _this.setPanelHeight(sheet);
                if (_this.parent.frozenColCount(sheet) || _this.parent.frozenRowCount(sheet)) {
                    _this.setPanelWidth(sheet, _this.getRowHeaderPanel());
                    _this.parent.selectRange(sheet.selectedRange);
                }
                else {
                    _this.getContentPanel().style.width = '';
                    _this.getContentPanel().style[_this.parent.enableRtl ? 'right' : 'left'] = '';
                }
                _this.getScrollElement().style.left = _this.getRowHeaderWidth(sheet) + 'px';
            }
        });
    };
    SheetRender.prototype.updateHideHeaders = function (sheet, ele) {
        if (!sheet.showHeaders) {
            ele.classList.add('e-hide-headers');
        }
    };
    SheetRender.prototype.rowHeightChanged = function (args) {
        if (args.threshold || args.isHideShow) {
            var sheet = this.parent.getActiveSheet();
            if (args.rowIdx < this.parent.frozenRowCount(sheet)) {
                this.setPanelHeight(sheet);
            }
        }
    };
    SheetRender.prototype.colWidthChanged = function (args) {
        if (args.threshold || args.isHideShow) {
            var sheet = this.parent.getActiveSheet();
            if (args.colIdx < this.parent.frozenColCount(sheet)) {
                this.setPanelWidth(sheet, this.getRowHeaderPanel());
            }
            this.checkTableWidth(sheet);
        }
    };
    SheetRender.prototype.getRowHeaderWidth = function (sheet, skipFreezeCheck, addScaling) {
        var width = 0;
        var scaleX = addScaling ? this.parent.viewport.scaleX : 1;
        if (!skipFreezeCheck && sheet.frozenColumns) {
            var leftIdx = getCellIndexes(sheet.topLeftCell)[1];
            width = getColumnsWidth(sheet, leftIdx, leftIdx + sheet.frozenColumns - 1, true) / scaleX;
        }
        width += (sheet.showHeaders ? getDPRValue(this.colGroupWidth) / scaleX : 0);
        return width;
    };
    SheetRender.prototype.getColHeaderHeight = function (sheet, skipHeader) {
        var topIndex = getCellIndexes(sheet.topLeftCell)[0];
        return (sheet.showHeaders && !skipHeader ? getDPRValue(31) : 0) +
            getRowsHeight(sheet, topIndex, topIndex + sheet.frozenRows - 1, true);
    };
    /**
     * Get the select all table element of spreadsheet
     *
     * @returns {HTMLElement} - Select all content element.
     */
    SheetRender.prototype.getSelectAllContent = function () {
        return this.headerPanel.getElementsByClassName('e-selectall-container')[0];
    };
    /**
     * Get the horizontal scroll element of spreadsheet
     *
     * @returns {HTMLElement} - Select all content element.
     */
    SheetRender.prototype.getScrollElement = function () {
        var elem;
        if (this.contentPanel) {
            elem = (this.contentPanel.parentElement || this.contentPanel.nextElementSibling);
        }
        return elem && elem.querySelector('.e-scroller');
    };
    /**
     * Get the select all table element of spreadsheet
     *
     * @returns {HTMLTableElement} - Select all table element.
     */
    SheetRender.prototype.getSelectAllTable = function () {
        return this.headerPanel.getElementsByClassName('e-selectall-table')[0];
    };
    /**
     * Get the column header element of spreadsheet
     *
     * @returns {HTMLTableElement} - Column header table element.
     */
    SheetRender.prototype.getColHeaderTable = function () {
        return this.headerPanel.getElementsByClassName('e-colhdr-table')[0];
    };
    /**
     * Get the row header table element of spreadsheet
     *
     * @returns {HTMLTableElement} - Row header table element.
     */
    SheetRender.prototype.getRowHeaderTable = function () {
        return this.contentPanel.getElementsByClassName('e-rowhdr-table')[0];
    };
    /**
     * Get the main content table element of spreadsheet
     *
     * @returns {Element} - Content table element.
     */
    SheetRender.prototype.getContentTable = function () {
        return this.contentPanel.getElementsByClassName('e-content-table')[0];
    };
    /**
     * Get the row header div element of spreadsheet
     *
     * @returns {HTMLElement} - Row header panel element.
     */
    SheetRender.prototype.getRowHeaderPanel = function () {
        return this.contentPanel.getElementsByClassName('e-row-header')[0];
    };
    /**
     * Get the column header div element of spreadsheet
     *
     * @returns {HTMLElement} - Column header panel element.
     */
    SheetRender.prototype.getColHeaderPanel = function () {
        return this.headerPanel.getElementsByClassName('e-column-header')[0];
    };
    /**
     * Get the main content div element of spreadsheet
     *
     * @returns {HTMLElement} - Content panel element.
     */
    SheetRender.prototype.getContentPanel = function () {
        return this.contentPanel.getElementsByClassName('e-sheet-content')[0];
    };
    SheetRender.prototype.addEventListener = function () {
        this.parent.on(created, this.triggerCreatedEvent, this);
        this.parent.on(rowHeightChanged, this.rowHeightChanged, this);
        this.parent.on(colWidthChanged, this.colWidthChanged, this);
        this.parent.on(spreadsheetDestroyed, this.removeEventListener, this);
    };
    /**
     * Clears the internal properties of Sheet module.
     *
     * @returns {void}
     */
    SheetRender.prototype.destroy = function () {
        if (this.headerPanel) {
            removeAllChildren(this.headerPanel);
            this.headerPanel.remove();
        }
        this.headerPanel = null;
        if (this.contentPanel) {
            removeAllChildren(this.contentPanel);
            this.contentPanel.remove();
        }
        this.contentPanel = null;
        if (this.col) {
            removeAllChildren(this.col);
            this.col.remove();
        }
        this.col = null;
        this.rowRenderer = null;
        this.cellRenderer = null;
        this.colGroupWidth = null;
        this.parent = null;
    };
    SheetRender.prototype.removeEventListener = function () {
        this.parent.off(created, this.triggerCreatedEvent);
        this.parent.off(rowHeightChanged, this.rowHeightChanged);
        this.parent.off(colWidthChanged, this.colWidthChanged);
        this.parent.off(spreadsheetDestroyed, this.removeEventListener);
    };
    return SheetRender;
}());

/**
 * RowRenderer module is used for creating row element
 *
 * @hidden
 */
var RowRenderer = /** @class */ (function () {
    function RowRenderer(parent) {
        this.parent = parent;
        this.element = this.parent.createElement('tr');
        this.cellRenderer = parent.serviceLocator.getService('cell');
        this.parent.on(deInitProperties, this.initProps, this);
    }
    RowRenderer.prototype.render = function (index, isRowHeader, preventHiddenCls) {
        var row = this.element.cloneNode();
        var sheet = this.parent.getActiveSheet();
        if (index === undefined) {
            row.classList.add('e-header-row');
            return row;
        }
        row.classList.add('e-row');
        if (!this.bottomBorderWidth) {
            var width = 1;
            if (window.devicePixelRatio % 1 > 0) {
                var pointValue = (1 * window.devicePixelRatio) % 1;
                width = 1 + (pointValue ? ((pointValue > 0.5 ? (1 - pointValue) : -1 * pointValue) / window.devicePixelRatio) : 0);
            }
            this.bottomBorderWidth = width;
        }
        var rowHeight = getRowHeight(sheet, index, true);
        var actualRowHgt = getRowHeight(sheet, index);
        var rowStyles = {
            height: rowHeight + "px",
            lineHeight: (actualRowHgt < 20) ?
                (rowHeight > this.bottomBorderWidth ? rowHeight - this.bottomBorderWidth + "px" : '0px') : ''
        };
        Object.assign(row.style, rowStyles);
        attributes(row, { 'aria-rowindex': (index + 1).toString() });
        if (isRowHeader && !preventHiddenCls) {
            if (actualRowHgt < 20) {
                var width = 4 + (this.bottomBorderWidth - 1);
                row.style.lineHeight = rowHeight >= width ? rowHeight - width + "px" :
                    (rowHeight > this.bottomBorderWidth ? rowHeight - this.bottomBorderWidth + "px" : '0px');
                if (!row.classList.contains('e-reach-fntsize')) {
                    row.classList.add('e-reach-fntsize');
                }
            }
            if (isHiddenRow(sheet, index + 1) && !isHiddenRow(sheet, index - 1)) {
                row.classList.add('e-hide-start');
            }
            if (index !== 0 && isHiddenRow(sheet, index - 1) && !isHiddenRow(sheet, index + 1)) {
                row.classList.add('e-hide-end');
            }
        }
        return row;
    };
    RowRenderer.prototype.refresh = function (index, pRow, hRow, header, preventHiddenCls) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var row;
        if (header) {
            row = this.render(index, header, preventHiddenCls);
            this.cellRenderer.renderRowHeader(index, row);
        }
        else {
            var i_1;
            var len_1;
            var updateCells = function () {
                while (i_1 <= len_1) {
                    if (!isHiddenCol(sheet, i_1)) {
                        _this.cellRenderer.render({ colIdx: i_1, rowIdx: index, cell: getCell(index, i_1, sheet), address: getCellAddress(index, i_1),
                            lastCell: i_1 === len_1, row: row, hRow: hRow, isHeightCheckNeeded: true, pRow: pRow, first: index === _this.parent.viewport.topIndex && skipHiddenIdx(sheet, index, true) !==
                                skipHiddenIdx(sheet, 0, true) ? 'Row' : '', skipFormatCheck: isImported(_this.parent), checkCF: true });
                    }
                    i_1++;
                }
            };
            var frozenCol = this.parent.frozenColCount(sheet);
            if (frozenCol) {
                row = hRow;
                i_1 = getCellIndexes(sheet.topLeftCell)[0];
                len_1 = frozenCol - 1;
                updateCells();
            }
            row = this.render(index, header, preventHiddenCls);
            i_1 = this.parent.viewport.leftIndex + frozenCol;
            len_1 = this.parent.viewport.rightIndex;
            updateCells();
        }
        return row;
    };
    RowRenderer.prototype.initProps = function () {
        this.bottomBorderWidth = null;
    };
    /**
     * Clears the internal properties of RowRenderer module.
     *
     * @returns {void}
     */
    RowRenderer.prototype.destroy = function () {
        this.parent.off(deInitProperties, this.initProps);
        if (this.element) {
            this.element.remove();
        }
        if (this.bottomBorderWidth) {
            this.bottomBorderWidth = null;
        }
        this.parent = null;
        this.element = null;
    };
    return RowRenderer;
}());

/**
 * CellRenderer class which responsible for building cell content.
 *
 * @hidden
 */
var CellRenderer = /** @class */ (function () {
    function CellRenderer(parent) {
        this.parent = parent;
        this.element = this.parent.createElement('td');
        this.th = this.parent.createElement('th', { className: 'e-header-cell' });
        this.tableRow = parent.createElement('tr', { className: 'e-row' });
        this.parent.on(updateView, this.updateView, this);
        this.parent.on(calculateFormula, this.calculateFormula, this);
    }
    CellRenderer.prototype.renderColHeader = function (index, row, refChild) {
        var headerCell = this.th.cloneNode();
        var headerText = getColumnHeaderText(index + 1);
        headerCell.innerText = headerText;
        var sheet = this.parent.getActiveSheet();
        if (isHiddenCol(sheet, index + 1)) {
            headerCell.classList.add('e-hide-start');
        }
        if (index !== 0 && isHiddenCol(sheet, index - 1)) {
            headerCell.classList.add('e-hide-end');
        }
        if (refChild) {
            row.insertBefore(headerCell, refChild);
        }
        else {
            row.appendChild(headerCell);
        }
        this.parent.trigger('beforeCellRender', { cell: null, element: headerCell, address: headerText, colIndex: index });
        this.parent.notify(renderFilterCell, { td: headerCell, rowIndex: 0, colIndex: index });
        attributes(headerCell, { 'aria-colindex': (index + 1).toString(), 'tabindex': '-1' });
    };
    CellRenderer.prototype.renderRowHeader = function (index, row, refChild) {
        var headerCell = this.element.cloneNode();
        addClass([headerCell], 'e-header-cell');
        attributes(headerCell, { 'role': 'rowheader', 'tabindex': '-1' });
        headerCell.innerText = (index + 1).toString();
        if (refChild) {
            row.insertBefore(headerCell, refChild);
        }
        else {
            row.appendChild(headerCell);
        }
        this.parent.trigger('beforeCellRender', { cell: null, element: headerCell, address: "" + (index + 1), rowIndex: index });
    };
    CellRenderer.prototype.render = function (args) {
        var sheet = this.parent.getActiveSheet();
        args.td = this.element.cloneNode();
        args.td.className = 'e-cell';
        attributes(args.td, { 'aria-colindex': (args.colIdx + 1).toString(), 'tabindex': '-1' });
        if (this.checkMerged(args)) {
            this.createImageAndChart(args);
            if (args.refChild) {
                args.row.insertBefore(args.td, args.refChild);
            }
            else {
                args.row.appendChild(args.td);
            }
            return args.td;
        }
        args.isRefresh = false;
        args.skipFormatCheck = isImported(this.parent);
        var isTemplateCell = this.update(args);
        if (args.checkCF && args.cell && sheet.conditionalFormats && sheet.conditionalFormats.length) {
            this.parent.notify(applyCF, { indexes: [args.rowIdx, args.colIdx], cell: args.cell, ele: args.td, isRender: true });
        }
        if (!args.td.classList.contains('e-cell-template')) {
            this.parent.notify(renderFilterCell, { td: args.td, rowIndex: args.rowIdx, colIndex: args.colIdx });
        }
        if (args.refChild) {
            args.row.insertBefore(args.td, args.refChild);
        }
        else {
            args.row.appendChild(args.td);
        }
        var evtArgs = { cell: args.cell, element: args.td, address: args.address, rowIndex: args.rowIdx, colIndex: args.colIdx, needHeightCheck: false, row: args.row };
        this.parent.trigger('beforeCellRender', evtArgs);
        if (!sheet.rows[args.rowIdx] || !sheet.rows[args.rowIdx].customHeight) {
            if (evtArgs.needHeightCheck || (isTemplateCell && evtArgs.element && evtArgs.element.children.length)) {
                var clonedCell = evtArgs.element.cloneNode(true);
                clonedCell.style.width = getColumnWidth(sheet, args.colIdx, true) + 'px';
                this.tableRow.appendChild(clonedCell);
            }
            if (args.lastCell && this.tableRow.childElementCount) {
                var rowHeight = this.getRowHeightOnInit();
                if (rowHeight > getRowHeight(sheet, args.rowIdx)) {
                    setRowEleHeight(this.parent, sheet, rowHeight, args.rowIdx, args.row, args.hRow);
                }
                this.tableRow.innerText = '';
            }
        }
        this.setWrapByValue(sheet, args);
        return evtArgs.element;
    };
    CellRenderer.prototype.setWrapByValue = function (sheet, args) {
        if (args.cell && isNullOrUndefined(args.cell.wrap) && args.cell.value && args.cell.value.toString().includes('\n')) {
            setCell(args.rowIdx, args.colIdx, sheet, { wrap: true }, true);
            this.parent.notify(wrapEvent, { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx], wrap: true, initial: true, sheet: sheet,
                td: args.td, row: args.row, hRow: args.hRow });
        }
    };
    CellRenderer.prototype.update = function (args) {
        var sheet = this.parent.getActiveSheet();
        var isTemplateCell;
        // In SF-425413 ticket, we suggested to add the template property in the cell model to render the template using updateCell method.
        if (!args.isRefresh || (args.cell && args.cell.template)) {
            var compiledTemplate = this.processTemplates(args.cell, args.rowIdx, args.colIdx);
            if (compiledTemplate) {
                if (typeof compiledTemplate === 'string') {
                    args.td.innerHTML = compiledTemplate;
                }
                else {
                    removeAllChildren(args.td);
                    append(compiledTemplate, args.td);
                }
                args.td.classList.add('e-cell-template');
                isTemplateCell = true;
            }
        }
        if (args.isRefresh) {
            if (args.td.rowSpan) {
                this.mergeFreezeRow(sheet, args.rowIdx, args.colIdx, args.td.rowSpan, args.row, true);
                args.td.removeAttribute('rowSpan');
            }
            if (args.td.colSpan) {
                this.mergeFreezeCol(sheet, args.rowIdx, args.colIdx, args.td.colSpan, true);
                args.td.removeAttribute('colSpan');
            }
            if (this.checkMerged(args)) {
                return false;
            }
            if (args.cell && !args.cell.hyperlink) {
                var hyperlink = args.td.querySelector('.e-hyperlink');
                if (hyperlink) {
                    detach(hyperlink);
                }
            }
            if (args.cell && args.td.children.length > 0 &&
                args.td.children[args.td.childElementCount - 1].className.indexOf('e-addNoteIndicator') > -1) {
                var noteIndicator = args.td.querySelector('.e-addNoteIndicator');
                if (noteIndicator) {
                    detach(noteIndicator);
                }
            }
            if ((!args.cell || !this.parent.allowWrap) && args.td.classList.contains('e-wraptext')) {
                args.td.classList.remove('e-wraptext');
            }
        }
        if (args.cell && args.cell.formula && !args.isRandomFormula && this.parent.calculationMode === 'Automatic') {
            this.calculateFormula(args);
            if (args.fillType && args.fillType === 'FillWithoutFormatting') {
                delete args.cell.format;
            }
        }
        var formatArgs = { value: args.cell && args.cell.value,
            type: args.cell && getTypeFromFormat(args.cell.format), format: args.cell && args.cell.format,
            formattedText: args.cell && args.cell.value, isRightAlign: false, cell: args.cell, rowIndex: args.rowIdx, colIndex: args.colIdx,
            td: args.td, skipFormatCheck: args.skipFormatCheck, refresh: true };
        if (this.parent.calculationMode === 'Manual' && args.cell && !args.cell.value && args.cell.value !== '' && args.cell.formula) {
            formatArgs.value = 0;
            args.cell.value = '0';
        }
        if (args.cell) {
            this.parent.notify(getFormattedCellObject, formatArgs);
        }
        this.parent.refreshNode(args.td, formatArgs);
        var style = {};
        if (args.cell) {
            if (args.cell.style) {
                if (args.cell.style.properties) {
                    style = skipDefaultValue(args.cell.style, true);
                }
                else {
                    style = args.cell.style;
                }
            }
            if (formatArgs.color !== undefined) {
                style = Object.assign({}, style);
                style.color = formatArgs.color;
            }
            this.createImageAndChart(args);
            if (args.cell.hyperlink) {
                if (args.fillType === 'FillFormattingOnly') {
                    args.td.style.textDecoration = 'underline';
                    args.td.style.color = '#00e';
                }
                else {
                    this.parent.notify(createHyperlinkElement, {
                        cell: args.cell, style: style, td: args.td, rowIdx: args.rowIdx,
                        colIdx: args.colIdx, fillType: args.fillType, action: args.action
                    });
                }
            }
            if (args.cell.rowSpan > 1) {
                var rowSpan = args.rowSpan || (args.cell.rowSpan -
                    this.parent.hiddenCount(args.rowIdx, args.rowIdx + (args.cell.rowSpan - 1)));
                if (rowSpan > 1) {
                    args.td.rowSpan = rowSpan;
                    this.mergeFreezeRow(sheet, args.rowIdx, args.colIdx, rowSpan, args.row);
                }
            }
            if (args.cell.colSpan > 1) {
                var colSpan = args.colSpan || (args.cell.colSpan -
                    this.parent.hiddenCount(args.colIdx, args.colIdx + (args.cell.colSpan - 1), 'columns'));
                if (colSpan > 1) {
                    args.td.colSpan = colSpan;
                    this.mergeFreezeCol(sheet, args.rowIdx, args.colIdx, colSpan);
                }
            }
            if (!isNullOrUndefined(args.cell.notes) && !args.fillType) {
                this.parent.notify(createNoteIndicator, { targetElement: args.td, rowIndex: args.rowIdx, columnIndex: args.colIdx });
            }
            else if (!isNullOrUndefined(args.td) && args.td.children.length > 0 && args.td.children[args.td.childElementCount - 1].className.indexOf('e-addNoteIndicator') > -1) {
                this.parent.notify(deleteNote, { rowIndex: args.rowIdx, columnIndex: args.colIdx });
            }
            if (args.cell.isNoteEditable) {
                this.parent.notify(showNote, { rowIndex: args.rowIdx, columnIndex: args.colIdx, isNoteEditable: true,
                    isScrollWithNote: true, cellElement: args.td });
            }
        }
        if (args.isRefresh && isNullOrUndefined(args.cell) && !isNullOrUndefined(args.td) && args.td.children.length > 0 && args.td.children[args.td.childElementCount - 1].className.indexOf('e-addNoteIndicator') > -1) {
            this.parent.notify(deleteNote, { rowIndex: args.rowIdx, columnIndex: args.colIdx });
        }
        if (args.isRefresh) {
            this.removeStyle(args.td, args.rowIdx, args.colIdx);
        }
        if (args.lastCell && this.parent.chartColl && this.parent.chartColl.length) {
            this.parent.notify(refreshChart, {
                cell: args.cell, rIdx: args.rowIdx, cIdx: args.colIdx, sheetIdx: this.parent.activeSheetIndex, isSelectAll: args.isSelectAll
            });
        }
        this.applyStyle(args, style);
        if (args.checkNextBorder === 'Row') {
            var borderTop = this.parent.getCellStyleValue(['borderTop'], [Number(this.parent.getContentTable().rows[0].getAttribute('aria-rowindex')) - 1, args.colIdx]).borderTop;
            if (borderTop !== '' && (!args.cell || !args.cell.style || !args.cell.style.bottomPriority)) {
                args.style = { borderBottom: borderTop };
                this.parent.notify(applyCellFormat, args);
            }
        }
        if (args.checkNextBorder === 'Column') {
            var borderLeft = this.parent.getCellStyleValue(['borderLeft'], [args.rowIdx, args.colIdx + 1]).borderLeft;
            if (borderLeft !== '' && (!args.cell || !args.cell.style || (!args.cell.style.borderRight && !args.cell.style.border))) {
                args.style = { borderRight: borderLeft };
                this.parent.notify(applyCellFormat, args);
            }
        }
        if (args.cell && !isNullOrUndefined(args.cell.wrap)) {
            this.parent.notify(wrapEvent, {
                range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx], wrap: args.cell.wrap, sheet: sheet, initial: true, td: args.td,
                row: args.row, hRow: args.hRow, isCustomHgt: !args.isRefresh &&
                    getRowHeight(sheet, args.rowIdx) > (sheet && sheet.standardHeight ? sheet.standardHeight : 20)
            });
        }
        var validation;
        var col;
        if (args.cell && args.cell.validation) {
            validation = args.cell.validation;
            col = sheet.columns && sheet.columns[args.colIdx];
        }
        else {
            validation = checkColumnValidation(sheet.columns && sheet.columns[args.colIdx], args.rowIdx, args.colIdx) &&
                sheet.columns[args.colIdx].validation;
        }
        if (validation) {
            if (validation.isHighlighted) {
                args.validation = validation;
                args.col = col;
                this.parent.notify(updateHighlight, args);
            }
            if (validation.type === 'List' && !args.isRefresh && args.address === sheet.activeCell) {
                args.validation = validation;
                this.parent.notify(addListValidationDropdown, args);
            }
        }
        return isTemplateCell;
    };
    CellRenderer.prototype.applyStyle = function (args, style) {
        if (Object.keys(style).length || Object.keys(this.parent.commonCellStyle).length || args.lastCell) {
            args.style = extend({}, this.parent.commonCellStyle, style);
            this.parent.notify(applyCellFormat, args);
        }
    };
    CellRenderer.prototype.createImageAndChart = function (args) {
        if (args.cell.chart && args.cell.chart.length > 0) {
            this.parent.notify(setChart, { chart: args.cell.chart, isInitCell: true, range: getCellAddress(args.rowIdx, args.colIdx),
                isUndoRedo: false });
        }
        if (args.cell.image && args.cell.image.length > 0) {
            for (var i = 0; i < args.cell.image.length; i++) {
                if (args.cell.image[i]) {
                    this.parent.notify(createImageElement, {
                        options: {
                            src: args.cell.image[i].src, id: args.cell.image[i].id,
                            height: args.cell.image[i].height, width: args.cell.image[i].width,
                            top: args.cell.image[i].top, left: args.cell.image[i].left
                        },
                        range: getRangeAddress([args.rowIdx, args.colIdx, args.rowIdx, args.colIdx]), isPublic: false
                    });
                }
            }
        }
    };
    CellRenderer.prototype.calculateFormula = function (args) {
        if (args.cell.value !== undefined && args.cell.value !== null) {
            var eventArgs_1 = { action: 'checkFormulaAdded', added: true, address: args.address, sheetId: (args.sheetIndex === undefined ? this.parent.getActiveSheet() :
                    getSheet(this.parent, args.sheetIndex)).id.toString() };
            this.parent.notify(workbookFormulaOperation, eventArgs_1);
            if (eventArgs_1.added) {
                return;
            }
        }
        else if (args.formulaRefresh) {
            args.cell.value = '';
        }
        var isFormula = checkIsFormula(args.cell.formula);
        var eventArgs = {
            action: 'refreshCalculate', value: args.cell.formula, rowIndex: args.rowIdx, colIndex: args.colIdx,
            isFormula: isFormula, sheetIndex: args.sheetIndex, isRefreshing: args.isRefreshing,
            isDependentRefresh: args.isDependentRefresh, isRandomFormula: args.isRandomFormula, fillType: args.fillType
        };
        if (this.parent.calculationMode === 'Automatic' || args.isSortAction || args.action === 'calculate' || args.isDependentRefresh) {
            this.parent.notify(workbookFormulaOperation, eventArgs);
        }
        if ((args.cell.value === undefined && this.parent.calculationMode === 'Manual' && !this.parent.getActiveSheet().isSheetCalculated)
            || (this.parent.isEdit && args.cell.value === '#CIRCULARREF!')) {
            args.cell.value = '0';
        }
        args.cell.value = getCell(args.rowIdx, args.colIdx, isNullOrUndefined(args.sheetIndex) ? this.parent.getActiveSheet() :
            getSheet(this.parent, args.sheetIndex)).value;
        if (isFormula && (args.cell.formula.indexOf('^+') > -1 || args.cell.formula.indexOf('&+') > -1)) {
            args.cell.formula = eventArgs.value; // for correcting the formulas 5^+3=>5^3 and 5&+3=>5&3 while rendering like Excel.
        }
    };
    CellRenderer.prototype.checkMerged = function (args) {
        if (args.cell && (args.cell.colSpan < 0 || args.cell.rowSpan < 0)) {
            var sheet = this.parent.getActiveSheet();
            if (sheet.frozenRows || sheet.frozenColumns) {
                var mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                var frozenRow = this.parent.frozenRowCount(sheet);
                var frozenCol = this.parent.frozenColCount(sheet);
                var setDisplay = void 0;
                mergeArgs.range = mergeArgs.range;
                if (sheet.frozenRows && sheet.frozenColumns) {
                    if (mergeArgs.range[0] < frozenRow && mergeArgs.range[1] < frozenCol) {
                        setDisplay = args.rowIdx < frozenRow && args.colIdx < frozenCol;
                    }
                    else if (mergeArgs.range[0] < frozenRow) {
                        setDisplay = args.rowIdx < frozenRow;
                    }
                    else if (mergeArgs.range[1] < frozenCol) {
                        setDisplay = args.colIdx < frozenCol;
                    }
                    else {
                        setDisplay = true;
                    }
                }
                else {
                    setDisplay = frozenRow ? (mergeArgs.range[0] >= frozenRow || args.rowIdx < frozenRow) : (mergeArgs.range[1] >= frozenCol
                        || args.colIdx < frozenCol);
                }
                if (setDisplay) {
                    args.td.style.display = 'none';
                }
            }
            else {
                args.td.style.display = 'none';
            }
            args.isMerged = true;
            var rowSpan = args.cell.rowSpan;
            var colSpan = args.cell.colSpan;
            if (colSpan < 0 || rowSpan < 0) {
                this.parent.notify(checkPrevMerge, args);
                if (colSpan < 0 && args.cell.style && args.cell.style.borderTop) {
                    this.applyStyle(args, { borderTop: args.cell.style.borderTop });
                }
                if (rowSpan < 0 && args.cell.style && args.cell.style.borderLeft) {
                    this.applyStyle(args, { borderLeft: args.cell.style.borderLeft });
                }
            }
            return args.isMerged;
        }
        return false;
    };
    CellRenderer.prototype.mergeFreezeRow = function (sheet, rowIdx, colIdx, rowSpan, tr, unMerge) {
        var frozenRow = this.parent.frozenRowCount(sheet);
        if (frozenRow && rowIdx < frozenRow && rowIdx + (rowSpan - 1) >= frozenRow) {
            var rowEle = void 0;
            var spanRowTop = 0;
            var height = void 0;
            var frozenCol = this.parent.frozenColCount(sheet);
            var row = tr || this.parent.getRow(rowIdx, null, colIdx);
            var emptyRows = [].slice.call(row.parentElement.querySelectorAll('.e-empty'));
            if (unMerge) {
                var curEmptyLength = rowIdx + rowSpan - frozenRow;
                if (curEmptyLength < emptyRows.length) {
                    return;
                }
                else {
                    var curSpan = 0;
                    if (curEmptyLength === emptyRows.length) {
                        var curCell = void 0;
                        var i = void 0;
                        var len = void 0;
                        if (frozenCol && colIdx < frozenCol) {
                            i = getCellIndexes(sheet.topLeftCell)[1];
                            len = frozenCol;
                        }
                        else {
                            i = this.parent.viewport.leftIndex + frozenCol;
                            len = this.parent.viewport.rightIndex;
                        }
                        for (i; i < len; i++) {
                            if (i === colIdx) {
                                continue;
                            }
                            curCell = getCell(rowIdx, i, sheet, false, true);
                            if (curCell.rowSpan && rowIdx + curCell.rowSpan - frozenRow > curSpan) {
                                curSpan = rowIdx + curCell.rowSpan - frozenRow;
                            }
                        }
                        if (curSpan === curEmptyLength) {
                            return;
                        }
                    }
                    else {
                        curSpan = curEmptyLength;
                    }
                    var lastRowIdx = rowIdx + (rowSpan - 1);
                    for (var i = curSpan, len = emptyRows.length; i < len; i++) {
                        spanRowTop += getRowHeight(sheet, lastRowIdx);
                        lastRowIdx--;
                        detach(emptyRows.pop());
                    }
                    this.updateSpanTop(colIdx, frozenCol, spanRowTop, true);
                    if (!emptyRows.length) {
                        this.updateColZIndex(colIdx, frozenCol, true);
                    }
                    return;
                }
            }
            this.updateColZIndex(colIdx, frozenCol);
            for (var i = frozenRow, len = rowIdx + (rowSpan - 1); i <= len; i++) {
                height = getRowHeight(sheet, skipHiddenIdx(sheet, i, true), true);
                spanRowTop += -height;
                if (frozenRow + emptyRows.length > i) {
                    continue;
                }
                rowEle = row.cloneNode();
                rowEle.classList.add('e-empty');
                rowEle.style.visibility = 'hidden';
                rowEle.style.height = height + 'px';
                row.parentElement.appendChild(rowEle);
            }
            this.updateSpanTop(colIdx, frozenCol, spanRowTop);
        }
    };
    CellRenderer.prototype.updateSpanTop = function (colIdx, frozenCol, top, update) {
        var mainPanel = this.parent.serviceLocator.getService('sheet').contentPanel;
        if (update) {
            if (!parseInt(mainPanel.style.top, 10)) {
                return;
            }
            top = parseInt(mainPanel.style.top, 10) + top;
        }
        if (frozenCol && colIdx < frozenCol && (update || !parseInt(mainPanel.style.top, 10) || top <
            parseInt(mainPanel.style.top, 10))) {
            mainPanel.style.top = top + 'px';
            var scroll_1 = mainPanel.nextElementSibling;
            if (scroll_1) {
                scroll_1.style.top = top + 'px';
            }
        }
    };
    CellRenderer.prototype.mergeFreezeCol = function (sheet, rowIdx, colIdx, colSpan, unMerge) {
        var frozenCol = this.parent.frozenColCount(sheet);
        if (frozenCol && colIdx < frozenCol && colIdx + (colSpan - 1) >= frozenCol) {
            var col = void 0;
            var width = void 0;
            var frozenRow = this.parent.frozenRowCount(sheet);
            var colGrp = (rowIdx < frozenRow ? this.parent.getSelectAllContent() : this.parent.getRowHeaderContent()).querySelector('colgroup');
            var emptyCols = [].slice.call(colGrp.querySelectorAll('.e-empty'));
            if (unMerge) {
                var curEmptyLength = colIdx + colSpan - frozenCol;
                if (curEmptyLength < emptyCols.length) {
                    return;
                }
                else {
                    var curSpan = 0;
                    if (curEmptyLength === emptyCols.length) {
                        var curCell = void 0;
                        var len = void 0;
                        var i = void 0;
                        if (frozenRow && rowIdx < frozenRow) {
                            len = frozenRow;
                            i = getCellIndexes(sheet.topLeftCell)[0];
                        }
                        else {
                            len = this.parent.viewport.bottomIndex;
                            i = this.parent.viewport.topIndex + frozenRow;
                        }
                        for (i; i < len; i++) {
                            if (i === rowIdx) {
                                continue;
                            }
                            curCell = getCell(i, colIdx, sheet, false, true);
                            if (curCell.colSpan && colIdx + curCell.colSpan - frozenCol > curSpan) {
                                curSpan = colIdx + curCell.colSpan - frozenCol;
                            }
                        }
                        if (curSpan === curEmptyLength) {
                            return;
                        }
                    }
                    else {
                        curSpan = curEmptyLength;
                    }
                    for (var i = curSpan, len = emptyCols.length; i < len; i++) {
                        detach(emptyCols.pop());
                    }
                    this.parent.serviceLocator.getService('sheet').setPanelWidth(sheet, this.parent.getRowHeaderContent());
                    if (!emptyCols.length) {
                        this.updateRowZIndex(rowIdx, frozenRow, true);
                    }
                    return;
                }
            }
            this.updateRowZIndex(rowIdx, frozenRow);
            for (var i = frozenCol, len = colIdx + (colSpan - 1); i <= len; i++) {
                if (frozenCol + emptyCols.length > i) {
                    continue;
                }
                col = colGrp.childNodes[0].cloneNode();
                col.classList.add('e-empty');
                col.style.visibility = 'hidden';
                width = getColumnWidth(sheet, skipHiddenIdx(sheet, i, true, 'columns'), null, true);
                col.style.width = width + 'px';
                colGrp.appendChild(col);
                if (i === len) {
                    this.parent.serviceLocator.getService('sheet').setPanelWidth(sheet, this.parent.getRowHeaderContent());
                }
            }
        }
    };
    CellRenderer.prototype.updateColZIndex = function (colIdx, frozenCol, remove) {
        if (colIdx < frozenCol) {
            this.updateSelectAllZIndex(remove);
        }
        else {
            this.parent.getColumnHeaderContent().style.zIndex = remove ? '' : '2';
            this.updatedHeaderZIndex(remove);
        }
    };
    CellRenderer.prototype.updateSelectAllZIndex = function (remove) {
        var frozenRowEle = this.parent.element.querySelector('.e-frozen-row');
        var frozenColEle = this.parent.element.querySelector('.e-frozen-column');
        if (remove) {
            this.parent.getSelectAllContent().style.zIndex = '';
            if (frozenRowEle) {
                frozenRowEle.style.zIndex = '';
            }
            if (frozenColEle) {
                frozenColEle.style.zIndex = '';
            }
        }
        else {
            var rowHeader = this.parent.getRowHeaderContent();
            var colHeader = this.parent.getColumnHeaderContent();
            if (rowHeader.style.zIndex || colHeader.style.zIndex) {
                this.parent.getSelectAllContent().style.zIndex = '3';
                if (frozenRowEle) {
                    frozenRowEle.style.zIndex = '4';
                }
                if (frozenColEle) {
                    frozenColEle.style.zIndex = '4';
                }
                var rowHdrSelection = rowHeader.querySelector('.e-selection');
                if (rowHdrSelection) {
                    rowHdrSelection.style.zIndex = '3';
                }
                var colHdrSelection = colHeader.querySelector('.e-selection');
                if (colHdrSelection) {
                    colHdrSelection.style.zIndex = '3';
                }
            }
            else {
                this.parent.getSelectAllContent().style.zIndex = '2';
            }
        }
    };
    CellRenderer.prototype.updatedHeaderZIndex = function (remove) {
        if (!remove && this.parent.getSelectAllContent().style.zIndex === '2') {
            this.parent.getSelectAllContent().style.zIndex = '3';
            var frozenRowEle = this.parent.element.querySelector('.e-frozen-row');
            var frozenColEle = this.parent.element.querySelector('.e-frozen-column');
            if (frozenColEle) {
                frozenColEle.style.zIndex = '4';
            }
            if (frozenRowEle) {
                frozenRowEle.style.zIndex = '4';
            }
            var rowHdrSelection = this.parent.getRowHeaderContent().querySelector('.e-selection');
            if (rowHdrSelection) {
                rowHdrSelection.style.zIndex = '3';
            }
            var colHdrSelection = this.parent.getColumnHeaderContent().querySelector('.e-selection');
            if (colHdrSelection) {
                colHdrSelection.style.zIndex = '3';
            }
        }
    };
    CellRenderer.prototype.updateRowZIndex = function (rowIdx, frozenRow, remove) {
        if (rowIdx < frozenRow) {
            this.updateSelectAllZIndex(remove);
        }
        else {
            this.parent.getRowHeaderContent().style.zIndex = remove ? '' : '2';
            this.updatedHeaderZIndex(remove);
        }
    };
    CellRenderer.prototype.processTemplates = function (cell, rowIdx, colIdx) {
        var sheet = this.parent.getActiveSheet();
        var ranges = sheet.ranges;
        var range;
        for (var j = 0, len = ranges.length; j < len; j++) {
            if (ranges[j].template) {
                range = getRangeIndexes(ranges[j].address.length ? ranges[j].address : ranges[j].startCell);
                if (range[0] <= rowIdx && range[1] <= colIdx && range[2] >= rowIdx && range[3] >= colIdx) {
                    if (cell) {
                        return this.compileCellTemplate(ranges[j].template, Object.assign({ rowIndex: rowIdx, colIndex: colIdx }, cell));
                    }
                    else {
                        if (!getCell(rowIdx, colIdx, sheet, true)) {
                            return this.compileCellTemplate(ranges[j].template, Object.assign({ rowIndex: rowIdx, colIndex: colIdx }, getCell(rowIdx, colIdx, sheet, null, true)));
                        }
                    }
                }
            }
        }
        return '';
    };
    CellRenderer.prototype.compileCellTemplate = function (template, cell) {
        var compiledStr;
        if (typeof template === 'string') {
            var templateString = void 0;
            if (template.trim().indexOf('#') === 0) {
                templateString = document.querySelector(template).innerHTML.trim();
            }
            else {
                templateString = template;
            }
            compiledStr = compile(templateString);
            if (!(this.parent).isVue || this.isSelector(template)) {
                return compiledStr(cell, this.parent, 'ranges', '', true)[0].outerHTML;
            }
            else {
                return compiledStr(cell, this.parent, 'ranges', '');
            }
        }
        else {
            compiledStr = compile(template);
            var compiledTemplate = compiledStr(cell, this.parent, 'ranges', '');
            return compiledTemplate[0] ? compiledTemplate : [compiledTemplate];
        }
    };
    CellRenderer.prototype.isSelector = function (template) {
        try {
            return !!document.querySelector(template);
        }
        catch (err) {
            return false;
        }
    };
    CellRenderer.prototype.getRowHeightOnInit = function () {
        var tTable = this.parent.createElement('table', { className: 'e-table e-test-table' });
        var tBody = tTable.appendChild(this.parent.createElement('tbody'));
        tBody.appendChild(this.tableRow);
        this.parent.element.appendChild(tTable);
        var height = this.tableRow.getBoundingClientRect().height;
        this.parent.element.removeChild(tTable);
        return height < 20 ? 20 : height;
    };
    CellRenderer.prototype.removeStyle = function (element, rowIdx, colIdx) {
        var cellStyle;
        if (element.style.length) {
            cellStyle = this.parent.getCellStyleValue(['borderLeft', 'border'], [rowIdx, colIdx + 1]);
            var rightBorder_1 = cellStyle.borderLeft || cellStyle.border;
            cellStyle = this.parent.getCellStyleValue(['borderTop', 'border'], [rowIdx + 1, colIdx]);
            var bottomBorder_1 = cellStyle.borderTop || cellStyle.border;
            if (rightBorder_1 || bottomBorder_1) {
                [].slice.call(element.style).forEach(function (style) {
                    if (rightBorder_1 && bottomBorder_1) {
                        if (!style.includes('border-right') && !style.includes('border-bottom')) {
                            element.style.removeProperty(style);
                        }
                    }
                    else if ((rightBorder_1 && !(style.indexOf('border-right') > -1) && (!bottomBorder_1 || bottomBorder_1 === 'none')) ||
                        (bottomBorder_1 && !(style.indexOf('border-bottom') > -1) && (!rightBorder_1 || rightBorder_1 === 'none'))) {
                        element.style.removeProperty(style);
                    }
                });
            }
            else {
                element.removeAttribute('style');
            }
        }
        var prevRowCell = this.parent.getCell(rowIdx - 1, colIdx);
        if (prevRowCell && prevRowCell.style.borderBottom) {
            var prevRowIdx = Number(prevRowCell.parentElement.getAttribute('aria-rowindex')) - 1;
            cellStyle = this.parent.getCellStyleValue(['borderBottom', 'border'], [prevRowIdx, colIdx]);
            if (!(cellStyle.borderBottom || cellStyle.border)) {
                prevRowCell.style.borderBottom = '';
            }
        }
        var prevColCell = element.previousElementSibling;
        if (prevColCell && prevColCell.style.borderRight) {
            colIdx = Number(prevColCell.getAttribute('aria-colindex')) - 1;
            cellStyle = this.parent.getCellStyleValue(['borderRight', 'border'], [rowIdx, colIdx]);
            if (!(cellStyle.borderRight || cellStyle.border)) {
                prevColCell.style.borderRight = '';
            }
        }
    };
    /**
     * @hidden
     * @param {number[]} range - Specifies the range.
     * @param {boolean} refreshing - Specifies the refresh.
     * @param {boolean} checkWrap - Specifies the range.
     * @param {boolean} checkHeight - Specifies the checkHeight.
     * @param {boolean} checkCF - Specifies the check for conditional format.
     * @param {boolean} skipFormatCheck - Specifies whether to skip the format checking while applying the number format.
     * @param {boolean} checkFormulaAdded - Specifies whether to check the formula added or not.
     * @param {boolean} isFromAutoFillOption - Specifies whether the value is from auto fill option or not.
     * @param {boolean} isHeightCheckNeeded - Specifies whether the refreshing is from undo-redo with format action.
     * @param {boolean} isSortAction - Specifies whether to check the sort action performed or not.
     * @param {boolean} isSelectAll - Specifies the all sheet cells selected or not.
     * @param {PreviousCellDetails[]} cells - Specifies the undo redo cell collections.
     * @returns {void}
     */
    CellRenderer.prototype.refreshRange = function (range, refreshing, checkWrap, checkHeight, checkCF, skipFormatCheck, checkFormulaAdded, isFromAutoFillOption, isHeightCheckNeeded, isSortAction, isSelectAll, cells) {
        if (isHeightCheckNeeded === void 0) { isHeightCheckNeeded = true; }
        var sheet = this.parent.getActiveSheet();
        var cRange = range.slice();
        var args;
        var cell;
        if (inView(this.parent, cRange, true)) {
            var cellIdx = 0;
            for (var i = cRange[0]; i <= cRange[2]; i++) {
                if (isHiddenRow(sheet, i)) {
                    continue;
                }
                for (var j = cRange[1]; j <= cRange[3]; j++) {
                    if (isHiddenCol(sheet, j)) {
                        continue;
                    }
                    cell = this.parent.getCell(i, j);
                    if (cell) {
                        args = { rowIdx: i, colIdx: j, td: cell, cell: getCell(i, j, sheet), isRefreshing: refreshing, lastCell: j ===
                                cRange[3], isRefresh: true, isHeightCheckNeeded: isHeightCheckNeeded, manualUpdate: true, first: '', onActionUpdate: checkHeight, skipFormatCheck: skipFormatCheck, isFromAutoFillOption: isFromAutoFillOption,
                            isSelectAll: isSelectAll, rowHeight: cells && cells[cellIdx] && cells[cellIdx].rowHeight };
                        cellIdx++;
                        if (checkFormulaAdded) {
                            args.address = getCellAddress(i, j);
                        }
                        this.update(args);
                        if (checkCF && sheet.conditionalFormats && sheet.conditionalFormats.length) {
                            this.parent.notify(applyCF, { indexes: [i, j], isAction: true });
                        }
                        this.parent.notify(renderFilterCell, { td: cell, rowIndex: i, colIndex: j });
                        if (checkWrap) {
                            this.setWrapByValue(sheet, args);
                        }
                    }
                    if (this.parent.calculationMode === 'Manual' && isSortAction) {
                        if (!cell) {
                            args = {
                                rowIdx: i, colIdx: j, td: cell, cell: getCell(i, j, sheet), isRefreshing: refreshing, lastCell: j ===
                                    cRange[3], isRefresh: true, isHeightCheckNeeded: isHeightCheckNeeded, manualUpdate: true, first: '',
                                onActionUpdate: checkHeight, skipFormatCheck: skipFormatCheck, isFromAutoFillOption: isFromAutoFillOption,
                                isSortAction: isSortAction
                            };
                        }
                        else {
                            args.isSortAction = isSortAction;
                        }
                        if (args.cell && args.cell.formula && sheet.isSheetCalculated) {
                            this.calculateFormula(args);
                        }
                    }
                }
            }
        }
    };
    CellRenderer.prototype.refresh = function (rowIdx, colIdx, lastCell, element, checkCF, checkWrap, skipFormatCheck, isRandomFormula, fillType) {
        var sheet = this.parent.getActiveSheet();
        if (!element && (isHiddenRow(sheet, rowIdx) || isHiddenCol(sheet, colIdx))) {
            return;
        }
        if (element || !this.parent.scrollSettings.enableVirtualization || this.parent.insideViewport(rowIdx, colIdx)) {
            var cell = (element || this.parent.getCell(rowIdx, colIdx));
            if (!cell) {
                return;
            }
            var args = { rowIdx: rowIdx, colIdx: colIdx, td: cell, cell: getCell(rowIdx, colIdx, sheet), isRefresh: true,
                lastCell: lastCell, isHeightCheckNeeded: true, manualUpdate: true, first: '', skipFormatCheck: skipFormatCheck,
                isRandomFormula: isRandomFormula, fillType: fillType };
            this.update(args);
            if (checkCF && sheet.conditionalFormats && sheet.conditionalFormats.length) {
                this.parent.notify(applyCF, { indexes: [rowIdx, colIdx], isAction: true });
            }
            this.parent.notify(renderFilterCell, { td: cell, rowIndex: rowIdx, colIndex: colIdx });
            if (checkWrap) {
                this.setWrapByValue(sheet, args);
            }
        }
    };
    CellRenderer.prototype.updateView = function (args) {
        if (isNullOrUndefined(args.sheetIndex) || (args.sheetIndex === this.parent.activeSheetIndex)) {
            if (!args.indexes) {
                var sheet = this.parent.getActiveSheet();
                var frozenRow = this.parent.frozenRowCount(sheet);
                var frozenCol = this.parent.frozenColCount(sheet);
                var topLeftCell = getRangeIndexes(sheet.topLeftCell);
                if (frozenRow && frozenCol) {
                    this.refreshRange([topLeftCell[0], topLeftCell[1], frozenRow - 1, frozenCol - 1], args.refreshing, args.checkWrap, false, args.checkCF);
                }
                if (frozenRow) {
                    this.refreshRange([topLeftCell[0], this.parent.viewport.leftIndex + frozenCol, frozenRow - 1, this.parent.viewport.rightIndex], args.refreshing, args.checkWrap, false, args.checkCF);
                }
                if (frozenCol) {
                    this.refreshRange([this.parent.viewport.topIndex + frozenRow, topLeftCell[1], this.parent.viewport.bottomIndex, frozenCol - 1], args.refreshing, args.checkWrap, false, args.checkCF);
                }
                args.indexes = [this.parent.viewport.topIndex + frozenRow, this.parent.viewport.leftIndex + frozenCol,
                    this.parent.viewport.bottomIndex, this.parent.viewport.rightIndex];
            }
            this.refreshRange(args.indexes, args.refreshing, args.checkWrap, false, args.checkCF);
        }
        else if (args.refreshing) {
            this.calculateFormula({ cell: getCell(args.indexes[0], args.indexes[1], getSheet(this.parent, args.sheetIndex), true, true),
                rowIdx: args.indexes[0], colIdx: args.indexes[1], sheetIndex: args.sheetIndex });
        }
    };
    /**
     * Removes the added event handlers and clears the internal properties of CellRenderer module.
     *
     * @returns {void}
     */
    CellRenderer.prototype.destroy = function () {
        this.parent.off(updateView, this.updateView);
        this.parent.off(calculateFormula, this.calculateFormula);
        if (this.element) {
            this.element.remove();
        }
        this.element = null;
        if (this.th) {
            this.th.remove();
        }
        this.th = null;
        if (this.tableRow) {
            this.tableRow.remove();
        }
        this.tableRow = null;
        this.parent = null;
    };
    return CellRenderer;
}());

/**
 * Render module is used to render the spreadsheet
 *
 * @hidden
 */
var Render = /** @class */ (function () {
    function Render(parent) {
        this.parent = parent;
        this.addEventListener();
        this.instantiateRenderer();
    }
    Render.prototype.render = function () {
        this.parent.setProperties({ activeSheetIndex: this.parent.skipHiddenSheets(this.parent.activeSheetIndex) }, true);
        if (!this.parent.isMobileView()) {
            this.parent.notify(ribbon, null);
            this.parent.notify(formulaBar, null);
        }
        var sheetPanel = this.parent.createElement('div', {
            id: this.parent.element.id + '_sheet_panel', className: 'e-sheet-panel'
        });
        if (this.parent.enableRtl) {
            sheetPanel.classList.add('e-rtl');
        }
        this.parent.element.appendChild(sheetPanel);
        if (this.parent.showSheetTabs) {
            this.parent.notify(sheetTabs, null);
        }
        else { // for formula calculation
            this.parent.notify(workbookFormulaOperation, { action: 'initSheetInfo' });
            this.parent.notify(workbookFormulaOperation, { action: 'initiateDefinedNames' });
        }
        if (this.parent.isMobileView()) {
            this.parent.notify(formulaBar, null);
            this.parent.notify(ribbon, null);
        }
        if (this.parent.password && (this.parent.password.length > 0 || this.parent.isProtected)) {
            this.parent.isProtected = true;
            if (this.parent.showSheetTabs) {
                this.parent.element.querySelector('.e-add-sheet-tab').setAttribute('disabled', 'true');
                this.parent.element.querySelector('.e-add-sheet-tab').classList.add('e-disabled');
            }
        }
        if (this.parent.selectionSettings.mode === 'None') {
            this.parent.allowAutoFill = false;
        }
        this.setSheetPanelSize();
        this.renderSheet(sheetPanel);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.checkTopLeftCell(!this.parent.refreshing);
    };
    Render.prototype.checkTopLeftCell = function (initLoad, isRefreshing, scrollTop, scrollLeft, preventModelCheck, openOptions) {
        var sheet = this.parent.getActiveSheet();
        this.parent.showSpinner();
        var isTopLeftCell = sheet.topLeftCell === 'A1';
        var indexes = getCellIndexes(sheet.topLeftCell);
        var isFreezeScrolled;
        if (sheet.topLeftCell !== sheet.paneTopLeftCell && (sheet.frozenRows || sheet.frozenColumns)) {
            var paneIndexes = getCellIndexes(sheet.paneTopLeftCell);
            isFreezeScrolled = this.parent.scrollSettings.enableVirtualization;
            isTopLeftCell = sheet.frozenRows && sheet.frozenColumns ? indexes[0] + sheet.frozenRows === paneIndexes[0] &&
                indexes[1] + sheet.frozenColumns === paneIndexes[1] : (sheet.frozenRows ? indexes[0] + sheet.frozenRows === paneIndexes[0]
                && indexes[1] === 0 : indexes[1] + sheet.frozenColumns === paneIndexes[1] && indexes[0] === 0);
            if (indexes[0] && paneIndexes[0] > indexes[0]) {
                this.parent.viewport.beforeFreezeHeight = getRowsHeight(sheet, 0, indexes[0] - 1, true);
            }
            else {
                this.parent.viewport.beforeFreezeHeight = 0;
            }
            if (indexes[1] && paneIndexes[1] > indexes[1]) {
                this.parent.viewport.beforeFreezeWidth = getColumnsWidth(sheet, 0, indexes[1] - 1, true);
            }
            else {
                this.parent.viewport.beforeFreezeWidth = 0;
            }
        }
        else {
            this.parent.viewport.beforeFreezeHeight = this.parent.viewport.beforeFreezeWidth = 0;
        }
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        if (!this.parent.scrollSettings.enableVirtualization || isTopLeftCell) {
            this.refreshUI({ rowIndex: indexes[0], colIndex: indexes[1], refresh: 'All' }, null, initLoad, isRefreshing, preventModelCheck, openOptions);
            if (isFreezeScrolled) {
                this.parent.viewport.topIndex = skipHiddenIdx(sheet, frozenRow, true) - frozenRow;
                this.parent.viewport.leftIndex = skipHiddenIdx(sheet, frozenCol, true, 'columns') - frozenCol;
            }
        }
        else {
            var pIndexes = sheet.paneTopLeftCell === sheet.topLeftCell ? indexes : getCellIndexes(sheet.paneTopLeftCell);
            var eventArgs = { preventScroll: true };
            eventArgs.scrollTop = scrollTop || (pIndexes[0] > frozenRow ? getRowsHeight(sheet, frozenRow, pIndexes[0] - 1, true) : 0);
            eventArgs.scrollLeft = scrollLeft || (pIndexes[1] > frozenCol ? getColumnsWidth(sheet, frozenCol, pIndexes[1] - 1, true) : 0);
            this.parent.notify(onContentScroll, eventArgs);
            var threshold = this.parent.getThreshold('row');
            var rowIndex = sheet.frozenRows ? indexes[0] : (indexes[0] > threshold ?
                skipHiddenIdx(sheet, indexes[0] - threshold, true) : 0);
            var frozenIndexes = [];
            if (sheet.frozenRows) {
                frozenIndexes.push(pIndexes[0] - threshold > frozenRow ? pIndexes[0] - threshold : frozenRow);
            }
            threshold = this.parent.getThreshold('col');
            var colIndex = sheet.frozenColumns ? indexes[1] :
                (indexes[1] > threshold ? skipHiddenIdx(sheet, indexes[1] - threshold, true, 'columns') : 0);
            if (sheet.frozenColumns) {
                if (!frozenIndexes.length) {
                    frozenIndexes.push(frozenRow);
                }
                frozenIndexes.push(pIndexes[1] - threshold > frozenCol ? pIndexes[1] - threshold : frozenCol);
            }
            else if (frozenIndexes.length) {
                frozenIndexes.push(frozenCol);
            }
            this.refreshUI({ rowIndex: rowIndex, colIndex: colIndex, refresh: 'All', top: eventArgs.scrollTop, left: eventArgs.scrollLeft,
                frozenIndexes: frozenIndexes }, null, initLoad, isRefreshing, preventModelCheck, openOptions);
            if (isFreezeScrolled) {
                if (frozenRow && frozenIndexes[0] >= frozenRow) {
                    this.parent.viewport.topIndex = skipHiddenIdx(sheet, frozenIndexes[0], true) - frozenRow;
                }
                if (frozenCol && frozenIndexes[1] >= frozenCol) {
                    this.parent.viewport.leftIndex = skipHiddenIdx(sheet, frozenIndexes[1], true, 'columns') - frozenCol;
                }
            }
        }
    };
    Render.prototype.renderSheet = function (panel) {
        if (panel === void 0) { panel = document.getElementById(this.parent.element.id + '_sheet_panel'); }
        panel.appendChild(this.parent.createElement('div', { className: 'e-sheet', id: this.parent.element.id + '_sheet', styles: 'background-color: #fff' }));
        this.parent.serviceLocator.getService('sheet').renderPanel();
    };
    /**
     * @hidden
     * @param {RefreshArgs} args - Specifies the RefreshArgs.
     * @param {string} address - Specifies the address.
     * @param {boolean} initLoad - Specifies the initLoad.
     * @param {boolean} isRefreshing - Specifies the isRefreshing.
     * @param {boolean} preventModelCheck - Specifies the preventModelCheck.
     * @param {boolean} openOptions - Specifies the open response options.
     * @returns {void}
     */
    // tslint:disable-next-line:max-func-body-length
    Render.prototype.refreshUI = function (args, address, initLoad, isRefreshing, preventModelCheck, openOptions) {
        var _this = this;
        if (args.refresh !== 'All') {
            this.parent.showSpinner();
        }
        var sheetModule = this.parent.serviceLocator.getService('sheet');
        var sheet = this.parent.getActiveSheet();
        var sheetName = getSheetName(this.parent);
        var prevRowColCnt = { rowCount: sheet.rowCount, colCount: sheet.colCount };
        args.frozenIndexes = args.frozenIndexes ? args.frozenIndexes : [];
        if (!address) {
            if (this.parent.scrollSettings.enableVirtualization) {
                var lastRow = args.rowIndex + this.parent.viewport.rowCount + (this.parent.getThreshold('row') * 2);
                var lastCol = args.colIndex + this.parent.viewport.colCount + (this.parent.getThreshold('col') * 2);
                var frozenRow = this.parent.frozenRowCount(sheet);
                var frozenCol = this.parent.frozenColCount(sheet);
                if (args.frozenIndexes.length) {
                    lastRow += (args.frozenIndexes[0] - frozenRow);
                    lastCol += (args.frozenIndexes[1] - frozenCol);
                }
                if (args.refresh === 'Row') {
                    lastRow += frozenRow;
                }
                else {
                    lastRow += sheet.frozenRows;
                }
                if (args.refresh === 'Column') {
                    lastCol += frozenCol;
                }
                else {
                    lastCol += sheet.frozenColumns;
                }
                var rowIdx = args.frozenIndexes[0] > frozenRow ? args.frozenIndexes[0] : args.rowIndex + (args.refresh === 'Row' ?
                    frozenRow : sheet.frozenRows);
                var indexes = this.parent.skipHidden(rowIdx, lastRow, 'rows', false);
                lastRow = indexes[1];
                if (rowIdx !== indexes[0]) {
                    var topLeftCell = getCellIndexes(sheet.paneTopLeftCell);
                    if (topLeftCell[0] === rowIdx) {
                        this.parent.updateTopLeftCell(indexes[0] - frozenRow, topLeftCell[1], 'col');
                    }
                }
                indexes[0] -= frozenRow;
                var count = sheet.rowCount - 1;
                var diff = 0;
                var startRow = args.rowIndex;
                if (this.parent.scrollSettings.isFinite && lastRow > count) {
                    diff = lastRow - count;
                    lastRow = skipHiddenIdx(sheet, count, false);
                    if (indexes[0] + frozenRow > skipHiddenIdx(sheet, frozenRow, true)) {
                        var startIdx = args.rowIndex - diff;
                        startIdx = startIdx < 0 ? 0 : startIdx;
                        startIdx = this.decreaseHidden(startIdx, args.rowIndex - 1, frozenRow);
                        if (args.top && startIdx < args.rowIndex) {
                            this.parent.notify(updateTranslate, { height: getRowsHeight(sheet, startIdx + frozenRow, args.rowIndex - 1 + frozenRow, true),
                                isRender: true });
                        }
                        this.parent.viewport.topIndex = indexes[0] = startIdx;
                        startRow = args.refresh === 'Row' ? startIdx : startRow;
                    }
                }
                if (args.refresh === 'Row') {
                    args.rowIndex = skipHiddenIdx(sheet, startRow + frozenRow, true) - frozenRow;
                }
                else {
                    startRow = args.rowIndex = frozenRow ? skipHiddenIdx(sheet, startRow, true) : indexes[0];
                }
                var colIdx = args.frozenIndexes[1] > frozenCol ? args.frozenIndexes[1] : args.colIndex + (args.refresh ===
                    'Column' ? frozenCol : sheet.frozenColumns);
                indexes = this.parent.skipHidden(colIdx, lastCol, 'columns', false);
                lastCol = indexes[1];
                if (colIdx !== indexes[0]) {
                    var topLeftCell = getCellIndexes(sheet.paneTopLeftCell);
                    if (topLeftCell[1] === colIdx) {
                        this.parent.updateTopLeftCell(topLeftCell[0], indexes[0] - frozenCol, 'row');
                    }
                }
                indexes[0] -= frozenCol;
                count = sheet.colCount - 1;
                diff = 0;
                var startCol = args.colIndex;
                if (this.parent.scrollSettings.isFinite && lastCol > count) {
                    diff = lastCol - count;
                    lastCol = skipHiddenIdx(sheet, count, false, 'columns');
                    if (indexes[0] + frozenCol > skipHiddenIdx(sheet, frozenCol, true, 'columns')) {
                        var startIdx = args.colIndex - diff;
                        startIdx = startIdx > -1 ? startIdx : 0;
                        startIdx = this.decreaseHidden(startIdx, args.colIndex - 1, frozenCol, 'columns');
                        if (args.left && startIdx < args.colIndex) {
                            this.parent.notify(updateTranslate, { width: getColumnsWidth(sheet, startIdx + frozenCol, args.colIndex - 1 + frozenCol, true),
                                isRender: true });
                        }
                        this.parent.viewport.leftIndex = indexes[0] = startIdx;
                        startCol = args.refresh === 'Column' ? startIdx : startCol;
                    }
                }
                if (args.refresh === 'Column') {
                    args.colIndex = skipHiddenIdx(sheet, startCol + frozenCol, true, 'columns') - frozenCol;
                }
                else {
                    startCol = args.colIndex = frozenCol ? skipHiddenIdx(sheet, startCol, true, 'columns') : indexes[0];
                }
                if (args.refresh === 'Row') {
                    startRow += frozenRow;
                    if (frozenRow) {
                        lastRow += getCellIndexes(sheet.topLeftCell)[0];
                    }
                    lastCol = this.parent.viewport.rightIndex;
                }
                if (args.refresh === 'Column') {
                    startCol += frozenCol;
                    if (frozenCol) {
                        lastCol += getCellIndexes(sheet.topLeftCell)[1];
                    }
                    lastRow = this.parent.viewport.bottomIndex;
                }
                this.parent.viewport.topIndex = args.rowIndex;
                this.parent.viewport.bottomIndex = lastRow;
                this.parent.viewport.leftIndex = args.colIndex;
                this.parent.viewport.rightIndex = lastCol;
                address = getCellAddress(startRow, startCol) + ":" + getCellAddress(lastRow, lastCol);
            }
            else {
                if (args.refresh === 'All') {
                    this.updateTopLeftScrollPosition(extend(args, { sheet: sheet }));
                }
                this.parent.viewport.bottomIndex = sheet.rowCount - 1;
                this.parent.viewport.rightIndex = sheet.colCount - 1;
                address = getCellAddress(args.rowIndex, args.colIndex) + ":" + getCellAddress(this.parent.viewport.bottomIndex, this.parent.viewport.rightIndex);
            }
        }
        if (args.refresh === 'All') {
            this.parent.trigger(beforeDataBound, {});
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var isOpen = this.parent.isOpen || this.parent.refreshing;
        setAriaOptions(this.parent.getMainContent(), { busy: true });
        var sheetsLen = this.parent.sheets.length;
        getData(this.parent, sheetName + "!" + address, null, null, args.frozenIndexes).then(function (values) {
            if (!_this.parent || sheetsLen < _this.parent.sheets.length) {
                return;
            }
            var sheetIdx = getSheetIndexFromId(_this.parent, sheet.id);
            if (!preventModelCheck && (sheetIdx === undefined || sheetIdx !== _this.parent.activeSheetIndex)) {
                if (sheetIdx > -1) {
                    _this.checkTopLeftCell();
                }
                return;
            }
            var indexes = [args.rowIndex, args.colIndex].concat(getCellIndexes(address.split(':')[1]));
            var isEdit;
            var arg;
            switch (args.refresh) {
                case 'All':
                    sheetModule.renderTable({ cells: values, indexes: indexes, top: args.top, left: args.left, initLoad: initLoad, isRefreshing: isRefreshing, isOpen: isOpen, openOptions: openOptions });
                    break;
                case 'Row':
                    sheetModule.refreshRowContent({ cells: values, indexes: indexes, skipUpdateOnFirst: args.skipUpdateOnFirst, prevRowColCnt: prevRowColCnt });
                    isEdit = false;
                    arg = { isEdit: isEdit };
                    _this.parent.notify(isFormulaBarEdit, arg);
                    if (arg.isEdit) {
                        _this.parent.notify(editOperation, { action: 'startEdit', refreshCurPos: false });
                    }
                    break;
                case 'Column':
                    sheetModule.refreshColumnContent({
                        cells: values, indexes: indexes, skipUpdateOnFirst: args.skipUpdateOnFirst,
                        prevRowColCnt: prevRowColCnt, insertDelete: args.insertDelete
                    });
                    break;
                case 'RowPart':
                    sheetModule.updateRowContent({
                        cells: values, indexes: indexes, direction: args.direction, skipUpdateOnFirst: args.skipUpdateOnFirst,
                        prevRowColCnt: prevRowColCnt
                    });
                    break;
                case 'ColumnPart':
                    sheetModule.updateColContent({
                        cells: values, indexes: indexes, direction: args.direction, skipUpdateOnFirst: args.skipUpdateOnFirst,
                        prevRowColCnt: prevRowColCnt
                    });
                    break;
            }
            if (_this.parent && _this.parent.isReact) {
                _this.parent['renderReactTemplates']();
            }
        });
        this.parent.notify(beforeVirtualContentLoaded, { refresh: args.refresh, skipTranslate: args.skipTranslate });
    };
    Render.prototype.updateTopLeftScrollPosition = function (args) {
        var topLeftCell = getCellIndexes(args.sheet.topLeftCell);
        var paneTopLeftCell = getCellIndexes(args.sheet.paneTopLeftCell);
        if (args.sheet.frozenRows) {
            var frozenRow = this.parent.frozenRowCount(args.sheet);
            if (paneTopLeftCell[0] > frozenRow) {
                args.top = getRowsHeight(args.sheet, frozenRow, paneTopLeftCell[0] - 1, true);
            }
        }
        else {
            if (args.rowIndex) {
                args.rowIndex = 0;
            }
            if (topLeftCell[0] !== 0) {
                args.top = getRowsHeight(args.sheet, 0, topLeftCell[0] - 1, true);
            }
        }
        if (args.sheet.frozenColumns) {
            var frozenCol = this.parent.frozenColCount(args.sheet);
            if (paneTopLeftCell[1] > frozenCol) {
                args.left = getColumnsWidth(args.sheet, frozenCol, paneTopLeftCell[1] - 1, true);
            }
        }
        else {
            if (args.colIndex) {
                args.colIndex = 0;
            }
            if (topLeftCell[1] !== 0) {
                args.left = getColumnsWidth(args.sheet, 0, topLeftCell[1] - 1, true);
            }
        }
    };
    Render.prototype.removeSheet = function () {
        if (document.getElementById(this.parent.element.id + '_sheet')) {
            remove(document.getElementById(this.parent.element.id + '_sheet'));
        }
    };
    /**
     * Refresh the active sheet.
     *
     * @param {boolean} isOpen - Specifies the isOpen.
     * @param {boolean} resize - Set `true` to refresh the sheet with exiting scroll top and left.
     * @param {boolean} focusEle - Specify the focusEle.
     * @param {boolean} preventModelCheck - Specifies the preventModelCheck.
     * @param {boolean} openOptions - Specifies the open response options.
     * @returns {void}
     */
    Render.prototype.refreshSheet = function (isOpen, resize, focusEle, preventModelCheck, openOptions) {
        var scrollTop = 0;
        var scrollLeft = 0;
        if (resize) {
            var mainPanel = this.parent.element.getElementsByClassName('e-main-panel')[0];
            if (mainPanel) {
                scrollTop = mainPanel.scrollTop;
            }
            var sheetContent = this.parent.getMainContent();
            if (sheetContent) {
                scrollLeft = sheetContent.scrollLeft;
            }
        }
        this.removeSheet();
        this.renderSheet();
        this.parent.notify(deInitProperties, {});
        this.checkTopLeftCell(false, isOpen, scrollTop, scrollLeft, preventModelCheck, openOptions);
        if (focusEle) {
            focus(this.parent.element);
        }
    };
    /**
     * Used to set sheet panel size.
     *
     * @param {number} colMinWidth - Specifies column minimum width value.
     * @returns {void}
     */
    Render.prototype.setSheetPanelSize = function (colMinWidth) {
        var panel = document.getElementById(this.parent.element.id + '_sheet_panel');
        var offset = this.parent.element.getBoundingClientRect();
        var height;
        this.parent.viewport.scaleY = this.parent.viewport.scaleX = 1;
        if (this.parent.enableScaling) {
            var offsetHeight = this.parent.element.offsetHeight;
            var scaleY = offsetHeight / offset.height;
            if (scaleY !== 1 && Math.abs(offsetHeight - offset.height) >= offsetHeight * 0.1) {
                this.parent.viewport.scaleY = scaleY;
            }
            var offsetWidth = this.parent.element.offsetWidth;
            var scaleX = offsetWidth / offset.width;
            if (scaleX !== 1 && Math.abs(offsetWidth - offset.width) >= offsetWidth * 0.1) {
                this.parent.viewport.scaleX = scaleX;
            }
        }
        if (this.parent.height === 'auto') {
            panel.style.height = '260px';
            height = 230;
        }
        else {
            height = (offset.height * this.parent.viewport.scaleY) - getSiblingsHeight(panel, null, this.parent.viewport.scaleY);
            panel.style.height = height + "px";
            height -= (32 / this.parent.viewport.scaleY);
        }
        if (colMinWidth !== undefined) {
            this.colMinWidth = colMinWidth;
        }
        this.parent.viewport.height = height;
        var width = offset.width * this.parent.viewport.scaleX;
        this.parent.viewport.width = width - (32 / this.parent.viewport.scaleX);
        this.parent.viewport.rowCount = this.roundValue(height, 20);
        this.parent.viewport.colCount = this.roundValue(width, this.colMinWidth || 64);
    };
    Render.prototype.roundValue = function (size, threshold) {
        var value = size / threshold;
        var roundedValue = Math.round(value);
        return Math.abs(value - roundedValue) < 0.5 ? roundedValue : roundedValue - 1;
    };
    Render.prototype.moveOrDuplicateSheetHandler = function (args) {
        this.parent.notify(refreshSheetTabs, null);
        if (args.refresh) {
            this.refreshSheet(args.isDuplicate);
        }
    };
    Render.prototype.decreaseHidden = function (startIdx, endIdx, freezeCount, layout) {
        if (layout === void 0) { layout = 'rows'; }
        startIdx += freezeCount;
        endIdx += freezeCount;
        var sheet = this.parent.getActiveSheet();
        for (var i = endIdx; i >= startIdx; i--) {
            if ((sheet["" + layout])[i] && (sheet["" + layout])[i].hidden) {
                startIdx--;
                if (startIdx < freezeCount) {
                    startIdx = skipHiddenIdx(sheet, freezeCount, true, layout);
                    break;
                }
            }
        }
        return startIdx - freezeCount;
    };
    /**
     * Registing the renderer related services.
     *
     * @returns {void}
     */
    Render.prototype.instantiateRenderer = function () {
        this.parent.serviceLocator.register('cell', new CellRenderer(this.parent));
        this.parent.serviceLocator.register('row', new RowRenderer(this.parent));
        this.parent.serviceLocator.register('sheet', new SheetRender(this.parent));
    };
    /**
     * Destroy the Render module.
     *
     * @returns {void}
     */
    Render.prototype.destroy = function () {
        this.removeEventListener();
        this.parent.serviceLocator.getService('row').destroy();
        this.parent.serviceLocator.getService('cell').destroy();
        if (this.colMinWidth) {
            this.colMinWidth = null;
        }
        this.parent = null;
    };
    Render.prototype.addEventListener = function () {
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
        this.parent.on(moveOrDuplicateSheet, this.moveOrDuplicateSheetHandler, this);
        this.parent.on(getUpdatedScrollPosition, this.updateTopLeftScrollPosition, this);
    };
    Render.prototype.removeEventListener = function () {
        this.parent.off(spreadsheetDestroyed, this.destroy);
        this.parent.off(moveOrDuplicateSheet, this.moveOrDuplicateSheetHandler);
        this.parent.off(getUpdatedScrollPosition, this.updateTopLeftScrollPosition);
    };
    return Render;
}());

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/**
 * Represents clipboard support for Spreadsheet.
 */
var Clipboard = /** @class */ (function () {
    function Clipboard(parent) {
        this.parent = parent;
        this.init();
        this.addEventListener();
    }
    Clipboard.prototype.init = function () {
        this.parent.element.appendChild(this.parent.createElement('input', { className: 'e-clipboard', attrs: { 'contenteditable': 'true', 'tabindex': '-1', 'aria-hidden': 'true' } }));
    };
    Clipboard.prototype.addEventListener = function () {
        var ele = this.getClipboardEle();
        this.parent.on(cut, this.cut, this);
        this.parent.on(copy, this.copy, this);
        this.parent.on(paste, this.paste, this);
        this.parent.on(clearCopy, this.clearCopiedInfo, this);
        this.parent.on(tabSwitch, this.tabSwitchHandler, this);
        this.parent.on(cMenuBeforeOpen, this.cMenuBeforeOpenHandler, this);
        this.parent.on(ribbonClick, this.ribbonClickHandler, this);
        this.parent.on(contentLoaded, this.initCopyIndicator, this);
        this.parent.on(rowHeightChanged, this.rowHeightChanged, this);
        this.parent.on(colWidthChanged, this.colWidthChanged, this);
        this.parent.on(refreshClipboard, this.refreshOnInsertDelete, this);
        EventHandler.add(ele, 'cut', this.cut, this);
        EventHandler.add(ele, 'copy', this.copy, this);
        EventHandler.add(ele, 'paste', this.paste, this);
    };
    Clipboard.prototype.removeEventListener = function () {
        var ele = this.getClipboardEle();
        if (!this.parent.isDestroyed) {
            this.parent.off(cut, this.cut);
            this.parent.off(copy, this.copy);
            this.parent.off(paste, this.paste);
            this.parent.off(clearCopy, this.clearCopiedInfo);
            this.parent.off(tabSwitch, this.tabSwitchHandler);
            this.parent.off(cMenuBeforeOpen, this.cMenuBeforeOpenHandler);
            this.parent.off(ribbonClick, this.ribbonClickHandler);
            this.parent.off(contentLoaded, this.initCopyIndicator);
            this.parent.off(rowHeightChanged, this.rowHeightChanged);
            this.parent.off(colWidthChanged, this.colWidthChanged);
            this.parent.off(refreshClipboard, this.refreshOnInsertDelete);
        }
        EventHandler.remove(ele, 'cut', this.cut);
        EventHandler.remove(ele, 'copy', this.copy);
        EventHandler.remove(ele, 'paste', this.paste);
    };
    Clipboard.prototype.ribbonClickHandler = function (args) {
        var parentId = this.parent.element.id;
        switch (args.item.id) {
            case parentId + '_cut':
                this.cut({ invokeCopy: true });
                break;
            case parentId + '_copy':
                this.copy({ invokeCopy: true });
                break;
        }
    };
    Clipboard.prototype.tabSwitchHandler = function (args) {
        if (args.activeTab === 0 && !this.copiedInfo && !this.copiedShapeInfo) {
            this.hidePaste();
        }
    };
    Clipboard.prototype.cMenuBeforeOpenHandler = function (e) {
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        var delRowItems = [];
        var hideRowItems = [];
        var delColItems = [];
        var hideColItems = [];
        var actCell = sheet.activeCell;
        var actCellIndex = getCellIndexes(actCell);
        var cellObj = getCell(actCellIndex[0], actCellIndex[1], sheet);
        var isLocked$1 = sheet.isProtected && isLocked(cellObj, getColumn(sheet, actCellIndex[1]));
        var isReadonlyCell = isReadOnly(cellObj, getColumn(sheet, actCellIndex[1]), getRow(sheet, actCellIndex[0]));
        if (e.target === 'Content' || e.target === 'RowHeader' || e.target === 'ColumnHeader' || e.target === 'SelectAll') {
            this.parent.enableContextMenuItems([l10n.getConstant('Paste'), l10n.getConstant('PasteSpecial')], (this.copiedInfo ||
                this.copiedShapeInfo && !isLocked$1) ? true : false);
            this.parent.enableContextMenuItems([l10n.getConstant('Cut')], !isLocked$1);
        }
        if (e.target === 'Content') {
            if (sheet.isProtected) {
                this.parent.enableContextMenuItems([l10n.getConstant('Filter'), l10n.getConstant('Sort'),
                    l10n.getConstant('AddNote')], false);
            }
            if (isLocked$1) {
                this.parent.enableContextMenuItems([l10n.getConstant('Cut'), l10n.getConstant('Hyperlink'),
                    l10n.getConstant('EditNote'), l10n.getConstant('DeleteNote')], false);
            }
            else if (isReadonlyCell) {
                this.parent.enableContextMenuItems([l10n.getConstant('Cut'), l10n.getConstant('Paste'), l10n.getConstant('PasteSpecial'),
                    l10n.getConstant('Filter'), l10n.getConstant('Sort'), l10n.getConstant('Hyperlink'), l10n.getConstant('EditHyperlink'),
                    l10n.getConstant('OpenHyperlink'), l10n.getConstant('RemoveHyperlink'), l10n.getConstant('AddNote')], false);
            }
            else if (sheet.isProtected && !sheet.protectSettings.insertLink) {
                this.parent.enableContextMenuItems([l10n.getConstant('Hyperlink')], false);
            }
        }
        if (sheet.isProtected) {
            if (e.target === 'ColumnHeader') {
                delColItems = [l10n.getConstant('DeleteColumn'), l10n.getConstant('DeleteColumns'),
                    l10n.getConstant('InsertColumn'), l10n.getConstant('InsertColumns')];
                hideColItems = [l10n.getConstant('HideColumn'), l10n.getConstant('HideColumns'), l10n.getConstant('UnhideColumns')];
                this.parent.enableContextMenuItems(delColItems, false);
                this.parent.enableContextMenuItems(hideColItems, sheet.protectSettings.formatColumns);
            }
            if (e.target === 'RowHeader') {
                delRowItems = [l10n.getConstant('DeleteRow'), l10n.getConstant('DeleteRows'),
                    l10n.getConstant('InsertRow'), l10n.getConstant('InsertRows')];
                hideRowItems = [l10n.getConstant('HideRow'), l10n.getConstant('HideRows'), l10n.getConstant('UnhideRows')];
                this.parent.enableContextMenuItems(delRowItems, false);
                this.parent.enableContextMenuItems(hideRowItems, sheet.protectSettings.formatRows);
            }
        }
    };
    Clipboard.prototype.rowHeightChanged = function (args) {
        if (this.copiedInfo) {
            var ele = this.getCopyIndicator();
            if (ele) {
                if (this.copiedInfo.range[0] > args.rowIdx) {
                    ele.style.top = parseFloat(ele.style.top) + args.threshold + "px";
                }
                else if (inRange(this.copiedInfo.range, args.rowIdx, this.copiedInfo.range[1])) {
                    ele.style.height = parseFloat(ele.style.height) + args.threshold + "px";
                }
            }
        }
    };
    Clipboard.prototype.colWidthChanged = function (args) {
        if (this.copiedInfo) {
            var ele = this.getCopyIndicator();
            if (ele) {
                if (this.copiedInfo.range[1] > args.colIdx) {
                    ele.style.left = parseFloat(ele.style.left) + args.threshold + "px";
                }
                else if (inRange(this.copiedInfo.range, this.copiedInfo.range[0], args.colIdx)) {
                    ele.style.width = parseFloat(ele.style.width) + args.threshold + "px";
                }
            }
        }
    };
    Clipboard.prototype.cut = function (args) {
        this.setCopiedInfo(args, true);
    };
    Clipboard.prototype.copy = function (args) {
        this.setCopiedInfo(args, false);
    };
    Clipboard.prototype.paste = function (args) {
        var _this = this;
        if (this.parent.isEdit || this.parent.element.getElementsByClassName('e-dlg-overlay').length > 0) {
            var editEle = this.parent.element.getElementsByClassName('e-spreadsheet-edit')[0];
            editEle.style.height = 'auto';
            return;
        }
        var rfshRange;
        var isExternal = ((args && args.clipboardData) || window['clipboardData']);
        if (isExternal && args.clipboardData && args.clipboardData.getData('isInternalCut').length && !this.copiedInfo) {
            return; // to prevent multiple cut paste action
        }
        if (isExternal || this.copiedShapeInfo || (args.isInternal && this.copiedInfo)) {
            args.isInternal = !isExternal;
            var isCut = void 0;
            var copiedIdx = this.getCopiedIdx();
            args.isAction = !!isExternal || args.isAction;
            var cSIdx = args && args.sIdx > -1 ? args.sIdx : this.parent.activeSheetIndex;
            var curSheet = getSheet(this.parent, cSIdx);
            var selIdx = getSwapRange(args && args.range || getRangeIndexes(curSheet.selectedRange));
            var pasteModelArgs = void 0;
            var rows = void 0;
            if (isExternal) {
                pasteModelArgs = this.getExternalCells(args);
                rows = pasteModelArgs.model;
                if (!args.isInternal && pasteModelArgs.internal) {
                    isExternal = false;
                    if (!this.copiedInfo) {
                        return;
                    }
                }
                if (!rows || !rows.length) { // If image pasted
                    if (pasteModelArgs.file) {
                        this.parent.notify(insertImage, { file: pasteModelArgs.file });
                        return;
                    }
                    else if (this.copiedInfo) {
                        isExternal = false;
                    }
                    else {
                        return;
                    }
                }
            }
            pasteModelArgs = pasteModelArgs;
            var copyInfo = Object.assign({ isExternal: isExternal }, this.copiedInfo);
            var cIdx_1;
            var pSheetIdx_1;
            var column = void 0;
            var notRemoveMerge = void 0;
            var isRepeative = void 0;
            var cSheetSel = void 0;
            var prevSheet_1;
            var isRowSelected = void 0;
            var isColSelected = void 0;
            if (isExternal) {
                pSheetIdx_1 = cSIdx;
                prevSheet_1 = getSheet(this.parent, pSheetIdx_1);
                column = {};
                cSheetSel = pasteModelArgs.selection;
                isRepeative = cSheetSel !== 'Sheet' && (selIdx[2] - selIdx[0] + 1) % pasteModelArgs.rowCount === 0 &&
                    (selIdx[3] - selIdx[1] + 1) % pasteModelArgs.colCount === 0;
                cIdx_1 = [0, 0, pasteModelArgs.usedRowIndex, pasteModelArgs.usedColIndex];
            }
            else {
                cIdx_1 = getSwapRange(this.copiedShapeInfo ? getRangeIndexes(curSheet.selectedRange) : this.copiedInfo.range);
                pSheetIdx_1 = copiedIdx;
                column = getColumn(curSheet, cIdx_1[1]);
                notRemoveMerge = isSingleCell(cIdx_1) && this.isRangeMerged(selIdx, curSheet);
                prevSheet_1 = getSheet(this.parent, pSheetIdx_1);
                isRepeative = !notRemoveMerge && (selIdx[2] - selIdx[0] + 1) % (cIdx_1[2] - cIdx_1[0] + 1) === 0 &&
                    (selIdx[3] - selIdx[1] + 1) % (cIdx_1[3] - cIdx_1[1] + 1) === 0;
                if (prevSheet_1) {
                    isRowSelected = cIdx_1[1] === 0 && cIdx_1[3] === prevSheet_1.colCount - 1;
                    isColSelected = cIdx_1[0] === 0 && cIdx_1[2] === prevSheet_1.rowCount - 1;
                    if (isRowSelected) {
                        if (isColSelected) {
                            cSheetSel = 'Sheet';
                            cIdx_1[2] = prevSheet_1.usedRange.rowIndex;
                            cIdx_1[3] = prevSheet_1.usedRange.colIndex;
                        }
                        else {
                            cSheetSel = 'Row';
                            cIdx_1[3] = prevSheet_1.usedRange.colIndex;
                        }
                    }
                    else if (isColSelected) {
                        cSheetSel = 'Column';
                        cIdx_1[2] = prevSheet_1.usedRange.rowIndex;
                    }
                }
            }
            rfshRange = isRepeative ? selIdx : [selIdx[0], selIdx[1]]
                .concat([selIdx[0] + cIdx_1[2] - cIdx_1[0], selIdx[1] + cIdx_1[3] - cIdx_1[1] || selIdx[1]]);
            if (cSheetSel) {
                if ((cSheetSel === 'Sheet' || cSheetSel === 'Column') && rfshRange[2] < curSheet.usedRange.rowIndex) {
                    rfshRange[2] = curSheet.usedRange.rowIndex;
                }
                if ((cSheetSel === 'Sheet' || cSheetSel === 'Row') && rfshRange[3] < curSheet.usedRange.colIndex) {
                    rfshRange[3] = curSheet.usedRange.colIndex;
                }
            }
            var pasteType = (args && args.type) || 'All';
            if (isReadOnlyCells(this.parent, rfshRange)) {
                this.parent.notify(readonlyAlert, null);
                return;
            }
            else if (curSheet.isProtected && isLockedCells(this.parent, rfshRange)) {
                this.parent.notify(editAlert, null);
                return;
            }
            if (args.isAction && !this.copiedShapeInfo) {
                var beginEventArgs = { requestType: 'paste', copiedInfo: this.copiedInfo,
                    copiedRange: getRangeAddress(cIdx_1), pastedRange: getRangeAddress(rfshRange), type: pasteType, cancel: false };
                this.parent.notify(beginAction, { eventArgs: beginEventArgs, action: 'clipboard' });
                if (beginEventArgs.cancel) {
                    return;
                }
                selIdx = getRangeIndexes(beginEventArgs.pastedRange);
                if (isExternal) {
                    isRepeative = pasteModelArgs.selection !== 'Sheet' && (selIdx[2] - selIdx[0] + 1) % pasteModelArgs.rowCount === 0 &&
                        (selIdx[3] - selIdx[1] + 1) % pasteModelArgs.colCount === 0;
                }
                else {
                    isRepeative = !notRemoveMerge && !isRowSelected && (selIdx[2] - selIdx[0] + 1) % (cIdx_1[2] - cIdx_1[0] + 1) === 0
                        && !isColSelected && (selIdx[3] - selIdx[1] + 1) % (cIdx_1[3] - cIdx_1[1] + 1) === 0;
                }
                rfshRange = isRepeative ? selIdx : [selIdx[0], selIdx[1]].concat([selIdx[0] + cIdx_1[2] - cIdx_1[0], selIdx[1] + cIdx_1[3] - cIdx_1[1] || selIdx[1]]);
                pasteType = beginEventArgs.type;
            }
            var selectionRange = void 0;
            if (cSheetSel) {
                selectionRange = [].concat(rfshRange);
                if (cSheetSel === 'Sheet' || cSheetSel === 'Column') {
                    if (rfshRange[2] < curSheet.usedRange.rowIndex) {
                        rfshRange[2] = curSheet.usedRange.rowIndex;
                    }
                    if (cIdx_1[2] < curSheet.usedRange.rowIndex) {
                        cIdx_1[2] += curSheet.usedRange.rowIndex - cIdx_1[2];
                    }
                    if (selectionRange[2] < curSheet.rowCount) {
                        selectionRange[2] = curSheet.rowCount - 1;
                    }
                }
                if (cSheetSel === 'Sheet' || cSheetSel === 'Row') {
                    if (rfshRange[3] < curSheet.usedRange.colIndex) {
                        cIdx_1[3] += curSheet.usedRange.colIndex - rfshRange[3];
                        rfshRange[3] = curSheet.usedRange.colIndex;
                    }
                    if (cIdx_1[3] < curSheet.usedRange.colIndex) {
                        cIdx_1[3] += curSheet.usedRange.colIndex - cIdx_1[3];
                    }
                    if (selectionRange[3] < curSheet.colCount) {
                        selectionRange[3] = curSheet.colCount - 1;
                    }
                }
            }
            else {
                selectionRange = rfshRange;
            }
            var cell = void 0;
            var isExtend = void 0;
            var prevCell = void 0;
            var rowIdx = selIdx[0];
            var mergeCollection = [];
            if (curSheet.isProtected && isLockedCells(this.parent, rfshRange)) {
                this.parent.notify(editAlert, null);
                return;
            }
            if (this.copiedShapeInfo && !this.copiedInfo) {
                var pictureElem = this.copiedShapeInfo.pictureElem;
                if (pictureElem.classList.contains('e-datavisualization-chart')) {
                    this.copiedShapeInfo.chartInfo.top = null;
                    this.copiedShapeInfo.chartInfo.left = null;
                    this.parent.notify(setChart, {
                        chart: [this.copiedShapeInfo.chartInfo], isInitCell: true, isUndoRedo: true, isPaste: true,
                        dataSheetIdx: this.copiedShapeInfo.sheetIdx, isCut: this.copiedShapeInfo.isCut, sheetId: curSheet.id,
                        range: args.range || curSheet.name + "!" + curSheet.selectedRange
                    });
                }
                else {
                    this.parent.notify(createImageElement, {
                        options: {
                            src: pictureElem.style.backgroundImage.replace(/url\((['"])?(.*?)\1\)/gi, '$2'),
                            height: this.copiedShapeInfo.height, width: this.copiedShapeInfo.width,
                            id: this.copiedShapeInfo.isCut ? pictureElem.id : ''
                        },
                        range: getRangeAddress([rowIdx, selIdx[1], rowIdx, selIdx[1]]), isPublic: false, isUndoRedo: true
                    });
                }
                var pastedCell = getCell(rowIdx, selIdx[1], curSheet);
                if (pastedCell && !isNullOrUndefined(pastedCell.image) && pastedCell.image.length > 0) {
                    var eventArgs = {
                        requestType: 'imagePaste',
                        copiedShapeInfo: this.copiedShapeInfo,
                        pasteSheetIndex: this.parent.activeSheetIndex,
                        pastedRange: getSheetName(this.parent) + '!' + getRangeAddress([rowIdx, selIdx[1], rowIdx, selIdx[1]]),
                        pastedPictureElement: document.getElementById(pastedCell.image[pastedCell.image.length - 1].id)
                    };
                    this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'clipboard' });
                }
            }
            else {
                var cRows = [];
                var isInRange = this.isInRange(cIdx_1, selIdx, copiedIdx);
                var isFullRowMerge = false;
                var isFullColMerge = false;
                var hiddenCount = 0;
                var cf = [];
                var cfRule = void 0;
                var cancel = void 0;
                if (!isRepeative && pasteType !== 'Values') {
                    cfRule = this.setCF(cIdx_1, rfshRange, prevSheet_1, curSheet, cf, cfRule);
                }
                var isUniqueCell = false;
                var uniqueCellColl = [];
                var copyCellArgs = {
                    sheet: curSheet, isExternal: !!isExternal
                };
                var pasteSetCell = this.setCell(copyCellArgs);
                var cutSetCell_1 = !isExternal && this.copiedInfo.isCut && this.setCell({ sheet: prevSheet_1 });
                var prevSheetMergeCollection = [];
                var colValidationCollection = [];
                for (var i = cIdx_1[0], l = 0; i <= cIdx_1[2]; i++, l++) {
                    if (!isExternal && !copyInfo.isCut && isFilterHidden(prevSheet_1, i)) {
                        l--;
                        hiddenCount++;
                        continue;
                    }
                    if (isInRange) {
                        cRows[selIdx[0] + l] = { cells: [] };
                    }
                    for (var j = cIdx_1[1], k = 0; j <= cIdx_1[3]; j++, k++) {
                        if (isInRange) {
                            cRows[selIdx[0] + l].cells[selIdx[1] + k] = getCell(selIdx[0] + l, selIdx[1] + k, prevSheet_1, false, true);
                        }
                        cell = isExternal ? (rows[i] && rows[i].cells[j]) || {} :
                            extend({}, (isInRange && cRows[i] && cRows[i].cells[j]) ?
                                cRows[i].cells[j] : getCell(i, j, prevSheet_1), null, true);
                        column = getColumn(prevSheet_1, j);
                        if (!cell.validation && checkColumnValidation(column, i, j)) {
                            var validation = Object.assign({}, column.validation);
                            var prevIdx = [0, cIdx_1[1], 0, cIdx_1[3]];
                            var value1 = validation.value1;
                            var value2 = validation.value2;
                            if (checkIsFormula(value1)) {
                                validation.value1 = getUpdatedFormula([i, j], prevIdx, prevSheet_1, this.parent, { formula: value1 });
                            }
                            if (checkIsFormula(value2)) {
                                validation.value2 = getUpdatedFormula([i, j], prevIdx, prevSheet_1, this.parent, { formula: value2 });
                            }
                            cell.validation = validation;
                        }
                        if (cell && cell.isReadOnly) {
                            delete cell.isReadOnly;
                        }
                        if (isRowSelected || isColSelected) {
                            if (cell && cell.rowSpan) {
                                if (cell.rowSpan > 0) {
                                    if ((cell.rowSpan + i) - 1 <= cIdx_1[2]) {
                                        isFullRowMerge = true;
                                    }
                                    else {
                                        cell = {};
                                    }
                                }
                                else if (!isFullRowMerge) {
                                    cell = {};
                                }
                                else if (cell.rowSpan < 0) {
                                    var rowSpan = cell.rowSpan;
                                    var colSpan = cell.colSpan ? cell.colSpan : 0;
                                    var spanCell = getCell(rowIdx + rowSpan, (selIdx[1] + k) + colSpan, curSheet);
                                    if (spanCell && !spanCell.rowSpan) {
                                        cell = {};
                                    }
                                }
                            }
                            if (cell && cell.colSpan) {
                                if (cell.colSpan > 0) {
                                    if ((cell.colSpan + j) - 1 <= cIdx_1[3]) {
                                        isFullColMerge = true;
                                    }
                                    else {
                                        cell = {};
                                    }
                                }
                                else if (!isFullColMerge) {
                                    cell = {};
                                }
                            }
                        }
                        if (cell && pasteType) {
                            var model = void 0;
                            switch (pasteType) {
                                case 'Formats':
                                    model = { format: cell.format, style: cell.style };
                                    if (this.copiedInfo && !this.copiedInfo.isCut) {
                                        if (cell.rowSpan) {
                                            model.rowSpan = cell.rowSpan;
                                        }
                                        if (cell.colSpan) {
                                            model.colSpan = cell.colSpan;
                                        }
                                    }
                                    cell = model;
                                    break;
                                case 'Values':
                                    cell = { value: cell.value };
                                    if (cell.value && cell.value.toString().indexOf('\n') > -1) {
                                        var ele = this.parent.getCell(selIdx[0], selIdx[1]);
                                        ele.classList.add('e-alt-unwrap');
                                    }
                                    break;
                            }
                            isExtend = ['Formats', 'Values'].indexOf(pasteType) > -1;
                        }
                        if ((!this.parent.scrollSettings.isFinite && (cIdx_1[2] - cIdx_1[0] > (1048575 - selIdx[0])
                            || cIdx_1[3] - cIdx_1[1] > (16383 - selIdx[1])))
                            || (this.parent.scrollSettings.isFinite && (cIdx_1[2] - cIdx_1[0] > (curSheet.rowCount - 1 - selIdx[0])
                                || cIdx_1[3] - cIdx_1[1] > (curSheet.colCount - 1 - selIdx[1])))) {
                            this.showDialog();
                            return;
                        }
                        if (isRepeative) {
                            for (var x = selIdx[0]; x <= selIdx[2]; x += (cIdx_1[2] - cIdx_1[0]) + 1) {
                                if (!copyInfo.isCut && !hiddenCount && isFilterHidden(curSheet, x + l)) {
                                    continue;
                                }
                                for (var y = selIdx[1]; y <= selIdx[3]; y += (cIdx_1[3] - cIdx_1[1] + 1)) {
                                    if (i === cIdx_1[0] && j === cIdx_1[1] && (cfRule === undefined || cfRule.length) &&
                                        pasteType !== 'Values') {
                                        cfRule = this.setCF(cIdx_1, [x, y, x + (cIdx_1[2] - cIdx_1[0]), y + (cIdx_1[3] - cIdx_1[1])], prevSheet_1, curSheet, cf, cfRule);
                                    }
                                    prevCell = getCell(x + l, y + k, curSheet, false, true);
                                    if (!isExternal && (!isNullOrUndefined(prevCell.colSpan) || !isNullOrUndefined(prevCell.rowSpan))) {
                                        if (isRowSelected || isColSelected) {
                                            continue;
                                        }
                                        var merge = { range: [x + l, y + k, x + l, y + k], merge: false, isAction: false, type: 'All',
                                            sheetIndex: cSIdx, preventRefresh: cSIdx !== this.parent.activeSheetIndex };
                                        mergeCollection.push(merge);
                                        this.parent.notify(setMerge, merge);
                                    }
                                    var colInd = y + k;
                                    cell = extend({}, cell ? cell : {}, null, true);
                                    if (!isExtend && this.copiedInfo && !this.copiedInfo.isCut && cell.formula) {
                                        var newFormula = getUpdatedFormula([x + l, colInd], [i, j], prevSheet_1, this.parent, isInRange ? cell : null);
                                        if (!isNullOrUndefined(newFormula)) {
                                            cell.formula = newFormula;
                                        }
                                    }
                                    if (this.copiedInfo && !this.copiedInfo.isCut && cell.validation) {
                                        var currIdx = selIdx;
                                        var prevIdx = cIdx_1;
                                        var updatedVal = getUpdatedFormula(currIdx, prevIdx, prevSheet_1, this.parent, { formula: cell.validation.value1 });
                                        cell.validation.value1 = updatedVal;
                                        if (cell.validation.value2 !== '') {
                                            updatedVal = getUpdatedFormula(currIdx, prevIdx, prevSheet_1, this.parent, { formula: cell.validation.value2 });
                                            cell.validation.value2 = updatedVal;
                                        }
                                    }
                                    if (curSheet.isProtected && cell && cell.isLocked !== false) {
                                        cell.isLocked = prevCell.isLocked;
                                    }
                                    if (prevCell && prevCell.formula && prevCell.formula.indexOf('=UNIQUE(') > -1) {
                                        this.parent.notify(removeUniquecol, null);
                                    }
                                    var uniqueFormulaArgs = {
                                        cellIdx: [i, j], isUnique: false, uniqueRange: '', sheetName: prevSheet_1.name
                                    };
                                    this.parent.notify(checkUniqueRange, uniqueFormulaArgs);
                                    if (uniqueFormulaArgs.isUnique) {
                                        cell.value = null;
                                    }
                                    isUniqueCell = false;
                                    if (cell && cell.formula && cell.formula.indexOf('=UNIQUE(') > -1) {
                                        isUniqueCell = true;
                                        uniqueCellColl.push([x, colInd]);
                                        cell.value = null;
                                    }
                                    cancel = pasteSetCell(x + l, colInd, cell, colInd === selIdx[3], isExtend, isUniqueCell, args.beforeActionData, args.isUndo);
                                    if (cancel) {
                                        continue;
                                    }
                                    if (cell.formula && this.copiedInfo && this.copiedInfo.isCut) {
                                        this.parent.notify(clearFormulaDependentCells, { cellRef: getRangeAddress([i, j, i, j]) });
                                    }
                                }
                            }
                        }
                        else {
                            if (isExternal || !hasTemplate(this.parent, i, j, copiedIdx)) {
                                if (notRemoveMerge) {
                                    pasteSetCell(rowIdx, selIdx[1] + k, { value: cell.value }, j === cIdx_1[3], true);
                                }
                                else {
                                    pasteSetCell(rowIdx, selIdx[1] + k, cell, j === cIdx_1[3], isExtend);
                                }
                            }
                        }
                        if (!isExternal && this.copiedInfo.isCut && !(inRange(selIdx, i, j) &&
                            copiedIdx === this.parent.activeSheetIndex)) {
                            var cell_1 = getCell(i, j, prevSheet_1);
                            if (cell_1) {
                                if (cell_1.isReadOnly) {
                                    continue;
                                }
                                if (cell_1.isLocked || isNullOrUndefined(cell_1.isLocked)) {
                                    if ((isRowSelected || isColSelected) && (cell_1.rowSpan !== undefined || cell_1.colSpan !== undefined)) {
                                        if (cell_1.rowSpan > 1 || cell_1.colSpan > 1) {
                                            prevSheetMergeCollection.push({ range: [i, j, i, j], rowSpan: cell_1.rowSpan, colSpan: cell_1.colSpan });
                                            cell_1 = null;
                                        }
                                        else {
                                            continue;
                                        }
                                    }
                                    else {
                                        if (!cell_1.validation && prevSheet_1.columns[j] && prevSheet_1.columns[j].validation
                                            && colValidationCollection.indexOf(j) === -1) {
                                            colValidationCollection.push(j);
                                        }
                                        cell_1 = null;
                                    }
                                }
                                else if (cell_1.isLocked === false) {
                                    if (prevSheet_1.isProtected) {
                                        cell_1 = { isLocked: false };
                                    }
                                    else {
                                        cell_1 = null;
                                    }
                                }
                            }
                            cutSetCell_1(i, j, cell_1, j === cIdx_1[3]);
                        }
                    }
                    rowIdx++;
                }
                if (prevSheetMergeCollection.length) {
                    prevSheetMergeCollection.forEach(function (mergeInfo) {
                        setCell(mergeInfo.range[0], mergeInfo.range[1], prevSheet_1, {
                            rowSpan: mergeInfo.rowSpan, colSpan: mergeInfo.colSpan
                        });
                        var mergeArgs = { range: mergeInfo.range };
                        _this.parent.notify(mergedRange, mergeArgs);
                        _this.parent.notify(setMerge, {
                            merge: false, range: mergeArgs.range, type: 'All',
                            sheetIndex: pSheetIdx_1, preventRefresh: pSheetIdx_1 !== _this.parent.activeSheetIndex
                        });
                        mergeArgs.range = mergeArgs.range;
                        for (var sRowIdx = mergeArgs.range[0]; sRowIdx <= mergeArgs.range[2]; sRowIdx++) {
                            for (var sColIdx = mergeArgs.range[1]; sColIdx <= mergeArgs.range[3]; sColIdx++) {
                                cutSetCell_1(sRowIdx, sColIdx, null);
                            }
                        }
                    });
                }
                if (colValidationCollection.length) {
                    colValidationCollection.forEach(function (colIdx) {
                        _this.parent.notify(cellValidation, { range: prevSheet_1.name + '!' + getRangeAddress([cIdx_1[0], colIdx, cIdx_1[2], colIdx]), isRemoveValidation: true });
                    });
                }
                if (uniqueCellColl.length) {
                    for (var i = 0; i < uniqueCellColl.length; i++) {
                        this.parent.serviceLocator.getService('cell').refresh(uniqueCellColl[i][0], uniqueCellColl[i][1]);
                    }
                }
                if (copyCellArgs.isRandFormula && this.parent.calculationMode === 'Automatic') {
                    this.parent.notify(workbookFormulaOperation, { action: 'refreshRandomFormula' });
                }
                this.parent.notify(refreshRibbonIcons, null);
                var hiddenDiff = rfshRange[2] - hiddenCount;
                var selHiddenDiff = selectionRange[2] - hiddenCount;
                rfshRange[2] = hiddenDiff;
                selectionRange[2] = selHiddenDiff;
                this.parent.setUsedRange(rfshRange[2], rfshRange[3]);
                var selRange = getRangeAddress(selectionRange);
                if (cSIdx === this.parent.activeSheetIndex && !args.isFromUpdateAction) {
                    this.parent.notify(selectRange, { address: selRange });
                }
                if (!isExternal && this.copiedInfo.isCut) {
                    isCut = this.copiedInfo.isCut;
                    if (copiedIdx === this.parent.activeSheetIndex) {
                        this.parent.serviceLocator.getService('cell').refreshRange(cIdx_1);
                    }
                    this.clearCopiedInfo();
                }
                if ((isExternal || isInRange) && this.copiedInfo) {
                    this.clearCopiedInfo();
                }
                var clearCFArgs = void 0;
                if (isCut) {
                    if (cfRule && cfRule.length && pasteType !== 'Values') {
                        clearCFArgs = { range: cIdx_1, sheetIdx: pSheetIdx_1, isClear: true };
                        this.parent.notify(clearCFRule, clearCFArgs);
                    }
                    //this.updateFilter(copyInfo, rfshRange);
                    setMaxHgt(prevSheet_1, cIdx_1[0], cIdx_1[1], (this.parent.getRow(cIdx_1[0], null, this.parent.frozenColCount(prevSheet_1)) || { offsetHeight: 20 }).offsetHeight);
                    var hgt = getMaxHgt(prevSheet_1, cIdx_1[0]);
                    setRowEleHeight(this.parent, prevSheet_1, hgt, cIdx_1[0]);
                }
                if (cf.length && cSIdx === this.parent.activeSheetIndex) {
                    this.parent.notify(applyCF, { cfModel: cf, isAction: true });
                }
                var copySheet = getSheet(this.parent, copiedIdx);
                if (!isExternal && cIdx_1[0] === cIdx_1[2] && cSheetSel === 'Row') {
                    var hgt = copySheet.rows[cIdx_1[0]].height;
                    for (var i = selIdx[0]; i <= selIdx[2]; i++) {
                        setRowEleHeight(this.parent, this.parent.getActiveSheet(), hgt, i);
                    }
                    if (isCut) {
                        var defaultHeight = copySheet && copySheet.standardHeight ? copySheet.standardHeight : 20;
                        setRowEleHeight(this.parent, copySheet, defaultHeight, cIdx_1[0]);
                    }
                }
                if (args.isAction) {
                    var eventArgs = {
                        requestType: 'paste',
                        copiedInfo: copyInfo,
                        mergeCollection: mergeCollection,
                        pasteSheetIndex: this.parent.activeSheetIndex,
                        copiedRange: prevSheet_1.name + '!' + (copyInfo.range ? getRangeAddress(copyInfo.range) : prevSheet_1.selectedRange),
                        pastedRange: curSheet.name + '!' + getRangeAddress(rfshRange),
                        type: pasteType || 'All',
                        selectedRange: selRange
                    };
                    if (hiddenCount) {
                        eventArgs['skipFilterCheck'] = true;
                    }
                    if (clearCFArgs && clearCFArgs.cfClearActionArgs) {
                        eventArgs['cfClearActionArgs'] = clearCFArgs.cfClearActionArgs;
                    }
                    if (cf.length) {
                        eventArgs['cfActionArgs'] = { cfModel: cf, sheetIdx: cSIdx };
                    }
                    this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'clipboard' });
                }
                if (args.focus) {
                    focus(this.parent.element);
                }
            }
        }
        else {
            this.getClipboardEle().select();
        }
    };
    Clipboard.prototype.setCF = function (cRange, pRange, cSheet, pSheet, cf, conditionalFormats) {
        var _this = this;
        var cfRange;
        var indexes;
        var assignCF = function (conditionalFormat) {
            cfRange = [pRange[0] + (indexes[0] <= cRange[0] ? 0 : indexes[0] - cRange[0]),
                pRange[1] + (indexes[1] <= cRange[1] ? 0 : indexes[1] - cRange[1]),
                pRange[2] - (indexes[2] >= cRange[2] ? 0 : cRange[2] - indexes[2]),
                pRange[3] - (indexes[3] >= cRange[3] ? 0 : cRange[3] - indexes[3])];
            if (!pSheet.conditionalFormats) {
                _this.parent.setSheetPropertyOnMute(pSheet, 'conditionalFormats', []);
            }
            var cfRule = {
                range: getRangeAddress(cfRange), type: conditionalFormat.type,
                cFColor: conditionalFormat.cFColor, value: conditionalFormat.value, format: conditionalFormat.format
            };
            pSheet.conditionalFormats.push(cfRule);
            cf.push(cfRule);
        };
        if (conditionalFormats) {
            for (var i = 0, len = conditionalFormats.length; i < len; i++) {
                indexes = getRangeIndexes(conditionalFormats[i].range);
                assignCF(conditionalFormats[i]);
            }
        }
        else {
            conditionalFormats = [];
            if (cSheet.conditionalFormats) {
                for (var i = 0, len = cSheet.conditionalFormats.length; i < len; i++) {
                    indexes = getRangeIndexes(cSheet.conditionalFormats[i].range);
                    if (checkRange([cRange], cSheet.conditionalFormats[i].range)) {
                        conditionalFormats.push(cSheet.conditionalFormats[i]);
                        assignCF(cSheet.conditionalFormats[i]);
                    }
                }
            }
        }
        return conditionalFormats;
    };
    Clipboard.prototype.isRangeMerged = function (range, sheet) {
        var cell = getCell(range[0], range[1], sheet);
        if (cell && (cell.colSpan > 1 || cell.rowSpan > 1)) {
            var args = { range: range.slice(2, 4).concat(range.slice(2, 4)) };
            this.parent.notify(activeCellMergedRange, args);
            return args.range[0] === range[0] && args.range[1] === range[1] && args.range[2] === range[2] && args.range[3] === range[3];
        }
        return false;
    };
    Clipboard.prototype.updateFilter = function (copyInfo, pastedRange) {
        var isFilterCut;
        var diff;
        this.parent.notify(setFilteredCollection, null);
        for (var i = 0; i < this.parent.sheets.length; i++) {
            if (this.parent.filterCollection && this.parent.filterCollection[i] &&
                this.parent.filterCollection[i].sheetIndex === getSheetIndexFromId(this.parent, copyInfo.sId)) {
                var range = copyInfo.range;
                var fRange = getRangeIndexes(this.parent.filterCollection[i].filterRange);
                range = getSwapRange(range);
                if (fRange[0] === range[0] && fRange[2] === range[2] && fRange[1] === range[1] && fRange[3] === range[3]) {
                    isFilterCut = true;
                    diff = [Math.abs(range[0] - fRange[0]), Math.abs(range[1] - fRange[1]),
                        Math.abs(range[2] - fRange[2]), Math.abs(range[3] - fRange[3])];
                }
            }
        }
        var cell = this.parent.getCell(copyInfo.range[0], copyInfo.range[1]);
        cell = cell ? (cell.querySelector('.e-filter-icon') ? cell : this.parent.getCell(copyInfo.range[2], copyInfo.range[3])) : cell;
        var asc = cell ? cell.querySelector('.e-sortasc-filter') : cell;
        var desc = cell ? cell.querySelector('.e-sortdesc-filter') : cell;
        if (isFilterCut) {
            for (var n = 0; n < this.parent.filterCollection.length; n++) {
                var filterCol = this.parent.filterCollection[n];
                var sheetIndex = copyInfo && copyInfo.sId ? getSheetIndexFromId(this.parent, copyInfo.sId) :
                    this.parent.activeSheetIndex;
                if (filterCol.sheetIndex === sheetIndex) {
                    this.parent.notify(initiateFilterUI, { predicates: null, range: filterCol.filterRange, sIdx: sheetIndex, isCut: true });
                }
                if (filterCol.sheetIndex === sheetIndex && sheetIndex === this.parent.activeSheetIndex) {
                    diff = [pastedRange[0] + diff[0], pastedRange[1] + diff[1],
                        Math.abs(pastedRange[2] - diff[2]), Math.abs(pastedRange[3] - diff[3])];
                    this.parent.notify(initiateFilterUI, { predicates: null, range: getRangeAddress(diff), sIdx: null, isCut: true });
                    if (copyInfo.range[3] === copyInfo.range[1]) { // To update sorted icon after pasting.
                        var filteredCell = this.parent.getCell(pastedRange[0], pastedRange[1]);
                        if (asc && filteredCell) {
                            filteredCell.querySelector('.e-filter-icon').classList.add('e-sortasc-filter');
                        }
                        if (desc && filteredCell) {
                            filteredCell.querySelector('.e-filter-icon').classList.add('e-sortdesc-filter');
                        }
                    }
                }
            }
        }
    };
    Clipboard.prototype.isInRange = function (cRng, pRng, sIdx) {
        var activeSheetIndex = this.parent.activeSheetIndex;
        return (inRange(cRng, pRng[0], pRng[1]) && sIdx === activeSheetIndex) ||
            (inRange(cRng, pRng[2], pRng[3]) && sIdx === activeSheetIndex);
    };
    Clipboard.prototype.setCell = function (args) {
        var _this = this;
        var sheet = args.sheet;
        var uiRefresh = sheet.name === this.parent.getActiveSheet().name;
        return function (rIdx, cIdx, cell, lastCell, isExtend, isUniqueCell, actionData, isUndo) {
            if (cell && cell.formula && (cell.formula.indexOf('RANDBETWEEN(') > -1 || cell.formula.indexOf('RAND(') > -1 ||
                cell.formula.indexOf('NOW(') > -1)) {
                args.isRandFormula = true;
            }
            var cancel = updateCell(_this.parent, sheet, {
                cell: cell, rowIdx: rIdx, colIdx: cIdx, pvtExtend: !isExtend, valChange: !isUniqueCell, lastCell: lastCell,
                uiRefresh: uiRefresh, requestType: 'paste', skipFormatCheck: !args.isExternal, isRandomFormula: args.isRandFormula
            }, actionData, isUndo);
            if (!cancel && cell && cell.style && args.isExternal) {
                var hgt = getTextHeightWithBorder(_this.parent, rIdx, cIdx, sheet, cell.style || _this.parent.cellStyle, cell.wrap ? getLines(_this.parent.getDisplayText(cell), getExcludedColumnWidth(sheet, rIdx, cIdx, cell.colSpan > 1 ? cIdx + cell.colSpan - 1 : cIdx), cell.style, _this.parent.cellStyle) : 1);
                hgt = Math.round(hgt);
                if (hgt < 20) {
                    hgt = 20; // default height
                }
                setMaxHgt(sheet, rIdx, cIdx, hgt);
                var prevHeight = getRowsHeight(sheet, rIdx);
                var maxHgt = getMaxHgt(sheet, rIdx);
                var heightChanged = maxHgt > prevHeight;
                if (heightChanged) {
                    setRowEleHeight(_this.parent, sheet, maxHgt, rIdx);
                }
            }
            return cancel;
        };
    };
    Clipboard.prototype.getCopiedIdx = function () {
        if (this.copiedInfo) {
            for (var i = 0; i < this.parent.sheets.length; i++) {
                if (this.parent.sheets[i].id === this.copiedInfo.sId) {
                    return i;
                }
            }
            this.clearCopiedInfo();
        }
        return -1;
    };
    Clipboard.prototype.setCopiedInfo = function (args, isCut) {
        var _this = this;
        if (this.parent.isEdit) {
            return;
        }
        var deferred = new Deferred();
        args.promise = deferred.promise;
        var sheet = this.parent.getActiveSheet();
        var range;
        if (args && args.range) {
            var isRowSelected = (args.range[1] === 0 && args.range[3] === sheet.colCount - 1);
            var isColSelected = (args.range[0] === 0 && args.range[2] === sheet.rowCount - 1);
            var mergeArgs = { range: args.range };
            if (!(isRowSelected || isColSelected)) {
                this.parent.notify(mergedRange, mergeArgs);
            }
            range = mergeArgs.range;
        }
        else {
            range = getRangeIndexes(sheet.selectedRange);
        }
        if (isCut && isReadOnlyCells(this.parent, range)) {
            this.parent.notify(readonlyAlert, null);
            return;
        }
        if (args && !args.isPublic && !args.clipboardData) {
            var eventArgs = { copiedRange: sheet.name + "!" + getRangeAddress(range), cancel: false, action: isCut ? 'cut' : 'copy' };
            this.parent.notify(beginAction, eventArgs);
            if (eventArgs.cancel) {
                return;
            }
        }
        var option = {
            sheet: sheet, indexes: [0, 0, sheet.rowCount - 1, sheet.colCount - 1], isFinite: this.parent.scrollSettings.isFinite,
            promise: new Promise(function (resolve) { resolve((function () { })()); })
        };
        var pictureElements = document.getElementsByClassName('e-ss-overlay-active');
        var pictureLen = pictureElements.length;
        if (sheet.isLocalData && !(args && args.clipboardData) && range[0] === 0 && range[2] === (sheet.rowCount - 1) && !pictureLen) {
            this.parent.showSpinner();
            this.parent.notify('updateSheetFromDataSource', option);
        }
        this.checkForUncalculatedFormula(range, (args && args.sId) ? args.sId : sheet.id);
        option.promise.then(function () {
            if (pictureLen > 0) {
                var imgRowIdx = {
                    clientY: pictureElements[0].offsetTop,
                    isImage: true
                };
                _this.parent.notify(getRowIdxFromClientY, imgRowIdx);
                var imgColIdx = {
                    clientX: pictureElements[0].offsetLeft,
                    isImage: true
                };
                _this.parent.notify(getColIdxFromClientX, imgColIdx);
                _this.copiedShapeInfo = {
                    sId: (args && args.sId) ? args.sId : sheet.id, sheetIdx: sheet.index, isCut: isCut, pictureElem: pictureElements[0], copiedRange: getRangeAddress([imgRowIdx.clientY, imgColIdx.clientX,
                        imgRowIdx.clientY, imgColIdx.clientX]), height: pictureElements[0].offsetHeight,
                    width: pictureElements[0].offsetWidth,
                    chartInfo: _this.getChartElemInfo(pictureElements[0])
                };
                if (!pictureElements[0].classList.contains('e-datavisualization-chart')) {
                    var imgURL = window.getComputedStyle(pictureElements[0]).backgroundImage.slice(5, -2);
                    _this.addImgToClipboard(imgURL, _this.copiedShapeInfo.height, _this.copiedShapeInfo.width);
                }
                _this.hidePaste(true);
                if (isCut) {
                    if (pictureElements[0].classList.contains('e-datavisualization-chart')) {
                        _this.parent.deleteChart(_this.copiedShapeInfo.chartInfo.id);
                    }
                    else {
                        _this.parent.notify(deleteImage, {
                            id: _this.copiedShapeInfo.pictureElem.id, sheetIdx: _this.copiedShapeInfo.sId,
                            range: _this.copiedShapeInfo.copiedRange
                        });
                    }
                }
            }
            else if (!(args && args.clipboardData)) {
                if (_this.copiedInfo) {
                    _this.clearCopiedInfo();
                }
                _this.copiedInfo = {
                    range: range, sId: (args && args.sId) ? args.sId : sheet.id, isCut: isCut
                };
                _this.hidePaste(true);
                if (!args.isFromUpdateAction) {
                    _this.initCopyIndicator();
                }
                if (!Browser.isIE) {
                    _this.getClipboardEle().select();
                }
                if (args && args.invokeCopy) {
                    document.execCommand(isCut ? 'cut' : 'copy');
                }
                _this.parent.hideSpinner();
            }
            if (Browser.isIE) {
                _this.setExternalCells(args, isCut);
            }
            deferred.resolve();
        });
        if (args && args.clipboardData) {
            this.setExternalCells(args, isCut);
            this.getClipboardEle().setAttribute('aria-label', sheet.selectedRange + " " + this.parent.serviceLocator.getService(locale).getConstant(isCut ? 'Cut' : 'Copy'));
        }
    };
    Clipboard.prototype.imageToCanvas = function (src, height, width) {
        return new Promise(function (res) {
            var canvas = document.createElement('canvas');
            var canvasCtx = canvas.getContext('2d');
            var img = new Image();
            img.src = src;
            img.crossOrigin = 'anonymous';
            img.onload = function () {
                canvas.width = width;
                canvas.height = height;
                canvasCtx.drawImage(img, 0, 0, width, height);
                canvas.toBlob(function (blob) {
                    res(blob);
                }, 'image/png');
            };
        });
    };
    Clipboard.prototype.addImgToClipboard = function (src, height, width) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, navigator, imageBlob;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        navigator = window.navigator;
                        return [4 /*yield*/, this.imageToCanvas(src, height, width)];
                    case 1:
                        imageBlob = _b.sent();
                        return [4 /*yield*/, navigator.clipboard.write([new ClipboardItem((_a = {}, _a[imageBlob.type] = imageBlob, _a))])];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Clipboard.prototype.checkForUncalculatedFormula = function (range, sheetId) {
        var cell;
        var sheetIdx = getSheetIndexFromId(this.parent, sheetId);
        var sheet = getSheet(this.parent, sheetIdx);
        for (var i = range[0]; i <= range[2]; i++) {
            for (var j = range[1]; j <= range[3]; j++) {
                cell = getCell(i, j, sheet, null, true);
                if (cell.formula && isUndefined$1(cell.value)) {
                    this.parent.notify(workbookFormulaOperation, {
                        action: 'refreshCalculate', value: cell.formula, rowIndex: i, colIndex: j, isFormula: checkIsFormula(cell.formula), sheetIndex: sheetIdx
                    });
                }
            }
        }
    };
    Clipboard.prototype.getChartElemInfo = function (overlayEle) {
        var chartColl = this.parent.chartColl;
        if (overlayEle.classList.contains('e-datavisualization-chart')) {
            var chartId = overlayEle.getElementsByClassName('e-control')[0].id;
            for (var idx = 0; idx < chartColl.length; idx++) {
                if (chartColl[idx].id === chartId) {
                    var chart = chartColl[idx];
                    return chart;
                }
            }
        }
        return null;
    };
    Clipboard.prototype.clearCopiedInfo = function () {
        if (this.copiedInfo) {
            if (this.parent.getActiveSheet().id === this.copiedInfo.sId) {
                this.removeIndicator(this.parent.getSelectAllContent());
                this.removeIndicator(this.parent.getColumnHeaderContent());
                this.removeIndicator(this.parent.getRowHeaderContent());
                this.removeIndicator(this.parent.getMainContent());
            }
            this.copiedInfo = null;
            this.hidePaste();
        }
        if (this.copiedShapeInfo) {
            this.copiedShapeInfo = null;
            this.hidePaste();
        }
    };
    Clipboard.prototype.removeIndicator = function (ele) {
        if (ele) {
            var indicator = ele.getElementsByClassName('e-copy-indicator')[0];
            if (indicator) {
                detach(indicator);
            }
        }
    };
    Clipboard.prototype.initCopyIndicator = function () {
        if (this.copiedInfo && this.parent.getActiveSheet().id === this.copiedInfo.sId) {
            var copyIndicator = this.parent.createElement('div', { className: 'e-copy-indicator' });
            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-top' }));
            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-bottom' }));
            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-left' }));
            copyIndicator.appendChild(this.parent.createElement('div', { className: 'e-right' }));
            setPosition(this.parent, copyIndicator, this.copiedInfo.range, 'e-copy-indicator');
        }
    };
    Clipboard.prototype.showDialog = function () {
        var _this = this;
        this.parent.serviceLocator.getService(dialog).show({
            header: 'Spreadsheet',
            height: 205, width: 340, isModal: true, showCloseIcon: true,
            content: this.parent.serviceLocator.getService(locale).getConstant('PasteAlert'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'PasteDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
            }
        });
    };
    Clipboard.prototype.hidePaste = function (isShow) {
        if (this.parent.getActiveSheet().isProtected) {
            isShow = false;
        }
        this.parent.notify(enableToolbarItems, [{ items: [this.parent.element.id + '_paste'], enable: isShow || false }]);
    };
    Clipboard.prototype.setExternalCells = function (args, isCut) {
        var cell;
        var val;
        var text = '';
        var cellStyle;
        var sheet = this.parent.getActiveSheet();
        var range = getSwapRange(this.copiedInfo.range);
        var isRowSelected = range[1] === 0 && range[3] === sheet.colCount - 1;
        var isColSelected = range[0] === 0 && range[2] === sheet.rowCount - 1;
        var data = '<html><body><table class="e-spreadsheet" xmlns="http://www.w3.org/1999/xhtml" style="border-collapse:collapse;"';
        if (isRowSelected || isColSelected) {
            data += " aria-rowcount=\"" + sheet.usedRange.rowIndex + "\" aria-colcount=\"" + sheet.usedRange.colIndex + "\"";
            data += " aria-label=\"" + (isRowSelected && isColSelected ? 'Sheet' : isRowSelected ? 'Row' : 'Column') + "\"";
        }
        data += '><tbody>';
        for (var i = range[0]; i <= range[2]; i++) {
            if (!isCut && isFilterHidden(sheet, i)) {
                continue;
            }
            data += '<tr>';
            for (var j = range[1]; j <= range[3]; j++) {
                cell = getCell(i, j, sheet, false, true);
                if (cell.colSpan < 0 || cell.rowSpan < 0) {
                    continue;
                }
                data += '<td';
                if (cell.colSpan) {
                    data += ' colspan="' + cell.colSpan + '"';
                }
                if (cell.rowSpan) {
                    data += ' rowspan="' + cell.rowSpan + '"';
                }
                if (cell.style) {
                    cellStyle = '';
                    if (!cell.style['whiteSpace']) {
                        cellStyle += 'white-space:' + (cell.wrap ? 'normal' : 'nowrap') + ';';
                    }
                    if (!cell.style.verticalAlign) {
                        cellStyle += 'vertical-align:bottom;';
                    }
                    Object.keys(cell.style).forEach(function (style) {
                        var cellStyleValue = cell.style["" + style];
                        if (style.includes('border') && cellStyleValue.includes('dashed') && cellStyleValue.includes('1px')) {
                            cellStyleValue = cellStyleValue.replace('1px', 'thin');
                        }
                        var regex = style.match(/[A-Z]/);
                        cellStyle += (style === 'backgroundColor' ? 'background' : (regex ? style.replace(regex[0], '-'
                            + regex[0].toLowerCase()) : style)) + ':' + ((style === 'backgroundColor' || style === 'color')
                            ? cell.style["" + style].slice(0, 7) : cellStyleValue) + ';';
                    });
                    data += cellStyle.includes('"') ? " style='" + cellStyle + "'" : " style=\"" + cellStyle + "\"";
                }
                else {
                    data += ' style="white-space:' + (cell.wrap ? 'normal' : 'nowrap') + ';vertical-align:bottom;"';
                }
                if (!isNullOrUndefined(cell.value)) {
                    val = cell.value;
                    if (cell.format && cell.format !== 'General') {
                        data += cell.value.toString().includes('"') ? ' cell-value=\'' + val + '\'' : ' cell-value="' + cell.value + '"';
                        data += cell.format.includes('"') ? ' num-format=\'' + cell.format + '\'' : ' num-format="' + cell.format + '"';
                        var eventArgs = { formattedText: val, value: val, format: cell.format, cell: cell, rowIndex: i,
                            colIndex: j, dataUpdate: true };
                        this.parent.notify(getFormattedCellObject, eventArgs);
                        val = eventArgs.formattedText;
                    }
                    data += '>';
                    if (typeof val === 'string' && val.includes('\n')) {
                        data += val.split('\n').join('<br>');
                    }
                    else {
                        data += val;
                    }
                    text += val;
                    data += '</td>';
                }
                else {
                    data += '></td>';
                }
                text += j === range[3] ? '' : '\t';
            }
            data += '</tr>';
            text += i === range[2] ? '' : '\n';
        }
        data += '</tbody></table></body></html>';
        if (Browser.isIE) {
            window['clipboardData'].setData('text', text);
            if (isCut) {
                window['clipboardData'].setData('isInternalCut', text);
            }
        }
        else {
            args.clipboardData.setData('text/html', data);
            args.clipboardData.setData('text/plain', text);
            if (isCut) {
                args.clipboardData.setData('isInternalCut', text);
            }
            args.preventDefault();
        }
    };
    Clipboard.prototype.getExternalCells = function (args) {
        var _this = this;
        var html;
        var text;
        var rows = [];
        var pasteModelArgs = { model: rows };
        var ele = this.parent.createElement('span');
        var clearClipboard = function () { return setTimeout(function () { _this.getClipboardEle().innerHTML = ''; }, 0); };
        if (Browser.isIE) {
            text = window['clipboardData'].getData('text');
        }
        else {
            html = args.clipboardData.getData('text/html');
            text = args.clipboardData.getData('text/plain');
            if (this.copiedInfo && html.includes('<table class="e-spreadsheet"')) {
                var isFilteredRange = false;
                if (!this.copiedInfo.isCut) {
                    var filterArgs = { sheetIdx: getSheetIndexFromId(this.parent, this.copiedInfo.sId) };
                    this.parent.notify(getFilterRange, filterArgs);
                    if (filterArgs.isFiltered) {
                        var indexes = filterArgs.filterRange;
                        var copyIndexes = this.copiedInfo.range;
                        isFilteredRange = indexes[0] === copyIndexes[0] && indexes[1] === copyIndexes[1] && indexes[2] === copyIndexes[2] &&
                            indexes[3] === copyIndexes[3];
                    }
                }
                if (!isFilteredRange) {
                    clearClipboard();
                    return { internal: true };
                }
            }
            ele.innerHTML = html;
        }
        if (ele.querySelector('table')) {
            this.generateCells(ele, pasteModelArgs);
        }
        else if (ele.querySelector('img')) {
            var img = ele.querySelector('img');
            this.parent.notify(createImageElement, { options: { src: img.src, height: img.height, width: img.width }, isPublic: true });
        }
        else if (text) {
            var cells_1 = [];
            var cellStyle_1;
            var childArr_1;
            var filteredChild_1;
            if (html) {
                childArr_1 = [].slice.call(ele.children);
            }
            var getStyle_1 = this.cellStyle(ele);
            pasteModelArgs.colCount = 1;
            text.split('\n').forEach(function (row) {
                cellStyle_1 = null;
                if (html) {
                    filteredChild_1 = childArr_1.filter(function (elem) { return elem.textContent && elem.textContent.replace(/(\r\n|\n|\r|\s)/gm, ' ').trim() === row.trim(); })[0];
                    if (filteredChild_1) {
                        cellStyle_1 = getStyle_1(filteredChild_1);
                        childArr_1.splice(childArr_1.indexOf(filteredChild_1), 1);
                    }
                }
                row.split('\t').forEach(function (col, j) {
                    if (col || cellStyle_1) {
                        cells_1[j] = {};
                        if (cellStyle_1) {
                            if (cellStyle_1.whiteSpace &&
                                cellStyle_1.whiteSpace !== 'nowrap') {
                                cells_1[j].wrap = true;
                                delete cellStyle_1['whiteSpace'];
                                if (Object.keys(cellStyle_1).length) {
                                    cells_1[j].style = cellStyle_1;
                                }
                            }
                            else {
                                cells_1[j].style = cellStyle_1;
                            }
                        }
                        if (col) {
                            if (checkIsFormula(col)) {
                                cells_1[j].formula = col;
                            }
                            else {
                                cells_1[j].value = parseIntValue(col.trim(), true, true);
                            }
                        }
                    }
                });
                rows.push({ cells: cells_1 });
                pasteModelArgs.colCount = Math.max(pasteModelArgs.colCount, cells_1.length);
                cells_1 = [];
            });
            pasteModelArgs.rowCount = rows.length;
            pasteModelArgs.usedRowIndex = rows.length - 1;
            pasteModelArgs.usedColIndex = pasteModelArgs.colCount - 1;
        }
        else if (args.clipboardData.files && args.clipboardData.files[0] && args.clipboardData.files[0].type.includes('image')) {
            clearClipboard();
            return { file: args.clipboardData.files[0] };
        }
        clearClipboard();
        return pasteModelArgs;
    };
    Clipboard.prototype.generateCells = function (ele, pasteModelArgs) {
        var rows = pasteModelArgs.model;
        var table = ele.querySelector('table');
        var isSpreadsheet = table.classList.contains('e-spreadsheet');
        var tableStyleObj = {};
        var rowStyleObj = {};
        pasteModelArgs.usedRowIndex = table.rows.length - 1;
        pasteModelArgs.rowCount = table.rows.length;
        if (isSpreadsheet) {
            pasteModelArgs.selection = table.getAttribute('aria-label');
            if (pasteModelArgs.selection) {
                if (pasteModelArgs.selection === 'Sheet') {
                    pasteModelArgs.usedRowIndex = Number(table.getAttribute('aria-rowcount'));
                    pasteModelArgs.usedColIndex = Number(table.getAttribute('aria-colcount'));
                }
                else if (pasteModelArgs.selection === 'Row') {
                    pasteModelArgs.usedColIndex = Number(table.getAttribute('aria-colcount'));
                }
                else {
                    pasteModelArgs.usedRowIndex = Number(table.getAttribute('aria-rowcount'));
                }
            }
        }
        var tableStyles = [];
        if (!isNullOrUndefined(table)) {
            if (!isNullOrUndefined(table.getAttribute('style'))) {
                tableStyles.push(table.getAttribute('style'));
                this.generateStyles(tableStyles, tableStyleObj);
            }
        }
        var getStyle = this.cellStyle(ele, isSpreadsheet);
        var tr;
        var cells;
        var cellStyle;
        var td;
        var cellCount = 1;
        var colLen;
        var formatStr;
        var curColIdx;
        pasteModelArgs.colCount = 1;
        var rowStyles = [];
        for (var rowIdx = 0, rowLen = pasteModelArgs.usedRowIndex; rowIdx <= rowLen; rowIdx++) {
            tr = table.rows[rowIdx];
            if (!isNullOrUndefined(tr.getAttribute('style'))) {
                rowStyles.push(tr.getAttribute('style'));
                this.generateStyles(rowStyles, rowStyleObj);
            }
            if (!rows[rowIdx]) {
                rows[rowIdx] = { cells: [] };
            }
            cells = rows[rowIdx].cells;
            pasteModelArgs.colCount = Math.max(pasteModelArgs.colCount, tr.cells.length);
            colLen = pasteModelArgs.usedColIndex < tr.cells.length ? pasteModelArgs.usedColIndex : tr.cells.length - 1;
            for (var colIdx = 0; colIdx <= colLen; colIdx++) {
                td = tr.cells[colIdx];
                curColIdx = colIdx;
                if (cells[colIdx]) {
                    colIdx = this.getNewIndex(cells, colIdx);
                }
                cells[colIdx] = {};
                cellStyle = getStyle(td, rowStyleObj, tableStyleObj);
                td.textContent = td.textContent.replace(/(\r\n|\n|\r)/gm, '');
                td.textContent = td.textContent.replace(/\s+/g, ' ');
                if (cellStyle.whiteSpace &&
                    cellStyle.whiteSpace !== 'nowrap') {
                    cells[colIdx].wrap = true;
                    delete cellStyle['whiteSpace'];
                }
                if (Object.keys(cellStyle).length) {
                    if (cellStyle.border) {
                        ['borderBottom', 'borderTop', 'borderLeft', 'borderRight'].forEach(function (prop) {
                            cellStyle["" + prop] = cellStyle.border;
                        });
                        delete cellStyle.border;
                    }
                    cells[colIdx].style = cellStyle;
                }
                if (td.textContent) {
                    cells[colIdx].value = parseIntValue(td.textContent.trim(), true, true);
                }
                formatStr = isSpreadsheet ? 'num-format' : 'number-format';
                if (td.getAttribute(formatStr)) {
                    cells[colIdx].format = td.getAttribute(formatStr);
                    if (cells[colIdx].value && td.getAttribute('cell-value')) {
                        cells[colIdx].value = parseIntValue(td.getAttribute('cell-value').trim(), true, true);
                    }
                }
                if (td.getAttribute('colspan') && parseInt(td.getAttribute('colspan'), 10) > 1) {
                    cells[colIdx].colSpan = parseInt(td.getAttribute('colspan'), 10);
                }
                if (td.getAttribute('rowspan') && parseInt(td.getAttribute('rowspan'), 10) > 1) {
                    cells[colIdx].rowSpan = parseInt(td.getAttribute('rowspan'), 10);
                }
                if (cells[colIdx].colSpan > 1 && cells[colIdx].rowSpan > 1) {
                    var cell = void 0;
                    for (var k = rowIdx, len = rowIdx + cells[colIdx].rowSpan; k < len; k++) {
                        for (var l = colIdx, len_1 = colIdx + cells[colIdx].colSpan; l < len_1; l++) {
                            if (k === rowIdx && l === colIdx) {
                                continue;
                            }
                            cell = cells[colIdx].style ? { style: extend({}, cells[colIdx].style) } : {};
                            if (k !== rowIdx) {
                                cell.rowSpan = rowIdx - k;
                            }
                            if (l !== colIdx) {
                                cell.colSpan = colIdx - l;
                            }
                            if (!rows[k]) {
                                rows[k] = { cells: [] };
                            }
                            rows[k].cells[l] = cell;
                        }
                    }
                }
                else if (cells[colIdx].colSpan > 1) {
                    for (var k = colIdx + 1, len = colIdx + cells[colIdx].colSpan; k < len; k++) {
                        cells[k] = { colSpan: colIdx - k, style: extend({}, cellStyle) };
                    }
                }
                else if (cells[colIdx].rowSpan > 1) {
                    for (var k = rowIdx + 1, len = rowIdx + cells[colIdx].rowSpan; k < len; k++) {
                        if (!rows[k]) {
                            rows[k] = { cells: [] };
                        }
                        rows[k].cells[colIdx] = { rowSpan: rowIdx - k, style: extend({}, cellStyle) };
                    }
                }
                colIdx = curColIdx;
            }
            cellCount = Math.max(cellCount, cells.length);
        }
        pasteModelArgs.usedColIndex = cellCount - 1;
    };
    Clipboard.prototype.getNewIndex = function (cells, index) {
        if (cells[index]) {
            index++;
            index = this.getNewIndex(cells, index);
        }
        return index;
    };
    Clipboard.prototype.cellStyle = function (ele, isSpreadsheet) {
        var _this = this;
        var eleStyle;
        var commonStyle;
        if (!isSpreadsheet) {
            eleStyle = ele.querySelector('style') && ele.querySelector('style').innerHTML;
            var keys = Object.keys(this.parent.commonCellStyle);
            if (keys && keys.length && eleStyle) {
                var tdStyle = eleStyle.includes('td') ? eleStyle.split('td')[1] : eleStyle;
                tdStyle = tdStyle.includes('{') ? tdStyle.split('{')[1].split('}')[0] : tdStyle.split('}')[0];
                commonStyle = {};
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var regex = key.match(/[A-Z]/);
                    if (regex) {
                        key = key.replace(regex[0], '-' + regex[0].toLowerCase());
                    }
                    if (tdStyle.indexOf(key) > -1) {
                        commonStyle[keys[i]] = tdStyle.split(key + ':')[1].split(';')[0].trim();
                    }
                }
            }
        }
        return function (td, rowStyleObj, tableStyleObj) {
            var cellStyle = {};
            var styles;
            if (isSpreadsheet) {
                if (td.getAttribute('style')) {
                    styles = td.getAttribute('style').split(';');
                }
                else {
                    return cellStyle;
                }
            }
            else {
                styles = [];
                if (eleStyle && td.className && eleStyle.includes(td.classList[0])) {
                    var styleTagCSS = eleStyle.split(td.classList[0]);
                    styles.push(styleTagCSS[styleTagCSS.length - 1].split('{')[1].split('}')[0]);
                }
                var nodeList = [].slice.call(td.querySelectorAll('*'));
                nodeList.unshift(td);
                nodeList.forEach(function (node) {
                    if (node.getAttribute('style')) {
                        styles.push(node.getAttribute('style'));
                    }
                    if (node.tagName === 'B') {
                        styles.push('font-weight:bold');
                    }
                    if (node.tagName === 'I') {
                        styles.push('font-style:italic');
                    }
                    if (node.tagName === 'U') {
                        styles.push('text-decoration:underline');
                    }
                });
                Object.assign(cellStyle, tableStyleObj, rowStyleObj, commonStyle);
            }
            if (styles.length) {
                _this.generateStyles(styles, cellStyle);
            }
            if (td.querySelector('S')) {
                cellStyle.textDecoration = cellStyle.textDecoration ? 'underline line-through' : 'line-through';
            }
            if (cellStyle.textDecoration &&
                ['underline', 'line-through', 'underline line-through', 'none'].indexOf(cellStyle.textDecoration) === -1) {
                cellStyle.textDecoration = 'none';
            }
            if (cellStyle.textAlign && ['left', 'center', 'right'].indexOf(cellStyle.textAlign) === -1) {
                cellStyle.textAlign = 'left';
            }
            if (cellStyle.verticalAlign && ['bottom', 'middle', 'top'].indexOf(cellStyle.verticalAlign) === -1) {
                cellStyle.verticalAlign = 'bottom';
            }
            if (cellStyle.fontSize) {
                cellStyle.fontSize = Math.round(parseFloat((cellStyle.fontSize.indexOf('px') > -1) ? (parseFloat(cellStyle.fontSize) * 0.75).toString() :
                    ((cellStyle.fontSize.indexOf('em') > -1) ? (parseFloat(cellStyle.fontSize) * 16 / 1.3333).toString() : cellStyle.fontSize))) + 'pt';
            }
            if (cellStyle.fontWeight && ['bold', 'normal'].indexOf(cellStyle.fontWeight) === -1) {
                cellStyle.fontWeight = cellStyle.fontWeight > '599' ? 'bold' : 'normal';
            }
            return cellStyle;
        };
    };
    Clipboard.prototype.generateStyles = function (styles, styleObj) {
        var index;
        var value;
        var splitValue;
        var splitBorder;
        var borderSize;
        // `styleAttr` holds the `CSS` property and `styleValue` holds its corresponding `JS` property in same order, common for border.
        var styleAttr = ['font-family', 'vertical-align', 'text-align', 'text-indent', 'color', 'white-space',
            'font-weight', 'font-style', 'font-size', 'text-decoration', 'background', 'background-color'];
        var styleValue = ['fontFamily', 'verticalAlign', 'textAlign', 'textIndent', 'color', 'whiteSpace', 'fontWeight',
            'fontStyle', 'fontSize', 'textDecoration', 'backgroundColor', 'backgroundColor'];
        var borderAttr = ['border-bottom', 'border-top', 'border-right', 'border-left', 'border'];
        var borderValue = ['borderBottom', 'borderTop', 'borderRight', 'borderLeft', 'border'];
        if (styles && styles.length) {
            styles.forEach(function (styles) {
                styles.split(';').forEach(function (style) {
                    value = style.split(':')[0].trim();
                    index = styleAttr.indexOf(value);
                    if (index > -1) {
                        value = style.split(':')[1].trim();
                        styleObj[styleValue[index]] = value;
                    }
                    else {
                        index = borderAttr.indexOf(value);
                        if (index > -1) {
                            value = style.split(':')[1].trim();
                            if (value === 'none') {
                                value = undefined;
                            }
                            else if (value.includes('pt')) {
                                splitValue = value.split('pt');
                                splitBorder = splitValue[0].split(' ');
                                for (var i = 0; i < splitBorder.length; i++) {
                                    borderSize = parseFloat(splitBorder[i]);
                                    if (borderSize) {
                                        splitBorder.splice(i, 1);
                                        splitBorder.unshift((borderSize / 0.75).toFixed(2) + 'px');
                                        splitValue[0] = splitBorder.join(' ');
                                        break;
                                    }
                                }
                                value = splitValue.join('');
                            }
                            styleObj[borderValue[index]] = value;
                        }
                    }
                });
            });
        }
    };
    Clipboard.prototype.refreshOnInsertDelete = function (args) {
        if (this.copiedInfo) {
            if (args.model.id !== this.copiedInfo.sId) {
                return;
            }
            var range = this.copiedInfo.range;
            if (args.isInsert) {
                if (args.modelType === 'Column') {
                    if (args.start <= range[3]) {
                        if (args.start <= range[1]) {
                            var len = args.end - args.start + 1;
                            range[1] += len;
                            range[3] += len;
                        }
                        else {
                            range[3] = range[1] + (args.start - range[1] - 1);
                        }
                        this.performAction();
                    }
                }
                else {
                    if (args.start <= range[2]) {
                        if (args.start <= range[0]) {
                            var len = args.end - args.start + 1;
                            range[0] += len;
                            range[2] += len;
                        }
                        else {
                            range[2] = range[1] + (args.start - range[1] - 1);
                        }
                        this.performAction();
                    }
                }
            }
            else {
                this.clearCopiedInfo();
            }
        }
    };
    Clipboard.prototype.performAction = function () {
        var copyIndicator = this.getCopyIndicator();
        if (copyIndicator) {
            setPosition(this.parent, copyIndicator, this.copiedInfo.range, 'e-copy-indicator');
        }
    };
    Clipboard.prototype.getClipboardEle = function () {
        return this.parent.element.getElementsByClassName('e-clipboard')[0];
    };
    Clipboard.prototype.getCopyIndicator = function () {
        return this.parent.element.getElementsByClassName('e-copy-indicator')[0];
    };
    Clipboard.prototype.getModuleName = function () {
        return 'clipboard';
    };
    Clipboard.prototype.destroy = function () {
        this.removeEventListener();
        var ele = this.getClipboardEle();
        detach(ele);
        this.parent = null;
    };
    return Clipboard;
}());

/**
 * The `Protect-Sheet` module is used to handle the Protecting functionalities in Spreadsheet.
 */
var Edit = /** @class */ (function () {
    /**
     * Constructor for edit module in Spreadsheet.
     *
     * @param {Spreadsheet} parent - Constructor for edit module in Spreadsheet.
     * @private
     */
    function Edit(parent) {
        this.editorElem = null;
        this.editCellData = {};
        this.isEdit = false;
        this.isCellEdit = true;
        this.isNewValueEdit = true;
        this.isAltEnter = false;
        this.curEndPos = null;
        this.curStartPos = null;
        this.uniqueColl = '';
        this.uniqueActCell = '';
        this.isSpill = false;
        this.keyCodes = {
            BACKSPACE: 8,
            SPACE: 32,
            TAB: 9,
            DELETE: 46,
            ESC: 27,
            ENTER: 13,
            FIRSTALPHABET: 65,
            LASTALPHABET: 90,
            FIRSTNUMBER: 48,
            LASTNUMBER: 59,
            FIRSTNUMPAD: 96,
            LASTNUMPAD: 111,
            SYMBOLSETONESTART: 186,
            SYMBOLSETONEEND: 192,
            SYMBOLSETTWOSTART: 219,
            SYMBOLSETTWOEND: 222,
            FIREFOXEQUALPLUS: 61,
            FIREFOXMINUS: 173,
            F2: 113
        };
        this.formulaErrorStrings = [
            'mismatched parentheses',
            'requires 3 arguments',
            'improper formula',
            'empty expression',
            'mismatched string quotes',
            'wrong number of arguments',
            'invalid arguments'
        ];
        this.parent = parent;
        this.addEventListener();
        //Spreadsheet.Inject(WorkbookEdit);
    }
    /**
     * To destroy the edit module.
     *
     * @returns {void} - To destroy the edit module.
     * @hidden
     */
    Edit.prototype.destroy = function () {
        if (this.isEdit) {
            this.cancelEdit(true, false);
        }
        this.removeEventListener();
        this.editorElem = null;
        if (this.formulaErrorStrings) {
            this.formulaErrorStrings = [];
        }
        if (this.editCellData) {
            this.editCellData = {};
        }
        if (this.keyCodes) {
            this.keyCodes = {};
        }
        this.parent = null;
    };
    Edit.prototype.addEventListener = function () {
        if (Browser.isDevice && Browser.info.name === 'safari' && (Browser.isIos || Browser.isIos7)) {
            EventHandler.add(this.parent.element, 'touchend', this.tapHandler, this);
        }
        else {
            EventHandler.add(this.parent.element, 'dblclick', this.dblClickHandler, this);
        }
        this.parent.on(mouseDown, this.mouseDownHandler, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
        this.parent.on(keyDown, this.keyDownHandler, this);
        this.parent.on(editOperation, this.performEditOperation, this);
        this.parent.on(initiateCur, this.initiateCurPosition, this);
        this.parent.on(editValue, this.updateFormulaBarValue, this);
        this.parent.on(addressHandle, this.addressHandler, this);
        this.parent.on(initiateEdit, this.initiateRefSelection, this);
        this.parent.on(forRefSelRender, this.refSelectionRender, this);
        this.parent.on(checkUniqueRange, this.checkUniqueRange, this);
        this.parent.on(reApplyFormula, this.reApplyFormula, this);
        this.parent.on(activeSheetChanged, this.sheetChangeHandler, this);
        this.parent.on(readonlyAlert, this.readOnlyAlertHandler, this);
        this.parent.on(finiteAlert, this.finiteAlertHandler, this);
    };
    Edit.prototype.removeEventListener = function () {
        if (Browser.isDevice && Browser.info.name === 'safari' && (Browser.isIos || Browser.isIos7)) {
            EventHandler.remove(this.parent.element, 'touchend', this.tapHandler);
        }
        else {
            EventHandler.remove(this.parent.element, 'dblclick', this.dblClickHandler);
        }
        if (!this.parent.isDestroyed) {
            this.parent.off(mouseDown, this.mouseDownHandler);
            this.parent.off(keyUp, this.keyUpHandler);
            this.parent.off(keyDown, this.keyDownHandler);
            this.parent.off(editOperation, this.performEditOperation);
            this.parent.off(initiateCur, this.initiateCurPosition);
            this.parent.off(editValue, this.updateFormulaBarValue);
            this.parent.off(addressHandle, this.addressHandler);
            this.parent.off(initiateEdit, this.initiateRefSelection);
            this.parent.off(forRefSelRender, this.refSelectionRender);
            this.parent.off(checkUniqueRange, this.checkUniqueRange);
            this.parent.off(reApplyFormula, this.reApplyFormula);
            this.parent.off(activeSheetChanged, this.sheetChangeHandler);
            this.parent.off(readonlyAlert, this.readOnlyAlertHandler);
            this.parent.off(finiteAlert, this.finiteAlertHandler);
        }
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    Edit.prototype.getModuleName = function () {
        return 'edit';
    };
    Edit.prototype.performEditOperation = function (args) {
        var action = args.action;
        switch (action) {
            case 'renderEditor':
                this.renderEditor();
                if (args.initLoad && Browser.isDevice && Browser.info.name === 'safari' && (Browser.isIos || Browser.isIos7)) {
                    var focusEditEle_1 = this.parent.createElement('div', { className: 'e-ss-focus-edit', attrs: { 'contentEditable': 'true', 'inputmode': 'none', 'tabindex': '-1' } });
                    var sheetPanel = this.parent.element.querySelector('.e-sheet-panel');
                    if (sheetPanel) {
                        sheetPanel.style.position = 'relative';
                        sheetPanel.appendChild(focusEditEle_1);
                    }
                    this.parent.element.onfocus = function () {
                        focus(focusEditEle_1);
                    };
                }
                break;
            case 'refreshEditor':
                this.refreshEditor(args.value, args.refreshFormulaBar, args.refreshEditorElem, args.isAppend, args.trigEvent);
                if (args.refreshCurPos) {
                    this.setCursorPosition();
                }
                break;
            case 'startEdit':
                if (!this.isEdit) {
                    this.isNewValueEdit = args.isNewValueEdit;
                    this.startEdit(args.address, args.value, args.refreshCurPos);
                }
                else {
                    var isEdit = false;
                    var arg = { isEdit: isEdit };
                    this.parent.notify(isFormulaBarEdit, arg);
                    if (arg.isEdit) {
                        this.isNewValueEdit = args.isNewValueEdit;
                        this.startEdit(args.address, args.value, args.refreshCurPos);
                    }
                }
                break;
            case 'endEdit':
                if (this.isEdit) {
                    this.endEdit(args.refreshFormulaBar, null, args.isPublic);
                }
                break;
            case 'cancelEdit':
                if (this.isEdit) {
                    this.cancelEdit(args.refreshFormulaBar);
                }
                break;
            case 'getCurrentEditValue':
                args.editedValue = this.editCellData.value;
                if (args.endFormulaRef !== undefined) {
                    args.endFormulaRef = this.endFormulaRef;
                }
                break;
            case 'refreshDependentCellValue':
                this.refreshDependentCellValue(args.rowIdx, args.colIdx, args.sheetIdx);
                break;
            case 'getElement':
                args.element = this.getEditElement(this.parent.getActiveSheet());
                break;
            case 'focusEditorElem':
                this.editorElem.focus();
                break;
            case 'getCurrentEditSheetIdx':
                args.sheetIndex = this.editCellData.sheetIndex;
                break;
        }
    };
    Edit.prototype.keyUpHandler = function (e) {
        if (this.isEdit) {
            var editElement = this.getEditElement(this.parent.getActiveSheet());
            if (e.altKey && e.keyCode === 13) {
                editElement.focus();
                this.altEnter();
                this.isAltEnter = true;
            }
            else if (this.isCellEdit && this.editCellData.value !== editElement.textContent && e.keyCode !== 16 && (!e.shiftKey ||
                (e.shiftKey && !isNavigationKey(e.keyCode)))) {
                this.refreshEditor(editElement.textContent, this.isCellEdit);
            }
            var isFormulaEdit = checkIsFormula(this.editCellData.value, true);
            if (isFormulaEdit && (!e || (e.keyCode !== 16 && e.keyCode !== 17 && (!e.shiftKey || !isNavigationKey(e.keyCode))))) {
                this.updateFormulaReference(editElement);
                if (this.endFormulaRef) {
                    var curOffset = this.getCurPosition();
                    var validCharacters = ['+', '-', '*', '/', this.parent.listSeparator, '(', '=', '&', ':'];
                    if (curOffset.end && validCharacters.indexOf(this.editCellData.value[curOffset.end - 1]) > -1) {
                        this.endFormulaRef = false;
                    }
                }
            }
        }
    };
    Edit.prototype.updateFormulaReference = function (editElement) {
        var formulaRefIndicator = this.parent.element.querySelector('.e-formularef-indicator');
        if (formulaRefIndicator) {
            formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
        }
        if (this.editCellData.value !== editElement.textContent) {
            this.refreshEditor(editElement.textContent, true);
        }
        var sheetIdx = this.editCellData.sheetIndex;
        var editValue = this.editCellData.value;
        this.parent.notify(initiateFormulaReference, { range: editValue, formulaSheetIdx: sheetIdx });
    };
    Edit.prototype.keyDownHandler = function (e) {
        var trgtElem = e.target;
        var keyCode = e.keyCode;
        var sheet = this.parent.getActiveSheet();
        var actCell = getCellIndexes(sheet.activeCell);
        var cell = getCell(actCell[0], actCell[1], sheet, false, true);
        var isKeyboardShortcut = this.parent.enableKeyboardShortcut;
        if (!isKeyboardShortcut && keyCode === this.keyCodes.SPACE && !e.ctrlKey && !e.altKey && !e.metaKey) {
            e.preventDefault();
            return;
        }
        if (!closest(trgtElem, '.e-spreadsheet .e-dialog')) {
            if (!sheet.isProtected || trgtElem.classList.contains('e-sheet-rename') || !isLocked(cell, getColumn(sheet, actCell[1])) || ((trgtElem.classList.contains('e-formula-bar') || trgtElem.classList.contains('e-combobox')) && !trgtElem.disabled)) {
                if (this.isEdit) {
                    var editorElem = this.getEditElement(sheet);
                    var isFormulaEdit = checkIsFormula(this.editCellData.value, true);
                    if (this.isCellEdit || (isFormulaEdit && this.editCellData.value !== editorElem.textContent && e.keyCode !== 16 &&
                        e.keyCode !== 17)) {
                        if (actCell[1] < this.parent.frozenColCount(sheet) && (!sheet.frozenRows || actCell[0] >=
                            this.parent.frozenRowCount(sheet)) && editorElem && editorElem.style.height !== 'auto') {
                            if (getTextWidth(editorElem.textContent, cell.style, this.parent.cellStyle) > parseInt(editorElem.style.maxWidth, 10)) {
                                editorElem.style.height = 'auto';
                            }
                        }
                        if (getTextWidth(editorElem.textContent, cell.style, this.parent.cellStyle) > parseInt(editorElem.style.maxWidth, 10) - 5) { // 5 decreased for padding.
                            editorElem.style.height = 'auto';
                        }
                        if (actCell[0] < this.parent.frozenRowCount(sheet) && editorElem && !editorElem.style.overflow && getTextWidth(editorElem.textContent, cell.style, this.parent.cellStyle) > parseInt(editorElem.style.maxWidth, 10)) {
                            editorElem.style.overflow = 'auto';
                        }
                        if (!e.shiftKey || (e.shiftKey && !isNavigationKey(e.keyCode))) {
                            this.refreshEditor(editorElem.textContent, this.isCellEdit, false, false, false);
                        }
                    }
                    if (!e.altKey) {
                        switch (keyCode) {
                            case this.keyCodes.ENTER:
                                if (Browser.isWindows) {
                                    e.preventDefault();
                                }
                                if (!isFormulaEdit) {
                                    this.endEdit(false, e);
                                }
                                else {
                                    var formulaRefIndicator = this.parent.element.querySelector('.e-formularef-indicator');
                                    if (formulaRefIndicator) {
                                        formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                    }
                                    if (getSheet(this.parent, this.editCellData.sheetIndex).id === sheet.id) {
                                        this.endEdit(false, e);
                                    }
                                    else {
                                        this.parent.goTo(this.editCellData.fullAddr);
                                        this.endEdit(false, e);
                                    }
                                }
                                break;
                            case this.keyCodes.TAB:
                                if (!this.hasFormulaSuggSelected()) {
                                    this.endEdit(false, e);
                                }
                                break;
                            case this.keyCodes.ESC:
                                if (isKeyboardShortcut) {
                                    this.cancelEdit(true, true, e);
                                }
                                break;
                        }
                    }
                }
                else if (trgtElem.classList.contains('e-spreadsheet') || closest(trgtElem, '.e-sheet-panel')) {
                    if (keyCode === 13 && trgtElem.contentEditable === 'true') {
                        e.preventDefault();
                    }
                    var key = String.fromCharCode(keyCode);
                    var isAlphabet = (keyCode >= this.keyCodes.FIRSTALPHABET && keyCode <= this.keyCodes.LASTALPHABET) ||
                        (key.toLowerCase() !== key.toUpperCase() && !(keyCode >= 112 && keyCode <= 123));
                    var isNumeric = (keyCode >= this.keyCodes.FIRSTNUMBER && keyCode <= this.keyCodes.LASTNUMBER);
                    var isNumpadKeys = (keyCode >= this.keyCodes.FIRSTNUMPAD && keyCode <= this.keyCodes.LASTNUMPAD);
                    var isSymbolkeys = (keyCode >= this.keyCodes.SYMBOLSETONESTART &&
                        keyCode <= this.keyCodes.SYMBOLSETONEEND);
                    if (!isSymbolkeys) {
                        isSymbolkeys = (keyCode >= this.keyCodes.SYMBOLSETTWOSTART && keyCode <= this.keyCodes.SYMBOLSETTWOEND);
                    }
                    var isFirefoxExceptionkeys = (keyCode === this.keyCodes.FIREFOXEQUALPLUS) ||
                        (keyCode === this.keyCodes.FIREFOXMINUS);
                    var isF2Edit = (!e.shiftKey && !e.ctrlKey && !e.metaKey && keyCode === this.keyCodes.F2) &&
                        isKeyboardShortcut;
                    var isBackSpace = keyCode === this.keyCodes.BACKSPACE && isKeyboardShortcut;
                    var isMacDelete = /(Macintosh|MacIntel|MacPPC|Mac68K|Mac|Mac OS|iPod|iPad)/i.test(navigator.userAgent) && isBackSpace;
                    var readonlyDialog = this.parent.element.querySelector('.e-readonly-alert-dlg');
                    var overlayElements = this.parent.element.getElementsByClassName('e-ss-overlay-active');
                    if ((!e.ctrlKey && !e.metaKey && !e.altKey && ((!e.shiftKey && keyCode === this.keyCodes.SPACE) || isAlphabet || isNumeric ||
                        isNumpadKeys || isSymbolkeys || (Browser.info.name === 'mozilla' && isFirefoxExceptionkeys))) || isF2Edit || isBackSpace) {
                        if (isF2Edit) {
                            this.isNewValueEdit = false;
                        }
                        if (!readonlyDialog) {
                            if (isReadOnlyCells(this.parent) && overlayElements.length === 0) {
                                this.parent.notify(readonlyAlert, null);
                            }
                            else if (overlayElements.length) {
                                if (isBackSpace && !isMacDelete) {
                                    this.editingHandler('delete');
                                }
                            }
                            else {
                                this.startEdit(null, null, true, true);
                                focus(this.getEditElement(sheet));
                            }
                        }
                    }
                    if ((keyCode === this.keyCodes.DELETE || isMacDelete) && isKeyboardShortcut) {
                        var islockcell = sheet.isProtected && isLockedCells(this.parent);
                        if (!readonlyDialog) {
                            if (islockcell) {
                                this.parent.notify(editAlert, null);
                            }
                            else if (isReadOnlyCells(this.parent) && overlayElements.length === 0) {
                                this.parent.notify(readonlyAlert, null);
                            }
                            else {
                                this.editingHandler('delete');
                                this.parent.notify(activeCellChanged, null);
                            }
                        }
                    }
                }
            }
            else if (((keyCode >= this.keyCodes.FIRSTALPHABET && keyCode <= this.keyCodes.LASTALPHABET) ||
                (keyCode >= this.keyCodes.FIRSTNUMBER && keyCode <= this.keyCodes.LASTNUMBER)
                || (keyCode === this.keyCodes.DELETE) || (keyCode === this.keyCodes.BACKSPACE) || (keyCode === this.keyCodes.SPACE)
                || (keyCode >= this.keyCodes.FIRSTNUMPAD && keyCode <= this.keyCodes.LASTNUMPAD) ||
                (keyCode >= this.keyCodes.SYMBOLSETONESTART && keyCode <= this.keyCodes.SYMBOLSETONEEND)
                || (keyCode >= 219 && keyCode <= 222) || (!e.shiftKey && !e.ctrlKey && !e.metaKey && keyCode === this.keyCodes.F2))
                && (keyCode !== 67) && (keyCode !== 89) && (keyCode !== 90)) {
                if (sheet.protectSettings.insertLink && keyCode === 75) {
                    return;
                }
                if (e.altKey && (keyCode === 65 || keyCode === 70 || keyCode === 72 || keyCode === 77
                    || keyCode === 78 || keyCode === 87)) {
                    return;
                }
                if (!e.ctrlKey && e.keyCode !== 70 && !this.parent.element.querySelector('.e-editAlert-dlg') &&
                    !trgtElem.parentElement.classList.contains('e-unprotectpwd-content') &&
                    !trgtElem.parentElement.classList.contains('e-password-content') &&
                    !trgtElem.parentElement.classList.contains('e-sheet-password-content') &&
                    !trgtElem.parentElement.classList.contains('e-unprotectsheetpwd-content') &&
                    !trgtElem.parentElement.classList.contains('e-reenterpwd-content')) {
                    this.parent.notify(editAlert, null);
                }
            }
        }
    };
    Edit.prototype.renderEditor = function () {
        if (!this.editorElem || !select('#' + this.parent.element.id + '_edit', this.parent.element)) {
            var editor = this.parent.createElement('div', { id: this.parent.element.id + '_edit', className: 'e-spreadsheet-edit', attrs: { 'contentEditable': 'true',
                    'role': 'textbox', 'spellcheck': 'false', 'aria-multiline': 'true' } });
            if (this.parent.element.getElementsByClassName('e-spreadsheet-edit')[0]) {
                this.parent.element.getElementsByClassName('e-spreadsheet-edit')[0].remove();
            }
            var sheetContentElem = this.parent.element.querySelector('.e-sheet-content');
            if (!sheetContentElem) {
                return;
            }
            sheetContentElem.appendChild(editor);
            this.editorElem = editor;
        }
        this.parent.notify(formulaOperation, { action: 'renderAutoComplete' });
    };
    Edit.prototype.refreshEditor = function (value, refreshFormulaBar, refreshEditorElem, isAppend, trigEvent, prevCellValue) {
        if (trigEvent === void 0) { trigEvent = true; }
        if (isAppend) {
            value = this.editCellData.value = this.editCellData.value + value;
        }
        else {
            this.editCellData.value = prevCellValue ? prevCellValue : value;
        }
        var editorElem = this.getEditElement(this.parent.getActiveSheet());
        if (refreshEditorElem && editorElem) {
            editorElem.textContent = value;
        }
        if (refreshFormulaBar) {
            this.parent.notify(formulaBarOperation, { action: 'refreshFormulabar', value: value });
        }
        if (this.parent.isEdit && editorElem && trigEvent && this.editCellData.value === editorElem.textContent) {
            if (this.triggerEvent('cellEditing').cancel) {
                this.cancelEdit(false, false, null, true);
            }
        }
        // if (this.editorElem.scrollHeight + 2 <= this.editCellData.element.offsetHeight) {
        //     this.editorElem.style.height = (this.editCellData.element.offsetHeight + 1) + 'px';
        // } else {
        //     this.editorElem.style.removeProperty('height');
        // }
    };
    Edit.prototype.startEdit = function (address, value, refreshCurPos, preventFormulaReference) {
        if (refreshCurPos === void 0) { refreshCurPos = true; }
        if (this.parent.showSheetTabs) {
            this.parent.element.querySelector('.e-add-sheet-tab').setAttribute('disabled', 'true');
        }
        var sheet = this.parent.getActiveSheet();
        var range = getCellIndexes(sheet.activeCell);
        var cell = getCell(range[0], range[1], sheet, false, true);
        if (this.parent.calculationMode === 'Manual' && checkIsFormula(cell.formula)) {
            this.editCellData.prevFormulaValue = cell.value;
        }
        if (hasTemplate(this.parent, range[0], range[1], this.parent.activeSheetIndex)) {
            var cellEle = this.parent.getCell(range[0], range[1]);
            var isDelTemplate = false;
            var value_1 = cellEle.innerHTML;
            if (cellEle) {
                if (value_1.indexOf('<') > -1 && value_1.indexOf('>') > -1 && value_1.indexOf('input') > -1) {
                    isDelTemplate = true;
                }
            }
            if (isDelTemplate) {
                return;
            }
        }
        var isMergedHiddenCell = this.updateEditCellDetail(address, value);
        this.initiateEditor(refreshCurPos, isMergedHiddenCell);
        this.positionEditor();
        this.parent.isEdit = this.isEdit = true;
        this.parent.notify(clearCopy, null);
        this.parent.notify(enableToolbarItems, [{ enable: false }]);
        if (cell.formula && !preventFormulaReference) {
            this.parent.notify(initiateFormulaReference, { range: cell.formula, formulaSheetIdx: this.editCellData.sheetIndex });
        }
    };
    Edit.prototype.setCursorPosition = function () {
        var elem = this.getEditElement(this.parent.getActiveSheet());
        var textLen = elem.textContent.length;
        if (textLen) {
            var selection = document.getSelection();
            var range = document.createRange();
            range.setStart(elem.firstChild, textLen);
            range.collapse(true);
            selection.removeAllRanges();
            selection.addRange(range);
        }
        elem.focus();
    };
    Edit.prototype.hasFormulaSuggSelected = function () {
        var suggDdlElem = document.getElementById(this.parent.element.id + '_ac_popup');
        return suggDdlElem && suggDdlElem.style.visibility === 'visible' &&
            suggDdlElem.querySelectorAll('.e-item-focus').length > 0;
    };
    Edit.prototype.editingHandler = function (action) {
        var pictureElements = document.getElementsByClassName('e-ss-overlay-active');
        var pictureLen = pictureElements.length;
        var isSpill;
        switch (action) {
            case 'delete':
                if (pictureLen > 0) {
                    if (pictureElements[0].classList.contains('e-datavisualization-chart')) {
                        this.parent.notify(deleteChart, {
                            id: pictureElements[0].id, sheetIdx: this.parent.activeSheetIndex + 1
                        });
                    }
                    else {
                        this.parent.notify(deleteImage, {
                            id: pictureElements[0].id, sheetIdx: this.parent.activeSheetIndex + 1
                        });
                    }
                }
                else {
                    var sheet = this.parent.getActiveSheet();
                    var address = sheet.selectedRange;
                    var range = getIndexesFromAddress(address);
                    range = range[0] > range[2] || range[1] > range[3] ? getSwapRange(range) : range;
                    address = getRangeAddress(range);
                    var cellDeleteArgs = { address: sheet.name + '!' + address, cancel: false };
                    this.parent.notify(beginAction, { action: 'cellDelete', eventArgs: cellDeleteArgs });
                    if (cellDeleteArgs.cancel) {
                        return;
                    }
                    address = getRangeFromAddress(cellDeleteArgs.address);
                    range = getRangeIndexes(address);
                    clearRange(this.parent, range, this.parent.activeSheetIndex);
                    this.parent.notify(selectionComplete, {});
                    if (range[0] === 0 && range[1] === 0 && range[2] >= sheet.usedRange.rowIndex && range[3] >= sheet.usedRange.colIndex) {
                        this.parent.setUsedRange(0, 0, sheet, false, true);
                    }
                    var args = { cellIdx: range, isUnique: false };
                    this.checkUniqueRange(args);
                    if (args.isUnique) {
                        var indexes = getRangeIndexes(this.uniqueColl);
                        var cell = getCell(indexes[0], indexes[1], this.parent.getActiveSheet());
                        if (cell && cell.value) {
                            isSpill = cell.value.toString().indexOf('#SPILL!') > -1;
                        }
                    }
                    if (args.isUnique && this.uniqueColl.split(':')[0] === address.split(':')[0]) {
                        var index = getRangeIndexes(this.uniqueColl);
                        for (var i = index[0]; i <= index[2]; i++) {
                            for (var j = index[1]; j <= index[3]; j++) {
                                this.parent.updateCellInfo({ value: '', formula: '' }, getRangeAddress([i, j]), true);
                            }
                        }
                        this.parent.notify(removeUniquecol, null);
                        this.uniqueColl = '';
                    }
                    else if (args.isUnique) {
                        var uniqueRange = getRangeIndexes(this.uniqueColl);
                        if (getCell(uniqueRange[0], uniqueRange[1], sheet).value === '#SPILL!') {
                            var skip = false;
                            for (var j = uniqueRange[0]; j <= uniqueRange[2]; j++) {
                                for (var k = uniqueRange[1]; k <= uniqueRange[3]; k++) {
                                    var cell = getCell(j, k, sheet);
                                    if (j === uniqueRange[0] && k === uniqueRange[1]) {
                                        skip = false;
                                    }
                                    else if (cell && !isNullOrUndefined(cell.value) && cell.value !== '') {
                                        skip = true;
                                    }
                                }
                            }
                            if (!skip) {
                                this.reApplyFormula();
                            }
                        }
                    }
                    if (args.isUnique) {
                        this.parent.notify(completeAction, { action: 'cellDelete',
                            eventArgs: { address: sheet.name + '!' + address, isSpill: isSpill } });
                    }
                    else {
                        this.parent.notify(completeAction, { action: 'cellDelete', eventArgs: { address: sheet.name + '!' + address } });
                    }
                }
                break;
        }
    };
    Edit.prototype.getCurPosition = function () {
        var cursorOffset = {};
        var selection = window.getSelection();
        if (selection && selection.focusNode && selection.focusNode.classList &&
            selection.focusNode.classList.contains('e-formula-bar-panel')) {
            var formulaBar = selection.focusNode.getElementsByClassName('e-formula-bar e-css')[0];
            if (formulaBar.value === this.editCellData.value) {
                cursorOffset.start = formulaBar.selectionStart;
                cursorOffset.end = formulaBar.selectionEnd;
            }
        }
        else if (this.getEditElement(this.parent.getActiveSheet()).textContent === this.editCellData.value) {
            cursorOffset.start = selection.anchorOffset;
            cursorOffset.end = selection.focusOffset;
            if (cursorOffset.start > cursorOffset.end) {
                var x = cursorOffset.start;
                cursorOffset.start = cursorOffset.end;
                cursorOffset.end = x;
            }
        }
        return cursorOffset;
    };
    Edit.prototype.mouseDownHandler = function (e) {
        if (!closest(e.target, '.e-findtool-dlg') && !closest(e.target, '.e-validation-error-dlg')) {
            if (this.isEdit) {
                var curOffset = this.getCurPosition();
                var selectionStart = void 0;
                var selectionEnd = void 0;
                if (curOffset.start) {
                    this.curStartPos = selectionStart = curOffset.start;
                }
                if (curOffset.end) {
                    this.curEndPos = selectionEnd = curOffset.end;
                }
                var trgtElem = e.target;
                var sheet = this.parent.getActiveSheet();
                var formulaRefIndicator = this.parent.element.querySelector('.e-formularef-indicator');
                this.isCellEdit = trgtElem.classList.contains('e-spreadsheet-edit');
                var isFormula = checkIsFormula(this.editCellData.value, true);
                var editorElem = this.getEditElement(sheet);
                var validCharacters = ['+', '-', '*', '/', this.parent.listSeparator, '(', '=', '&', ':'];
                if (trgtElem.classList.contains('e-cell') || trgtElem.classList.contains('e-header-cell') ||
                    trgtElem.classList.contains('e-selectall') || closest(trgtElem, '.e-toolbar-item.e-active') || closest(trgtElem, '.e-table')) {
                    if (!isFormula || this.endFormulaRef) {
                        this.endFormulaRef = false;
                        this.endEdit(false, e);
                    }
                    else {
                        var actCellIdx = getCellIndexes(sheet.activeCell);
                        var cell = getCell(actCellIdx[0], actCellIdx[1], sheet);
                        var editorValue = document.activeElement.classList.contains('e-formula-bar') ?
                            document.activeElement.value : editorElem.textContent;
                        if (this.editCellData.value === editorValue) {
                            if (selectionStart === selectionEnd) {
                                if (this.editCellData.sheetIndex !== getSheetIndex(this.parent, sheet.name)) {
                                    if (validCharacters.indexOf(editorValue.substring(selectionStart - 1, selectionStart)) === -1) {
                                        if (formulaRefIndicator) {
                                            formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                        }
                                        this.parent.goTo(this.editCellData.fullAddr);
                                        this.endEdit(false, e);
                                        return;
                                    }
                                }
                                else if (validCharacters.indexOf(editorElem.textContent.substring(selectionStart - 1, selectionStart)) === -1) {
                                    if (formulaRefIndicator) {
                                        formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                    }
                                    this.endEdit(false, e);
                                    return;
                                }
                            }
                            else if (validCharacters.indexOf(editorValue.substring(selectionStart - 1, selectionStart)) !== -1 &&
                                isCellReference(editorValue.substring(selectionStart, selectionEnd)) &&
                                editorValue.indexOf(':') !== selectionEnd) {
                                this.editCellData.value = editorValue.substring(0, selectionStart) +
                                    editorValue.substring(selectionEnd, editorValue.length);
                            }
                        }
                        if (!cell) {
                            return;
                        }
                        isFormula = cell.formula && (checkIsFormula(cell.formula) || (this.editCellData.value &&
                            this.editCellData.value.toString().indexOf('=') === 0));
                        if (isFormula && this.parent.isEdit) {
                            var curPos = selectionEnd;
                            if (this.editCellData.value.length === curPos) {
                                if (this.editCellData.value.substring(this.editCellData.value.length - 1) === ')' ||
                                    isNumber(this.editCellData.value.substring(this.editCellData.value.length - 1))) {
                                    if (formulaRefIndicator) {
                                        formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                    }
                                    this.endEdit(false, e);
                                }
                            }
                            else if (this.editCellData.value === editorValue &&
                                validCharacters.indexOf(editorValue.substring(curPos - 1, curPos)) === -1) {
                                if (formulaRefIndicator) {
                                    formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                }
                                this.endEdit(false, e);
                            }
                        }
                    }
                }
                else {
                    if (isFormula && this.editCellData.value === editorElem.textContent && editorElem.textContent.indexOf('(') !==
                        editorElem.textContent.length - 1 && !this.isCellEdit && !trgtElem.classList.contains('e-formula-bar') &&
                        validCharacters.indexOf(this.editCellData.value.substring(selectionStart - 1, selectionStart)) === -1) {
                        if (getSheet(this.parent, this.editCellData.sheetIndex).id === sheet.id) {
                            var curPos = window.getSelection().focusOffset;
                            if (validCharacters.indexOf(editorElem.textContent.substring(curPos - 1, curPos)) === -1) {
                                if (formulaRefIndicator) {
                                    formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
                                }
                                this.parent.goTo(this.editCellData.fullAddr);
                                if (this.isEdit) {
                                    this.endEdit(false, e);
                                }
                                return;
                            }
                        }
                    }
                }
            }
        }
    };
    Edit.prototype.tapHandler = function (e) {
        var _this = this;
        if (!this.tapedTwice) {
            this.tapedTwice = true;
            setTimeout(function () {
                _this.tapedTwice = false;
                if (!_this.parent.isEdit && e.target.classList.contains('e-cell')) {
                    var focusEditEle = _this.parent.element.querySelector('.e-ss-focus-edit');
                    if (focusEditEle) {
                        focus(focusEditEle);
                    }
                }
            }, 300);
            return;
        }
        e.preventDefault();
        this.dblClickHandler(e);
    };
    Edit.prototype.dblClickHandler = function (e) {
        var trgt = e.target;
        if (!closest(trgt, '.e-datavisualization-chart') && !trgt.classList.contains('e-ss-overlay') &&
            (trgt.classList.contains('e-active-cell') || trgt.classList.contains('e-cell') || trgt.classList.contains('e-wrap-content') ||
                closest(trgt, '.e-sheet-content') || trgt.classList.contains('e-table'))) {
            var sheet = this.parent.getActiveSheet();
            var actCell = getCellIndexes(sheet.activeCell);
            var cell = getCell(actCell[0], actCell[1], sheet, false, true);
            if (isReadOnly(cell, getColumn(sheet, actCell[1]), getRow(sheet, actCell[0]))) {
                this.parent.notify(readonlyAlert, null);
            }
            else if (!sheet.isProtected || !isLocked(cell, getColumn(sheet, actCell[1]))) {
                if (this.isEdit) {
                    if (!trgt.classList.contains('e-spreadsheet-edit')) {
                        if (checkIsFormula(this.editCellData.value)) {
                            var sheetName = this.editCellData.fullAddr.substring(0, this.editCellData.fullAddr.lastIndexOf('!'));
                            if (this.parent.getActiveSheet().name === sheetName) {
                                this.endEdit();
                            }
                        }
                        else {
                            this.endEdit();
                        }
                    }
                }
                else {
                    this.isNewValueEdit = false;
                    this.startEdit();
                    focus(this.getEditElement(sheet));
                }
            }
            else {
                this.parent.notify(editAlert, null);
            }
        }
    };
    Edit.prototype.updateEditCellDetail = function (addr, value) {
        var sheetIdx;
        var sheet;
        var isMergedHiddenCell;
        if (isNullOrUndefined(this.editCellData.sheetIndex)) {
            if (addr && addr.lastIndexOf('!') > -1) {
                sheetIdx = getSheetIndex(this.parent, getSheetNameFromAddress(addr));
            }
            else {
                sheetIdx = this.parent.activeSheetIndex;
            }
        }
        else {
            sheetIdx = this.editCellData.sheetIndex;
        }
        if (!this.editCellData.addr) {
            sheet = getSheet(this.parent, sheetIdx);
            if (addr) {
                addr = getRangeFromAddress(addr);
            }
            else {
                addr = sheet.activeCell;
            }
        }
        else if (checkIsFormula(this.editCellData.value, true)) {
            sheet = getSheet(this.parent, sheetIdx);
            this.isNewValueEdit = false;
        }
        if (addr) {
            var range = getRangeIndexes(addr);
            var rowIdx = range[0];
            var colIdx = range[1];
            var model = getCell(rowIdx, colIdx, sheet, false, true);
            if (model.colSpan > 1 || model.rowSpan > 1) {
                var mergeArgs = { sheet: sheet, cell: model, rowIdx: rowIdx, colIdx: colIdx };
                setVisibleMergeIndex(mergeArgs);
                rowIdx = mergeArgs.rowIdx;
                colIdx = mergeArgs.colIdx;
                isMergedHiddenCell = mergeArgs.isMergedHiddenCell;
            }
            var cellElem = this.parent.getCell(rowIdx, colIdx);
            var cellPosition = getCellPosition(sheet, range, this.parent.frozenRowCount(sheet), this.parent.frozenColCount(sheet), this.parent.viewport.beforeFreezeHeight, this.parent.viewport.beforeFreezeWidth, this.parent.sheetModule.colGroupWidth);
            this.editCellData = {
                addr: addr,
                fullAddr: getSheetName(this.parent, sheetIdx) + '!' + addr,
                rowIndex: rowIdx,
                colIndex: colIdx,
                sheetIndex: sheetIdx,
                element: cellElem,
                value: value || '',
                position: cellPosition,
                prevFormulaValue: this.editCellData.prevFormulaValue
            };
        }
        return isMergedHiddenCell;
    };
    Edit.prototype.initiateEditor = function (refreshCurPos, isMergedHiddenCell) {
        var _this = this;
        getData(this.parent, this.editCellData.fullAddr, false, isMergedHiddenCell).then(function (values) {
            if (!_this.parent) {
                return;
            }
            values.forEach(function (cell) {
                var value;
                var updateEditValue = function () {
                    var args = { cell: cell, value: cell ? cell.value : '',
                        showFormattedText: _this.editCellData.showFormattedText };
                    _this.parent.notify(getFormattedBarText, args);
                    value = cell ? (cell.formula || args.value) : '';
                    _this.editCellData.oldValue = value;
                };
                updateEditValue();
                var evtArgs = _this.triggerEvent('cellEdit', null, value);
                if (evtArgs.cancel) {
                    _this.cancelEdit(true, false, null, true);
                    return;
                }
                if (evtArgs.showFormattedText) {
                    // For SF-354174 ticket we have provided 'dd/MM/yyyy' support and diplayed the formatted value in the editor which is
                    // not a default behavior. To handle this, we have added this property and it applies only for the 'dd/MM/yyyy' format.
                    _this.editCellData.showFormattedText = true;
                    updateEditValue();
                }
                if (_this.editCellData.value) {
                    value = _this.editCellData.value;
                }
                else {
                    _this.editCellData.value = value;
                }
                var prevCellValue;
                if (_this.isNewValueEdit) {
                    prevCellValue = value;
                    value = '';
                }
                else {
                    _this.isNewValueEdit = true;
                }
                if (isUndefined$1(value)) {
                    value = '';
                }
                _this.refreshEditor(value, false, true, false, false, prevCellValue);
                if (refreshCurPos) {
                    _this.setCursorPosition();
                }
            });
        });
    };
    Edit.prototype.positionEditor = function (isWrap) {
        var tdElem = this.editCellData.element;
        var isEdit = false;
        var cellEle;
        var arg = { isEdit: isEdit };
        this.parent.notify(isFormulaBarEdit, arg);
        if (arg.isEdit && isNullOrUndefined(tdElem)) {
            cellEle = this.parent.getCell(this.editCellData.rowIndex, this.editCellData.colIndex);
            tdElem = cellEle;
            this.editCellData.element = cellEle;
        }
        if (tdElem) {
            tdElem.classList.add('e-ss-edited');
            var sheet = this.parent.getActiveSheet();
            var cell = getCell(this.editCellData.rowIndex, this.editCellData.colIndex, sheet, false, true);
            var left = this.editCellData.position.left + 1;
            var top_1 = this.editCellData.position.top + 1;
            var args = { range: [this.editCellData.rowIndex, this.editCellData.colIndex, this.editCellData.rowIndex,
                    this.editCellData.colIndex] };
            this.parent.notify(activeCellMergedRange, args);
            var minHeight = getRowsHeight(sheet, args.range[0], args.range[2]) - 3;
            var minWidth = getColumnsWidth(sheet, args.range[1], args.range[3]) - 3;
            var cont = this.parent.getMainContent();
            var mainContElement = cont.parentElement;
            var editWidth = void 0;
            var frozenCol = this.parent.frozenColCount(sheet);
            var zIndex = void 0;
            var preventWrap = void 0;
            var frozenRow = this.parent.frozenRowCount(sheet);
            var addWrap = void 0;
            if (this.editCellData.colIndex < frozenCol) {
                editWidth = Math.abs(this.parent.getRowHeaderContent().getBoundingClientRect()[this.parent.enableRtl ? 'left' : 'right'] -
                    tdElem.getBoundingClientRect()[this.parent.enableRtl ? 'right' : 'left']) - 1;
                if (this.editCellData.rowIndex < frozenRow) {
                    if (this.parent.getRowHeaderContent().style.zIndex === '2') {
                        zIndex = '3';
                    }
                }
                else {
                    if (getTextWidth(cell.value, cell.style, this.parent.cellStyle) > editWidth) {
                        addWrap = true;
                    }
                }
            }
            else {
                editWidth = (mainContElement.offsetWidth - (left - cont.scrollLeft) - 28) -
                    this.parent.sheetModule.getRowHeaderWidth(sheet);
                var tdEleInf = tdElem.getBoundingClientRect();
                var mainContEleInf = mainContElement.getBoundingClientRect();
                var getCellRight = this.parent.enableRtl ? tdEleInf.left : tdEleInf.right;
                var getMainConEleRight = this.parent.enableRtl ? mainContEleInf.left : mainContEleInf.right;
                var horizontalScrollBar = this.parent.getScrollElement();
                var verticalScrollBarWidth = this.parent.sheetModule.getScrollSize();
                if (this.parent.enableRtl) {
                    if ((getMainConEleRight + verticalScrollBarWidth) > getCellRight) {
                        horizontalScrollBar.scrollLeft -= tdEleInf.width;
                    }
                }
                else {
                    if ((getMainConEleRight - verticalScrollBarWidth) < getCellRight) {
                        horizontalScrollBar.scrollLeft += tdEleInf.width;
                    }
                }
            }
            if (this.editCellData.rowIndex < frozenRow) {
                preventWrap = true;
            }
            var height = !preventWrap && ((cell && cell.wrap) || (tdElem && isWrap) || addWrap) ? 'auto;' : minHeight + 'px;';
            // let editHeight: number = mainContElement.offsetHeight - top - 28;
            var inlineStyles_1 = 'display:block;top:' + top_1 + 'px;' + (this.parent.enableRtl ? 'right:' : 'left:') + left + 'px;' +
                'min-width:' + minWidth + 'px;max-width:' + (cell && cell.wrap ? minWidth : editWidth) + 'px;' +
                'height:' + height + (cell && cell.wrap ? ('width:' + minWidth + 'px;') : '') + 'min-height:' + minHeight + 'px;' +
                (zIndex ? 'z-index: ' + zIndex + ';' : '') + (preventWrap && ((cell && !cell.wrap) || (tdElem && isWrap)) && (getTextWidth(cell.value, cell.style, this.parent.cellStyle) > editWidth || (tdElem && isWrap)) ? 'overflow: auto;' : '');
            var styles = tdElem.style.cssText.split(';');
            styles.forEach(function (style) {
                if (!style.includes('border')) {
                    inlineStyles_1 += style + ';';
                }
            });
            var editorElem = this.getEditElement(sheet, true);
            editorElem.style.cssText = inlineStyles_1;
            if (getTextWidth(editorElem.textContent, cell.style, this.parent.cellStyle) > editWidth) {
                editorElem.style.height = 'auto';
            }
            // we using edit div height as auto , while editing div enlarges and hide active cell bottom border for that
            // we increasing 1px height to active cell.
            var actCell = this.parent.element.querySelector('.e-active-cell');
            if (actCell) {
                actCell.style.height = (minHeight + 4) + 'px';
            }
            if (tdElem.classList.contains('e-right-align')) {
                editorElem.classList.add('e-right-align');
            }
            else if (tdElem.classList.contains('e-center-align')) {
                editorElem.classList.add('e-center-align');
            }
        }
    };
    Edit.prototype.updateEditedValue = function (tdRefresh, value, e, isPublic) {
        var _this = this;
        var oldCellValue = this.editCellData.oldValue;
        if (value) {
            this.editCellData.value = value;
        }
        var newVal = this.editCellData.value;
        /* To set the before cell details for undo redo. */
        this.parent.notify(setActionData, { args: { action: 'beforeCellSave', eventArgs: { address: this.editCellData.addr } } });
        var isValidCellValue = true;
        if (this.parent.allowDataValidation) {
            var sheet = this.parent.getActiveSheet();
            var cellIndex = getRangeIndexes(sheet.activeCell);
            var cell = getCell(cellIndex[0], cellIndex[1], sheet, false, true);
            var column = getColumn(sheet, cellIndex[1]);
            if (cell.validation || checkColumnValidation(column, cellIndex[0], cellIndex[1])) {
                var editedValue = this.editCellData.value || this.getEditElement(sheet).innerText;
                var sheetIdx = this.parent.activeSheetIndex;
                var range = typeof this.editCellData.addr === 'string' ? getRangeIndexes(this.editCellData.addr) :
                    this.editCellData.addr;
                var validEventArgs = { value: editedValue, range: range, sheetIdx: sheetIdx, isEdit: true, td: null, isValid: true };
                var currEditedCell = Object.assign({}, cell, { value: editedValue }); // Update edited value for validation purpose.
                setCell(cellIndex[0], cellIndex[1], sheet, currEditedCell);
                this.parent.notify(isValidation, validEventArgs);
                setCell(cellIndex[0], cellIndex[1], sheet, cell);
                isValidCellValue = validEventArgs.isValid;
                if (isValidCellValue) {
                    if (checkIsFormula(editedValue) || !cell.format) {
                        if (!this.editCellData.value) {
                            this.editCellData.value = editedValue;
                        }
                    }
                    else if (editedValue !== validEventArgs.value || (!this.editCellData.value && validEventArgs.value)) {
                        this.editCellData.value = validEventArgs.value;
                    }
                }
                else {
                    this.isCellEdit = true;
                }
            }
        }
        if (!isPublic && checkIsFormula(this.editCellData.value)) {
            var eventArgs_1 = { formula: this.editCellData.value };
            this.parent.notify(checkFormulaRef, eventArgs_1);
            if (eventArgs_1.isInvalid) {
                var isYesBtnClick_1;
                this.isCellEdit = true;
                isValidCellValue = false;
                var l10n = this.parent.serviceLocator.getService(locale);
                var erroDialogInst_1 = this.parent.serviceLocator.getService(dialog);
                erroDialogInst_1.show({
                    width: 400, isModal: true, showCloseIcon: true, target: this.parent.element, cssClass: 'e-validation-error-dlg',
                    content: l10n.getConstant('CellReferenceTypoError') + "<br>" + eventArgs_1.formula,
                    beforeOpen: function () { return _this.editCellData.element.focus(); },
                    buttons: [{
                            buttonModel: { content: l10n.getConstant('Yes'), isPrimary: true },
                            click: function () {
                                isYesBtnClick_1 = true;
                                erroDialogInst_1.hide();
                            }
                        },
                        {
                            buttonModel: { content: l10n.getConstant('No') },
                            click: function () { return erroDialogInst_1.hide(); }
                        }],
                    close: function () {
                        if (isYesBtnClick_1) {
                            value = _this.editCellData.value = eventArgs_1.formula;
                            _this.updateCell(oldCellValue, tdRefresh, value, newVal, e);
                            _this.parent.notify(formulaBarOperation, { action: 'refreshFormulabar', value: eventArgs_1.formula });
                        }
                        else {
                            var editorElem = _this.getEditElement(_this.parent.getActiveSheet());
                            if (editorElem.innerText) {
                                window.getSelection().selectAllChildren(editorElem);
                            }
                        }
                    }
                }, false);
            }
        }
        if (isValidCellValue) {
            this.updateCell(oldCellValue, tdRefresh, value, newVal, e);
        }
        else if (e) {
            e.preventDefault();
        }
    };
    Edit.prototype.updateCell = function (oldCellValue, tdRefresh, value, newVal, e) {
        var oldValue = oldCellValue ? oldCellValue.toString().toUpperCase() : '';
        var sheet = this.parent.getActiveSheet();
        if (oldCellValue || oldCellValue === 0) {
            oldCellValue = oldCellValue.toString();
        }
        var curCellValue = this.editCellData.value;
        if (curCellValue) {
            curCellValue = curCellValue.toString();
        }
        var isCellValChanged = oldCellValue !== curCellValue || checkIsFormula(oldValue);
        if (isCellValChanged) {
            if (this.isAltEnter && curCellValue && curCellValue.includes('\n')) {
                wrap(sheet.activeCell, true, this.parent, true);
                this.refreshEditor(curCellValue, this.isCellEdit, false, false, false);
            }
            var cellIndex = getRangeIndexes(sheet.activeCell);
            if (oldCellValue && oldCellValue.indexOf('=UNIQUE(') > -1 && this.editCellData.value === '') {
                this.parent.notify(removeUniquecol, null);
            }
            var args = { cellIdx: cellIndex, isUnique: false };
            this.checkUniqueRange(args);
            var isUniqueRange = args.isUnique;
            if (isUniqueRange && oldCellValue !== '' && this.editCellData.value === '') {
                var rangeIdx = getRangeIndexes(this.uniqueColl);
                if (getCell(rangeIdx[0], rangeIdx[1], sheet).value.toString().indexOf('#SPILL!') === -1) {
                    return;
                }
            }
            if (oldCellValue && oldCellValue.indexOf('UNIQUE') > -1 &&
                this.editCellData.value && this.editCellData.value.toString().indexOf('UNIQUE') > -1 && isUniqueRange) {
                this.updateUniqueRange('');
            }
            var evtArgs = {
                action: 'updateCellValue',
                address: this.editCellData.addr, value: this.editCellData.value, skipCellFormat: this.editCellData.showFormattedText
            };
            this.parent.notify(workbookEditOperation, evtArgs);
            var updatedCell = getCell(cellIndex[0], cellIndex[1], sheet, true);
            var cellValue = void 0;
            if (!isNullOrUndefined(updatedCell)) {
                cellValue = updatedCell.value.toString();
            }
            var isCircularRefError = cellValue === '#CIRCULARREF!';
            var isInvalidFormula = this.formulaErrorStrings.indexOf(cellValue) > -1;
            if (isInvalidFormula || isCircularRefError) {
                var isDlgOpenCancel = void 0;
                if (e) {
                    var target_1 = e.target;
                    var ribbonCls = ['e-toolbar-item', 'e-tab-wrap', 'e-text-wrap', 'e-tab-text', 'e-caret'];
                    var skipAlertCls = ['e-scroller', 'e-main-panel', 'e-autofill'];
                    if ((!ribbonCls.some(function (cls) { return target_1.classList.contains(cls); }) || !closest(target_1, '.e-ribbon')) &&
                        !skipAlertCls.some(function (cls) { return target_1.classList.contains(cls); })) {
                        isDlgOpenCancel = this.showFormulaAlertDlg(cellValue, isCircularRefError);
                    }
                    if (!isDlgOpenCancel) {
                        e.preventDefault();
                    }
                }
                if (!isDlgOpenCancel) {
                    delete updatedCell.value;
                    delete updatedCell.formula;
                    this.parent.notify(clearFormulaDependentCells, { cellRef: sheet.activeCell, clearFormulaInfo: true });
                    if (checkIsFormula(oldValue)) {
                        this.parent.updateCellInfo({ formula: oldValue }, sheet.activeCell);
                    }
                    else if (oldCellValue) {
                        this.parent.updateCellInfo({ value: oldCellValue }, sheet.activeCell);
                    }
                    return;
                }
                else {
                    updatedCell.value = '0';
                }
            }
            var indexes = void 0;
            if (evtArgs.isFormulaDependent) {
                indexes = getViewportIndexes(this.parent, this.parent.viewport);
            }
            var cell = getCell(cellIndex[0], cellIndex[1], sheet, true);
            var eventArgs = this.getRefreshNodeArgs(cell, this.editCellData.element, this.editCellData.rowIndex, this.editCellData.colIndex);
            this.editCellData.value = eventArgs.value;
            this.parent.notify(refreshChart, { cell: null, rIdx: this.editCellData.rowIndex, cIdx: this.editCellData.colIndex, viewportIndexes: indexes });
            if (cell && cell.formula) {
                this.editCellData.formula = cell.formula;
            }
            if (tdRefresh) {
                this.parent.refreshNode(this.editCellData.element, eventArgs);
            }
            if (cell && cell.hyperlink) {
                this.parent.serviceLocator.getService('cell').refreshRange(cellIndex);
            }
            if (sheet.conditionalFormats && sheet.conditionalFormats.length) {
                this.parent.notify(applyCF, {
                    indexes: [this.editCellData.rowIndex, this.editCellData.colIndex], isAction: true,
                    refreshAll: evtArgs.isFormulaDependent, isEdit: true
                });
            }
            if (cell && cell.wrap) {
                this.parent.notify(wrapEvent, { range: cellIndex, wrap: true, sheet: sheet });
            }
            if (isUniqueRange) {
                var rangeIdx = getRangeIndexes(this.uniqueColl);
                if (getCell(rangeIdx[0], rangeIdx[1], sheet).value.toString().indexOf('#SPILL!') > -1) {
                    this.isSpill = true;
                }
                if ((oldCellValue !== '' && this.editCellData.value === '') ||
                    (this.editCellData.formula && this.editCellData.formula.length > 1 &&
                        oldCellValue !== this.editCellData.formula)) {
                    var skip = false;
                    for (var j = rangeIdx[0]; j <= rangeIdx[2]; j++) {
                        for (var k = rangeIdx[1]; k <= rangeIdx[3]; k++) {
                            var cell_1 = getCell(j, k, sheet);
                            if (j === rangeIdx[0] && k === rangeIdx[1]) {
                                skip = false;
                            }
                            else if (cell_1 && !isNullOrUndefined(cell_1.value) && cell_1.value !== '') {
                                skip = true;
                            }
                        }
                    }
                    if (!skip) {
                        this.reApplyFormula();
                    }
                }
                else {
                    this.updateUniqueRange(newVal);
                }
            }
        }
        this.triggerEvent('cellSave', e, value);
        this.resetEditState();
        this.focusElement(e);
    };
    Edit.prototype.checkUniqueRange = function (uniquArgs) {
        var args = { range: [] };
        this.parent.notify(getUniqueRange, args);
        var collection = args.range;
        if (!uniquArgs.sheetName) {
            uniquArgs.sheetName = this.parent.getActiveSheet().name;
        }
        for (var i = 0; i < collection.length; i++) {
            if (collection[i].substring(0, collection[i].lastIndexOf('!')) === uniquArgs.sheetName) {
                var rangeIdx = getRangeIndexes(collection[i]);
                for (var j = rangeIdx[0]; j <= rangeIdx[2]; j++) {
                    for (var k = rangeIdx[1]; k <= rangeIdx[3]; k++) {
                        if (uniquArgs.cellIdx[0] === j && uniquArgs.cellIdx[1] === k) {
                            uniquArgs.isUnique = true;
                            this.uniqueCell = true;
                            var uniqueIndex = this.uniqueColl !== '' ? getRangeIndexes(this.uniqueColl) : [0, 0, 0, 0];
                            var collectionIndex = getRangeIndexes(collection[i]);
                            if (uniqueIndex[0] === collectionIndex[0] && uniqueIndex[1] === collectionIndex[1]) {
                                var index = [uniqueIndex[0], collectionIndex[1], uniqueIndex[0], collectionIndex[1]];
                                index[2] = uniqueIndex[2] > collectionIndex[2] ? uniqueIndex[2] : collectionIndex[2];
                                index[3] = uniqueIndex[3] > collectionIndex[3] ? uniqueIndex[3] : collectionIndex[3];
                                this.uniqueColl = getRangeAddress(index);
                                uniquArgs.uniqueRange = getRangeAddress(index);
                            }
                            else {
                                this.uniqueColl = collection[i];
                                uniquArgs.uniqueRange = collection[i];
                            }
                        }
                    }
                }
            }
        }
    };
    Edit.prototype.updateUniqueRange = function (value) {
        var rangeIdx = getRangeIndexes(this.uniqueColl);
        var skip = false;
        if (getCell(rangeIdx[0], rangeIdx[1], this.parent.getActiveSheet()).value !== '#SPILL!') {
            skip = true;
        }
        for (var j = rangeIdx[0]; j <= rangeIdx[2]; j++) {
            for (var k = rangeIdx[1]; k <= rangeIdx[3]; k++) {
                if (skip) {
                    if (j === rangeIdx[0] && k === rangeIdx[1]) {
                        this.parent.updateCellInfo({ value: '#SPILL!' }, getRangeAddress([j, k]), true);
                    }
                    else {
                        if (getRangeAddress([j, k]).split(':')[0] === this.editCellData.addr) {
                            this.parent.updateCellInfo({ value: value }, getRangeAddress([j, k]), true);
                        }
                        else {
                            this.parent.updateCellInfo({ value: '' }, getRangeAddress([j, k]), true);
                        }
                    }
                }
            }
        }
    };
    Edit.prototype.reApplyFormula = function () {
        var cellIdx = getRangeIndexes(this.uniqueColl);
        var cell = getCell(cellIdx[0], cellIdx[1], this.parent.getActiveSheet());
        this.parent.updateCellInfo({ value: '' }, getRangeAddress([cellIdx[0], cellIdx[1]]), true);
        var sheets = this.parent.sheets;
        var formula = cell.formula;
        for (var i = 0; i < sheets.length; i++) {
            if (formula.indexOf(sheets[i].name) > -1) {
                formula = formula.replace(sheets[i].name, '!' + i);
            }
        }
        this.parent.notify(workbookFormulaOperation, { action: 'computeExpression', formula: formula });
        this.uniqueCell = false;
        if (this.uniqueActCell !== '') {
            this.editCellData.value = this.uniqueActCell;
            this.uniqueActCell = '';
        }
    };
    Edit.prototype.refreshDependentCellValue = function (rowIdx, colIdx, sheetIdx) {
        if (rowIdx && colIdx) {
            rowIdx--;
            colIdx--;
            if (((this.editCellData.rowIndex !== rowIdx || this.editCellData.colIndex !== colIdx)
                && this.parent.activeSheetIndex === sheetIdx) || (this.uniqueCell && this.parent.activeSheetIndex === sheetIdx)) {
                var sheet = getSheet(this.parent, sheetIdx);
                var td = void 0;
                if (!isHiddenRow(sheet, rowIdx) && !isHiddenCol(sheet, colIdx)) {
                    td = this.parent.getCell(rowIdx, colIdx);
                }
                if (td) {
                    if (td.parentElement) {
                        var curRowIdx = td.parentElement.getAttribute('aria-rowindex');
                        if (curRowIdx && Number(curRowIdx) - 1 !== rowIdx) {
                            return;
                        }
                    }
                    var cell = getCell(rowIdx, colIdx, sheet);
                    var actCell = getRangeIndexes(sheet.activeCell);
                    if (actCell[0] === rowIdx && actCell[1] === colIdx) {
                        this.uniqueActCell = cell.value;
                    }
                    var eventArgs = this.getRefreshNodeArgs(cell, td, rowIdx, colIdx);
                    this.parent.refreshNode(td, eventArgs);
                }
            }
        }
    };
    Edit.prototype.getRefreshNodeArgs = function (cell, tdEle, rowIdx, colIdx) {
        cell = cell || {};
        var eventArgs = {
            value: cell.value, format: cell.format,
            formattedText: cell.formattedText && cell.formattedText !== '' ? cell.formattedText : cell.value, isRightAlign: false,
            type: 'General', cell: cell, rowIndex: rowIdx, td: tdEle, colIndex: colIdx, refresh: true, isEdit: true
        };
        this.parent.notify(getFormattedCellObject, eventArgs);
        return eventArgs;
    };
    Edit.prototype.endEdit = function (refreshFormulaBar, event, isPublic) {
        if (refreshFormulaBar === void 0) { refreshFormulaBar = false; }
        if (refreshFormulaBar) {
            this.refreshEditor(this.editCellData.oldValue, false, true, false, false);
        }
        var triggerEventArgs = this.triggerEvent('beforeCellSave');
        if (triggerEventArgs.cancel) {
            if (this.parent.isEdit && event) {
                event.preventDefault();
            }
            return;
        }
        if (!this.isAltEnter && triggerEventArgs.value && triggerEventArgs.value.toString().indexOf('\n') > -1) {
            var cell = getCell(this.editCellData.rowIndex, this.editCellData.colIndex, this.parent.getActiveSheet());
            wrap(this.parent.getActiveSheet().activeCell, cell ? (cell.wrap === false ? false : true) :
                true, this.parent);
            this.refreshEditor(triggerEventArgs.value, this.isCellEdit, false, false, false);
        }
        this.updateEditedValue(true, triggerEventArgs.value, event, isPublic);
    };
    Edit.prototype.cancelEdit = function (refreshFormulaBar, trigEvent, event, isInternal) {
        if (refreshFormulaBar === void 0) { refreshFormulaBar = true; }
        if (trigEvent === void 0) { trigEvent = true; }
        this.refreshEditor(this.editCellData.oldValue, refreshFormulaBar, false, false, false);
        if (!isInternal) {
            if (trigEvent) {
                this.triggerEvent('cellSave', event, undefined, true);
            }
            else {
                this.triggerEvent('cellEdited');
            }
        }
        this.resetEditState();
        this.focusElement();
    };
    Edit.prototype.focusElement = function (e) {
        if (e && e.keyCode === 9 && document.activeElement.classList.contains('e-formula-bar')) {
            var focusEle = this.parent.element.querySelector(".e-formula-bar-panel " + (e.shiftKey ? '.e-insert-function' : '.e-combobox'));
            if (focusEle) {
                focus(focusEle);
            }
        }
        else {
            focus(this.parent.element);
        }
        this.parent.notify(enableToolbarItems, [{ enable: true }]);
    };
    Edit.prototype.triggerEvent = function (eventName, event, value, pvtManualCalc) {
        var sheet = this.parent.getActiveSheet();
        var cell = getCell(this.editCellData.rowIndex, this.editCellData.colIndex, sheet);
        var eventArgs = {
            element: this.editCellData.element,
            value: value ? value : this.editCellData.value,
            oldValue: this.editCellData.oldValue,
            address: this.editCellData.fullAddr,
            displayText: this.parent.getDisplayText(cell),
            previousFormulaValue: this.editCellData.prevFormulaValue
        };
        if (eventArgs.address) {
            var indexes = getRangeIndexes(eventArgs.address);
            var args = { cellIdx: indexes, isUnique: false };
            this.checkUniqueRange(args);
            if (args.isUnique) {
                eventArgs.isSpill = this.isSpill;
            }
        }
        var isValueChanged = (eventArgs.value ? eventArgs.value.toString() : eventArgs.value) !==
            (eventArgs.oldValue || eventArgs.oldValue === 0 ? eventArgs.oldValue.toString() : eventArgs.oldValue);
        if (isValueChanged || (!pvtManualCalc && checkIsFormula(eventArgs.value) && (!cell || !cell.format ||
            getTypeFromFormat(cell.format) !== 'Text'))) {
            if (eventName !== 'cellSave') {
                eventArgs.cancel = false;
            }
            if (eventName === 'beforeCellSave') {
                this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'cellSave', preventAction: true });
                cell = checkIsFormula(eventArgs.value) ? { formula: eventArgs.value } : { value: eventArgs.value };
                var cancel = updateCell(this.parent, sheet, { cell: cell, rowIdx: this.editCellData.rowIndex, colIdx: this.editCellData.colIndex,
                    eventOnly: true });
                if (cancel) {
                    this.cancelEdit(false, false, null, true);
                    eventArgs.cancel = true;
                    return eventArgs;
                }
            }
            this.parent.trigger(eventName, eventArgs);
            if (eventName === 'cellSave') {
                this.parent.trigger('cellEdited', eventArgs);
                if (this.editCellData.formula) {
                    eventArgs.formula = this.editCellData.formula;
                }
                else if (!isValueChanged) {
                    eventArgs.formula = eventArgs.value;
                }
                if (cell.format) {
                    eventArgs.format = cell.format;
                }
                eventArgs.originalEvent = event;
                this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'cellSave' });
            }
        }
        else if (eventName !== 'beforeCellSave') {
            if (eventName === 'cellSave') {
                this.parent.trigger('cellEdited', eventArgs);
            }
            else {
                this.parent.trigger(eventName, eventArgs);
            }
        }
        return eventArgs;
    };
    Edit.prototype.altEnter = function () {
        this.positionEditor(true);
        var selection = window.getSelection();
        var node = selection.anchorNode;
        var offset;
        var range = document.createRange();
        offset = (node.nodeType === 3) ? selection.anchorOffset : node.textContent.length;
        if (offset === 0 && node.textContent.length > 0) {
            offset = node.textContent.length;
        }
        var text = node.textContent;
        var textBefore = text.slice(0, offset);
        var textAfter = text.slice(offset) || ' ';
        node.textContent = textBefore + '\n' + textAfter;
        range = document.createRange();
        if (node.nodeType === 3) {
            range.setStart(node, offset + 1);
            range.setEnd(node, offset + 1);
        }
        else if (node.nodeType === 1) {
            range.setStart(node.firstChild, offset + 1);
            range.setEnd(node.firstChild, offset + 1);
        }
        selection.removeAllRanges();
        selection.addRange(range);
    };
    Edit.prototype.resetEditState = function (elemRefresh) {
        if (elemRefresh === void 0) { elemRefresh = true; }
        if (elemRefresh) {
            var editorElem = this.getEditElement(this.parent.getActiveSheet());
            if (checkIsFormula(editorElem.textContent) || editorElem.textContent === '') {
                this.parent.notify(clearCellRef, null);
            }
            if (this.editCellData.element) {
                this.editCellData.element.classList.remove('e-ss-edited');
                this.editorElem.textContent = '';
                if (editorElem === this.editorElem) {
                    this.editorElem.removeAttribute('style');
                    this.editorElem.classList.remove('e-right-align');
                }
                else {
                    detach(editorElem);
                }
            }
        }
        this.editCellData = {};
        this.parent.isEdit = this.isEdit = false;
        this.isCellEdit = true;
        this.isAltEnter = false;
        this.parent.notify(formulaOperation, { action: 'endEdit' });
        if (this.parent.showSheetTabs && !this.parent.isProtected) {
            var addSheetBtn = this.parent.element.querySelector('.e-add-sheet-tab');
            if (addSheetBtn) {
                addSheetBtn.removeAttribute('disabled');
            }
        }
    };
    Edit.prototype.refSelectionRender = function () {
        var editorElem = this.getEditElement(this.parent.getActiveSheet());
        if (editorElem) {
            if (checkIsFormula(editorElem.textContent)) {
                this.parent.notify(initiateFormulaReference, {
                    range: editorElem.textContent, formulaSheetIdx: this.editCellData.sheetIndex
                });
            }
        }
    };
    // Start edit the formula cell and set cursor position
    Edit.prototype.initiateRefSelection = function () {
        var sheetName = this.editCellData.fullAddr.substring(0, this.editCellData.fullAddr.lastIndexOf('!'));
        var value = this.editCellData.value;
        if (this.parent.getActiveSheet().name === sheetName && checkIsFormula(this.editCellData.value, true)) {
            this.startEdit(this.editCellData.addr, value, false);
            this.parent.notify(initiateFormulaReference, {
                range: this.editCellData.value, formulaSheetIdx: this.editCellData.sheetIndex
            });
            this.getEditElement(this.parent.getActiveSheet()).textContent = value;
            this.initiateCurPosition();
        }
        else {
            this.initiateCurPosition();
        }
    };
    Edit.prototype.addressHandler = function (args) {
        var dlgInst = this.parent.serviceLocator.getService(dialog).dialogInstance;
        if (dlgInst && dlgInst.element && dlgInst.element.classList.contains('e-validation-error-dlg')) {
            args.isAlertDlgOpen = true;
            return;
        }
        if (!this.curStartPos) {
            var curOffset = this.getCurPosition();
            if (curOffset.start) {
                this.curStartPos = curOffset.start;
            }
            if (curOffset.end) {
                this.curEndPos = curOffset.end;
            }
        }
        var address = args.range;
        var sheetIdx = this.editCellData.sheetIndex;
        var editorEle = this.getEditElement(this.parent.getActiveSheet());
        if (this.parent.activeSheetIndex !== sheetIdx) {
            address = '\'' + this.parent.getActiveSheet().name + '\'' + '!' + address;
            if (args.isNameBoxSelect) {
                sheetIdx = this.parent.activeSheetIndex;
            }
        }
        var editedValue = this.editCellData.value;
        if (args.isSelect) {
            this.parent.notify(initiateFormulaReference, { range: editedValue + address, formulaSheetIdx: sheetIdx });
        }
        else if (this.parent.activeSheetIndex === sheetIdx) {
            var editorContent = document.activeElement.classList.contains('e-formula-bar') ?
                document.activeElement.value : editorEle.textContent;
            if (args.isNameBoxSelect) {
                this.parent.notify(initiateFormulaReference, { range: editedValue + address, formulaSheetIdx: sheetIdx });
                this.curStartPos = editedValue.length;
            }
            var startVal = void 0;
            var endVal = void 0;
            if (args.isMouseDown && editorContent !== editedValue) {
                startVal = editorContent.substring(0, this.curEndPos) + this.parent.listSeparator;
                endVal = editorContent.substring(this.curEndPos);
                this.refreshEditor(startVal + endVal, false, true);
                this.parent.notify(initiateFormulaReference, { range: editorEle.textContent, formulaSheetIdx: sheetIdx });
                this.curEndPos += this.parent.listSeparator.length;
                this.curStartPos = this.curEndPos;
                startVal += address;
            }
            else {
                startVal = editedValue.substring(0, this.curStartPos) + address;
                endVal = editedValue.substring(this.curStartPos);
                if (args.isNameBoxSelect) {
                    this.refreshEditor(startVal + endVal, true, true);
                }
            }
            editorEle.textContent = startVal + endVal;
            this.curEndPos = startVal.length;
        }
    };
    Edit.prototype.updateFormulaBarValue = function (args) {
        var value = this.editCellData.value;
        var lastRange = this.parent.getActiveSheet().selectedRange.split(' ');
        var address = lastRange[lastRange.length - 1];
        address = isSingleCell(getIndexesFromAddress(address)) ? address.split(':')[0] : address;
        var formulaBar = this.parent.element.querySelector('.e-formula-bar');
        if (value && checkIsFormula(value, true)) {
            var sheetName = this.editCellData.fullAddr.substring(0, this.editCellData.fullAddr.lastIndexOf('!'));
            var otherSheet = this.parent.getActiveSheet().name !== sheetName;
            if (otherSheet) {
                address = '\'' + this.parent.getActiveSheet().name + '\'' + '!' + address;
            }
            var startVal = void 0;
            var endVal = void 0;
            if (otherSheet && args.isMouseDown && lastRange.length > 1 && args.formulaBarVal && args.formulaBarVal !== value) {
                startVal = args.formulaBarVal.substring(0, this.curEndPos) + this.parent.listSeparator;
                endVal = args.formulaBarVal.substring(this.curEndPos);
                this.refreshEditor(startVal + endVal, true);
                this.curEndPos += this.parent.listSeparator.length;
                this.curStartPos = this.curEndPos;
                startVal += address;
            }
            else {
                startVal = value.substring(0, this.curStartPos) + address;
                endVal = value.substring(this.curStartPos);
            }
            formulaBar.value = startVal + endVal;
            this.curEndPos = startVal.length;
        }
    };
    Edit.prototype.setFormulaBarCurPosition = function (input, selectionStart, selectionEnd) {
        if (input.setSelectionRange) {
            input.focus();
            input.selectionStart = selectionStart;
            input.selectionEnd = selectionStart;
            input.setSelectionRange(selectionStart, selectionEnd);
        }
    };
    Edit.prototype.initiateCurPosition = function (args) {
        if (args === void 0) { args = { isCellEdit: false }; }
        var el = this.getEditElement(this.parent.getActiveSheet(), true);
        if (args.isCellEdit) {
            var curOffset = this.getCurPosition();
            if (!this.endFormulaRef && curOffset.start === curOffset.end) {
                this.updateFormulaReference(el);
                var validCharacters = ['+', '-', '*', '/', this.parent.listSeparator, '(', '=', '&', ':'];
                if (curOffset.end && validCharacters.indexOf(this.editCellData.value[curOffset.end - 1]) === -1) {
                    this.endFormulaRef = true;
                }
            }
            return;
        }
        var value = el.innerText;
        var selection = window.getSelection();
        if ((selection && selection.focusNode && selection.focusNode.classList &&
            selection.focusNode.classList.contains('e-formula-bar-panel'))) {
            var formulaBar = this.parent.element.querySelector('.e-formula-bar');
            this.setFormulaBarCurPosition(formulaBar, this.curEndPos, this.curEndPos);
            return;
        }
        if (value) {
            var range = document.createRange();
            if (value.indexOf(')') === value.length - 1) {
                range.setStart(el.childNodes[0], this.curEndPos);
                range.setEnd(el.childNodes[0], this.curEndPos);
            }
            else {
                range.setStart(el.childNodes[0], this.curEndPos);
                range.setEnd(el.childNodes[0], this.curEndPos);
            }
            selection.removeAllRanges();
            selection.addRange(range);
        }
        var sheetIdx = this.editCellData.sheetIndex;
        if (sheetIdx !== this.parent.activeSheetIndex) {
            var elem = this.parent.element.querySelector('.e-formula-bar');
            if (elem.value) {
                if (elem.value.indexOf(')') === this.curEndPos - 1) {
                    this.setFormulaBarCurPosition(elem, this.curEndPos - 1, this.curEndPos - 1);
                }
                else {
                    this.setFormulaBarCurPosition(elem, this.curEndPos, this.curEndPos);
                }
            }
        }
    };
    Edit.prototype.getEditElement = function (sheet, isEdit) {
        if ((this.isEdit || isEdit) && (sheet.frozenRows || sheet.frozenColumns)) {
            var frozenRow = this.parent.frozenRowCount(sheet);
            var frozenCol = this.parent.frozenColCount(sheet);
            var range = getCellIndexes(sheet.activeCell);
            var content = void 0;
            if (range[0] < frozenRow && range[1] < frozenCol) {
                content = this.parent.getSelectAllContent();
            }
            else if (range[0] < frozenRow) {
                content = this.parent.getColumnHeaderContent();
            }
            else if (range[1] < frozenCol) {
                content = this.parent.getRowHeaderContent();
            }
            else {
                return this.editorElem;
            }
            var editEle = content.getElementsByClassName('e-spreadsheet-edit')[0];
            if (!editEle && isEdit) {
                editEle = content.appendChild(this.editorElem.cloneNode());
            }
            return editEle;
        }
        return this.editorElem;
    };
    Edit.prototype.sheetChangeHandler = function () {
        if (!this.isEdit) {
            this.editCellData.value = null;
        }
    };
    Edit.prototype.showFormulaAlertDlg = function (errorString, triggerBeforeOpenEvt) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var alertDialog = this.parent.serviceLocator.getService('dialog');
        var cursorPosition;
        var errorKey = this.getFormulaErrorKey(errorString);
        var cancel;
        var content = l10n.getConstant(errorKey);
        var dlgInst = alertDialog.dialogInstance;
        if (dlgInst && dlgInst.visible && dlgInst.element.classList.contains('e-circularref-dlg')) {
            return cancel;
        }
        alertDialog.show({
            width: 400, isModal: true, showCloseIcon: true, target: this.parent.element, cssClass: 'e-validation-error-dlg e-circularref-dlg',
            content: content,
            beforeOpen: function (args) {
                if (triggerBeforeOpenEvt) {
                    var sheet = _this.parent.getActiveSheet();
                    var dlgArgs = { dialogName: 'CircularReferenceDialog', element: args.element,
                        target: args.target, cancel: args.cancel, cellAddress: sheet.name + "!" + sheet.activeCell, content: content };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = cancel = true;
                        return;
                    }
                    else if (dlgArgs.content !== content) {
                        alertDialog.dialogInstance.content = dlgArgs.content;
                        alertDialog.dialogInstance.dataBind();
                    }
                }
                if (window.getSelection().rangeCount > 0) {
                    var range = window.getSelection().getRangeAt(0);
                    cursorPosition = range.endOffset;
                }
            },
            buttons: [{
                    buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true },
                    click: function () { return alertDialog.hide(); }
                }],
            close: function () {
                if (!cancel) {
                    var elem = _this.getEditElement(_this.parent.getActiveSheet());
                    if (elem.childElementCount) {
                        var textContent = elem.textContent;
                        cursorPosition = textContent.length;
                        elem.textContent = textContent;
                    }
                    var selection = document.getSelection();
                    var range = document.createRange();
                    range.setStart(elem.firstChild, cursorPosition);
                    range.collapse(true);
                    selection.removeAllRanges();
                    selection.addRange(range);
                    elem.focus();
                }
            }
        }, false);
        return cancel;
    };
    Edit.prototype.getFormulaErrorKey = function (errorString) {
        var errorKey;
        switch (errorString) {
            case 'invalid arguments':
                errorKey = 'InvalidArguments';
                break;
            case 'improper formula':
                errorKey = 'ImproperFormula';
                break;
            case 'empty expression':
                errorKey = 'EmptyExpression';
                break;
            case 'mismatched parentheses':
                errorKey = 'MismatchedParenthesis';
                break;
            case 'mismatched string quotes':
                errorKey = 'MismatchedStringQuotes';
                break;
            case 'wrong number of arguments':
                errorKey = 'WrongNumberOfArguments';
                break;
            case 'requires 3 arguments':
                errorKey = 'Requires3Arguments';
                break;
            case '#CIRCULARREF!':
                errorKey = 'FormulaCircularRef';
                break;
            default:
                errorKey = 'InvalidFormulaError';
        }
        return errorKey;
    };
    Edit.prototype.readOnlyAlertHandler = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialog = this.parent.serviceLocator.getService('dialog');
        var findDialog = this.parent.element.querySelector('.e-find-dlg');
        var findDlgInst;
        if (!isNullOrUndefined(findDialog)) {
            findDlgInst = getComponent(findDialog, 'dialog');
        }
        dialog.show({
            content: l10n.getConstant('ReadonlyAlert'),
            isModal: true,
            closeOnEscape: true,
            showCloseIcon: true,
            width: '400px',
            cssClass: 'e-readonly-alert-dlg',
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'ReadOnlyAlertDialog',
                    content: l10n.getConstant('ReadonlyAlert'),
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                else {
                    dialog.dialogInstance.content = dlgArgs.content;
                    focus(_this.parent.element);
                }
            },
            close: function () {
                if (!isNullOrUndefined(findDialog)) {
                    dialog.dialogInstance = findDlgInst;
                }
                focus(_this.parent.element);
            }
        });
    };
    Edit.prototype.finiteAlertHandler = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialog = this.parent.serviceLocator.getService('dialog');
        dialog.show({
            header: l10n.getConstant('Alert'),
            content: l10n.getConstant('FiniteAlert'),
            isModal: true,
            closeOnEscape: true,
            showCloseIcon: true,
            width: '400px',
            cssClass: 'e-finite-alert-dlg'
        });
    };
    return Edit;
}());

/**
 * Represents selection support for Spreadsheet.
 */
var Selection = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet selection module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet selection module.
     * @private
     */
    function Selection(parent) {
        this.invalidOperators = ['%'];
        this.formulaRange = [];
        /** @hidden */
        this.isNoteActiveElement = false;
        this.isNoteTouch = false;
        this.parent = parent;
        this.addEventListener();
        this.mouseMoveEvt = this.mouseMoveHandler.bind(this);
    }
    Selection.prototype.addEventListener = function () {
        this.parent.on(contentLoaded, this.init, this);
        this.parent.on(mouseDown, this.mouseDownHandler, this);
        this.parent.on(virtualContentLoaded, this.virtualContentLoadedHandler, this);
        this.parent.on(cellNavigate, this.cellNavigateHandler, this);
        this.parent.on(selectRange, this.selectRange, this);
        this.parent.on(rowHeightChanged, this.rowHeightChanged, this);
        this.parent.on(colWidthChanged, this.colWidthChanged, this);
        this.parent.on(protectSelection, this.protectHandler, this);
        this.parent.on(initiateFormulaReference, this.initiateFormulaSelection, this);
        this.parent.on(clearCellRef, this.clearBorder, this);
        this.parent.on(getRowIdxFromClientY, this.getRowIdxFromClientY, this);
        this.parent.on(getColIdxFromClientX, this.getColIdxFromClientX, this);
        this.parent.on(getChartRowIdxFromClientY, this.getRowIdxFromClientY, this);
        this.parent.on(getChartColIdxFromClientX, this.getColIdxFromClientX, this);
        this.parent.on(focusBorder, this.chartBorderHandler, this);
        this.parent.on(selectionStatus, this.isTouchSelectionStarted, this);
        this.parent.on(rangeSelectionByKeydown, this.selectionByKeydown, this);
    };
    Selection.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(contentLoaded, this.init);
            this.parent.off(mouseDown, this.mouseDownHandler);
            this.parent.off(virtualContentLoaded, this.virtualContentLoadedHandler);
            this.parent.off(cellNavigate, this.cellNavigateHandler);
            this.parent.off(selectRange, this.selectRange);
            this.parent.off(rowHeightChanged, this.rowHeightChanged);
            this.parent.off(colWidthChanged, this.colWidthChanged);
            this.parent.off(protectSelection, this.protectHandler);
            this.parent.off(initiateFormulaReference, this.initiateFormulaSelection);
            this.parent.off(clearCellRef, this.clearBorder);
            this.parent.off(getRowIdxFromClientY, this.getRowIdxFromClientY);
            this.parent.off(getColIdxFromClientX, this.getColIdxFromClientX);
            this.parent.off(getChartRowIdxFromClientY, this.getRowIdxFromClientY);
            this.parent.off(getChartColIdxFromClientX, this.getColIdxFromClientX);
            this.parent.off(focusBorder, this.chartBorderHandler);
            this.parent.off(selectionStatus, this.isTouchSelectionStarted);
            this.parent.off(rangeSelectionByKeydown, this.selectionByKeydown);
        }
    };
    Selection.prototype.isTouchSelectionStarted = function (args) {
        args.touchSelectionStarted = this.touchSelectionStarted;
    };
    Selection.prototype.selectionByKeydown = function (args) {
        this.selectRangeByIdx(args.range, args.e, false, false, false, false, undefined, false);
    };
    Selection.prototype.rowHeightChanged = function (args) {
        var _this = this;
        if (!args.threshold) {
            return;
        }
        getUpdateUsingRaf(function () {
            if (!_this.parent) {
                return;
            }
            var sheet = _this.parent.getActiveSheet();
            var ele = _this.getActiveCell();
            if (ele && (sheet.frozenRows || sheet.frozenColumns || sheet.selectedRange.includes(' '))) {
                _this.selectRange({ address: sheet.selectedRange, isRowHeightChanged: true });
                return;
            }
            var sRange = getSwapRange(getRangeIndexes(sheet.selectedRange));
            var mergeArgs = { range: sRange, isActiveCell: false, skipChecking: true };
            var isActiveCell;
            if (ele) {
                var rowIdx = getCellIndexes(sheet.activeCell)[0];
                _this.parent.notify(mergedRange, mergeArgs);
                if (mergeArgs.isActiveCell) {
                    var cell = getCell(sRange[0], sRange[1], sheet, false, true);
                    isActiveCell = cell.rowSpan > 1 && sRange[0] <= args.rowIdx && sRange[2] >= args.rowIdx;
                }
                if (rowIdx === args.rowIdx || isActiveCell) {
                    ele.style.height = parseFloat(ele.style.height) + args.threshold + "px";
                }
                else if (rowIdx > args.rowIdx) {
                    ele.style.top = parseFloat(ele.style.top) + args.threshold + "px";
                }
            }
            ele = _this.getSelectionElement();
            if (ele) {
                if (isActiveCell || (sRange[0] === sRange[2] && sRange[1] === sRange[3])) {
                    return;
                }
                var rowStart = sRange[0];
                var rowEnd = sRange[2];
                if (rowStart <= args.rowIdx && rowEnd >= args.rowIdx && ele) {
                    ele.style.height = parseFloat(ele.style.height) + args.threshold + "px";
                }
                else if (rowStart > args.rowIdx && ele) {
                    ele.style.top = parseFloat(ele.style.top) + args.threshold + "px";
                }
            }
        });
    };
    Selection.prototype.colWidthChanged = function (args) {
        var _this = this;
        if (!args.threshold) {
            return;
        }
        getUpdateUsingRaf(function () {
            if (!_this.parent) {
                return;
            }
            var sheet = _this.parent.getActiveSheet();
            var ele = _this.getActiveCell();
            var isRtl = _this.parent.enableRtl;
            if (ele && (sheet.frozenRows || sheet.frozenColumns || sheet.selectedRange.includes(' '))) {
                _this.selectRange({ address: sheet.selectedRange });
                return;
            }
            var sRange = getSwapRange(getRangeIndexes(sheet.selectedRange));
            var e = { range: sRange, isActiveCell: false, skipChecking: true };
            var isActiveCell;
            if (ele) {
                _this.parent.notify(mergedRange, e);
                var colIdx = getCellIndexes(sheet.activeCell)[1];
                if (e.isActiveCell) {
                    var cell = getCell(sRange[0], sRange[1], sheet, false, true);
                    isActiveCell = cell.rowSpan > 1 || cell.colSpan > 1;
                }
                if (colIdx === args.colIdx || isActiveCell) {
                    ele.style.width = parseFloat(ele.style.width) + args.threshold + "px";
                }
                else if (colIdx > args.colIdx) {
                    if (isRtl) {
                        ele.style.right = parseFloat(ele.style.right) + args.threshold + "px";
                    }
                    else {
                        ele.style.left = parseFloat(ele.style.left) + args.threshold + "px";
                    }
                }
            }
            ele = _this.getSelectionElement();
            if (!ele || isActiveCell || (sRange[0] === sRange[2] && sRange[1] === sRange[3])) {
                return;
            }
            var colStart = sRange[1];
            var colEnd = sRange[3];
            if (colStart <= args.colIdx && colEnd >= args.colIdx && ele) {
                ele.style.width = parseFloat(ele.style.width) + args.threshold + "px";
            }
            else if (colStart > args.colIdx && ele) {
                if (isRtl) {
                    ele.style.right = parseFloat(ele.style.right) + args.threshold + "px";
                }
                else {
                    ele.style.left = parseFloat(ele.style.left) + args.threshold + "px";
                }
            }
        });
    };
    Selection.prototype.selectRange = function (args) {
        args.address = this.parent.selectionSettings.mode === 'Single' ? getRangeAddress(getCellIndexes(args.address)) : args.address;
        this.selectMultiRange(args.address, null, null, args.skipChecking, args.isRowHeightChanged);
    };
    Selection.prototype.init = function () {
        this.createSelectionElement();
        var sheet = this.parent.getActiveSheet();
        var sRange = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var actRange = getCellIndexes(sheet.activeCell);
        var inRange = sRange[0] <= actRange[0] && sRange[2] >= actRange[0] && sRange[1] <= actRange[1]
            && sRange[3] >= actRange[1];
        this.selectMultiRange(sheet.selectedRange, true, inRange);
    };
    Selection.prototype.selectMultiRange = function (address, isInit, inRange, skipChecking, isisRowHeightChanged) {
        var _this = this;
        var sheetIdx = this.parent.activeSheetIndex;
        if (address.indexOf('!') > -1) {
            sheetIdx = getSheetIndex(this.parent, getSheetNameFromAddress(address));
            address = address.substring(address.lastIndexOf('!') + 1);
        }
        if (this.parent.activeSheetIndex === sheetIdx) {
            address.split(' ').forEach(function (rng, idx) {
                _this.selectRangeByIdx(getRangeIndexes(rng), { type: 'mousedown', ctrlKey: idx !== 0 }, null, inRange, isInit, skipChecking, undefined, false, isisRowHeightChanged);
            });
        }
        else {
            updateSelectedRange(this.parent, address, this.parent.sheets[sheetIdx]);
        }
    };
    Selection.prototype.createSelectionElement = function () {
        var content = this.parent.getMainContent();
        var ele = this.parent.createElement('div', { className: 'e-selection' });
        content.appendChild(ele);
        ele = this.parent.createElement('div', { className: 'e-active-cell' });
        content.appendChild(ele);
    };
    Selection.prototype.isMergeActiveCell = function (sheet, activeIdx, rowIdx, colIdx) {
        var cell = getCell(rowIdx, colIdx, sheet, false, true);
        if ((!!cell.rowSpan && cell.rowSpan !== 1) || (!!cell.colSpan && cell.colSpan !== 1)) {
            var mergeArgs = { range: [rowIdx, colIdx, rowIdx, colIdx] };
            this.parent.notify(activeCellMergedRange, mergeArgs);
            var mergeRange = mergeArgs.range;
            return mergeRange[0] === activeIdx[0] && mergeRange[1] === activeIdx[1];
        }
        return false;
    };
    Selection.prototype.mouseDownHandler = function (e) {
        var _this = this;
        this.isNoteActiveElement = !isNullOrUndefined(document) && !isNullOrUndefined(document.activeElement) &&
            typeof document.activeElement.className === 'string' && document.activeElement.className.indexOf('e-addNoteContainer') > -1;
        if (closest(e.target, '.e-scrollbar') || e.target.classList.contains('e-main-panel') ||
            e.target.classList.contains('e-sheet')) {
            return;
        }
        var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
        var sheet = this.parent.getActiveSheet();
        this.parent.notify(editOperation, eventArgs);
        var isFormulaEdit = checkIsFormula(eventArgs.editedValue, true);
        var isNoteCellIndex = this.parent.enableNotes && !isNullOrUndefined(this.parent.spreadsheetNoteModule.noteCellIndexes);
        var cellIndexes = isNoteCellIndex ? this.parent.spreadsheetNoteModule.noteCellIndexes :
            getCellIndexes(this.parent.getActiveSheet().activeCell);
        var targetElement = this.parent.getCell(cellIndexes[0], cellIndexes[1]);
        if (!isNullOrUndefined(targetElement) && targetElement.children !== null && targetElement.children.length > 0
            && this.isNoteActiveElement && targetElement.children[targetElement.children.length - 1].classList.contains('e-addNoteIndicator')) {
            var cell = getCell(cellIndexes[0], cellIndexes[1], sheet);
            var eventAction = !isNullOrUndefined(cell) && cell.notes ? 'editNote' : 'addNote';
            var noteContainer = document.getElementsByClassName('e-addNoteContainer')[0];
            var address = getSheetName(this.parent, this.parent.activeSheetIndex) + '!' + getRangeAddress(cellIndexes);
            if (!isNullOrUndefined(noteContainer) && !isNullOrUndefined(noteContainer.value) && e.target.className !== 'e-addNoteContainer'
                && ((isNullOrUndefined(cell) || isNullOrUndefined(cell.notes)) || (cell.notes !== noteContainer.value))) {
                this.parent.notify(setActionData, { args: { action: 'beforeCellSave', eventArgs: { address: address } } });
                updateCell(this.parent, this.parent.getActiveSheet(), { rowIdx: cellIndexes[0], colIdx: cellIndexes[1], preventEvt: true,
                    cell: { notes: noteContainer.value, isNoteEditable: false } });
                var eventArgs_1 = { notes: noteContainer.value, address: address };
                this.parent.notify(completeAction, { eventArgs: eventArgs_1, action: eventAction });
            }
            else if (e.target.className !== 'e-addNoteContainer') {
                updateCell(this.parent, this.parent.getActiveSheet(), { rowIdx: cellIndexes[0], colIdx: cellIndexes[1], preventEvt: true,
                    cell: { isNoteEditable: false } });
            }
            this.parent.spreadsheetNoteModule.isShowNote = null;
        }
        if (!this.isNoteTouch && e.target.className !== 'e-addNoteContainer' && document.getElementsByClassName('e-addNoteContainer') && document.getElementsByClassName('e-addNoteContainer').length > 0) {
            this.parent.notify(removeNoteContainer, '');
        }
        if (this.isNoteTouch && e.type.indexOf('mouse') > -1) {
            this.isNoteTouch = false;
        }
        if (!this.parent.isEdit || isFormulaEdit) {
            var overlayElem = document.getElementById(this.parent.element.id + '_overlay');
            if (typeof (e.target.className) === 'string') {
                if (e.target.className.indexOf('e-ss-overlay') > -1) {
                    return;
                }
            }
            else if (overlayElem) {
                overlayElem.classList.remove('e-ss-overlay-active');
            }
            if (closest(e.target, '.e-datavisualization-chart')) {
                return;
            }
            if (sheet.isProtected && !sheet.protectSettings.selectCells && !sheet.protectSettings.selectUnLockedCells) {
                return;
            }
            if (!(closest(e.target, '.e-findtool-dlg') || closest(e.target, '.e-dragfill-ddb'))) {
                if (this.getSheetElement().contains(e.target) && !e.target.classList.contains('e-colresize')
                    && !e.target.classList.contains('e-rowresize')) {
                    var sheet_1 = this.parent.getActiveSheet();
                    var mode = this.parent.selectionSettings.mode;
                    var mouseClientX = getClientX(e);
                    var mouseClientY = getClientY(e);
                    var rowIdx = this.getRowIdxFromClientY({ clientY: mouseClientY, target: e.target });
                    var colIdx = this.getColIdxFromClientX({ clientX: mouseClientX, target: e.target });
                    var activeIdx = getCellIndexes(sheet_1.activeCell);
                    var isRowSelected = void 0;
                    var isColSelected = void 0;
                    if (sheet_1.showHeaders) {
                        var trgt = e.target;
                        if (sheet_1.frozenColumns || sheet_1.frozenRows) {
                            var headerEle = this.parent.getSelectAllContent().querySelector('thead');
                            if (headerEle) {
                                isColSelected = (this.parent.getColumnHeaderContent().contains(trgt) || headerEle.contains(trgt)) &&
                                    trgt.classList.contains('e-header-cell') || (trgt.classList.contains('e-selectall-table') &&
                                    rowIdx < 0 && colIdx >= this.parent.frozenColCount(sheet_1));
                            }
                            else {
                                isColSelected = this.parent.getColumnHeaderContent().contains(trgt) &&
                                    trgt.classList.contains('e-header-cell');
                            }
                            headerEle = this.parent.getSelectAllContent().querySelector('tbody');
                            if (headerEle) {
                                isRowSelected = (this.parent.getRowHeaderContent().contains(trgt) || headerEle.contains(trgt)) &&
                                    trgt.classList.contains('e-header-cell') || (trgt.classList.contains('e-selectall-table') &&
                                    colIdx < 0 && rowIdx >= this.parent.frozenRowCount(sheet_1));
                            }
                            else {
                                isRowSelected = this.parent.getRowHeaderContent().contains(trgt) &&
                                    trgt.classList.contains('e-header-cell');
                            }
                            if (rowIdx === -1) {
                                rowIdx = 0;
                            }
                            if (colIdx === -1) {
                                colIdx = 0;
                            }
                        }
                        else {
                            isRowSelected = this.parent.getRowHeaderContent().contains(e.target);
                            isColSelected = this.parent.getColumnHeaderContent().contains(e.target);
                        }
                    }
                    if ((sheet_1.frozenRows || sheet_1.frozenColumns) && !isColSelected && !isRowSelected) {
                        var trgt_1 = e.target;
                        var idx = ['e-rowhdr-table', 'e-selectall-table', 'e-colhdr-table'].findIndex(function (cls) { return trgt_1.classList.contains(cls); });
                        if (idx > -1) {
                            var selector = ['.e-row-header', '.e-selectall-container', '.e-column-header'][idx];
                            var closestEle = closest(trgt_1, selector);
                            if (closestEle && closestEle.style.zIndex) {
                                var cell = getCell(rowIdx, colIdx, sheet_1);
                                if ((cell && cell.validation && cell.validation.type === 'List') ||
                                    (checkColumnValidation(sheet_1.columns[colIdx], rowIdx, colIdx) &&
                                        sheet_1.columns[colIdx].validation.type === 'List')) {
                                    var td = this.parent.getCell(rowIdx, colIdx);
                                    if (td) {
                                        var listEle = td.querySelector('.e-validation-list');
                                        if (listEle) {
                                            var listEleRect = listEle.getBoundingClientRect();
                                            var dropdownClicked = mouseClientX >= listEleRect.left &&
                                                mouseClientX <= listEleRect.right && mouseClientY >= listEleRect.top &&
                                                mouseClientY <= listEleRect.bottom;
                                            if (dropdownClicked) {
                                                var ddlEle = listEle.querySelector('.e-dropdownlist');
                                                if (ddlEle) {
                                                    var ddlInst = getComponent(ddlEle, 'dropdownlist');
                                                    if (ddlInst) {
                                                        ddlInst.showPopup();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (e.which === 3 && this.isSelected(rowIdx, colIdx)) {
                        return;
                    }
                    if (e.target.classList.contains('e-autofill')) {
                        this.isautoFillClicked = true;
                        var autoFillDdb = e.target.parentElement.querySelector('.e-dragfill-ddb');
                        if (!autoFillDdb || autoFillDdb.classList.contains('e-hide')) {
                            this.dAutoFillCell = sheet_1.selectedRange;
                        }
                    }
                    var topLeftIdx = getRangeIndexes(sheet_1.topLeftCell);
                    var range = void 0;
                    if (isRowSelected) {
                        this.isRowSelected = true;
                        if (!e.shiftKey || mode === 'Single') {
                            this.startCell = [rowIdx, 0];
                        }
                        else if (!this.startCell) {
                            this.startCell = [topLeftIdx[0], 0];
                        }
                        range = [this.startCell[0], sheet_1.frozenColumns ? topLeftIdx[1] : 0, rowIdx, sheet_1.colCount - 1];
                    }
                    else if (isColSelected) {
                        this.isColSelected = true;
                        if (!e.shiftKey || mode === 'Single') {
                            this.startCell = [0, colIdx];
                        }
                        else if (!this.startCell) {
                            this.startCell = [0, topLeftIdx[1]];
                        }
                        range = [sheet_1.frozenRows ? topLeftIdx[0] : 0, this.startCell[1], sheet_1.rowCount - 1, colIdx];
                    }
                    else if (closest(e.target, '.e-select-all-cell')) {
                        this.startCell = [sheet_1.frozenRows ? topLeftIdx[0] : 0, sheet_1.frozenColumns ? topLeftIdx[1] : 0];
                        range = [].concat(this.startCell, [sheet_1.rowCount - 1, sheet_1.colCount - 1]);
                    }
                    else if (!e.target.classList.contains('e-sheet-content')) {
                        if (!e.shiftKey || mode === 'Single') {
                            this.startCell = [rowIdx, colIdx];
                        }
                        if (!this.isautoFillClicked && !closest(e.target, '.e-filloption')) {
                            range = [].concat(this.startCell ? this.startCell : getCellIndexes(sheet_1.activeCell), [rowIdx, colIdx]);
                        }
                    }
                    if (isTouchStart(e) && !(isRowSelected || isColSelected) && range) {
                        var colRowSelectArgs = this.isRowColSelected(range);
                        this.isRowSelected = colRowSelectArgs.isRowSelected;
                        this.isColSelected = colRowSelectArgs.isColSelected;
                    }
                    var preventEvt = e.ctrlKey && range && sheet_1.selectedRange.includes(getRangeAddress(range));
                    if (!preventEvt && mode === 'Multiple' && (!isTouchEnd(e) && (!isTouchStart(e) ||
                        (isTouchStart(e) && ((activeIdx[0] === rowIdx && activeIdx[1] === colIdx) ||
                            this.isMergeActiveCell(sheet_1, activeIdx, rowIdx, colIdx)))) || isColSelected || isRowSelected)) {
                        document.addEventListener(getMoveEvent().split(' ')[0], this.mouseMoveEvt);
                        if (!Browser.isPointer) {
                            if (Browser.isIos && isTouchStart(e) && e.target && e.target.classList.contains('e-cell')) {
                                e.preventDefault();
                            }
                            document.addEventListener(getMoveEvent().split(' ')[1], this.mouseMoveEvt, { passive: false });
                        }
                        this.touchSelectionStarted = true;
                    }
                    else {
                        this.touchSelectionStarted = false;
                    }
                    if (!isTouchEnd(e)) {
                        if (preventEvt) {
                            if (this.parent.isEdit) {
                                var updateFormulaCurPos_1 = function (e) {
                                    EventHandler.remove(document, getEndEvent(), updateFormulaCurPos_1);
                                    _this.updateFormulaCursorPosition(e);
                                };
                                EventHandler.add(document, getEndEvent(), updateFormulaCurPos_1, this);
                            }
                        }
                        else {
                            EventHandler.add(document, getEndEvent(), this.mouseUpHandler, this);
                        }
                    }
                    var isNoteAvailable = (e.target.className === 'e-addNoteIndicator' ||
                        (e.target.children.length > 0 && e.target.children[e.target.childElementCount - 1].className.indexOf('e-addNoteIndicator') > -1));
                    if (isTouchStart(e) && isNoteAvailable) {
                        var cellIndexes_1 = getCellIndexes(getRangeAddress(range).split(':')[0]);
                        this.parent.notify(showNote, { rowIndex: cellIndexes_1[0], columnIndex: cellIndexes_1[1], isNoteEditable: false });
                        this.isNoteTouch = true;
                        this.parent.spreadsheetNoteModule.isNoteVisibleOnTouch = true;
                    }
                    if (isTouchStart(e) && !(isColSelected || isRowSelected)) {
                        this.touchEvt = e;
                        return;
                    }
                    if (range) {
                        this.selectRangeByIdx(range, e);
                    }
                    if (!this.isNoteTouch && e.type.indexOf('mouse') > -1 && isNoteAvailable) {
                        var cellIndexes_2 = getCellIndexes(getRangeAddress(range).split(':')[0]);
                        this.parent.notify(showNote, { rowIndex: cellIndexes_2[0], columnIndex: cellIndexes_2[1], isNoteEditable: false });
                        this.parent.spreadsheetNoteModule.isNoteVisible = true;
                    }
                    if (this.parent.isMobileView()) {
                        this.parent.element.classList.add('e-mobile-focused');
                        this.parent.renderModule.setSheetPanelSize();
                    }
                }
            }
        }
        if (isFormulaEdit && (e.target.classList.contains('e-cell') || e.target.classList.contains('e-wrap-content') ||
            e.target.classList.contains('e-header-cell')) && this.parent.isEdit) {
            var range = this.parent.getActiveSheet().selectedRange;
            var lastRange = range.split(' ');
            range = isSingleCell(getIndexesFromAddress(lastRange[lastRange.length - 1])) ? lastRange[lastRange.length - 1].split(':')[0] : lastRange[lastRange.length - 1];
            this.parent.notify(addressHandle, { range: range, isSelect: false, isMouseDown: e.ctrlKey });
        }
    };
    Selection.prototype.mouseMoveHandler = function (e) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        if (isTouchMove(e)) {
            e.preventDefault();
        }
        var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
        this.parent.notify(editOperation, eventArgs);
        var isFormulaEdit = checkIsFormula(eventArgs.editedValue, true);
        var verticalContent = this.parent.getMainContent().parentElement;
        var horizontalContent = this.parent.element.getElementsByClassName('e-scroller')[0];
        var clientRect = verticalContent.getBoundingClientRect();
        var frozenCol = this.parent.frozenColCount(sheet);
        var left = clientRect.left + this.parent.sheetModule.getRowHeaderWidth(sheet, false, true);
        var right = clientRect.right - getScrollBarWidth();
        var top = clientRect.top;
        var bottom = clientRect.bottom;
        var clientX = getClientX(e);
        var clientY = getClientY(e);
        // remove math.min or handle top and left auto scroll
        var colIdx = this.isRowSelected ? sheet.colCount - 1 :
            this.getColIdxFromClientX({ clientX: clientX, target: e.target });
        var rowIdx = this.isColSelected ? sheet.rowCount - 1 :
            this.getRowIdxFromClientY({ clientY: clientY, target: e.target });
        var prevIndex;
        var rangeIndex;
        if (e.ctrlKey) {
            var selRanges = sheet.selectedRange.split(' ');
            prevIndex = getRangeIndexes(selRanges[selRanges.length - 1]);
        }
        else {
            prevIndex = getRangeIndexes(sheet.selectedRange);
        }
        if (Browser.isDevice) {
            var screenWidth = screen.availWidth;
            if (right >= screenWidth - 40) {
                right -= (40 - (screenWidth - right));
            }
            if (!sheet.showHeaders && left < 40) {
                left += (40 - left);
            }
        }
        var mergeArgs = { range: [rowIdx, colIdx, rowIdx, colIdx] };
        this.parent.notify(activeCellMergedRange, mergeArgs);
        if (mergeArgs.range[2] === prevIndex[2] && mergeArgs.range[3] === prevIndex[3] && clientY <= bottom && clientY >= top &&
            clientX <= right && clientX >= left) {
            return;
        }
        var frozenRow = this.parent.frozenRowCount(sheet);
        if (!isFormulaEdit && !this.isColSelected && !this.isRowSelected) {
            prevIndex = getCellIndexes(sheet.activeCell);
        }
        var isScrollDown = clientY > bottom && !this.isColSelected && rowIdx < sheet.rowCount;
        var isScrollUp = clientY < top && rowIdx >= 0 && !this.isColSelected &&
            !!verticalContent.scrollTop && (!frozenRow || prevIndex[0] >= frozenRow);
        var isScrollRight = clientX > right && !this.isRowSelected && colIdx < sheet.colCount;
        var isScrollLeft = clientX < left && colIdx >= 0 && !this.isRowSelected &&
            !!horizontalContent.scrollLeft && (!frozenCol || prevIndex[1] >= frozenCol);
        this.clearInterval();
        var scrollUpRowIdx;
        var scrollUpColIdx;
        if (isScrollDown || isScrollUp || isScrollRight || isScrollLeft) {
            if (isScrollUp || isScrollLeft) {
                scrollUpRowIdx = rowIdx;
                scrollUpColIdx = colIdx;
            }
            var scrollSelection_1 = function () {
                if (isScrollDown || isScrollUp) {
                    rowIdx = _this.getRowIdxFromClientY({ clientY: isScrollDown ? bottom : top });
                    if (rowIdx >= sheet.rowCount) { // clear interval when scroll up
                        _this.clearInterval();
                        return;
                    }
                    verticalContent.scrollTop += (isScrollDown ? 1 : -1) * getRowHeight(sheet, rowIdx);
                }
                if (isScrollRight || isScrollLeft) {
                    colIdx = _this.getColIdxFromClientX({ clientX: isScrollRight ? right : left, isFScroll: true });
                    if (colIdx >= sheet.colCount) { // clear interval when scroll left
                        _this.clearInterval();
                        return;
                    }
                    horizontalContent.scrollLeft += (isScrollRight ? 1 : -1) * getColumnWidth(sheet, colIdx);
                }
                if ((isScrollUp && sheet.frozenRows && !verticalContent.scrollTop) ||
                    (isScrollLeft && sheet.frozenColumns && !horizontalContent.scrollLeft)) {
                    _this.selectRangeByIdx([].concat(prevIndex[0], prevIndex[1], [scrollUpRowIdx, scrollUpColIdx]), e);
                    _this.clearInterval();
                    return;
                }
                _this.selectRangeByIdx([].concat(prevIndex[0], prevIndex[1], [rowIdx, colIdx]), e);
            };
            scrollSelection_1();
            this.scrollInterval = setInterval(function () {
                scrollSelection_1();
                _this.clearInterval();
                _this.scrollInterval = setInterval(scrollSelection_1, 100);
            });
        }
        else {
            var indexes = [].concat(prevIndex[0], prevIndex[1], [rowIdx, colIdx]);
            if (frozenRow && indexes[0] < frozenRow && indexes[2] >= frozenRow && verticalContent.scrollTop) {
                verticalContent.scrollTop = 0;
                indexes[2] = frozenRow;
            }
            if (frozenCol && indexes[1] < frozenCol && indexes[3] >= frozenCol && horizontalContent.scrollLeft) {
                horizontalContent.scrollLeft = 0;
                indexes[3] = frozenCol;
            }
            if (this.isautoFillClicked) {
                if (e.target.classList.contains('e-autofill')) {
                    this.dAutoFillCell = sheet.selectedRange;
                }
                var args = { e: e, indexes: null };
                this.parent.notify(selectAutoFillRange, args);
                indexes = args.indexes;
                rangeIndex = indexes;
            }
            this.selectRangeByIdx(indexes, e);
        }
        if (isFormulaEdit && this.parent.isEdit && !closest(e.target, '#' + this.parent.element.id + '_edit')) {
            var range = void 0;
            if (this.isautoFillClicked) {
                range = getRangeAddress(rangeIndex);
            }
            else {
                range = this.parent.getActiveSheet().selectedRange;
            }
            var lastRange = range.split(' ');
            this.parent.notify(addressHandle, { range: lastRange[lastRange.length - 1], isSelect: false });
        }
    };
    Selection.prototype.mouseUpHandler = function (e) {
        var rowIdx = this.getRowIdxFromClientY({ clientY: getClientY(e), target: e.target });
        var colIdx = this.getColIdxFromClientX({ clientX: getClientX(e), target: e.target });
        this.clearInterval();
        if (isTouchEnd(e) && !(this.isColSelected || this.isRowSelected) &&
            (this.getRowIdxFromClientY({ clientY: getClientY(this.touchEvt), target: e.target }) === rowIdx &&
                this.getColIdxFromClientX({ clientX: getClientX(this.touchEvt), target: e.target }) === colIdx)) {
            this.mouseDownHandler(e);
        }
        document.removeEventListener(getMoveEvent().split(' ')[0], this.mouseMoveEvt);
        if (!Browser.isPointer) {
            document.removeEventListener(getMoveEvent().split(' ')[1], this.mouseMoveEvt);
        }
        EventHandler.remove(document, getEndEvent(), this.mouseUpHandler);
        var sheet = this.parent.getActiveSheet();
        if (sheet.frozenRows || sheet.frozenColumns) {
            removeRangeEle(this.parent.element, null, 'e-cur-selection', true, true);
        }
        this.parent.notify(mouseUpAfterSelection, e);
        if (this.isautoFillClicked) {
            var sheet_2 = this.parent.getActiveSheet();
            var indexes = getRangeIndexes(sheet_2.selectedRange);
            if (!(this.isColSelected && indexes[1] === colIdx) && !(this.isRowSelected && indexes[0] === rowIdx)) {
                var autoFillDdb = e.target.parentElement.querySelector('.e-dragfill-ddb');
                if (!autoFillDdb || autoFillDdb.classList.contains('e-hide')) {
                    this.dAutoFillCell = sheet_2.selectedRange;
                }
                this.parent.notify(performAutoFill, { event: e, dAutoFillCell: this.dAutoFillCell });
            }
            this.isautoFillClicked = false;
        }
        else if (!e.ctrlKey && !isDiscontinuousRange(getSelectedRange(this.parent.getActiveSheet()))) {
            this.parent.notify(positionAutoFillElement, null);
        }
        else {
            this.parent.notify(hideAutoFillElement, null);
        }
        this.updateFormulaCursorPosition(e);
    };
    Selection.prototype.updateFormulaCursorPosition = function (e) {
        if (this.parent.isEdit) {
            var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
            this.parent.notify(editOperation, eventArgs);
            var isFormulaEdit = checkIsFormula(eventArgs.editedValue, true);
            if (isFormulaEdit) {
                this.parent.notify(initiateCur, { isCellEdit: e.target.classList.contains('e-spreadsheet-edit') });
            }
        }
    };
    Selection.prototype.isSelected = function (rowIdx, colIdx) {
        var isSelected = false;
        var indexes;
        var ranges = this.parent.getActiveSheet().selectedRange.split(' ');
        for (var i = 0; i < ranges.length; i++) {
            indexes = getSwapRange(getRangeIndexes(ranges[i]));
            if (indexes[0] <= rowIdx && rowIdx <= indexes[2] && indexes[1] <= colIdx && colIdx <= indexes[3]) {
                isSelected = true;
                break;
            }
        }
        return isSelected;
    };
    Selection.prototype.virtualContentLoadedHandler = function (args) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var indexes;
        var isColSelected;
        var isRowSelected;
        sheet.selectedRange.split(' ').forEach(function (rng, idx) {
            indexes = getRangeIndexes(rng);
            isRowSelected = (indexes[1] === 0 && indexes[3] === args.prevRowColCnt.colCount - 1);
            isColSelected = (indexes[0] === 0 && indexes[2] === args.prevRowColCnt.rowCount - 1);
            if (isRowSelected || isColSelected) {
                if (isColSelected && isRowSelected) {
                    indexes = [0, 0, sheet.rowCount - 1, sheet.colCount - 1];
                }
                else if (isColSelected) {
                    indexes = [0, indexes[1], sheet.rowCount - 1, indexes[3]];
                }
                else {
                    indexes = [indexes[0], 0, indexes[2], sheet.colCount - 1];
                }
                if (sheet.frozenRows || sheet.frozenColumns) {
                    _this.selectRangeByIdx(indexes, { type: 'mousedown', ctrlKey: idx !== 0 }, false, false, false, false, undefined, true);
                }
                else {
                    _this.selectRangeByIdx(indexes, null, true, null, null, null, idx);
                }
            }
            else {
                indexes = getRangeIndexes(rng);
                var topIdx = _this.parent.viewport.topIndex + _this.parent.frozenRowCount(sheet);
                var leftIdx = _this.parent.viewport.leftIndex + _this.parent.frozenColCount(sheet);
                _this.highlightHdr(indexes, idx === 0 ? false : true, indexes[0] >= topIdx || indexes[2] >= topIdx, indexes[1] >= leftIdx || indexes[3] >= leftIdx);
            }
        });
    };
    Selection.prototype.clearInterval = function () {
        if (this.scrollInterval) {
            clearInterval(this.scrollInterval);
            this.scrollInterval = null;
        }
    };
    Selection.prototype.getScrollLeft = function () {
        return this.parent.scrollModule ? this.parent.scrollModule.prevScroll.scrollLeft : 0;
    };
    Selection.prototype.cellNavigateHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        if (sheet.isProtected && !sheet.protectSettings.selectCells && !sheet.protectSettings.selectUnLockedCells) {
            return;
        }
        args.type = 'mousedown';
        this.selectRangeByIdx(args.range, args, false, false, false, false, undefined, args.preventAnimation);
    };
    Selection.prototype.getColIdxFromClientX = function (e) {
        var _this = this;
        var width = 0;
        var sheet = this.parent.getActiveSheet();
        var left = 0;
        if (e.isImage) {
            left = e.clientX;
        }
        else {
            var cliRect = document.getElementById(this.parent.element.id + '_sheet').getBoundingClientRect();
            if (this.parent.enableRtl) {
                left = (cliRect.right - this.parent.sheetModule.getRowHeaderWidth(sheet, true, true) - 1) - e.clientX;
            }
            else {
                left = e.clientX - (cliRect.left + this.parent.sheetModule.getRowHeaderWidth(sheet, true, true) + 1);
            }
            left += this.parent.viewport.beforeFreezeWidth;
            var frozenColPosition = function () {
                var frozenCol = _this.parent.element.querySelector('.e-frozen-column');
                return parseInt(frozenCol.style[_this.parent.enableRtl ? 'right' : 'left'], 10) / _this.parent.viewport.scaleX;
            };
            if ((!e.target || (!closest(e.target, '.e-row-header') && !closest(e.target, '.e-selectall-container')) ||
                this.isScrollableArea(e.clientX, e.target, true)) && (!this.parent.frozenColCount(sheet) ||
                left > frozenColPosition() || e.isFScroll)) {
                left += (this.getScrollLeft() / this.parent.viewport.scaleX);
            }
            if (sheet.frozenRows && left < 0 && sheet.showHeaders) {
                return -1;
            }
        }
        var size;
        for (var i = 0;; i++) {
            size = width += getColumnWidth(sheet, i, null, !e.isImage) / this.parent.viewport.scaleX;
            if (left < (e.isImage ? Number(addDPRValue(size).toFixed(2)) : size) ||
                (this.parent.scrollSettings.isFinite && i === sheet.colCount - 1)) {
                if (!e.isImage) {
                    e.size = left;
                }
                e.clientX = i;
                return i;
            }
        }
    };
    Selection.prototype.isScrollableArea = function (offset, target, isclientX) {
        if (!target.classList.contains('e-table')) {
            return false;
        }
        if (isclientX) {
            return offset > this.parent.getMainContent().getBoundingClientRect().left;
        }
        else {
            return offset > this.parent.getMainContent().parentElement.getBoundingClientRect().top;
        }
    };
    Selection.prototype.getRowIdxFromClientY = function (args) {
        var height = 0;
        var sheet = this.parent.getActiveSheet();
        var top = 0;
        if (args.isImage) {
            top = args.clientY;
        }
        else {
            var sheetEle = document.getElementById(this.parent.element.id + '_sheet');
            top = args.clientY + this.parent.viewport.beforeFreezeHeight -
                (sheetEle.getBoundingClientRect().top + (sheet.showHeaders ? 31 / this.parent.viewport.scaleY : 0));
            if (!args.target || !closest(args.target, '.e-header-panel') || this.isScrollableArea(args.clientY, args.target)) {
                top += (this.parent.getMainContent().parentElement.scrollTop / this.parent.viewport.scaleY);
            }
            if (sheet.frozenColumns && top < 0 && sheet.showHeaders) {
                return -1;
            }
        }
        var size;
        for (var i = 0;; i++) {
            size = height += getRowHeight(sheet, i, !args.isImage) / this.parent.viewport.scaleY;
            if (top < (args.isImage ? Number(addDPRValue(size).toFixed(2)) : size) ||
                (this.parent.scrollSettings.isFinite && i === sheet.rowCount - 1)) {
                if (!args.isImage) {
                    args.size = top;
                }
                args.clientY = i;
                return i;
            }
        }
    };
    Selection.prototype.initFormulaReferenceIndicator = function (range) {
        if (this.parent.isEdit) {
            var forRefIndicator = this.parent.createElement('div', { className: 'e-formularef-indicator' });
            forRefIndicator.appendChild(this.parent.createElement('div', { className: 'e-top' }));
            forRefIndicator.appendChild(this.parent.createElement('div', { className: 'e-bottom' }));
            forRefIndicator.appendChild(this.parent.createElement('div', { className: 'e-left' }));
            forRefIndicator.appendChild(this.parent.createElement('div', { className: 'e-right' }));
            this.parent.getMainContent().appendChild(forRefIndicator);
            setPosition(this.parent, forRefIndicator, range, 'e-formularef-indicator');
        }
    };
    Selection.prototype.isMouseEvent = function (e) {
        return isMouseDown(e) || isMouseUp(e) || isMouseMove(e);
    };
    Selection.prototype.selectRangeByIdx = function (range, e, isScrollRefresh, isActCellChanged, isInit, skipChecking, selectedRowColIdx, preventAnimation, isisRowHeightChanged) {
        var _this = this;
        var isMouseEvent = e && this.isMouseEvent(e);
        if (e && e.target && isMouseEvent && closest(e.target, '#' + this.parent.element.id + '_edit')) {
            return;
        }
        var eventArgs = { action: 'getCurrentEditValue', editedValue: '',
            endFormulaRef: false };
        this.parent.notify(editOperation, eventArgs);
        var isFormulaEdit = (this.parent.isEdit ? checkIsFormula(eventArgs.editedValue, true) : false) &&
            !eventArgs.endFormulaRef;
        var isMultiRange = e && e.ctrlKey && isMouseDown(e);
        var ele;
        if (!isMultiRange) {
            ele = this.getSelectionElement(e, selectedRowColIdx);
        }
        var sheet = this.parent.getActiveSheet();
        var topLeftIdx = getRangeIndexes(sheet.topLeftCell);
        var formulaRefIndicator = this.parent.element.querySelector('.e-formularef-indicator');
        var mergeArgs = { range: [].slice.call(range), isActiveCell: false, skipChecking: skipChecking };
        var isMergeRange;
        var rowColSelectArgs = this.isRowColSelected(range);
        if (!rowColSelectArgs.isColSelected && !rowColSelectArgs.isRowSelected) {
            this.parent.notify(mergedRange, mergeArgs);
        }
        if (range !== mergeArgs.range) {
            isMergeRange = true;
        }
        range = mergeArgs.range;
        var promise = new Promise(function (resolve) { resolve((function () { })()); });
        var args = { range: getRangeAddress(range), cancel: false };
        if (sheet.isProtected) {
            var protectCell = getCell(range[2], range[3], sheet);
            if (sheet.protectSettings.selectUnLockedCells && !sheet.protectSettings.selectCells) {
                if (!isNullOrUndefined(protectCell)) {
                    if ((protectCell.isLocked === true || isNullOrUndefined(protectCell.isLocked))) {
                        return;
                    }
                    else {
                        var sheetEle = this.parent.element.getElementsByClassName('e-sheet-panel')[0];
                        if (sheetEle && sheetEle.classList.contains('e-protected')) {
                            sheetEle.classList.remove('e-protected');
                        }
                    }
                }
                else if (!sheet.protectSettings.selectCells) {
                    return;
                }
            }
        }
        this.parent.trigger('beforeSelect', args);
        if (args.cancel) {
            return;
        }
        if (isFormulaEdit && formulaRefIndicator) {
            formulaRefIndicator.parentElement.removeChild(formulaRefIndicator);
        }
        if (!isisRowHeightChanged) {
            this.parent.notify(hideAutoFillOptions, null);
        }
        if ((isSingleCell(range) || mergeArgs.isActiveCell) && !isMultiRange) {
            if (ele) {
                if (!ele.classList.contains('e-multi-range')) {
                    ele.classList.add('e-hide');
                }
                if (sheet.frozenRows || sheet.frozenColumns) {
                    var clsName = isMouseMove(e) ? 'e-cur-selection' : 'e-selection';
                    removeRangeEle(this.parent.getSelectAllContent(), null, clsName, true);
                    removeRangeEle(this.parent.getColumnHeaderContent(), null, clsName, true);
                    removeRangeEle(this.parent.getRowHeaderContent(), null, clsName, true);
                }
            }
            if (!sheet.frozenColumns && !sheet.frozenRows && ele) {
                setPosition(this.parent, ele, range);
            }
            if (isFormulaEdit && e && e.target && (!isMouseEvent || !e.target.classList.contains('e-spreadsheet-edit'))
                && this.parent.isEdit) {
                var addRefArgs = {
                    range: getRangeAddress(range).split(':')[0], isSelect: true
                };
                this.parent.notify(addressHandle, addRefArgs);
                if (addRefArgs.isAlertDlgOpen) {
                    return;
                }
                this.initFormulaReferenceIndicator(range);
            }
        }
        else {
            if (isMultiRange) {
                if (selectedRowColIdx === undefined) {
                    var selRange_1 = getRangeAddress(range);
                    if (sheet.selectedRange.includes(selRange_1) && !isFormulaEdit) {
                        var selRanges = sheet.selectedRange.split(' ');
                        if (selRanges.length > 1) {
                            selRanges.splice(selRanges.indexOf(selRange_1), 1);
                            selRange_1 = selRanges.join(' ');
                        }
                        else {
                            selRange_1 = sheet.activeCell + ':' + sheet.activeCell;
                        }
                        this.selectRange({ address: selRange_1 });
                        return;
                    }
                    else {
                        ele = this.getSelectionElement(e, selectedRowColIdx);
                    }
                }
                else {
                    ele = this.getSelectionElement(e, selectedRowColIdx);
                }
            }
            if (isFormulaEdit && this.parent.isEdit) {
                if (e && e.target && (!isMouseEvent || !e.target.classList.contains('e-spreadsheet-edit')) && this.parent.isEdit) {
                    var addRefArgs = {
                        range: getRangeAddress(range), isSelect: true
                    };
                    this.parent.notify(addressHandle, addRefArgs);
                    if (addRefArgs.isAlertDlgOpen) {
                        return;
                    }
                    this.initFormulaReferenceIndicator(range);
                }
            }
            else {
                var clsName = void 0;
                if (ele) {
                    ele.classList.remove('e-hide');
                    if (sheet.frozenRows || sheet.frozenColumns) {
                        if (e && e.target || isMultiRange) {
                            clsName = 'e-cur-selection';
                            if (isMouseMove(e) && ele.classList.contains('e-cur-selection')) {
                                ele.classList.add('e-hide');
                            }
                            else {
                                ele.classList.add(clsName);
                            }
                        }
                        if (!isMultiRange && (this.isColSelected || this.isRowSelected) && isMouseDown(e)) {
                            removeRangeEle(this.parent.getSelectAllContent(), null, 'e-selection');
                            removeRangeEle(this.parent.getColumnHeaderContent(), null, 'e-selection');
                            removeRangeEle(this.parent.getRowHeaderContent(), null, 'e-selection');
                        }
                    }
                }
                var offset = (this.isColSelected && this.isRowSelected) ? undefined
                    : this.getOffset(range[2], range[3]);
                if (isMergeRange && offset) { // Need to handle half hidden merge cell in better way
                    offset.left = { idx: 0, size: 0 };
                }
                promise = setPosition(this.parent, ele, range, clsName, preventAnimation, isMultiRange, isMultiRange && !e.target) ||
                    promise;
            }
        }
        var eArgs = { action: 'getCurrentEditSheetIdx', sheetIndex: null };
        this.parent.notify(editOperation, eArgs);
        if (sheet.frozenColumns && range[1] > 0 && range[1] === topLeftIdx[1] && range[3] === sheet.colCount - 1) {
            range[1] = 0;
        }
        if (sheet.frozenRows && range[0] > 0 && range[0] === topLeftIdx[0] && range[2] === sheet.rowCount - 1) {
            range[0] = 0;
        }
        var selRange = getRangeAddress(range);
        if (e && e.ctrlKey && (isMouseMove(e) || isMouseUp(e)) && !isFormulaEdit) {
            selRange = sheet.selectedRange.slice(0, sheet.selectedRange.lastIndexOf(' ')) + ' ' + selRange;
        }
        else if (selectedRowColIdx > -1) {
            var selRanges = sheet.selectedRange.split(' ');
            selRanges[selectedRowColIdx] = selRange;
            selRange = selRanges.join(' ');
        }
        if (!isFormulaEdit && !this.isautoFillClicked) {
            var isSelectRangeChange = false;
            if (sheet.selectedRange !== selRange) {
                isSelectRangeChange = true;
            }
            updateSelectedRange(this.parent, selRange, sheet, isMultiRange);
            if (isSelectRangeChange) {
                promise.then(function () {
                    if (_this.parent) {
                        _this.parent.trigger('select', { range: _this.parent.getActiveSheet().selectedRange });
                    }
                });
            }
        }
        else if (!isInit && !this.isautoFillClicked) {
            updateSelectedRange(this.parent, selRange, sheet, isMultiRange);
        }
        rowColSelectArgs = this.isRowColSelected(range);
        this.isRowSelected = rowColSelectArgs.isRowSelected;
        this.isColSelected = rowColSelectArgs.isColSelected;
        this.highlightHdr(range, e && e.ctrlKey);
        if (!isScrollRefresh && !(e && (e.type === 'mousemove' || isTouchMove(e)))) {
            if (!isFormulaEdit) {
                this.updateActiveCell(isActCellChanged ? getRangeIndexes(sheet.activeCell) : range, isInit, preventAnimation);
            }
            else if (eArgs.sheetIndex === this.parent.getActiveSheet().id - 1 && isInit) {
                isActCellChanged = true;
                this.updateActiveCell(isActCellChanged ? getRangeIndexes(sheet.activeCell) : range, isInit, preventAnimation);
            }
            else if (!this.parent.isEdit) {
                this.updateActiveCell(isActCellChanged ? getRangeIndexes(sheet.activeCell) : range, isInit, preventAnimation);
            }
        }
        if (isNullOrUndefined(e)) {
            e = { type: 'mousedown' };
        }
        if (!isFormulaEdit) {
            this.parent.notify(selectionComplete, e);
        }
        else if (!isInit) {
            this.parent.notify(selectionComplete, e);
        }
        if (!isMultiRange && !isDiscontinuousRange(getSelectedRange(this.parent.getActiveSheet()))) {
            this.parent.notify(positionAutoFillElement, { preventAnimation: preventAnimation });
        }
        else {
            this.parent.notify(hideAutoFillElement, null);
        }
        if (this.parent.showAggregate) {
            this.parent.notify(showAggregate, {});
        }
        this.parent.notify(refreshOverlayElem, null);
    };
    Selection.prototype.isRowColSelected = function (indexes) {
        var sheet = this.parent.getActiveSheet();
        return { isRowSelected: indexes[1] === 0 && indexes[3] === sheet.colCount - 1,
            isColSelected: indexes[0] === 0 && indexes[2] === sheet.rowCount - 1 };
    };
    Selection.prototype.updateActiveCell = function (range, isInit, preventAnimation) {
        var sheet = this.parent.getActiveSheet();
        var topLeftIdx = getRangeIndexes(sheet.topLeftCell);
        var rowIdx;
        var colIdx;
        var isMergeRange;
        if (this.isColSelected) {
            rowIdx = topLeftIdx[0];
            colIdx = range[1];
            if (this.isRowSelected) {
                colIdx = topLeftIdx[1];
            }
        }
        else {
            rowIdx = range[0];
            colIdx = range[1];
            if (this.isRowSelected) {
                colIdx = topLeftIdx[1];
            }
        }
        var mergeArgs = { range: [rowIdx, colIdx].concat([rowIdx, colIdx]) };
        this.parent.notify(activeCellMergedRange, mergeArgs);
        if (range !== mergeArgs.range) {
            isMergeRange = true;
        }
        range = mergeArgs.range;
        if (sheet.activeCell !== getCellAddress(range[0], range[1]) || isInit) {
            this.previousActiveCell = sheet.activeCell.indexOf(':') > -1 ? this.previousActiveCell : sheet.activeCell;
            this.parent.setSheetPropertyOnMute(sheet, 'activeCell', getCellAddress(range[0], range[1]));
            if (sheet.isProtected) {
                var element = this.parent.element.querySelector('.e-formula-bar');
                var cell = getCell(range[0], range[1], sheet);
                var isCellLocked = isLocked(cell, getColumn(sheet, range[1]));
                if (isCellLocked && element && !element.disabled) {
                    element.disabled = true;
                }
                else if (!isCellLocked && element && element.disabled) {
                    element.disabled = false;
                }
            }
            if (this.getActiveCell()) {
                var offset = this.getOffset(range[2], range[3]);
                if (isMergeRange) {
                    offset.left = { idx: 0, size: 0 };
                }
                setPosition(this.parent, this.getActiveCell(), range, 'e-active-cell', preventAnimation);
            }
            this.parent.notify(activeCellChanged, null);
        }
        else {
            setPosition(this.parent, this.getActiveCell(), range, 'e-active-cell', preventAnimation);
        }
    };
    Selection.prototype.getOffset = function (rowIdx, colIdx) {
        var offset = { left: { idx: 0, size: 0 }, top: { idx: 0, size: 0 } };
        if (this.parent.scrollModule) {
            if (colIdx >= this.parent.scrollModule.offset.left.idx) {
                offset.left = this.parent.scrollModule.offset.left;
            }
            if (rowIdx >= this.parent.scrollModule.offset.top.idx) {
                offset.top = this.parent.scrollModule.offset.top;
            }
        }
        return offset;
    };
    Selection.prototype.getSelectionElement = function (e, selectedRowColIdx) {
        var sheet = this.parent.getActiveSheet();
        if (e && e.ctrlKey && !this.parent.isEdit) {
            if (isMouseUp(e) || isMouseMove(e)) {
                if (sheet.frozenColumns || sheet.frozenRows) {
                    var ele = this.parent.getMainContent().querySelector('.e-cur-selection');
                    if (ele) {
                        return ele;
                    }
                    else {
                        ele = this.parent.element.querySelector('.e-multi-range');
                        return ele && ele.cloneNode();
                    }
                }
                else {
                    return this.parent.getMainContent().querySelector('.e-selection:last-child');
                }
            }
            else {
                var selElem = this.parent.getMainContent().getElementsByClassName('e-selection')[0];
                var ele = selElem.cloneNode();
                ele.classList.add('e-multi-range');
                if (sheet.frozenColumns || sheet.frozenRows) {
                    if (!sheet.selectedRange.includes(' ')) {
                        selElem.classList.remove('e-hide');
                        setPosition(this.parent, selElem, getSwapRange(getRangeIndexes(sheet.selectedRange)), undefined, false, true);
                    }
                    if (!this.parent.getMainContent().querySelector('.e-multi-range') && selElem.classList.contains('e-hide')) {
                        return selElem;
                    }
                    return ele;
                }
                else {
                    selElem.classList.remove('e-hide');
                    return this.parent.getMainContent().appendChild(ele);
                }
            }
        }
        else if (selectedRowColIdx > -1) {
            return ((sheet.frozenRows || sheet.frozenColumns) ?
                this.parent.element.querySelector('.e-sheet').getElementsByClassName('e-selection')[selectedRowColIdx] :
                this.parent.getMainContent().getElementsByClassName('e-selection')[selectedRowColIdx]);
        }
        else {
            var elems = [].slice.call(this.parent.element.getElementsByClassName('e-multi-range'));
            elems.forEach(function (ele) {
                remove(ele);
            });
            return this.parent.getMainContent().getElementsByClassName('e-selection')[0];
        }
    };
    Selection.prototype.getActiveCell = function () {
        return this.parent.getMainContent().getElementsByClassName('e-active-cell')[0];
    };
    Selection.prototype.getSheetElement = function () {
        return document.getElementById(this.parent.element.id + '_sheet');
    };
    Selection.prototype.highlightHdr = function (range, isMultiRange, isRowRefresh, isColRefresh) {
        var _this = this;
        if (isRowRefresh === void 0) { isRowRefresh = true; }
        if (isColRefresh === void 0) { isColRefresh = true; }
        var sheet = this.parent.getActiveSheet();
        if (sheet.showHeaders) {
            if (!isMultiRange) {
                removeClass(this.getSheetElement().querySelectorAll('.e-highlight'), 'e-highlight');
                removeClass(this.getSheetElement().querySelectorAll('.e-prev-highlight'), 'e-prev-highlight');
            }
            var selectAllEle = this.parent.element.getElementsByClassName('e-select-all-cell')[0];
            if (selectAllEle) {
                removeClass([selectAllEle], ['e-prev-highlight-right', 'e-prev-highlight-bottom']);
            }
            var rowHdr = [];
            var colHdr = [];
            var swapRange_1 = getSwapRange(range);
            if (this.isRowSelected) {
                swapRange_1[1] = skipHiddenIdx(sheet, swapRange_1[1], true, 'columns');
            }
            if (this.isColSelected) {
                swapRange_1[0] = skipHiddenIdx(sheet, swapRange_1[0], true);
            }
            var frozenIdx_1 = [0, 0, 0, 0];
            var indexes_1 = [0, 0, 0, 0];
            var topLeftIndex_1 = getCellIndexes(sheet.topLeftCell);
            var i_1;
            var j_1;
            var updateIndex = function (freezePane, layout, offset) {
                var idx;
                var hiddenCount;
                if (freezePane && swapRange_1[i_1] < freezePane) {
                    topLeftIndex_1[i_1] = skipHiddenIdx(sheet, topLeftIndex_1[i_1], true, layout);
                    var startIdx = skipHiddenIdx(sheet, swapRange_1[i_1], true, layout);
                    if (startIdx === topLeftIndex_1[i_1]) {
                        swapRange_1[i_1] = startIdx;
                    }
                    hiddenCount = _this.parent.hiddenCount(topLeftIndex_1[i_1], swapRange_1[i_1] - 1, layout, sheet);
                    frozenIdx_1[i_1] = swapRange_1[i_1] - hiddenCount - topLeftIndex_1[i_1];
                    idx = swapRange_1[j_1] < freezePane ? swapRange_1[j_1] : freezePane - 1;
                    frozenIdx_1[j_1] = idx - _this.parent.hiddenCount(swapRange_1[i_1], idx, layout, sheet) - hiddenCount -
                        topLeftIndex_1[i_1] + 1;
                    idx = _this.parent.viewport["" + offset] + freezePane;
                    if (swapRange_1[j_1] >= idx) {
                        indexes_1[i_1] = 0;
                        indexes_1[i_1] -= _this.parent.hiddenCount(idx, idx, layout, sheet);
                        indexes_1[j_1] = swapRange_1[j_1] - _this.parent.hiddenCount(idx, swapRange_1[j_1], layout, sheet) - idx + 1;
                    }
                }
                else {
                    idx = skipHiddenIdx(sheet, _this.parent.viewport["" + offset] + freezePane, true, layout);
                    var startIdx = skipHiddenIdx(sheet, swapRange_1[i_1], true, layout);
                    if (idx === startIdx) {
                        swapRange_1[i_1] = idx;
                    }
                    hiddenCount = _this.parent.hiddenCount(idx, swapRange_1[i_1] - 1, layout, sheet);
                    indexes_1[i_1] = swapRange_1[i_1] - hiddenCount - idx;
                    indexes_1[j_1] = swapRange_1[j_1] - _this.parent.hiddenCount(swapRange_1[i_1], swapRange_1[j_1], layout, sheet) - hiddenCount - idx + 1;
                }
            };
            var updateCell_1 = function (idx, parent, hdrArr) {
                var header = [].slice.call(parent.getElementsByClassName('e-header-cell'));
                for (var k = idx[i_1]; k < idx[j_1]; k++) {
                    if (header[k]) {
                        hdrArr.push(header[k]);
                    }
                }
            };
            if (isRowRefresh) {
                i_1 = 0;
                j_1 = 2;
                updateIndex(this.parent.frozenRowCount(sheet), 'rows', 'topIndex');
                if (sheet.frozenRows) {
                    var selectAllBody = this.parent.getSelectAllContent().querySelector('tbody');
                    if (selectAllBody) {
                        updateCell_1(frozenIdx_1, selectAllBody, rowHdr);
                    }
                }
                updateCell_1(indexes_1, this.parent.getRowHeaderContent(), rowHdr);
            }
            if (isColRefresh) {
                i_1 = 1;
                j_1 = 3;
                updateIndex(this.parent.frozenColCount(sheet), 'columns', 'leftIndex');
                if (sheet.frozenColumns) {
                    var selectAllHdr = this.parent.getSelectAllContent().querySelector('thead');
                    if (selectAllHdr) {
                        updateCell_1(frozenIdx_1, selectAllHdr, colHdr);
                    }
                }
                updateCell_1(indexes_1, this.parent.getColumnHeaderContent(), colHdr);
            }
            if (sheet.isProtected && !sheet.protectSettings.selectCells) {
                removeClass([].concat(rowHdr, colHdr), 'e-highlight');
            }
            else {
                addClass([].concat(rowHdr, colHdr), 'e-highlight');
            }
            if (rowHdr.length && rowHdr[0].parentElement.previousElementSibling) {
                rowHdr[0].parentElement.previousElementSibling.classList.add('e-prev-highlight');
            }
            if (colHdr.length && colHdr[0].previousElementSibling) {
                colHdr[0].previousElementSibling.classList.add('e-prev-highlight');
            }
            if (this.isRowSelected && this.isColSelected) {
                if (sheet.isProtected && !sheet.protectSettings.selectCells) {
                    document.getElementById(this.parent.element.id + "_select_all").classList.remove('e-highlight');
                }
                else {
                    document.getElementById(this.parent.element.id + "_select_all").classList.add('e-highlight');
                }
            }
            if (selectAllEle) {
                if (skipHiddenIdx(sheet, swapRange_1[0], true) === skipHiddenIdx(sheet, 0, true)) {
                    selectAllEle.classList.add('e-prev-highlight-bottom');
                }
                if (skipHiddenIdx(sheet, swapRange_1[1], true, 'columns') === skipHiddenIdx(sheet, 0, true, 'columns')) {
                    selectAllEle.classList.add('e-prev-highlight-right');
                }
            }
        }
    };
    Selection.prototype.protectHandler = function () {
        var range = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
        var swapRange = getSwapRange(range);
        var actRange = getCellIndexes(this.parent.getActiveSheet().activeCell);
        var inRange = swapRange[0] <= actRange[0] && swapRange[2] >= actRange[0] && swapRange[1] <= actRange[1]
            && swapRange[3] >= actRange[1];
        this.selectRangeByIdx(range, null, null, inRange);
    };
    Selection.prototype.initiateFormulaSelection = function (args) {
        this.processFormulaEditRange(args.range, args.formulaSheetIdx);
    };
    Selection.prototype.processFormulaEditRange = function (val, formulaStartSheetIdx) {
        var str;
        var formulaSheetIdx = formulaStartSheetIdx;
        var i = 0;
        var eventArgs = { formula: val };
        this.parent.notify(parseFormulaArgument, eventArgs);
        var parsedVal = eventArgs.formulaArr;
        var len = parsedVal.length;
        var ctrlKeyCount = 0;
        var formulaBorder = [['e-vborderright', 'e-vborderbottom'], ['e-pborderright', 'e-pborderbottom'],
            ['e-cborderright', 'e-cborderbottom'], ['e-gborderright', 'e-gborderbottom'], ['e-oborderright', 'e-oborderbottom'],
            ['e-bborderright', 'e-bborderbottom']];
        this.clearBorder();
        var actSheetIdx = this.parent.getActiveSheet().id - 1;
        while (i < len) {
            str = parsedVal[i];
            if (this.invalidOperators.indexOf(str) > -1) {
                break;
            }
            if (isCellReference(str.toUpperCase())) {
                str = str.replace(/\$/g, '');
                if (i > 0) {
                    if (parsedVal[i - 1].lastIndexOf('!') === parsedVal[i - 1].length - 1) {
                        var sheetName = parsedVal[i - 1].substring(1, parsedVal[i - 1].lastIndexOf('!') - 1);
                        formulaSheetIdx = sheetName ? getSheetIndex(this.parent, sheetName) : formulaSheetIdx;
                    }
                }
                if (parsedVal[i + 1] === ':') {
                    i++;
                    if (parsedVal[i + 1] && isCellReference(parsedVal[i + 1].toUpperCase())) {
                        str = str + ':' + parsedVal[i + 1];
                        i++;
                    }
                }
                if (actSheetIdx === formulaSheetIdx) {
                    this.updateFormulaEditRange(str, ctrlKeyCount, formulaBorder);
                }
                formulaSheetIdx = formulaStartSheetIdx;
                ctrlKeyCount++;
            }
            i++;
        }
    };
    Selection.prototype.updateFormulaEditRange = function (str, i, formulaBorder) {
        var indices = getRangeIndexes(str);
        this.formulaRange[i] = str;
        this.dStartCell = { rowIndex: indices[0], colIndex: indices[1] };
        this.dEndCell = { rowIndex: indices[2], colIndex: indices[3] };
        this.focusBorder(this.dStartCell, this.dEndCell, formulaBorder[i % 6]);
    };
    Selection.prototype.chartBorderHandler = function (args) {
        this.focusBorder(args.startcell, args.endcell, args.classes, true);
    };
    Selection.prototype.focusBorder = function (startcell, endcell, classes, isChart) {
        isChart = isNullOrUndefined(isChart) ? false : isChart;
        var sheet = this.parent.getActiveSheet();
        var range = getSwapRange([startcell.rowIndex, startcell.colIndex, endcell.rowIndex, endcell.colIndex]);
        var topLeftIdx = getRangeIndexes(sheet.topLeftCell);
        var hiddenCol = this.parent.hiddenCount(topLeftIdx[1], range[3] - 1, 'columns', sheet);
        if (isChart && hiddenCol > 0) {
            range[1] -= hiddenCol;
            range[3] -= hiddenCol;
        }
        if (sheet.frozenRows || sheet.frozenColumns) {
            var rangeReference = this.parent.createElement('div', {
                className: isChart ? 'e-range-indicator e-chart-range' : 'e-range-indicator e-formuala-range'
            });
            rangeReference.appendChild(this.parent.createElement('div', { className: 'e-top' }));
            rangeReference.appendChild(this.parent.createElement('div', { className: 'e-bottom' }));
            rangeReference.appendChild(this.parent.createElement('div', { className: 'e-left' }));
            rangeReference.appendChild(this.parent.createElement('div', { className: 'e-right' }));
            setPosition(this.parent, rangeReference, range, 'e-range-indicator');
            return;
        }
        var minr = range[0];
        var minc = range[1];
        var maxr = range[2];
        var maxc = range[3];
        if (minr) {
            (this.getEleFromRange([minr - 1, minc, minr - 1, maxc])).forEach(function (td) {
                if (td) {
                    td.classList.add(classes[1]);
                    if (!isChart) {
                        td.classList.add('e-formularef-selection');
                    }
                }
            }); // top
        }
        (this.getEleFromRange([minr, maxc, maxr, maxc])).forEach(function (td) {
            if (td) {
                td.classList.add(classes[0]);
                if (!isChart) {
                    td.classList.add('e-formularef-selection');
                }
            }
        }); // right
        this.getEleFromRange([maxr, minc, maxr, maxc]).forEach(function (td) {
            if (td) {
                td.classList.add(classes[1]);
                if (!isChart) {
                    td.classList.add('e-formularef-selection');
                }
            }
        }); // bottom
        if (minc) {
            (this.getEleFromRange([minr, minc - 1, maxr, minc - 1])).forEach(function (td) {
                if (td) {
                    td.classList.add(classes[0]);
                    if (!isChart) {
                        td.classList.add('e-formularef-selection');
                    }
                }
            }); // left
        }
    };
    Selection.prototype.getEleFromRange = function (range) {
        var startRIndex = range[0];
        var startCIndex = range[1];
        var endRIndex = range[2];
        var endCIndex = range[3];
        var i;
        var rowIdx;
        var temp;
        var tempCells = [];
        var rowCells;
        var cells = [];
        if (startRIndex > endRIndex) {
            temp = startRIndex;
            startRIndex = endRIndex;
            endRIndex = temp;
        }
        if (startCIndex > endCIndex) {
            temp = startCIndex;
            startCIndex = endCIndex;
            endCIndex = temp;
        }
        if (this.parent.scrollSettings.enableVirtualization) {
            for (i = startRIndex; i <= endRIndex; i++) {
                rowIdx = i;
                if (rowIdx > -1) {
                    var row = this.parent.getRow(rowIdx, null);
                    if (row) {
                        rowCells = row.getElementsByClassName('e-cell');
                        tempCells = (endCIndex === startCIndex) ?
                            [rowCells[endCIndex]] : this.getRowCells(rowCells, startCIndex, endCIndex + 1);
                        this.merge(cells, tempCells);
                    }
                }
            }
        }
        return cells;
    };
    Selection.prototype.getRowCells = function (rowCells, startCIndex, endCIndex) {
        var tdCol = [];
        for (startCIndex; startCIndex < endCIndex; startCIndex++) {
            if (rowCells[startCIndex]) {
                tdCol.push(rowCells[startCIndex]);
            }
        }
        return tdCol;
    };
    Selection.prototype.merge = function (first, second) {
        if (!first || !second) {
            return;
        }
        Array.prototype.push.apply(first, second);
    };
    Selection.prototype.clearBorder = function () {
        var sheet = this.parent.getActiveSheet();
        if (sheet.frozenColumns || sheet.frozenRows) {
            var formualIndicator = [].slice.call(this.parent.element.getElementsByClassName('e-formuala-range'));
            formualIndicator.forEach(function (indicator) { detach(indicator); });
            return;
        }
        var borderEleColl = this.parent.element.getElementsByClassName('e-formularef-selection');
        for (var idx = borderEleColl.length - 1; idx >= 0; idx--) {
            var td = borderEleColl[idx];
            var classArr = ['e-vborderright', 'e-vborderbottom', 'e-pborderright', 'e-pborderbottom',
                'e-cborderright', 'e-cborderbottom', 'e-gborderright', 'e-gborderbottom', 'e-oborderright',
                'e-oborderbottom', 'e-bborderright', 'e-bborderbottom', 'e-formularef-selection'];
            for (var idx_1 = 0; idx_1 < classArr.length; idx_1++) {
                td.classList.remove(classArr[idx_1]);
            }
        }
        // for (let idx: number = 0; idx < borderEleColl.length; idx++) {
        //     const td: HTMLElement = borderEleColl[idx] as HTMLElement;
        // }
    };
    /**
     * For internal use only - Get the module name.
     *
     * @private
     * @returns {string} - Get the module name.
     */
    Selection.prototype.getModuleName = function () {
        return 'selection';
    };
    Selection.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    return Selection;
}());

/**
 * The `Scroll` module is used to handle scrolling behavior.
 *
 * @hidden
 */
var Scroll = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet scroll module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet scroll module.
     * @private
     */
    function Scroll(parent) {
        this.clientX = 0;
        /** @hidden */
        this.isKeyScroll = true;
        this.parent = parent;
        this.addEventListener();
        this.initProps();
    }
    Scroll.prototype.onContentScroll = function (e) {
        if (!this.parent) {
            return;
        }
        var target = this.parent.getMainContent().parentElement;
        var scrollLeft = e.scrollLeft;
        var top = e.scrollTop || target.scrollTop;
        var left = scrollLeft && this.parent.enableRtl ? this.initScrollValue - scrollLeft : scrollLeft;
        var scrollArgs;
        var prevSize;
        if (this.parent.allowAutoFill) {
            var elem = document.querySelector('#' + this.parent.element.id + '_autofilloptionbtn-popup');
            var DDBElem = document.querySelector('#' + this.parent.element.id + '_autofilloptionbtn');
            if (elem) {
                var DDBObj = getComponent(DDBElem, 'dropdown-btn');
                DDBObj.toggle();
            }
        }
        if (!isNullOrUndefined(scrollLeft) && this.prevScroll.scrollLeft !== left) {
            var scrollRight = left > this.prevScroll.scrollLeft;
            prevSize = this.offset.left.size;
            this.offset.left = this.getColOffset(left, scrollRight, e.skipHidden);
            if (!e.preventScroll) {
                this.parent.getColumnHeaderContent().scrollLeft = scrollLeft;
                this.parent.getMainContent().scrollLeft = scrollLeft;
                e.scrollLeft = scrollLeft;
            }
            scrollArgs = {
                cur: this.offset.left, prev: { idx: this.leftIndex, size: prevSize }, increase: scrollRight, preventScroll: e.preventScroll
            };
            this.updateTopLeftCell(scrollRight, true);
            this.parent.notify(focusRenameInput, null);
            this.parent.notify(onHorizontalScroll, scrollArgs);
            this.updateNoteContainer();
            if (!this.parent.scrollSettings.enableVirtualization && scrollRight && !this.parent.scrollSettings.isFinite) {
                this.updateNonVirtualCols();
            }
            this.leftIndex = scrollArgs.prev.idx;
            this.prevScroll.scrollLeft = left;
        }
        if (Math.round(this.prevScroll.scrollTop) !== Math.round(top)) {
            if (e.skipRowVirualScroll) {
                this.prevScroll.scrollTop = 0;
                this.offset.top = { idx: 0, size: 0 };
            }
            var scrollDown = top > this.prevScroll.scrollTop;
            prevSize = this.offset.top.size;
            this.offset.top = this.getRowOffset(top, scrollDown);
            scrollArgs = {
                cur: this.offset.top, prev: { idx: this.topIndex, size: prevSize }, increase: scrollDown, preventScroll: e.preventScroll
            };
            this.updateTopLeftCell(scrollDown);
            if (e.preventScroll && this.offset.top.idx <= this.parent.getThreshold('row')) {
                this.offset.top = { idx: 0, size: 0 };
            }
            else if (!e.skipRowVirualScroll) {
                this.parent.notify(focusRenameInput, null);
                this.parent.notify(onVerticalScroll, scrollArgs);
                this.updateNoteContainer();
            }
            else {
                scrollArgs.prev.idx = scrollArgs.cur.idx;
            }
            if (!this.parent.scrollSettings.enableVirtualization && scrollDown && !this.parent.scrollSettings.isFinite) {
                this.updateNonVirtualRows();
            }
            this.topIndex = scrollArgs.prev.idx;
            this.prevScroll.scrollTop = top;
        }
        var isEdit = false;
        var args = { isEdit: isEdit };
        this.parent.notify(isFormulaBarEdit, args);
        if (args.isEdit) {
            var textArea = this.parent.element.querySelector('.e-formula-bar');
            textArea.focus();
        }
        this.isKeyScroll = true;
    };
    Scroll.prototype.updateNoteContainer = function () {
        if (document.getElementsByClassName('e-addNoteContainer') && document.getElementsByClassName('e-addNoteContainer').length > 0) {
            this.parent.notify(updateNoteContainer, null);
        }
    };
    Scroll.prototype.updateScrollValue = function (args) {
        if (args.scrollLeft !== undefined) {
            this.prevScroll.scrollLeft = args.scrollLeft + (this.prevScroll.scrollLeft - this.offset.left.size);
            this.offset.left.size = args.scrollLeft;
        }
        if (args.scrollTop !== undefined) {
            this.prevScroll.scrollTop = args.scrollTop + (this.prevScroll.scrollTop - this.offset.top.size);
            this.offset.top.size = args.scrollTop;
        }
    };
    Scroll.prototype.updateNonVirtualRows = function () {
        var sheet = this.parent.getActiveSheet();
        var threshold = this.parent.getThreshold('row');
        if (this.offset.top.idx > sheet.rowCount - (this.parent.viewport.rowCount + threshold)) {
            this.parent.renderModule.refreshUI({ rowIndex: sheet.rowCount, colIndex: 0, direction: 'first', refresh: 'RowPart' }, getCellAddress(sheet.rowCount, 0) + ":" + getCellAddress(sheet.rowCount + threshold - 1, sheet.colCount - 1));
            this.parent.setSheetPropertyOnMute(sheet, 'rowCount', sheet.rowCount + threshold);
            this.parent.viewport.bottomIndex = sheet.rowCount - 1;
        }
    };
    Scroll.prototype.updateNonVirtualCols = function () {
        var sheet = this.parent.getActiveSheet();
        var threshold = this.parent.getThreshold('col');
        if (this.offset.left.idx > sheet.colCount - (this.parent.viewport.colCount + threshold)) {
            this.parent.renderModule.refreshUI({ rowIndex: 0, colIndex: sheet.colCount, direction: 'first', refresh: 'ColumnPart' }, getCellAddress(0, sheet.colCount) + ":" + getCellAddress(sheet.rowCount - 1, sheet.colCount + threshold - 1));
            this.parent.setSheetPropertyOnMute(sheet, 'colCount', sheet.colCount + threshold);
            this.parent.viewport.rightIndex = sheet.colCount - 1;
        }
    };
    Scroll.prototype.updateTopLeftCell = function (increase, isLeft) {
        var sheet = this.parent.getActiveSheet();
        var top = this.offset.top.idx;
        var left = this.offset.left.idx;
        if (!increase) {
            var frozenRow = this.parent.frozenRowCount(sheet);
            top = skipHiddenIdx(sheet, top + frozenRow, true) - frozenRow;
            var frozenCol = this.parent.frozenColCount(sheet);
            left = skipHiddenIdx(sheet, left + frozenCol, true, 'columns') - frozenCol;
        }
        if (isLeft) {
            this.parent.updateTopLeftCell(null, left, 'row');
        }
        else {
            this.parent.updateTopLeftCell(top, null, 'col');
        }
    };
    Scroll.prototype.getRowOffset = function (scrollTop, scrollDown) {
        var temp = this.offset.top.size;
        var sheet = this.parent.getActiveSheet();
        var i = scrollDown ? this.offset.top.idx + 1 : (this.offset.top.idx ? this.offset.top.idx - 1 : 0);
        var frozenRow = this.parent.frozenRowCount(sheet);
        var count = this.parent.scrollSettings.isFinite ? sheet.rowCount : Infinity;
        scrollTop = Math.round(scrollTop);
        while (i < count) {
            if (scrollDown) {
                var rowHeight = getRowHeight(sheet, i - 1 + frozenRow, true);
                temp += rowHeight;
                if (Math.abs(Math.round(temp) - scrollTop) <= 1) { // <=1 -> For other resolution scrollTop value slightly various with row height
                    return { idx: skipHiddenIdx(sheet, i + frozenRow, true) - frozenRow, size: temp };
                }
                if (Math.round(temp) > scrollTop) {
                    return { idx: i - 1, size: temp - rowHeight };
                }
                i++;
            }
            else {
                var rowHeight = getRowHeight(sheet, i + frozenRow, true);
                temp -= rowHeight;
                if (temp <= 0) {
                    return { idx: 0, size: 0 };
                }
                if (Math.abs(Math.round(temp) - scrollTop) <= 1) {
                    return { idx: i, size: temp };
                }
                if (Math.round(temp) < scrollTop) {
                    temp += rowHeight;
                    if (Math.round(temp) > scrollTop) {
                        return { idx: i, size: temp - rowHeight < 0 ? 0 : temp - rowHeight };
                    }
                    else {
                        return { idx: skipHiddenIdx(sheet, i + 1 + frozenRow, true) - frozenRow, size: temp };
                    }
                }
                i--;
            }
        }
        return { idx: this.offset.top.idx, size: this.offset.top.size };
    };
    Scroll.prototype.getColOffset = function (scrollLeft, increase, skipHidden) {
        var temp = this.offset.left.size;
        var sheet = this.parent.getActiveSheet();
        var i = increase ? this.offset.left.idx + 1 : (this.offset.left.idx ? this.offset.left.idx - 1 : 0);
        var frozenCol = this.parent.frozenColCount(sheet);
        var count = this.parent.scrollSettings.isFinite ? sheet.colCount : Infinity;
        while (i < count) {
            if (increase) {
                var colWidth = getColumnWidth(sheet, i - 1 + frozenCol, skipHidden, true);
                temp += colWidth;
                if (Math.abs(Math.round(temp) - scrollLeft) <= 1) {
                    return { idx: skipHiddenIdx(sheet, i + frozenCol, true, 'columns') - frozenCol, size: temp };
                }
                if (Math.round(temp) > scrollLeft) {
                    return { idx: i - 1, size: temp - colWidth };
                }
                i++;
            }
            else {
                var colWidth = getColumnWidth(sheet, i + frozenCol, skipHidden, true);
                temp -= colWidth;
                if (temp <= 0) {
                    return { idx: 0, size: 0 };
                }
                if (Math.abs(Math.round(temp) - scrollLeft) <= 1) {
                    return { idx: i, size: temp };
                }
                if (Math.round(temp) < scrollLeft) {
                    temp += colWidth;
                    if (Math.round(temp) > scrollLeft) {
                        temp = temp - colWidth;
                        return { idx: i, size: temp < 0 ? 0 : temp };
                    }
                    else {
                        return { idx: skipHiddenIdx(sheet, i + 1 + frozenCol, true, 'columns') - frozenCol, size: temp };
                    }
                }
                i--;
            }
        }
        return { idx: this.offset.left.idx, size: this.offset.left.size };
    };
    Scroll.prototype.contentLoaded = function (args) {
        if (!this.parent.scrollSettings.enableVirtualization) {
            var scrollTrack = this.parent.createElement('div', { className: 'e-virtualtrack' });
            this.updateNonVirualScrollWidth({ scrollTrack: scrollTrack });
            this.parent.getScrollElement().appendChild(scrollTrack);
        }
        if (args.left) {
            this.parent.getScrollElement().scrollLeft = args.left;
        }
        this.setScrollEvent();
        if (this.parent.enableRtl) {
            this.initScrollValue = this.parent.getScrollElement().scrollLeft;
        }
    };
    Scroll.prototype.updateNonVirualScrollWidth = function (args) {
        if (!args.scrollTrack) {
            args.scrollTrack = this.parent.getScrollElement().getElementsByClassName('e-virtualtrack')[0];
        }
        args.scrollTrack.style.width = Math.abs(this.parent.getContentTable().getBoundingClientRect().width +
            (this.parent.scrollSettings.isFinite ? this.parent.sheetModule.getScrollSize() : 0)) + "px";
    };
    Scroll.prototype.onHeaderWheel = function (e) {
        e.preventDefault();
        this.parent.getMainContent().parentElement.scrollTop += e.deltaY;
        this.parent.getScrollElement().scrollLeft += e.deltaX;
    };
    Scroll.prototype.onContentWheel = function (e) {
        if (e.deltaX !== 0) {
            e.preventDefault();
            this.parent.getScrollElement().scrollLeft += e.deltaX;
        }
    };
    Scroll.prototype.scrollHandler = function (e) {
        this.onContentScroll({ scrollLeft: e.target.scrollLeft });
    };
    Scroll.prototype.updateScroll = function (args) {
        if (isNullOrUndefined(args.left)) {
            this.parent.sheetModule.contentPanel.scrollTop = args.top;
        }
        else {
            this.parent.getScrollElement().scrollLeft = args.left;
        }
    };
    Scroll.prototype.setScrollEvent = function () {
        EventHandler.add(this.parent.sheetModule.contentPanel, 'scroll', this.onContentScroll, this);
        EventHandler.add(this.parent.getColumnHeaderContent(), 'wheel', this.onHeaderWheel, this);
        EventHandler.add(this.parent.getSelectAllContent(), 'wheel', this.onHeaderWheel, this);
        EventHandler.add(this.parent.getMainContent(), 'wheel', this.onContentWheel, this);
        EventHandler.add(this.parent.getRowHeaderContent(), 'wheel', this.onContentWheel, this);
        EventHandler.add(this.parent.getScrollElement(), 'scroll', this.scrollHandler, this);
    };
    Scroll.prototype.initProps = function () {
        this.topIndex = 0;
        this.leftIndex = 0;
        this.prevScroll = { scrollLeft: 0, scrollTop: 0 };
        this.offset = { left: { idx: 0, size: 0 }, top: { idx: 0, size: 0 } };
    };
    /**
     * @hidden
     *
     * @param {boolean} isRtlChange - Specifies RtlChange or not.
     * @returns {void} - To Set padding
     */
    Scroll.prototype.setPadding = function (isRtlChange) {
        this.parent.sheetModule.contentPanel.style.overflowY = 'scroll';
        var scrollWidth = getScrollBarWidth();
        if (scrollWidth > 0) {
            var colHeader = this.parent.getColumnHeaderContent();
            var cssProps = this.parent.enableRtl ? { margin: 'marginLeft', border: 'borderLeftWidth' }
                : { margin: 'marginRight', border: 'borderRightWidth' };
            colHeader.parentElement.style[cssProps.margin] = scrollWidth + 'px';
            colHeader.style[cssProps.border] = '1px';
        }
        if (isRtlChange) {
            this.initScrollValue = 0;
        }
    };
    Scroll.prototype.setClientX = function (e) {
        if (e.type === 'mousedown' || e.pointerType === 'mouse') {
            return;
        }
        var args = { touchSelectionStarted: false };
        this.parent.notify(selectionStatus, args);
        if (args.touchSelectionStarted || args.isOverlayClicked) {
            return;
        }
        this.clientX = this.getPointX(e);
        var sheetContent = document.getElementById(this.parent.element.id + '_sheet');
        EventHandler.add(sheetContent, Browser.isPointer ? 'pointermove' : 'touchmove', this.onTouchScroll, this);
        EventHandler.add(sheetContent, Browser.isPointer ? 'pointerup' : 'touchend', this.pointerUpHandler, this);
    };
    Scroll.prototype.getPointX = function (e) {
        var clientX = 0;
        if (e.touches && e.touches.length) {
            clientX = e.touches[0].clientX;
        }
        else {
            clientX = e.clientX;
        }
        return clientX;
    };
    Scroll.prototype.onTouchScroll = function (e) {
        if (e.pointerType === 'mouse') {
            return;
        }
        var clientX = this.getPointX(e);
        var diff = this.clientX - clientX;
        var scroller = this.parent.element.getElementsByClassName('e-scroller')[0];
        if ((diff > 10 || diff < -10) && scroller.scrollLeft + diff >= 0) {
            e.preventDefault();
            this.clientX = clientX;
            getUpdateUsingRaf(function () { scroller.scrollLeft += diff; });
        }
    };
    Scroll.prototype.pointerUpHandler = function () {
        var sheetContent = document.getElementById(this.parent.element.id + '_sheet');
        EventHandler.remove(sheetContent, Browser.isPointer ? 'pointermove' : 'touchmove', this.onTouchScroll);
        EventHandler.remove(sheetContent, Browser.isPointer ? 'pointerup' : 'touchend', this.pointerUpHandler);
    };
    Scroll.prototype.addEventListener = function () {
        this.parent.on(contentLoaded, this.contentLoaded, this);
        this.parent.on(onContentScroll, this.onContentScroll, this);
        this.parent.on(updateScroll, this.updateScroll, this);
        this.parent.on(deInitProperties, this.initProps, this);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
        this.parent.on(mouseDown, this.setClientX, this);
        this.parent.on(updateScrollValue, this.updateScrollValue, this);
        if (!this.parent.scrollSettings.enableVirtualization) {
            this.parent.on(virtualContentLoaded, this.updateNonVirualScrollWidth, this);
            this.parent.on(colWidthChanged, this.updateNonVirualScrollWidth, this);
        }
    };
    Scroll.prototype.destroy = function () {
        this.removeEventListener();
        var ddbEle = document.querySelector('#' + this.parent.element.id + '_autofilloptionbtn');
        if (ddbEle) {
            var ddbObj = getComponent(ddbEle, 'dropdown-btn');
            if (ddbObj) {
                ddbObj.destroy();
            }
        }
        this.parent = null;
    };
    Scroll.prototype.removeEventListener = function () {
        this.parent.off(contentLoaded, this.contentLoaded);
        this.parent.off(onContentScroll, this.onContentScroll);
        this.parent.off(updateScroll, this.updateScroll);
        this.parent.off(deInitProperties, this.initProps);
        this.parent.off(spreadsheetDestroyed, this.destroy);
        this.parent.off(mouseDown, this.setClientX);
        this.parent.off(updateScrollValue, this.updateScrollValue);
        if (!this.parent.scrollSettings.enableVirtualization) {
            this.parent.off(virtualContentLoaded, this.updateNonVirualScrollWidth);
            this.parent.off(colWidthChanged, this.updateNonVirualScrollWidth);
        }
    };
    return Scroll;
}());

/**
 * VirtualScroll module
 *
 * @hidden
 */
var VirtualScroll = /** @class */ (function () {
    function VirtualScroll(parent) {
        this.scroll = [];
        this.parent = parent;
        this.addEventListener();
    }
    VirtualScroll.prototype.createVirtualElement = function (args) {
        var sheet = this.parent.getActiveSheet();
        var container = this.parent.getMainContent();
        this.content = this.parent.createElement('div', { className: 'e-virtualable' });
        this.content.appendChild(container.querySelector('.e-table'));
        container.appendChild(this.content);
        var vTrack = container.appendChild(this.parent.createElement('div', { className: 'e-virtualtrack' }));
        var height = 0;
        var width;
        if (this.parent.sheets.length > this.scroll.length) {
            this.initScroll();
        }
        var endIndex = this.parent.viewport.bottomIndex;
        if (sheet.rowCount > endIndex + 1 || sheet.usedRange.rowIndex > endIndex) {
            if (!this.parent.scrollSettings.isFinite && sheet.rowCount <= sheet.usedRange.rowIndex) {
                this.parent.setSheetPropertyOnMute(sheet, 'rowCount', sheet.usedRange.rowIndex + 1);
            }
            this.setScrollCount(sheet.rowCount, 'row');
        }
        else {
            if (!this.parent.scrollSettings.isFinite) {
                this.parent.setSheetPropertyOnMute(sheet, 'rowCount', endIndex + 1);
            }
            this.scroll[this.parent.activeSheetIndex].rowCount = sheet.rowCount;
        }
        var startIndex = this.parent.frozenRowCount(sheet);
        var indexes = getCellIndexes(sheet.topLeftCell);
        if (args.top) {
            height = args.top;
            if (sheet.frozenRows) {
                height += getRowsHeight(sheet, indexes[0], startIndex - 1, true);
            }
            startIndex = getCellIndexes(sheet.paneTopLeftCell)[0];
        }
        height += getRowsHeight(sheet, startIndex, this.scroll[this.parent.activeSheetIndex].rowCount - 1, true);
        endIndex = this.parent.viewport.rightIndex;
        var size = 0;
        var frozenCol = this.parent.frozenColCount(sheet);
        if (args.left) {
            size = args.left;
            if (frozenCol) {
                size += getColumnsWidth(sheet, indexes[1], frozenCol - 1, true);
            }
            startIndex = getCellIndexes(sheet.paneTopLeftCell)[1];
        }
        else {
            startIndex = frozenCol;
        }
        if (sheet.colCount > endIndex + 1 || sheet.usedRange.colIndex > endIndex) {
            if (!this.parent.scrollSettings.isFinite && sheet.colCount <= sheet.usedRange.colIndex) {
                this.parent.setSheetPropertyOnMute(sheet, 'colCount', sheet.usedRange.colIndex + 1);
            }
            size += getColumnsWidth(sheet, startIndex, endIndex, true);
            this.setScrollCount(sheet.colCount, 'col');
            width = size + getColumnsWidth(sheet, endIndex + 1, this.scroll[this.parent.activeSheetIndex].colCount - 1, true);
        }
        else {
            if (!this.parent.scrollSettings.isFinite) {
                this.parent.setSheetPropertyOnMute(sheet, 'colCount', endIndex + 1);
            }
            size += getColumnsWidth(sheet, startIndex, sheet.colCount - 1, true);
            this.scroll[this.parent.activeSheetIndex].colCount = sheet.colCount;
            width = size;
        }
        if (isNullOrUndefined(this.parent.viewport.leftIndex)) {
            this.parent.viewport.leftIndex = 0;
        }
        if (isNullOrUndefined(this.parent.viewport.topIndex)) {
            this.parent.viewport.topIndex = 0;
        }
        if (args.left) {
            size = getColumnsWidth(sheet, this.parent.viewport.leftIndex + frozenCol, endIndex, true);
        }
        if (isNullOrUndefined(this.translateX)) {
            this.translateX = 0;
        }
        if (isNullOrUndefined(this.translateY)) {
            this.translateY = 0;
        }
        container = this.parent.getRowHeaderContent();
        this.rowHeader = this.content.cloneNode();
        this.rowHeader.appendChild(container.querySelector('.e-table'));
        container.appendChild(this.rowHeader);
        var rowVTrack = container.appendChild(vTrack.cloneNode());
        this.rowHeader.style.transform = "translate(0px, " + this.translateY + "px)";
        container = this.parent.getColumnHeaderContent();
        this.colHeader = this.content.cloneNode();
        this.colHeader.appendChild(container.querySelector('.e-table'));
        container.appendChild(this.colHeader);
        var colVTrack = container.appendChild(vTrack.cloneNode());
        this.colHeader.style.width = size + "px";
        rowVTrack.style.height = height + "px";
        colVTrack.style.width = width + "px";
        this.colHeader.style.transform = "translate(" + this.translateX + "px, 0px)";
        this.content.style.transform = "translate(" + this.translateX + "px, " + this.translateY + "px)";
        this.content.style.width = size + "px";
        vTrack.style.height = height + "px";
        vTrack.style.width = width + "px";
        if (this.parent.allowScrolling) {
            var scrollVTrack = colVTrack.cloneNode(true);
            scrollVTrack.style.width = width + (this.parent.scrollSettings.isFinite ? this.parent.sheetModule.getScrollSize() : 0) + "px";
            this.parent.getScrollElement().appendChild(scrollVTrack);
        }
    };
    VirtualScroll.prototype.initScroll = function () {
        var i = 0;
        while (i < this.parent.sheets.length) {
            if (!this.scroll[i]) {
                this.scroll.push({ rowCount: 0, colCount: 0 });
            }
            i++;
        }
    };
    VirtualScroll.prototype.setScrollCount = function (count, layout) {
        var activeSheetIdx = this.parent.activeSheetIndex;
        if (!this.scroll[activeSheetIdx][layout + 'Count'] || this.scroll[activeSheetIdx][layout + 'Count'] !== count) {
            this.scroll[activeSheetIdx][layout + 'Count'] = count;
        }
    };
    VirtualScroll.prototype.getRowAddress = function (indexes) {
        var sheet = this.parent.getActiveSheet();
        return getRangeAddress([indexes[0], sheet.frozenColumns ? getCellIndexes(sheet.topLeftCell)[1] : this.parent.viewport.leftIndex,
            indexes[1], this.parent.viewport.rightIndex]);
    };
    VirtualScroll.prototype.getColAddress = function (indexes) {
        var sheet = this.parent.getActiveSheet();
        return getRangeAddress([sheet.frozenRows ? getCellIndexes(sheet.topLeftCell)[0] : this.parent.viewport.topIndex, indexes[0],
            this.parent.viewport.bottomIndex, indexes[1]]);
    };
    VirtualScroll.prototype.updateScrollCount = function (idx, layout, threshold) {
        if (threshold === void 0) { threshold = idx; }
        var sheet = this.parent.getActiveSheet();
        var rowCount = idx + this.parent.viewport[layout + 'Count'] + 1 + threshold;
        var usedRangeCount = this.scroll[this.parent.activeSheetIndex][layout + 'Count'];
        if (rowCount < usedRangeCount) {
            if (sheet[layout + 'Count'] === usedRangeCount) {
                return;
            }
            rowCount = usedRangeCount;
        }
        if (!this.parent.scrollSettings.isFinite) {
            this.parent.setSheetPropertyOnMute(sheet, layout + 'Count', rowCount);
        }
    };
    VirtualScroll.prototype.onVerticalScroll = function (args) {
        var idx = args.cur.idx;
        var height = args.cur.size;
        var prevIdx = args.prev.idx;
        var idxDiff = Math.abs(idx - prevIdx);
        var threshold = this.parent.getThreshold('row');
        if (idxDiff > Math.round(threshold / 2)) {
            var startIdx = void 0;
            var lastIdx = void 0;
            var prevTopIdx = void 0;
            var sheet = this.parent.getActiveSheet();
            if (idx <= threshold) {
                if (!args.increase) {
                    if (this.translateY && prevIdx > threshold) {
                        this.translateY = 0;
                        var frozenCol = this.parent.frozenColCount(sheet);
                        var frozenRow = this.parent.frozenRowCount(sheet);
                        if (!args.preventScroll) {
                            var colIndex = frozenCol ? getCellIndexes(sheet.topLeftCell)[1] : this.parent.viewport.leftIndex;
                            var fIndexes = frozenCol ? [frozenRow, this.parent.viewport.leftIndex + frozenCol] : [];
                            if (idxDiff < this.parent.viewport.rowCount + threshold) {
                                startIdx = skipHiddenIdx(sheet, frozenRow, true);
                                lastIdx = skipHiddenIdx(sheet, (this.parent.viewport.topIndex + frozenRow) - 1, false);
                                this.parent.viewport.topIndex = startIdx - frozenRow;
                                var btmIdx = this.skipHiddenLastIdx(this.parent.viewport.bottomIndex - (((lastIdx - startIdx) + 1) - this.hiddenCount(startIdx, lastIdx)), this.parent.viewport.bottomIndex);
                                this.parent.viewport.bottomIndex = skipHiddenIdx(sheet, btmIdx, false);
                                this.parent.renderModule.refreshUI({
                                    colIndex: colIndex, rowIndex: startIdx, direction: 'last', refresh: 'RowPart',
                                    skipUpdateOnFirst: true, frozenIndexes: fIndexes
                                }, this.getRowAddress([startIdx, skipHiddenIdx(sheet, lastIdx, false)]));
                            }
                            else {
                                var prevColIndex = this.parent.viewport.leftIndex;
                                this.parent.renderModule.refreshUI({ rowIndex: 0, colIndex: colIndex, refresh: 'Row', skipUpdateOnFirst: true,
                                    frozenIndexes: fIndexes, skipTranslate: true });
                                if (frozenCol) {
                                    this.parent.viewport.leftIndex = prevColIndex;
                                }
                                this.translate({ refresh: 'Row' });
                            }
                            focus(this.parent.element);
                            idx = 0;
                        }
                        else {
                            this.parent.viewport.topIndex = prevIdx - (threshold - frozenRow);
                        }
                    }
                    this.updateScrollCount(threshold, 'row');
                }
            }
            if (prevIdx < threshold) {
                idxDiff = Math.abs(idx - threshold);
            }
            if (!args.increase && this.parent.scrollSettings.isFinite && this.parent.viewport.bottomIndex ===
                skipHiddenIdx(sheet, sheet.rowCount - 1, false)) {
                var frozenRow = this.parent.frozenRowCount(sheet);
                var thresholdIdx = this.parent.viewport.topIndex + frozenRow + getRangeIndexes(sheet.paneTopLeftCell)[0] - 1;
                if (idx + frozenRow > thresholdIdx) {
                    args.prev.idx = idx;
                    return;
                }
                idxDiff = thresholdIdx - (idx + frozenRow);
            }
            if (idx > threshold) {
                prevTopIdx = this.parent.viewport.topIndex;
                this.parent.viewport.topIndex = idx - threshold;
                if (args.increase && prevTopIdx > this.parent.viewport.topIndex) {
                    this.parent.viewport.topIndex = prevTopIdx;
                    return;
                }
                var frozenRow = this.parent.frozenRowCount(sheet);
                if (!args.preventScroll) {
                    var frozenCol = this.parent.frozenColCount(sheet);
                    var colIndex = void 0;
                    var frozenIndexes = [];
                    if (frozenCol) {
                        colIndex = getCellIndexes(sheet.topLeftCell)[1];
                        frozenIndexes.push(frozenRow);
                        frozenIndexes.push(this.parent.viewport.leftIndex + frozenCol);
                    }
                    else {
                        colIndex = this.parent.viewport.leftIndex;
                    }
                    if (idxDiff < this.parent.viewport.rowCount + threshold) {
                        if (args.increase) {
                            startIdx = this.parent.viewport.bottomIndex + 1;
                            lastIdx = this.parent.viewport.bottomIndex + (this.parent.viewport.topIndex - prevTopIdx);
                            lastIdx -= this.hiddenCount(prevTopIdx + frozenRow, this.parent.viewport.topIndex - 1 + frozenRow);
                            if (lastIdx <= this.parent.viewport.bottomIndex || (this.parent.scrollSettings.isFinite &&
                                startIdx > skipHiddenIdx(sheet, sheet.rowCount - 1, false, 'rows'))) {
                                this.parent.viewport.topIndex = prevTopIdx;
                                return;
                            }
                            var indexes = this.parent.skipHidden(startIdx, lastIdx, 'rows', false);
                            var finiteProps = this.checkLastIdx(indexes[1], 'row');
                            startIdx = indexes[0];
                            lastIdx = finiteProps.index;
                            var topIdx = this.parent.viewport.topIndex + frozenRow;
                            if (finiteProps.diff) {
                                var diffCount = ((lastIdx - startIdx) + 1) - this.hiddenCount(startIdx, lastIdx);
                                topIdx = skipHiddenIdx(sheet, prevTopIdx, true, 'rows', diffCount) + frozenRow;
                            }
                            this.parent.viewport.topIndex = skipHiddenIdx(sheet, topIdx, !finiteProps.diff) - frozenRow;
                            this.setThresholdHeight(height, idx - this.parent.viewport.topIndex, frozenRow, !!finiteProps.diff, prevTopIdx === skipHiddenIdx(sheet, frozenRow, true));
                            this.parent.viewport.bottomIndex = lastIdx;
                            this.parent.renderModule.refreshUI({ colIndex: colIndex, rowIndex: startIdx, direction: 'first', refresh: 'RowPart',
                                frozenIndexes: frozenIndexes }, this.getRowAddress([startIdx, lastIdx]));
                        }
                        else {
                            startIdx = skipHiddenIdx(sheet, this.parent.viewport.topIndex + frozenRow, false);
                            if (startIdx < frozenRow) {
                                startIdx = frozenRow;
                                startIdx = skipHiddenIdx(sheet, startIdx, true);
                            }
                            this.parent.viewport.topIndex = startIdx - frozenRow;
                            lastIdx = skipHiddenIdx(sheet, (prevTopIdx + frozenRow) - 1, false);
                            if (lastIdx < frozenRow || lastIdx < startIdx) {
                                this.parent.viewport.topIndex = prevTopIdx;
                                return;
                            }
                            var btmIdx = this.skipHiddenLastIdx(this.parent.viewport.bottomIndex - (((lastIdx - startIdx) + 1) - this.hiddenCount(startIdx, lastIdx)), this.parent.viewport.bottomIndex);
                            this.parent.viewport.bottomIndex = skipHiddenIdx(sheet, btmIdx, false);
                            this.setThresholdHeight(height, idx - this.parent.viewport.topIndex, frozenRow);
                            this.parent.renderModule.refreshUI({ colIndex: colIndex, rowIndex: startIdx, direction: 'last', refresh: 'RowPart',
                                frozenIndexes: frozenIndexes }, this.getRowAddress([startIdx, lastIdx]));
                        }
                    }
                    else {
                        prevTopIdx = this.parent.viewport.leftIndex;
                        this.parent.viewport.topIndex = skipHiddenIdx(sheet, this.parent.viewport.topIndex + frozenRow, false) - frozenRow;
                        if (this.parent.viewport.topIndex < 0) {
                            this.parent.viewport.topIndex = skipHiddenIdx(sheet, frozenRow, true) - frozenRow;
                        }
                        this.parent.renderModule.refreshUI({
                            rowIndex: this.parent.viewport.topIndex, colIndex: colIndex, refresh: 'Row',
                            frozenIndexes: frozenIndexes, skipTranslate: true
                        });
                        if (frozenCol) {
                            this.parent.viewport.leftIndex = prevTopIdx;
                        }
                        this.setThresholdHeight(height, idx - this.parent.viewport.topIndex, frozenRow, this.parent.scrollSettings.isFinite && this.parent.viewport.bottomIndex ===
                            skipHiddenIdx(sheet, sheet.rowCount - 1, false));
                        this.translate({ refresh: 'Row' });
                    }
                    this.updateScrollCount(idx, 'row', threshold);
                    this.focusSheet();
                }
                else {
                    this.setThresholdHeight(height, threshold, frozenRow);
                    this.translate({ refresh: 'Row' });
                }
            }
            args.prev.idx = idx;
        }
    };
    VirtualScroll.prototype.skipHiddenLastIdx = function (idx, prevIdx, layout) {
        if (layout === void 0) { layout = 'rows'; }
        var sheet = this.parent.getActiveSheet();
        var count = 0;
        for (var i = idx; i <= prevIdx; i++) {
            if ((sheet["" + layout])[i] && (sheet["" + layout])[i].hidden) {
                count++;
            }
        }
        if (count) {
            idx = this.skipHiddenLastIdx(idx - count, idx - 1, layout);
        }
        return idx;
    };
    VirtualScroll.prototype.hiddenCount = function (startIdx, endIdx, layout) {
        if (layout === void 0) { layout = 'rows'; }
        var index = 0;
        var sheet = this.parent.getActiveSheet();
        for (var i = startIdx; i <= endIdx; i++) {
            if ((sheet["" + layout])[i] && (sheet["" + layout])[i].hidden) {
                index++;
            }
        }
        return index;
    };
    VirtualScroll.prototype.checkLastIdx = function (idx, layout) {
        var diff = 0;
        if (this.parent.scrollSettings.isFinite) {
            var sheet = this.parent.getActiveSheet();
            var count = skipHiddenIdx(sheet, (sheet[layout + 'Count'] - 1), false, layout === 'col' ? 'columns' : 'rows');
            if (idx > count) {
                diff = idx - count;
                idx = count;
            }
        }
        return { index: idx, diff: diff };
    };
    VirtualScroll.prototype.onHorizontalScroll = function (args) {
        var idx = args.cur.idx;
        var width = args.cur.size;
        var prevIdx = args.prev.idx;
        var idxDiff = Math.abs(idx - prevIdx);
        var threshold = this.parent.getThreshold('col');
        if (idxDiff > Math.round(threshold / 2)) {
            var startIdx = void 0;
            var endIdx = void 0;
            var prevLeftIdx = void 0;
            var sheet = this.parent.getActiveSheet();
            if (idx <= threshold) {
                if (!args.increase) {
                    if (this.translateX && prevIdx > threshold) {
                        this.translateX = 0;
                        var frozenCol = this.parent.frozenColCount(sheet);
                        var frozenRow = this.parent.frozenRowCount(sheet);
                        if (!args.preventScroll) {
                            var rowIndex = frozenRow ? getCellIndexes(sheet.topLeftCell)[0] : this.parent.viewport.topIndex;
                            var fIndexes = frozenRow ? [this.parent.viewport.topIndex + frozenRow, frozenCol] : [];
                            if (idxDiff < this.parent.viewport.colCount + threshold) {
                                startIdx = skipHiddenIdx(sheet, frozenCol, true, 'columns');
                                endIdx = skipHiddenIdx(sheet, (this.parent.viewport.leftIndex + frozenCol) - 1, false, 'columns');
                                this.parent.viewport.leftIndex = startIdx - frozenCol;
                                var rightIdx = this.skipHiddenLastIdx(this.parent.viewport.rightIndex - (((endIdx - startIdx) + 1) -
                                    this.hiddenCount(startIdx, endIdx, 'columns')), this.parent.viewport.rightIndex, 'columns');
                                this.parent.viewport.rightIndex = skipHiddenIdx(sheet, rightIdx, false, 'columns');
                                this.parent.renderModule.refreshUI({ rowIndex: rowIndex, colIndex: startIdx, direction: 'last', refresh: 'ColumnPart',
                                    skipUpdateOnFirst: true, frozenIndexes: fIndexes }, this.getColAddress([startIdx, skipHiddenIdx(sheet, endIdx, false, 'columns')]));
                            }
                            else {
                                var prevRowIndex = this.parent.viewport.topIndex;
                                this.parent.renderModule.refreshUI({ rowIndex: rowIndex, colIndex: 0, refresh: 'Column', skipUpdateOnFirst: true,
                                    frozenIndexes: fIndexes, skipTranslate: true });
                                if (frozenRow) {
                                    this.parent.viewport.topIndex = prevRowIndex;
                                }
                                this.translate({ refresh: 'Column' });
                            }
                            focus(this.parent.element);
                            idx = 0;
                        }
                        else {
                            this.parent.viewport.leftIndex = prevIdx - (threshold - frozenCol);
                        }
                    }
                    this.updateScrollCount(threshold, 'col');
                }
            }
            if (prevIdx < threshold) {
                idxDiff = Math.abs(idx - threshold);
            }
            if (!args.increase && this.parent.scrollSettings.isFinite && this.parent.viewport.rightIndex ===
                skipHiddenIdx(sheet, sheet.colCount - 1, false, 'columns')) {
                var frozenCol = this.parent.frozenColCount(sheet);
                var thresholdIdx = this.parent.viewport.leftIndex + frozenCol + getRangeIndexes(sheet.paneTopLeftCell)[1] - 1;
                thresholdIdx += this.hiddenCount(this.parent.viewport.leftIndex + frozenCol, thresholdIdx);
                if (idx + frozenCol > thresholdIdx) {
                    args.prev.idx = idx;
                    return;
                }
                idxDiff = thresholdIdx - (idx + frozenCol);
            }
            if (idx > threshold) {
                prevLeftIdx = this.parent.viewport.leftIndex;
                this.parent.viewport.leftIndex = idx - threshold;
                if (args.increase && prevLeftIdx > this.parent.viewport.leftIndex) {
                    this.parent.viewport.leftIndex = prevLeftIdx;
                    return;
                }
                var frozenCol = this.parent.frozenColCount(sheet);
                if (!args.preventScroll) {
                    var frozenRow = this.parent.frozenRowCount(sheet);
                    var rowIndex = frozenRow ? getCellIndexes(sheet.topLeftCell)[0] : this.parent.viewport.topIndex;
                    var frozenIndexes = [];
                    if (frozenRow) {
                        frozenIndexes = [frozenRow + this.parent.viewport.topIndex, frozenCol];
                    }
                    if (idxDiff < this.parent.viewport.colCount + threshold) {
                        if (args.increase) {
                            startIdx = this.parent.viewport.rightIndex + 1;
                            endIdx = this.parent.viewport.rightIndex + (this.parent.viewport.leftIndex - prevLeftIdx);
                            endIdx -= this.hiddenCount(prevLeftIdx + frozenCol, this.parent.viewport.leftIndex - 1 + frozenCol, 'columns');
                            if (endIdx <= this.parent.viewport.rightIndex || (this.parent.scrollSettings.isFinite &&
                                startIdx > skipHiddenIdx(sheet, sheet.colCount - 1, false, 'columns'))) {
                                this.parent.viewport.leftIndex = prevLeftIdx;
                                return;
                            }
                            var indexes = this.parent.skipHidden(startIdx, endIdx, 'columns', false);
                            var finiteOffset = this.checkLastIdx(indexes[1], 'col');
                            startIdx = indexes[0];
                            endIdx = finiteOffset.index;
                            this.parent.viewport.leftIndex = skipHiddenIdx(sheet, (this.parent.viewport.leftIndex - finiteOffset.diff) + frozenCol, !finiteOffset.diff, 'columns') - frozenCol;
                            this.setThresholdWidth(width, idx - this.parent.viewport.leftIndex, frozenCol, !!finiteOffset.diff, prevLeftIdx === skipHiddenIdx(sheet, frozenCol, true, 'columns'));
                            this.parent.viewport.rightIndex = endIdx;
                            this.parent.renderModule.refreshUI({ rowIndex: rowIndex, colIndex: startIdx, direction: 'first', refresh: 'ColumnPart',
                                frozenIndexes: frozenIndexes }, this.getColAddress([startIdx, endIdx]));
                        }
                        else {
                            startIdx = skipHiddenIdx(sheet, this.parent.viewport.leftIndex + frozenCol, false, 'columns');
                            if (startIdx < frozenCol) {
                                startIdx = frozenCol;
                                startIdx = skipHiddenIdx(sheet, startIdx, true, 'columns');
                            }
                            this.parent.viewport.leftIndex = startIdx - frozenCol;
                            endIdx = skipHiddenIdx(sheet, (prevLeftIdx + frozenCol) - 1, false, 'columns');
                            if (endIdx < frozenCol || endIdx < startIdx) {
                                this.parent.viewport.leftIndex = prevLeftIdx;
                                return;
                            }
                            var rightIdx = this.skipHiddenLastIdx(this.parent.viewport.rightIndex - (((endIdx - startIdx) + 1) -
                                this.hiddenCount(startIdx, endIdx, 'columns')), this.parent.viewport.rightIndex, 'columns');
                            this.parent.viewport.rightIndex = skipHiddenIdx(sheet, rightIdx, false, 'columns');
                            this.setThresholdWidth(width, idx - this.parent.viewport.leftIndex, frozenCol);
                            this.parent.renderModule.refreshUI({ rowIndex: rowIndex, colIndex: startIdx, direction: 'last', refresh: 'ColumnPart',
                                frozenIndexes: frozenIndexes }, this.getColAddress([startIdx, endIdx]));
                        }
                    }
                    else {
                        prevLeftIdx = this.parent.viewport.topIndex;
                        this.parent.viewport.leftIndex = skipHiddenIdx(sheet, this.parent.viewport.leftIndex + frozenCol, false, 'columns')
                            - frozenCol;
                        if (this.parent.viewport.leftIndex < 0) {
                            this.parent.viewport.leftIndex = skipHiddenIdx(sheet, frozenCol, true, 'columns') - frozenCol;
                        }
                        this.parent.renderModule.refreshUI({
                            rowIndex: rowIndex, colIndex: this.parent.viewport.leftIndex, refresh: 'Column', frozenIndexes: frozenIndexes,
                            skipTranslate: true
                        });
                        if (frozenRow) {
                            this.parent.viewport.topIndex = prevLeftIdx;
                        }
                        this.setThresholdWidth(width, idx - this.parent.viewport.leftIndex, frozenCol, this.parent.scrollSettings.isFinite && this.parent.viewport.rightIndex ===
                            skipHiddenIdx(sheet, sheet.colCount - 1, false, 'columns'));
                        this.translate({ refresh: 'Column' });
                    }
                    this.updateScrollCount(idx, 'col', threshold);
                    this.focusSheet();
                }
                else {
                    this.setThresholdWidth(width, threshold, frozenCol);
                    this.translate({ refresh: 'Column' });
                }
            }
            args.prev.idx = idx;
        }
    };
    VirtualScroll.prototype.focusSheet = function () {
        if (!document.activeElement.classList.contains('e-text-findNext-short') || !closest(document.activeElement, '#' + this.parent.element.id)) {
            focus(this.parent.element);
        }
    };
    VirtualScroll.prototype.setThresholdHeight = function (scrollHeight, threshold, frozenRow, endReached, isInit) {
        var sheet = this.parent.getActiveSheet();
        var start = this.parent.viewport.topIndex + frozenRow;
        var end = (start + threshold) - 1;
        if (endReached || isInit || end < start) {
            this.translateY = start <= frozenRow ? 0 : getRowsHeight(sheet, frozenRow, start - 1, true);
        }
        else {
            this.translateY = scrollHeight - getRowsHeight(sheet, start, end, true);
        }
    };
    VirtualScroll.prototype.setThresholdWidth = function (scrollWidth, threshold, frozenCol, endReached, isInit) {
        var sheet = this.parent.getActiveSheet();
        var start = this.parent.viewport.leftIndex + frozenCol;
        var end = (start + threshold) - 1;
        if (endReached || isInit || end < start) {
            this.translateX = start <= frozenCol ? 0 : getColumnsWidth(sheet, frozenCol, start - 1, true);
        }
        else {
            this.translateX = scrollWidth - getColumnsWidth(sheet, start, end, true);
        }
    };
    VirtualScroll.prototype.translate = function (args) {
        if (args.skipTranslate || !this.content) {
            return;
        }
        var translateX = this.translateX || 0;
        translateX = this.parent.enableRtl ? -translateX : translateX;
        if (args.refresh === 'Row' || args.refresh === 'RowPart') {
            this.content.style.transform = "translate(" + translateX + "px, " + this.translateY + "px)";
            this.rowHeader.style.transform = "translate(0px, " + this.translateY + "px)";
        }
        if (args.refresh === 'Column' || args.refresh === 'ColumnPart') {
            this.content.style.transform = "translate(" + translateX + "px, " + this.translateY + "px)";
            this.colHeader.style.transform = "translate(" + translateX + "px, 0px)";
        }
    };
    VirtualScroll.prototype.updateColumnWidth = function (args) {
        if (args.refresh === 'Column') {
            this.content.style.width = '';
            var sheet = this.parent.getActiveSheet();
            var width = getColumnsWidth(sheet, this.parent.viewport.leftIndex + this.parent.frozenColCount(sheet), this.parent.viewport.rightIndex, true);
            this.colHeader.style.width = width + 'px';
            this.content.style.width = width + 'px';
            if (!this.parent.scrollSettings.isFinite || args.isUpdate) {
                var scroll_1 = this.parent.element.querySelector('.e-scroller .e-virtualtrack');
                if (!scroll_1) {
                    return;
                }
                var scrollWidth = parseInt(scroll_1.style.width, 10);
                var newWidth = width + this.translateX + this.parent.viewport.beforeFreezeWidth;
                if (newWidth > scrollWidth) {
                    var diff = newWidth - scrollWidth;
                    scroll_1.style.width = scrollWidth + diff + 'px';
                }
                else {
                    var diff = scrollWidth - newWidth;
                    var vTrack = this.parent.getMainContent().getElementsByClassName('e-virtualtrack')[0];
                    if (scrollWidth - diff < parseInt(vTrack.style.width, 10)) {
                        scroll_1.style.width = vTrack.style.width;
                    }
                }
            }
        }
        else if (!this.parent.scrollSettings.isFinite) {
            var vTrack = this.parent.getMainContent().getElementsByClassName('e-virtualtrack')[0];
            var vTrackHeight = parseInt(vTrack.style.height, 10);
            var height = this.content.getBoundingClientRect().height;
            var newHeight = height + this.translateY + this.parent.viewport.beforeFreezeHeight;
            if (newHeight > vTrackHeight) {
                var diff = newHeight - vTrackHeight;
                vTrack.style.height = vTrackHeight + diff + 'px';
            }
            else {
                var diff = vTrackHeight - newHeight;
                var hVTrack = this.parent.getRowHeaderContent().getElementsByClassName('e-virtualtrack')[0];
                if (vTrackHeight - diff < parseInt(hVTrack.style.height, 10)) {
                    vTrack.style.height = hVTrack.style.height;
                }
            }
        }
    };
    VirtualScroll.prototype.updateRowColCount = function (args) {
        if (!this.scroll.length) {
            return;
        }
        var sheet = this.parent.getActiveSheet();
        if (args.update === 'row') {
            if (args.index !== this.scroll[this.parent.activeSheetIndex].rowCount - 1) {
                var height = this.getVTrackHeight('height');
                var newHeight = height;
                if (args.index >= this.scroll[this.parent.activeSheetIndex].rowCount) {
                    if (args.start === undefined) {
                        newHeight += getRowsHeight(sheet, this.scroll[this.parent.activeSheetIndex].rowCount, args.index, true);
                    }
                    else {
                        newHeight += getRowsHeight(sheet, args.start, args.end, true);
                    }
                }
                else {
                    if (args.start === undefined) {
                        newHeight -= getRowsHeight(sheet, args.index + 1, this.scroll[this.parent.activeSheetIndex].rowCount - 1, true);
                    }
                    else {
                        newHeight -= getRowsHeight(sheet, args.start, args.end, true);
                    }
                }
                if (!args.isDelete && newHeight < height) {
                    return;
                }
                this.scroll[this.parent.activeSheetIndex].rowCount = args.index + 1;
                this.updateVTrack(this.rowHeader, newHeight, 'height');
                if (this.scroll[this.parent.activeSheetIndex].rowCount > sheet.rowCount) {
                    this.parent.setSheetPropertyOnMute(sheet, 'rowCount', this.scroll[this.parent.activeSheetIndex].rowCount);
                }
            }
        }
        else {
            if (args.index !== this.scroll[this.parent.activeSheetIndex].colCount - 1) {
                var width = this.getVTrackHeight('width');
                var newWidth = width;
                if (args.index >= this.scroll[this.parent.activeSheetIndex].colCount) {
                    if (args.start === undefined) {
                        newWidth += getColumnsWidth(sheet, this.scroll[this.parent.activeSheetIndex].colCount, args.index, true);
                    }
                    else {
                        newWidth += getColumnsWidth(sheet, args.start, args.end, true);
                    }
                }
                else {
                    if (args.start === undefined) {
                        newWidth -= getColumnsWidth(sheet, args.index + 1, this.scroll[this.parent.activeSheetIndex].colCount - 1, true);
                    }
                    else {
                        newWidth -= getColumnsWidth(sheet, args.start, args.end, true);
                    }
                }
                if (!args.isDelete && newWidth < width) {
                    return;
                }
                this.scroll[this.parent.activeSheetIndex].colCount = args.index + 1;
                this.updateVTrack(this.colHeader, newWidth, 'width');
                if (this.scroll[this.parent.activeSheetIndex].colCount > sheet.colCount) {
                    this.parent.setSheetPropertyOnMute(sheet, 'colCount', this.scroll[this.parent.activeSheetIndex].colCount);
                }
            }
        }
    };
    VirtualScroll.prototype.getVTrackHeight = function (str) {
        var height = this.content.nextElementSibling.style["" + str];
        if (height.includes('e+')) {
            height = height.split('px')[0];
            var heightArr = height.split('e+');
            return Number(heightArr[0]) * Math.pow(10, Number(heightArr[1]));
        }
        else {
            return parseFloat(height);
        }
    };
    VirtualScroll.prototype.updateVTrackHeight = function (args) {
        var frozenRow = this.parent.frozenRowCount(this.parent.getActiveSheet());
        if (args.rowIdx < this.scroll[this.parent.activeSheetIndex].rowCount) {
            this.updateVTrack(this.rowHeader, this.getVTrackHeight('height') + args.threshold, 'height');
        }
        if (args.rowIdx >= frozenRow && args.rowIdx < this.parent.scrollModule.offset.top.idx + frozenRow) {
            var mainPanel = this.parent.element.getElementsByClassName('e-main-panel')[0];
            if (mainPanel) {
                this.parent.scrollModule.prevScroll.scrollTop = mainPanel.scrollTop + args.threshold;
                mainPanel.scrollTop += args.threshold;
            }
            this.parent.scrollModule.offset.top.size += args.threshold;
            if (args.rowIdx < this.parent.viewport.topIndex + frozenRow) {
                this.translateY += args.threshold;
                this.translate({ refresh: 'Row' });
            }
        }
    };
    VirtualScroll.prototype.updateVTrackWidth = function (args) {
        if (isHiddenCol(this.parent.getActiveSheet(), args.colIdx)) {
            return;
        }
        var frozenCol = this.parent.frozenColCount(this.parent.getActiveSheet());
        if (args.colIdx >= this.parent.viewport.leftIndex + frozenCol && args.colIdx <= this.parent.viewport.rightIndex) {
            var hdrVTrack = this.parent.getColumnHeaderContent().getElementsByClassName('e-virtualtrack')[0];
            hdrVTrack.style.width = parseFloat(hdrVTrack.style.width) + args.threshold + 'px';
            var cntVTrack = this.parent.getMainContent().getElementsByClassName('e-virtualtrack')[0];
            cntVTrack.style.width = parseFloat(cntVTrack.style.width) + args.threshold + 'px';
            var scrollVTrack = this.parent.getScrollElement().getElementsByClassName('e-virtualtrack')[0];
            scrollVTrack.style.width = parseFloat(scrollVTrack.style.width) + args.threshold + 'px';
            var hdrColumn = this.parent.getColumnHeaderContent().getElementsByClassName('e-virtualable')[0];
            hdrColumn.style.width = parseFloat(hdrColumn.style.width) + args.threshold + 'px';
            var cntColumn = this.parent.getMainContent().getElementsByClassName('e-virtualable')[0];
            cntColumn.style.width = parseFloat(cntColumn.style.width) + args.threshold + 'px';
        }
        else if (args.colIdx >= frozenCol && args.colIdx < this.parent.viewport.leftIndex + frozenCol) {
            this.parent.scrollModule.offset.left.size += args.threshold;
            this.translateX += args.threshold;
            this.translate({ refresh: 'Column' });
        }
    };
    VirtualScroll.prototype.updateVTrack = function (header, size, sizeStr) {
        header.nextElementSibling.style["" + sizeStr] = size + "px";
        this.content.nextElementSibling.style["" + sizeStr] = size + "px";
        if (sizeStr === 'width' && this.parent.allowScrolling) {
            this.parent.getScrollElement().firstElementChild.style.width = size + "px";
        }
    };
    VirtualScroll.prototype.deInitProps = function () {
        this.parent.viewport.leftIndex = null;
        this.parent.viewport.topIndex = null;
        this.parent.viewport.bottomIndex = null;
        this.translateX = null;
        this.translateY = null;
    };
    VirtualScroll.prototype.updateScrollProps = function (args) {
        var _this = this;
        if (args === void 0) { args = { sheetIndex: 0, sheets: this.parent.sheets }; }
        if (this.scroll.length === 0) {
            this.initScroll();
        }
        else {
            args.sheets.forEach(function () { _this.scroll.splice(args.sheetIndex, 0, { rowCount: 0, colCount: 0 }); });
        }
    };
    VirtualScroll.prototype.sliceScrollProps = function (args) {
        if (isNullOrUndefined(args.sheetIndex)) {
            this.scroll.length = 0;
        }
        else {
            this.scroll.splice(args.sheetIndex, 1);
        }
    };
    VirtualScroll.prototype.updateTranslate = function (args) {
        if (args.height) {
            if (args.isRender) {
                this.translateY -= args.height;
            }
            else {
                var height = parseInt(this.parent.getMainContent().getElementsByClassName('e-virtualtrack')[0].style.height, 10);
                if (args.isHide) {
                    this.updateVTrack(this.rowHeader, height - args.height, 'height');
                    this.setThresholdHeight(this.translateY, ((args.prevSize - 1) - this.parent.viewport.topIndex) + 1, this.parent.frozenRowCount(this.parent.getActiveSheet()));
                }
                else {
                    this.updateVTrack(this.rowHeader, height + args.height, 'height');
                    this.translateY = this.translateY + args.size;
                }
            }
            this.translate({ refresh: 'Row' });
        }
        if (args.width) {
            this.translateX -= args.width;
            this.translate({ refresh: 'Column' });
        }
    };
    VirtualScroll.prototype.addEventListener = function () {
        this.parent.on(beforeContentLoaded, this.createVirtualElement, this);
        this.parent.on(beforeVirtualContentLoaded, this.translate, this);
        this.parent.on(virtualContentLoaded, this.updateColumnWidth, this);
        this.parent.on(updateTableWidth, this.updateColumnWidth, this);
        this.parent.on(onVerticalScroll, this.onVerticalScroll, this);
        this.parent.on(onHorizontalScroll, this.onHorizontalScroll, this);
        this.parent.on(updateRowColCount, this.updateRowColCount, this);
        this.parent.on(rowHeightChanged, this.updateVTrackHeight, this);
        this.parent.on(colWidthChanged, this.updateVTrackWidth, this);
        this.parent.on(deInitProperties, this.deInitProps, this);
        this.parent.on(sheetsDestroyed, this.sliceScrollProps, this);
        this.parent.on(sheetCreated, this.updateScrollProps, this);
        this.parent.on(updateTranslate, this.updateTranslate, this);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
    };
    VirtualScroll.prototype.destroy = function () {
        this.removeEventListener();
        var noteIndicatorElement = document.querySelectorAll('.e-addNoteIndicator');
        if (noteIndicatorElement) {
            noteIndicatorElement.forEach(function (element) {
                element.remove();
            });
        }
        if (this.rowHeader) {
            removeAllChildren(this.rowHeader);
            this.rowHeader.remove();
        }
        if (this.colHeader) {
            removeAllChildren(this.colHeader);
            this.colHeader.remove();
        }
        if (this.content) {
            removeAllChildren(this.content);
            this.content.remove();
        }
        this.rowHeader = null;
        this.colHeader = null;
        this.content = null;
        this.parent = null;
        this.scroll.length = 0;
        this.translateX = null;
        this.translateY = null;
    };
    VirtualScroll.prototype.removeEventListener = function () {
        this.parent.off(beforeContentLoaded, this.createVirtualElement);
        this.parent.off(beforeVirtualContentLoaded, this.translate);
        this.parent.off(virtualContentLoaded, this.updateColumnWidth);
        this.parent.off(updateTableWidth, this.updateColumnWidth);
        this.parent.off(onVerticalScroll, this.onVerticalScroll);
        this.parent.off(onHorizontalScroll, this.onHorizontalScroll);
        this.parent.off(updateRowColCount, this.updateRowColCount);
        this.parent.off(rowHeightChanged, this.updateVTrackHeight);
        this.parent.off(colWidthChanged, this.updateVTrackWidth);
        this.parent.off(sheetsDestroyed, this.sliceScrollProps);
        this.parent.off(sheetCreated, this.updateScrollProps);
        this.parent.off(updateTranslate, this.updateTranslate);
        this.parent.off(spreadsheetDestroyed, this.destroy);
    };
    return VirtualScroll;
}());

/**
 * Represents keyboard navigation support for Spreadsheet.
 */
var KeyboardNavigation = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet Keyboard Navigation module.
     *
     * @private
     * @param {Spreadsheet} parent - Specify the spreadsheet
     */
    function KeyboardNavigation(parent) {
        this.parent = parent;
        this.addEventListener();
        /* code snippet */
    }
    KeyboardNavigation.prototype.addEventListener = function () {
        this.parent.on(keyDown, this.keyDownHandler, this);
        /* code snippet */
    };
    KeyboardNavigation.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(keyDown, this.keyDownHandler);
        }
        /* code snippet */
    };
    KeyboardNavigation.prototype.keyDownHandler = function (e) {
        var _this = this;
        var target = e.target;
        var isRtl = this.parent.enableRtl;
        var isKeyboardShortcut = this.parent.enableKeyboardShortcut;
        if (e.altKey && (e.keyCode === 38 || e.keyCode === 40) && !isKeyboardShortcut) {
            e.preventDefault();
            return;
        }
        /*alt + up to close filter popup*/
        if (e.altKey && e.keyCode === 38 && this.parent.element.lastElementChild.classList.contains('e-filter-popup')) {
            this.parent.notify(filterCellKeyDown, { closePopup: true });
            return;
        }
        if (this.parent.allowPrint && e.ctrlKey && e.keyCode === 80 && isKeyboardShortcut) {
            e.preventDefault();
            this.parent.print();
            return;
        }
        var textarea = e.target;
        if (!isNullOrUndefined(textarea) && textarea.classList.contains('e-addNoteContainer')) {
            if (e.key === 'Escape' || e.keyCode === 27) {
                var isNoteCellIndex = !isNullOrUndefined(this.parent.spreadsheetNoteModule.noteCellIndexes);
                var cellIndexes = isNoteCellIndex ? this.parent.spreadsheetNoteModule.noteCellIndexes :
                    getCellIndexes(this.parent.getActiveSheet().activeCell);
                var cell = getCell(cellIndexes[0], cellIndexes[1], this.parent.getActiveSheet());
                var targetElement = this.parent.getCell(cellIndexes[0], cellIndexes[1]);
                var address = getSheetName(this.parent, this.parent.activeSheetIndex) + '!' + getRangeAddress(cellIndexes);
                if (!isNullOrUndefined(textarea) && !isNullOrUndefined(textarea.value)
                    && ((isNullOrUndefined(cell) || isNullOrUndefined(cell.notes)) || (cell.notes !== textarea.value))
                    && document.activeElement.className.indexOf('e-addNoteContainer') > -1) {
                    var eventAction = !isNullOrUndefined(cell) && cell.notes ? 'editNote' : 'addNote';
                    this.parent.notify(setActionData, { args: { action: 'beforeCellSave', eventArgs: { address: address } } });
                    updateCell(this.parent, this.parent.getActiveSheet(), { rowIdx: cellIndexes[0], colIdx: cellIndexes[1], preventEvt: true,
                        cell: { notes: textarea.value, isNoteEditable: false } });
                    var eventArgs = { notes: textarea.value, address: address };
                    this.parent.notify(completeAction, { eventArgs: eventArgs, action: eventAction });
                }
                this.parent.spreadsheetNoteModule.isShowNote = null;
                this.parent.notify(removeNoteContainer, '');
                focus(targetElement);
            }
            return;
        }
        var dlgInst = this.parent.serviceLocator.getService(dialog).dialogInstance;
        var isNameBox = target.id === this.parent.element.id + "_name_box";
        if (this.parent.selectionSettings.mode === 'None' || dlgInst || this.parent.isEdit || (target.classList.contains('e-ss-ddb') &&
            e.keyCode !== 117 && e.keyCode !== 9) || (isNameBox && e.keyCode !== 117) || target.classList.contains('e-sheet-rename') ||
            target.id === this.parent.element.id + "_SearchBox" || target.classList.contains('e-chk-hidden') || (target.classList.contains('e-ddl') &&
            target.classList.contains('e-input-focus'))) {
            if (dlgInst) {
                if (e.keyCode === 13) {
                    if (dlgInst.element.classList.contains('e-spreadsheet-function-dlg') &&
                        (target.classList.contains('e-formula-list') || target.classList.contains('e-list-item'))) {
                        focus(dlgInst.element.querySelector('.e-footer-content .e-primary'));
                    }
                }
                else if (e.keyCode === 9) { // To maintain the focus inside the dialogs on the tab or shift + tab key
                    if (dlgInst.element.classList.contains('e-find-dlg')) {
                        var footerBtns = dlgInst.element.querySelectorAll('.e-footer-content .e-btn:not(:disabled)');
                        var cls = footerBtns.length ? footerBtns[footerBtns.length - 1].className :
                            'e-findnreplace-checkmatch';
                        if (e.shiftKey) {
                            if (document.activeElement.classList.contains('e-dlg-closeicon-btn')) {
                                e.preventDefault();
                                if (footerBtns.length) {
                                    focus(footerBtns[footerBtns.length - 1]);
                                }
                                else {
                                    var cBoxWrapper = dlgInst.element.querySelector('.e-findnreplace-exactmatchcheckbox');
                                    if (cBoxWrapper) {
                                        focus(cBoxWrapper.querySelector('.e-findnreplace-checkmatch'));
                                        cBoxWrapper.classList.add('e-focus');
                                    }
                                }
                            }
                        }
                        else if (document.activeElement.className.includes(cls)) {
                            focus(dlgInst.element);
                        }
                    }
                    else if (dlgInst.element.classList.contains('e-protect-dlg')) {
                        if (e.shiftKey ? document.activeElement.classList.contains('e-primary') :
                            document.activeElement.id === this.parent.element.id + "_protect_check") {
                            var listWrapper = dlgInst.element.querySelector('.e-protect-option-list');
                            if (listWrapper && !listWrapper.querySelector('.e-list-item.e-focused')) {
                                var listEle = listWrapper.querySelector('.e-list-item');
                                if (listEle) {
                                    listEle.classList.add('e-focused');
                                }
                            }
                        }
                    }
                    else if (dlgInst.element.classList.contains('e-custom-format-dlg')) {
                        if (!e.shiftKey) {
                            if (document.activeElement.classList.contains('e-btn') &&
                                document.activeElement.parentElement.classList.contains('e-custom-dialog')) {
                                var listWrapper = dlgInst.element.querySelector('.e-custom-listview');
                                var listObj = getComponent(listWrapper, 'listview');
                                if (listWrapper) {
                                    var listEle = listWrapper.querySelector('.e-list-item.e-active');
                                    if (!listEle) {
                                        listEle = listWrapper.querySelector('.e-list-item');
                                        if (listEle) {
                                            listObj.selectItem(listEle);
                                        }
                                        else {
                                            return;
                                        }
                                    }
                                    e.preventDefault();
                                    listEle.focus();
                                }
                            }
                            else if (document.activeElement.classList.contains('e-list-item')) {
                                focus(dlgInst.element);
                            }
                        }
                        else if (document.activeElement.className.includes('e-list-item e-active')) {
                            var listWrapper = closest(document.activeElement, '.e-custom-listview');
                            if (listWrapper) {
                                focus(listWrapper);
                            }
                        }
                    }
                    else if (dlgInst.element.classList.contains('e-spreadsheet-function-dlg')) {
                        if (e.shiftKey && document.activeElement.className.includes('e-list-item e-active')) {
                            var listWrapper = closest(document.activeElement, '.e-formula-list');
                            if (listWrapper) {
                                focus(listWrapper);
                            }
                        }
                    }
                    else if (dlgInst.element.classList.contains('e-goto-dlg') && !dlgInst.element.classList.contains('e-dlg-modal')) {
                        if (e.shiftKey) {
                            if (document.activeElement.className.includes('e-dlg-closeicon-btn')) {
                                var footerOkBtn = dlgInst.element.querySelector('.e-footer-content .e-btn');
                                if (footerOkBtn) {
                                    e.preventDefault();
                                    focus(footerOkBtn);
                                }
                            }
                        }
                        else if (document.activeElement.className.includes('e-btn-goto-ok')) {
                            focus(dlgInst.element);
                        }
                    }
                }
            }
            else if (isNameBox && e.keyCode === 9 && e.shiftKey) {
                this.focusEle(e, '.e-formula-bar', false, true);
            }
            var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
            this.parent.notify(editOperation, eventArgs);
            var isFormulaEdit = checkIsFormula(eventArgs.editedValue, true);
            if (this.parent.isEdit && isFormulaEdit && e.shiftKey && !e.ctrlKey && isNavigationKey(e.keyCode)) {
                this.shiftSelection(e);
            }
            return;
        }
        var sheet = this.parent.getActiveSheet();
        var actIdxes = getCellIndexes(sheet.activeCell);
        if (e.altKey) {
            if (e.keyCode === 40) {
                if (target.classList.contains('e-dropdown-btn') || target.classList.contains('e-split-btn')) {
                    return;
                }
                var filterArgs = { e: e, isFilterCell: false };
                this.parent.notify(filterCellKeyDown, filterArgs);
                if (filterArgs.isFilterCell) { /*alt + down to open filter popup*/
                    return;
                }
            }
            if (e.keyCode === 40 && !document.getElementById(this.parent.element.id + 'listValid_popup')) {
                var cell = this.parent.getCell(actIdxes[0], actIdxes[1]);
                if (cell) {
                    var listValidation = cell.querySelector('.e-validation-list .e-ddl');
                    if (listValidation) {
                        focus(listValidation);
                        var ddlEle = listValidation.querySelector('.e-dropdownlist') || listValidation;
                        var listObj = getComponent(ddlEle, 'dropdownlist');
                        if (listObj) {
                            listObj.showPopup();
                        }
                        return;
                    }
                }
            }
        }
        if (target.id === this.parent.element.id + "_File") {
            focus(this.parent.element);
        }
        var isSheetTabFocus = target.classList.contains('e-add-sheet-tab') || target.classList.contains('e-sheets-list') ||
            (target.classList.contains('e-tab-wrap') && !!closest(target, '.e-sheet-tabs-items')) ||
            target.classList.contains('e-aggregate-list') || target.classList.contains('e-scroll-nav');
        if ([9, 37, 38, 39, 40, 33, 34, 35, 36].indexOf(e.keyCode) > -1 && !isSheetTabFocus) {
            e.preventDefault();
        }
        var isNavigate;
        var selectIdx = getRangeIndexes(sheet.selectedRange);
        if (e.keyCode === 36) { /* home key */
            var frozenCol = this.parent.frozenColCount(sheet);
            var selectIdxes = void 0;
            if (e.ctrlKey || e.metaKey) {
                var frozenRow = skipHiddenIdx(sheet, this.parent.frozenRowCount(sheet), true);
                if (e.shiftKey) { /* ctrl+shift+home */
                    selectIdxes = [actIdxes[0], actIdxes[1], frozenRow, skipHiddenIdx(sheet, frozenCol, true, 'columns')];
                }
                else { /* ctrl+home */
                    selectIdxes = [frozenRow, skipHiddenIdx(sheet, frozenCol, true, 'columns'), frozenRow];
                    selectIdxes[3] = selectIdxes[1];
                }
                var mainPanel = this.parent.element.querySelector('.e-main-panel');
                if (mainPanel.scrollTop) {
                    mainPanel.scrollTop = 0;
                }
                var hCont = this.parent.getScrollElement();
                if (hCont.scrollLeft) {
                    hCont.scrollLeft = 0;
                }
            }
            else if (e.shiftKey) { /* shift+home */
                var startCol = skipHiddenIdx(sheet, frozenCol, true, 'columns');
                if (sheet.frozenColumns && skipHiddenIdx(sheet, actIdxes[1], true, 'columns') === startCol) {
                    selectIdxes = [selectIdx[0], actIdxes[1], selectIdx[2], skipHiddenIdx(sheet, 0, true, 'columns')];
                }
                else {
                    selectIdxes = [selectIdx[0], actIdxes[1], selectIdx[2], startCol];
                }
                this.scrollNavigation([selectIdxes[2], selectIdxes[3]], true);
            }
            else {
                var startCol = skipHiddenIdx(sheet, frozenCol, true, 'columns');
                if (sheet.frozenColumns && (startCol === actIdxes[1] || frozenCol === actIdxes[1])) {
                    startCol = skipHiddenIdx(sheet, 0, true, 'columns');
                }
                selectIdxes = [actIdxes[0], startCol, actIdxes[0], startCol];
                this.scrollNavigation([selectIdxes[0], selectIdxes[1]], true);
            }
            this.updateSelection(sheet, selectIdxes, e);
        }
        else if (e.ctrlKey || e.metaKey) {
            if (e.keyCode === 35) { /*ctrl + end*/
                e.preventDefault();
                var lastRow = skipHiddenIdx(sheet, sheet.usedRange.rowIndex, false);
                lastRow = lastRow > -1 ? lastRow : sheet.usedRange.rowIndex;
                var lastCol = skipHiddenIdx(sheet, sheet.usedRange.colIndex, false, 'columns');
                lastCol = lastCol > -1 ? lastCol : sheet.usedRange.colIndex;
                if (!e.shiftKey) {
                    actIdxes[0] = lastRow;
                    actIdxes[1] = lastCol;
                }
                actIdxes[2] = lastRow;
                actIdxes[3] = lastCol;
                this.updateSelection(sheet, actIdxes.concat(actIdxes), e);
                this.scrollNavigation([lastRow, lastCol], true);
            }
            else if (e.keyCode === 32 && !e.shiftKey && isKeyboardShortcut) { /*ctrl + space*/
                selectIdx[0] = 0;
                selectIdx[2] = sheet.rowCount - 1;
                this.updateSelection(sheet, selectIdx, { shiftKey: true });
            }
            if (e.keyCode === 40 || e.keyCode === 39 || e.keyCode === 38 || e.keyCode === 37) {
                if (e.shiftKey) {
                    if (e.keyCode === 40) { /* ctrl+shift+down */
                        selectIdx[2] = this.getNextNonEmptyCell(selectIdx[2], actIdxes[1], 'down');
                    }
                    else if ((e.keyCode === 39 && !isRtl) || (e.keyCode === 37 && isRtl)) { /* ctrl+shift+right */
                        selectIdx[3] = this.getNextNonEmptyCell(actIdxes[0], selectIdx[3], 'right');
                    }
                    else if (e.keyCode === 38) { /* ctrl+shift+up */
                        selectIdx[2] = this.getNextNonEmptyCell(selectIdx[2], actIdxes[1], 'top');
                    }
                    else { /* ctrl+shift+left */
                        selectIdx[3] = this.getNextNonEmptyCell(actIdxes[0], selectIdx[3], 'left');
                    }
                    this.updateSelection(sheet, selectIdx, e);
                    this.scrollNavigation([selectIdx[2], selectIdx[3]], true);
                }
                else {
                    if ((e.keyCode === 37 && !isRtl) || (e.keyCode === 39 && isRtl)) { /*ctrl + left*/
                        actIdxes[1] = this.getNextNonEmptyCell(actIdxes[0], actIdxes[1], 'left');
                    }
                    else if (e.keyCode === 38) { /*ctrl + up*/
                        actIdxes[0] = this.getNextNonEmptyCell(actIdxes[0], actIdxes[1], 'top');
                    }
                    else if ((e.keyCode === 39 && !isRtl) || (e.keyCode === 37 && isRtl)) { /*ctrl+ right*/
                        actIdxes[1] = this.getNextNonEmptyCell(actIdxes[0], actIdxes[1], 'right');
                    }
                    else { /*ctrl+ down*/
                        actIdxes[0] = this.getNextNonEmptyCell(actIdxes[0], actIdxes[1], 'down');
                    }
                    this.parent.selectRange(getRangeAddress(actIdxes));
                    this.scrollNavigation([actIdxes[0], actIdxes[1]], true);
                }
            }
            else if (e.keyCode === 117) {
                var activeEle = document.activeElement;
                if (activeEle.classList.contains('e-spreadsheet') || closest(activeEle, '.e-sheet')) {
                    this.setFocus('Sheet', e, true);
                }
                else if (isSheetTabFocus) {
                    this.setFocus('SheetTabs', e);
                }
                else if (closest(activeEle, '.e-ribbon')) {
                    this.setFocus('Ribbon', e);
                }
                else if (isNameBox || activeEle.classList.contains('e-insert-function')) {
                    this.setFocus('FormulaBar', e);
                }
            }
        }
        else {
            if (e.shiftKey) {
                if (e.keyCode === 32 && isKeyboardShortcut) { /*shift + space*/
                    e.preventDefault();
                    selectIdx[1] = 0;
                    selectIdx[3] = sheet.colCount - 1;
                    this.updateSelection(sheet, selectIdx, e);
                }
                this.shiftSelection(e);
                if ((e.keyCode === 34 || e.keyCode === 33) && (this.parent.scrollModule &&
                    this.parent.scrollModule.isKeyScroll)) { /* shift Page Up and Page Down*/
                    var scrollTop = 0;
                    var mainPanel = this.parent.element.querySelector('.e-main-panel');
                    var topRow = skipHiddenIdx(sheet, getCellIndexes(sheet.paneTopLeftCell)[0], true);
                    var viewportHgt = getBottomOffset(this.parent, topRow).height;
                    if (e.keyCode === 34) { /* Page Down*/
                        scrollTop = viewportHgt + this.parent.scrollModule.offset.top.size;
                        if (!this.parent.scrollSettings.isFinite) {
                            var vTrack = this.parent.getMainContent().querySelector('.e-virtualtrack');
                            if (vTrack && parseFloat(vTrack.style.height) < scrollTop + viewportHgt) {
                                vTrack.style.height = scrollTop + viewportHgt + "px";
                            }
                        }
                    }
                    else { /* Page up*/
                        scrollTop = this.parent.scrollModule.offset.top.size - viewportHgt;
                        if (Math.round(scrollTop) < 0) {
                            if (mainPanel.scrollTop) {
                                scrollTop = 0;
                            }
                            else {
                                this.parent.selectRange(getRangeAddress([selectIdx[0], selectIdx[1], topRow, selectIdx[3]]));
                                return;
                            }
                        }
                    }
                    var aRowIdx = skipHiddenIdx(sheet, getRangeIndexes(sheet.selectedRange)[2], true);
                    var selectDiff_1 = topRow > aRowIdx ? 0 : aRowIdx - topRow;
                    if (this.parent.scrollModule && mainPanel.scrollTop) {
                        this.parent.scrollModule.isKeyScroll = false;
                    }
                    mainPanel.scrollTop = scrollTop;
                    getUpdateUsingRaf(function () {
                        if (e.keyCode === 34) {
                            selectIdx[2] = skipHiddenIdx(sheet, getCellIndexes(sheet.paneTopLeftCell)[0] + selectDiff_1, true);
                            if (_this.parent.scrollSettings.isFinite && selectIdx[2] > sheet.rowCount - 1) {
                                selectIdx[2] = skipHiddenIdx(sheet, sheet.rowCount - 1, false);
                                selectIdx[2] = selectIdx[2] < 0 ? 0 : selectIdx[2];
                            }
                        }
                        else {
                            selectIdx[2] = skipHiddenIdx(sheet, getCellIndexes(sheet.paneTopLeftCell)[0] + selectDiff_1, false);
                            selectIdx[2] = selectIdx[2] < 0 ? 0 : selectIdx[2];
                        }
                        _this.updateSelection(sheet, selectIdx, e);
                    });
                }
            }
            else {
                if (e.keyCode === 9 || (this.parent.enableRtl ? e.keyCode === 37 : e.keyCode === 39)) { /*Right or Tab key*/
                    var cell = getCell(actIdxes[0], actIdxes[1], sheet);
                    if (cell && cell.colSpan > 1) {
                        actIdxes[1] += (cell.colSpan - 1);
                    }
                    if (actIdxes[1] < sheet.colCount - 1 && (!sheet.isProtected || sheet.protectSettings.selectCells)) {
                        actIdxes[1] += 1;
                        isNavigate = true;
                    }
                    else if (sheet.protectSettings.selectUnLockedCells) {
                        var idx = this.getNextUnlockedCell('right', actIdxes);
                        isNavigate = actIdxes[1] !== idx[1] || actIdxes[0] !== idx[0];
                        actIdxes[1] = idx[1];
                        actIdxes[0] = idx[0];
                    }
                }
                else if (e.keyCode === 13 || e.keyCode === 40) { /*Down or Enter Key*/
                    var cell = getCell(actIdxes[0], actIdxes[1], sheet);
                    if (cell && cell.rowSpan > 1) {
                        actIdxes[0] += (cell.rowSpan - 1);
                    }
                    if (actIdxes[0] < sheet.rowCount - 1 && (!sheet.isProtected || sheet.protectSettings.selectCells)) {
                        isNavigate = true;
                        actIdxes[0] += 1;
                    }
                    else if (sheet.protectSettings.selectUnLockedCells) {
                        var idx = this.getNextUnlockedCell('down', actIdxes);
                        isNavigate = actIdxes[0] !== idx[0] || actIdxes[1] !== idx[1];
                        actIdxes[1] = idx[1];
                        actIdxes[0] = idx[0];
                    }
                }
                else if ((e.keyCode === 34 || e.keyCode === 33) && (this.parent.scrollModule &&
                    this.parent.scrollModule.isKeyScroll)) { /*Page Up and Page Down*/
                    var mainPanel = this.parent.element.querySelector('.e-main-panel');
                    var scrollTop = 0;
                    var topRow_1 = skipHiddenIdx(sheet, getCellIndexes(sheet.paneTopLeftCell)[0], true);
                    var aRowIdx_1 = skipHiddenIdx(sheet, getCellIndexes(sheet.activeCell)[0], true);
                    var viewportHgt = getBottomOffset(this.parent, topRow_1).height;
                    if (e.keyCode === 34) { /*Page Down*/
                        scrollTop = this.parent.scrollModule.offset.top.size + viewportHgt;
                        if (!this.parent.scrollSettings.isFinite) {
                            var vTrack = this.parent.getMainContent().querySelector('.e-virtualtrack');
                            if (vTrack && parseFloat(vTrack.style.height) < scrollTop + viewportHgt) {
                                vTrack.style.height = scrollTop + viewportHgt + "px";
                            }
                        }
                    }
                    else { /*Page Up*/
                        scrollTop = this.parent.scrollModule.offset.top.size - viewportHgt;
                        if (sheet.frozenRows && actIdxes[0] < this.parent.frozenRowCount(sheet)) {
                            this.parent.selectRange(getRangeAddress([topRow_1, selectIdx[1], topRow_1, selectIdx[1]]));
                            return;
                        }
                        if (Math.round(scrollTop) < 0) {
                            if (mainPanel.scrollTop) {
                                scrollTop = 0;
                            }
                            else {
                                return;
                            }
                        }
                    }
                    var selectDiff_2 = topRow_1 > aRowIdx_1 ? 0 : aRowIdx_1 - topRow_1;
                    if (this.parent.scrollModule && mainPanel.scrollTop) {
                        this.parent.scrollModule.isKeyScroll = false;
                    }
                    mainPanel.scrollTop = scrollTop;
                    getUpdateUsingRaf(function () {
                        var activeRow;
                        if (e.keyCode === 34) {
                            activeRow = skipHiddenIdx(sheet, getCellIndexes(sheet.paneTopLeftCell)[0] + selectDiff_2, true);
                            if (_this.parent.scrollSettings.isFinite) {
                                if (activeRow > sheet.rowCount - 1) {
                                    activeRow = skipHiddenIdx(sheet, sheet.rowCount - 1, false);
                                    activeRow = activeRow < 0 ? 0 : activeRow;
                                }
                            }
                        }
                        else {
                            activeRow = getCellIndexes(sheet.paneTopLeftCell)[0] + selectDiff_2;
                            activeRow -= _this.parent.hiddenCount(topRow_1, aRowIdx_1);
                            activeRow = skipHiddenIdx(sheet, activeRow, false);
                            activeRow = activeRow < 0 ? 0 : activeRow;
                        }
                        _this.parent.notify(cellNavigate, { range: [activeRow, actIdxes[1], activeRow, actIdxes[1]], preventAnimation: true });
                    });
                }
            }
            if (e.shiftKey ? e.keyCode === 9 : (this.parent.enableRtl ? e.keyCode === 39 : e.keyCode === 37)) { /*left or shift+tab key*/
                if (actIdxes[1] > 0 && (!sheet.isProtected || sheet.protectSettings.selectCells)) {
                    actIdxes[1] -= 1;
                    isNavigate = true;
                }
                else if (sheet.protectSettings.selectUnLockedCells) {
                    var idx = this.getNextUnlockedCell('left', actIdxes);
                    isNavigate = actIdxes[1] !== idx[1] || actIdxes[0] !== idx[0];
                    actIdxes[1] = idx[1];
                    actIdxes[0] = idx[0];
                }
                if (actIdxes[1] <= 0) {
                    var content = this.parent.getMainContent();
                    if (actIdxes[1] === 0 && content.scrollLeft && !this.parent.enableRtl) {
                        content.scrollLeft = 0;
                    }
                }
            }
            else if (e.shiftKey ? e.keyCode === 13 : e.keyCode === 38) { /*up or shift+enter key */
                if (!this.parent.element.querySelector('.e-find-toolbar')) {
                    if (actIdxes[0] > 0 && (!sheet.isProtected || sheet.protectSettings.selectCells)) {
                        actIdxes[0] -= 1;
                        isNavigate = true;
                    }
                    else if (sheet.protectSettings.selectUnLockedCells) {
                        var cellIdx = this.getNextUnlockedCell('up', actIdxes);
                        isNavigate = actIdxes[0] !== cellIdx[0] || actIdxes[1] !== cellIdx[1];
                        actIdxes[1] = cellIdx[1];
                        actIdxes[0] = cellIdx[0];
                    }
                    if (actIdxes[0] <= 0) {
                        var contentEle = this.parent.getMainContent().parentElement;
                        if (actIdxes[0] === 0 && contentEle.scrollTop) {
                            contentEle.scrollTop = 0;
                        }
                    }
                }
            }
        }
        if (isNavigate && (!this.parent.scrollModule || this.parent.scrollModule.isKeyScroll) && !isSheetTabFocus &&
            !closest(document.activeElement, '.e-ribbon') && !target.classList.contains('e-insert-function')
            && (!target.classList.contains('e-formula-bar') || (target.classList.contains('e-formula-bar') && target.nodeName === 'TEXTAREA' && e.keyCode === 13))) {
            if (e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 13) { /* down || up */
                while (isHiddenRow(sheet, actIdxes[0])) {
                    if (e.keyCode === 40 || (!e.shiftKey && e.keyCode === 13)) {
                        actIdxes[0] = actIdxes[0] + 1;
                    }
                    if (e.keyCode === 38 || (e.shiftKey && e.keyCode === 13)) {
                        actIdxes[0] = actIdxes[0] - 1;
                        if (actIdxes[0] < 0) {
                            return;
                        }
                    }
                }
            }
            if (e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 9) { /* left || right || tab */
                while (isHiddenCol(sheet, actIdxes[1])) {
                    if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {
                        actIdxes[1] = actIdxes[1] + 1;
                    }
                    if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {
                        actIdxes[1] = actIdxes[1] - 1;
                        if (actIdxes[1] < 0) {
                            return;
                        }
                    }
                }
            }
            var topLeftIdx = getRangeIndexes(sheet.topLeftCell);
            if (sheet.frozenRows && actIdxes[0] < topLeftIdx[0]) {
                actIdxes[0] = skipHiddenIdx(sheet, topLeftIdx[0], true);
            }
            if (sheet.frozenColumns && actIdxes[1] < topLeftIdx[1]) {
                actIdxes[1] = skipHiddenIdx(sheet, topLeftIdx[1], true, 'columns');
            }
            this.scrollNavigation(actIdxes);
            var range_1 = getRangeAddress(actIdxes);
            var navigateFn = function (preventAnimation) {
                if (range_1 === sheet.selectedRange) {
                    return;
                }
                _this.parent.selectionModule.previousActiveCell = sheet.activeCell;
                if (document.getElementsByClassName('e-addNoteContainer') && document.getElementsByClassName('e-addNoteContainer').length > 0) {
                    _this.parent.notify(removeNoteContainer, '');
                }
                _this.parent.setSheetPropertyOnMute(sheet, 'activeCell', range_1);
                _this.parent.notify(cellNavigate, { range: actIdxes.concat(actIdxes), preventAnimation: preventAnimation });
                var ele;
                if (Browser.isDevice && Browser.info.name === 'safari' && (Browser.isIos || Browser.isIos7)) {
                    ele = _this.parent.element.querySelector('.e-ss-focus-edit');
                }
                ele = ele || _this.parent.getCell(actIdxes[0], actIdxes[1]);
                if (ele) {
                    focus(ele);
                }
            };
            if (this.parent.scrollModule && this.parent.scrollModule.isKeyScroll) {
                if (range_1 === sheet.selectedRange) {
                    return;
                }
                getUpdateUsingRaf(navigateFn.bind(this, true));
            }
            else {
                navigateFn();
            }
        }
        else if (e.keyCode === 9) {
            var ribbon = this.parent.showRibbon && closest(document.activeElement, '.e-ribbon');
            if (ribbon) {
                if (closest(document.activeElement, '.e-tab-header')) {
                    if (e.shiftKey || ribbon.classList.contains('e-collapsed')) {
                        this.focusEle(e, '.e-ribbon .e-drop-icon');
                    }
                    else {
                        this.focusEle(e, '.e-ribbon .e-content .e-toolbar-item:not(.e-separator):not(.e-overlay):not(.e-hide) .e-btn');
                    }
                }
                else if (closest(document.activeElement, '.e-content')) {
                    if (e.shiftKey) {
                        this.focusEle(e, '.e-ribbon .e-toolbar-items .e-toolbar-item.e-active .e-tab-wrap', true);
                    }
                    else {
                        this.focusEle(e, '.e-ribbon .e-drop-icon');
                    }
                }
                else if (document.activeElement.classList.contains('e-drop-icon')) {
                    if (e.shiftKey && !ribbon.classList.contains('e-collapsed')) {
                        this.focusEle(e, '.e-ribbon .e-content .e-toolbar-item:not(.e-separator):not(.e-overlay):not(.e-hide) .e-btn');
                    }
                    else {
                        this.focusEle(e, '.e-ribbon .e-toolbar-items .e-toolbar-item.e-active .e-tab-wrap', true);
                    }
                }
            }
            else if (target.classList.contains('e-insert-function')) {
                if (e.shiftKey) {
                    this.focusEle(e, '.e-formula-bar-panel .e-combobox');
                }
                else {
                    this.focusEle(e, '.e-formula-bar', false, true);
                }
            }
            else if (isSheetTabFocus) {
                if (e.shiftKey) {
                    var isNavOrAggregate = target.classList.contains('e-aggregate-list') || target.classList.contains('e-scroll-left-nav');
                    if (target.classList.contains('e-add-sheet-tab') || isNavOrAggregate || (target.classList.contains('e-sheets-list') &&
                        target.previousElementSibling && target.previousElementSibling.disabled)) {
                        var focusEle = !isNavOrAggregate && this.parent.element.querySelector('.e-aggregate-list');
                        if (focusEle) {
                            this.focusEle(e, null, false, false, focusEle);
                        }
                        else if (!target.classList.contains('e-scroll-left-nav') && this.parent.element.querySelector('.e-sheet-tab-panel .e-scroll-nav')) {
                            this.focusEle(e, '.e-sheet-tab-panel .e-scroll-right-nav', true);
                        }
                        else {
                            var items = [].slice.call(this.parent.element.querySelectorAll('.e-sheet-tab-panel .e-toolbar-item'));
                            if (items[items.length - 1]) {
                                this.focusEle(e, null, true, false, items[items.length - 1].querySelector('.e-tab-wrap'));
                            }
                        }
                    }
                    else if (target.classList.contains('e-scroll-right-nav')) {
                        this.focusEle(e, '.e-sheet-tab-panel .e-scroll-left-nav', true);
                    }
                    else if (target.classList.contains('e-tab-wrap')) {
                        var items = [].slice.call(this.parent.element.querySelectorAll('.e-sheet-tab-panel .e-toolbar-item'));
                        var idx = items.indexOf(target.parentElement);
                        if (idx === 0) {
                            this.focusEle(e, '.e-sheet-tab-panel .e-sheets-list');
                        }
                        else {
                            this.focusEle(e, null, true, false, items[idx - 1].querySelector('.e-tab-wrap'));
                        }
                    }
                }
                else {
                    var isAggAvail = !!this.parent.element.querySelector('.e-aggregate-list');
                    if (target.classList.contains('e-aggregate-list') || (!isAggAvail && target.classList.contains('e-scroll-right-nav'))) {
                        this.focusEle(e, '.e-sheet-tab-panel .e-icon-btn:not(:disabled)');
                    }
                    else if (target.classList.contains('e-sheets-list')) {
                        this.focusEle(e, '.e-sheet-tab-panel .e-toolbar-item .e-tab-wrap', true);
                    }
                    else if (target.classList.contains('e-scroll-left-nav')) {
                        this.focusEle(e, '.e-sheet-tab-panel .e-scroll-right-nav', true);
                    }
                    else if (target.classList.contains('e-tab-wrap')) {
                        var items = [].slice.call(this.parent.element.querySelectorAll('.e-sheet-tab-panel .e-toolbar-item'));
                        var index = items.indexOf(target.parentElement);
                        if (index === items.length - 1) {
                            var isNav = !!this.parent.element.querySelector('.e-sheet-tab-panel .e-scroll-nav');
                            if (isNav || !isAggAvail) {
                                this.focusEle(e, ".e-sheet-tab-panel ." + (isNav ? 'e-scroll-nav' : 'e-icon-btn:not(:disabled)'), isNav);
                            }
                        }
                        else {
                            this.focusEle(e, null, true, false, items[index + 1].querySelector('.e-tab-wrap'));
                        }
                    }
                }
            }
        }
        if (e.keyCode === 121 && e.shiftKey && !this.parent.enableKeyboardShortcut) { /*Shift + F10*/
            e.preventDefault();
        }
    };
    KeyboardNavigation.prototype.setFocus = function (layout, e, isSheetArea) {
        if (layout === 'Sheet') {
            if (e.shiftKey) {
                if (this.parent.showFormulaBar) {
                    this.focusEle(e, '.e-formula-bar-panel .e-combobox');
                }
                else {
                    this.setFocus('FormulaBar', e, isSheetArea);
                }
            }
            else {
                if (this.parent.showSheetTabs) {
                    this.focusEle(e, '.e-sheet-tab-panel .e-icon-btn:not(:disabled)');
                }
                else {
                    this.setFocus('SheetTabs', e, isSheetArea);
                }
            }
        }
        else if (layout === 'SheetTabs') {
            if (e.shiftKey) {
                if (!isSheetArea) {
                    this.focusEle(e, '.e-selectall');
                }
            }
            else {
                if (this.parent.showRibbon) {
                    this.focusEle(e, '.e-ribbon .e-toolbar-items .e-toolbar-item.e-active .e-tab-wrap', true);
                }
                else {
                    this.setFocus('Ribbon', e, isSheetArea);
                }
            }
        }
        else if (layout === 'Ribbon') {
            if (e.shiftKey) {
                if (this.parent.showSheetTabs) {
                    this.focusEle(e, '.e-sheet-tab-panel .e-icon-btn:not(:disabled)');
                }
                else if (!isSheetArea) {
                    this.focusEle(e, '.e-selectall');
                }
            }
            else {
                if (this.parent.showFormulaBar) {
                    this.focusEle(e, '.e-formula-bar-panel .e-combobox');
                }
                else {
                    this.setFocus('FormulaBar', e, isSheetArea);
                }
            }
        }
        else if (layout === 'FormulaBar') {
            if (e.shiftKey) {
                if (this.parent.showRibbon) {
                    this.focusEle(e, '.e-ribbon .e-toolbar-items .e-toolbar-item.e-active .e-tab-wrap', true);
                }
                else {
                    this.setFocus('Ribbon', e, isSheetArea);
                }
            }
            else if (!isSheetArea) {
                this.focusEle(e, '.e-selectall');
            }
        }
    };
    KeyboardNavigation.prototype.focusEle = function (e, selector, setTabIndex, startEdit, focusEle) {
        focusEle = focusEle || this.parent.element.querySelector(selector);
        if (setTabIndex && !focusEle) {
            var tabEle = this.parent.element.querySelector('.e-ribbon .e-tab');
            var selectedTab = (tabEle && getComponent(tabEle, 'tab').selectedItem) || 0;
            focusEle = this.parent.element.querySelector('.e-tab-header').getElementsByClassName('e-toolbar-item')[selectedTab];
            focusEle = focusEle && focusEle.querySelector('.e-tab-wrap');
        }
        if (focusEle) {
            e.preventDefault();
            if (startEdit) {
                focusEle.click();
                focus(focusEle);
                focusEle.setSelectionRange(focusEle.value.length, focusEle.value.length);
            }
            else if (setTabIndex) {
                focusEle.setAttribute('tabindex', '0');
                if (focusEle.parentElement.classList.contains('e-active') && focusEle.parentElement.classList.contains('e-toolbar-item')) {
                    var tabEle = this.parent.element.querySelector('.e-sheet-tab-panel .e-sheet-tab');
                    if (!tabEle && tabEle.classList.contains('e-focused')) {
                        tabEle.classList.add('e-focused');
                    }
                }
                focusEle.focus();
            }
            else {
                focus(focusEle);
            }
        }
    };
    KeyboardNavigation.prototype.updateSelection = function (sheet, range, e) {
        if (sheet.isProtected && !sheet.protectSettings.selectCells && sheet.protectSettings.selectUnLockedCells) {
            if (!isLockedCells(this.parent, getSwapRange(range))) {
                this.parent.notify(cellNavigate, { range: range, shiftKey: e.shiftKey });
            }
        }
        else {
            this.parent.notify(cellNavigate, { range: range, shiftKey: e.shiftKey });
        }
    };
    KeyboardNavigation.prototype.getNextNonEmptyCell = function (rowIdx, colIdx, position) {
        var sheet = this.parent.getActiveSheet();
        var isNonEmptyCell = function (rowIdx, colIdx) {
            var cellVal = getCell(rowIdx, colIdx, sheet, null, true).value;
            return !isNullOrUndefined(cellVal) && cellVal !== '';
        };
        var checkForEmptyCell;
        var visibleIdx;
        if (position === 'down') {
            var startRow = skipHiddenIdx(sheet, rowIdx + 1, true);
            checkForEmptyCell = isNonEmptyCell(startRow, colIdx);
            var lastRow = skipHiddenIdx(sheet, sheet.rowCount - 1, false);
            for (var rowIdx_1 = startRow; rowIdx_1 < sheet.rowCount; rowIdx_1++) {
                if (rowIdx_1 === lastRow) {
                    return rowIdx_1;
                }
                if (checkForEmptyCell) {
                    if (!isNonEmptyCell(skipHiddenIdx(sheet, rowIdx_1, true), colIdx)) {
                        return skipHiddenIdx(sheet, rowIdx_1 - 1, false);
                    }
                }
                else {
                    visibleIdx = skipHiddenIdx(sheet, rowIdx_1 + 1, true);
                    if (isNonEmptyCell(visibleIdx, colIdx)) {
                        return visibleIdx;
                    }
                }
            }
            return rowIdx;
        }
        else if (position === 'top') {
            var startRow = skipHiddenIdx(sheet, rowIdx - 1, false);
            checkForEmptyCell = isNonEmptyCell(startRow, colIdx);
            var startIdx = this.parent.frozenRowCount(sheet) ? getRangeIndexes(sheet.topLeftCell)[0] : 0;
            var endIdx = skipHiddenIdx(sheet, startIdx, true);
            for (var rowIdx_2 = startRow; rowIdx_2 >= 0; rowIdx_2--) {
                if (rowIdx_2 === endIdx) {
                    return rowIdx_2;
                }
                if (checkForEmptyCell) {
                    if (!isNonEmptyCell(skipHiddenIdx(sheet, rowIdx_2, false), colIdx)) {
                        return skipHiddenIdx(sheet, rowIdx_2 + 1, true);
                    }
                }
                else {
                    visibleIdx = skipHiddenIdx(sheet, rowIdx_2 - 1, false);
                    if (isNonEmptyCell(visibleIdx, colIdx)) {
                        return visibleIdx;
                    }
                }
            }
            return rowIdx;
        }
        else if (position === 'right') {
            var startCol = skipHiddenIdx(sheet, colIdx + 1, true, 'columns');
            checkForEmptyCell = isNonEmptyCell(rowIdx, startCol);
            var lastCol = skipHiddenIdx(sheet, sheet.colCount - 1, false, 'columns');
            for (var colIdx_1 = startCol; colIdx_1 < sheet.colCount; colIdx_1++) {
                if (colIdx_1 === lastCol) {
                    return colIdx_1;
                }
                if (checkForEmptyCell) {
                    if (!isNonEmptyCell(rowIdx, skipHiddenIdx(sheet, colIdx_1, true, 'columns'))) {
                        return skipHiddenIdx(sheet, colIdx_1 - 1, false, 'columns');
                    }
                }
                else {
                    visibleIdx = skipHiddenIdx(sheet, colIdx_1 + 1, true, 'columns');
                    if (isNonEmptyCell(rowIdx, visibleIdx)) {
                        return visibleIdx;
                    }
                }
            }
            return colIdx;
        }
        else {
            var startCol = skipHiddenIdx(sheet, colIdx - 1, false, 'columns');
            checkForEmptyCell = isNonEmptyCell(rowIdx, startCol);
            var startIdx = this.parent.frozenColCount(sheet) ? getRangeIndexes(sheet.topLeftCell)[1] : 0;
            var endIdx = skipHiddenIdx(sheet, startIdx, true, 'columns');
            for (var colIdx_2 = startCol; colIdx_2 >= 0; colIdx_2--) {
                if (colIdx_2 === endIdx) {
                    return colIdx_2;
                }
                if (checkForEmptyCell) {
                    if (!isNonEmptyCell(rowIdx, skipHiddenIdx(sheet, colIdx_2, false, 'columns'))) {
                        return skipHiddenIdx(sheet, colIdx_2 + 1, true, 'columns');
                    }
                }
                else {
                    visibleIdx = skipHiddenIdx(sheet, colIdx_2 - 1, false, 'columns');
                    if (isNonEmptyCell(rowIdx, visibleIdx)) {
                        return visibleIdx;
                    }
                }
            }
            return colIdx;
        }
    };
    KeyboardNavigation.prototype.getNextUnlockedCell = function (position, actCellIdx) {
        var sheet = this.parent.getActiveSheet();
        var cell;
        var col;
        if (position === 'right') {
            var rowIdx = actCellIdx[0];
            var colIdx = void 0;
            var secIteration = void 0;
            var rowLen = sheet.usedRange.rowIndex;
            var colLen = sheet.usedRange.colIndex;
            while (rowIdx <= rowLen) {
                colIdx = colIdx === undefined ? actCellIdx[1] + 1 : 0;
                if (secIteration && rowIdx === actCellIdx[0]) {
                    colLen = actCellIdx[1] - 1;
                }
                for (colIdx; colIdx <= colLen; colIdx++) {
                    cell = getCell(rowIdx, colIdx, sheet);
                    col = getColumn(sheet, colIdx) || {};
                    if (!isLocked(cell, col) && !col.hidden && !isHiddenRow(sheet, rowIdx)) {
                        return [rowIdx, colIdx];
                    }
                }
                if (rowIdx === sheet.usedRange.rowIndex && !secIteration) {
                    rowIdx = 0;
                    rowLen = actCellIdx[0];
                    secIteration = true;
                }
                else {
                    rowIdx++;
                }
            }
        }
        else if (position === 'left') {
            var rowIdx = actCellIdx[0];
            var colIdx = void 0;
            var secIteration = void 0;
            var rowLen = 0;
            var colLen = 0;
            while (rowIdx >= rowLen) {
                colIdx = colIdx === undefined ? actCellIdx[1] - 1 : sheet.usedRange.colIndex;
                if (secIteration && rowIdx === actCellIdx[0]) {
                    colLen = actCellIdx[1] + 1;
                }
                for (colIdx; colIdx >= colLen; colIdx--) {
                    cell = getCell(rowIdx, colIdx, sheet);
                    col = getColumn(sheet, colIdx) || {};
                    if (!isLocked(cell, col) && !col.hidden && !isHiddenRow(sheet, rowIdx)) {
                        return [rowIdx, colIdx];
                    }
                }
                if (rowIdx === 0 && !secIteration) {
                    rowIdx = sheet.usedRange.rowIndex;
                    rowLen = actCellIdx[0];
                    secIteration = true;
                }
                else {
                    rowIdx--;
                }
            }
        }
        else if (position === 'down') {
            var colIdx = actCellIdx[1];
            var rowIdx = void 0;
            var secIteration = void 0;
            var colLen = sheet.usedRange.colIndex;
            var rowLen = sheet.usedRange.rowIndex;
            while (colIdx <= colLen) {
                rowIdx = rowIdx === undefined ? actCellIdx[0] + 1 : 0;
                if (secIteration && colIdx === actCellIdx[1]) {
                    rowLen = actCellIdx[0] - 1;
                }
                for (rowIdx; rowIdx <= rowLen; rowIdx++) {
                    cell = getCell(rowIdx, colIdx, sheet);
                    col = getColumn(sheet, colIdx) || {};
                    if (!isLocked(cell, col) && !col.hidden && !isHiddenRow(sheet, rowIdx)) {
                        return [rowIdx, colIdx];
                    }
                }
                if (colIdx === sheet.usedRange.colIndex && !secIteration) {
                    colIdx = 0;
                    colLen = actCellIdx[1];
                    secIteration = true;
                }
                else {
                    colIdx++;
                }
            }
        }
        else {
            var colIdx = actCellIdx[1];
            var rowIdx = void 0;
            var secIteration = void 0;
            var colLen = 0;
            var rowLen = 0;
            while (colIdx >= colLen) {
                rowIdx = rowIdx === undefined ? actCellIdx[0] - 1 : sheet.usedRange.rowIndex;
                if (secIteration && colIdx === actCellIdx[1]) {
                    rowLen = actCellIdx[0] + 1;
                }
                for (rowIdx; rowIdx >= rowLen; rowIdx--) {
                    cell = getCell(rowIdx, colIdx, sheet);
                    col = getColumn(sheet, colIdx) || {};
                    if (!isLocked(cell, col) && !col.hidden && !isHiddenRow(sheet, rowIdx)) {
                        return [rowIdx, colIdx];
                    }
                }
                if (colIdx === 0 && !secIteration) {
                    colIdx = sheet.usedRange.colIndex;
                    colLen = actCellIdx[1];
                    secIteration = true;
                }
                else {
                    colIdx--;
                }
            }
        }
        return actCellIdx;
    };
    KeyboardNavigation.prototype.shiftSelection = function (e) {
        var sheet = this.parent.getActiveSheet();
        var selectedRange = getRangeIndexes(sheet.selectedRange);
        var swapRange = getSwapRange(selectedRange);
        var noHidden = true;
        var isRtl = this.parent.enableRtl;
        if (e.keyCode === 38) { /*shift + up arrow*/
            for (var i = swapRange[1]; i <= swapRange[3]; i++) {
                var cell = getCell(selectedRange[2], i, sheet);
                if (!isNullOrUndefined(cell) && cell.rowSpan && cell.rowSpan < 0) {
                    selectedRange[2] = skipHiddenIdx(sheet, selectedRange[2] - (Math.abs(cell.rowSpan) + 1), false);
                    noHidden = false;
                    break;
                }
            }
            if (noHidden) {
                selectedRange[2] = skipHiddenIdx(sheet, selectedRange[2] - 1, false);
            }
            var startIdx = this.parent.frozenRowCount(sheet) ? getRangeIndexes(sheet.topLeftCell)[0] : 0;
            if (selectedRange[2] < startIdx) {
                return;
            }
        }
        if (e.keyCode === 40) { /*shift + down arrow*/
            for (var i = swapRange[1]; i <= swapRange[3]; i++) {
                var cell = getCell(selectedRange[2], i, sheet);
                if (!isNullOrUndefined(cell) && cell.rowSpan && cell.rowSpan > 0) {
                    selectedRange[2] = skipHiddenIdx(sheet, selectedRange[2] + Math.abs(cell.rowSpan), true);
                    noHidden = false;
                    break;
                }
            }
            if (noHidden) {
                selectedRange[2] = skipHiddenIdx(sheet, selectedRange[2] + 1, true);
            }
            if (selectedRange[2] >= sheet.rowCount) {
                selectedRange[2] = skipHiddenIdx(sheet, sheet.rowCount - 1, false);
                if (selectedRange[2] < 0) {
                    return;
                }
            }
        }
        if ((e.keyCode === 39 && !isRtl) || (e.keyCode === 37 && isRtl)) { /*shift + right arrow*/
            for (var i = swapRange[0]; i <= swapRange[2]; i++) {
                var cell = getCell(i, selectedRange[3], sheet);
                if (!isNullOrUndefined(cell) && cell.colSpan && cell.colSpan > 0) {
                    selectedRange[3] = skipHiddenIdx(sheet, selectedRange[3] + Math.abs(cell.colSpan), true, 'columns');
                    noHidden = false;
                    break;
                }
            }
            if (noHidden) {
                selectedRange[3] = skipHiddenIdx(sheet, selectedRange[3] + 1, true, 'columns');
            }
            if (selectedRange[3] >= sheet.colCount) {
                selectedRange[3] = skipHiddenIdx(sheet, sheet.colCount - 1, false, 'columns');
                if (selectedRange[3] < 0) {
                    return;
                }
            }
        }
        if ((e.keyCode === 37 && !isRtl) || (e.keyCode === 39 && isRtl)) { /*shift + left arrow*/
            for (var i = swapRange[0]; i <= swapRange[2]; i++) {
                var cell = getCell(i, selectedRange[3], sheet);
                if (!isNullOrUndefined(cell) && cell.colSpan && cell.colSpan < 0) {
                    selectedRange[3] = skipHiddenIdx(sheet, selectedRange[3] - (Math.abs(cell.colSpan) + 1), false, 'columns');
                    noHidden = false;
                    break;
                }
            }
            if (noHidden) {
                selectedRange[3] = skipHiddenIdx(sheet, selectedRange[3] - 1, false, 'columns');
            }
            var startIdx = this.parent.frozenColCount(sheet) ? getRangeIndexes(sheet.topLeftCell)[1] : 0;
            if (selectedRange[3] < startIdx) {
                return;
            }
        }
        if (!this.parent.scrollSettings.enableVirtualization && e.shiftKey && e.ctrlKey) { /*ctrl + shift selection*/
            var usedRange = [sheet.usedRange.rowIndex, sheet.usedRange.colIndex];
            if (e.keyCode === 37) {
                if (selectedRange[3] <= usedRange[1]) {
                    selectedRange[3] = skipHiddenIdx(sheet, 0, true, 'columns');
                }
                else {
                    selectedRange[3] = skipHiddenIdx(sheet, usedRange[1], true, 'columns');
                }
            }
            if (e.keyCode === 38) {
                if (selectedRange[2] <= usedRange[0]) {
                    selectedRange[2] = skipHiddenIdx(sheet, 0, true);
                }
                else {
                    selectedRange[2] = skipHiddenIdx(sheet, usedRange[0], true);
                }
            }
            if (e.keyCode === 39) {
                if (selectedRange[3] <= usedRange[1]) {
                    selectedRange[3] = skipHiddenIdx(sheet, usedRange[1], false, 'columns');
                }
                else {
                    selectedRange[3] = skipHiddenIdx(sheet, sheet.colCount, false, 'columns');
                }
                if (selectedRange[3] < 0) {
                    return;
                }
            }
            if (e.keyCode === 40) {
                if (selectedRange[2] <= usedRange[0]) {
                    selectedRange[2] = skipHiddenIdx(sheet, usedRange[0], false);
                }
                else {
                    selectedRange[2] = skipHiddenIdx(sheet, sheet.rowCount, false);
                }
                if (selectedRange[2] < 0) {
                    return;
                }
            }
        }
        if (e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 38 || e.keyCode === 40) { /*left,right,up,down*/
            var activeIdxes = getCellIndexes(sheet.activeCell);
            if (this.parent.isEdit && e.shiftKey) {
                e.preventDefault();
                this.parent.notify(rangeSelectionByKeydown, { range: selectedRange, e: e });
                this.parent.notify(addressHandle, { range: getRangeAddress(getSwapRange(selectedRange)), isSelect: false });
                this.parent.notify(initiateCur, {});
            }
            else {
                this.parent.notify(cellNavigate, { range: selectedRange, shiftKey: e.shiftKey });
            }
            this.scrollNavigation([isColumnSelected(sheet, selectedRange) ? activeIdxes[0] : selectedRange[2],
                isRowSelected(sheet, selectedRange) ? activeIdxes[1] : selectedRange[3]]);
        }
    };
    KeyboardNavigation.prototype.scrollNavigation = function (actIdxes, scrollToCell) {
        if (!this.parent.allowScrolling) {
            return;
        }
        var x = this.parent.enableRtl ? -1 : 1;
        var cont = this.parent.getMainContent().parentElement;
        var hCont = this.parent.getScrollElement();
        var sheet = this.parent.getActiveSheet();
        var selectedRange = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var topLeftIdxes = getCellIndexes(sheet.topLeftCell);
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        var paneTopLeftIdxes = getCellIndexes(sheet.paneTopLeftCell);
        var topIdx = skipHiddenIdx(sheet, actIdxes[0] < frozenRow ? topLeftIdxes[0] : paneTopLeftIdxes[0], true);
        var offsetTopSize = this.parent.scrollModule.offset.top.size;
        if (cont.scrollTop) {
            if (frozenRow && actIdxes[0] !== selectedRange[2]) {
                if (actIdxes[0] === frozenRow) {
                    cont.scrollTop = 0;
                    return;
                }
                if (actIdxes[0] === frozenRow - 1) {
                    cont.scrollTop = 0;
                }
            }
            else if (actIdxes[0] === skipHiddenIdx(sheet, 0, true)) {
                cont.scrollTop = 0;
                return;
            }
        }
        if (hCont && hCont.scrollLeft) {
            if (frozenCol && actIdxes[1] !== selectedRange[3]) {
                if (actIdxes[1] === frozenCol) {
                    hCont.scrollLeft = 0;
                    return;
                }
                if (actIdxes[1] === frozenCol - 1) {
                    hCont.scrollLeft = 0;
                }
            }
            else if (actIdxes[1] === skipHiddenIdx(sheet, 0, true, 'columns')) {
                hCont.scrollLeft = 0;
                return;
            }
        }
        var viewportBtmIdx = getBottomOffset(this.parent, topIdx).index;
        if (viewportBtmIdx <= actIdxes[0]) {
            if (actIdxes[0] >= frozenRow) {
                if (scrollToCell) {
                    var viewPortHeight = cont.getBoundingClientRect().height;
                    var rowsHeight = getRowsHeight(sheet, paneTopLeftIdxes[0], actIdxes[0], true);
                    if (rowsHeight > viewPortHeight * 2) {
                        cont.scrollTop = offsetTopSize + rowsHeight - viewPortHeight;
                    }
                    else {
                        cont.scrollTop = offsetTopSize + rowsHeight - getRowHeight(sheet, actIdxes[0], true);
                    }
                    focus(this.parent.element);
                }
                else {
                    cont.scrollTop = offsetTopSize + getRowsHeight(sheet, viewportBtmIdx, actIdxes[0], true);
                }
            }
        }
        else if (topIdx > actIdxes[0]) {
            if (cont.scrollTop) {
                this.parent.scrollModule.isKeyScroll = false;
            }
            cont.scrollTop = offsetTopSize - Math.ceil(getRowsHeight(sheet, actIdxes[0], topIdx - 1, true));
            if (scrollToCell) {
                focus(this.parent.element);
            }
        }
        var scrollLeftIdx = getRightIdx(this.parent, paneTopLeftIdxes[1]);
        if (scrollLeftIdx <= actIdxes[1] && hCont) {
            if (actIdxes[1] >= frozenCol) {
                if (scrollToCell) {
                    var contWidth = hCont.getBoundingClientRect().width;
                    var scrollWidth = getColumnsWidth(sheet, paneTopLeftIdxes[1], actIdxes[1], true);
                    if (scrollWidth > contWidth * 2) {
                        hCont.scrollLeft = (this.parent.scrollModule.offset.left.size + scrollWidth - contWidth) * x;
                    }
                    else {
                        hCont.scrollLeft = (this.parent.scrollModule.offset.left.size +
                            (scrollWidth - getColumnWidth(sheet, actIdxes[0], null, true))) * x;
                    }
                    focus(this.parent.element);
                }
                else {
                    hCont.scrollLeft = (this.parent.scrollModule.offset.left.size + getColumnsWidth(sheet, scrollLeftIdx, actIdxes[1], true)) * x;
                }
            }
        }
        else if (paneTopLeftIdxes[1] > actIdxes[1] && hCont) {
            if (hCont.scrollLeft) {
                this.parent.scrollModule.isKeyScroll = false;
            }
            hCont.scrollLeft = (this.parent.scrollModule.offset.left.size -
                getColumnsWidth(sheet, actIdxes[1], paneTopLeftIdxes[1] - 1, true)) * x;
            if (scrollToCell) {
                focus(this.parent.element);
            }
        }
    };
    /**
     * For internal use only - Get the module name.
     *
     * @private
     * @returns {string} - Get the module name.
     */
    KeyboardNavigation.prototype.getModuleName = function () {
        return 'keyboardNavigation';
    };
    KeyboardNavigation.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    return KeyboardNavigation;
}());

/**
 * Represents keyboard shortcut support for Spreadsheet.
 */
var KeyboardShortcut = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet Keyboard Shortcut module.
     *
     * @param {Spreadsheet} parent - Specify the spreadsheet.
     * @private
     */
    function KeyboardShortcut(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    KeyboardShortcut.prototype.addEventListener = function () {
        this.parent.on(keyDown, this.keyDownHandler, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
    };
    KeyboardShortcut.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(keyDown, this.keyDownHandler);
            this.parent.off(keyUp, this.keyUpHandler);
        }
    };
    KeyboardShortcut.prototype.isTrgtNotInput = function (e) {
        var trgt = e.target;
        return (!closest(trgt, '.e-filter-popup')
            && !closest(trgt, '.e-find-dlg') && !closest(trgt, '.e-hyperlink-dlg') &&
            !closest(trgt, '.e-sheet-tab') && !closest(trgt, '.e-name-box') && !closest(trgt, '.e-link-dialog'));
    };
    KeyboardShortcut.prototype.ribbonShortCuts = function (e) {
        if (this.parent.showRibbon && e.altKey && !e.ctrlKey && !e.shiftKey) {
            var tabObj = getComponent(this.parent.element.querySelector('.e-ribbon .e-tab'), 'tab');
            var tabIdx = void 0;
            if (e.keyCode === 72) { /*alt + H =home*/
                tabIdx = 1;
            }
            else if (e.keyCode === 78) { /*alt + N =insert */
                tabIdx = 2;
            }
            else if (e.keyCode === 65) { /*alt + A =data */
                tabIdx = 4;
            }
            else if (e.keyCode === 87) { /*alt + W =view*/
                tabIdx = 5;
            }
            else if (e.keyCode === 77) { /*alt + M =formula */
                tabIdx = 3;
            }
            else if (e.keyCode === 70) { /*alt + F =file */
                e.preventDefault();
                select('#' + this.parent.element.id + '_File', this.parent.element).click();
            }
            else if (e.keyCode === 18) { /** alt = active tab focus */
                e.preventDefault();
                var activeCell = getCellIndexes(this.parent.getActiveSheet().activeCell);
                var args = { sheetIdx: this.parent.activeSheetIndex };
                this.parent.notify(getFilterRange, args);
                if (!(args.hasFilter && args.filterRange && args.filterRange[0] === activeCell[0] && args.filterRange[1] <= activeCell[1] &&
                    args.filterRange[3] >= activeCell[1])) {
                    var actEle = document.activeElement;
                    if (!actEle.classList.contains('e-spreadsheet-edit') && !actEle.classList.contains('e-sheet-rename') &&
                        actEle.id !== this.parent.element.id + "_name_box" && !closest(actEle, '.e-dropdown-btn') &&
                        !closest(actEle, '.e-split-btn') && !closest(actEle, '.e-popup-open')) {
                        var cell = this.parent.getCell(activeCell[0], activeCell[1]);
                        if (cell && cell.querySelector('.e-validation-list')) {
                            return;
                        }
                        if (closest(actEle, '.e-ribbon')) {
                            focus(this.parent.element);
                            return;
                        }
                        for (var i = 0; i <= this.parent.ribbonModule.ribbon.items.length; i++) {
                            if (i === this.parent.ribbonModule.ribbon.selectedTab) {
                                var focusEle = this.parent.element.querySelector('.e-toolbar-items').children[i + 2].children[0];
                                focusEle.setAttribute('tabindex', '0');
                                focus(focusEle);
                                return;
                            }
                        }
                    }
                }
            }
            if (tabIdx) {
                if (!tabObj.items[tabIdx].disabled && !tabObj.items[tabIdx].cssClass.includes('e-hide')) {
                    e.preventDefault();
                    tabObj.select(tabIdx, Object.assign(e, { isShortcut: true }));
                }
                else {
                    focus(this.parent.element);
                }
            }
        }
    };
    KeyboardShortcut.prototype.keyUpHandler = function (e) {
        if (e.keyCode === 37 || e.keyCode === 39) {
            var activeEle = document.activeElement;
            if (activeEle.classList.contains('e-colorpicker-wrapper') || activeEle.classList.contains('e-split-btn-wrapper')) {
                var colorPickerBtn = activeEle.querySelector('.e-split-btn');
                if (colorPickerBtn) {
                    focus(colorPickerBtn);
                }
            }
        }
        else if (e.keyCode === 13) {
            var target_1 = e.target;
            if (target_1.classList.contains('e-scroll-nav')) {
                var focusScroll_1 = function () {
                    if (!target_1.getAttribute('tabindex')) {
                        target_1.setAttribute('tabindex', '0');
                        focus(target_1);
                    }
                    EventHandler.remove(target_1, 'blur', focusScroll_1);
                };
                EventHandler.add(target_1, 'blur', focusScroll_1, this);
            }
        }
    };
    KeyboardShortcut.prototype.keyDownHandler = function (e) {
        var isSelectionNone = this.parent.selectionSettings.mode === 'None';
        this.ribbonShortCuts(e);
        var sheet = this.parent.getActiveSheet();
        var target = e.target;
        var textarea = e.target;
        if (!isNullOrUndefined(textarea) && textarea.classList.contains('e-addNoteContainer')) {
            return;
        }
        if ((e.ctrlKey || e.metaKey) && this.isTrgtNotInput(e)) {
            if (!closest(target, '.e-find-dlg') && !isSelectionNone) {
                if ([79, 83].indexOf(e.keyCode) > -1) {
                    e.preventDefault();
                }
                else if (e.keyCode === 65 && !this.parent.isEdit) {
                    e.preventDefault();
                }
            }
            var indexes = getCellIndexes(sheet.activeCell);
            if (e.keyCode === 79) { /*Ctrl + O*/
                if (this.parent.allowOpen && this.parent.openUrl) {
                    select('#' + this.parent.element.id + '_fileUpload', this.parent.element).click();
                }
            }
            else if (e.keyCode === 83) { /*Ctrl + S*/
                if (this.parent.saveUrl && this.parent.allowSave) {
                    this.parent.notify(exportDialog, null);
                }
            }
            else if (e.keyCode === 67 && !isSelectionNone) { /*Ctrl + C*/
                this.parent.notify(copy, { promise: Promise });
            }
            else if (e.keyCode === 75 && !isSelectionNone) { /*Ctrl + K*/
                var row = sheet.rows[indexes[0]];
                var cell = void 0;
                e.preventDefault();
                if (!isNullOrUndefined(row)) {
                    cell = row.cells[indexes[1]];
                }
                if (isNullOrUndefined(cell)) {
                    setCell(indexes[0], indexes[1], sheet, cell, false);
                }
                if (cell && cell.hyperlink) {
                    this.parent.notify(editHyperlink, null);
                }
                else {
                    this.parent.notify(initiateHyperlink, null);
                }
            }
            else if (e.keyCode === 90 && !isSelectionNone) { /* Ctrl + Z */
                if (!this.parent.isEdit) {
                    e.preventDefault();
                    this.parent.notify(performUndoRedo, { isUndo: true });
                }
            }
            else if (e.keyCode === 89 && !isSelectionNone) { /* Ctrl + Y */
                if (!this.parent.isEdit) {
                    e.preventDefault();
                    this.parent.notify(performUndoRedo, { isUndo: false });
                }
            }
            else if ((e.keyCode === 82 || e.keyCode === 68) && !isSelectionNone) { /* Ctrl + R */ /* Ctrl + D */
                e.preventDefault();
                var selectRange = getSwapRange(getRangeIndexes(sheet.selectedRange));
                var startCell = { colIndex: selectRange[1], rowIndex: selectRange[0] };
                var direction = void 0;
                var dataRange = void 0;
                if (e.keyCode === 68) {
                    if (selectRange[0] === selectRange[2]) {
                        startCell.rowIndex = selectRange[0] - 1;
                    }
                    else {
                        selectRange[0] += 1;
                    }
                    dataRange = getRangeAddress([startCell.rowIndex, startCell.colIndex, startCell.rowIndex, selectRange[3]]);
                    direction = 'Down';
                }
                else {
                    if (selectRange[1] === selectRange[3]) {
                        startCell.colIndex = selectRange[1] - 1;
                    }
                    else {
                        selectRange[1] += 1;
                    }
                    direction = 'Right';
                    dataRange = getRangeAddress([startCell.rowIndex, startCell.colIndex, selectRange[2], startCell.colIndex]);
                }
                if (startCell.rowIndex < 0 || startCell.colIndex < 0) {
                    return;
                }
                this.parent.notify(performAutoFill, {
                    fillType: getCell(startCell.rowIndex, startCell.colIndex, sheet, false, true).formula ? 'FillSeries' : 'CopyCells',
                    dAutoFillCell: dataRange, rangeInfo: {
                        direction: direction, startCell: startCell,
                        endCell: { rowIndex: selectRange[2], colIndex: selectRange[3] }, fillRange: selectRange
                    }
                });
                this.parent.notify(selectionComplete, { type: 'mousedown' });
                this.parent.notify(refreshRibbonIcons, null);
            }
            var isLocked$1 = sheet.isProtected && isLocked(getCell(indexes[0], indexes[1], sheet), getColumn(sheet, indexes[1]));
            if (e.keyCode === 70 && !isSelectionNone && this.parent.allowFindAndReplace) { /* Ctrl + F */
                e.preventDefault();
                this.parent.notify(findToolDlg, {});
            }
            if ((!isLocked$1 || !sheet.isProtected || e.keyCode === 86) && e.keyCode !== 70 && !isSelectionNone) {
                if (e.keyCode === 71) { /* Ctrl + G */
                    e.preventDefault();
                    this.parent.notify(gotoDlg, null);
                }
                else if (e.keyCode === 72) { /* Ctrl + H */
                    e.preventDefault();
                    this.parent.notify(findDlg, null);
                }
                else if (e.keyCode === 88) { /* Ctrl + X */
                    this.parent.notify(cut, { promise: Promise });
                }
                else if (e.keyCode === 86) { /* Ctrl + v */
                    this.parent.notify(paste, { isAction: true });
                }
                if (e.shiftKey && e.keyCode === 76 && !this.parent.isEdit && !sheet.isProtected) { /* Ctrl + Shift + L */
                    e.preventDefault();
                    this.parent.notify(initiateFilterUI, {});
                }
            }
            if (!isSelectionNone && (!sheet.isProtected || sheet.protectSettings.formatCells)) {
                if (e.keyCode === 66) { /* Ctrl + B */
                    e.preventDefault();
                    var value = this.parent.getCellStyleValue(['fontWeight'], indexes).fontWeight;
                    value = value === 'bold' ? 'normal' : 'bold';
                    this.parent.notify(setCellFormat, { style: { fontWeight: value }, onActionUpdate: true, refreshRibbon: true });
                }
                else if (e.keyCode === 73) { /* Ctrl + I */
                    e.preventDefault();
                    var value = this.parent.getCellStyleValue(['fontStyle'], indexes).fontStyle;
                    value = value === 'italic' ? 'normal' : 'italic';
                    this.parent.notify(setCellFormat, { style: { fontStyle: value }, onActionUpdate: true, refreshRibbon: true });
                }
                else if (e.ctrlKey && e.keyCode === 85 && !e.shiftKey) { /* Ctrl + U */
                    e.preventDefault();
                    this.parent.notify(textDecorationUpdate, { style: { textDecoration: 'underline' }, refreshRibbon: true });
                }
                else if (e.ctrlKey && e.keyCode === 53 && !e.shiftKey) { /* Ctrl + 5 */
                    e.preventDefault();
                    this.parent.notify(textDecorationUpdate, { style: { textDecoration: 'line-through' }, refreshRibbon: true });
                }
            }
        }
        if (e.keyCode === 27) { /*ESC*/
            this.parent.notify(clearCopy, null);
        }
        if ((((e.ctrlKey || e.metaKey) && e.keyCode === 119) || (e.keyCode === 13 && target.classList.contains('e-drop-icon')))
            && this.parent.showRibbon) { /*ctrl + f8 or Enter*/
            e.preventDefault();
            var expandCollapseIcon = this.parent.element.querySelector('.e-drop-icon');
            if (expandCollapseIcon) {
                expandCollapseIcon.click();
            }
        }
        //general key actions
        if ((e.ctrlKey || e.metaKey) && !isSelectionNone) {
            if (e.keyCode === 57) { /*ctrl + 9(row-hide)*/
                if (!sheet.isProtected || sheet.protectSettings.formatRows) {
                    e.preventDefault();
                    var indexes = getRangeIndexes(sheet.selectedRange);
                    this.parent.notify(hideShow, { startIndex: indexes[0], endIndex: indexes[2], hide: !e.shiftKey, isCol: false,
                        actionUpdate: true });
                }
            }
            else if (e.keyCode === 48) { /*ctrl + 0(col-hide)*/
                if (!sheet.isProtected || sheet.protectSettings.formatColumns) {
                    var indexes = getRangeIndexes(sheet.selectedRange);
                    this.parent.notify(hideShow, { startIndex: indexes[1], endIndex: indexes[3], hide: !e.shiftKey, isCol: true,
                        actionUpdate: true });
                }
            }
        }
        if (e.shiftKey && !isSelectionNone) {
            if (e.keyCode === 113 && !sheet.isProtected) { /*shift + F2(Add note)*/
                e.preventDefault();
                if (e.target.children.length > 0 && typeof e.target.children[e.target.children.length - 1].className === 'string' &&
                    e.target.children[e.target.children.length - 1].className.indexOf('e-addNoteIndicator') > -1) {
                    this.parent.notify(editNote, null);
                }
                else {
                    this.parent.notify(addNote, null);
                }
            }
            else if (e.keyCode === 114) { /*shift + F3(insert-function dialog)*/
                e.preventDefault();
                this.parent.notify(renderInsertDlg, null);
            }
            else if (e.keyCode === 116 && this.parent.allowFindAndReplace) { /* shift + F5 */
                e.preventDefault();
                this.parent.notify(findToolDlg, {});
            }
            else if (e.keyCode === 121) { /* Context menu open Shift+F10 */
                var className_1 = document.activeElement.className;
                if (['e-spreadsheet', 'e-cell', 'e-header-cell', 'e-clipboard', 'e-rowhdr-table', 'e-selectall-table', 'e-main-panel'].some(function (cls) { return className_1.includes(cls); })) {
                    this.focusTarget(sheet);
                }
            }
        }
        if (e.altKey && !isSelectionNone) {
            if ((e.ctrlKey || e.metaKey) && e.keyCode === 78) { /*ctrl+alt+N*/
                e.preventDefault();
                this.parent.refresh(true);
            }
            else if (e.keyCode === 113 && this.parent.saveUrl) { /*alt + F2*/
                e.preventDefault();
                this.parent.notify(exportDialog, null);
            }
        }
        //number-formatting
        if ((e.ctrlKey || e.metaKey) && e.shiftKey && !isSelectionNone) {
            if (!sheet.isProtected || sheet.protectSettings.formatCells) {
                var range = sheet.selectedRange;
                var format = void 0;
                if (e.keyCode === 192) { /*ctrl + shift + ~(General)*/
                    format = 'General';
                }
                else if (e.keyCode === 52) { /*ctrl + shift + $(currency)*/
                    format = getFormatFromType('CurrencyWithColorCode');
                }
                else if (e.keyCode === 53) { /*ctrl + shift + %(percent)*/
                    format = '0%';
                }
                else if (e.keyCode === 54) { /*ctrl + shift + ^(scentific)*/
                    format = getFormatFromType('Scientific');
                }
                else if (e.keyCode === 51) { /*ctrl + shift + #(Date)*/
                    format = 'dd-mmm-yy';
                }
                else if (e.keyCode === 50) { /*ctrl + shift + @(Time)*/
                    format = 'h:mm AM/PM';
                }
                else if (e.keyCode === 49) { /*ctrl + shift + !(Number)*/
                    format = getFormatFromType('Number');
                }
                else if (e.keyCode === 55) { /*ctrl + shift + 7*/
                    e.preventDefault();
                    var border = '1px solid #000000';
                    this.parent.notify(setCellFormat, { style: { border: border }, onActionUpdate: true, borderType: 'Outer' });
                }
                if (format) {
                    var isReadonly = isReadOnlyCells(this.parent, getSwapRange(getRangeIndexes(range)));
                    if (!isReadonly) {
                        var eventArgs = {
                            format: format, range: range, cancel: false, requestType: 'NumberFormat'
                        };
                        var actionArgs = {
                            range: sheet.name + '!' + eventArgs.range, format: eventArgs.format, requestType: 'NumberFormat'
                        };
                        this.parent.trigger('beforeCellFormat', eventArgs);
                        this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'format' });
                        if (!eventArgs.cancel) {
                            this.parent.notify(applyNumberFormatting, eventArgs);
                            this.parent.notify(selectionComplete, { type: 'mousedown' });
                            this.parent.notify(completeAction, { eventArgs: actionArgs, action: 'format' });
                            this.parent.notify(refreshRibbonIcons, null);
                        }
                    }
                }
            }
            if (e.keyCode === 85) { /*ctrl + shift + U*/
                e.preventDefault();
                var formulaExpand = this.parent.element.querySelector('.e-formula-bar-panel .e-drop-icon');
                if (formulaExpand) {
                    formulaExpand.click();
                }
            }
        }
        if (e.keyCode === 122 && e.shiftKey && !e.ctrlKey && !this.parent.isProtected) { // shift+f11
            this.parent.notify(insertModel, {
                model: this.parent, start: this.parent.activeSheetIndex + 1, end: this.parent.activeSheetIndex + 1, modelType: 'Sheet', isAction: true, activeSheetIndex: this.parent.activeSheetIndex + 1
            });
        }
        if (e.shiftKey && e.altKey && e.keyCode === 75 && this.parent.showSheetTabs) { /* Shift + Alt + K*/
            this.parent.element.querySelector('.e-sheets-list').click();
        }
    };
    KeyboardShortcut.prototype.focusTarget = function (sheet) {
        var indexes = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var isRowSelected = (indexes[1] === 0 && indexes[3] === sheet.colCount - 1);
        var isColSelected = (indexes[0] === 0 && indexes[2] === sheet.rowCount - 1);
        var target;
        if (isRowSelected && isColSelected) {
            target = this.parent.element.querySelector('.e-selectall');
        }
        else if (isRowSelected) {
            var frozenRow = this.parent.frozenRowCount(sheet);
            if (indexes[0] < frozenRow) {
                var freezeHdrRow = this.parent.getRow(indexes[0], this.parent.sheetModule.getSelectAllTable());
                target = freezeHdrRow && freezeHdrRow.cells[0];
            }
            else {
                indexes[0] = skipHiddenIdx(sheet, indexes[0], true);
                var topIdx = skipHiddenIdx(sheet, getRangeIndexes(sheet.paneTopLeftCell)[0], true);
                var bottomIdx = getBottomOffset(this.parent, topIdx).index;
                var hdrRow = void 0;
                if (indexes[0] > topIdx && indexes[0] < bottomIdx) {
                    hdrRow = this.parent.getRow(indexes[0], this.parent.getRowHeaderTable());
                }
                else if (indexes[0] >= bottomIdx) {
                    hdrRow = this.parent.getRow(bottomIdx - 1, this.parent.getRowHeaderTable());
                }
                else {
                    hdrRow = this.parent.getRow(topIdx + 1, this.parent.getRowHeaderTable());
                }
                target = hdrRow && hdrRow.cells[0];
            }
        }
        else if (isColSelected) {
            var frozenCol = this.parent.frozenColCount(sheet);
            if (indexes[1] < frozenCol) {
                var freezeHdrRow = this.parent.element.querySelector('.e-selectall-container .e-header-row');
                target = freezeHdrRow && this.parent.getCell(0, indexes[1], freezeHdrRow);
            }
            else {
                indexes[1] = skipHiddenIdx(sheet, indexes[1], true, 'columns');
                var leftIdx = skipHiddenIdx(sheet, getRangeIndexes(sheet.paneTopLeftCell)[1], true, 'columns');
                var rightIdx = getRightIdx(this.parent, leftIdx);
                var hdrRow = this.parent.element.querySelector('.e-column-header .e-header-row');
                if (indexes[1] > leftIdx && indexes[1] < rightIdx) {
                    target = hdrRow && this.parent.getCell(0, indexes[1], hdrRow);
                }
                else if (indexes[1] >= rightIdx) {
                    target = hdrRow && this.parent.getCell(0, rightIdx - 1, hdrRow);
                }
                else {
                    target = hdrRow && this.parent.getCell(0, leftIdx + 1, hdrRow);
                }
            }
        }
        else {
            var topLeftIdx = getRangeIndexes(sheet.paneTopLeftCell);
            target = this.parent.getCell(indexes[0], indexes[1]);
            var frozenRow = this.parent.frozenRowCount(sheet);
            var frozenCol = this.parent.frozenColCount(sheet);
            if (indexes[0] < frozenRow && indexes[1] < frozenCol) {
                target = this.parent.getCell(indexes[0], indexes[1]);
            }
            else if (indexes[0] < frozenRow) {
                var leftIdx = getRangeIndexes(sheet.paneTopLeftCell)[1];
                var rightIdx = getRightIdx(this.parent, leftIdx);
                if (indexes[1] > leftIdx && indexes[1] < rightIdx) {
                    target = this.parent.getCell(indexes[0], indexes[1]);
                }
                else if (indexes[1] >= rightIdx) {
                    target = this.parent.getCell(indexes[0], rightIdx - 1);
                }
                else {
                    target = this.parent.getCell(indexes[0], leftIdx + 1);
                }
            }
            else if (indexes[1] < frozenCol) {
                var topIdx = getRangeIndexes(sheet.paneTopLeftCell)[0];
                var bottomIdx = getBottomOffset(this.parent, topIdx).index;
                if (indexes[0] > topIdx && indexes[0] < bottomIdx) {
                    target = this.parent.getCell(indexes[0], indexes[1]);
                }
                else if (indexes[0] >= bottomIdx) {
                    target = this.parent.getCell(bottomIdx - 1, indexes[1]);
                }
                else {
                    target = this.parent.getCell(topIdx + 1, indexes[1]);
                }
            }
            else {
                var topIdx = getRangeIndexes(sheet.paneTopLeftCell)[0];
                var bottomIdx = getBottomOffset(this.parent, topIdx).index;
                var leftIdx = getRangeIndexes(sheet.paneTopLeftCell)[1];
                var rightIdx = getRightIdx(this.parent, leftIdx);
                if (indexes[0] > topIdx && indexes[0] < bottomIdx) {
                    if (indexes[1] > leftIdx && indexes[1] < rightIdx) {
                        target = this.parent.getCell(indexes[0], indexes[1]);
                    }
                    else if (indexes[1] >= rightIdx) {
                        target = this.parent.getCell(indexes[0], rightIdx - 1);
                    }
                    else {
                        target = this.parent.getCell(indexes[0], leftIdx + 1);
                    }
                }
                else if (indexes[0] >= bottomIdx) {
                    if (indexes[1] > leftIdx && indexes[1] < rightIdx) {
                        target = this.parent.getCell(bottomIdx - 1, indexes[1]);
                    }
                    else if (indexes[1] >= rightIdx) {
                        target = this.parent.getCell(bottomIdx - 1, rightIdx - 1);
                    }
                    else {
                        target = this.parent.getCell(bottomIdx - 1, leftIdx + 1);
                    }
                }
                else {
                    if (indexes[1] > leftIdx && indexes[1] < rightIdx) {
                        target = this.parent.getCell(topIdx + 1, indexes[1]);
                    }
                    else if (indexes[1] >= rightIdx) {
                        target = this.parent.getCell(topIdx + 1, rightIdx - 1);
                    }
                    else {
                        target = this.parent.getCell(topIdx + 1, leftIdx + 1);
                    }
                }
            }
            if (!target) {
                target = this.parent.getCell(topLeftIdx[0] + 1, topLeftIdx[1] + 1);
            }
        }
        if (target) {
            focus(target);
        }
    };
    KeyboardShortcut.prototype.getModuleName = function () {
        return 'keyboardShortcut';
    };
    KeyboardShortcut.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    return KeyboardShortcut;
}());

/**
 * CellFormat module allows to format the cell styles.
 */
var CellFormat = /** @class */ (function () {
    function CellFormat(parent) {
        this.checkHeight = false;
        this.parent = parent;
        this.addEventListener();
    }
    CellFormat.prototype.applyCellFormat = function (args) {
        if (args.checkHeight) {
            if (!this.checkHeight) {
                this.checkHeight = true;
            }
            this.updateRowHeight(args.rowIdx, args.colIdx, args.lastCell, args.onActionUpdate, args.outsideViewport, args.rowHeight);
            return;
        }
        var keys = Object.keys(args.style);
        var sheet = this.parent.getActiveSheet();
        if (args.lastCell && !keys.length && (getMaxHgt(sheet, args.rowIdx) <= (sheet.standardHeight || 20))) {
            return;
        }
        var cell = args.td || this.parent.getCell(args.rowIdx, args.colIdx);
        if (cell) {
            this.updateMergeBorder(args, sheet);
            var cellStyleColor = void 0;
            if (args.formatColor && cell.style.color === args.formatColor) {
                cellStyleColor = args.style.color;
                delete args.style.color;
            }
            if (args.style.border !== undefined || args.style.borderTop !== undefined || args.style.borderLeft !== undefined) {
                var curStyle_1 = {};
                Object.keys(args.style).forEach(function (key) { curStyle_1["" + key] = args.style["" + key]; });
                if (curStyle_1.border !== undefined) {
                    Object.assign(cell.style, { borderRight: args.style.border, borderBottom: args.style.border });
                    this.setLeftBorder(args.style.border, cell, args.rowIdx, args.colIdx, args.colIdx === this.parent.frozenColCount(sheet) ? args.hRow : args.row, args.onActionUpdate, args.first, sheet);
                    this.setTopBorder(args.style.border, cell, args.rowIdx, args.colIdx, args.pRow, args.pHRow, args.onActionUpdate, args.first, args.lastCell, args.manualUpdate, sheet, args);
                    delete curStyle_1.border;
                }
                if (curStyle_1.borderTop !== undefined) {
                    this.setTopBorder(args.style.borderTop, cell, args.rowIdx, args.colIdx, args.pRow, args.pHRow, args.onActionUpdate, args.first, args.lastCell, args.manualUpdate, sheet, args);
                    delete curStyle_1.borderTop;
                }
                if (curStyle_1.borderLeft !== undefined) {
                    this.setLeftBorder(args.style.borderLeft, cell, args.rowIdx, args.colIdx, args.colIdx === this.parent.frozenColCount(sheet) ? args.hRow : args.row, args.onActionUpdate, args.first, sheet);
                    delete curStyle_1.borderLeft;
                }
                if (Object.keys(curStyle_1).length) {
                    if (curStyle_1.borderBottom !== undefined) {
                        this.setThickBorderHeight(curStyle_1.borderBottom, args.rowIdx, args.colIdx, cell, args.row, args.hRow, args.onActionUpdate, args.lastCell, args.manualUpdate);
                    }
                    Object.assign(cell.style, curStyle_1);
                }
            }
            else {
                if (args.style.borderBottom !== undefined) {
                    this.setThickBorderHeight(args.style.borderBottom, args.rowIdx, args.colIdx, cell, args.row, args.hRow, args.onActionUpdate, args.lastCell, args.manualUpdate);
                }
                Object.assign(cell.style, args.style);
                if (cell) {
                    var dataBar = cell.querySelector('.e-cf-databar');
                    if (dataBar) {
                        var dataBarValue = dataBar.querySelector('.e-databar-value');
                        if (dataBarValue) {
                            dataBarValue.style.textDecoration = args.style.textDecoration;
                            if (args.style.verticalAlign) {
                                dataBarValue.style.alignItems = args.style.verticalAlign === 'top' ? 'start' :
                                    args.style.verticalAlign === 'middle' ? 'center' : 'end';
                            }
                        }
                    }
                }
                var CellElem = getCell(args.rowIdx, args.colIdx, sheet); // Need to remove after adding span support to merge
                if (CellElem && (CellElem.rowSpan || CellElem.colSpan) && cell.offsetHeight > 0) {
                    var height = getTextHeight(this.parent, CellElem.style || this.parent.cellStyle);
                    if (height > cell.offsetHeight) {
                        setRowEleHeight(this.parent, sheet, cell.offsetHeight, args.rowIdx);
                    }
                }
                if (args.style.fontSize && cell) {
                    var ddlCont = cell.querySelector('.e-validation-list');
                    if (ddlCont) {
                        this.parent.notify(addListValidationDropdown, {
                            ddlCont: ddlCont,
                            rowIdx: args.rowIdx, colIdx: args.colIdx, updatePosition: true
                        });
                    }
                }
            }
            var cellModel = getCell(args.rowIdx, args.colIdx, sheet, null, true);
            if (!sheet.rows[args.rowIdx] || !sheet.rows[args.rowIdx].customHeight) {
                if (args.isHeightCheckNeeded) {
                    if (!args.manualUpdate) {
                        if (!cellModel.wrap && isHeightCheckNeeded(args.style)) {
                            setMaxHgt(sheet, args.rowIdx, args.colIdx, getTextHeightWithBorder(this.parent, args.rowIdx, args.colIdx, sheet, args.style));
                        }
                        if (args.lastCell) {
                            var height = getMaxHgt(sheet, args.rowIdx);
                            var defaultHeight = sheet.standardHeight || 20;
                            if (height > defaultHeight && height > getRowHeight(sheet, args.rowIdx)) {
                                setRowEleHeight(this.parent, sheet, height, args.rowIdx, args.row, args.hRow);
                            }
                        }
                    }
                    else {
                        if (!this.checkHeight) {
                            this.checkHeight = isHeightCheckNeeded(args.style, args.onActionUpdate);
                        }
                        if (cell && cell.children[0] && cell.children[0].className === 'e-cf-databar' && args.style.fontSize) {
                            cell.children[0].querySelector('.e-databar-value').style.fontSize = args.style.fontSize;
                        }
                        if (!args.isFromAutoFillOption) {
                            this.updateRowHeight(args.rowIdx, args.colIdx, args.lastCell, args.onActionUpdate, null, args.rowHeight);
                        }
                        if (cellModel.wrap && (args.style.fontSize || args.style.fontFamily)) {
                            cell.style.lineHeight = (parseFloat((cellModel.style && cellModel.style.fontSize) || this.parent.cellStyle.fontSize) * getLineHeight(cellModel.style && cellModel.style.fontFamily ? cellModel.style : this.parent.cellStyle)) + 'pt';
                        }
                    }
                }
            }
            else if (!cellModel.wrap && (args.style.fontSize || args.style.fontFamily)) {
                var hgt = getRowHeight(sheet, args.rowIdx, true) - getBorderHeight(args.rowIdx, args.colIdx, sheet);
                if (hgt < getTextHeight(this.parent, cellModel.style)) {
                    cell.style.lineHeight = hgt + "px";
                }
                else if (cell.style.lineHeight) {
                    cell.style.lineHeight = '';
                }
            }
            if (cellStyleColor !== undefined) {
                args.style.color = cellStyleColor;
            }
        }
        else {
            this.updateRowHeight(args.rowIdx, args.colIdx, true, args.onActionUpdate, null, args.rowHeight);
        }
    };
    CellFormat.prototype.updateRowHeight = function (rowIdx, colIdx, isLastCell, onActionUpdate, outsideViewport, rHeight) {
        if (this.checkHeight) {
            var sheet = this.parent.getActiveSheet();
            var cell = getCell(rowIdx, colIdx, sheet, null, true);
            if (!cell.rowSpan) {
                var hgt = 0;
                hgt = getTextHeightWithBorder(this.parent, rowIdx, colIdx, sheet, cell.style || this.parent.cellStyle, cell.wrap && !cell.colSpan ? getLines(this.parent.getDisplayText(cell), getExcludedColumnWidth(sheet, rowIdx, colIdx), cell.style, this.parent.cellStyle)
                    : 1);
                var val = cell.value && cell.value.toString();
                if (val && val.indexOf('\n') > -1) {
                    var i = void 0;
                    var splitVal = val.split('\n');
                    var n = 0;
                    var valLength = splitVal.length;
                    for (i = 0; i < valLength; i++) {
                        var lines = getLines(splitVal[i], getExcludedColumnWidth(sheet, rowIdx, colIdx), cell.style, this.parent.cellStyle);
                        if (lines === 0) {
                            lines = 1; // for empty new line
                        }
                        n = n + lines;
                    }
                    hgt = getTextHeightWithBorder(this.parent, rowIdx, colIdx, sheet, cell.style || this.parent.cellStyle, n);
                }
                var defaultHeight = sheet && sheet.standardHeight ? sheet.standardHeight : 20;
                if (hgt < defaultHeight) {
                    hgt = defaultHeight; // default height
                }
                setMaxHgt(sheet, rowIdx, colIdx, hgt);
                if (!outsideViewport) {
                    var td = this.parent.getCell(rowIdx, colIdx);
                    if (td && td.children[0] && td.children[0].className === 'e-cf-databar') {
                        td.children[0].style.height = '100%';
                        td.children[0].firstElementChild.nextElementSibling.style.height = '100%';
                    }
                }
                if (isLastCell) {
                    this.checkHeight = false;
                    var maxHgt = rHeight ? rHeight : getMaxHgt(sheet, rowIdx);
                    var prevHgt = getRowHeight(sheet, rowIdx);
                    if (onActionUpdate ? maxHgt !== prevHgt : maxHgt > prevHgt) {
                        setRowEleHeight(this.parent, sheet, maxHgt, rowIdx, null, null, true, outsideViewport);
                    }
                }
            }
        }
    };
    CellFormat.prototype.updateMergeBorder = function (args, sheet) {
        var cellModel = getCell(args.rowIdx, args.colIdx, sheet, null, true);
        var mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };
        this.parent.notify(activeCellMergedRange, mergeArgs);
        if (cellModel.rowSpan > 1 && !args.style.borderBottom) {
            var bottomCell = getCell(mergeArgs.range[2], mergeArgs.range[1], sheet, null, true);
            if (bottomCell.style && bottomCell.style.borderBottom) {
                args.style.borderBottom = bottomCell.style.borderBottom;
            }
        }
        if (cellModel.colSpan > 1 && !args.style.borderRight) {
            var rightCell = getCell(mergeArgs.range[0], mergeArgs.range[3], sheet, null, true);
            if (rightCell.style && rightCell.style.borderRight) {
                args.style.borderRight = rightCell.style.borderRight;
            }
        }
    };
    CellFormat.prototype.setLeftBorder = function (border, cell, rowIdx, colIdx, row, actionUpdate, first, sheet) {
        if (first && first.includes('Column')) {
            return;
        }
        var isRtl = this.parent.enableRtl;
        var prevCell = isRtl ? this.parent.getCell(rowIdx, colIdx + 1, row) :
            this.parent.getCell(rowIdx, colIdx - 1, row);
        if (prevCell) {
            var model = getCell(rowIdx, colIdx - 1, sheet, false, true);
            if ((!!model.rowSpan && model.rowSpan !== 1) || (!!model.colSpan && model.colSpan !== 1)) {
                var mergeArgs = { range: [rowIdx, colIdx - 1, rowIdx, colIdx - 1] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                model = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet, false, true);
                if (model.style && model.style.borderRight && model.style.borderRight !== 'none') {
                    return;
                }
                else {
                    model = getCell(mergeArgs.range[0], mergeArgs.range[3], sheet, null, true);
                    if (model.style && model.style.borderRight && model.style.borderRight !== 'none') {
                        return;
                    }
                    cell.style.borderLeft = border;
                }
            }
            else {
                if (actionUpdate && border !== '' && colIdx === this.parent.viewport.leftIndex) {
                    this.parent.getMainContent().scrollLeft -= this.getBorderSize(border);
                }
                prevCell.style.borderRight = (border === 'none') ? prevCell.style.borderRight : border;
            }
        }
        else {
            cell.style.borderLeft = border;
        }
    };
    CellFormat.prototype.setTopBorder = function (border, cell, rowIdx, colIdx, pRow, pHRow, actionUpdate, first, lastCell, manualUpdate, sheet, args) {
        if (first && first.includes('Row')) {
            return;
        }
        var col = colIdx;
        var model = getCell(rowIdx, colIdx, sheet, false, true);
        if (model.colSpan > 1 && isHiddenCol(sheet, colIdx)) {
            col = skipHiddenIdx(sheet, colIdx, true, 'columns');
            if (col > colIdx + model.colSpan - 1) {
                col = colIdx;
            }
        }
        var prevCell = this.parent.getCell(rowIdx - 1, col, pRow);
        if (prevCell) {
            model = getCell(rowIdx - 1, colIdx, sheet, false, true);
            if ((!!model.rowSpan && model.rowSpan !== 1) || (!!model.colSpan && model.colSpan !== 1)) {
                var mergeArgs = { range: [rowIdx - 1, colIdx, rowIdx - 1, colIdx] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                model = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet, false, true);
                if (model.style && model.style.borderBottom && model.style.borderBottom !== 'none') {
                    return;
                }
                else {
                    model = getCell(mergeArgs.range[2], mergeArgs.range[1], sheet, null, true);
                    if (model.style && model.style.borderBottom && model.style.borderBottom !== 'none') {
                        return;
                    }
                    cell.style.borderTop = border;
                    if (args.mergeBorderRows !== undefined && args.mergeBorderRows.indexOf(rowIdx) === -1) {
                        args.mergeBorderRows.push(rowIdx);
                    }
                }
            }
            else {
                if (isHiddenRow(sheet, rowIdx - 1)) {
                    var index = [Number(prevCell.parentElement.getAttribute('aria-rowindex')) - 1, colIdx];
                    if (this.parent.getCellStyleValue(['bottomPriority'], index).bottomPriority) {
                        return;
                    }
                }
                if (actionUpdate && border !== '' && sheet.topLeftCell.includes("" + (rowIdx + 1))) {
                    this.parent.getMainContent().parentElement.scrollTop -= this.getBorderSize(border);
                }
                this.setThickBorderHeight(border, rowIdx - 1, colIdx, prevCell, pRow, pHRow, actionUpdate, lastCell, manualUpdate);
                prevCell.style.borderBottom = (border === 'none') ? prevCell.style.borderBottom : border;
            }
        }
        else {
            cell.style.borderTop = border;
        }
    };
    CellFormat.prototype.setThickBorderHeight = function (border, rowIdx, colIdx, cell, row, hRow, actionUpdate, lastCell, manualUpdate) {
        var size = border ? this.getBorderSize(border) : 1;
        var sheet = this.parent.getActiveSheet();
        if (size > 2 && (!sheet.rows[rowIdx] || !sheet.rows[rowIdx].customHeight)) {
            if (manualUpdate) {
                if (!this.checkHeight) {
                    this.checkHeight = true;
                }
                this.updateRowHeight(rowIdx, colIdx, lastCell, actionUpdate);
            }
            else {
                var prevHeight = getRowHeight(sheet, rowIdx);
                var height = Math.ceil(this.parent.calculateHeight(this.parent.getCellStyleValue(['fontFamily', 'fontSize'], [rowIdx, colIdx]), 1, 3));
                if (height > prevHeight) {
                    setRowEleHeight(this.parent, sheet, height, rowIdx, row, hRow);
                }
            }
        }
        if (actionUpdate && (lastCell || !this.checkHeight) && size < 3 && (!sheet.rows[rowIdx] ||
            !sheet.rows[rowIdx].customHeight)) {
            if (!this.checkHeight) {
                this.checkHeight = true;
            }
            this.updateRowHeight(rowIdx, colIdx, lastCell, actionUpdate);
        }
    };
    CellFormat.prototype.getBorderSize = function (border) {
        var size = border.split(' ')[0];
        return size === 'thin' ? 1 : (size === 'medium' ? 2 : (size === 'thick' ? 3 : (parseInt(size, 10) || 1)));
    };
    CellFormat.prototype.clearObj = function (args) {
        var _this = this;
        var options = args.options;
        var range = options.range ? (options.range.indexOf('!') > 0) ?
            options.range.substring(options.range.lastIndexOf('!') + 1) : options.range : this.parent.getActiveSheet().selectedRange;
        var sheetIndex = (options.range && options.range.indexOf('!') > 0) ?
            getSheetIndex(this.parent, options.range.substring(0, options.range.lastIndexOf('!'))) :
            this.parent.activeSheetIndex;
        var rangeIdx = getSwapRange(getRangeIndexes(range));
        var isRangeReadOnly = isReadOnlyCells(this.parent, rangeIdx);
        if (isRangeReadOnly) {
            if (args.isAction) {
                this.parent.notify(readonlyAlert, null);
            }
            return;
        }
        var sheet = this.parent.sheets[sheetIndex];
        var sRIdx = rangeIdx[0];
        var eRIdx = rangeIdx[2];
        var sCIdx;
        var eCIdx;
        var overlayElements = this.parent.element.getElementsByClassName('e-ss-overlay-active');
        var isOverlay = overlayElements.length > 0;
        var clearCFArgs;
        var isSelectAll = this.parent.element.getElementsByClassName('e-prev-highlight-bottom').length > 0;
        var eventArgs = { range: range, type: options.type, requestType: 'clear',
            sheetIndex: sheetIndex };
        var actionBegin = function () {
            if (args.isAction) {
                _this.parent.notify(beginAction, { action: 'beforeClear', eventArgs: eventArgs });
            }
        };
        var actionComplete = function () {
            if (args.isAction) {
                eventArgs = { range: sheet.name + '!' + range, type: options.type, sheetIndex: sheetIndex };
                if (clearCFArgs) {
                    eventArgs.cfClearActionArgs = clearCFArgs.cfClearActionArgs;
                }
                _this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'clear', isSelectAll: isSelectAll });
            }
        };
        var isClearAll = options.type === 'Clear All';
        if (isOverlay) {
            if (options.type === 'Clear Contents' || isClearAll) {
                actionBegin();
                if (overlayElements[0].classList.contains('e-datavisualization-chart')) {
                    this.parent.notify(deleteChart, {
                        id: overlayElements[0].id, sheetIdx: this.parent.activeSheetIndex + 1, clearAction: true
                    });
                }
                else {
                    this.parent.notify(deleteImage, {
                        id: overlayElements[0].id, sheetIdx: this.parent.activeSheetIndex + 1, clearAction: true
                    });
                }
                actionComplete();
            }
        }
        else {
            actionBegin();
            if (options.type === 'Clear Formats' || isClearAll) {
                clearCFArgs = { range: range, sheetIdx: sheetIndex, isClear: true };
                this.parent.notify(clearCFRule, clearCFArgs);
                args.cfClearActionArgs = clearCFArgs.cfClearActionArgs;
                if (isClearAll) {
                    this.parent.notify(cellValidation, { range: range, isRemoveValidation: true });
                    if (sRIdx === 0 && rangeIdx[1] === 0 && eRIdx >= sheet.usedRange.rowIndex && rangeIdx[3] >= sheet.usedRange.colIndex) {
                        this.parent.setUsedRange(sRIdx, rangeIdx[1], sheet, false, true);
                    }
                }
                for (sRIdx; sRIdx <= eRIdx; sRIdx++) {
                    sCIdx = rangeIdx[1];
                    eCIdx = rangeIdx[3];
                    for (sCIdx; sCIdx <= eCIdx; sCIdx++) {
                        var cell = getCell(sRIdx, sCIdx, sheet);
                        var cellElem = this.parent.getCell(sRIdx, sCIdx);
                        if (cell) {
                            if (isClearAll && cell.formula) {
                                this.parent.notify(clearFormulaDependentCells, { cellRef: getRangeAddress([sRIdx, sCIdx, sRIdx, sCIdx]) });
                            }
                            if (cell.wrap) {
                                this.parent.notify(wrapEvent, { range: [sRIdx, sCIdx, sRIdx, sCIdx], wrap: false, sheet: sheet });
                            }
                            if (cell.hyperlink) {
                                if (cellElem) {
                                    removeClass(cellElem.querySelectorAll('.e-hyperlink'), 'e-hyperlink-style');
                                }
                                if (isClearAll) {
                                    this.parent.removeHyperlink(sheet.name + '!' + getRangeAddress([sRIdx, sCIdx, sRIdx, sCIdx]));
                                }
                            }
                        }
                    }
                }
            }
            if (options.type === 'Clear Hyperlinks') {
                this.parent.removeHyperlink(sheet.name + '!' + range);
            }
            this.parent.notify(clear, { range: sheet.name + '!' + range, type: options.type });
            this.parent.serviceLocator.getService('cell').refreshRange(getSwapRange(getRangeIndexes(range)), false, false, false, options.type === 'Clear Hyperlinks' ? true : false, isImported(this.parent), !isClearAll, null, null, null, isSelectAll);
            if (!args.isFromUpdateAction) {
                this.parent.notify(selectRange, { address: range });
            }
            this.parent.notify(activeCellChanged, null);
            actionComplete();
        }
    };
    CellFormat.prototype.addEventListener = function () {
        this.parent.on(applyCellFormat, this.applyCellFormat, this);
        this.parent.on(clearViewer, this.clearObj, this);
    };
    CellFormat.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(applyCellFormat, this.applyCellFormat);
            this.parent.off(clearViewer, this.clearObj);
        }
    };
    /**
     * Destroy cell format module.
     *
     * @returns {void} - Destroy cell format module.
     */
    CellFormat.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
        this.checkHeight = null;
    };
    /**
     * Get the cell format module name.
     *
     * @returns {string} - Get the cell format module name.
     */
    CellFormat.prototype.getModuleName = function () {
        return 'cellformat';
    };
    return CellFormat;
}());

/**
 * The `Resize` module is used to handle the resizing functionalities in Spreadsheet.
 */
var Resize = /** @class */ (function () {
    /**
     * Constructor for resize module in Spreadsheet.
     *
     * @param {Spreadsheet} parent - Constructor for resize module in Spreadsheet.
     * @private
     */
    function Resize(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    Resize.prototype.addEventListener = function () {
        this.parent.on(contentLoaded, this.wireEvents, this);
        this.parent.on(autoFit, this.autoFit, this);
        this.parent.on(setAutoFit, this.setAutoFitHandler, this);
        this.parent.on(propertyChange, this.propertyChange, this);
    };
    Resize.prototype.autoFit = function (args) {
        var element = args.isRow ? this.parent.getRowHeaderTable() : this.parent.getColHeaderTable().rows[0];
        for (var i = args.startIndex; i <= args.endIndex; i++) {
            this.trgtEle = args.isRow ? this.parent.getRow(i, element) :
                this.parent.getCell(null, i, element);
            this.setAutofit(i, !args.isRow);
        }
    };
    Resize.prototype.wireEvents = function () {
        var rowHeader = this.parent.getRowHeaderContent();
        var colHeader = this.parent.element.getElementsByClassName('e-header-panel')[0];
        if (!colHeader) {
            return;
        }
        EventHandler.add(colHeader, 'dblclick', this.dblClickHandler, this);
        EventHandler.add(rowHeader, 'dblclick', this.dblClickHandler, this);
        EventHandler.add(colHeader, 'mousedown', this.mouseDownHandler, this);
        EventHandler.add(rowHeader, 'mousedown', this.mouseDownHandler, this);
        this.wireResizeCursorEvent(rowHeader, colHeader);
    };
    Resize.prototype.wireResizeCursorEvent = function (rowHeader, colHeader) {
        EventHandler.add(rowHeader, 'mousemove', this.setTarget, this);
        EventHandler.add(colHeader, 'mousemove', this.setTarget, this);
    };
    Resize.prototype.unWireResizeCursorEvent = function () {
        EventHandler.remove(this.parent.getRowHeaderContent(), 'mousemove', this.setTarget);
        var headerPanel = this.parent.element.getElementsByClassName('e-header-panel')[0];
        if (headerPanel) {
            EventHandler.remove(headerPanel, 'mousemove', this.setTarget);
        }
    };
    Resize.prototype.unwireEvents = function () {
        var rowHeader = this.parent.getRowHeaderContent();
        var colHeader = this.parent.element.getElementsByClassName('e-header-panel')[0];
        if (!colHeader) {
            return;
        }
        EventHandler.remove(colHeader, 'dblclick', this.dblClickHandler);
        EventHandler.remove(rowHeader, 'dblclick', this.dblClickHandler);
        EventHandler.remove(colHeader, 'mousedown', this.mouseDownHandler);
        EventHandler.remove(rowHeader, 'mousedown', this.mouseDownHandler);
        this.unWireResizeCursorEvent();
    };
    Resize.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(contentLoaded, this.wireEvents);
            this.parent.off(autoFit, this.autoFit);
            this.parent.off(setAutoFit, this.setAutoFitHandler);
            this.parent.off(propertyChange, this.propertyChange);
        }
    };
    Resize.prototype.mouseMoveHandler = function (e) {
        var colResizeHandler = this.parent.element.getElementsByClassName('e-colresize-handler')[0];
        var rowResizeHandler = this.parent.element.getElementsByClassName('e-rowresize-handler')[0];
        this.resizeTooltip(null, true, e);
        if (colResizeHandler || rowResizeHandler) {
            this.isMouseMoved = true;
            var isRtl = this.parent.enableRtl;
            if (colResizeHandler) {
                if (isRtl ? (e.x < this.trgtEle.parentElement.firstChild.getBoundingClientRect().right) :
                    (e.x > this.trgtEle.parentElement.firstChild.getBoundingClientRect().left)) {
                    colResizeHandler.style.left = e.clientX -
                        document.getElementById(this.parent.element.id + '_sheet').getBoundingClientRect().left + 'px';
                }
            }
            else if (rowResizeHandler) {
                if (e.y >= this.trgtEle.parentElement.parentElement.firstChild.getBoundingClientRect().top) {
                    rowResizeHandler.style.top = e.clientY -
                        document.getElementById(this.parent.element.id + '_sheet').getBoundingClientRect().top + 'px';
                }
            }
        }
    };
    Resize.prototype.mouseDownHandler = function (e) {
        if (!closest(e.target, '.e-header-cell') || e.target.className.includes('e-filter-icon')) {
            return;
        }
        this.event = e;
        this.trgtEle = e.target;
        if (this.trgtEle.parentElement.classList.contains('e-hide-end') || this.trgtEle.classList.contains('e-hide-end')) {
            var offsetSize = this.trgtEle.offsetHeight;
            var offset = e.offsetY;
            if ((offsetSize >= 10 && offset < 5) || (offsetSize - 2 < 8 && offset < Math.ceil((offset - 2) / 2))) {
                this.trgtEle.classList.add('e-skip-resize');
            }
        }
        this.updateTarget(e, this.trgtEle);
        var trgt = this.trgtEle;
        var className = trgt.classList.contains('e-colresize') ? 'e-colresize-handler' :
            trgt.classList.contains('e-rowresize') ? 'e-rowresize-handler' : '';
        this.createResizeHandler(trgt, className);
        this.unWireResizeCursorEvent();
        EventHandler.add(this.parent.element, 'mousemove', this.mouseMoveHandler, this);
        EventHandler.add(document, 'mouseup', this.mouseUpHandler, this);
    };
    Resize.prototype.mouseUpHandler = function (e) {
        var resizeHandler = this.parent.element.getElementsByClassName('e-resize-handle')[0];
        this.resizeOn(e);
        this.isMouseMoved = null;
        var HeaderTooltip = document.querySelector('.e-header-tooltip');
        if (resizeHandler) {
            detach(resizeHandler);
            this.updateCursor();
        }
        if (HeaderTooltip) {
            HeaderTooltip.remove();
        }
        EventHandler.remove(document, 'mouseup', this.mouseUpHandler);
        EventHandler.remove(this.parent.element, 'mousemove', this.mouseMoveHandler);
        var colHeader = this.parent.element.getElementsByClassName('e-header-panel')[0];
        if (colHeader) {
            this.wireResizeCursorEvent(this.parent.getRowHeaderContent(), colHeader);
        }
        this.parent.notify(positionAutoFillElement, null);
        this.parent.notify(hideAutoFillOptions, null);
    };
    Resize.prototype.dblClickHandler = function (e) {
        if (!closest(e.target, '.e-header-cell') || e.target.className.includes('e-filter-icon')) {
            return;
        }
        this.trgtEle = e.target;
        var skipUnhideRowCol = this.updateTarget(e, this.trgtEle);
        if (skipUnhideRowCol) {
            this.parent.notify(readonlyAlert, null);
            return;
        }
        if (this.trgtEle.classList.contains('e-colresize')) {
            var colIndx = parseInt(this.trgtEle.getAttribute('aria-colindex'), 10) - 1;
            var prevWidth = getColumnWidth(this.parent.getActiveSheet(), colIndx) + "px";
            if (this.trgtEle.classList.contains('e-unhide-column')) {
                this.showHiddenColumns(colIndx - 1);
            }
            else {
                this.setAutofit(colIndx, true, prevWidth, this.trgtEle);
            }
        }
        else if (this.trgtEle.classList.contains('e-rowresize')) {
            var rowIndx = parseInt(this.trgtEle.parentElement.getAttribute('aria-rowindex'), 10) - 1;
            var prevHeight = getRowHeight(this.parent.getActiveSheet(), rowIndx) + "px";
            this.setAutofit(rowIndx, false, prevHeight);
        }
        this.parent.notify(positionAutoFillElement, null);
    };
    Resize.prototype.setTarget = function (e) {
        if (this.parent.isEdit || !closest(e.target, '.e-header-cell') || e.target.className.includes('e-filter-icon')) {
            return;
        }
        var trgt = e.target;
        var sheet = this.parent.getActiveSheet();
        if (sheet.isProtected && (!sheet.protectSettings.formatColumns || !sheet.protectSettings.formatRows)) {
            if (!sheet.protectSettings.formatRows && !sheet.protectSettings.formatColumns) {
                return;
            }
            if (sheet.protectSettings.formatRows) {
                if (closest(trgt, '.e-colhdr-table')) {
                    return;
                }
            }
            if (sheet.protectSettings.formatColumns) {
                if (closest(trgt, '.e-rowhdr-table')) {
                    return;
                }
            }
        }
        var newTrgt;
        var tOffsetV;
        var eOffsetV;
        var tClass;
        if (closest(trgt, '.e-header-row')) {
            tOffsetV = trgt.offsetWidth;
            tClass = 'e-colresize';
            eOffsetV = this.parent.enableRtl ? (tOffsetV - e.offsetX) : e.offsetX;
            var prevSibling = this.getColPrevSibling(trgt);
            if (prevSibling && !prevSibling.classList.contains('e-select-all-cell')) {
                newTrgt = prevSibling;
            }
            else {
                if (Number(trgt.getAttribute('aria-colindex')) > 1) {
                    newTrgt = trgt;
                }
            }
        }
        else if (closest(trgt, '.e-row')) {
            eOffsetV = e.offsetY;
            tOffsetV = trgt.offsetHeight;
            tClass = 'e-rowresize';
            var prevSibling = this.getRowPrevSibling(trgt);
            if (prevSibling) {
                newTrgt = prevSibling.firstElementChild;
            }
            else {
                if (Number(trgt.parentElement.getAttribute('aria-rowindex')) > 1) {
                    newTrgt = trgt;
                }
            }
        }
        if (tOffsetV - 2 < 8 && eOffsetV !== Math.ceil((tOffsetV - 2) / 2)) {
            if (eOffsetV < Math.ceil((tOffsetV - 2) / 2)) {
                trgt.classList.add(tClass);
                if (newTrgt) {
                    newTrgt.classList.add(tClass);
                }
            }
            else if (eOffsetV > Math.ceil((tOffsetV - 2) / 2)) {
                trgt.classList.add(tClass);
            }
        }
        else if (tOffsetV - 5 < eOffsetV && eOffsetV <= tOffsetV && tOffsetV >= 10) {
            trgt.classList.add(tClass);
        }
        else if (eOffsetV < 5 && newTrgt && tOffsetV >= 10) {
            trgt.classList.add(tClass);
            newTrgt.classList.add(tClass);
        }
        else {
            var resEle = this.parent.element.getElementsByClassName(tClass);
            for (var index = 0; index < resEle.length; index++) {
                resEle[index].classList.remove(tClass);
            }
        }
    };
    Resize.prototype.getColPrevSibling = function (trgt) {
        var frozenCol = this.parent.frozenColCount(this.parent.getActiveSheet());
        return trgt.previousElementSibling || (frozenCol && closest(trgt, '.e-column-header') ?
            this.parent.getSelectAllContent().querySelector('.e-header-row').lastElementChild : null);
    };
    Resize.prototype.getRowPrevSibling = function (trgt) {
        var frozenRow = this.parent.frozenRowCount(this.parent.getActiveSheet());
        return trgt.parentElement.previousElementSibling || (frozenRow && closest(trgt, '.e-row-header') ?
            this.parent.getSelectAllContent().querySelector('tbody').lastElementChild : null);
    };
    Resize.prototype.updateTarget = function (e, trgt) {
        if (closest(trgt, '.e-header-row')) {
            var offsetX = this.parent.enableRtl ? (trgt.offsetWidth - e.offsetX) : e.offsetX;
            if ((trgt.offsetWidth < 10 && offsetX < Math.ceil((trgt.offsetWidth - 2) / 2)) || (offsetX < 5 &&
                trgt.offsetWidth >= 10) && trgt.classList.contains('e-colresize')) {
                var sheet = this.parent.getActiveSheet();
                var prevIdx = Number(this.trgtEle.getAttribute('aria-colindex')) - 2;
                var prevSibling = this.getColPrevSibling(trgt);
                if (prevSibling && !isHiddenCol(sheet, prevIdx)) {
                    this.trgtEle = prevSibling;
                }
                else {
                    if (prevIdx > -1) {
                        var colModel = getColumn(sheet, prevIdx);
                        if (colModel.isReadOnly || isReadOnlyCells(this.parent, [0, prevIdx, sheet.rowCount - 1, prevIdx])) {
                            return true;
                        }
                        this.trgtEle.classList.add('e-unhide-column');
                    }
                }
            }
        }
        else {
            if ((trgt.offsetHeight < 10 && e.offsetY < Math.ceil((trgt.offsetHeight - 2) / 2)) || (e.offsetY < 5 &&
                trgt.offsetHeight >= 10) && trgt.classList.contains('e-rowresize')) {
                var sheet = this.parent.getActiveSheet();
                var prevIdx = Number(trgt.parentElement.getAttribute('aria-rowindex')) - 2;
                var prevSibling = this.getRowPrevSibling(trgt);
                if (prevSibling || isHiddenRow(sheet, prevIdx)) {
                    if (e.type === 'dblclick' && isHiddenRow(sheet, prevIdx)) {
                        var rowModel = getRow(sheet, prevIdx);
                        if (rowModel.isReadOnly || isReadOnlyCells(this.parent, [prevIdx, 0, prevIdx, sheet.colCount - 1])) {
                            return true;
                        }
                        var selectRange = getSwapRange(getRangeIndexes(sheet.selectedRange));
                        var eventArgs = void 0;
                        if (prevIdx <= selectRange[2] && prevIdx > selectRange[0] && isRowSelected(sheet, selectRange)) {
                            eventArgs = { startIndex: selectRange[0], endIndex: selectRange[2], hide: false, autoFit: true };
                        }
                        else {
                            eventArgs = { startIndex: prevIdx, endIndex: prevIdx, hide: false, autoFit: true };
                        }
                        this.parent.notify(hideShow, eventArgs);
                    }
                    else {
                        if (!isHiddenRow(sheet, prevIdx)) {
                            this.trgtEle = prevSibling.getElementsByClassName('e-header-cell')[0];
                        }
                    }
                }
            }
        }
        return false;
    };
    Resize.prototype.setAutoFitHandler = function (args) {
        if (args.isCol && isHiddenCol(this.parent.getActiveSheet(), args.idx)) {
            this.showHiddenColumns(args.idx);
        }
        else {
            this.setAutofit(args.idx, args.isCol, null, null, args.sheetIdx);
        }
    };
    Resize.prototype.getWrapText = function (text, colwidth, style) {
        var _this = this;
        var textArr = text.toString().split(' ');
        var spaceWidth = getTextWidth(' ', style, this.parent.cellStyle);
        var width;
        var textWidth = 0;
        var prevWidth = 0;
        var displayText = text;
        var val = '';
        var setDisplayText = function () {
            var curWidth = parseInt(prevWidth.toString(), 10);
            if (curWidth > textWidth || (curWidth === textWidth && getTextWidth(val.trim(), style, _this.parent.cellStyle) >
                getTextWidth(displayText, style, _this.parent.cellStyle))) {
                displayText = val.trim();
                textWidth = curWidth;
            }
        };
        textArr.forEach(function (txt, index) {
            width = getTextWidth(txt, style, _this.parent.cellStyle);
            if ((prevWidth + width) / colwidth > 1) {
                setDisplayText();
                val = '';
                prevWidth = width;
            }
            else {
                width += ((prevWidth + width + spaceWidth) / colwidth >= 1 ? 0 : spaceWidth);
                prevWidth += width;
            }
            val += txt + ' ';
            if (index === textArr.length - 1) {
                setDisplayText();
            }
        });
        return displayText;
    };
    Resize.prototype.setAutofit = function (idx, isCol, prevData, hdrCell, sheetIdx) {
        var _this = this;
        var sheet = !isNullOrUndefined(sheetIdx) ? getSheet(this.parent, sheetIdx) : this.parent.getActiveSheet();
        var autoFitWithHeader;
        var isActiveSheet = !isNullOrUndefined(sheetIdx) ? sheetIdx === this.parent.activeSheetIndex : true;
        if (hdrCell) {
            var eventArgs = { cancel: false, index: idx, isCol: isCol,
                sheetIndex: this.parent.activeSheetIndex };
            if (isCol) {
                eventArgs.oldWidth = prevData;
                eventArgs.autoFitWithHeader = false;
            }
            else {
                eventArgs.oldHeight = prevData;
            }
            this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'resizeToFit' });
            if (eventArgs.cancel) {
                return;
            }
            autoFitWithHeader = eventArgs.autoFitWithHeader;
        }
        var oldValue;
        var cell = {};
        var cellEle;
        var colGrp;
        var wrapCell;
        var table = this.parent.createElement('table', { className: this.parent.getContentTable().className + ' e-resizetable', styles: 'height: auto' });
        var tBody = this.parent.createElement('tbody');
        var rowEle = this.parent.createElement('tr', { className: 'e-row' });
        var tdEle = this.parent.createElement('td', { className: 'e-cell' });
        var tableWidth = 0;
        var colWidth = 0;
        if (isCol) {
            var row_1;
            table.style.width = 'auto';
            var appendRow = function (content) {
                cellEle = tdEle.cloneNode();
                cellEle.textContent = content;
                cellEle.style.fontFamily = (cell.style && cell.style.fontFamily) || _this.parent.cellStyle.fontFamily;
                cellEle.style.fontSize = (cell.style && cell.style.fontSize) || _this.parent.cellStyle.fontSize;
                cellEle.style.fontWeight = (cell.style && cell.style.fontWeight) || _this.parent.cellStyle.fontWeight;
                row_1 = rowEle.cloneNode();
                row_1.appendChild(cellEle);
                tBody.appendChild(row_1);
            };
            if (autoFitWithHeader) {
                appendRow(hdrCell.textContent);
            }
            for (var rowIdx = 0, len = sheet.rows.length; rowIdx < len; rowIdx++) {
                cell = getCell(rowIdx, idx, sheet);
                if (cell && cell.value) {
                    if (cell.wrap) {
                        wrapCell = true;
                        appendRow(this.getWrapText(this.parent.getDisplayText(cell), getExcludedColumnWidth(sheet, idx, idx, cell.colSpan > 1 ? idx + cell.colSpan - 1 : idx), cell.style));
                    }
                    else {
                        appendRow(this.parent.getDisplayText(cell));
                    }
                }
            }
            oldValue = getColumnWidth(sheet, idx);
        }
        else {
            var colLength = sheet.rows[idx] && sheet.rows[idx].cells ?
                sheet.rows[idx].cells.length : 0;
            colGrp = this.parent.createElement('colgroup');
            for (var colIdx = 0; colIdx < colLength; colIdx++) {
                cell = getCell(idx, colIdx, sheet);
                if (cell) {
                    cellEle = tdEle.cloneNode();
                    if (cell.wrap) {
                        cellEle.classList.add('e-wraptext');
                    }
                    cellEle.textContent = this.parent.getDisplayText(cell);
                    cellEle.style.fontFamily = (cell.style && cell.style.fontFamily) || this.parent.cellStyle.fontFamily;
                    cellEle.style.fontSize = (cell.style && cell.style.fontSize) || this.parent.cellStyle.fontSize;
                    rowEle.appendChild(cellEle);
                    colWidth = (cell.colSpan && cell.colSpan >= 1) ? this.getMergedColumnsWidth(cell.colSpan, colIdx, sheet) :
                        (cell.colSpan && cell.colSpan < 1) ? 0 : getColumnWidth(sheet, colIdx, false, true);
                    tableWidth += colWidth;
                    colGrp.appendChild(this.parent.createElement('col', { styles: "width:" + colWidth + "px" }));
                }
            }
            table.appendChild(colGrp);
            tBody.appendChild(rowEle);
            oldValue = getRowHeight(sheet, idx);
        }
        table.appendChild(tBody);
        if (tableWidth) {
            table.style.width = tableWidth + 'px';
        }
        var wrapper = this.parent.createElement('div', { className: this.parent.element.className, styles: 'display: block' });
        wrapper.appendChild(table);
        document.body.appendChild(wrapper);
        var offset = table.getBoundingClientRect();
        document.body.removeChild(wrapper);
        var fitSize = Math.ceil(isCol ? offset.width : offset.height);
        var autofitValue = (isCol ? this.getFloatingElementWidth(fitSize + (wrapCell ? 1 : 0), idx) : fitSize) || oldValue;
        var threshold;
        if (isCol) {
            if (autofitValue > 0) {
                threshold = -(oldValue - autofitValue);
            }
            else {
                threshold = -oldValue;
            }
            var frozenCol = this.parent.frozenColCount(sheet);
            if ((frozenCol && idx >= getRangeIndexes(sheet.topLeftCell)[1] && idx < frozenCol) ||
                (idx >= this.parent.viewport.leftIndex + frozenCol && idx <= this.parent.viewport.rightIndex)) {
                getColumn(sheet, idx).width = autofitValue > 0 ? autofitValue : 0;
                if (isActiveSheet) {
                    this.resizeStart(idx, this.parent.getViewportIndex(idx, true), autofitValue + 'px', isCol, true, prevData);
                    this.parent.notify(colWidthChanged, { threshold: threshold, colIdx: idx });
                }
            }
            else {
                if (isActiveSheet) {
                    this.parent.notify(colWidthChanged, { threshold: threshold, colIdx: idx });
                }
                getColumn(sheet, idx).width = autofitValue > 0 ? autofitValue : 0;
            }
        }
        else {
            var frozenRow = this.parent.frozenRowCount(sheet);
            autofitValue = autofitValue > 20 ? autofitValue : 20;
            threshold = -(oldValue - autofitValue);
            if ((frozenRow && idx >= getRangeIndexes(sheet.topLeftCell)[0] && idx < frozenRow) ||
                (idx >= this.parent.viewport.topIndex + frozenRow && idx <= this.parent.viewport.bottomIndex)) {
                setRowHeight(sheet, idx, autofitValue);
                setRow(sheet, idx, { customHeight: false });
                if (isActiveSheet) {
                    this.resizeStart(idx, this.parent.getViewportIndex(idx), autofitValue + 'px', isCol, true, prevData);
                    this.parent.notify(rowHeightChanged, { threshold: threshold, rowIdx: idx });
                }
            }
            else {
                if (isActiveSheet) {
                    this.parent.notify(rowHeightChanged, { threshold: threshold, rowIdx: idx });
                }
                setRowHeight(sheet, idx, autofitValue);
            }
        }
        if (isActiveSheet) {
            this.parent.selectRange(sheet.selectedRange);
        }
    };
    Resize.prototype.getMergedColumnsWidth = function (colSpan, colIndex, sheet) {
        var columnWidth = 0;
        for (var i = 0; i < colSpan; i++) {
            columnWidth += getColumnWidth(sheet, colIndex, false, true);
            colIndex++;
        }
        return columnWidth;
    };
    Resize.prototype.createResizeHandler = function (trgt, className) {
        var editor = this.parent.createElement('div', { className: className });
        editor.classList.add('e-resize-handle');
        var sheet = document.getElementById(this.parent.element.id + '_sheet');
        if (trgt.classList.contains('e-colresize')) {
            editor.style.height = this.parent.getMainContent().parentElement.clientHeight + this.parent.getColumnHeaderContent().offsetHeight + 'px';
            editor.style.left = this.event.clientX - sheet.getBoundingClientRect().left + 'px';
            editor.style.top = '0px';
        }
        else if (trgt.classList.contains('e-rowresize')) {
            editor.style.width = this.parent.getMainContent().parentElement.clientWidth + 'px';
            editor.style.left = '0px';
            editor.style.top = this.event.clientY - sheet.getBoundingClientRect().top + 'px';
        }
        sheet.appendChild(editor);
        this.resizeTooltip(trgt, false);
        this.updateCursor();
    };
    Resize.prototype.resizeTooltip = function (trgt, isResize, e) {
        if (isResize) {
            var isRtl = this.parent.enableRtl;
            var HeaderTolltip = document.querySelector('.e-header-tooltip');
            var colResizeHandler = this.parent.element.getElementsByClassName('e-colresize-handler')[0];
            var rowResizeHandler = this.parent.element.getElementsByClassName('e-rowresize-handler')[0];
            if (colResizeHandler) {
                var trgtWidth = isRtl ? (Math.round(this.trgtEle.getBoundingClientRect().right) - (e.clientX)) :
                    ((e.clientX) - Math.round(this.trgtEle.getBoundingClientRect().left));
                if (HeaderTolltip) {
                    HeaderTolltip.firstChild.textContent = trgtWidth > 0 ? ('Width:(' + trgtWidth.toString() + ' pixels)') : ('Width: 0.00');
                }
            }
            else if (rowResizeHandler) {
                var trgtHeight = (e.clientY) - Math.round(this.trgtEle.getBoundingClientRect().top);
                if (HeaderTolltip) {
                    HeaderTolltip.firstChild.textContent = trgtHeight > 0 ? ('Height:(' + trgtHeight.toString() + ' pixels)') : ('Height: 0.00');
                }
            }
        }
        else {
            var isColResize = trgt.classList.contains('e-colresize');
            var isRowResize = trgt.classList.contains('e-rowresize');
            if (isColResize || isRowResize) {
                var className = isColResize ? 'e-colresize-handler' : 'e-rowresize-handler';
                var tooltip = new Tooltip({
                    cssClass: 'e-header-tooltip',
                    showTipPointer: false
                });
                if (isColResize) {
                    tooltip.content = initializeCSPTemplate(function () {
                        return 'Width:(' + Math.round(trgt.getBoundingClientRect().width).toString() + ' pixels)';
                    });
                }
                else if (isRowResize) {
                    tooltip.content = initializeCSPTemplate(function () {
                        return 'Height:(' + Math.round(trgt.getBoundingClientRect().height).toString() + ' pixels)';
                    });
                    tooltip.offsetX = -((this.parent.getMainContent().parentElement.clientWidth / 2) -
                        Math.round(trgt.getBoundingClientRect().width));
                }
                tooltip.appendTo('.' + className);
                tooltip.open();
                tooltip.refresh();
            }
        }
    };
    Resize.prototype.setColWidth = function (index, viewportIdx, width, curWidth) {
        var sheet = this.parent.getActiveSheet();
        var threshold = getDPRValue(width) - curWidth;
        if (threshold < 0 && curWidth < -(threshold)) {
            threshold = -curWidth;
        }
        if (width > 0) {
            if (this.isMouseMoved && this.trgtEle.classList.contains('e-unhide-column')) {
                this.showHiddenColumns(index, width);
                this.parent.notify(completeAction, {
                    eventArgs: {
                        index: index, width: 0 + "px", isCol: true, sheetIndex: this.parent.activeSheetIndex, oldWidth: curWidth + "px",
                        hide: false
                    }, action: 'resize'
                });
                return;
            }
            this.resizeStart(index, viewportIdx, width + "px", true, false, curWidth + "px");
            setColumn(sheet, index, { width: width, customWidth: true });
            this.parent.notify(colWidthChanged, { threshold: threshold, colIdx: index, checkWrapCell: true });
        }
        else {
            if (this.isMouseMoved) {
                this.parent.hideColumn(index);
                this.showHideCopyIndicator();
                this.parent.notify(completeAction, {
                    eventArgs: {
                        index: index, width: 0 + "px", isCol: true, sheetIndex: this.parent.activeSheetIndex, oldWidth: curWidth + "px",
                        hide: true
                    }, action: 'resize'
                });
            }
        }
    };
    Resize.prototype.showHideCopyIndicator = function () {
        var copyIndicator = this.parent.element.getElementsByClassName('e-copy-indicator')[0];
        var isIndicator = false;
        if (copyIndicator) {
            detach(copyIndicator);
            this.parent.notify(hideAutoFillElement, null);
            isIndicator = true;
        }
        if (isIndicator) {
            this.parent.notify(contentLoaded, {});
        }
    };
    Resize.prototype.showHiddenColumns = function (index, width) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var selectedRange = getRangeIndexes(sheet.selectedRange);
        var startIdx;
        var endIdx;
        var colgroup;
        if (index >= selectedRange[1] && index <= selectedRange[3] && selectedRange[2] === sheet.rowCount - 1 &&
            getCellIndexes(sheet.activeCell)[0] === getCellIndexes(sheet.topLeftCell)[0]) {
            startIdx = selectedRange[1];
            endIdx = selectedRange[3];
            colgroup = this.parent.getMainContent().querySelector('colgroup');
        }
        else {
            startIdx = endIdx = index;
        }
        if (width !== undefined) {
            for (var i = startIdx; i <= endIdx; i++) {
                setColumn(sheet, i, { width: width, customWidth: true });
                if (i >= this.parent.viewport.leftIndex && i <= this.parent.viewport.rightIndex && !isHiddenCol(sheet, i)) {
                    colgroup.children[this.parent.getViewportIndex(i, true)].style.width = width + "px";
                }
            }
        }
        if (this.trgtEle) {
            this.trgtEle.classList.remove('e-unhide-column');
        }
        var hideEvtArgs = { startIndex: startIdx, endIndex: endIdx, hide: false, isCol: true, autoFit: true };
        this.parent.notify(hideShow, hideEvtArgs);
        this.showHideCopyIndicator();
        if (width === undefined) {
            if (hideEvtArgs.autoFit) {
                this.autoFit({ isRow: false, startIndex: startIdx, endIndex: endIdx });
            }
            else {
                var performAutoFit_1 = function () {
                    _this.parent.off(contentLoaded, performAutoFit_1);
                    _this.autoFit({ isRow: false, startIndex: startIdx, endIndex: endIdx });
                };
                this.parent.on(contentLoaded, performAutoFit_1, this);
            }
        }
    };
    Resize.prototype.setRowHeight = function (rowIdx, viewportIdx, height, prevData) {
        var sheet = this.parent.getActiveSheet();
        var frozenCol = this.parent.frozenColCount(sheet);
        var eleHeight = parseInt(this.parent.getRow(rowIdx, null, frozenCol).style.height, 10);
        var rowHeight = height;
        var threshold = getDPRValue(parseInt(rowHeight, 10)) - eleHeight;
        if (threshold < 0 && eleHeight < -(threshold)) {
            threshold = -eleHeight;
        }
        var customHeight;
        if (sheet.rows[rowIdx] && sheet.rows[rowIdx].customHeight) {
            customHeight = true;
        }
        this.resizeStart(rowIdx, viewportIdx, rowHeight, false, false, prevData, customHeight);
        setRow(sheet, rowIdx, { height: parseInt(rowHeight, 10) > 0 ? parseInt(rowHeight, 10) : 0, customHeight: true });
        this.parent.notify(rowHeightChanged, { threshold: threshold, rowIdx: rowIdx, isCustomHgt: true });
    };
    Resize.prototype.resizeOn = function (e) {
        var _this = this;
        var idx;
        var actualIdx;
        var sheet = this.parent.getActiveSheet();
        var activeCell = getRangeIndexes(sheet.activeCell);
        var cell = getCell(activeCell[0], activeCell[1], sheet);
        if (this.trgtEle.classList.contains('e-rowresize')) {
            var prevIdx = Number(this.trgtEle.parentElement.getAttribute('aria-rowindex')) - 2;
            if (this.isMouseMoved && isHiddenRow(sheet, prevIdx) && this.trgtEle.classList.contains('e-skip-resize') &&
                e.clientY > this.trgtEle.getBoundingClientRect().top) {
                this.trgtEle.classList.remove('e-skip-resize');
                var eventArgs = { startIndex: prevIdx, endIndex: prevIdx, hide: false, skipAppend: true };
                this.parent.notify(hideShow, eventArgs);
                var rTbody = this.parent.getRowHeaderTable().tBodies[0];
                var tbody = this.parent.getContentTable().tBodies[0];
                eventArgs.hdrRow.style.display = 'none';
                eventArgs.row.style.display = 'none';
                rTbody.insertBefore(eventArgs.hdrRow, rTbody.children[eventArgs.insertIdx]);
                tbody.insertBefore(eventArgs.row, tbody.children[eventArgs.insertIdx]);
                this.trgtEle = eventArgs.hdrRow.firstElementChild;
                eventArgs.hdrRow.nextElementSibling.classList.remove('e-hide-end');
                eventArgs.mergeCollection.forEach(function (mergeArgs) { _this.parent.notify(setMerge, mergeArgs); });
            }
            else {
                if (this.trgtEle.classList.contains('e-skip-resize')) {
                    this.trgtEle.classList.remove('e-skip-resize');
                    if ((!this.isMouseMoved && isHiddenRow(sheet, prevIdx)) || !this.trgtEle.parentElement.previousElementSibling) {
                        return;
                    }
                    this.trgtEle = this.trgtEle.parentElement.previousElementSibling.getElementsByClassName('e-header-cell')[0];
                }
            }
            actualIdx = idx = parseInt(this.trgtEle.parentElement.getAttribute('aria-rowindex'), 10) - 1;
            idx = this.parent.getViewportIndex(actualIdx);
            var frozenCol = this.parent.frozenColCount(sheet);
            var prevData = this.parent.getRow(actualIdx, null, frozenCol).style.height;
            var rowHeight = e.clientY - this.event.clientY + parseInt(prevData, 10);
            if (rowHeight <= 0) {
                this.parent.hideRow(actualIdx);
                this.showHideCopyIndicator();
                setRow(sheet, actualIdx, { height: 0, customHeight: true });
                this.parent.notify(completeAction, {
                    eventArgs: { index: actualIdx, height: '0px', isCol: false, sheetIndex: this.parent.activeSheetIndex, oldHeight: prevData },
                    action: 'resize'
                });
                return;
            }
            this.setRowHeight(actualIdx, idx, rowHeight + "px", prevData);
            this.parent.notify(refreshFilterCellsOnResize, { rowIndex: actualIdx });
            if (this.trgtEle.parentElement.style.display === 'none') {
                var sheet_1 = this.parent.getActiveSheet();
                var selectedRange = getSwapRange(getRangeIndexes(sheet_1.selectedRange));
                if (actualIdx <= selectedRange[2] && actualIdx > selectedRange[0]) {
                    rowHeight = getRowHeight(sheet_1, actualIdx);
                    var count = void 0;
                    for (var i = selectedRange[0]; i <= selectedRange[2]; i++) {
                        if (i === actualIdx) {
                            continue;
                        }
                        prevData = getRowHeight(sheet_1, i) + "px";
                        setRow(sheet_1, i, { customHeight: true, height: rowHeight });
                        if (isHiddenRow(sheet_1, i)) {
                            if (!count) {
                                count = i;
                            }
                        }
                        else {
                            this.parent.getRow(i).style.height = rowHeight + "px";
                            if (sheet_1.showHeaders) {
                                this.parent.getRow(i, this.parent.getRowHeaderTable()).style.height = rowHeight + "px";
                            }
                        }
                        this.parent.notify(completeAction, {
                            eventArgs: {
                                index: i, height: rowHeight + "px", isCol: false,
                                sheetIndex: this.parent.activeSheetIndex, oldHeight: prevData
                            },
                            action: 'resize'
                        });
                    }
                    this.parent.hideRow(selectedRange[0], actualIdx - 1, false);
                    this.showHideCopyIndicator();
                    idx += Math.abs(actualIdx - count);
                }
                else {
                    if (idx !== 0 && !isHiddenRow(sheet_1, actualIdx - 1)) {
                        this.trgtEle.parentElement.previousElementSibling.classList.remove('e-hide-start');
                    }
                    else {
                        if (idx !== 0) {
                            this.trgtEle.parentElement.classList.add('e-hide-end');
                        }
                    }
                    this.parent.selectRange(sheet_1.selectedRange);
                }
                this.trgtEle.parentElement.style.display = '';
                this.parent.getContentTable().rows[idx].style.display = '';
            }
        }
        else if (this.trgtEle.classList.contains('e-colresize')) {
            if (this.isMouseMoved && this.trgtEle.classList.contains('e-unhide-column') &&
                e.clientX < this.trgtEle.getBoundingClientRect().left) {
                this.trgtEle.classList.remove('e-unhide-column');
                if (this.trgtEle.previousElementSibling) {
                    this.trgtEle = this.trgtEle.previousElementSibling;
                }
            }
            idx = parseInt(this.trgtEle.getAttribute('aria-colindex'), 10) - 1;
            var curWidth = void 0;
            if (this.trgtEle.classList.contains('e-unhide-column')) {
                idx -= 1;
                curWidth = 0;
            }
            else {
                curWidth = getColumnWidth(this.parent.getActiveSheet(), idx);
            }
            this.setColWidth(idx, this.parent.getViewportIndex(idx, true), (this.parent.enableRtl ?
                (this.event.clientX - e.clientX) : (e.clientX - this.event.clientX)) + curWidth, curWidth);
        }
        if (cell && cell.format && cell.format.includes('*')) {
            this.parent.notify(getFormattedCellObject, { value: cell.value, format: cell.format, cell: cell,
                formattedText: cell.value, rowIndex: activeCell[0], colIndex: activeCell[1] });
        }
    };
    Resize.prototype.resizeStart = function (idx, viewportIdx, value, isCol, isFit, prevData, isCustomHeight) {
        setResize(idx, viewportIdx, value, isCol, this.parent);
        var action = isFit ? 'resizeToFit' : 'resize';
        var eventArgs;
        var isAction;
        if (isCol) {
            eventArgs = { index: idx, width: value, isCol: isCol, sheetIndex: this.parent.activeSheetIndex, oldWidth: prevData };
            isAction = prevData !== value;
        }
        else {
            eventArgs = { index: idx, height: value, isCol: isCol, sheetIndex: this.parent.activeSheetIndex, oldHeight: prevData,
                isPrevCustomHeight: isCustomHeight };
            isAction = prevData !== value;
        }
        if (isAction) {
            this.parent.notify(completeAction, { eventArgs: eventArgs, action: action });
        }
    };
    Resize.prototype.updateCursor = function () {
        if (this.parent.element.getElementsByClassName('e-colresize-handler')[0]) {
            this.parent.element.classList.add('e-col-resizing');
        }
        else if (this.parent.element.classList.contains('e-col-resizing')) {
            this.parent.element.classList.remove('e-col-resizing');
        }
        if (this.parent.element.getElementsByClassName('e-rowresize-handler')[0]) {
            this.parent.element.classList.add('e-row-resizing');
        }
        else if (this.parent.element.classList.contains('e-row-resizing')) {
            this.parent.element.classList.remove('e-row-resizing');
        }
    };
    // To get the floating element width like filter
    Resize.prototype.getFloatingElementWidth = function (oldWidth, colIdx) {
        var floatingWidth = oldWidth;
        var eventArgs = { filterRange: [], hasFilter: false };
        this.parent.notify(getFilterRange, eventArgs);
        if (eventArgs.hasFilter && eventArgs.filterRange) {
            if (eventArgs.filterRange[1] <= colIdx && eventArgs.filterRange[3] >= colIdx) {
                floatingWidth = oldWidth + 22; // default width and padding for button
            }
        }
        return floatingWidth;
    };
    /**
     * To destroy the resize module.
     *
     * @returns {void} - To destroy the resize module.
     */
    Resize.prototype.destroy = function () {
        this.unwireEvents();
        this.removeEventListener();
        if (this.trgtEle) {
            this.trgtEle.remove();
        }
        this.trgtEle = null;
        this.event = null;
        this.parent = null;
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     */
    Resize.prototype.getModuleName = function () {
        return 'resize';
    };
    Resize.prototype.propertyChange = function (args) {
        if (args.propertyName === 'allowResizing') {
            this.wireEvents();
        }
    };
    return Resize;
}());

/**
 * The `ShowHide` module is used to perform hide/show the rows and columns.
 *
 * @hidden
 */
var ShowHide = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet show hide module.
     *
     * @param {Spreadsheet} parent - Specify the spreadsheet instance.
     * @private
     */
    function ShowHide(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    ShowHide.prototype.hideShow = function (args) {
        var _this = this;
        var sheetIndex = isUndefined$1(args.sheetIndex) ? this.parent.activeSheetIndex : args.sheetIndex;
        var sheet = getSheet(this.parent, sheetIndex);
        if (args.startIndex > args.endIndex) {
            var temp = args.startIndex;
            args.startIndex = args.endIndex;
            args.endIndex = temp;
        }
        if (args.actionUpdate !== undefined) {
            var range = args.isCol ? [0, args.startIndex, sheet.rowCount - 1, args.endIndex] :
                [args.startIndex, 0, args.endIndex, sheet.colCount - 1];
            if (isReadOnlyCells(this.parent, range)) {
                if (args.actionUpdate) {
                    this.parent.notify(readonlyAlert, null);
                }
                return;
            }
        }
        var actionArgs;
        if (args.actionUpdate) {
            args.sheetIndex = sheetIndex;
            actionArgs = { eventArgs: args, action: 'hideShow' };
            this.parent.notify(beginAction, actionArgs);
            if (args.cancel) {
                return;
            }
            delete args.cancel;
        }
        if (args.hide) {
            args.hiddenIndexes = [];
        }
        var performHideShow = function (updateViewport) {
            if (args.isCol) {
                _this.hideCol(args);
                if (updateViewport) {
                    _this.parent.sheetModule.colWidthChanged({ colIdx: args.startIndex, isHideShow: true });
                }
            }
            else {
                _this.hideRow(args);
                if (updateViewport) {
                    _this.parent.sheetModule.rowHeightChanged({ rowIdx: args.startIndex, isHideShow: true });
                }
            }
        };
        var freezePane = args.isCol ? this.parent.frozenColCount(sheet) : this.parent.frozenRowCount(sheet);
        if (freezePane && args.startIndex < freezePane) {
            var endIndex = void 0;
            args.freezePane = true;
            if (args.endIndex >= freezePane) {
                endIndex = args.endIndex;
                args.endIndex = freezePane - 1;
            }
            performHideShow(true);
            delete args.freezePane;
            if (endIndex !== undefined) {
                var startIndex = args.startIndex;
                args.endIndex = endIndex;
                args.startIndex = freezePane;
                performHideShow(!this.parent.scrollSettings.enableVirtualization);
                args.startIndex = startIndex;
            }
        }
        else {
            performHideShow(!this.parent.scrollSettings.enableVirtualization);
        }
        if (args.actionUpdate) {
            this.updateIndexOnlyForHiddenColumnsAndRows(args, sheet);
            this.parent.notify(completeAction, actionArgs);
            focus(this.parent.element);
        }
    };
    ShowHide.prototype.updateIndexOnlyForHiddenColumnsAndRows = function (args, sheet) {
        var startIndex = args.startIndex;
        var endIndex = args.endIndex;
        var model;
        for (var sIdx = args.startIndex; sIdx <= endIndex; sIdx++) {
            model = args.isCol ? getColumn(sheet, sIdx) : getRow(sheet, sIdx) || {};
            if (model.hidden === false) {
                args.startIndex = sIdx;
                break;
            }
        }
        for (var eIdx = args.endIndex; eIdx >= startIndex; eIdx--) {
            model = args.isCol ? getColumn(sheet, eIdx) : getRow(sheet, eIdx) || {};
            if (model.hidden === false) {
                args.endIndex = eIdx;
                break;
            }
        }
    };
    ShowHide.prototype.hideRow = function (eventArgs) {
        var _this = this;
        var sheetIndex = isUndefined$1(eventArgs.sheetIndex) ? this.parent.activeSheetIndex : eventArgs.sheetIndex;
        var sheet = getSheet(this.parent, sheetIndex);
        var cell;
        var count = 0;
        var idx;
        var nextIdx;
        var merge;
        var model;
        var args = Object.assign({}, eventArgs);
        var isFinite = this.parent.scrollSettings.isFinite && !args.freezePane;
        var height;
        if (isFinite) {
            if (args.startIndex >= sheet.rowCount) {
                return;
            }
            if (args.endIndex >= sheet.rowCount) {
                args.endIndex = sheet.rowCount - 1;
            }
            height = 0;
        }
        var frozenRow = this.parent.frozenRowCount(sheet);
        if (args.hide) {
            var content = void 0;
            var rowHdr_1;
            var row = void 0;
            var prevChartIndexes = [];
            var currentChartIndexes = [];
            var updateBtmIdx = isFinite && args.endIndex === skipHiddenIdx(sheet, sheet.rowCount - 1, false);
            for (var i = args.startIndex; i <= args.endIndex; i++) {
                if (isHiddenRow(sheet, i)) {
                    if (args.isFiltering && !isFilterHidden(sheet, i)) {
                        setRow(sheet, i, { isFiltered: true });
                    }
                    continue;
                }
                if (idx === undefined) {
                    if (args.freezePane) {
                        rowHdr_1 = this.parent.sheetModule.getSelectAllTable();
                        content = this.parent.getColHeaderTable();
                    }
                    else {
                        rowHdr_1 = this.parent.getRowHeaderTable();
                        content = this.parent.getContentTable();
                    }
                    idx = this.parent.getViewportIndex(i);
                    count = 0;
                }
                model = { hidden: true };
                if (args.isFiltering) {
                    model.isFiltered = true;
                }
                if (!args.isFiltering) {
                    prevChartIndexes = getChartsIndexes(this.parent);
                }
                setRow(sheet, i, model);
                if (!args.isFiltering) {
                    currentChartIndexes = getChartsIndexes(this.parent);
                }
                if (sheetIndex !== this.parent.activeSheetIndex) {
                    continue;
                }
                if (isFinite) {
                    height += getRowHeight(sheet, i, true, true);
                }
                this.refreshChart(i, 'rows');
                if (!args.isFiltering) {
                    this.refreshChartCellModel(prevChartIndexes, currentChartIndexes);
                }
                row = content && content.rows[idx];
                if (row) {
                    if (!merge) {
                        for (var j = 0; j <= sheet.usedRange.colIndex; j++) {
                            cell = getCell(i, j, sheet) || {};
                            if ((cell.colSpan || cell.rowSpan) && (args.startIndex >= this.parent.viewport.topIndex ||
                                this.parent.scrollSettings.enableVirtualization)) {
                                merge = true;
                                break;
                            }
                        }
                    }
                    if (merge) {
                        continue;
                    }
                    if (rowHdr_1.rows[idx]) {
                        detach(rowHdr_1.rows[idx]);
                    }
                    detach(row);
                    count++;
                    row = content.rows[idx];
                    if (row && i === args.endIndex) {
                        var cell_1 = void 0;
                        nextIdx = skipHiddenIdx(sheet, i + 1, true);
                        var first = nextIdx !== skipHiddenIdx(sheet, 0, true) && nextIdx ===
                            (this.parent.viewport.topIndex >= args.startIndex ? args.endIndex + 1 : this.parent.viewport.topIndex) ? 'Row' : '';
                        for (var j = this.parent.viewport.leftIndex; j <= this.parent.viewport.rightIndex; j++) {
                            var borderTop = this.parent.getCellStyleValue(['borderTop'], [nextIdx, j]).borderTop;
                            if (borderTop !== '') {
                                cell_1 = row.cells[j];
                                this.parent.notify(applyCellFormat, {
                                    onActionUpdate: false, rowIdx: nextIdx, colIdx: j,
                                    style: { borderTop: borderTop }, row: row, pRow: row.previousElementSibling,
                                    first: first, td: cell_1
                                });
                            }
                        }
                    }
                }
                else {
                    if (i <= this.parent.viewport.bottomIndex) {
                        count++;
                    }
                    else {
                        count--;
                    }
                }
            }
            if (args.refreshUI) {
                return;
            }
            if (merge && (args.startIndex >= this.parent.viewport.topIndex || !this.parent.scrollSettings.enableVirtualization)) {
                if (args.isFiltering) {
                    eventArgs.refreshUI = true;
                }
                else {
                    this.parent.selectRange(sheet.selectedRange);
                    if (sheet.frozenRows || sheet.frozenColumns) {
                        this.parent.renderModule.refreshSheet(false, false, true);
                        eventArgs.refreshUI = true;
                    }
                    else {
                        this.parent.renderModule.refreshUI({ rowIndex: this.parent.viewport.topIndex, colIndex: this.parent.viewport.leftIndex, refresh: 'Row' });
                    }
                }
                return;
            }
            if (!count) {
                return;
            }
            this.parent.selectRange(sheet.selectedRange);
            var updateHideClass = function () {
                if (sheet.showHeaders) {
                    var firstIdx = args.freezePane ? 1 : 0;
                    if (idx === firstIdx) {
                        if (rowHdr_1.rows[firstIdx]) {
                            rowHdr_1.rows[firstIdx].classList.add('e-hide-end');
                        }
                    }
                    else {
                        if (rowHdr_1 && rowHdr_1.rows[idx - 1]) {
                            rowHdr_1.rows[idx - 1].classList.add('e-hide-start');
                        }
                        if (rowHdr_1 && rowHdr_1.rows[idx]) {
                            rowHdr_1.rows[idx].classList.add('e-hide-end');
                        }
                    }
                }
            };
            if (!args.freezePane && this.parent.scrollSettings.enableVirtualization) {
                var startIndex = args.startIndex;
                var endIndex = args.startIndex;
                if (args.startIndex < getCellIndexes(sheet.paneTopLeftCell)[0] || count > this.parent.viewport.rowCount) {
                    if (args.isFiltering) {
                        eventArgs.refreshUI = true;
                        return;
                    }
                    this.parent.updateTopLeftCell(skipHiddenIdx(sheet, args.startIndex - 1 < frozenRow ? frozenRow : args.startIndex - 1, true) - frozenRow, null, 'col');
                    this.parent.renderModule.refreshSheet(false, false, true);
                }
                else {
                    startIndex = this.parent.viewport.bottomIndex + 1;
                    endIndex = startIndex + count - 1;
                    var indexes = this.parent.skipHidden(startIndex, endIndex, 'rows', false);
                    startIndex = indexes[0];
                    endIndex = indexes[1];
                    if (isFinite) {
                        if (startIndex >= sheet.rowCount) {
                            if (this.parent.viewport.topIndex + frozenRow === skipHiddenIdx(sheet, frozenRow, true)) {
                                updateHideClass();
                                this.parent.notify(updateTranslate, { isHide: true, height: height });
                                if (updateBtmIdx) {
                                    this.parent.viewport.bottomIndex = skipHiddenIdx(sheet, sheet.rowCount - 1, false);
                                }
                            }
                            else {
                                this.parent.renderModule.refreshSheet(false, false, true);
                            }
                            return;
                        }
                        else if (endIndex >= sheet.rowCount) {
                            this.parent.renderModule.refreshSheet(false, false, true);
                            return;
                        }
                        else {
                            this.parent.notify(updateTranslate, { isHide: true, height: height });
                        }
                    }
                    this.parent.viewport.bottomIndex = endIndex;
                    var colIndex = void 0;
                    var frozenCol = this.parent.frozenColCount(sheet);
                    var frozenIdxes = [];
                    if (frozenCol) {
                        frozenIdxes.push(frozenRow);
                        frozenIdxes.push(this.parent.viewport.leftIndex + frozenCol);
                        colIndex = getCellIndexes(sheet.topLeftCell)[1];
                    }
                    else {
                        colIndex = this.parent.viewport.leftIndex;
                    }
                    this.parent.renderModule.refreshUI({ colIndex: colIndex, rowIndex: startIndex, direction: '', refresh: 'RowPart', frozenIndexes: frozenIdxes }, getCellAddress(startIndex, colIndex) + ":" + getCellAddress(endIndex, this.parent.viewport.rightIndex));
                }
            }
            updateHideClass();
        }
        else {
            var hFrag = void 0;
            var frag = void 0;
            var hRow = void 0;
            var row = void 0;
            var newStartRow = void 0;
            var rowRenderer = void 0;
            var content = void 0;
            var rowHdr = void 0;
            var startRow = void 0;
            var endRow = args.startIndex - 1;
            var mergeCollection = [];
            var skipDetach = args.freezePane;
            var direction = 'lastElementChild';
            var detachedHeight = 0;
            var viewportTopIdx = this.parent.viewport.topIndex + frozenRow;
            if (isFinite) {
                var lastIdx = skipHiddenIdx(sheet, sheet.rowCount - 1, false);
                if (this.parent.viewport.bottomIndex === lastIdx) {
                    if (viewportTopIdx === skipHiddenIdx(sheet, frozenRow, true)) {
                        skipDetach = true;
                    }
                    else {
                        var topLeftCell = getRangeIndexes(sheet.paneTopLeftCell)[0];
                        var count_1 = (((sheet.rowCount - 1) - topLeftCell) + 1) -
                            this.parent.hiddenCount(topLeftCell, sheet.rowCount - 1);
                        if (count_1 < this.parent.viewport.rowCount + Math.round(this.parent.getThreshold('row') / 2)) {
                            direction = 'firstElementChild';
                        }
                    }
                }
            }
            var prevChartIndexes = getChartsIndexes(this.parent);
            for (var i = args.startIndex, len = args.endIndex; i <= len; i++) {
                if (!(args.isFiltering ? isHiddenRow(sheet, i) : isHiddenRow(sheet, i) && !isFilterHidden(sheet, i))) {
                    if (args.startIndex === args.endIndex) {
                        return;
                    }
                    if (idx === undefined) {
                        endRow++;
                    }
                    else {
                        newStartRow = i;
                    }
                    continue;
                }
                if (newStartRow !== undefined) {
                    len = i;
                    continue;
                }
                model = { hidden: false };
                if (args.isFiltering) {
                    model.isFiltered = false;
                }
                if (!skipDetach && i > this.parent.viewport.bottomIndex) {
                    setRow(sheet, i, model);
                    if (startRow === undefined) {
                        return;
                    }
                    continue;
                }
                if (startRow === undefined) {
                    startRow = i;
                }
                setRow(sheet, i, model);
                if (sheetIndex !== this.parent.activeSheetIndex) {
                    continue;
                }
                if (isFinite) {
                    height += getRowHeight(sheet, i, true, true);
                }
                this.refreshChart(i, 'rows');
                if (idx === undefined) {
                    hFrag = document.createDocumentFragment();
                    frag = document.createDocumentFragment();
                    rowRenderer = this.parent.serviceLocator.getService('row');
                    if (args.freezePane) {
                        rowHdr = this.parent.sheetModule.getSelectAllTable();
                        content = this.parent.getColHeaderTable();
                    }
                    else {
                        rowHdr = this.parent.getRowHeaderTable();
                        content = this.parent.getContentTable();
                        if (i < this.parent.viewport.topIndex + frozenRow) {
                            this.parent.viewport.topIndex = i - frozenRow;
                        }
                    }
                    idx = this.parent.getViewportIndex(i);
                }
                endRow++;
                hRow = rowRenderer.refresh(i, null, null, true, true);
                hFrag.appendChild(hRow);
                if (rowHdr && rowHdr.rows.length && !skipDetach) {
                    detach(rowHdr.tBodies[0]["" + direction]);
                }
                row = frag.appendChild(rowRenderer.refresh(i, row, hRow));
                if (content && content.rows.length && !skipDetach) {
                    detach(content.tBodies[0]["" + direction]);
                    if (direction === 'firstElementChild') {
                        if (idx !== undefined && idx - 1 > -1) {
                            idx -= 1;
                        }
                        detachedHeight += getRowHeight(sheet, this.parent.viewport.topIndex, true);
                        this.parent.viewport.topIndex = skipHiddenIdx(sheet, this.parent.viewport.topIndex + 1, true);
                    }
                }
                for (var j = this.parent.viewport.leftIndex; j <= this.parent.viewport.rightIndex; j++) {
                    cell = getCell(i, j, sheet) || {};
                    if (cell.rowSpan !== undefined || cell.colSpan !== undefined) {
                        var mergeArgs = {
                            range: [i, j, i, j], isAction: false, merge: true,
                            type: 'All', skipChecking: true
                        };
                        this.parent.notify(activeCellMergedRange, mergeArgs);
                        if (!mergeCollection.length || mergeArgs.range[1] !== mergeCollection[mergeCollection.length - 1].range[1] ||
                            mergeArgs.range[0] !== mergeCollection[mergeCollection.length - 1].range[0]) {
                            mergeCollection.push(mergeArgs);
                        }
                    }
                }
            }
            var currentChartIndexes = getChartsIndexes(this.parent);
            this.refreshChartCellModel(prevChartIndexes, currentChartIndexes);
            if (idx === undefined) {
                return;
            }
            var refreshUI = void 0;
            if (!args.freezePane) {
                if (args.isFiltering && args.startIndex < getCellIndexes(sheet.paneTopLeftCell)[0]) {
                    eventArgs.refreshUI = true;
                    if (newStartRow === undefined || newStartRow === args.endIndex) {
                        return;
                    }
                }
                var prevBottomIdx = this.parent.viewport.bottomIndex;
                this.parent.viewport.bottomIndex = this.parent.viewport.topIndex + frozenRow + this.parent.viewport.rowCount +
                    (this.parent.getThreshold('row') * 2);
                var endHiddenCount = this.parent.hiddenCount(args.endIndex + 1, this.parent.viewport.bottomIndex);
                count = this.parent.hiddenCount(this.parent.viewport.topIndex + frozenRow, args.startIndex) + endHiddenCount;
                this.parent.viewport.bottomIndex += count;
                if (isFinite && this.parent.viewport.bottomIndex >= sheet.rowCount) {
                    this.parent.viewport.bottomIndex = skipHiddenIdx(sheet, sheet.rowCount - 1, false);
                }
                if (!args.isFiltering && startRow >= viewportTopIdx && startRow <= prevBottomIdx && startRow >
                    (this.parent.viewport.bottomIndex - endHiddenCount - Math.abs(endRow - startRow))) {
                    refreshUI = true;
                }
            }
            args.insertIdx = eventArgs.insertIdx = idx;
            args.row = eventArgs.row = frag.querySelector('.e-row');
            args.mergeCollection = eventArgs.mergeCollection = mergeCollection;
            if (sheet.showHeaders) {
                eventArgs.hdrRow = args.hdrRow = hFrag.querySelector('.e-row');
                if (idx !== 0 && !isHiddenRow(sheet, endRow - 1) && rowHdr.rows[idx - 1]) {
                    rowHdr.rows[idx - 1].classList.remove('e-hide-start');
                }
                if (args.startIndex !== 0 && isHiddenRow(sheet, args.startIndex - 1)) {
                    args.hdrRow.classList.add('e-hide-end');
                }
                if (isHiddenRow(sheet, endRow + 1)) {
                    hFrag.lastElementChild.classList.add('e-hide-start');
                }
                else {
                    if (rowHdr.rows[idx]) {
                        rowHdr.rows[idx].classList.remove('e-hide-end');
                    }
                }
            }
            if (row && content && content.rows[idx]) {
                nextIdx = skipHiddenIdx(sheet, endRow + 1, true);
                for (var i = this.parent.viewport.leftIndex; i <= this.parent.viewport.rightIndex; i++) {
                    var borderTop = this.parent.getCellStyleValue(['borderTop'], [nextIdx, i]).borderTop;
                    if (borderTop !== '') {
                        this.parent.notify(applyCellFormat, {
                            onActionUpdate: false, rowIdx: nextIdx, colIdx: i, style: { borderTop: borderTop }, pRow: row,
                            td: content.rows[idx].cells[i], first: ''
                        });
                        var prevIdx = skipHiddenIdx(sheet, startRow - 1, false);
                        if (prevIdx > -1) {
                            if (content.rows[idx - 1] && !this.parent.getCellStyleValue(['borderBottom'], [prevIdx, i]).borderBottom &&
                                !this.parent.getCellStyleValue(['borderTop'], [startRow, i]).borderTop) {
                                content.rows[idx - 1].cells[i].style.borderBottom = '';
                            }
                        }
                        else {
                            content.rows[idx].cells[i].style.borderTop = '';
                        }
                    }
                }
            }
            if (args.skipAppend) {
                return;
            }
            if (isFinite) {
                this.parent.notify(updateTranslate, { height: height, size: detachedHeight });
            }
            if (refreshUI || (Math.abs(endRow - startRow) > this.parent.viewport.rowCount + (this.parent.getThreshold('row') * 2))) {
                this.parent.renderModule.refreshSheet(false, false, true);
            }
            else {
                if (rowHdr) {
                    if (rowHdr.tBodies[0].rows.length) {
                        rowHdr.tBodies[0].insertBefore(hFrag, rowHdr.rows[idx]);
                    }
                    else {
                        rowHdr.tBodies[0].appendChild(hFrag);
                    }
                }
                if (content && content.tBodies[0]) {
                    if (content.tBodies[0].rows.length) {
                        content.tBodies[0].insertBefore(frag, content.rows[idx]);
                    }
                    else {
                        content.tBodies[0].appendChild(frag);
                    }
                }
                this.parent.selectRange(sheet.selectedRange);
                if (args.autoFit && sheet.showHeaders) {
                    this.parent.notify(autoFit, { startIndex: args.startIndex, endIndex: args.endIndex, isRow: true });
                }
                mergeCollection.forEach(function (mergeArgs) { _this.parent.notify(setMerge, mergeArgs); });
                if (newStartRow !== undefined && newStartRow !== args.endIndex) {
                    args.startIndex = newStartRow;
                    this.hideRow(args);
                }
            }
        }
    };
    ShowHide.prototype.hideCol = function (args) {
        var _this = this;
        var sheetIndex = isUndefined$1(args.sheetIndex) ? this.parent.activeSheetIndex : args.sheetIndex;
        var sheet = getSheet(this.parent, sheetIndex);
        var hiddenIndex = [];
        var beforeViewportIdx = [];
        var paneTopLeftIdx = getCellIndexes(sheet.paneTopLeftCell);
        var frozenCol = this.parent.frozenColCount(sheet);
        var frozenRow = this.parent.frozenRowCount(sheet);
        var viewportLeftIdx = this.parent.viewport.leftIndex + frozenCol;
        var scrollable;
        var skipColCount = skipHiddenIdx(sheet, sheet.colCount - 1, false, 'columns');
        for (var i = args.startIndex; i <= args.endIndex; i++) {
            if (args.hide) {
                if (isHiddenCol(sheet, i)) {
                    continue;
                }
            }
            else {
                if (!isHiddenCol(sheet, i) || (args.hiddenIndexes && args.hiddenIndexes.indexOf(i) === -1)) {
                    continue;
                }
            }
            var prevChartIndexes = getChartsIndexes(this.parent);
            setColumn(sheet, i, { hidden: args.hide });
            var currentChartIndexes = getChartsIndexes(this.parent);
            this.refreshChart(i, 'columns');
            this.refreshChartCellModel(prevChartIndexes, currentChartIndexes);
            if (this.parent.scrollSettings.enableVirtualization && !args.freezePane && (i < viewportLeftIdx ||
                (i > this.parent.viewport.rightIndex && (!this.parent.scrollSettings.isFinite ||
                    !(skipColCount === this.parent.viewport.rightIndex && i >= skipColCount && i < sheet.colCount))))) {
                if (i < viewportLeftIdx) {
                    beforeViewportIdx.push(i);
                }
                continue;
            }
            hiddenIndex.push(i);
            if (args.hide) {
                args.hiddenIndexes.push(i);
                if (i <= paneTopLeftIdx[1]) {
                    scrollable = true;
                }
            }
        }
        if (!beforeViewportIdx.length && !hiddenIndex.length) {
            return;
        }
        if (sheetIndex !== this.parent.activeSheetIndex) {
            return;
        }
        var topLeftIdx = getCellIndexes(sheet.topLeftCell);
        var table;
        var hTable;
        var getRowIndexes = function () {
            var idx;
            if (_this.parent.scrollSettings.enableVirtualization) {
                idx = [frozenRow ? topLeftIdx[0] : _this.parent.viewport.topIndex, _this.parent.viewport.bottomIndex];
            }
            else {
                idx = [0, sheet.rowCount - 1];
            }
            if (args.freezePane) {
                table = _this.parent.getRowHeaderTable();
                hTable = _this.parent.sheetModule.getSelectAllTable();
            }
            else {
                table = _this.parent.getContentTable();
                hTable = _this.parent.getColHeaderTable();
            }
            return idx;
        };
        if (args.hide) {
            if (!hiddenIndex.length) {
                return;
            }
            if (hiddenIndex.length <= this.parent.getThreshold('col') || !this.parent.scrollSettings.enableVirtualization ||
                args.freezePane) {
                this.removeCell(sheet, hiddenIndex, getRowIndexes(), table, hTable);
            }
            if (!args.freezePane && this.parent.scrollSettings.enableVirtualization) {
                if (scrollable) {
                    this.parent.updateTopLeftCell(null, skipHiddenIdx(sheet, hiddenIndex[0] - 1 < frozenCol ? frozenCol : hiddenIndex[0] - 1, true, 'columns') -
                        frozenCol, 'row');
                    this.parent.renderModule.refreshSheet(false, false, true);
                    return;
                }
                var fIndexes = [];
                var viewportRowIdx = this.parent.viewport.topIndex;
                var rowIdx = frozenRow ? topLeftIdx[0] : viewportRowIdx;
                if (frozenRow) {
                    fIndexes = [frozenRow + viewportRowIdx, frozenCol];
                }
                if (this.parent.scrollSettings.isFinite) {
                    var colCount = skipHiddenIdx(sheet, sheet.colCount - 1, false, 'columns');
                    var startIdx = this.parent.viewport.leftIndex + frozenCol;
                    var endIndex = this.parent.viewport.rightIndex;
                    if (endIndex + hiddenIndex.length >= colCount) {
                        var index = skipHiddenIdx(sheet, startIdx - ((endIndex + hiddenIndex.length) - colCount), false, 'columns');
                        if (index >= frozenCol) {
                            this.parent.viewport.leftIndex = index;
                            this.parent.viewport.leftIndex -= this.parent.hiddenCount(endIndex, colCount);
                        }
                        this.parent.viewport.rightIndex = colCount;
                        if (startIdx !== (this.parent.viewport.leftIndex + frozenCol) || endIndex !== this.parent.viewport.rightIndex) {
                            this.parent.renderModule.refreshUI({ colIndex: this.parent.viewport.leftIndex, refresh: 'Column', frozenIndexes: fIndexes, rowIndex: rowIdx,
                                skipUpdateOnFirst: this.parent.viewport.leftIndex + frozenCol === skipHiddenIdx(sheet, frozenCol, true, 'columns') });
                            if (frozenRow) {
                                this.parent.viewport.topIndex = viewportRowIdx;
                            }
                        }
                        else {
                            this.parent.notify(updateTableWidth, { refresh: 'Column', isUpdate: true });
                        }
                        this.parent.selectRange(sheet.selectedRange);
                        return;
                    }
                }
                if (hiddenIndex.length <= this.parent.getThreshold('col')) {
                    var indexes = this.parent.skipHidden(this.parent.viewport.rightIndex + 1, this.parent.viewport.rightIndex + hiddenIndex.length, 'columns');
                    this.parent.viewport.rightIndex = indexes[1];
                    this.parent.renderModule.refreshUI({ rowIndex: rowIdx, colIndex: indexes[0], direction: '', refresh: 'ColumnPart', frozenIndexes: fIndexes }, "" + getRangeAddress([rowIdx, indexes[0], this.parent.viewport.bottomIndex, indexes[1]]));
                }
                else {
                    this.parent.renderModule.refreshUI({
                        skipUpdateOnFirst: this.parent.viewport.leftIndex + frozenCol === skipHiddenIdx(sheet, frozenCol, true, 'columns'), rowIndex: rowIdx, colIndex: this.parent.viewport.leftIndex,
                        refresh: 'Column', frozenIndexes: fIndexes
                    });
                    if (frozenRow) {
                        this.parent.viewport.topIndex = viewportRowIdx;
                    }
                }
            }
            this.parent.selectRange(sheet.selectedRange);
        }
        else {
            if (beforeViewportIdx.length && this.parent.scrollSettings.enableVirtualization) {
                beforeViewportIdx.sort(function (i, j) { return i - j; });
                var leftIdx = beforeViewportIdx[0] - 1 < frozenCol ? frozenCol : beforeViewportIdx[0] - 1;
                this.parent.updateTopLeftCell(null, skipHiddenIdx(sheet, leftIdx, true, 'columns') - frozenCol, 'row');
                this.parent.renderModule.refreshSheet(false, false, true);
                if (args.autoFit) {
                    args.autoFit = false;
                }
                return;
            }
            if ((!this.parent.scrollSettings.isFinite || this.parent.viewport.rightIndex < skipColCount) &&
                (hiddenIndex.length <= this.parent.getThreshold('col') || !this.parent.scrollSettings.enableVirtualization
                    || args.freezePane)) {
                this.appendCell(sheet, hiddenIndex, getRowIndexes(), table, hTable, args.freezePane);
                if (this.parent.scrollSettings.enableVirtualization && !args.freezePane) {
                    this.parent.notify(virtualContentLoaded, { refresh: 'Column', prevRowColCnt: { rowCount: sheet.rowCount, colCount: sheet.colCount } });
                }
                this.parent.selectRange(sheet.selectedRange);
            }
            else {
                this.parent.renderModule.refreshSheet(false, false, true);
            }
        }
    };
    ShowHide.prototype.removeCell = function (sheet, indexes, rowIdxs, table, hTable) {
        var _this = this;
        var startIdx = rowIdxs[0];
        var endIdx = rowIdxs[1];
        var rowIdx = 0;
        var len = indexes.length - 1;
        var frozenRow = this.parent.frozenRowCount(sheet);
        var colgrp = table.getElementsByTagName('colgroup')[0];
        var cellIdx = this.parent.getViewportIndex(indexes[0], true) + 1;
        var lastFreezeRow = skipHiddenIdx(sheet, frozenRow - 1, false);
        var hRow;
        var row;
        var hColgrp;
        var cell;
        var nextIdx;
        if (sheet.showHeaders) {
            hColgrp = hTable.getElementsByTagName('colgroup')[0];
            hRow = hTable.rows[0];
        }
        while (startIdx <= endIdx) {
            if (isHiddenRow(sheet, startIdx)) {
                startIdx++;
                continue;
            }
            row = frozenRow && startIdx < frozenRow ? hTable.rows[rowIdx + 1] : table.rows[rowIdx];
            indexes.forEach(function (idx, index) {
                if (rowIdx === 0 && startIdx >= frozenRow) {
                    if (sheet.showHeaders) {
                        detach(hColgrp.children[cellIdx]);
                        detach(hRow.cells[cellIdx]);
                    }
                    detach(colgrp.children[cellIdx]);
                }
                detach(row.cells[cellIdx]);
                if (index === 0) {
                    cell = getCell(startIdx, idx, sheet, false, true);
                    if ((cell.colSpan !== undefined && (cell.rowSpan === undefined || cell.colSpan > 1)) || (cell.rowSpan < 0 &&
                        startIdx - 1 > -1 && isHiddenRow(sheet, startIdx - 1) && Math.abs(cell.rowSpan) ===
                        _this.parent.hiddenCount(startIdx + cell.rowSpan, startIdx, 'rows', sheet))) {
                        _this.parent.notify(hiddenMerge, { rowIdx: startIdx, colIdx: idx, model: 'col', start: indexes[0], end: indexes[len] });
                    }
                }
                if (index === len) {
                    nextIdx = skipHiddenIdx(sheet, idx + 1, true, 'columns');
                    var borderLeft = _this.parent.getCellStyleValue(['borderLeft'], [rowIdx, nextIdx]).borderLeft;
                    if (borderLeft !== '') {
                        _this.parent.notify(applyCellFormat, {
                            onActionUpdate: false, rowIdx: rowIdx, colIdx: nextIdx,
                            style: { borderLeft: borderLeft }, row: row, first: ''
                        });
                    }
                    cell = getCell(startIdx, idx, sheet) || {};
                    if ((cell.colSpan !== undefined && (cell.rowSpan === undefined || cell.colSpan > 1)) || (cell.rowSpan < 0 &&
                        startIdx - 1 > -1 && isHiddenRow(sheet, startIdx - 1) && Math.abs(cell.rowSpan) ===
                        _this.parent.hiddenCount(startIdx + cell.rowSpan, startIdx, 'rows', sheet))) {
                        _this.parent.notify(hiddenMerge, {
                            rowIdx: startIdx, colIdx: idx, model: 'col',
                            start: indexes[0], end: indexes[len], isEnd: true
                        });
                    }
                }
            });
            if (frozenRow && startIdx === lastFreezeRow) {
                rowIdx = 0;
                startIdx = this.parent.viewport.topIndex + frozenRow;
            }
            else {
                rowIdx++;
                startIdx++;
            }
        }
        if (cellIdx - 1 > -1 && sheet.showHeaders && hRow.cells[cellIdx - 1]) {
            hRow.cells[cellIdx - 1].classList.add('e-hide-start');
        }
        if (sheet.showHeaders && hRow.cells[cellIdx]) {
            hRow.cells[cellIdx].classList.add('e-hide-end');
        }
    };
    ShowHide.prototype.appendCell = function (sheet, indexes, rowIdxs, table, hTable, skip) {
        var _this = this;
        var startIdx = rowIdxs[0];
        var endIdx = rowIdxs[1];
        var rowIdx = 0;
        var len = indexes.length - 1;
        var hRow;
        var row;
        var hColgrp;
        var prevIdx;
        var frozenRow = this.parent.frozenRowCount(sheet);
        var colgrp = table.getElementsByTagName('colgroup')[0];
        if (sheet.showHeaders) {
            hColgrp = hTable.getElementsByTagName('colgroup')[0];
            hRow = hTable.rows[0];
        }
        var cellRenderer = this.parent.serviceLocator.getService('cell');
        indexes.sort(function (i, j) { return i - j; });
        var mergeCollection = [];
        var cellIdx = [];
        var cell;
        var refCell;
        var cellModel;
        var firstFrozenRow = skipHiddenIdx(sheet, frozenRow - 1, false);
        var cellArgs;
        while (startIdx <= endIdx) {
            if (isHiddenRow(sheet, startIdx)) {
                startIdx++;
                continue;
            }
            row = frozenRow && startIdx < frozenRow ? hTable.rows[rowIdx + 1] : table.rows[rowIdx];
            indexes.forEach(function (idx, index) {
                if (rowIdx === 0) {
                    cellIdx[index] = _this.parent.getViewportIndex(idx, true);
                    if (sheet.showHeaders) {
                        refCell = hRow.cells[cellIdx[index]];
                        if (refCell) {
                            if (index === 0 && indexes[index] && !isHiddenCol(sheet, indexes[index] - 1) &&
                                refCell.previousSibling) {
                                refCell.previousElementSibling.classList.remove('e-hide-start');
                            }
                            if (index === len) {
                                refCell.classList.remove('e-hide-end');
                            }
                        }
                    }
                    if (startIdx >= frozenRow) {
                        if (colgrp.children[cellIdx[index]]) {
                            colgrp.insertBefore(_this.parent.sheetModule.updateCol(sheet, idx), colgrp.children[cellIdx[index]]);
                            if (sheet.showHeaders) {
                                cellRenderer.renderColHeader(idx, hRow, refCell);
                            }
                        }
                        else {
                            colgrp.appendChild(_this.parent.sheetModule.updateCol(sheet, idx));
                            if (sheet.showHeaders) {
                                cellRenderer.renderColHeader(idx, hRow);
                            }
                        }
                        if (!skip) {
                            detach(colgrp.lastChild);
                            if (sheet.showHeaders) {
                                detach(hRow.lastChild);
                            }
                        }
                        if (sheet.showHeaders && index === len) {
                            detach(hColgrp);
                            hTable.insertBefore(colgrp.cloneNode(true), hTable.tHead);
                        }
                    }
                }
                if (!skip) {
                    detach(row.lastChild);
                }
                refCell = row.cells[cellIdx[index]];
                cellArgs = {
                    rowIdx: startIdx, colIdx: idx, cell: getCell(startIdx, idx, sheet), row: row,
                    address: getCellAddress(startIdx, idx), lastCell: idx === len, isHeightCheckNeeded: true,
                    first: idx !== skipHiddenIdx(sheet, 0, true, 'columns') && idx === _this.parent.viewport.leftIndex ? 'Column' : '',
                    checkNextBorder: index === len ? 'Column' : '', checkCF: true
                };
                if (refCell) {
                    cellArgs.refChild = refCell;
                }
                cell = cellRenderer.render(cellArgs);
                if (index === 0 && cell.previousSibling) {
                    var borderLeft = _this.parent.getCellStyleValue(['borderLeft'], [rowIdx, skipHiddenIdx(sheet, indexes[indexes.length - 1] + 1, true, 'columns')]).borderLeft;
                    if (borderLeft !== '') {
                        prevIdx = skipHiddenIdx(sheet, indexes[0] - 1, false, 'columns');
                        if (prevIdx > -1 && !_this.parent.getCellStyleValue(['borderRight'], [rowIdx, prevIdx]).borderRight &&
                            !_this.parent.getCellStyleValue(['borderLeft'], [rowIdx, indexes[0]]).borderLeft) {
                            cell.previousSibling.style.borderRight = '';
                        }
                    }
                }
                cellModel = getCell(startIdx, idx, sheet) || {};
                if ((cellModel.colSpan !== undefined && (cellModel.rowSpan === undefined || cellModel.colSpan > 1)) ||
                    (cellModel.rowSpan < 0 && startIdx - 1 > -1 && isHiddenRow(sheet, startIdx - 1) &&
                        Math.abs(cellModel.rowSpan) === _this.parent.hiddenCount(startIdx + cellModel.rowSpan, startIdx, 'rows', sheet))) {
                    var mergeArgs = {
                        range: [startIdx, idx, startIdx, idx], isAction: false, merge: true,
                        type: 'All', skipChecking: true
                    };
                    _this.parent.notify(activeCellMergedRange, mergeArgs);
                    if (!mergeCollection.length || mergeArgs.range[1] !== mergeCollection[mergeCollection.length - 1].range[1] ||
                        mergeArgs.range[0] !== mergeCollection[mergeCollection.length - 1].range[0]) {
                        mergeCollection.push(mergeArgs);
                    }
                }
            });
            if (frozenRow && startIdx === firstFrozenRow) {
                startIdx = this.parent.viewport.topIndex + frozenRow;
                rowIdx = 0;
            }
            else {
                startIdx++;
                rowIdx++;
            }
        }
        mergeCollection.forEach(function (mergeArgs) { _this.parent.notify(setMerge, mergeArgs); });
        this.parent.viewport.rightIndex = skipHiddenIdx(sheet, this.parent.viewport.rightIndex - indexes.length, false, 'columns');
    };
    ShowHide.prototype.refreshChart = function (index, showHide) {
        this.parent.notify(refreshChart, { rIdx: index, showHide: showHide });
    };
    ShowHide.prototype.refreshChartCellModel = function (prevChartIndexes, currentChartIndexes) {
        this.parent.notify(refreshChartCellModel, { prevChartIndexes: prevChartIndexes, currentChartIndexes: currentChartIndexes });
    };
    ShowHide.prototype.addEventListener = function () {
        this.parent.on(hideShow, this.hideShow, this);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
    };
    ShowHide.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    ShowHide.prototype.removeEventListener = function () {
        this.parent.off(hideShow, this.hideShow);
        this.parent.off(spreadsheetDestroyed, this.destroy);
    };
    return ShowHide;
}());

/**
 * `Hyperlink` module
 */
var SpreadsheetHyperlink = /** @class */ (function () {
    /**
     * Constructor for Hyperlink module.
     *
     * @param {Spreadsheet} parent - Constructor for Hyperlink module.
     */
    function SpreadsheetHyperlink(parent) {
        this.divElements = [];
        this.inputElements = [];
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the Hyperlink module.
     *
     * @returns {void} - To destroy the Hyperlink module.
     */
    SpreadsheetHyperlink.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    SpreadsheetHyperlink.prototype.addEventListener = function () {
        this.parent.on(initiateHyperlink, this.initiateHyperlinkHandler, this);
        this.parent.on(editHyperlink, this.editHyperlinkHandler, this);
        this.parent.on(openHyperlink, this.openHyperlinkHandler, this);
        this.parent.on(click, this.hyperlinkClickHandler, this);
        this.parent.on(createHyperlinkElement, this.createHyperlinkEle, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
        this.parent.on(deleteHyperlink, this.removeHyperlink, this);
        this.parent.on(removeHyperlink, this.removeHyperlinkHandler, this);
    };
    SpreadsheetHyperlink.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(initiateHyperlink, this.initiateHyperlinkHandler);
            this.parent.off(editHyperlink, this.editHyperlinkHandler);
            this.parent.off(openHyperlink, this.openHyperlinkHandler);
            this.parent.off(click, this.hyperlinkClickHandler);
            this.parent.off(createHyperlinkElement, this.createHyperlinkEle);
            this.parent.off(keyUp, this.keyUpHandler);
            this.parent.off(deleteHyperlink, this.removeHyperlink);
            this.parent.off(removeHyperlink, this.removeHyperlinkHandler);
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    SpreadsheetHyperlink.prototype.getModuleName = function () {
        return 'spreadsheetHyperlink';
    };
    SpreadsheetHyperlink.prototype.keyUpHandler = function (e) {
        var trgt = e.target;
        if (closest(trgt, '.e-document')) {
            var hyperlinkText = document.querySelector('.e-hyp-text');
            var hyperlinkSpan = this.parent.element.querySelector('.e-hyperlink-alert-span');
            var dlgElement = closest(trgt, '.e-hyperlink-dlg') || closest(trgt, '.e-edithyperlink-dlg');
            var footerEle = dlgElement.getElementsByClassName('e-footer-content')[0];
            var insertBut = footerEle.firstChild;
            if (hyperlinkText && !isNullOrUndefined(hyperlinkText.value)) {
                if (!isCellReference(hyperlinkText.value.toUpperCase())) {
                    this.showDialog();
                    insertBut.setAttribute('disabled', 'true');
                }
                else if (hyperlinkSpan) {
                    hyperlinkSpan.remove();
                    insertBut.removeAttribute('disabled');
                }
            }
        }
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-cont')) {
            if (closest(trgt, '.e-webpage') && closest(trgt, '.e-webpage').getElementsByClassName('e-cont')[1] === trgt.parentElement) {
                var dlgEle = closest(trgt, '.e-hyperlink-dlg') || closest(trgt, '.e-edithyperlink-dlg');
                var ftrEle = dlgEle.getElementsByClassName('e-footer-content')[0];
                var insertBut = ftrEle.firstChild;
                if (trgt.value !== '') {
                    insertBut.removeAttribute('disabled');
                }
                else {
                    var linkDialog = closest(trgt, '.e-link-dialog');
                    var webPage = linkDialog.querySelector('.e-webpage');
                    var isUrl = webPage.querySelectorAll('.e-cont')[1].querySelector('.e-text').value ? true : false;
                    if (!isUrl) {
                        insertBut.setAttribute('disabled', 'true');
                    }
                }
            }
        }
    };
    SpreadsheetHyperlink.prototype.initiateHyperlinkHandler = function () {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        if (sheet.isProtected && (!sheet.protectSettings.insertLink || isLockedCells(this.parent))) {
            this.parent.notify(editAlert, null);
            return;
        }
        if (isReadOnlyCells(this.parent)) {
            this.parent.notify(readonlyAlert, null);
            return;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        if (!this.parent.element.querySelector('.e-hyperlink-dlg')) {
            var dialogInst_1 = this.parent.serviceLocator.getService(dialog);
            var displayText_1;
            dialogInst_1.show({
                width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-hyperlink-dlg',
                header: l10n.getConstant('InsertLink'),
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'InsertLinkDialog',
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                        return;
                    }
                    dialogInst_1.dialogInstance.content = _this.hyperlinkContent();
                    displayText_1 = dialogInst_1.dialogInstance.content.querySelector('.e-text').value;
                    dialogInst_1.dialogInstance.dataBind();
                    focus(_this.parent.element);
                },
                open: function () {
                    setTimeout(function () {
                        focus(dialogInst_1.dialogInstance.element.querySelectorAll('.e-webpage input')[1]);
                    });
                },
                beforeClose: this.dialogBeforeClose.bind(this),
                buttons: [{
                        buttonModel: {
                            content: l10n.getConstant('Insert'), isPrimary: true, disabled: true
                        },
                        click: function () {
                            _this.dlgClickHandler(displayText_1);
                            dialogInst_1.hide();
                        }
                    }]
            });
        }
    };
    SpreadsheetHyperlink.prototype.dialogBeforeClose = function () {
        var headerTab = this.headerTabs;
        if (headerTab && headerTab.element) {
            headerTab.destroy();
            headerTab.element.remove();
        }
        this.headerTabs = null;
        removeElements(this.inputElements);
        this.inputElements = [];
        removeElements(this.divElements);
        this.divElements = [];
    };
    SpreadsheetHyperlink.prototype.dlgClickHandler = function (displayText) {
        var value;
        var address;
        var sheet = this.parent.getActiveSheet();
        var cellAddress = sheet.name + '!' + sheet.selectedRange;
        var item = this.parent.element.querySelector('.e-link-dialog').
            getElementsByClassName('e-content')[0].querySelector('.e-item.e-active');
        if (item) {
            value = item.getElementsByClassName('e-cont')[0].querySelector('.e-text').value;
            if (value === displayText) {
                value = null;
            }
            if (item.querySelector('.e-webpage')) {
                address = item.getElementsByClassName('e-cont')[1].querySelector('.e-text').value;
                var args = { address: address };
                this.parent.insertHyperlink(args, cellAddress, value, false);
            }
            else {
                address = item.getElementsByClassName('e-cont')[1].querySelector('.e-text').value;
                var dlgContent = item.getElementsByClassName('e-cont')[2];
                if (dlgContent.getElementsByClassName('e-list-item')[0].querySelector('.e-active')) {
                    var sheetName = item.getElementsByClassName('e-cont')[2].querySelector('.e-active').textContent;
                    // const sheets: SheetModel[] = spreadsheetInst.sheets;
                    // for (let idx: number = 0; idx < sheets.length; idx++) {
                    //     if (sheets[idx].name === sheetName) {
                    //         const sheetIdx: number = idx + 1;
                    //     }
                    // }
                    address = sheetName + '!' + address.toUpperCase();
                    var args = { address: address };
                    this.parent.insertHyperlink(args, cellAddress, value, false);
                }
                else if (dlgContent.querySelector('.e-active')) {
                    var definedName = item.getElementsByClassName('e-cont')[2].querySelector('.e-active').textContent;
                    for (var idx = 0; idx < this.parent.definedNames.length; idx++) {
                        if (this.parent.definedNames[idx].name === definedName) {
                            var args = {
                                address: this.parent.definedNames[idx].name
                            };
                            this.parent.insertHyperlink(args, cellAddress, value, false);
                        }
                    }
                }
            }
        }
    };
    SpreadsheetHyperlink.prototype.showDialog = function () {
        if (this.parent.element.querySelector('.e-hyperlink-alert-span')) {
            this.parent.element.querySelector('.e-hyperlink-alert-span').remove();
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var hyperlinkSpan = this.parent.createElement('span', { className: 'e-hyperlink-alert-span' });
        hyperlinkSpan.innerText = l10n.getConstant('HyperlinkAlert');
        var dlgEle = this.parent.element.querySelector('.e-hyperlink-dlg') || this.parent.element.querySelector('.e-edithyperlink-dlg');
        (dlgEle.querySelector('.e-dlg-content')).appendChild(hyperlinkSpan);
    };
    SpreadsheetHyperlink.prototype.editHyperlinkHandler = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var displayText;
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-edithyperlink-dlg',
            header: l10n.getConstant('EditLink'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'EditLinkDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                    return;
                }
                dialogInst.dialogInstance.content = _this.hyperEditContent();
                displayText = dialogInst.dialogInstance.content.querySelector('.e-text').value;
                dialogInst.dialogInstance.dataBind();
                focus(_this.parent.element);
            },
            open: function () {
                setTimeout(function () {
                    if (dialogInst.dialogInstance.element.querySelector('.e-webpage')) {
                        focus(dialogInst.dialogInstance.element.querySelectorAll('.e-webpage input')[1]);
                    }
                    else {
                        focus(dialogInst.dialogInstance.element.querySelectorAll('.e-document input')[1]);
                    }
                });
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Update'), isPrimary: true
                    },
                    click: function () {
                        _this.dlgClickHandler(displayText);
                        dialogInst.hide();
                    }
                }]
        });
    };
    SpreadsheetHyperlink.prototype.openHyperlinkHandler = function () {
        var cellIndexes = getCellIndexes(this.parent.getActiveSheet().activeCell);
        var trgt = this.parent.getCell(cellIndexes[0], cellIndexes[1]);
        if (trgt.getElementsByClassName('e-hyperlink')[0]) {
            trgt = trgt.querySelector('.e-hyperlink');
        }
        this.hlOpenHandler(trgt);
    };
    SpreadsheetHyperlink.prototype.hlOpenHandler = function (trgt, isClick, event) {
        var _this = this;
        if (trgt.classList.contains('e-hyperlink')) {
            var cellEle = closest(trgt, '.e-cell');
            if (!cellEle) {
                return;
            }
            var range = ['', ''];
            var rangeIndexes = void 0;
            var isEmpty = true;
            var sheet = this.parent.getActiveSheet();
            var colIdx = parseInt(cellEle.getAttribute('aria-colindex'), 10) - 1;
            var rowIdx = parseInt(cellEle.parentElement.getAttribute('aria-rowindex'), 10) - 1;
            var cell = getCell(rowIdx, colIdx, sheet, false, true);
            if (cell.style && cell.style.color === '#00e') {
                updateCell(this.parent, sheet, { rowIdx: rowIdx, colIdx: colIdx, preventEvt: true, cell: { style: { color: '#551a8b' } } });
                cellEle.style.color = '#551a8b';
            }
            var rangeAddr = cell.hyperlink;
            var address = void 0;
            var befArgs = { hyperlink: rangeAddr, address: sheet.activeCell, target: '_blank', cancel: false };
            this.parent.trigger(beforeHyperlinkClick, befArgs);
            if (befArgs.cancel) {
                if (event) {
                    event.preventDefault();
                }
                return;
            }
            rangeAddr = befArgs.hyperlink;
            var aftArgs = { hyperlink: rangeAddr, address: sheet.activeCell };
            if (typeof (rangeAddr) === 'string') {
                address = rangeAddr;
            }
            if (typeof (rangeAddr) === 'object') {
                address = rangeAddr.address;
            }
            var definedNameCheck = address;
            if (address.indexOf('http://') === -1 && address.indexOf('https://') === -1 && address.indexOf('ftp://') === -1) {
                if (!isNullOrUndefined(address)) {
                    if (this.parent.definedNames) {
                        for (var idx = 0; idx < this.parent.definedNames.length; idx++) {
                            if (this.parent.definedNames[idx].name === address) {
                                address = this.parent.definedNames[idx].refersTo;
                                address = address.slice(1);
                                break;
                            }
                        }
                    }
                    if (address.lastIndexOf('!') !== -1) {
                        range[0] = address.substring(0, address.lastIndexOf('!'));
                        if (range[0].startsWith('\'') && range[0].endsWith('\'')) {
                            range[0] = range[0].slice(1, range[0].length - 1);
                        }
                        range[1] = address.substring(address.lastIndexOf('!') + 1);
                    }
                    else {
                        range[0] = this.parent.getActiveSheet().name;
                        range[1] = address;
                    }
                    // selRange = range[1];
                    var sheetIdx_1;
                    for (var idx = 0; idx < this.parent.sheets.length; idx++) {
                        if (this.parent.sheets[idx].name === range[0]) {
                            sheetIdx_1 = idx;
                        }
                    }
                    sheet = this.parent.sheets[sheetIdx_1];
                    if (range[1].indexOf(':') !== -1) {
                        var colIndex = range[1].indexOf(':');
                        var left = range[1].substr(0, colIndex);
                        var right = range[1].substr(colIndex + 1, range[1].length);
                        left = left.replace('$', '');
                        right = right.replace('$', '');
                        if (right.match(/\D/g) && !right.match(/[0-9]/g) && left.match(/\D/g) && !left.match(/[0-9]/g)) {
                            // selRange = left + '1' + ':' + right + sheet.rowCount;
                            left = left + '1';
                            right = right + sheet.rowCount;
                            range[1] = left + ':' + right;
                        }
                        else if (!right.match(/\D/g) && right.match(/[0-9]/g) && !left.match(/\D/g) && left.match(/[0-9]/g)) {
                            // selRange = getCellAddress(parseInt(left, 10) - 1, 0) + ':' +
                            //     getCellAddress(parseInt(right, 10) - 1, sheet.colCount - 1);
                            rangeIndexes = [parseInt(left, 10) - 1, 0, parseInt(right, 10) - 1, sheet.colCount - 1];
                            isEmpty = false;
                        }
                    }
                    var isDefinedNamed = void 0;
                    var definedname = this.parent.definedNames;
                    if (!isNullOrUndefined(definedname)) {
                        for (var idx = 0; idx < definedname.length; idx++) {
                            if (definedname[idx].name === definedNameCheck) {
                                isDefinedNamed = true;
                                break;
                            }
                        }
                    }
                    if (isCellReference(range[1]) || isDefinedNamed) {
                        rangeIndexes = isEmpty ? getRangeIndexes(range[1]) : rangeIndexes;
                        if (!isNullOrUndefined(sheet)) {
                            var rangeAddr_1 = getRangeAddress(rangeIndexes);
                            if (sheet === this.parent.getActiveSheet()) {
                                getUpdateUsingRaf(function () { _this.parent.goTo(rangeAddr_1); });
                            }
                            else {
                                if (rangeAddr_1.indexOf(':') >= 0) {
                                    var addArr = rangeAddr_1.split(':');
                                    rangeAddr_1 = addArr[0] === addArr[1] ? addArr[0] : rangeAddr_1;
                                }
                                getUpdateUsingRaf(function () { _this.parent.goTo(_this.parent.sheets[sheetIdx_1].name + '!' + rangeAddr_1); });
                            }
                        }
                    }
                    else {
                        this.showInvalidHyperlinkDialog();
                    }
                }
            }
            else if (!isClick) {
                if (this.isValidUrl(address)) {
                    window.open(address, befArgs.target);
                }
                else {
                    this.showInvalidHyperlinkDialog();
                }
            }
            this.parent.trigger(afterHyperlinkClick, aftArgs);
        }
    };
    SpreadsheetHyperlink.prototype.isValidUrl = function (url) {
        // eslint-disable-next-line no-useless-escape, security/detect-unsafe-regex
        return /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/.test(url);
    };
    SpreadsheetHyperlink.prototype.showInvalidHyperlinkDialog = function () {
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var l10n = this.parent.serviceLocator.getService(locale);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true,
            header: l10n.getConstant('Hyperlink'),
            content: l10n.getConstant('InvalidHyperlinkAlert'),
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true
                    },
                    click: function () {
                        dialogInst.hide();
                    }
                }]
        }, false);
    };
    SpreadsheetHyperlink.prototype.hyperlinkClickHandler = function (e) {
        var trgt = e.target;
        if (closest(trgt, '.e-link-dialog') && closest(trgt, '.e-toolbar-item')) {
            var dlgEle = closest(trgt, '.e-hyperlink-dlg') || closest(trgt, '.e-edithyperlink-dlg');
            var ftrEle = dlgEle.getElementsByClassName('e-footer-content')[0];
            var insertBut = ftrEle.firstChild;
            var docEle = dlgEle.querySelector('.e-document');
            var webEle = dlgEle.querySelector('.e-webpage');
            var webEleText = webEle ? webEle.querySelectorAll('.e-cont')[0].querySelector('.e-text').value :
                docEle.querySelectorAll('.e-cont')[0].querySelector('.e-text').value;
            var docEleText = docEle ? docEle.querySelectorAll('.e-cont')[0].querySelector('.e-text').value :
                webEleText;
            var toolbarItems = closest(trgt, '.e-toolbar-items');
            if (toolbarItems.getElementsByClassName('e-toolbar-item')[1].classList.contains('e-active')) {
                var actEle = docEle.querySelectorAll('.e-cont')[2].querySelector('.e-active');
                docEle.querySelectorAll('.e-cont')[0].querySelector('.e-text').value = webEleText;
                if (closest(actEle, '.e-list-item').classList.contains('e-level-2') && insertBut.hasAttribute('disabled')) {
                    insertBut.removeAttribute('disabled');
                }
                else if (closest(actEle, '.e-list-item').classList.contains('e-level-1') && !insertBut.hasAttribute('disabled')) {
                    insertBut.setAttribute('disabled', 'true');
                }
            }
            else {
                var isEmpty = webEle.querySelectorAll('.e-cont')[1].querySelector('.e-text').value ? false : true;
                webEle.querySelectorAll('.e-cont')[0].querySelector('.e-text').value = docEleText;
                if (isEmpty && !insertBut.hasAttribute('disabled')) {
                    insertBut.setAttribute('disabled', 'true');
                }
                else if (!isEmpty && insertBut.hasAttribute('disabled')) {
                    insertBut.removeAttribute('disabled');
                }
            }
        }
        if (closest(trgt, '.e-list-item') && trgt.classList.contains('e-fullrow')) {
            var item = this.parent.element.getElementsByClassName('e-link-dialog')[0];
            if (item) {
                item = item.getElementsByClassName('e-content')[0].getElementsByClassName('e-active')[0];
            }
            else {
                return;
            }
            var cellRef = item.getElementsByClassName('e-cont')[1].getElementsByClassName('e-text')[0];
            var dlgEle = closest(trgt, '.e-hyperlink-dlg') || closest(trgt, '.e-edithyperlink-dlg');
            var ftrEle = dlgEle.getElementsByClassName('e-footer-content')[0];
            var insertBut = ftrEle.firstChild;
            if (closest(trgt, '.e-list-item').classList.contains('e-level-2')) {
                if (closest(trgt, '.e-list-item').getAttribute('data-uid') === 'defName') {
                    if (!cellRef.classList.contains('e-disabled') && !cellRef.hasAttribute('readonly')) {
                        cellRef.setAttribute('readonly', 'true');
                        cellRef.classList.add('e-disabled');
                        cellRef.setAttribute('disabled', 'true');
                    }
                    if (insertBut.hasAttribute('disabled')) {
                        insertBut.removeAttribute('disabled');
                    }
                }
                else if (closest(trgt, '.e-list-item').getAttribute('data-uid') === 'sheet') {
                    if (cellRef.classList.contains('e-disabled') && cellRef.hasAttribute('readonly')) {
                        cellRef.removeAttribute('readonly');
                        cellRef.classList.remove('e-disabled');
                        cellRef.removeAttribute('disabled');
                    }
                    if (isCellReference(cellRef.value.toUpperCase())) {
                        if (insertBut.hasAttribute('disabled')) {
                            insertBut.removeAttribute('disabled');
                        }
                    }
                }
            }
            else if (closest(trgt, '.e-list-item').classList.contains('e-level-1')) {
                insertBut.setAttribute('disabled', 'true');
            }
        }
        else {
            this.hlOpenHandler(trgt, true, e);
        }
    };
    SpreadsheetHyperlink.prototype.createHyperlinkEle = function (args) {
        var cell = args.cell;
        if (!isNullOrUndefined(cell.hyperlink)) {
            var td = args.td;
            var hyperEle = this.parent.createElement('a', { className: 'e-hyperlink e-hyperlink-style' });
            var address = void 0;
            if (typeof cell.hyperlink === 'string') {
                if (cell.hyperlink.toLowerCase().indexOf('www.') === 0) {
                    cell.hyperlink = 'http://' + cell.hyperlink;
                }
                address = cell.hyperlink;
            }
            else {
                address = cell.hyperlink.address;
                if (address.toLowerCase().indexOf('www.') === 0) {
                    cell.hyperlink.address = address = 'http://' + address;
                }
            }
            if (address.indexOf('http://') === 0 || address.indexOf('https://') === 0 || address.indexOf('ftp://') === 0) {
                hyperEle.setAttribute('href', address);
                hyperEle.setAttribute('target', '_blank');
            }
            else if (address.includes('=') || address.includes('!')) {
                hyperEle.setAttribute('ref', address);
            }
            if (getTypeFromFormat(cell.format) === 'Accounting') {
                hyperEle.innerHTML = td.innerHTML;
            }
            else {
                hyperEle.innerText = td.innerText !== '' ? td.innerText : address;
            }
            td.textContent = '';
            td.innerText = '';
            if (this.parent.autoFillSettings.fillType === 'FillWithoutFormatting' || args.fillType === 'FillWithoutFormatting' ||
                args.action === 'Clear Formats') {
                hyperEle.style.textDecoration = 'none';
            }
            td.appendChild(hyperEle);
            if (!args.style.color || !args.style.textDecoration) {
                var style = {};
                if (!args.style.color) {
                    args.style.color = style.color = '#00e';
                }
                if (!args.style.textDecoration) {
                    args.style.textDecoration = style.textDecoration = 'underline';
                }
                updateCell(this.parent, this.parent.getActiveSheet(), { rowIdx: args.rowIdx, colIdx: args.colIdx, preventEvt: true,
                    cell: { style: style } });
            }
        }
    };
    SpreadsheetHyperlink.prototype.hyperEditContent = function () {
        var isWeb = true;
        var dialog = this.hyperlinkContent();
        var indexes = getRangeIndexes(this.parent.getActiveSheet().activeCell);
        var cell = this.parent.sheets[this.parent.getActiveSheet().id - 1].rows[indexes[0]].cells[indexes[1]];
        if (this.parent.scrollSettings.enableVirtualization) {
            indexes[0] = indexes[0] - this.parent.viewport.topIndex;
            indexes[1] = indexes[1] - this.parent.viewport.leftIndex;
        }
        var value = this.parent.getDisplayText(cell);
        var address;
        var hyperlink = cell.hyperlink;
        if (typeof (hyperlink) === 'string') {
            address = hyperlink;
            value = value || address;
            if (address.indexOf('http://') === -1 && address.indexOf('https://') === -1 && address.indexOf('ftp://') === -1) {
                isWeb = false;
            }
        }
        else if (typeof (hyperlink) === 'object') {
            address = hyperlink.address;
            value = value || address;
            if (address.indexOf('http://') === -1 && address.indexOf('https://') === -1 && address.indexOf('ftp://') === -1) {
                isWeb = false;
            }
        }
        var definedNamesCount = 0;
        var rangeCount = 0;
        var definedNames = this.parent.definedNames;
        var sheets = this.parent.sheets;
        for (var idx = 0, len = definedNames.length; idx < len; idx++) {
            if (definedNames[idx].name === address) {
                definedNamesCount++;
            }
        }
        for (var idx = 0, len = sheets.length; idx < len; idx++) {
            if (address.includes(sheets[idx].name)) {
                rangeCount++;
            }
        }
        if (definedNamesCount === 0 && rangeCount === 0) {
            isWeb = true;
        }
        var item = dialog.querySelector('.e-content');
        if (isWeb) {
            var webContElem = item.querySelector('.e-webpage');
            webContElem.getElementsByClassName('e-cont')[0].getElementsByClassName('e-text')[0].setAttribute('value', value);
            if (typeof (hyperlink) === 'string') {
                webContElem.getElementsByClassName('e-cont')[1].querySelector('.e-text').setAttribute('value', hyperlink);
            }
            else {
                var address_1 = webContElem.getElementsByClassName('e-cont')[1].querySelector('.e-text');
                address_1.setAttribute('value', hyperlink.address);
            }
        }
        else {
            var isDefinedNamed = void 0;
            var docContElem = item.querySelector('.e-document');
            docContElem.getElementsByClassName('e-cont')[0].getElementsByClassName('e-text')[0].setAttribute('value', value);
            var sheetName = void 0;
            var range = void 0;
            // let sheet: SheetModel = this.parent.getActiveSheet();
            // let sheetIdx: number;
            if (this.parent.definedNames) {
                for (var idx = 0; idx < this.parent.definedNames.length; idx++) {
                    if (this.parent.definedNames[idx].name === address) {
                        isDefinedNamed = true;
                        break;
                    }
                }
            }
            if (isDefinedNamed) {
                var cellRef = docContElem.getElementsByClassName('e-cont')[1].getElementsByClassName('e-text')[0];
                cellRef.setAttribute('readonly', 'true');
                cellRef.classList.add('e-disabled');
                cellRef.setAttribute('disabled', 'true');
                var treeCont = docContElem.getElementsByClassName('e-cont')[2];
                var listEle = treeCont.querySelectorAll('.e-list-item.e-level-1')[1];
                for (var idx = 0; idx < listEle.getElementsByTagName('li').length; idx++) {
                    if (listEle.getElementsByTagName('li')[idx].innerText === address) {
                        listEle.getElementsByTagName('li')[idx].classList.add('e-active');
                    }
                }
            }
            else {
                if (address && address.lastIndexOf('!') !== -1) {
                    var lastIndex = address.lastIndexOf('!');
                    sheetName = address.substring(0, lastIndex);
                    range = address.substring(lastIndex + 1);
                    // sheetIdx = parseInt(rangeArr[0].replace(/\D/g, ''), 10) - 1;
                    // sheet = this.parent.sheets[sheetIdx];
                }
                docContElem.getElementsByClassName('e-cont')[1].querySelector('.e-text').setAttribute('value', range);
                var treeCont = docContElem.getElementsByClassName('e-cont')[2];
                var listEle = treeCont.querySelectorAll('.e-list-item.e-level-1')[0];
                for (var idx = 0; idx < listEle.getElementsByTagName('li').length; idx++) {
                    if (listEle.getElementsByTagName('li')[idx].innerText === sheetName) {
                        if (listEle.getElementsByTagName('li')[idx].classList.contains('e-active')) {
                            break;
                        }
                        else {
                            listEle.getElementsByTagName('li')[idx].classList.add('e-active');
                        }
                    }
                    else {
                        if (listEle.getElementsByTagName('li')[idx].classList.contains('e-active')) {
                            listEle.getElementsByTagName('li')[idx].classList.remove('e-active');
                        }
                    }
                }
            }
        }
        return dialog;
    };
    SpreadsheetHyperlink.prototype.hyperlinkContent = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var idx = 0;
        var selIdx = 0;
        var isWeb = true;
        var isDefinedName;
        var isCellRef = true;
        var address;
        var indexes = getRangeIndexes(this.parent.getActiveSheet().activeCell);
        var sheet = this.parent.getActiveSheet();
        var cell = getCell(indexes[0], indexes[1], sheet);
        var isEnable = true;
        if (cell) {
            if ((cell.value && typeof (cell.value) === 'string' && cell.value.match('[A-Za-z]+') !== null) ||
                cell.value === '' || isNullOrUndefined(cell.value)) {
                isEnable = true;
            }
            else {
                isEnable = false;
            }
            var hyperlink = cell.hyperlink;
            if (typeof (hyperlink) === 'string') {
                var hl = hyperlink;
                if (hl.indexOf('http://') === -1 && hl.indexOf('https://') === -1 && hl.indexOf('ftp://') === -1) {
                    address = hyperlink;
                    isWeb = false;
                }
            }
            else if (typeof (hyperlink) === 'object') {
                var hl = hyperlink.address;
                if (hl.indexOf('http://') === -1 && hl.indexOf('https://') === -1 && hl.indexOf('ftp://') === -1) {
                    address = hyperlink.address;
                    isWeb = false;
                }
            }
            if (address) {
                var defNamesCnt = 0;
                var rangeCnt = 0;
                var definedNames = this.parent.definedNames;
                var sheets_1 = this.parent.sheets;
                for (var idx_1 = 0, len = sheets_1.length; idx_1 < len; idx_1++) {
                    if (address.includes(sheets_1[idx_1].name)) {
                        rangeCnt++;
                    }
                }
                for (var idx_2 = 0, len = definedNames.length; idx_2 < len; idx_2++) {
                    if (definedNames[idx_2].name === address) {
                        defNamesCnt++;
                    }
                }
                if (defNamesCnt === 0 && rangeCnt === 0) {
                    isWeb = true;
                }
            }
            if (isWeb) {
                selIdx = 0;
            }
            else {
                selIdx = 1;
            }
            if (this.parent.definedNames) {
                for (var idx_3 = 0; idx_3 < this.parent.definedNames.length; idx_3++) {
                    if (this.parent.definedNames[idx_3].name === address) {
                        isDefinedName = true;
                        isCellRef = false;
                        break;
                    }
                }
            }
        }
        var dialogElem = this.parent.createElement('div', { className: 'e-link-dialog' });
        var webContElem = this.parent.createElement('div', { className: 'e-webpage' });
        var docContElem = this.parent.createElement('div', { className: 'e-document' });
        this.headerTabs = new Tab({
            selectedItem: selIdx,
            items: [
                {
                    header: { 'text': l10n.getConstant('WebPage') },
                    content: webContElem
                },
                {
                    header: { 'text': l10n.getConstant('ThisDocument') },
                    content: docContElem
                }
            ]
        });
        this.headerTabs.appendTo(dialogElem);
        var indicator = dialogElem.querySelector('.e-toolbar-items').querySelector('.e-indicator');
        if (isWeb) {
            indicator.style.cssText = 'left: 0; right: 136px';
        }
        else {
            indicator.style.cssText = 'left: 136px; right: 0';
        }
        var textCont = this.parent.createElement('div', { className: 'e-cont' });
        var urlCont = this.parent.createElement('div', { className: 'e-cont' });
        var textH = this.parent.createElement('div', { className: 'e-header' });
        textH.innerText = l10n.getConstant('DisplayText');
        var urlH = this.parent.createElement('div', { className: 'e-header' });
        urlH.innerText = l10n.getConstant('Url');
        var textInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'Text' } });
        this.inputElements.push(textInput);
        if (!isEnable) {
            textInput.classList.add('e-disabled');
            textInput.setAttribute('readonly', 'true');
            textInput.setAttribute('disabled', 'true');
        }
        if (cell && isNullOrUndefined(cell.hyperlink)) {
            textInput.setAttribute('value', this.parent.getDisplayText(cell));
        }
        var urlInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'Text' } });
        this.inputElements.push(urlInput);
        textInput.setAttribute('placeholder', l10n.getConstant('EnterTheTextToDisplay'));
        urlInput.setAttribute('placeholder', l10n.getConstant('EnterTheUrl'));
        textCont.appendChild(textInput);
        textCont.insertBefore(textH, textInput);
        urlCont.appendChild(urlInput);
        urlCont.insertBefore(urlH, urlInput);
        webContElem.appendChild(urlCont);
        webContElem.insertBefore(textCont, urlCont);
        var cellRef = [];
        var definedName = [];
        var sheets = this.parent.sheets;
        for (idx; idx < this.parent.sheets.length; idx++) {
            var sheetName = this.parent.sheets[idx].name;
            if (this.parent.sheets[idx].state === 'Visible') {
                if (sheets[idx] === this.parent.getActiveSheet()) {
                    cellRef.push({
                        nodeId: 'sheet',
                        nodeText: sheetName.indexOf(' ') !== -1 ? '\'' + sheetName + '\'' : sheetName,
                        selected: true
                    });
                }
                else {
                    cellRef.push({
                        nodeId: 'sheet',
                        nodeText: sheetName.indexOf(' ') !== -1 ? '\'' + sheetName + '\'' : sheetName
                    });
                }
            }
        }
        for (idx = 0; idx < this.parent.definedNames.length; idx++) {
            definedName.push({
                nodeId: 'defName',
                nodeText: this.parent.definedNames[idx].name
            });
        }
        var data = [
            {
                nodeId: '01', nodeText: l10n.getConstant('CellReference'), expanded: isCellRef,
                nodeChild: cellRef
            },
            {
                nodeId: '02', nodeText: l10n.getConstant('DefinedNames'), expanded: isDefinedName,
                nodeChild: definedName
            }
        ];
        var treeObj = new TreeView({
            fields: { dataSource: data, id: 'nodeId', text: 'nodeText', child: 'nodeChild' }
        });
        var cellrefCont = this.parent.createElement('div', { className: 'e-cont' });
        var cellrefH = this.parent.createElement('div', { className: 'e-header' });
        cellrefH.innerText = l10n.getConstant('CellReference');
        var cellrefInput = this.parent.createElement('input', { className: 'e-input e-text e-hyp-text', attrs: { 'type': 'Text' } });
        cellrefInput.setAttribute('value', 'A1');
        this.inputElements.push(cellrefInput);
        cellrefCont.appendChild(cellrefInput);
        cellrefCont.insertBefore(cellrefH, cellrefInput);
        var textCont1 = this.parent.createElement('div', { className: 'e-cont' });
        var textH1 = this.parent.createElement('div', { className: 'e-header' });
        textH1.innerText = l10n.getConstant('DisplayText');
        var textInput1 = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'Text' } });
        this.inputElements.push(textInput1);
        if (!isEnable) {
            textInput1.classList.add('e-disabled');
            textInput1.setAttribute('readonly', 'true');
            textInput1.setAttribute('disabled', 'true');
        }
        if (cell && isNullOrUndefined(cell.hyperlink)) {
            textInput1.setAttribute('value', this.parent.getDisplayText(cell));
        }
        textInput1.setAttribute('placeholder', l10n.getConstant('EnterTheTextToDisplay'));
        textCont1.appendChild(textInput1);
        textCont1.insertBefore(textH1, textInput1);
        var sheetCont = this.parent.createElement('div', { className: 'e-cont' });
        var sheetH = this.parent.createElement('div', { className: 'e-header' });
        sheetH.innerText = l10n.getConstant('Sheet');
        var refCont = this.parent.createElement('div', { className: 'e-refcont' });
        this.divElements.push(textCont);
        this.divElements.push(urlCont);
        this.divElements.push(textH);
        this.divElements.push(urlH);
        this.divElements.push(cellrefCont);
        this.divElements.push(cellrefH);
        this.divElements.push(textCont1);
        this.divElements.push(textH1);
        this.divElements.push(sheetCont);
        this.divElements.push(sheetH);
        this.divElements.push(refCont);
        this.divElements.push(docContElem);
        this.divElements.push(webContElem);
        this.divElements.push(dialogElem);
        sheetCont.appendChild(refCont);
        sheetCont.insertBefore(sheetH, refCont);
        docContElem.appendChild(cellrefCont);
        docContElem.insertBefore(textCont1, cellrefCont);
        treeObj.appendTo(refCont);
        docContElem.appendChild(sheetCont);
        return dialogElem;
    };
    SpreadsheetHyperlink.prototype.removeHyperlink = function (args) {
        var cell = getCell(args.rowIdx, args.colIdx, args.sheet);
        if (cell && cell.hyperlink) {
            if (typeof (cell.hyperlink) === 'string') {
                cell.value = cell.value || cell.value === 0 ? cell.value : cell.hyperlink;
            }
            else {
                cell.value = cell.value || cell.value === 0 ? cell.value : cell.hyperlink.address;
            }
            delete (cell.hyperlink);
            if (cell.style) {
                delete cell.style.textDecoration;
                delete cell.style.color;
            }
            if (cell.validation) {
                if (cell.validation.isHighlighted) {
                    if (cell.style.backgroundColor) {
                        cell.style.color = '#ff0000';
                    }
                }
            }
            if (args.sheet === this.parent.getActiveSheet()) {
                if (cell.style) {
                    this.parent.notify(refreshRibbonIcons, null);
                }
                if (!args.preventRefresh) {
                    this.parent.serviceLocator.getService('cell').refresh(args.rowIdx, args.colIdx, false, null, true, false, isImported(this.parent));
                }
            }
        }
    };
    SpreadsheetHyperlink.prototype.removeHyperlinkHandler = function (args) {
        var range = args.range;
        var sheetName;
        var sheet = this.parent.getActiveSheet();
        var sheetIdx;
        if (!args.preventEventTrigger) {
            var eventArgs = { address: range.indexOf('!') === -1 ? sheet.name + '!' + range : range, cancel: false };
            this.parent.notify(beginAction, { action: 'removeHyperlink', eventArgs: eventArgs });
            if (eventArgs.cancel) {
                return;
            }
        }
        if (range && range.indexOf('!') !== -1) {
            var lastIndex = range.lastIndexOf('!');
            sheetName = range.substring(0, lastIndex);
            var sheets = this.parent.sheets;
            for (var idx = 0; idx < sheets.length; idx++) {
                if (sheets[idx].name === sheetName) {
                    sheetIdx = idx;
                }
            }
            sheet = this.parent.sheets[sheetIdx];
            range = range.substring(lastIndex + 1);
        }
        var rangeIndexes = range ? getRangeIndexes(range) : getRangeIndexes(sheet.activeCell);
        var cellEle;
        var classList;
        for (var rowIdx = rangeIndexes[0]; rowIdx <= rangeIndexes[2]; rowIdx++) {
            for (var colIdx = rangeIndexes[1]; colIdx <= rangeIndexes[3]; colIdx++) {
                if (sheet && sheet.rows[rowIdx] && sheet.rows[rowIdx].cells[colIdx]) {
                    classList = [];
                    cellEle = this.parent.getCell(rowIdx, colIdx);
                    if (cellEle) {
                        for (var i = 0; i < cellEle.classList.length; i++) {
                            classList.push(cellEle.classList[i]);
                        }
                    }
                    this.parent.notify(deleteHyperlink, { sheet: sheet, rowIdx: rowIdx, colIdx: colIdx });
                    for (var i = 0; i < classList.length; i++) {
                        if (!cellEle.classList.contains(classList[i])) {
                            cellEle.classList.add(classList[i]);
                        }
                    }
                }
            }
        }
        if (!args.preventEventTrigger) {
            this.parent.notify(completeAction, { action: 'removeHyperlink', eventArgs: { address: range.indexOf('!') === -1 ? sheet.name + '!' + range : range } });
        }
    };
    return SpreadsheetHyperlink;
}());

var __assign$3 = (undefined && undefined.__assign) || function () {
    __assign$3 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$3.apply(this, arguments);
};
/**
 * UndoRedo module allows to perform undo redo functionalities.
 */
var UndoRedo = /** @class */ (function () {
    function UndoRedo(parent) {
        this.undoCollection = [];
        this.redoCollection = [];
        this.isUndo = false;
        this.undoRedoStep = 100;
        this.parent = parent;
        this.addEventListener();
    }
    UndoRedo.prototype.setActionData = function (options) {
        var sheet = this.parent.getActiveSheet();
        var address;
        var cells = [];
        var cutCellDetails = [];
        var args = options.args;
        var eventArgs = args.eventArgs;
        var copiedInfo = {};
        switch (args.action) {
            case 'format':
                address = getRangeIndexes(args.eventArgs.range);
                break;
            case 'clipboard':
                copiedInfo = eventArgs.copiedInfo;
                address = getRangeIndexes(getRangeFromAddress(eventArgs.pastedRange));
                if (copiedInfo && copiedInfo.isCut) {
                    cutCellDetails = this.getCellDetails(copiedInfo.range, getSheet(this.parent, getSheetIndexFromId(this.parent, copiedInfo.sId)), 'clipboard');
                }
                break;
            case 'beforeSort':
                address = getRangeIndexes(args.eventArgs.range);
                if (address[0] === address[2] && (address[2] - address[0]) === 0) { //if selected range is a single cell
                    address[0] = 0;
                    address[1] = 0;
                    address[2] = sheet.usedRange.rowIndex;
                    address[3] = sheet.usedRange.colIndex;
                }
                break;
            case 'beforeCellSave':
            case 'cellDelete':
            case 'cellSave':
            case 'addNote':
            case 'editNote':
            case 'deleteNote':
                address = getRangeIndexes(eventArgs.address);
                break;
            case 'beforeWrap':
            case 'beforeReplace':
            case 'chartDesign':
                address = this.parent.getAddressInfo(eventArgs.address).indices;
                break;
            case 'beforeClear':
                address = getRangeIndexes(eventArgs.range);
                break;
            case 'beforeInsertImage':
                address = getRangeIndexes(eventArgs.range);
                break;
            case 'deleteImage':
                address = getRangeIndexes(eventArgs.address);
                break;
            case 'beforeInsertChart':
                address = getRangeIndexes(eventArgs.range);
                break;
            case 'filter':
                address = getRangeIndexes(eventArgs.range);
                break;
            case 'autofill':
                address = getRangeIndexes(eventArgs.fillRange);
                break;
            case 'validation':
                if (isColumnRange(eventArgs.range.substring(eventArgs.range.lastIndexOf('!') + 1))) {
                    address = getRangeIndexes(eventArgs.range);
                    address[2] = sheet.usedRange.rowIndex;
                }
                else {
                    address = getRangeIndexes(eventArgs.range);
                }
                break;
            case 'removeValidation':
                if (eventArgs.isColSelected) {
                    this.beforeActionData = { cellDetails: [] };
                    var rangeArr = eventArgs.range.substring(eventArgs.range.lastIndexOf('!') + 1).split(':');
                    for (var start = getColIndex(rangeArr[0]), end = getColIndex(rangeArr[1]); start <= end; start++) {
                        if (sheet.columns[start] && sheet.columns[start].validation) {
                            this.beforeActionData.cellDetails.push({ colIndex: start, validation: sheet.columns[start].validation });
                        }
                    }
                }
                else {
                    address = getRangeIndexes(eventArgs.range);
                }
                break;
            case 'hyperlink':
            case 'removeHyperlink':
                address = getRangeIndexes(eventArgs.address);
                break;
        }
        if (args.action === 'beforeSort') {
            this.beforeActionData = { cellDetails: eventArgs.cellDetails };
            this.beforeActionData.sortedCellDetails = eventArgs.sortedCellDetails;
        }
        else if (address) {
            if (args.isClearAction && this.beforeActionData.cellDetails.length > 0) {
                cells = this.beforeActionData.cellDetails;
            }
            else {
                cells = this.getCellDetails(address, sheet, args.action);
            }
            this.beforeActionData = { cellDetails: cells, cutCellDetails: cutCellDetails };
        }
    };
    UndoRedo.prototype.getBeforeActionData = function (args) {
        args.beforeDetails = this.beforeActionData;
    };
    UndoRedo.prototype.performUndoRedo = function (args) {
        var undoRedoArgs;
        if (args.isFromUpdateAction) {
            undoRedoArgs = args;
        }
        else {
            undoRedoArgs = args.isUndo ? this.undoCollection.pop() : this.redoCollection.pop();
            if (args.setCollection) {
                args.undoArgs = undoRedoArgs;
            }
        }
        this.isUndo = args.isUndo;
        var preventEvt;
        if (undoRedoArgs) {
            var actionArgs = void 0;
            var undoRedoAction = undoRedoArgs.action;
            var replaceArgs = {};
            var address = [];
            var sheet_1;
            if (undoRedoArgs.action === 'autofill' || undoRedoArgs.action === 'autofillWithCF') {
                address = undoRedoArgs.eventArgs.fillRange.split('!');
            }
            else if (undoRedoArgs.action === 'cellSave' || undoRedoArgs.action === 'cellDelete') {
                address = undoRedoArgs.eventArgs.address.split('!');
            }
            else if (undoRedoArgs.action === 'clipboard') {
                address = undoRedoArgs.eventArgs.pastedRange.split('!');
            }
            if (address.length > 0) {
                sheet_1 = getSheet(this.parent, getSheetIndex(this.parent, address[0]));
            }
            else if (undoRedoArgs.action === 'clear') {
                sheet_1 = getSheet(this.parent, undoRedoArgs.eventArgs.sheetIndex);
            }
            if (undoRedoArgs.action === 'autofillWithCF') {
                undoRedoArgs.action = 'autofill';
                var conditionalFormat = sheet_1.conditionalFormats;
                if (conditionalFormat[conditionalFormat.length - 1].action === 'autofillWithCF' && args.isUndo) {
                    if (!conditionalFormat[conditionalFormat.length - 1].value) {
                        this.parent.notify(clearCFRule, { range: conditionalFormat[conditionalFormat.length - 1].range, isAction: true });
                    }
                    else {
                        conditionalFormat.pop();
                    }
                }
            }
            if (!args.isPublic) {
                var actionData = undoRedoArgs.eventArgs.beforeActionData;
                delete undoRedoArgs.eventArgs.beforeActionData;
                actionArgs = { action: undoRedoArgs.action, eventArgs: {} };
                extend(actionArgs.eventArgs, undoRedoArgs.eventArgs, null, true);
                if (this.parent.calculationMode === 'Manual' && (undoRedoArgs.action === 'clipboard' ||
                    undoRedoArgs.action === 'cellDelete' || undoRedoArgs.action === 'autofill' || undoRedoArgs.action === 'clear')) {
                    if (!args.isUndo) {
                        if (sheet_1.isSheetCalculated) {
                            (actionData.cutCellDetails.length ? actionData.cutCellDetails :
                                actionData.cellDetails).forEach(function (prevCell) {
                                var cellVal = getCell(prevCell.rowIndex, prevCell.colIndex, sheet_1, false, true).value;
                                if ((cellVal || cellVal === 0) && prevCell.value !== cellVal) {
                                    prevCell.value = cellVal;
                                }
                            });
                        }
                    }
                    else if ((undoRedoArgs.eventArgs.requestType === 'paste' && undoRedoArgs.action === 'clipboard') ||
                        undoRedoArgs.eventArgs.fillType) {
                        var undoActionName = void 0;
                        if (!actionData.cutCellDetails.length) {
                            undoActionName = undoRedoArgs.eventArgs.fillType ? 'autofill' : 'Copy';
                        }
                        else if (sheet_1.isSheetCalculated) {
                            undoActionName = 'Cut';
                        }
                        if (undoActionName) {
                            for (var i = 0, cellCol = actionData.cellDetails, cutCellCol = actionData.cutCellDetails; i < cellCol.length; i++) {
                                var cellValue = getCell(cellCol[i].rowIndex, cellCol[i].colIndex, sheet_1, false, true);
                                cellValue = cellValue ? cellValue.value : '';
                                if (undoActionName === 'Copy') {
                                    cellCol[i].copyCellValue = cellValue;
                                }
                                else if (undoActionName === 'autofill') {
                                    if (cellCol[i].value !== cellValue && cellCol[i].autoFillText !== cellValue) {
                                        cellCol[i].autoFillText = cellValue;
                                    }
                                }
                                else if (undoActionName === 'Cut') {
                                    if (cutCellCol[i].value !== cellValue) {
                                        cutCellCol[i].value = cellValue;
                                    }
                                }
                            }
                        }
                    }
                }
                undoRedoArgs.eventArgs.beforeActionData = actionData;
                actionArgs.eventArgs.cancel = false;
                undoRedoArgs.preventAction = actionArgs.preventAction = true;
                if (args.isUndo) {
                    actionArgs.isUndo = true;
                    if (undoRedoArgs.action === 'cellSave' && this.parent.calculationMode === 'Manual' &&
                        sheet_1.isSheetCalculated && actionData.cellDetails.length === 1) {
                        var cell = getCell(actionData.cellDetails[0].rowIndex, actionData.cellDetails[0].colIndex, sheet_1);
                        if (cell && undoRedoArgs.eventArgs.displayText !== cell.value) {
                            undoRedoArgs.eventArgs.displayText = cell.value;
                        }
                    }
                }
                else {
                    actionArgs.isRedo = true;
                }
                if (!args.isFromUpdateAction) {
                    this.parent.notify(beginAction, actionArgs);
                }
                if (actionArgs.eventArgs.cancel) {
                    this.updateUndoRedoIcons();
                    return;
                }
                delete actionArgs.eventArgs.cancel;
            }
            switch (undoRedoArgs.action) {
                case 'cellSave':
                case 'format':
                case 'wrap':
                case 'cellDelete':
                case 'autofill':
                case 'removeValidation':
                case 'hyperlink':
                case 'addNote':
                case 'editNote':
                case 'deleteNote':
                case 'removeHyperlink':
                    undoRedoArgs = this.performOperation(undoRedoArgs, args.preventEvt, args.preventReSelect, args.isFromAutoFillOption);
                    undoRedoArgs.action = undoRedoAction;
                    break;
                case 'sorting':
                    this.undoForSorting(undoRedoArgs, args.isUndo);
                    break;
                case 'clipboard':
                    undoRedoArgs = this.undoForClipboard(undoRedoArgs, args.isUndo, actionArgs);
                    preventEvt = true;
                    break;
                case 'resize':
                case 'resizeToFit':
                    undoRedoArgs = this.undoForResize(undoRedoArgs);
                    if (args.isUndo) {
                        var eventArgs = undoRedoArgs.eventArgs;
                        if (!eventArgs.isPrevCustomHeight) {
                            var sheet_2 = this.parent.sheets[eventArgs.sheetIndex];
                            var row = sheet_2 && getRow(sheet_2, eventArgs.index);
                            if (row && row.customHeight) {
                                delete row.customHeight;
                            }
                        }
                    }
                    break;
                case 'hideShow':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'replace':
                    undoRedoArgs = this.performOperation(undoRedoArgs);
                    break;
                case 'replaceAll':
                    undoRedoArgs.eventArgs.isAction = false;
                    if (args.isUndo) {
                        replaceArgs.value = undoRedoArgs.eventArgs.replaceValue;
                        replaceArgs.replaceValue = undoRedoArgs.eventArgs.value;
                        replaceArgs.skipFormatCheck = isImported(this.parent);
                    }
                    this.parent.notify(replaceAll, __assign$3({}, undoRedoArgs.eventArgs, replaceArgs));
                    break;
                case 'insert':
                case 'filter':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo, null, actionArgs);
                    preventEvt = undoRedoArgs.action === 'filter';
                    break;
                case 'delete':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'validation':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    undoRedoArgs = this.performOperation(undoRedoArgs);
                    break;
                case 'addHighlight':
                case 'removeHighlight':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'merge':
                    undoRedoArgs.eventArgs.merge = undoRedoArgs.isFromUpdateAction ?
                        undoRedoArgs.eventArgs.merge : !undoRedoArgs.eventArgs.merge;
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'clear':
                    undoRedoArgs = this.performOperation(undoRedoArgs);
                    if (args.isUndo && undoRedoArgs.eventArgs.cfClearActionArgs) {
                        updateAction({ action: 'clearCF', eventArgs: undoRedoArgs.eventArgs.cfClearActionArgs }, this.parent, !args.isUndo);
                    }
                    for (var i = this.undoCollection.length; i > 0; i--) {
                        if (this.undoCollection[i - 1].isClearAction) {
                            this.performUndoRedo(args);
                        }
                        else {
                            break;
                        }
                    }
                    break;
                case 'conditionalFormat':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo, this.undoCollection);
                    break;
                case 'clearCF':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'insertImage':
                case 'deleteImage':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'imageRefresh':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'insertChart':
                case 'deleteChart':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'chartRefresh':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
                case 'chartDesign':
                    undoRedoArgs.eventArgs.isUndo = args.isUndo;
                    this.parent.notify(undoRedoForChartDesign, undoRedoArgs.eventArgs);
                    break;
                case 'addDefinedName':
                    updateAction(undoRedoArgs, this.parent, !args.isUndo);
                    break;
            }
            if (!args.isFromUpdateAction) {
                if (args.isUndo) {
                    this.redoCollection.push(undoRedoArgs);
                }
                else {
                    this.undoCollection.push(undoRedoArgs);
                }
                if (this.undoCollection.length > this.undoRedoStep) {
                    this.undoCollection.splice(0, 1);
                }
                if (this.redoCollection.length > this.undoRedoStep) {
                    this.redoCollection.splice(0, 1);
                }
                this.updateUndoRedoIcons();
                if (!args.isPublic && !preventEvt) {
                    this.parent.notify(completeAction, extend({ isUndoRedo: true, isUndo: args.isUndo }, undoRedoArgs));
                }
            }
            this.parent.notify(refreshRibbonIcons, null);
        }
    };
    UndoRedo.prototype.undoForSorting = function (args, isUndo) {
        var _this = this;
        var sheetIndex = getSheetIndexFromAddress(this.parent, args.eventArgs.range);
        var range = getRangeIndexes(args.eventArgs.range);
        var updateSortIcon = function (idx, add) {
            if (sheetIndex === _this.parent.activeSheetIndex) {
                var td = _this.parent.getCell(range[0] - 1, _this.parent.sortCollection[idx].columnIndex);
                if (td) {
                    td = select('.e-filter-icon', td);
                    if (td) {
                        // Determine the class to add or remove
                        var sortClass = "e-sort" + (_this.parent.sortCollection[idx].order === 'Ascending' ? 'asc' : 'desc') + "-filter";
                        if (add) {
                            td.classList.add(sortClass);
                        }
                        else {
                            td.classList.remove(sortClass);
                        }
                    }
                }
            }
        };
        if (isUndo) {
            this.parent.notify(updateSortedDataOnCell, { result: args.eventArgs.beforeActionData.cellDetails, range: range, sheet: getSheet(this.parent, sheetIndex), jsonData: args.eventArgs.beforeActionData.sortedCellDetails, isUndo: true });
            this.parent.notify(sortComplete, { range: args.eventArgs.range });
            if (this.parent.sortCollection && args.eventArgs.previousSort) {
                for (var i = this.parent.sortCollection.length - 1; i >= 0; i--) {
                    if (this.parent.sortCollection[i].sheetIndex === sheetIndex) {
                        updateSortIcon(i, false);
                        this.parent.sortCollection.splice(i, 1);
                        var prevSort = args.eventArgs.previousSort;
                        if (Array.isArray(prevSort)) {
                            for (var j = 0; j < prevSort.length; j++) {
                                this.parent.sortCollection.splice(j, 0, prevSort[j]);
                                updateSortIcon(j, true);
                            }
                        }
                        if (!this.parent.sortCollection.length) {
                            this.parent.sortCollection = undefined;
                        }
                        break;
                    }
                }
            }
        }
        else {
            updateAction(args, this.parent, true);
            if (args.eventArgs.previousSort) {
                var idx = 0;
                if (this.parent.sortCollection) {
                    for (var i = this.parent.sortCollection.length - 1; i >= 0; i--) {
                        if (this.parent.sortCollection[i].sheetIndex === sheetIndex) {
                            updateSortIcon(i, false);
                            idx = i;
                            this.parent.sortCollection.splice(i, 1);
                        }
                    }
                }
                else {
                    this.parent.sortCollection = [];
                }
                this.parent.sortCollection.splice(idx, 0, { sortRange: args.eventArgs.range.substring(args.eventArgs.range.lastIndexOf('!') + 1), sheetIndex: sheetIndex,
                    columnIndex: getColIndex(args.eventArgs.sortOptions.sortDescriptors.field), order: args.eventArgs.sortOptions.sortDescriptors.order });
                updateSortIcon(idx, true);
            }
        }
    };
    UndoRedo.prototype.updateUndoRedoCollection = function (options) {
        var actionList = ['clipboard', 'format', 'sorting', 'cellSave', 'resize', 'resizeToFit', 'wrap', 'hideShow', 'replace',
            'validation', 'merge', 'clear', 'conditionalFormat', 'clearCF', 'insertImage', 'imageRefresh', 'insertChart', 'deleteChart',
            'chartRefresh', 'filter', 'cellDelete', 'autofill', 'autofillWithCF', 'addDefinedName', 'removeValidation', 'removeHighlight', 'addHighlight', 'hyperlink', 'removeHyperlink', 'deleteImage', 'chartDesign', 'replaceAll', 'addNote', 'editNote', 'deleteNote'];
        if ((options.args.action === 'insert' || options.args.action === 'delete') && options.args.eventArgs.modelType !== 'Sheet') {
            actionList.push(options.args.action);
        }
        var action = options.args.action;
        if (actionList.indexOf(action) === -1 && !options.isPublic) {
            return;
        }
        var eventArgs = options.args.eventArgs;
        if (action === 'clipboard' || action === 'sorting' || action === 'format' || action === 'cellSave' ||
            action === 'wrap' || action === 'replace' || action === 'validation' || action === 'clear' || action === 'conditionalFormat' ||
            action === 'clearCF' || action === 'insertImage' || action === 'imageRefresh' || action === 'insertChart' ||
            action === 'chartRefresh' || action === 'filter' || action === 'cellDelete' || action === 'autofill' || action === 'autofillWithCF' || action === 'removeValidation' ||
            action === 'addDefinedName' || action === 'hyperlink' || action === 'removeHyperlink' || action === 'deleteImage' || action === 'chartDesign' || action === 'addNote' || action === 'editNote' || action === 'deleteNote') {
            var beforeActionDetails = { beforeDetails: { cellDetails: [] } };
            this.parent.notify(getBeforeActionData, beforeActionDetails);
            eventArgs.beforeActionData = beforeActionDetails.beforeDetails;
        }
        if (action === 'clipboard' && eventArgs.copiedInfo && eventArgs.copiedInfo.isExternal) {
            var addressInfo = this.parent.getAddressInfo(eventArgs.pastedRange);
            eventArgs.copiedInfo.cellDetails = this.getCellDetails(addressInfo.indices, getSheet(this.parent, addressInfo.sheetIndex), action);
        }
        if (this.redoCollection.length > 0 && this.redoCollection[this.redoCollection.length - 1].action === 'autofillWithCF' && options.args.action === 'autofill') {
            options.args.action = 'autofillWithCF';
        }
        this.undoCollection.push(options.args);
        this.redoCollection = [];
        if (this.undoCollection.length > this.undoRedoStep) {
            this.undoCollection.splice(0, 1);
        }
        this.updateUndoRedoIcons();
    };
    UndoRedo.prototype.clearUndoRedoCollection = function () {
        this.undoCollection = [];
        this.redoCollection = [];
        this.updateUndoRedoIcons();
    };
    UndoRedo.prototype.updateUndoRedoIcons = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        this.parent.notify(enableToolbarItems, [{
                tab: l10n.getConstant('Home'), items: [this.parent.element.id + '_undo'],
                enable: this.undoCollection.length > 0
            }]);
        this.parent.notify(enableToolbarItems, [{
                tab: l10n.getConstant('Home'), items: [this.parent.element.id + '_redo'],
                enable: this.redoCollection.length > 0
            }]);
    };
    UndoRedo.prototype.updateUndoRedoSheetReferences = function (args) {
        var updateReference = function (collection) {
            collection.forEach(function (editArgs) {
                var eventArgs = editArgs.eventArgs;
                if (eventArgs) {
                    ['address', 'dataRange', 'fillRange'].forEach(function (property) {
                        if (eventArgs[property] && eventArgs[property].includes(args.pName)) {
                            eventArgs[property] = eventArgs[property].replace(args.pName, args.value);
                        }
                    });
                }
            });
        };
        updateReference(this.undoCollection);
        updateReference(this.redoCollection);
    };
    UndoRedo.prototype.undoForClipboard = function (args, isUndo, actionArgs) {
        var _this = this;
        var eventArgs = args.eventArgs;
        var address = [];
        address[0] = eventArgs.pastedRange.substring(0, eventArgs.pastedRange.lastIndexOf('!'));
        address[1] = eventArgs.pastedRange.substring(eventArgs.pastedRange.lastIndexOf('!') + 1);
        var range = getRangeIndexes(address[1]);
        var sheetIndex = getSheetIndex(this.parent, address[0]);
        var sheet = getSheet(this.parent, sheetIndex);
        var copiedInfo = eventArgs.copiedInfo;
        var actionData = eventArgs.beforeActionData;
        var isFromUpdateAction = args.isFromUpdateAction;
        var isRefresh = sheetIndex === this.parent.activeSheetIndex;
        var pictureElem;
        if (actionArgs) {
            actionArgs.isUndoRedo = true;
            actionArgs.eventArgs.beforeActionData = actionData;
        }
        if (args.eventArgs.requestType === 'imagePaste') {
            var copiedShapeInfo = eventArgs.copiedShapeInfo;
            if (isUndo) {
                pictureElem = copiedShapeInfo.pictureElem;
                if (copiedShapeInfo.isCut) {
                    this.parent.notify(deleteImage, {
                        id: pictureElem.id, sheetIdx: eventArgs.pasteSheetIndex + 1, isUndoRedo: true
                    });
                    this.parent.notify(createImageElement, {
                        options: {
                            src: pictureElem.style.backgroundImage.replace(/url\((['"])?(.*?)\1\)/gi, '$2'),
                            height: copiedShapeInfo.height, width: copiedShapeInfo.width, id: pictureElem.id
                        },
                        range: copiedShapeInfo.copiedRange, isPublic: false, isUndoRedo: true
                    });
                }
                else {
                    this.parent.notify(deleteImage, {
                        id: eventArgs.pastedPictureElement.id, sheetIdx: eventArgs.pasteSheetIndex + 1, isUndoRedo: true
                    });
                }
            }
            else {
                if (copiedShapeInfo.isCut) {
                    pictureElem = copiedShapeInfo.pictureElem;
                    this.parent.notify(deleteImage, {
                        id: pictureElem.id, sheetIdx: copiedShapeInfo.sId, isUndoRedo: true
                    });
                    this.parent.notify(createImageElement, {
                        options: {
                            src: pictureElem.style.backgroundImage.replace(/url\((['"])?(.*?)\1\)/gi, '$2'),
                            height: copiedShapeInfo.height, width: copiedShapeInfo.width, id: pictureElem.id
                        },
                        range: copiedShapeInfo.pastedRange, isPublic: false, isUndoRedo: true
                    });
                }
                else {
                    pictureElem = eventArgs.pastedPictureElement;
                    this.parent.notify(createImageElement, {
                        options: {
                            src: pictureElem.style.backgroundImage.replace(/url\((['"])?(.*?)\1\)/gi, '$2'),
                            height: pictureElem.offsetHeight, width: pictureElem.offsetWidth, id: pictureElem.id
                        },
                        range: copiedShapeInfo.pastedRange, isPublic: false, isUndoRedo: true
                    });
                }
            }
        }
        else {
            if (isUndo) {
                if (copiedInfo.isCut) {
                    var cells = actionData.cutCellDetails;
                    this.updateCellDetails(cells, getSheet(this.parent, getSheetIndexFromId(this.parent, copiedInfo.sId)), getSwapRange(copiedInfo.range), isRefresh, args);
                    if (eventArgs.cfClearActionArgs) {
                        updateAction({ action: 'clearCF', eventArgs: eventArgs.cfClearActionArgs }, this.parent, false);
                    }
                }
                if (actionData) {
                    this.updateCellDetails(actionData.cellDetails, sheet, range, isRefresh, args, null, null, actionArgs ?
                        actionArgs.isUndoRedo : null);
                }
                if (eventArgs.cfActionArgs) {
                    eventArgs.cfActionArgs.cfModel.forEach(function (cf) {
                        updateAction({ eventArgs: { range: cf.range, type: cf.type, cFColor: cf.cFColor, value: cf.value,
                                sheetIdx: eventArgs.cfActionArgs.sheetIdx, cancel: true }, action: 'conditionalFormat' }, _this.parent, false);
                    });
                }
                setMaxHgt(sheet, range[0], range[1], getRowHeight(sheet, range[0]));
                var hgt = getMaxHgt(sheet, range[0]);
                setRowEleHeight(this.parent, sheet, hgt, range[0]);
                eventArgs.mergeCollection.forEach(function (mergeArgs) {
                    mergeArgs.merge = !mergeArgs.merge;
                    _this.parent.notify(setMerge, mergeArgs);
                    mergeArgs.merge = !mergeArgs.merge;
                });
                if (actionArgs && !isFromUpdateAction) {
                    this.parent.notify(completeAction, actionArgs);
                }
            }
            else {
                if (copiedInfo.isExternal) {
                    var addressInfo = this.parent.getAddressInfo(eventArgs.pastedRange);
                    this.updateCellDetails(copiedInfo.cellDetails, getSheet(this.parent, addressInfo.sheetIndex), addressInfo.indices, true, args, null, null, actionArgs ?
                        actionArgs.isUndoRedo : null);
                    if (actionArgs && !isFromUpdateAction) {
                        this.parent.notify(completeAction, actionArgs);
                    }
                }
                else {
                    var clipboardPromise = new Promise(function (resolve) { resolve((function () { })()); });
                    var addressInfo = this.parent.getAddressInfo(eventArgs.copiedRange);
                    this.parent.notify(eventArgs.copiedInfo.isCut ? cut : copy, {
                        range: addressInfo.indices, sId: getSheet(this.parent, addressInfo.sheetIndex).id,
                        promise: clipboardPromise, invokeCopy: true, isPublic: true, isFromUpdateAction: isFromUpdateAction
                    });
                    clipboardPromise.then(function () {
                        _this.parent.notify(paste, {
                            range: address ? getIndexesFromAddress(eventArgs.pastedRange) : address,
                            sIdx: address ? getSheetIndex(_this.parent, getSheetNameFromAddress(eventArgs.pastedRange)) : address,
                            type: eventArgs.type, isAction: false, isInternal: true, isFromUpdateAction: isFromUpdateAction,
                            beforeActionData: eventArgs.beforeActionData, isUndo: isUndo
                        });
                        if (actionArgs && !isFromUpdateAction) {
                            _this.parent.notify(completeAction, actionArgs);
                        }
                    });
                }
            }
            if (isRefresh && !isFromUpdateAction) {
                this.parent.notify(selectRange, { address: eventArgs.selectedRange });
                this.parent.notify(positionAutoFillElement, {});
            }
            else {
                this.checkRefreshNeeded(sheetIndex, isFromUpdateAction);
            }
        }
        return args;
    };
    UndoRedo.prototype.undoForResize = function (args) {
        var eventArgs = args.eventArgs;
        if (eventArgs.hide === undefined) {
            if (eventArgs.isCol) {
                var temp = eventArgs.oldWidth;
                eventArgs.oldWidth = eventArgs.width;
                eventArgs.width = temp;
            }
            else {
                var temp = eventArgs.oldHeight;
                eventArgs.oldHeight = eventArgs.height;
                eventArgs.height = temp;
            }
        }
        else {
            eventArgs.hide = !eventArgs.hide;
        }
        updateAction(args, this.parent, false);
        var sheet = this.parent.getActiveSheet();
        var activeCell = getRangeIndexes(sheet.activeCell);
        var CellElem = getCell(activeCell[0], activeCell[1], sheet);
        if (CellElem && CellElem.rowSpan) {
            var td = this.parent.getCell(activeCell[0], activeCell[1]);
            this.parent.element.querySelector('.e-active-cell').style.height = td.offsetHeight + 'px';
        }
        else if (CellElem && CellElem.colSpan) {
            var td = this.parent.getCell(activeCell[0], activeCell[1]);
            this.parent.element.querySelector('.e-active-cell').style.width = td.offsetWidth + 'px';
        }
        return args;
    };
    UndoRedo.prototype.performOperation = function (args, preventEvt, preventReSelect, isFromAutoFillOption) {
        var eventArgs = args.eventArgs;
        var address = [];
        var undoRange = (args.action === 'cellSave' || args.action === 'wrap' || args.action === 'replace'
            || args.action === 'cellDelete' || args.action === 'hyperlink' || args.action === 'addNote' || args.action === 'editNote'
            || args.action === 'deleteNote' || args.action === 'removeHyperlink') ? eventArgs.address : eventArgs.range;
        if (args.action === 'autofill') {
            address[0] = eventArgs.fillRange.substring(0, eventArgs.fillRange.lastIndexOf('!'));
            address[1] = eventArgs.fillRange.substring(eventArgs.fillRange.lastIndexOf('!') + 1);
        }
        else {
            address[0] = undoRange.substring(0, undoRange.lastIndexOf('!'));
            address[1] = undoRange.substring(undoRange.lastIndexOf('!') + 1);
        }
        var sheetIndex = getSheetIndex(this.parent, address[0]);
        var sheet = getSheet(this.parent, sheetIndex);
        var range;
        if (eventArgs.isColSelected) {
            var rangeArr = address[1].split(':');
            range = [0, getColIndex(rangeArr[0]), sheet.rowCount - 1, getColIndex(rangeArr[1])];
        }
        else {
            range = getSwapRange(getRangeIndexes(address[1]));
        }
        var indexes = range;
        var actionData = eventArgs.beforeActionData;
        var isFromUpdateAction = args.isFromUpdateAction;
        var isRefresh = this.checkRefreshNeeded(sheetIndex, isFromUpdateAction);
        var uniqueArgs = { cellIdx: [range[0], range[1]], isUnique: false, uniqueRange: '' };
        if (!eventArgs.isColSelected) {
            this.parent.notify(checkUniqueRange, uniqueArgs);
        }
        if (this.isUndo) {
            if (uniqueArgs.isUnique && eventArgs.formula && eventArgs.formula.indexOf('UNIQUE') > -1) {
                var rangeIdx = getRangeIndexes(uniqueArgs.uniqueRange);
                if (getCell(rangeIdx[0], rangeIdx[1], this.parent.getActiveSheet()).value !== '#SPILL!') {
                    for (var j = rangeIdx[0]; j <= rangeIdx[2]; j++) {
                        for (var k = rangeIdx[1]; k <= rangeIdx[3]; k++) {
                            if (j === rangeIdx[0] && k === rangeIdx[1]) {
                                k = k + 1;
                            }
                            this.parent.updateCellInfo({ value: '' }, getRangeAddress([j, k]), true);
                        }
                    }
                }
            }
            this.updateCellDetails(actionData.cellDetails, sheet, range, isRefresh, args, preventEvt, eventArgs.isColSelected, true, isFromAutoFillOption);
            if (uniqueArgs.isUnique && args.action === 'cellDelete' && eventArgs.isSpill) {
                var rangeIdx = getRangeIndexes(uniqueArgs.uniqueRange);
                var cell = getCell(rangeIdx[0], rangeIdx[1], this.parent.getActiveSheet());
                for (var i = rangeIdx[0]; i <= rangeIdx[2]; i++) {
                    for (var j = rangeIdx[1]; j <= rangeIdx[3]; j++) {
                        for (var k = range[0]; k <= range[2]; k++) {
                            for (var l = range[1]; l <= range[3]; l++) {
                                if (i !== k || j !== l) {
                                    this.parent.updateCellInfo({ value: '' }, getCellAddress(i, j), true);
                                }
                            }
                        }
                    }
                }
                cell.value = '#SPILL!';
                this.parent.updateCellInfo(cell, getCellAddress(rangeIdx[0], rangeIdx[1]), true);
            }
            if (!eventArgs.isSpill && uniqueArgs.uniqueRange !== '') {
                var indexes_1 = getRangeIndexes(uniqueArgs.uniqueRange);
                for (var j = indexes_1[0]; j <= indexes_1[2]; j++) {
                    for (var k = indexes_1[1]; k <= indexes_1[3]; k++) {
                        if (j === indexes_1[0] && k === indexes_1[1]) {
                            k = k + 1;
                        }
                        this.parent.updateCellInfo({ value: '' }, getRangeAddress([j, k]), true);
                    }
                }
                this.parent.notify(reApplyFormula, null);
            }
        }
        else {
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            var argsEventArgs = args.eventArgs;
            var activeCellIndexes = getRangeIndexes(sheet.activeCell);
            var startRange = address[1] ? address[1].split(':') : [];
            if (indexes[0] !== activeCellIndexes[0] && indexes[1] !== activeCellIndexes[1] &&
                args.action === 'hyperlink' && startRange.length > 0) {
                sheet.activeCell = startRange[0];
                activeCellIndexes = getRangeIndexes(sheet.activeCell);
            }
            var cellValue = this.parent.getCellStyleValue(['textDecoration'], activeCellIndexes).textDecoration;
            if (argsEventArgs && argsEventArgs.style && argsEventArgs.style.textDecoration) {
                var value = argsEventArgs.style.textDecoration;
                var changedValue = value;
                var changedStyle = void 0;
                var removeProp = false;
                if (cellValue === 'underline') {
                    changedValue = value === 'underline' ? 'none' : 'underline line-through';
                }
                else if (cellValue === 'line-through') {
                    changedValue = value === 'line-through' ? 'none' : 'underline line-through';
                }
                else if (cellValue === 'underline line-through') {
                    changedValue = value === 'underline' ? 'line-through' : 'underline';
                    removeProp = true;
                }
                if (changedValue === 'none') {
                    removeProp = true;
                }
                argsEventArgs.style.textDecoration = changedValue;
                args.eventArgs = argsEventArgs;
                for (var i = indexes[0]; i <= indexes[2]; i++) {
                    for (var j = indexes[1]; j <= indexes[3]; j++) {
                        changedStyle = {};
                        cellValue = this.parent.getCellStyleValue(['textDecoration'], [i, j]).textDecoration;
                        if (cellValue === 'none') {
                            if (removeProp) {
                                continue;
                            }
                            changedStyle.textDecoration = value;
                        }
                        else if (cellValue === 'underline' || cellValue === 'line-through') {
                            if (removeProp) {
                                if (value === cellValue) {
                                    changedStyle.textDecoration = 'none';
                                }
                                else {
                                    continue;
                                }
                            }
                            else {
                                changedStyle.textDecoration = value !== cellValue ? 'underline line-through' : value;
                            }
                        }
                        else if (cellValue === 'underline line-through') {
                            if (removeProp) {
                                changedStyle.textDecoration = value === 'underline' ? 'line-through' : 'underline';
                            }
                            else {
                                continue;
                            }
                        }
                        this.parent.notify(setCellFormat, {
                            style: { textDecoration: changedStyle.textDecoration }, range: [i, j, i, j], refreshRibbon: true,
                            onActionUpdate: true
                        });
                    }
                }
                argsEventArgs.style.textDecoration = value;
                args.eventArgs = argsEventArgs;
            }
            else {
                if (!isNullOrUndefined(eventArgs.oldValue) && eventArgs.oldValue !== eventArgs.value && uniqueArgs.isUnique) {
                    var indexes_2 = getRangeIndexes(uniqueArgs.uniqueRange);
                    if (getCell(indexes_2[0], indexes_2[1], this.parent.getActiveSheet()).value !== '#SPILL!') {
                        for (var j = indexes_2[0]; j <= indexes_2[2]; j++) {
                            for (var k = indexes_2[1]; k <= indexes_2[3]; k++) {
                                if (j === indexes_2[0] && k === indexes_2[1]) {
                                    this.parent.updateCellInfo({ value: '#SPILL!' }, getRangeAddress([indexes_2[0], indexes_2[1]]), true);
                                    k = k + 1;
                                }
                                this.parent.updateCellInfo({ value: '' }, getRangeAddress([j, k]), true);
                            }
                        }
                    }
                }
                updateAction(args, this.parent, true);
                if (uniqueArgs.isUnique && args.action === 'cellDelete' && eventArgs.isSpill) {
                    var indexes_3 = getRangeIndexes(uniqueArgs.uniqueRange);
                    var Skip = false;
                    for (var i = indexes_3[0]; i <= indexes_3[1]; i++) {
                        for (var j = indexes_3[1]; j <= indexes_3[3]; j++) {
                            if (i === indexes_3[0] && j === indexes_3[1]) {
                                j++;
                            }
                            if (getCell(i, j, sheet) && !isNullOrUndefined(getCell(i, j, sheet).value)
                                && getCell(i, j, sheet).value !== '') {
                                Skip = true;
                            }
                        }
                    }
                    if (!Skip) {
                        var cell = getCell(indexes_3[0], indexes_3[1], this.parent.getActiveSheet());
                        cell.value = '';
                        this.parent.updateCellInfo(cell, getCellAddress(indexes_3[0], indexes_3[1]), true);
                        this.parent.notify(reApplyFormula, null);
                    }
                }
            }
        }
        if (args.action === 'autofill') {
            address[1] = this.isUndo ? args.eventArgs.dataRange : args.eventArgs.selectedRange;
        }
        if (isRefresh && !preventReSelect && !isFromUpdateAction) {
            if (eventArgs.isColSelected) {
                address[1] = sheet.selectedRange;
            }
            this.parent.notify(selectRange, { address: address[1] });
        }
        if (this.parent.showAggregate) {
            this.parent.notify(showAggregate, {});
        }
        return args;
    };
    UndoRedo.prototype.getCellDetails = function (address, sheet, action) {
        var _this = this;
        var cells = [];
        var cell;
        var filterCheck = action === 'cellDelete';
        var processedColumns = {};
        address = getSwapRange(address);
        var updateCellProps = function (rowIdx, colIdx) {
            var currentCell = {
                rowIndex: rowIdx, colIndex: colIdx, value: cell ? cell.value : '',
                formula: cell ? cell.formula : ''
            };
            var rowHeight = getRowHeight(sheet, rowIdx);
            if (cell) {
                if (cell.format) {
                    currentCell.format = cell.format;
                }
                if (!isNullOrUndefined(cell.isLocked)) {
                    currentCell.isLocked = cell.isLocked;
                }
                if (cell.style) {
                    currentCell.style = Object.assign({}, cell.style);
                }
                if (cell.wrap) {
                    currentCell.wrap = cell.wrap;
                }
                if (cell.rowSpan) {
                    currentCell.rowSpan = cell.rowSpan;
                }
                if (cell.colSpan) {
                    currentCell.colSpan = cell.colSpan;
                }
                if (cell.image) {
                    currentCell.image = cell.image;
                }
                if (cell.chart) {
                    currentCell.chart = JSON.parse(JSON.stringify(cell.chart));
                }
                if (cell.validation) {
                    currentCell.validation = Object.assign({}, cell.validation);
                }
                if (cell.notes) {
                    currentCell.notes = cell.notes;
                }
                if (cell.isReadOnly) {
                    currentCell.isReadOnly = cell.isReadOnly;
                }
                if (cell.formattedText) {
                    currentCell.formattedText = cell.formattedText;
                }
                if (cell.hyperlink) {
                    currentCell.hyperlink = (isObject(cell.hyperlink) ? extend({}, cell.hyperlink) : cell.hyperlink);
                }
                if (sheet.standardHeight ? rowHeight !== sheet.standardHeight : rowHeight !== 20) {
                    cell.rowHeight = currentCell.rowHeight = rowHeight;
                }
                var editModule = _this.parent.editModule;
                currentCell.value = cell && editModule && cell.formula === editModule.editCellData.value &&
                    (!isNullOrUndefined(editModule.editCellData.prevFormulaValue)) ?
                    editModule.editCellData.prevFormulaValue : currentCell.value;
            }
            cells.push(currentCell);
        };
        if (action === 'validation' || action === 'removeValidation') {
            for (var colIdx = address[1]; colIdx <= address[3]; colIdx++) {
                var column = getColumn(sheet, colIdx);
                for (var rowIdx = address[0]; rowIdx <= address[2]; rowIdx++) {
                    if (!processedColumns[colIdx] && checkColumnValidation(column, rowIdx, colIdx)) {
                        cells.push({ colIndex: colIdx, validation: Object.assign({}, column.validation) });
                        processedColumns[colIdx] = true;
                    }
                    cell = getCell(rowIdx, colIdx, sheet);
                    if (cell && !cell.validation) {
                        continue;
                    }
                    updateCellProps(rowIdx, colIdx);
                }
            }
        }
        else {
            for (var i = address[0]; i <= address[2]; i++) {
                if (filterCheck && isFilterHidden(sheet, i)) {
                    continue;
                }
                for (var j = address[1]; j <= address[3]; j++) {
                    cell = getCell(i, j, sheet);
                    updateCellProps(i, j);
                }
            }
        }
        return cells;
    };
    UndoRedo.prototype.updateCellDetails = function (cells, sheet, range, isRefresh, args, preventEvt, isColSelected, isUndoRedo, isFromAutoFillOption) {
        var _this = this;
        var len = cells.length;
        var triggerEvt = args && !preventEvt && (args.action === 'cellSave' || args.action === 'cellDelete' ||
            args.action === 'autofill' || args.action === 'clipboard');
        var cellElem;
        var prevCell;
        var select;
        var cf = args && !args.eventArgs.cfClearActionArgs && sheet.conditionalFormats &&
            sheet.conditionalFormats.length && [].slice.call(sheet.conditionalFormats);
        var cfRule = [];
        var cfRefreshAll;
        var evtArgs;
        var isDelete;
        var deletedRange;
        if (args.action === 'cellDelete') {
            isDelete = false;
            deletedRange = range;
        }
        var _loop_1 = function (i) {
            if (isColSelected || isUndefined$1(cells[i].rowIndex)) {
                setColumn(sheet, cells[i].colIndex, { validation: cells[i].validation });
                return "continue";
            }
            prevCell = getCell(cells[i].rowIndex, cells[i].colIndex, sheet, false, true);
            if (prevCell.style && args && (args.action === 'format' || args.action === 'clipboard')) {
                if (prevCell.style.borderTop && (!cells[i].style || !cells[i].style.borderTop)) {
                    this_1.parent.setBorder({ borderTop: '' }, sheet.name + '!' + getCellAddress(cells[i].rowIndex, cells[i].colIndex), null, isUndoRedo);
                }
                if (prevCell.style.borderLeft && (!cells[i].style || !cells[i].style.borderLeft)) {
                    this_1.parent.setBorder({ borderLeft: '' }, sheet.name + '!' + getCellAddress(cells[i].rowIndex, cells[i].colIndex), null, isUndoRedo);
                }
                if (prevCell.style.borderRight && (!cells[i].style ||
                    !cells[i].style.borderRight)) {
                    this_1.parent.setBorder({ borderRight: '' }, sheet.name + '!' + getCellAddress(cells[i].rowIndex, cells[i].colIndex), null, isUndoRedo);
                }
                if (prevCell.style.fontSize && (!cells[i].style || !cells[i].style.fontSize)) {
                    prevCell.style.fontSize = '11pt';
                    select = true;
                    this_1.parent.notify(applyCellFormat, { style: { fontSize: '11pt' }, rowIdx: cells[i].rowIndex, colIdx: cells[i].colIndex, lastCell: true, isHeightCheckNeeded: true, manualUpdate: true, onActionUpdate: true });
                }
                if (prevCell.style.fontFamily && (!cells[i].style || !cells[i].style.fontFamily)) {
                    select = true;
                    prevCell.style.fontFamily = 'Calibri';
                    this_1.parent.notify(applyCellFormat, { style: { fontFamily: 'Calibri' }, rowIdx: cells[i].rowIndex, colIdx: cells[i].colIndex, lastCell: true, isHeightCheckNeeded: true, manualUpdate: true, onActionUpdate: true });
                }
            }
            if (prevCell.image && args && args.action === 'clipboard') {
                prevCell.image.forEach(function (image) {
                    _this.parent.notify(deleteImage, { id: image.id, sheet: sheet, preventEventTrigger: true, rowIdx: cells[i].rowIndex,
                        colIdx: cells[i].colIndex });
                });
            }
            var currentCell = {
                value: (cells[i].formula && cells[i].formula.toUpperCase().includes('UNIQUE')) ? null : cells[i].value, formula: cells[i].formula
            };
            if (cells[i].format) {
                currentCell.format = cells[i].format;
            }
            if (!isNullOrUndefined(cells[i].isLocked)) {
                currentCell.isLocked = prevCell.isLocked ? prevCell.isLocked : cells[i].isLocked;
            }
            if (cells[i].style) {
                currentCell.style = Object.assign({}, cells[i].style);
            }
            if (cells[i].wrap) {
                currentCell.wrap = cells[i].wrap;
            }
            if (cells[i].rowSpan) {
                currentCell.rowSpan = cells[i].rowSpan;
            }
            if (cells[i].colSpan) {
                currentCell.colSpan = cells[i].colSpan;
            }
            if (cells[i].hyperlink) {
                currentCell.hyperlink = cells[i].hyperlink;
            }
            if (cells[i].image) {
                currentCell.image = cells[i].image;
            }
            if (cells[i].notes) {
                currentCell.notes = cells[i].notes;
            }
            if (cells[i].isReadOnly) {
                currentCell.isReadOnly = cells[i].isReadOnly;
            }
            if (cells[i].formattedText) {
                currentCell.formattedText = cells[i].formattedText;
            }
            setCell(cells[i].rowIndex, cells[i].colIndex, sheet, currentCell);
            evtArgs = {
                action: 'updateCellValue', address: [cells[i].rowIndex, cells[i].colIndex,
                    cells[i].rowIndex, cells[i].colIndex], notes: cells[i].notes,
                value: cells[i].formula ? cells[i].formula : cells[i].value,
                sheetIndex: getSheetIndex(this_1.parent, sheet.name), skipFormatCheck: isImported(this_1.parent),
                isDelete: isDelete, deletedRange: deletedRange, actionName: args.action
            };
            this_1.parent.notify(workbookEditOperation, evtArgs);
            if (cf && !cfRefreshAll) {
                cfRefreshAll = evtArgs.isFormulaDependent;
            }
            if (args && args.action === 'format' && args.eventArgs.requestType === 'NumberFormat' && currentCell.wrap &&
                currentCell.format !== prevCell.format && !getRow(sheet, cells[i].rowIndex).customHeight) {
                this_1.parent.notify(wrapEvent, {
                    range: [cells[i].rowIndex, cells[i].colIndex, cells[i].rowIndex,
                        cells[i].colIndex], wrap: true, sheet: sheet, initial: true, isOtherAction: true
                });
            }
            else if ((args && args.action === 'wrap' && args.eventArgs.wrap) || (prevCell.wrap && !cells[i].wrap)) {
                this_1.parent.notify(wrapEvent, {
                    range: [cells[i].rowIndex, cells[i].colIndex, cells[i].rowIndex,
                        cells[i].colIndex], wrap: false, sheet: sheet, initial: true
                });
            }
            if (args && cells[i].hyperlink && args.action === 'clear') {
                var hyperlinkRange = sheet.name + '!' + getRangeAddress([cells[i].rowIndex, cells[i].colIndex, cells[i].rowIndex, cells[i].colIndex]);
                cellElem = this_1.parent.getCell(cells[i].rowIndex, cells[i].colIndex);
                if (args.eventArgs.type === 'Clear All' || args.eventArgs.type === 'Clear Hyperlinks') {
                    this_1.parent.addHyperlink(cells[i].hyperlink, hyperlinkRange, cells[i].value);
                }
                else if (args.eventArgs.type === 'Clear Formats' && cellElem) {
                    addClass(cellElem.querySelectorAll('.e-hyperlink'), 'e-hyperlink-style');
                }
            }
            if (cells[i].validation) {
                this_1.parent.notify(cellValidation, { rules: cells[i].validation,
                    range: sheet.name + "!" + getCellAddress(cells[i].rowIndex, cells[i].colIndex) });
            }
            if (triggerEvt && cells[i].value !== prevCell.value) {
                this_1.parent.trigger('cellSave', { element: null, value: cells[i].value, oldValue: prevCell.value, formula: cells[i].formula, cancel: false,
                    address: sheet.name + "!" + getCellAddress(cells[i].rowIndex, cells[i].colIndex),
                    displayText: this_1.parent.getDisplayText(cells[i]) });
            }
            if (cf && !cfRefreshAll) {
                updateCFModel(cf, cfRule, cells[i].rowIndex, cells[i].colIndex);
            }
        };
        var this_1 = this;
        for (var i = 0; i < len; i++) {
            _loop_1(i);
        }
        if (isRefresh) {
            if (range[0] === range[2] && range[1] === range[3]) {
                var cell = getCell(range[0], range[1], sheet);
                if (cell.rowSpan > 1) {
                    range[2] = range[0] + cell.rowSpan - 1;
                }
                if (cell.colSpan > 1) {
                    range[3] = range[1] + cell.colSpan - 1;
                }
            }
            var isHeightCheckFromUndo = false;
            if (args.action === 'autofill' || args.action === 'clipboard' || args.action === 'wrap') {
                isHeightCheckFromUndo = true;
            }
            else if (args.action === 'format' && args.eventArgs.requestType === 'CellFormat') {
                isHeightCheckFromUndo = isHeightCheckNeeded(args.eventArgs.style, true);
            }
            this.parent.serviceLocator.getService('cell').refreshRange(range, false, false, true, false, isImported(this.parent), null, isFromAutoFillOption, isHeightCheckFromUndo, null, null, cells);
            if (cfRule.length || cfRefreshAll) {
                this.parent.notify(applyCF, { cfModel: !cfRefreshAll && cfRule, refreshAll: cfRefreshAll, isAction: true });
            }
            if (select) {
                getUpdateUsingRaf(function () { return _this.parent.selectRange(sheet.selectedRange); });
            }
        }
    };
    UndoRedo.prototype.checkRefreshNeeded = function (sheetIndex, isFromUpdateAction) {
        var isRefresh = true;
        if (sheetIndex !== this.parent.activeSheetIndex) {
            if (!isFromUpdateAction) {
                this.parent.activeSheetIndex = sheetIndex;
                this.parent.dataBind();
            }
            isRefresh = false;
        }
        return isRefresh;
    };
    UndoRedo.prototype.addEventListener = function () {
        this.parent.on(performUndoRedo, this.performUndoRedo, this);
        this.parent.on(updateUndoRedoCollection, this.updateUndoRedoCollection, this);
        this.parent.on(setActionData, this.setActionData, this);
        this.parent.on(getBeforeActionData, this.getBeforeActionData, this);
        this.parent.on(clearUndoRedoCollection, this.clearUndoRedoCollection, this);
        this.parent.on(setUndoRedo, this.updateUndoRedoIcons, this);
        this.parent.on(sheetRenameUpdate, this.updateUndoRedoSheetReferences, this);
    };
    UndoRedo.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(performUndoRedo, this.performUndoRedo);
            this.parent.off(updateUndoRedoCollection, this.updateUndoRedoCollection);
            this.parent.off(setActionData, this.setActionData);
            this.parent.off(getBeforeActionData, this.getBeforeActionData);
            this.parent.off(clearUndoRedoCollection, this.clearUndoRedoCollection);
            this.parent.off(setUndoRedo, this.updateUndoRedoIcons);
            this.parent.off(sheetRenameUpdate, this.updateUndoRedoSheetReferences);
        }
    };
    /**
     * Destroy undo redo module.
     *
     * @returns {void} - Destroy undo redo module.
     */
    UndoRedo.prototype.destroy = function () {
        this.removeEventListener();
        if (this.undoCollection.length > 0) {
            this.undoCollection = [];
        }
        if (this.redoCollection.length > 0) {
            this.redoCollection = [];
        }
        if (this.beforeActionData && this.beforeActionData.cellDetails) {
            this.beforeActionData.cellDetails = [];
        }
        this.parent = null;
    };
    /**
     * Get the undo redo module name.
     *
     * @returns {string} - Get the undo redo module name.
     */
    UndoRedo.prototype.getModuleName = function () {
        return 'undoredo';
    };
    return UndoRedo;
}());

/**
 * Represents Wrap Text support for Spreadsheet.
 */
var WrapText = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet Wrap Text module.
     *
     * @param {Spreadsheet} parent - Specifies the Spreadsheet.
     * @private
     */
    function WrapText(parent) {
        this.parent = parent;
        this.wrapCell = this.parent.createElement('span', { className: 'e-wrap-content' });
        this.addEventListener();
    }
    WrapText.prototype.addEventListener = function () {
        this.parent.on(ribbonClick, this.ribbonClickHandler, this);
        this.parent.on(wrapEvent, this.wrapTextHandler, this);
        this.parent.on(rowHeightChanged, this.rowHeightChangedHandler, this);
        this.parent.on(colWidthChanged, this.colWidthChanged, this);
        this.parent.on(updateWrapCell, this.updateWrapCell, this);
    };
    WrapText.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(ribbonClick, this.ribbonClickHandler);
            this.parent.off(wrapEvent, this.wrapTextHandler);
            this.parent.off(rowHeightChanged, this.rowHeightChangedHandler);
            this.parent.off(colWidthChanged, this.colWidthChanged);
            this.parent.off(updateWrapCell, this.updateWrapCell);
        }
    };
    WrapText.prototype.wrapTextHandler = function (args) {
        if (args.initial || inView(this.parent, args.range, true)) {
            if (args.isPublic && isReadOnlyCells(this.parent, args.range)) {
                return;
            }
            if (args.initial && !args.td && !args.outsideViewport && inView(this.parent, args.range, true)) {
                args.initial = false;
            }
            var ele = void 0;
            var cell = void 0;
            var colwidth = void 0;
            var maxHgt = void 0;
            var hgt = void 0;
            var isCustomHgt = void 0;
            var rowCustomHeight = void 0;
            var lineHgt = void 0;
            var row = void 0;
            var visibleRow = void 0;
            var frozenRow = this.parent.frozenRowCount(args.sheet);
            var isLessStandardHgt = void 0;
            var filterRange = void 0;
            var hyperlinkEle = void 0;
            if (!isNullOrUndefined(args.sheet.standardHeight) && args.sheet.standardHeight < 20) {
                isLessStandardHgt = true;
            }
            else {
                filterRange = this.parent.allowFiltering &&
                    this.parent.filterModule.filterRange.has(this.parent.activeSheetIndex) &&
                    this.parent.filterModule.filterRange.get(this.parent.activeSheetIndex).range;
            }
            for (var i = args.range[0]; i <= args.range[2]; i++) {
                maxHgt = 0;
                row = getRow(args.sheet, i);
                rowCustomHeight = row.customHeight;
                isCustomHgt = rowCustomHeight || args.isCustomHgt;
                visibleRow = !isHiddenRow(args.sheet, i);
                for (var j = args.range[1]; j <= args.range[3]; j++) {
                    cell = getCell(i, j, args.sheet, null, true);
                    if (cell.rowSpan < 0 || cell.colSpan < 0) {
                        continue;
                    }
                    var isMerge = cell.rowSpan > 1 || cell.colSpan > 1;
                    ele = args.initial ? args.td : (visibleRow && !isHiddenCol(args.sheet, j) && this.parent.getCell(i, j));
                    if (ele) {
                        if (args.wrap) {
                            lineHgt = getLineHeight(cell.style && cell.style.fontFamily ? cell.style : this.parent.cellStyle);
                            ele.classList.add(WRAPTEXT);
                        }
                        else {
                            ele.classList.remove(WRAPTEXT);
                            lineHgt = null;
                        }
                        if (isCustomHgt || isMerge || row.height < 20 || isLessStandardHgt ||
                            (filterRange && i === filterRange[0] && j >= filterRange[1] && j <= filterRange[3])) {
                            this.updateWrapCell({ rowIdx: i, colIdx: j, sheet: args.sheet, ele: ele });
                        }
                        if (Browser.isIE) {
                            ele.classList.add('e-ie-wrap');
                        }
                    }
                    else {
                        lineHgt = null;
                    }
                    if (!(isCustomHgt || isMerge)) {
                        colwidth = getExcludedColumnWidth(args.sheet, i, j, cell.colSpan > 1 ? j + cell.colSpan - 1 : j);
                        var displayText = this.parent.getDisplayText(cell).toString();
                        if (this.parent.isEdit && ele && displayText.indexOf('\n') < 0) {
                            var editElem = this.parent.element.querySelector('.e-spreadsheet-edit');
                            if (editElem) {
                                if (editElem.textContent.indexOf('\n') > -1) {
                                    displayText = editElem.textContent;
                                }
                            }
                        }
                        if (displayText) {
                            if (args.wrap) {
                                if (ele && ele.classList.contains('e-alt-unwrap')) {
                                    ele.classList.remove('e-alt-unwrap');
                                    if (displayText.includes('\n')) {
                                        hyperlinkEle = ele.querySelector('.e-hyperlink');
                                        if (hyperlinkEle && !hyperlinkEle.innerText.includes('\n')) {
                                            hyperlinkEle.innerText = displayText;
                                        }
                                    }
                                }
                                var lines = void 0;
                                var n = 0;
                                var p = void 0;
                                if (displayText.indexOf('\n') > -1) {
                                    var splitVal = displayText.split('\n');
                                    var valLength = splitVal.length;
                                    for (p = 0; p < valLength; p++) {
                                        lines = getLines(splitVal[p], colwidth, cell.style, this.parent.cellStyle);
                                        if (lines === 0) {
                                            lines = 1; // for empty new line
                                        }
                                        n = n + lines;
                                    }
                                    lines = n;
                                }
                                else {
                                    lines = getLines(displayText, colwidth, cell.style, this.parent.cellStyle);
                                }
                                hgt = getTextHeightWithBorder(this.parent, i, j, args.sheet, cell.style || this.parent.cellStyle, lines, lineHgt);
                                maxHgt = Math.max(maxHgt, hgt);
                                if (cell.rowSpan > 1) {
                                    var prevHeight = getRowsHeight(args.sheet, i, i + (cell.rowSpan - 1));
                                    if (prevHeight >= maxHgt) {
                                        return;
                                    }
                                    hgt = maxHgt = getRowHeight(args.sheet, i) + (maxHgt - prevHeight);
                                }
                                setMaxHgt(args.sheet, i, j, hgt);
                            }
                            else {
                                if (ele) {
                                    if (displayText.indexOf('\n') > -1) {
                                        ele.classList.add('e-alt-unwrap');
                                    }
                                    hyperlinkEle = ele.querySelector('.e-hyperlink');
                                    if (hyperlinkEle) {
                                        var hyperlinkText = hyperlinkEle.innerText;
                                        if (hyperlinkText.includes('\n')) {
                                            hyperlinkEle.innerText = hyperlinkText.split('\n').join(' ');
                                        }
                                    }
                                }
                                hgt = getTextHeightWithBorder(this.parent, i, j, args.sheet, cell.style || this.parent.cellStyle, 1, lineHgt);
                                setMaxHgt(args.sheet, i, j, hgt);
                                maxHgt = Math.max(getMaxHgt(args.sheet, i), 20);
                            }
                        }
                        else if (!args.wrap || !displayText) {
                            setMaxHgt(args.sheet, i, j, 20);
                            maxHgt = Math.max(getMaxHgt(args.sheet, i), 20);
                        }
                        if (j === args.range[3]) {
                            var prevHgt = getRowHeight(args.sheet, i);
                            if ((args.wrap && (args.isOtherAction ? maxHgt >= 20 : maxHgt > 20) && getMaxHgt(args.sheet, i) <= maxHgt) ||
                                ((!args.wrap || !displayText) && getMaxHgt(args.sheet, i) < prevHgt && prevHgt > 20)) {
                                if (prevHgt !== maxHgt) {
                                    if (ele) {
                                        setRowEleHeight(this.parent, args.sheet, maxHgt, i, args.row, args.hRow, visibleRow);
                                        if (ele && args.sheet.conditionalFormats && args.sheet.conditionalFormats.length) {
                                            this.parent.notify(applyCF, { indexes: [i, j], isAction: true });
                                        }
                                    }
                                    else {
                                        setRowEleHeight(this.parent, args.sheet, maxHgt, i, null, null, visibleRow, !visibleRow || i > this.parent.viewport.bottomIndex ||
                                            (i >= frozenRow && i < this.parent.viewport.topIndex + frozenRow));
                                    }
                                }
                            }
                        }
                    }
                    if (ele) {
                        if (isCustomHgt && !isMerge) {
                            var displayText = this.parent.getDisplayText(cell);
                            if (args.wrap) {
                                if (ele.classList.contains('e-alt-unwrap')) {
                                    ele.classList.remove('e-alt-unwrap');
                                }
                            }
                            else if (displayText.indexOf('\n') > -1) {
                                ele.classList.add('e-alt-unwrap');
                            }
                        }
                        if (args.wrap) {
                            if (!rowCustomHeight) {
                                ele.style.lineHeight = (parseFloat((cell.style && cell.style.fontSize) || this.parent.cellStyle.fontSize) *
                                    lineHgt) + 'pt';
                            }
                            else if (ele.style.lineHeight) {
                                ele.style.lineHeight = '';
                            }
                        }
                        else {
                            ele.style.lineHeight = '';
                        }
                    }
                }
            }
            if (!args.initial) {
                this.parent.notify(positionAutoFillElement, null);
            }
        }
    };
    WrapText.prototype.ribbonClickHandler = function (args) {
        var target = closest(args.originalEvent.target, '.e-btn');
        if (target && target.id === this.parent.element.id + '_wrap') {
            var wrap$1 = target.classList.contains('e-active');
            var address = getAddressFromSelectedRange(this.parent.getActiveSheet());
            var eventArgs = { address: address, wrap: wrap$1, cancel: false };
            if (isReadOnlyCells(this.parent)) {
                this.parent.notify(readonlyAlert, null);
                return;
            }
            this.parent.notify(beginAction, { action: 'beforeWrap', eventArgs: eventArgs });
            if (!eventArgs.cancel) {
                wrap(this.parent.getActiveSheet().selectedRange, wrap$1, this.parent);
                this.parent.notify(completeAction, { action: 'wrap', eventArgs: { address: address, wrap: wrap$1 } });
            }
        }
    };
    WrapText.prototype.rowHeightChangedHandler = function (args) {
        if (args.isCustomHgt) {
            args.sheet = this.parent.getActiveSheet();
            for (var i = this.parent.viewport.leftIndex, len = this.parent.viewport.rightIndex; i <= len; i++) {
                if (getCell(args.rowIdx, i, args.sheet, false, true).wrap) {
                    args.colIdx = i;
                    args.ele = this.parent.getCell(args.rowIdx, i);
                    this.updateWrapCell(args);
                    if (args.ele.style.lineHeight) {
                        args.ele.style.lineHeight = '';
                    }
                }
            }
        }
    };
    WrapText.prototype.colWidthChanged = function (args) {
        if (args.checkWrapCell) {
            args.sheet = this.parent.getActiveSheet();
            for (var i = this.parent.viewport.topIndex, len = this.parent.viewport.bottomIndex; i <= len; i++) {
                if (getCell(i, args.colIdx, args.sheet, false, true).wrap) {
                    args.rowIdx = i;
                    args.ele = this.parent.getCell(i, args.colIdx);
                    this.updateWrapCell(args);
                }
            }
        }
    };
    WrapText.prototype.updateWrapCell = function (args) {
        if (args.ele && !args.ele.querySelector('.e-wrap-content')) {
            var wrapSpan = this.wrapCell.cloneNode();
            var filterBtn = args.ele.querySelector('.e-filter-btn');
            while (args.ele.childElementCount && !isNullOrUndefined(args.ele.firstElementChild) &&
                args.ele.firstElementChild.className.indexOf('e-addNoteIndicator') === -1) {
                wrapSpan.appendChild(args.ele.firstElementChild);
            }
            var nodeElement = void 0;
            if (!isNullOrUndefined(args.ele.firstElementChild) && args.ele.firstElementChild.className.indexOf('e-addNoteIndicator') > -1) {
                nodeElement = args.ele.firstElementChild;
            }
            if (filterBtn) {
                if (args.ele.firstChild) {
                    args.ele.insertBefore(filterBtn, args.ele.firstChild);
                }
                else {
                    args.ele.appendChild(filterBtn);
                }
            }
            if (!getCell(args.rowIdx, args.colIdx, args.sheet, false, true).hyperlink) {
                var node = args.ele.lastChild;
                if (node && node.nodeType === 3) {
                    wrapSpan.appendChild(document.createTextNode(node.textContent));
                    node.textContent = '';
                }
                else {
                    wrapSpan.appendChild(document.createTextNode(args.ele.textContent));
                    args.ele.textContent = '';
                }
            }
            args.ele.appendChild(wrapSpan);
            if (!isNullOrUndefined(nodeElement)) {
                args.ele.appendChild(nodeElement);
            }
        }
    };
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    WrapText.prototype.getModuleName = function () {
        return 'wrapText';
    };
    /**
     * Removes the added event handlers and clears the internal properties of WrapText module.
     *
     * @returns {void}
     */
    WrapText.prototype.destroy = function () {
        this.removeEventListener();
        if (this.wrapCell) {
            this.wrapCell.remove();
            this.wrapCell = null;
        }
        this.parent = null;
    };
    return WrapText;
}());

/**
 * The `Insert` module is used to insert cells, rows, columns and sheets in to the spreadsheet.
 */
var Insert = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet insert module.
     *
     * @param {Spreadsheet} parent - Specify the spreadsheet instance.
     * @private
     */
    function Insert(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    Insert.prototype.insert = function (actionArgs) {
        var args = actionArgs.eventArgs;
        this.parent.notify(beforeInsert, args);
        var sheet = getSheet(this.parent, args.activeSheetIndex);
        switch (args.modelType) {
            case 'Sheet':
                this.parent.notify(insertSheetTab, { startIdx: args.index, endIdx: args.index + (args.model.length - 1), preventUpdate: !args.isAction });
                this.parent.renderModule.refreshSheet();
                break;
            case 'Row':
                if (args.activeSheetIndex === this.parent.activeSheetIndex) {
                    var frozenRow = this.parent.frozenRowCount(sheet);
                    if (!this.parent.scrollSettings.enableVirtualization ||
                        args.index <= this.parent.viewport.bottomIndex) {
                        if (args.freezePane) {
                            this.parent.renderModule.refreshSheet(false, false, true);
                        }
                        else if (this.parent.scrollSettings.enableVirtualization) {
                            var frozenCol = this.parent.frozenColCount(sheet);
                            if (args.index >= this.parent.viewport.topIndex + frozenRow) {
                                var frozenIndexes = [];
                                var colIndex = void 0;
                                if (frozenCol) {
                                    colIndex = getCellIndexes(sheet.topLeftCell)[1];
                                    frozenIndexes.push(frozenRow);
                                    frozenIndexes.push(this.parent.viewport.leftIndex + frozenCol);
                                }
                                else {
                                    colIndex = this.parent.viewport.leftIndex;
                                }
                                var prevColIdx = this.parent.viewport.leftIndex;
                                this.parent.renderModule.refreshUI({
                                    rowIndex: this.parent.viewport.topIndex, colIndex: colIndex, refresh: 'Row',
                                    frozenIndexes: frozenIndexes, skipUpdateOnFirst: this.parent.viewport.topIndex +
                                        frozenRow === skipHiddenIdx(sheet, frozenRow, true)
                                });
                                if (frozenCol) {
                                    this.parent.viewport.leftIndex = prevColIdx;
                                }
                            }
                            var topIdx = getCellIndexes(sheet.paneTopLeftCell)[0];
                            if (args.index < topIdx) {
                                this.parent.notify(updateScrollValue, { scrollTop: getRowsHeight(sheet, frozenRow, topIdx - 1, true) });
                                this.parent.goTo(getCellAddress(args.index, skipHiddenIdx(sheet, frozenCol, true, 'columns')));
                            }
                            this.parent.selectRange(sheet.selectedRange);
                        }
                        else {
                            this.parent.renderModule.refreshSheet(false, false, true);
                        }
                    }
                    else if (this.parent.scrollSettings.isFinite && (this.parent.viewport.topIndex + frozenRow ===
                        skipHiddenIdx(sheet, 0, true) || this.parent.viewport.bottomIndex === skipHiddenIdx(sheet, sheet.rowCount - args.model.length - 1, false))) {
                        this.parent.renderModule.refreshSheet(false, false, true);
                    }
                }
                break;
            case 'Column':
                if (args.activeSheetIndex === this.parent.activeSheetIndex) {
                    var frozenCol = this.parent.frozenColCount(sheet);
                    if (!this.parent.scrollSettings.enableVirtualization || args.index <= this.parent.viewport.rightIndex) {
                        if (args.freezePane) {
                            this.parent.renderModule.refreshSheet(false, false, true);
                        }
                        else if (this.parent.scrollSettings.enableVirtualization) {
                            var frozenRow = this.parent.frozenRowCount(sheet);
                            if (args.index >= this.parent.viewport.leftIndex + frozenCol) {
                                var frozenIndexes = [];
                                if (frozenRow) {
                                    frozenIndexes = [frozenRow + this.parent.viewport.topIndex, frozenCol];
                                }
                                var rowIndex = frozenRow ? getCellIndexes(sheet.topLeftCell)[0] : this.parent.viewport.topIndex;
                                var prevRowIdx = this.parent.viewport.topIndex;
                                this.parent.renderModule.refreshUI({ skipUpdateOnFirst: this.parent.viewport.leftIndex + frozenCol === skipHiddenIdx(sheet, frozenCol, true, 'columns'), rowIndex: rowIndex, colIndex: this.parent.viewport.leftIndex,
                                    refresh: 'Column', frozenIndexes: frozenIndexes });
                                if (frozenRow) {
                                    this.parent.viewport.topIndex = prevRowIdx;
                                }
                            }
                            var leftIdx = getCellIndexes(sheet.paneTopLeftCell)[1];
                            if (args.index < leftIdx) {
                                this.parent.notify(updateScrollValue, { scrollLeft: getColumnsWidth(sheet, 0, leftIdx - 1, true) });
                                this.parent.goTo(getCellAddress(skipHiddenIdx(sheet, frozenRow, true), args.index));
                            }
                            this.parent.selectRange(sheet.selectedRange);
                        }
                        else {
                            this.parent.renderModule.refreshSheet(false, false, true);
                        }
                    }
                    else if (this.parent.scrollSettings.isFinite && (this.parent.viewport.leftIndex + frozenCol ===
                        skipHiddenIdx(sheet, 0, true, 'columns') || this.parent.viewport.rightIndex === skipHiddenIdx(sheet, sheet.colCount - args.model.length - 1, false, 'columns'))) {
                        this.parent.renderModule.refreshSheet(false, false, true);
                    }
                }
                break;
        }
        this.refreshImgElement(args.model.length, this.parent.activeSheetIndex, args.modelType, args.index);
        if (args.isAction) {
            delete args.isAction;
            this.parent.notify(completeAction, actionArgs);
            focus(this.parent.element);
        }
        else if (!args.isUndoRedo) {
            args.isMethod = true;
            this.parent.notify(triggerDataChange, actionArgs);
        }
    };
    Insert.prototype.refreshImgElement = function (count, sheetIdx, modelType, index) {
        var sheet = this.parent.sheets[sheetIdx];
        var cellObj;
        var indexes = [0, 0, sheet.usedRange.rowIndex, sheet.usedRange.colIndex];
        for (var i = 0; i <= indexes[2]; i++) {
            for (var j = indexes[1]; j <= indexes[3]; j++) {
                cellObj = getCell(i, j, sheet);
                if (cellObj && cellObj.image && cellObj.image.length > 0) {
                    if ((modelType === 'Row' && i >= index) || (modelType === 'Column' && j >= index)) {
                        this.parent.notify(refreshImagePosition, {
                            rowIdx: i, colIdx: j, sheetIdx: sheetIdx, type: modelType, count: count, status: 'insert'
                        });
                    }
                }
            }
        }
    };
    Insert.prototype.addEventListener = function () {
        this.parent.on(insert, this.insert, this);
    };
    /**
     * Destroy insert module.
     *
     * @returns {void} - Destroy insert module.
     */
    Insert.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Insert.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(insert, this.insert);
        }
    };
    /**
     * Get the insert module name.
     *
     * @returns {string} - Get the insert module name.
     */
    Insert.prototype.getModuleName = function () {
        return 'insert';
    };
    return Insert;
}());

/**
 * The `Delete` module is used to delete cells, rows, columns and sheets from the spreadsheet.
 */
var Delete = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet insert module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet insert module.
     * @private
     */
    function Delete(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    Delete.prototype.delete = function (actionArgs) {
        var args = actionArgs.eventArgs;
        if (args.modelType === 'Sheet') {
            var activeSheetDeleted = args.activeSheetIndex >= args.startIndex && args.activeSheetIndex <= args.endIndex;
            if (activeSheetDeleted) {
                this.parent.setProperties({ activeSheetIndex: this.parent.skipHiddenSheets(args.startIndex < this.parent.sheets.length ? args.startIndex :
                        (args.startIndex ? args.startIndex - 1 : 0)) }, true);
            }
            if (args.endIndex < args.activeSheetIndex) {
                this.parent.setProperties({ activeSheetIndex: args.activeSheetIndex - ((args.endIndex + 1) - args.startIndex) }, true);
            }
            this.parent.notify(refreshSheetTabs, null);
            if (activeSheetDeleted) {
                this.parent.renderModule.refreshSheet(false, false, true);
            }
        }
        else if (args.activeSheetIndex === this.parent.activeSheetIndex) {
            var sheet = this.parent.getActiveSheet();
            var frozenRow = this.parent.frozenRowCount(sheet);
            var frozenCol = this.parent.frozenColCount(sheet);
            if (args.modelType === 'Row') {
                if (!this.parent.scrollSettings.enableVirtualization || args.startIndex <= this.parent.viewport.bottomIndex) {
                    if (this.parent.scrollSettings.enableVirtualization) {
                        if (args.startIndex < getCellIndexes(sheet.paneTopLeftCell)[0]) {
                            this.parent.updateTopLeftCell(skipHiddenIdx(sheet, args.startIndex - 1 < frozenRow ? frozenRow : args.startIndex - 1, true) - frozenRow, null, 'col');
                            this.parent.renderModule.refreshSheet(false, false, true);
                        }
                        else {
                            if (args.freezePane || (this.parent.scrollSettings.isFinite &&
                                this.parent.viewport.bottomIndex >= skipHiddenIdx(sheet, sheet.rowCount - 1, false))) {
                                this.parent.renderModule.refreshSheet(false, false, true);
                            }
                            else {
                                var frozenIndexes = [];
                                var frozenCol_1 = this.parent.frozenColCount(sheet);
                                var colIndex = void 0;
                                var viewportColIdx = this.parent.viewport.leftIndex;
                                if (frozenCol_1) {
                                    frozenIndexes.push(frozenRow);
                                    frozenIndexes.push(viewportColIdx + frozenCol_1);
                                    colIndex = getCellIndexes(sheet.topLeftCell)[1];
                                }
                                else {
                                    colIndex = viewportColIdx;
                                }
                                this.parent.renderModule.refreshUI({ rowIndex: this.parent.viewport.topIndex, refresh: 'Row', colIndex: colIndex, skipUpdateOnFirst: this.parent.viewport.topIndex + frozenRow === skipHiddenIdx(sheet, frozenRow, true),
                                    frozenIndexes: frozenIndexes });
                                if (frozenCol_1) {
                                    this.parent.viewport.leftIndex = viewportColIdx;
                                }
                                this.parent.selectRange(sheet.selectedRange);
                            }
                        }
                    }
                    else {
                        this.parent.renderModule.refreshSheet(false, false, true);
                    }
                }
            }
            else {
                if (args.refreshSheet !== false && (!this.parent.scrollSettings.enableVirtualization ||
                    args.startIndex <= this.parent.viewport.rightIndex)) {
                    if (this.parent.scrollSettings.enableVirtualization) {
                        if (args.startIndex < getCellIndexes(sheet.paneTopLeftCell)[1]) {
                            this.parent.updateTopLeftCell(null, skipHiddenIdx(sheet, args.startIndex - 1 < frozenCol ? frozenCol :
                                args.startIndex - 1, true, 'columns') - frozenCol, 'row');
                            this.parent.renderModule.refreshSheet(false, false, true);
                        }
                        else {
                            if (args.freezePane || args.refreshSheet === true) {
                                this.parent.renderModule.refreshSheet(false, false, true);
                            }
                            else {
                                var frozenRow_1 = this.parent.frozenRowCount(sheet);
                                var frozenIndexes = [];
                                var viewportRowIdx = this.parent.viewport.topIndex;
                                var rowIndex = frozenRow_1 ? getCellIndexes(sheet.topLeftCell)[0] : viewportRowIdx;
                                if (frozenRow_1) {
                                    frozenIndexes = [frozenRow_1 + viewportRowIdx, frozenCol];
                                }
                                this.parent.renderModule.refreshUI({ rowIndex: rowIndex, refresh: 'Column', colIndex: this.parent.viewport.leftIndex, insertDelete: true,
                                    skipUpdateOnFirst: this.parent.viewport.leftIndex + frozenCol === skipHiddenIdx(sheet, frozenCol, true, 'columns'), frozenIndexes: frozenIndexes });
                                if (frozenRow_1) {
                                    this.parent.viewport.topIndex = viewportRowIdx;
                                }
                                this.parent.selectRange(sheet.selectedRange);
                            }
                        }
                    }
                    else {
                        this.parent.renderModule.refreshSheet(false, false, true);
                    }
                }
                delete args.refreshSheet;
            }
        }
        this.refreshImgElement(args.deletedModel.length, this.parent.activeSheetIndex, args.modelType, args.startIndex);
        if (args.isAction) {
            delete args.isAction;
            this.parent.notify(completeAction, actionArgs);
            focus(this.parent.element);
        }
        else if (!args.isUndoRedo) {
            args.isMethod = true;
            this.parent.notify(triggerDataChange, actionArgs);
        }
    };
    Delete.prototype.addEventListener = function () {
        this.parent.on(deleteAction, this.delete, this);
    };
    /**
     * Destroy delete module.
     *
     * @returns {void} - Destroy delete module.
     */
    Delete.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Delete.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(deleteAction, this.delete);
        }
    };
    /**
     * Get the delete module name.
     *
     * @returns {string} - Get the delete module name.
     */
    Delete.prototype.getModuleName = function () {
        return 'delete';
    };
    Delete.prototype.refreshImgElement = function (count, sheetIdx, modelType, index) {
        var sheet = this.parent.sheets[sheetIdx];
        var cell;
        var address = [0, 0, sheet.usedRange.rowIndex, sheet.usedRange.colIndex];
        for (var i = 0; i <= address[2]; i++) {
            for (var j = address[1]; j <= address[3]; j++) {
                cell = getCell(i, j, sheet);
                if (cell && cell.image && cell.image.length > 0) {
                    if ((modelType === 'Row' && i >= index) || (modelType === 'Column' && j >= index)) {
                        this.parent.notify(refreshImagePosition, {
                            rowIdx: i, colIdx: j, sheetIdx: sheetIdx, type: modelType, count: count, status: 'delete'
                        });
                    }
                }
            }
        }
    };
    return Delete;
}());

/**
 * Represents Data Validation support for Spreadsheet.
 */
var DataValidation = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet Data Validation module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet Data Validation module.
     */
    function DataValidation(parent) {
        this.divElements = [];
        this.spanElements = [];
        this.inputElements = [];
        this.checkBoxElements = [];
        this.numericTextBoxElements = [];
        this.dropDownListElements = [];
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the Data Validation module.
     *
     * @returns {void}
     */
    DataValidation.prototype.destroy = function () {
        this.removeEventListener();
        var validationArgs = {};
        if (!this.parent.isDestroyed && !this.parent.refreshing) {
            var activeCellIndex = getCellIndexes(this.parent.getActiveSheet().activeCell);
            var activeCell = this.parent.getCell(activeCellIndex[0], activeCellIndex[1]);
            if (activeCell) {
                validationArgs = { rowIdx: activeCellIndex[0], colIdx: activeCellIndex[1], td: activeCell, isRefresh: true };
            }
        }
        this.removeListDropdownHandler(this.parent.element.querySelector('.e-validation-list'), validationArgs);
        var dataValPopup = select('#' + this.parent.element.id + '_datavalidation-popup');
        if (dataValPopup) {
            dataValPopup.remove();
        }
        this.typeData = [];
        this.operatorData = [];
        if (this.dataList) {
            this.dataList = null;
        }
        if (this.formObj) {
            this.formObj.destroy();
            this.formObj = null;
        }
        this.parent = null;
    };
    DataValidation.prototype.addEventListener = function () {
        if (Browser.isDevice && Browser.info.name === 'safari' && (Browser.isIos || Browser.isIos7)) {
            EventHandler.add(this.parent.element, 'touchend', this.listOpen, this);
        }
        else {
            EventHandler.add(this.parent.element, 'dblclick', this.listOpen, this);
        }
        this.parent.on(initiateDataValidation, this.initiateDataValidationHandler, this);
        this.parent.on(invalidData, this.invalidDataHandler, this);
        this.parent.on(isValidation, this.isValidCellHandler, this);
        this.parent.on(activeCellChanged, this.listHandler, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
        this.parent.on(removeDataValidation, this.removeValidationHandler, this);
        this.parent.on(updateHighlight, this.updateHighlightHandler, this);
        this.parent.on(rowHeightChanged, this.listValidationHeightHandler, this);
        this.parent.on(addListValidationDropdown, this.addListValidationDropdownHandler, this);
    };
    DataValidation.prototype.removeEventListener = function () {
        if (Browser.isDevice && Browser.info.name === 'safari' && (Browser.isIos || Browser.isIos7)) {
            EventHandler.remove(this.parent.element, 'touchend', this.listOpen);
        }
        else {
            EventHandler.remove(this.parent.element, 'dblclick', this.listOpen);
        }
        if (!this.parent.isDestroyed) {
            this.parent.off(initiateDataValidation, this.initiateDataValidationHandler);
            this.parent.off(invalidData, this.invalidDataHandler);
            this.parent.off(isValidation, this.isValidCellHandler);
            this.parent.off(activeCellChanged, this.listHandler);
            this.parent.off(keyUp, this.keyUpHandler);
            this.parent.off(removeDataValidation, this.removeValidationHandler);
            this.parent.off(updateHighlight, this.updateHighlightHandler);
            this.parent.off(rowHeightChanged, this.listValidationHeightHandler);
            this.parent.off(addListValidationDropdown, this.addListValidationDropdownHandler);
        }
    };
    DataValidation.prototype.removeValidationHandler = function (eventArgs) {
        var sheet;
        var range;
        var args = { cancel: false, isColSelected: eventArgs.isCol };
        if (eventArgs.range && eventArgs.range.includes('!')) {
            range = eventArgs.range;
            sheet = getSheet(this.parent, getSheetIndex(this.parent, range.substring(0, range.lastIndexOf('!'))));
            if (!sheet) {
                return;
            }
        }
        else {
            sheet = this.parent.getActiveSheet();
            range = sheet.name + '!';
            if (eventArgs.range) {
                range += eventArgs.range;
            }
            else {
                var rangeArgs = this.getRange(sheet.selectedRange);
                range += rangeArgs.range;
                args.isColSelected = rangeArgs.isColSelected;
            }
        }
        args.range = range;
        if (eventArgs.isAction) {
            this.parent.notify(beginAction, { eventArgs: args, action: 'removeValidation' });
        }
        if (!args.cancel) {
            this.parent.notify(cellValidation, { range: range, isRemoveValidation: true });
            if (eventArgs.isAction) {
                delete args.cancel;
                this.parent.notify(completeAction, { eventArgs: args, action: 'removeValidation' });
            }
        }
    };
    DataValidation.prototype.updateNoteIndicator = function (td, rowIndex, columnIndex) {
        var noteIndicator = td.querySelector('.e-addNoteIndicator');
        if (noteIndicator) {
            remove(noteIndicator);
            this.parent.notify(createNoteIndicator, { targetElement: td, rowIndex: rowIndex, columnIndex: columnIndex, skipEvent: true });
        }
    };
    DataValidation.prototype.keyUpHandler = function (e) {
        var target = e.target;
        var dlgEle = this.parent.element.querySelector('.e-datavalidation-dlg');
        if (closest(target, '.e-values') && dlgEle && e.keyCode !== 13) {
            var valuesCont = dlgEle.querySelector('.e-values');
            var errorEle = valuesCont.querySelector('.e-dlg-error');
            var footerCont = dlgEle.querySelector('.e-footer-content');
            var primaryBut = footerCont.querySelector('.e-primary');
            if (primaryBut.hasAttribute('disabled')) {
                primaryBut.removeAttribute('disabled');
            }
            if (errorEle) {
                valuesCont.removeChild(errorEle);
            }
        }
    };
    DataValidation.prototype.listOpen = function (e) {
        var target = e.target;
        if (this.listObj && target.classList.contains('e-cell') && target.querySelector('.e-validation-list') && this.parent.isEdit) {
            this.listObj.showPopup();
        }
    };
    DataValidation.prototype.invalidDataHandler = function (args) {
        var eventArgs = { range: '', cancel: false };
        var actionArgs;
        var action = args.isRemoveHighlight ? removeHighlight : addHighlight;
        if (!args.isPublic) {
            actionArgs = { eventArgs: eventArgs, action: action };
            this.parent.notify(beginAction, actionArgs);
            if (eventArgs.cancel) {
                return;
            }
        }
        this.parent.notify(action, { range: eventArgs.range, isAction: true });
        if (!args.isPublic) {
            actionArgs.preventAction = true;
            this.parent.notify(completeAction, actionArgs);
        }
    };
    DataValidation.prototype.listHandler = function () {
        var sheet = this.parent.getActiveSheet();
        var indexes = getCellIndexes(sheet.activeCell);
        var cell = getCell(indexes[0], indexes[1], sheet);
        var tdEle = this.parent.getCell(indexes[0], indexes[1]);
        if (!tdEle) {
            return;
        }
        this.removeListDropdownHandler(this.parent.element.getElementsByClassName('e-validation-list')[0]);
        var validation = (cell && cell.validation) || (sheet.columns && sheet.columns[indexes[1]] &&
            sheet.columns[indexes[1]].validation);
        if (validation && validation.type === 'List') {
            if (validation.address && !isInMultipleRange(validation.address, indexes[0], indexes[1])) {
                return;
            }
            this.addListValidationDropdownHandler({ cell: cell, validation: validation, td: tdEle, rowIdx: indexes[0], colIdx: indexes[1] });
        }
        if (cell && cell.validation) {
            cell.validation = validation;
        }
    };
    DataValidation.prototype.removeListDropdownHandler = function (listEle, validationArgs) {
        if (listEle) {
            if (this.listObj) {
                this.listObj.destroy();
            }
            remove(listEle);
            if (!validationArgs) {
                if (!isNullOrUndefined(this.parent.selectionModule.previousActiveCell)) {
                    var pervActiveCellIdx = getCellIndexes(this.parent.selectionModule.previousActiveCell);
                    var pervActiveCellEle = this.parent.getCell(pervActiveCellIdx[0], pervActiveCellIdx[1]);
                    if (pervActiveCellEle) {
                        this.updateNoteIndicator(pervActiveCellEle, pervActiveCellIdx[0], pervActiveCellIdx[1]);
                    }
                }
            }
            else if (validationArgs.isRefresh) {
                this.updateNoteIndicator(validationArgs.td, validationArgs.rowIdx, validationArgs.colIdx);
            }
        }
    };
    DataValidation.prototype.addListValidationDropdownHandler = function (args) {
        var _this = this;
        if (args.updatePosition) {
            this.updateTopPosition({ ddlCont: args.ddlCont, rowIdx: args.rowIdx, colIdx: args.colIdx });
            return;
        }
        var inCellDropDown = args.validation.inCellDropDown;
        if (args.isRefresh) {
            if (!args.td) {
                args.td = this.parent.getCell(args.rowIdx, args.colIdx);
                if (!args.td) {
                    return;
                }
            }
            this.removeListDropdownHandler(args.td.querySelector('.e-validation-list'), args);
            if (args.validation.type !== 'List') {
                return;
            }
            if (isNullOrUndefined(inCellDropDown)) {
                inCellDropDown = true;
            }
        }
        else {
            if (isNullOrUndefined(args.validation.ignoreBlank)) {
                args.validation.ignoreBlank = true;
            }
            if (isNullOrUndefined(inCellDropDown)) {
                inCellDropDown = args.validation.inCellDropDown = true;
            }
        }
        if (inCellDropDown) {
            var ddlCont = this.parent.createElement('div', { className: 'e-validation-list' });
            var ddlEle = this.parent.createElement('input', { id: this.parent.element.id + 'listValid' });
            ddlCont.appendChild(ddlEle);
            var isDevice_1;
            var tdEle_1 = args.td;
            var parent_1 = tdEle_1.getElementsByClassName('e-wrap-content')[0] || tdEle_1;
            this.updateTopPosition({ ddlCont: ddlCont, rowIdx: args.rowIdx, colIdx: args.colIdx });
            this.listValidationHeightHandler({ ddlCont: ddlCont });
            parent_1.insertBefore(ddlCont, parent_1.firstChild);
            var validationVal = args.validation.value1;
            if ((!args.cell || !args.cell.validation) && validationVal.startsWith('=')) {
                validationVal = getUpdatedFormula([args.rowIdx, args.colIdx, args.rowIdx, args.colIdx], [0, args.colIdx, 0, args.colIdx], this.parent.getActiveSheet(), this.parent, { formula: validationVal });
            }
            var dataSource = this.getListDataSource(validationVal);
            this.listObj = new DropDownList({
                index: this.setDropDownListIndex(dataSource, args.cell),
                dataSource: dataSource,
                fields: { text: 'text', value: 'id' },
                width: '0px',
                popupHeight: '200px',
                change: function () { return _this.listValueChange(_this.listObj.text); },
                beforeOpen: function () {
                    isDevice_1 = window.browserDetails.isDevice;
                    if (isDevice_1) {
                        window.browserDetails.isDevice = false;
                    }
                },
                open: function (args) {
                    args.popup.offsetX = _this.listObj.enableRtl ? 3 : -tdEle_1.offsetWidth + (_this.parent.enableRtl ? 4 : 24);
                    args.popup.offsetY = -(tdEle_1.querySelector('.e-control-wrapper.e-ddl').offsetHeight - 18);
                    args.popup.element.style.width = tdEle_1.offsetWidth - 1 + 'px';
                    if (isDevice_1) {
                        window.browserDetails.isDevice = true;
                    }
                },
                close: function (args) {
                    if (args.event && (args.event.keyCode === 13 ||
                        (args.event.altKey && args.event.keyCode === 38))) {
                        args.event.preventDefault();
                        args.event.stopPropagation();
                    }
                    focus(_this.parent.element);
                }
            });
            this.listObj.appendTo(ddlEle);
            this.updateNoteIndicator(tdEle_1, args.rowIdx, args.colIdx);
        }
    };
    DataValidation.prototype.updateTopPosition = function (args) {
        var sheet = this.parent.getActiveSheet();
        var cell = getCell(args.rowIdx, args.colIdx, sheet);
        if (cell && cell.style && cell.style.fontSize && parseFloat(cell.style.fontSize) > 11) {
            args.ddlCont.style.top = parseFloat(cell.style.fontSize) - 11 + "pt";
        }
        else if (args.ddlCont.style.top) {
            args.ddlCont.style.top = '';
        }
    };
    DataValidation.prototype.listValidationHeightHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        var indexes = getCellIndexes(sheet.activeCell);
        var cell = getCell(indexes[0], indexes[1], sheet);
        var validation = (cell && cell.validation) || (sheet.columns && sheet.columns[indexes[1]] &&
            sheet.columns[indexes[1]].validation);
        if (validation && validation.type === 'List') {
            if (validation.inCellDropDown) {
                var tdRowHeight = getRowHeight(sheet, indexes[0], true) - getBorderHeight(indexes[0], indexes[1], sheet);
                if (tdRowHeight <= 18) {
                    var ddlCont = args.ddlCont || this.parent.element.querySelector('.e-validation-list');
                    if (ddlCont) {
                        ddlCont.style.height = tdRowHeight + 'px';
                    }
                }
                else if (!args.ddlCont) {
                    var ddlCont = this.parent.element.querySelector('.e-validation-list');
                    if (ddlCont) {
                        ddlCont.style.removeProperty('height');
                    }
                }
            }
        }
    };
    DataValidation.prototype.setDropDownListIndex = function (dataSource, cell) {
        if (cell && !isNullOrUndefined(cell.value)) {
            var cellVal = cell.value.toString();
            var isNumVal = isNumber(cellVal);
            var numObj = isNumVal && getNumericObject(this.parent.locale);
            for (var idx = 0, len = dataSource.length; idx < len; idx++) {
                if (dataSource[idx].text === cellVal || (isNumVal &&
                    this.parseValidationValue(dataSource[idx].text, numObj).toString() === cellVal)) {
                    return idx;
                }
            }
        }
        return null;
    };
    DataValidation.prototype.getListDataSource = function (validationVal) {
        var _this = this;
        var data = [];
        var count = 0;
        var definedNames = this.parent.definedNames;
        var value = validationVal;
        var isRange = value.startsWith('=');
        if (definedNames.length > 0 && isRange) {
            var listValue = value.split('=')[1];
            for (var idx = 0, len = definedNames.length; idx < len; idx++) {
                if (definedNames[idx].name === listValue) {
                    var definedNameRange = definedNames[idx].refersTo;
                    while (definedNameRange.includes('\'')) {
                        definedNameRange = definedNameRange.replace('\'', '');
                    }
                    value = definedNameRange;
                }
            }
        }
        if (isRange) {
            var sheet = void 0;
            var address = void 0;
            var sheetName = void 0;
            var lastIndex = value.lastIndexOf('!');
            if (lastIndex > -1) {
                sheetName = value.substring(1, lastIndex);
                address = value.substring(lastIndex + 1);
                if (sheetName.startsWith('\'') && sheetName.endsWith('\'')) {
                    sheetName = sheetName.substring(1, sheetName.length - 1);
                }
                sheet = getSheet(this.parent, getSheetIndex(this.parent, sheetName));
            }
            else {
                sheet = this.parent.getActiveSheet();
                address = value.substring(1);
            }
            var activeSheet_1 = this.parent.getActiveSheet();
            if (sheet) {
                if (sheet.name !== activeSheet_1.name) {
                    var isNotLoaded_1;
                    var selectedRange_1 = getRangeIndexes(activeSheet_1.selectedRange);
                    sheet.ranges.forEach(function (range) {
                        if (!range.info || !range.info.loadedRange || !range.info.loadedRange.length) {
                            isNotLoaded_1 = true;
                            return;
                        }
                    });
                    if (isNotLoaded_1) {
                        this.parent.showSpinner();
                        getData(this.parent, sheet.name + "!" + address).then(function () {
                            _this.parent.hideSpinner();
                            if (activeSheet_1.name === _this.parent.getActiveSheet().name) {
                                var curRange = getRangeIndexes(_this.parent.getActiveSheet().selectedRange);
                                if (curRange[0] === selectedRange_1[0] && curRange[1] === selectedRange_1[1]) {
                                    var dataSource = _this.getListDataSource(validationVal);
                                    _this.listObj.dataSource = dataSource;
                                    var cell_1 = getCell(curRange[0], curRange[1], activeSheet_1);
                                    _this.listObj.index = _this.setDropDownListIndex(dataSource, cell_1);
                                    _this.listObj.dataBind();
                                }
                            }
                        });
                    }
                }
                var indexes = void 0;
                var range = address.split(':');
                if (range[0] && range[1] && ((range[0].match(/[a-z]+$/ig) && range[1].match(/[a-z]+$/ig)) ||
                    (range[0].match(/^[0-9]/g) && range[1].match(/^[0-9]/g)))) {
                    var addressInfo = this.parent.getIndexes(address);
                    if (addressInfo.isCol) {
                        indexes = [0, addressInfo.startIdx, sheet.usedRange.rowIndex, addressInfo.startIdx];
                    }
                    else {
                        indexes = [addressInfo.startIdx, 0, addressInfo.startIdx, sheet.usedRange.colIndex];
                    }
                }
                else {
                    indexes = getRangeIndexes(address);
                }
                var cell = void 0;
                for (var rowIdx = indexes[0]; rowIdx <= indexes[2]; rowIdx++) {
                    if (!sheet.rows[rowIdx]) {
                        setRow(sheet, rowIdx, {});
                    }
                    for (var colIdx = indexes[1]; colIdx <= indexes[3]; colIdx++) {
                        if (!sheet.rows[rowIdx].cells) {
                            setCell(rowIdx, colIdx, sheet, {});
                        }
                        count += 1;
                        cell = sheet.rows[rowIdx].cells[colIdx];
                        var formattedText = this.parent.getDisplayText(cell) || '';
                        data.push({ text: formattedText, id: 'list-' + count });
                    }
                }
            }
        }
        else {
            var listValues = this.getListOfValues(value);
            for (var idx = 0; idx < listValues.length; idx++) {
                count += 1;
                data.push({ text: listValues[idx], id: 'list-' + count });
            }
        }
        return data;
    };
    DataValidation.prototype.listValueChange = function (value) {
        var sheet = this.parent.getActiveSheet();
        var cellIdx = getIndexesFromAddress(sheet.activeCell);
        var cellObj = Object.assign({}, getCell(cellIdx[0], cellIdx[1], sheet));
        if (sheet.isProtected && isLocked(cellObj, getColumn(sheet, cellIdx[1]))) {
            this.parent.notify(editAlert, null);
        }
        else if (isReadOnly(cellObj, getColumn(sheet, cellIdx[1]), getRow(sheet, cellIdx[0]))) {
            this.parent.notify(readonlyAlert, null);
        }
        else {
            if (this.parent.isEdit) {
                this.parent.closeEdit();
            }
            var args = { value: value, oldValue: cellObj.value,
                address: sheet.name + '!' + sheet.activeCell, cancel: false };
            this.parent.notify(beginAction, { action: 'cellSave', eventArgs: args });
            if (args.cancel) {
                return;
            }
            var cell = { value: value, formula: '' };
            if (cellObj.format && isCustomDateTime(cellObj.format) && !isNumber(value)) {
                var formatArgs = { formattedText: value, value: value, format: 'General',
                    cell: { value: value, format: 'General' }, isEdit: true };
                this.parent.notify(getFormattedCellObject, formatArgs);
                if (formatArgs.format !== 'General' && ['Currency', 'Percentage'].indexOf(getTypeFromFormat(formatArgs.format)) > -1) {
                    cell.format = formatArgs.format;
                    cell.value = formatArgs.value;
                }
            }
            var cancelled = updateCell(this.parent, sheet, { cell: cell, rowIdx: cellIdx[0], colIdx: cellIdx[1], valChange: true, lastCell: true, checkCF: true,
                uiRefresh: true });
            if (!cancelled) {
                var cell_2 = getCell(cellIdx[0], cellIdx[1], sheet, false, true);
                delete cell_2.formula;
                this.parent.notify(formulaBarOperation, { action: 'refreshFormulabar', cell: cell_2 });
                this.parent.notify(refreshRibbonIcons, null);
                this.parent.notify(completeAction, { action: 'cellSave', eventArgs: { value: value, oldValue: cellObj.value, address: sheet.name + '!' + sheet.activeCell } });
            }
        }
    };
    DataValidation.prototype.getRange = function (range) {
        var indexes = getRangeIndexes(range);
        var sheet = this.parent.getActiveSheet();
        var maxRowCount = sheet.rowCount;
        var isColSelected;
        if (indexes[2] === maxRowCount - 1 && indexes[0] === 0) {
            range = range.replace(/[0-9]/g, '');
            isColSelected = true;
        }
        return { range: range, isColSelected: isColSelected };
    };
    DataValidation.prototype.initiateDataValidationHandler = function () {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var indexes = getRangeIndexes(sheet.selectedRange);
        var rowIdx = indexes[0];
        var colIdx = indexes[1];
        var rowIterateCondition;
        var updateRowIdx;
        if (indexes[2] >= indexes[0]) {
            rowIterateCondition = function () { return rowIdx <= indexes[2]; };
            updateRowIdx = function () { rowIdx++; };
        }
        else {
            rowIterateCondition = function () { return rowIdx >= indexes[2]; };
            updateRowIdx = function () { rowIdx--; };
        }
        var colIterateCondition;
        var updateColIdx;
        if (indexes[3] >= indexes[1]) {
            colIterateCondition = function () { return colIdx <= indexes[3]; };
            updateColIdx = function () { colIdx++; };
        }
        else {
            colIterateCondition = function () { return colIdx >= indexes[3]; };
            updateColIdx = function () { colIdx--; };
        }
        var cell;
        var moreValidation;
        var cellsWithoutValidation;
        var validation;
        var curValidation;
        var isVal1Formula;
        var isVal2Formula;
        var updateFormula = function (curIdx, prevIdx) {
            if (isVal1Formula) {
                var updatedFormula = getUpdatedFormula(curIdx, prevIdx, sheet, _this.parent, { formula: validation.value1 });
                if (!updatedFormula.includes('#REF!')) {
                    validation.value1 = updatedFormula;
                }
            }
            if (isVal2Formula) {
                var updatedFormula = getUpdatedFormula(curIdx, prevIdx, sheet, _this.parent, { formula: validation.value2 });
                if (!updatedFormula.includes('#REF!')) {
                    validation.value2 = updatedFormula;
                }
            }
        };
        for (rowIdx; rowIterateCondition(); updateRowIdx()) {
            for (colIdx; colIterateCondition(); updateColIdx()) {
                cell = getCell(rowIdx, colIdx, sheet, false, true);
                curValidation = cell.validation || (checkColumnValidation(sheet.columns[colIdx], rowIdx, colIdx) &&
                    sheet.columns[colIdx].validation);
                if (curValidation) {
                    if (validation) {
                        if (curValidation.type !== validation.type || curValidation.operator !== validation.operator ||
                            ((!isVal1Formula || !checkIsFormula(curValidation.value1)) && curValidation.value1 !== validation.value1) ||
                            ((!isVal2Formula || !checkIsFormula(curValidation.value2)) && curValidation.value2 !== validation.value2)) {
                            moreValidation = true;
                            break;
                        }
                    }
                    else {
                        validation = Object.assign({}, curValidation);
                        isVal1Formula = checkIsFormula(validation.value1);
                        isVal2Formula = checkIsFormula(validation.value2);
                        if (!cell.validation) {
                            updateFormula([rowIdx, colIdx, rowIdx, colIdx], [0, colIdx, 0, colIdx]);
                        }
                        var actIdxes = getRangeIndexes(sheet.activeCell);
                        if (rowIdx !== actIdxes[0] || colIdx !== actIdxes[1]) {
                            updateFormula(actIdxes, [rowIdx, colIdx, rowIdx, colIdx]);
                        }
                    }
                }
                else {
                    cellsWithoutValidation = true;
                }
            }
            colIdx = indexes[1];
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var validationDialogHandler = function (validation) {
            if (!_this.parent.element.querySelector('.e-datavalidation-dlg')) {
                var range_1 = _this.getRange(sheet.selectedRange).range;
                dialogInst.show({
                    width: 375, showCloseIcon: true, isModal: true, cssClass: 'e-datavalidation-dlg',
                    header: l10n.getConstant('DataValidation'),
                    beforeOpen: function (args) {
                        var dlgArgs = { dialogName: 'ValidationDialog', element: args.element,
                            target: args.target, cancel: args.cancel };
                        _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                        if (dlgArgs.cancel) {
                            args.cancel = true;
                        }
                        else {
                            dialogInst.dialogInstance.content = _this.dataValidationContent(l10n, range_1, validation);
                            dialogInst.dialogInstance.dataBind();
                            focus(_this.parent.element);
                        }
                    },
                    beforeClose: _this.dialogBeforeClose.bind(_this),
                    buttons: [{
                            buttonModel: {
                                content: l10n.getConstant('ClearAll'),
                                cssClass: 'e-btn e-clearall-btn e-flat'
                            },
                            click: function () {
                                dialogInst.dialogInstance.content = _this.dataValidationContent(l10n, range_1);
                                dialogInst.dialogInstance.dataBind();
                            }
                        },
                        {
                            buttonModel: { content: l10n.getConstant('Apply'), isPrimary: true },
                            click: function () {
                                _this.dlgClickHandler(dialogInst);
                            }
                        }]
                });
            }
        };
        if (moreValidation || (validation && cellsWithoutValidation)) {
            var dialogName_1;
            var btns = [{
                    buttonModel: { isPrimary: true, cssClass: 'e-btn-goto-ok' },
                    click: function () {
                        dialogInst.hide(true);
                        validationDialogHandler();
                    }
                }];
            if (moreValidation) {
                dialogName_1 = 'MoreValidation';
                btns[0].buttonModel.content = l10n.getConstant('Ok');
            }
            else {
                dialogName_1 = 'ExtendValidation';
                btns[0].buttonModel.content = l10n.getConstant('No');
                btns.splice(0, 0, {
                    buttonModel: {
                        content: l10n.getConstant('Yes'), isPrimary: true, cssClass: 'e-btn-goto-ok'
                    },
                    click: function () {
                        dialogInst.hide(true);
                        validationDialogHandler(validation);
                    }
                });
            }
            var dialogContent_1 = l10n.getConstant(dialogName_1);
            var dlg = {
                width: 350, isModal: true, showCloseIcon: true, cssClass: 'e-goto-dlg', header: l10n.getConstant('Spreadsheet'),
                content: dialogContent_1,
                beforeOpen: function (args) {
                    var dlgArgs = { dialogName: dialogName_1, element: args.element, target: args.target,
                        cancel: args.cancel, content: dialogContent_1 };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                    else {
                        if (dlgArgs.content !== dialogContent_1) {
                            dialogInst.dialogInstance.content = dlgArgs.content;
                            dialogInst.dialogInstance.dataBind();
                        }
                        focus(_this.parent.element);
                    }
                },
                buttons: btns
            };
            dialogInst.show(dlg);
        }
        else {
            validationDialogHandler(validation);
        }
    };
    DataValidation.prototype.dataValidationContent = function (l10n, range, validation) {
        var _this = this;
        var value1;
        var value2;
        var type;
        var isNew = !validation;
        var operator;
        var ignoreBlank;
        if (isNew) {
            value1 = value2 = '0';
            ignoreBlank = true;
        }
        else {
            var val1 = validation.value1;
            var val2 = validation.value2;
            type = validation.type;
            operator = validation.operator;
            ignoreBlank = validation.ignoreBlank === false ? false : true;
            if (type === 'Date' || type === 'Time') {
                var getFormattedDate = function (val) {
                    if (isNumber(val)) {
                        var args = { cell: { value: val }, type: type.toLowerCase(),
                            value: val };
                        _this.parent.notify(getFormattedBarText, args);
                        return args.value;
                    }
                    return val;
                };
                value1 = getFormattedDate(val1);
                value2 = getFormattedDate(val2);
            }
            else {
                var getFormattedValue = function (val) {
                    if (isNumber(val)) {
                        val = val.toString();
                        var localeObj = getNumericObject(_this.parent.locale);
                        if (localeObj.decimal !== '.' && val.includes('.')) {
                            val = val.replace('.', localeObj.decimal);
                        }
                    }
                    return val;
                };
                value1 = getFormattedValue(val1);
                value2 = getFormattedValue(val2);
            }
        }
        var dlgContent = this.parent.createElement('div', { className: 'e-validation-dlg' });
        var cellRangeCont = this.parent.createElement('div', { className: 'e-cellrange' });
        var allowDataCont = this.parent.createElement('div', { className: 'e-allowdata' });
        var valuesCont = this.parent.createElement('div', { className: 'e-values' });
        var ignoreBlankCont = this.parent.createElement('div', { className: 'e-ignoreblank' });
        this.divElements.push(dlgContent);
        this.divElements.push(cellRangeCont);
        this.divElements.push(allowDataCont);
        this.divElements.push(valuesCont);
        this.divElements.push(ignoreBlankCont);
        dlgContent.appendChild(cellRangeCont);
        dlgContent.appendChild(allowDataCont);
        dlgContent.appendChild(valuesCont);
        dlgContent.appendChild(ignoreBlankCont);
        var cellRangeText = this.parent.createElement('span', { className: 'e-header' });
        cellRangeText.innerText = l10n.getConstant('CellRange');
        var cellRangeEle = this.parent.createElement('input', {
            className: 'e-input',
            attrs: { value: range, 'aria-label': l10n.getConstant('CellRange') }
        });
        cellRangeCont.appendChild(cellRangeText);
        cellRangeCont.appendChild(cellRangeEle);
        var allowCont = this.parent.createElement('div', { className: 'e-allow' });
        var dataCont = this.parent.createElement('div', { className: 'e-data' });
        allowDataCont.appendChild(allowCont);
        allowDataCont.appendChild(dataCont);
        var allowText = this.parent.createElement('span', { className: 'e-header' });
        allowText.innerText = l10n.getConstant('Allow');
        this.typeData = [
            { text: l10n.getConstant('WholeNumber'), id: 'type-1' },
            { text: l10n.getConstant('Decimal'), id: 'type-2' },
            { text: l10n.getConstant('Date'), id: 'type-3' },
            { text: l10n.getConstant('Time'), id: 'type-4' },
            { text: l10n.getConstant('TextLength'), id: 'type-5' },
            { text: l10n.getConstant('List'), id: 'type-6' },
            { text: l10n.getConstant('Custom'), id: 'type-7' }
        ];
        this.operatorData = [
            { text: l10n.getConstant('Between'), id: 'operator-1' },
            { text: l10n.getConstant('NotBetween'), id: 'operator-2' },
            { text: l10n.getConstant('EqualTo'), id: 'operator-3' },
            { text: l10n.getConstant('NotEqualTo'), id: 'operator-4' },
            { text: l10n.getConstant('GreaterThan'), id: 'operator-5' },
            { text: l10n.getConstant('LessThan'), id: 'operator-6' },
            { text: l10n.getConstant('GreaterThanOrEqualTo'), id: 'operator-7' },
            { text: l10n.getConstant('LessThanOrEqualTo'), id: 'operator-8' }
        ];
        var allowSelectEle = this.parent.createElement('input', { className: 'e-select' });
        this.spanElements.push(cellRangeText);
        this.inputElements.push(cellRangeEle);
        this.divElements.push(allowCont);
        this.divElements.push(dataCont);
        this.spanElements.push(allowText);
        this.inputElements.push(allowSelectEle);
        var allowIdx = 0;
        if (!isNew) {
            if (type) {
                type = this.formattedType(type);
            }
            for (var idx = 0; idx < this.typeData.length; idx++) {
                if (type === this.formattedType(this.typeData[idx].text)) {
                    allowIdx = idx;
                    break;
                }
            }
        }
        if (isNew || (type !== 'List' && type !== 'Custom')) {
            var dataIdx = 0;
            var dataText = this.parent.createElement('span', { className: 'e-header' });
            dataText.innerText = l10n.getConstant('Data');
            var dataSelectEle = this.parent.createElement('input', { className: 'e-select' });
            if (!isNew) {
                for (var idx = 0; idx < this.operatorData.length; idx++) {
                    if (operator === this.formattedValue(this.operatorData[idx].text)) {
                        dataIdx = idx;
                        break;
                    }
                }
            }
            dataCont.appendChild(dataText);
            dataCont.appendChild(dataSelectEle);
            this.spanElements.push(dataText);
            this.inputElements.push(dataSelectEle);
            this.dataList = new DropDownList({
                dataSource: this.operatorData,
                index: dataIdx,
                popupHeight: '200px',
                change: this.userInput.bind(this)
            });
            this.dropDownListElements.push(this.dataList);
            this.dataList.appendTo(dataSelectEle);
        }
        else if (type !== 'Custom') {
            var ignoreBlankEle_1 = this.parent.createElement('input', { className: 'e-checkbox' });
            dataCont.appendChild(ignoreBlankEle_1);
            var ignoreBlankObj_1 = new CheckBox({ label: l10n.getConstant('InCellDropDown'), checked: validation.inCellDropDown === false ? false : true });
            this.checkBoxElements.push(ignoreBlankObj_1);
            ignoreBlankObj_1.appendTo(ignoreBlankEle_1);
            this.inputElements.push(ignoreBlankEle_1);
        }
        allowCont.appendChild(allowText);
        allowCont.appendChild(allowSelectEle);
        this.typeList = new DropDownList({
            dataSource: this.typeData,
            index: allowIdx,
            popupHeight: '200px',
            change: this.userInput.bind(this)
        });
        this.dropDownListElements.push(this.typeList);
        this.typeList.appendTo(allowSelectEle);
        var createContEle = function (labelKey, value) {
            var valueText = _this.parent.createElement('span', { className: 'e-header' });
            valueText.innerText = labelKey;
            var valueEle = _this.parent.createElement('input', { className: 'e-input', attrs: { value: value } });
            valuesCont.appendChild(valueText);
            valuesCont.appendChild(valueEle);
            _this.spanElements.push(valueText);
            _this.inputElements.push(valueEle);
        };
        if (isNew || ((this.typeList.value !== l10n.getConstant('List') && this.typeList.value !== l10n.getConstant('Custom')) &&
            (this.dataList.value === l10n.getConstant('Between') || this.dataList.value === l10n.getConstant('NotBetween')))) {
            var minimumCont = this.parent.createElement('div', { className: 'e-minimum' });
            var maximumCont = this.parent.createElement('div', { className: 'e-maximum' });
            valuesCont.appendChild(minimumCont);
            valuesCont.appendChild(maximumCont);
            var minimumText = this.parent.createElement('span', { className: 'e-header' });
            minimumText.innerText = l10n.getConstant('Minimum');
            var maximumText = this.parent.createElement('span', { className: 'e-header' });
            maximumText.innerText = l10n.getConstant('Maximum');
            var minimumInp = this.parent.createElement('input', {
                id: 'minvalue',
                className: 'e-input', attrs: { value: value1, 'aria-label': l10n.getConstant('Minimum') }
            });
            var maximumInp = this.parent.createElement('input', {
                id: 'maxvalue',
                className: 'e-input', attrs: { value: value2, 'aria-label': l10n.getConstant('Maximum') }
            });
            minimumCont.appendChild(minimumText);
            minimumCont.appendChild(minimumInp);
            maximumCont.appendChild(maximumText);
            maximumCont.appendChild(maximumInp);
            this.divElements.push(minimumCont);
            this.divElements.push(maximumCont);
            this.spanElements.push(minimumText);
            this.spanElements.push(maximumText);
            this.inputElements.push(minimumInp);
            this.inputElements.push(maximumInp);
            var numericMin = new NumericTextBox({
                value: 0
            });
            this.numericTextBoxElements.push(numericMin);
            numericMin.appendTo('#minvalue');
            var numericMax = new NumericTextBox({
                value: 0
            });
            this.numericTextBoxElements.push(numericMax);
            numericMax.appendTo('#maxvalue');
        }
        else if (!isNew && type === 'List') {
            createContEle(l10n.getConstant('Sources'), value1);
        }
        else if (!isNew && type === 'Custom') {
            createContEle(l10n.getConstant('Formula'), value1);
        }
        else {
            createContEle(l10n.getConstant('Value'), value1);
        }
        var ignoreBlankEle = this.parent.createElement('input', { className: 'e-checkbox' });
        ignoreBlankCont.appendChild(ignoreBlankEle);
        var ignoreBlankObj = new CheckBox({ label: l10n.getConstant('IgnoreBlank'), checked: ignoreBlank });
        this.checkBoxElements.push(ignoreBlankObj);
        ignoreBlankObj.appendTo(ignoreBlankEle);
        this.inputElements.push(ignoreBlankEle);
        return dlgContent;
    };
    DataValidation.prototype.dialogBeforeClose = function () {
        this.checkBoxElements.forEach(function (checkbox) {
            if (checkbox && checkbox.element) {
                checkbox.destroy();
                checkbox.element.remove();
            }
        });
        this.checkBoxElements = [];
        this.numericTextBoxElements.forEach(function (numericTextBox) {
            if (numericTextBox && numericTextBox.element) {
                numericTextBox.destroy();
                numericTextBox.element.remove();
            }
        });
        this.numericTextBoxElements = [];
        this.dropDownListElements.forEach(function (dropDownList) {
            if (dropDownList && dropDownList.element) {
                dropDownList.destroy();
                dropDownList.element.remove();
            }
        });
        this.dropDownListElements = [];
        removeElements(this.spanElements);
        this.spanElements = [];
        removeElements(this.inputElements);
        this.inputElements = [];
        removeElements(this.divElements);
        this.divElements = [];
    };
    DataValidation.prototype.userInput = function () {
        var listObj = this.typeList;
        var listObj1 = this.dataList;
        var dlgEle = this.parent.element.querySelector('.e-datavalidation-dlg');
        var dlgCont = dlgEle.querySelector('.e-validation-dlg');
        var allowDataCont = dlgCont.querySelector('.e-allowdata');
        var valuesCont = dlgCont.querySelector('.e-values');
        var l10n = this.parent.serviceLocator.getService(locale);
        var dataCont = allowDataCont.querySelector('.e-data');
        var clearChildEle = function (element) {
            while (element.lastChild) {
                element.removeChild(element.lastChild);
            }
        };
        clearChildEle(valuesCont);
        if (listObj.value === l10n.getConstant('List')) {
            clearChildEle(dataCont);
            var cellDropDownEle = this.parent.createElement('input', { className: 'e-checkbox' });
            this.inputElements.push(cellDropDownEle);
            dataCont.appendChild(cellDropDownEle);
            var cellDropDownOhj = new CheckBox({ label: l10n.getConstant('InCellDropDown'), checked: true });
            this.checkBoxElements.push(cellDropDownOhj);
            cellDropDownOhj.appendTo(cellDropDownEle);
        }
        else if (listObj.value === l10n.getConstant('Custom')) {
            clearChildEle(dataCont);
        }
        else if (!dataCont.childElementCount || dataCont.getElementsByClassName('e-checkbox-wrapper')[0]) {
            clearChildEle(dataCont);
            var dataText = this.parent.createElement('span', { className: 'e-header' });
            dataText.innerText = l10n.getConstant('Data');
            var dataSelectEle = this.parent.createElement('input', { className: 'e-select' });
            this.spanElements.push(dataText);
            this.inputElements.push(dataSelectEle);
            dataCont.appendChild(dataText);
            dataCont.appendChild(dataSelectEle);
            listObj1.appendTo(dataSelectEle);
        }
        if ((listObj.value !== l10n.getConstant('List') && listObj.value !== l10n.getConstant('Custom')) && (listObj1.value === l10n.getConstant('Between') || listObj1.value === l10n.getConstant('NotBetween'))) {
            var minimumCont = this.parent.createElement('div', { className: 'e-minimum' });
            var maximumCont = this.parent.createElement('div', { className: 'e-maximum' });
            this.divElements.push(minimumCont);
            this.divElements.push(maximumCont);
            valuesCont.appendChild(minimumCont);
            valuesCont.appendChild(maximumCont);
            var minimumText = this.parent.createElement('span', { className: 'e-header' });
            minimumText.innerText = l10n.getConstant('Minimum');
            var maximumText = this.parent.createElement('span', { className: 'e-header' });
            maximumText.innerText = l10n.getConstant('Maximum');
            var minimumInp = this.parent.createElement('input', { id: 'min', className: 'e-input', attrs: { value: '0' } });
            var maximumInp = this.parent.createElement('input', { id: 'max', className: 'e-input', attrs: { value: '0' } });
            this.spanElements.push(minimumText);
            this.spanElements.push(maximumText);
            this.inputElements.push(minimumInp);
            this.inputElements.push(maximumInp);
            var numericMin = new NumericTextBox({
                value: 0
            });
            this.numericTextBoxElements.push(numericMin);
            numericMin.appendTo('min');
            var numericMax = new NumericTextBox({
                value: 0
            });
            this.numericTextBoxElements.push(numericMax);
            numericMax.appendTo('max');
            minimumCont.appendChild(minimumText);
            minimumCont.appendChild(minimumInp);
            maximumCont.appendChild(maximumText);
            maximumCont.appendChild(maximumInp);
        }
        else {
            var valueText = this.parent.createElement('span', { className: 'e-header' });
            valueText.innerText = listObj.value === l10n.getConstant('List') ? l10n.getConstant('Sources') :
                listObj.value === l10n.getConstant('Custom') ? l10n.getConstant('Formula') : l10n.getConstant('Value');
            var valueEle = listObj.value === l10n.getConstant('List') ? this.parent.createElement('input', {
                className: 'e-input',
                attrs: { placeholder: 'Enter value' }
            }) :
                this.parent.createElement('input', { className: 'e-input', attrs: { value: '0' } });
            this.spanElements.push(valueText);
            this.inputElements.push(valueEle);
            valuesCont.appendChild(valueText);
            valuesCont.appendChild(valueEle);
        }
    };
    DataValidation.prototype.dlgClickHandler = function (dialogInst) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var errorMsg;
        var dlgEle = this.parent.element.querySelector('.e-datavalidation-dlg');
        var dlgFooter = dlgEle.querySelector('.e-footer-content');
        var dlgContEle = dlgEle.getElementsByClassName('e-dlg-content')[0].
            getElementsByClassName('e-validation-dlg')[0];
        var allowData = dlgContEle.getElementsByClassName('e-allowdata')[0];
        var allowEle = allowData.getElementsByClassName('e-allow')[0].getElementsByTagName('input')[0];
        var dataEle = allowData.getElementsByClassName('e-data')[0].getElementsByTagName('input')[0];
        var values = dlgContEle.getElementsByClassName('e-values')[0];
        var valueArr = [];
        valueArr[0] = values.getElementsByTagName('input')[0].value;
        valueArr[1] = values.getElementsByTagName('input')[1] ? values.getElementsByTagName('input')[1].value : '';
        var type = this.formattedType(allowEle.value);
        var isValid = true;
        var ignoreBlank = dlgContEle.querySelector('.e-ignoreblank .e-checkbox').checked;
        var inCellDropDown = allowData.querySelector('.e-data').querySelector('.e-checkbox-wrapper') ?
            allowData.querySelector('.e-data').querySelector('.e-checkbox-wrapper').querySelector('.e-check') ? true : false : null;
        var range = dlgContEle.querySelector('.e-cellrange').getElementsByTagName('input')[0].value;
        var operator;
        if (dataEle) {
            operator = this.formattedValue(dataEle.value);
        }
        var valArr = [];
        if (type === 'List') {
            if (valueArr[0] !== '') {
                valArr.push(valueArr[0]);
            }
            if (valueArr[0].startsWith('=')) {
                var address_1 = valueArr[0].substring(1);
                var definedName = this.parent.definedNames.find(function (item) { return item.name === address_1; });
                if (definedName) {
                    address_1 = definedName.refersTo.substring(1);
                }
                var isSheetNameValid = void 0;
                var sheetTokenIdx = void 0;
                if (address_1.includes('!')) {
                    sheetTokenIdx = address_1.lastIndexOf('!');
                    var sheetName = address_1.substring(0, sheetTokenIdx);
                    address_1 = address_1.substring(sheetTokenIdx + 1);
                    if (sheetName.startsWith('\'') && sheetName.endsWith('\'')) {
                        sheetName = sheetName.substring(1, sheetName.length - 1);
                    }
                    isSheetNameValid = getSheetIndex(this.parent, sheetName) > -1;
                    if (!definedName) {
                        valArr[0] = '=' + sheetName + '!' + address_1;
                    }
                }
                else {
                    isSheetNameValid = true;
                }
                if (!address_1.includes(':') && isCellReference(address_1)) {
                    address_1 = address_1 + ":" + address_1;
                }
                var isSingleRowOrCol = void 0;
                if (isSheetNameValid) {
                    var cellRef = address_1.split(':');
                    if (cellRef.length === 2) {
                        isSingleRowOrCol = address_1.match(/[a-z]/gi) && cellRef[0].replace(/[0-9]/g, '') === cellRef[1].replace(/[0-9]/g, '')
                            || address_1.match(/\d/g) && cellRef[0].replace(/\D/g, '') === cellRef[1].replace(/\D/g, '');
                    }
                }
                isValid = isSingleRowOrCol;
                if (!isValid) {
                    errorMsg = !definedName && sheetTokenIdx === undefined && !address_1.includes(':') ?
                        l10n.getConstant('NamedRangeError') : l10n.getConstant('DialogError');
                }
            }
            else if (valueArr[0].length > 256) {
                isValid = false;
                errorMsg = l10n.getConstant('ListLengthError');
            }
        }
        else {
            var numObj_1 = getNumericObject(this.parent.locale);
            if (type === 'Decimal' && numObj_1.decimal !== '.') {
                var isNotCulturedNumber = function (val) { return isNumber(val) && val.includes('.') &&
                    (numObj_1.group !== '.' || !parseThousandSeparator(val, _this.parent.locale, numObj_1.group, numObj_1.decimal)); };
                if (isNotCulturedNumber(valueArr[0]) || isNotCulturedNumber(valueArr[1])) {
                    isValid = false;
                    errorMsg = l10n.getConstant('InvalidNumberError');
                }
            }
            parseLocaleNumber(valueArr, this.parent, numObj_1);
            if (valueArr[0] !== '') {
                valArr.push(valueArr[0]);
            }
            if (valueArr[1] !== '') {
                valArr.push(valueArr[1]);
            }
        }
        if (isValid) {
            var sheet = this.parent.getActiveSheet();
            var validDlg = this.isDialogValidator(valArr, type, operator);
            if (operator === 'Between' && validDlg.isValid && !isNaN(parseFloat(valArr[0])) && !isNaN(parseFloat(valArr[1])) &&
                parseFloat(valArr[0]) > parseFloat(valArr[1])) {
                validDlg.isValid = false;
                validDlg.errorMsg = l10n.getConstant('MinMaxError');
            }
            if (type === 'Custom') {
                if (checkIsFormula(valArr[0])) {
                    var errorStrings = ['#N/A', '#VALUE!', '#REF!', '#DIV/0!', '#NUM!', '#NAME?', '#NULL!', '#CALC!'];
                    var eventArgs = { value: valArr[0] };
                    this.parent.notify(commputeFormulaValue, eventArgs);
                    var customValue = eventArgs.value;
                    if (errorStrings.indexOf(customValue) > -1) {
                        validDlg.isValid = false;
                        validDlg.errorMsg = l10n.getConstant('InvalidFormula');
                    }
                }
            }
            errorMsg = validDlg.errorMsg;
            isValid = validDlg.isValid;
            if (isValid) {
                if (isReadOnlyCells(this.parent, getSwapRange(getRangeIndexes(range)))) {
                    dialogInst.hide(true);
                    this.parent.notify(readonlyAlert, null);
                    return;
                }
                var args = { range: sheet.name + '!' + range, value1: valArr[0], value2: valArr[1] || '',
                    ignoreBlank: ignoreBlank, type: type, operator: operator, inCellDropDown: inCellDropDown, cancel: false };
                this.parent.notify(beginAction, { eventArgs: args, action: 'validation' });
                if (!args.cancel) {
                    this.parent.notify(cellValidation, { rules: { type: args.type, operator: args.operator, value1: args.value1, value2: args.value2,
                            ignoreBlank: args.ignoreBlank, inCellDropDown: args.inCellDropDown }, range: args.range, isAction: true });
                    delete args.cancel;
                    if (!this.parent.element.getElementsByClassName('e-validation-error-dlg')[0]) {
                        if (dialogInst.dialogInstance) {
                            dialogInst.dialogInstance.hide();
                        }
                        else {
                            dialogInst.hide();
                        }
                    }
                    this.parent.notify(completeAction, { eventArgs: args, action: 'validation' });
                }
            }
        }
        if (!isValid) {
            var errorEle = this.parent.createElement('div', { className: 'e-dlg-error', id: 'e-invalid' });
            errorEle.innerText = errorMsg;
            values.appendChild(errorEle);
            dlgFooter.querySelector('.e-primary').setAttribute('disabled', 'true');
        }
    };
    DataValidation.prototype.formattedValue = function (value) {
        var l10n = this.parent.serviceLocator.getService(locale);
        switch (value) {
            case l10n.getConstant('Between'):
                value = 'Between';
                break;
            case l10n.getConstant('NotBetween'):
                value = 'NotBetween';
                break;
            case l10n.getConstant('EqualTo'):
                value = 'EqualTo';
                break;
            case l10n.getConstant('NotEqualTo'):
                value = 'NotEqualTo';
                break;
            case l10n.getConstant('GreaterThan'):
                value = 'GreaterThan';
                break;
            case l10n.getConstant('LessThan'):
                value = 'LessThan';
                break;
            case l10n.getConstant('GreaterThanOrEqualTo'):
                value = 'GreaterThanOrEqualTo';
                break;
            case l10n.getConstant('LessThanOrEqualTo'):
                value = 'LessThanOrEqualTo';
                break;
            default:
                value = 'Between';
                break;
        }
        return value;
    };
    DataValidation.prototype.formattedType = function (value) {
        var l10n = this.parent.serviceLocator.getService(locale);
        switch (value) {
            case l10n.getConstant('WholeNumber'):
                value = 'WholeNumber';
                break;
            case l10n.getConstant('Decimal'):
                value = 'Decimal';
                break;
            case l10n.getConstant('Date'):
                value = 'Date';
                break;
            case l10n.getConstant('TextLength'):
                value = 'TextLength';
                break;
            case l10n.getConstant('List'):
                value = 'List';
                break;
            case l10n.getConstant('Time'):
                value = 'Time';
                break;
            case l10n.getConstant('Custom'):
                value = 'Custom';
                break;
        }
        return value;
    };
    DataValidation.prototype.isDialogValidator = function (values, type, operator) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var count = 0;
        var isEmpty = false;
        var formValidation;
        if (type === 'List') {
            isEmpty = values.length > 0 ? false : true;
        }
        else {
            if (operator === 'Between' || operator === 'NotBetween') {
                isEmpty = values.length === 2 ? false : true;
            }
            else {
                isEmpty = values.length > 0 ? false : true;
            }
        }
        if (!isEmpty) {
            var value = void 0;
            for (var idx = 0; idx < values.length; idx++) {
                if (checkIsFormula(values[idx])) {
                    var eventArgs = { value: values[idx] };
                    this.parent.notify(commputeFormulaValue, eventArgs);
                    value = eventArgs.value;
                }
                else if (type === 'Date' || type === 'Time') {
                    value = values[idx] = this.getDateAsNumber({ range: [], cell: { value: values[idx] } }, values[idx]);
                }
                else {
                    value = values[idx];
                }
                formValidation = this.formatValidation(value, type, true);
                if (formValidation.isValid) {
                    count = count + 1;
                }
                else {
                    break;
                }
            }
            formValidation.isValid = count === values.length;
            return formValidation;
        }
        else {
            return { isValid: false, errorMsg: l10n.getConstant('EmptyError') };
        }
    };
    DataValidation.prototype.getDateAsNumber = function (args, cellValue) {
        var dateEventArgs = { value: cellValue, rowIndex: args.range[0], cell: args.cell,
            colIndex: args.range[1], sheetIndex: args.sheetIdx, updatedVal: '' };
        this.parent.notify(checkDateFormat, dateEventArgs);
        return dateEventArgs.updatedVal || cellValue;
    };
    DataValidation.prototype.getListOfValues = function (listValue) {
        var listValArr;
        if (this.parent.listSeparator !== ',' && listValue.includes(this.parent.listSeparator)) {
            listValArr = listValue.split(this.parent.listSeparator);
        }
        else {
            listValArr = listValue.split(',');
        }
        return listValArr;
    };
    DataValidation.prototype.checkValidationHandler = function (args, validation) {
        var enterValue = args.value.toString();
        var sheet = this.parent.sheets[args.sheetIdx];
        var cell = getCell(args.range[0], args.range[1], sheet, null, true);
        var value1 = validation.value1;
        var value2 = validation.value2;
        if (!cell.validation) {
            var currIdx = args.range;
            var prevIdx = [0, args.range[1], 0, args.range[3]];
            if (checkIsFormula(value1)) {
                value1 = getUpdatedFormula(currIdx, prevIdx, sheet, this.parent, { formula: value1 });
            }
            if (checkIsFormula(value2)) {
                value2 = getUpdatedFormula(currIdx, prevIdx, sheet, this.parent, { formula: value2 });
            }
        }
        if (validation.type !== 'List') {
            if (checkIsFormula(value1)) {
                var eventArgs1 = { value: value1 };
                this.parent.notify(commputeFormulaValue, eventArgs1);
                value1 = eventArgs1.value;
            }
            if (checkIsFormula(value2)) {
                var eventArgs2 = { value: value2 };
                this.parent.notify(commputeFormulaValue, eventArgs2);
                value2 = eventArgs2.value;
            }
            if (checkIsFormula(args.value)) {
                var eventArgs = { value: args.value };
                this.parent.notify(commputeFormulaValue, eventArgs);
                args.value = eventArgs.value;
            }
        }
        var value = args.value;
        var opt = validation.operator || 'Between';
        var type = validation.type || 'WholeNumber';
        var ignoreBlank = isNullOrUndefined(validation.ignoreBlank) ? true : validation.ignoreBlank;
        if (ignoreBlank && enterValue === '') {
            return true;
        }
        else {
            var isDateTimeType = type === 'Date' || type === 'Time';
            if (args.value) {
                if (isDateTimeType || validation.type === 'TextLength') {
                    if (!isNumber(args.value)) {
                        value = args.value = this.getDateAsNumber(args, args.value);
                    }
                }
                else {
                    var numObj = args.isEdit && getNumericObject(this.parent.locale);
                    var numVal = this.parseValidationValue(args.value, numObj);
                    if (numVal !== args.value && isNumber(numVal)) {
                        value = args.value = numVal.toString();
                    }
                }
            }
            var isValid = this.formatValidation(args.value, type).isValid;
            if (isValid) {
                isValid = false;
                if (isDateTimeType) {
                    if (value1 && !isNumber(value1)) {
                        value1 = this.getDateAsNumber(args, value1);
                    }
                    if (value2 && !isNumber(value2)) {
                        value2 = this.getDateAsNumber(args, value2);
                    }
                }
                else if (validation.type === 'TextLength') {
                    value = args.value.toString().length.toString();
                }
                if (type === 'List') {
                    var val = args.value.toString();
                    var isNumVal = isNumber(val);
                    var numObj = isNumVal && getNumericObject(this.parent.locale);
                    if (value1.startsWith('=')) {
                        var listVal = void 0;
                        var data = this.getListDataSource(value1);
                        for (var idx = 0; idx < data.length; idx++) {
                            listVal = data[idx].text.toString();
                            if (enterValue === listVal || val === listVal || (isNumVal &&
                                val === this.parseValidationValue(listVal, numObj).toString())) {
                                isValid = true;
                                break;
                            }
                        }
                    }
                    else {
                        var listValues = this.getListOfValues(value1);
                        for (var idx = 0; idx < listValues.length; idx++) {
                            if (enterValue === listValues[idx] || val === listValues[idx] || (isNumVal &&
                                val === this.parseValidationValue(listValues[idx], numObj).toString())) {
                                isValid = true;
                                break;
                            }
                        }
                    }
                    if (!isValid && ignoreBlank && val === '') {
                        isValid = true;
                    }
                }
                else if (type === 'Custom') {
                    var numVal = parseFloat(value1.toString());
                    if (isNumber(numVal)) {
                        if (numVal === 0) {
                            var cellRefVal = { value: validation.value1 };
                            this.parent.notify(getCellRefValue, cellRefVal); // To consider empty cell references cases.
                            isValid = cellRefVal.value !== '' ? false : true;
                        }
                        else {
                            isValid = true;
                        }
                    }
                    else if (value1.toUpperCase() === 'TRUE') {
                        isValid = true;
                    }
                    else {
                        isValid = false;
                    }
                    if (!isValid && ignoreBlank && value1 === '') {
                        isValid = true;
                    }
                }
                else {
                    if (type === 'Decimal' || type === 'Time') {
                        value = parseFloat(value.toString());
                        value1 = parseFloat(value1.toString());
                        value2 = value2 ? parseFloat(value2.toString()) : null;
                    }
                    else {
                        value = parseInt(value.toString(), 10);
                        value1 = parseInt(value1.toString(), 10);
                        value2 = value2 ? parseInt(value2.toString(), 10) : null;
                    }
                    switch (opt) {
                        case 'EqualTo':
                            isValid = value === value1;
                            break;
                        case 'NotEqualTo':
                            isValid = value !== value1;
                            break;
                        case 'Between':
                            isValid = value >= value1 && value <= value2;
                            break;
                        case 'NotBetween':
                            isValid = !(value >= value1 && value <= value2);
                            break;
                        case 'GreaterThan':
                            isValid = value > value1;
                            break;
                        case 'LessThan':
                            isValid = value < value1;
                            break;
                        case 'GreaterThanOrEqualTo':
                            isValid = value >= value1;
                            break;
                        case 'LessThanOrEqualTo':
                            isValid = value <= value1;
                            break;
                    }
                }
            }
            return isValid;
        }
    };
    DataValidation.prototype.parseValidationValue = function (val, numObj) {
        if (isNumber(val)) {
            if (numObj && numObj.group === '.') {
                val = val.toString();
                if (val.indexOf('.') && parseThousandSeparator(val, this.parent.locale, numObj.group, numObj.decimal)) {
                    val = val.split(numObj.group).join('');
                }
            }
            return val;
        }
        var formatArgs = { formattedText: val, value: val, format: 'General', cell: { value: val, format: 'General' },
            isEdit: !!numObj };
        this.parent.notify(getFormattedCellObject, formatArgs);
        return formatArgs.value;
    };
    DataValidation.prototype.isValidCellHandler = function (args) {
        var sheet = this.parent.sheets[args.sheetIdx];
        var cell = getCell(args.range[0], args.range[1], sheet);
        var formulaArgs = { skip: false, value: '' };
        var validation = cell && cell.validation;
        if (validation) {
            if (checkIsFormula(validation.value1) && !isCellReference(validation.value1.substring(1, validation.value1.length)) &&
                validation.value1.indexOf('(') > -1) {
                var val = validation.value1;
                val = val.substring(val.indexOf('=') + 1, val.indexOf('('));
                formulaArgs.value = val.toUpperCase();
                this.parent.notify(formulaInValidation, formulaArgs);
            }
            if (!formulaArgs.skip && checkIsFormula(validation.value2) &&
                !isCellReference(validation.value2.substring(1, validation.value2.length)) && validation.value1.indexOf('(') > -1) {
                var val2 = validation.value2;
                val2 = val2.substring(val2.indexOf('=') + 1, val2.indexOf('('));
                formulaArgs.value = val2.toUpperCase();
                this.parent.notify(formulaInValidation, formulaArgs);
            }
        }
        if (!formulaArgs.skip) {
            args.value = isNullOrUndefined(args.value) ? '' : args.value;
            if (validation) {
                args.isValid = this.checkValidationHandler(args, validation);
                if (args.isValid && checkColumnValidation(sheet.columns[args.range[1]], args.range[0], args.range[1])) {
                    validation = sheet.columns[args.range[1]].validation;
                    args.isValid = this.checkValidationHandler(args, validation);
                }
            }
            else if (checkColumnValidation(sheet.columns[args.range[1]], args.range[0], args.range[1])) {
                validation = sheet.columns[args.range[1]].validation;
                args.isValid = this.checkValidationHandler(args, validation);
            }
            if (validation) {
                var addInvalidHighlight = void 0;
                if (args.isEdit && !args.isValid) {
                    args.isValid = addInvalidHighlight = this.validationErrorHandler(this.parent.serviceLocator.getService(locale).getConstant('ValidationError'));
                }
                if (args.isValid && validation.isHighlighted && !isHiddenRow(sheet, args.range[0]) && !isHiddenCol(sheet, args.range[1])) {
                    this.updateHighlightHandler({
                        rowIdx: args.range[0], colIdx: args.range[1],
                        isRemoveHighlightedData: !addInvalidHighlight, isRemoveValidation: true
                    });
                }
            }
        }
    };
    DataValidation.prototype.formatValidation = function (value, type, isDialogValidator) {
        var sheetPanel = this.parent.element.getElementsByClassName('e-sheet-panel')[0];
        var errorMsg;
        var formEle = this.parent.createElement('form', { id: 'formId', className: 'form-horizontal' });
        var inputEle = this.parent.createElement('input', { id: 'e-validation' });
        inputEle.setAttribute('name', 'validation');
        inputEle.setAttribute('type', 'text');
        if (type === 'Date' && isNumber(value)) {
            var valArr = value.toString().split('.');
            if (valArr.length === 2) {
                value = valArr[0];
            }
        }
        inputEle.setAttribute('value', value);
        formEle.appendChild(inputEle);
        sheetPanel.appendChild(formEle);
        var options;
        switch (type) {
            case 'Date':
                options = {
                    rules: {
                        'validation': { date: true }
                    },
                    customPlacement: function (inputElement, error) {
                        errorMsg = error.innerText;
                    }
                };
                break;
            case 'Decimal':
                options = {
                    rules: {
                        'validation': { number: true }
                    },
                    customPlacement: function (inputElement, error) {
                        errorMsg = error.innerText;
                    }
                };
                break;
            case 'WholeNumber':
                options = {
                    rules: {
                        'validation': { regex: /^-?\d*\.?[0]*$/ }
                    },
                    customPlacement: function (inputElement, error) {
                        errorMsg = error.innerText;
                    }
                };
                break;
            case 'TextLength':
                if (isDialogValidator) {
                    options = {
                        rules: {
                            'validation': { regex: /^\d*\.?[0]*$/ }
                        },
                        customPlacement: function (inputElement, error) {
                            errorMsg = error.innerText;
                        }
                    };
                }
                break;
        }
        this.formObj = new FormValidator('#formId', options);
        var isValid = this.formObj.validate();
        sheetPanel.removeChild(sheetPanel.getElementsByClassName('form-horizontal')[0]);
        return { isValid: isValid, errorMsg: errorMsg };
    };
    DataValidation.prototype.updateHighlightHandler = function (args) {
        var isValid;
        if (!args.isRemoveValidation) {
            var cellValue = args.cell.value || args.cell.value === 0 ? args.cell.value : args.cell.hyperlink ?
                (typeof args.cell.hyperlink === 'string' ? args.cell.hyperlink : (args.cell.hyperlink.address || '')) : '';
            var validEventArgs = {
                value: cellValue, range: [args.rowIdx, args.colIdx], sheetIdx: this.parent.activeSheetIndex
            };
            isValid = this.checkValidationHandler(validEventArgs, args.validation);
            if (isValid && args.col && checkColumnValidation(args.col, args.rowIdx, args.colIdx)) {
                validEventArgs.value = cellValue;
                isValid = this.checkValidationHandler(validEventArgs, args.col.validation);
            }
        }
        if (isValid) {
            if (args.removeOnValidData) {
                var cellEle = this.parent.getCell(args.rowIdx, args.colIdx);
                if (cellEle && cellEle.style.backgroundColor) {
                    args.td = cellEle;
                    args.style = this.parent.getCellStyleValue(['backgroundColor', 'color'], [args.rowIdx, args.colIdx]);
                    this.parent.notify(applyCellFormat, args);
                    args.td = null;
                }
            }
        }
        else {
            if (args.isRemoveHighlightedData) {
                args.style = this.parent.getCellStyleValue(['backgroundColor', 'color'], [args.rowIdx, args.colIdx]);
                this.parent.notify(applyCellFormat, args);
            }
            else {
                args.style = { backgroundColor: '#ffff00', color: '#ff0000' };
                this.parent.notify(applyCellFormat, args);
            }
        }
    };
    DataValidation.prototype.validationErrorHandler = function (error) {
        var _this = this;
        var el = this.parent.element.getElementsByClassName('e-spreadsheet-edit')[0];
        var l10n = this.parent.serviceLocator.getService(locale);
        var cancel = false;
        if (!this.parent.element.querySelector('.e-validation-error-dlg')) {
            var erroDialogInst_1 = this.parent.serviceLocator.getService(dialog);
            var disableCancel = false;
            var dlgModel = {
                width: 400, height: 200, isModal: true, showCloseIcon: true, cssClass: 'e-validation-error-dlg',
                target: document.getElementById(this.parent.element.id) || this.parent.element,
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'ValidationErrorDialog',
                        element: args.element, target: args.target, cancel: args.cancel, content: error
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                        cancel = true;
                    }
                    el.focus();
                    erroDialogInst_1.dialogInstance.content = dlgArgs.content;
                    erroDialogInst_1.dialogInstance.dataBind();
                },
                buttons: [{
                        buttonModel: {
                            content: l10n.getConstant('Retry'), isPrimary: true
                        },
                        click: function () {
                            _this.errorDlgHandler(erroDialogInst_1, 'Retry');
                        }
                    },
                    {
                        buttonModel: {
                            content: l10n.getConstant('Cancel')
                        },
                        click: function () {
                            _this.errorDlgHandler(erroDialogInst_1, 'Cancel');
                        }
                    }]
            };
            erroDialogInst_1.show(dlgModel, disableCancel);
        }
        return cancel;
    };
    DataValidation.prototype.errorDlgHandler = function (errorDialogInst, buttonName) {
        if (buttonName === 'Retry') {
            var el = this.parent.element.getElementsByClassName('e-spreadsheet-edit')[0];
            errorDialogInst.hide();
            if (el.innerText) {
                window.getSelection().selectAllChildren(el);
                if (this.listObj && !this.listObj.isDestroyed) {
                    this.listObj.showPopup();
                }
            }
        }
        else {
            var indexes = getCellIndexes(this.parent.getActiveSheet().activeCell);
            var cell = getCell(indexes[0], indexes[1], this.parent.getActiveSheet());
            var value = cell ? this.parent.getDisplayText(cell) : '';
            this.parent.notify(editOperation, {
                action: 'cancelEdit', value: value, refreshFormulaBar: true,
                refreshEditorElem: true, isAppend: false, trigEvent: true
            });
            errorDialogInst.hide();
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    DataValidation.prototype.getModuleName = function () {
        return 'dataValidation';
    };
    return DataValidation;
}());

/**
 * The `Protect-sheet` module is used to handle the Protecting functionalities in Spreadsheet.
 */
var ProtectSheet = /** @class */ (function () {
    /**
     * Constructor for protectSheet module in Spreadsheet.
     *
     * @param {Spreadsheet} parent - Specify the spreadsheet.
     * @private
     */
    function ProtectSheet(parent) {
        this.parent = parent;
        this.init();
    }
    ProtectSheet.prototype.init = function () {
        this.addEventListener();
    };
    /**
     * To destroy the protectSheet module.
     *
     * @returns {void} - To destroy the protectSheet module.
     * @hidden
     */
    ProtectSheet.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    ProtectSheet.prototype.addEventListener = function () {
        this.parent.on(applyProtect, this.protect, this);
        this.parent.on(protectSheet, this.protectSheetHandler, this);
        this.parent.on(editAlert, this.editProtectedAlert, this);
        this.parent.on(protectWorkbook, this.protectWorkbook, this);
        this.parent.on(keyUp, this.KeyUpHandler, this);
        this.parent.on(unProtectWorkbook, this.unProtectWorkbook, this);
        this.parent.on(unProtectSheetPassword, this.unProtectSheetPassword, this);
        this.parent.on(importProtectWorkbook, this.importProtectWorkbook, this);
        this.parent.on(setProtectWorkbook, this.protectWorkbookHandler, this);
        this.parent.on(removeWorkbookProtection, this.removeWorkbookProtection, this);
        this.parent.on(toggleProtect, this.toggleProtect, this);
    };
    ProtectSheet.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(applyProtect, this.protect);
            this.parent.off(protectSheet, this.protectSheetHandler);
            this.parent.off(editAlert, this.editProtectedAlert);
            this.parent.off(protectWorkbook, this.protectWorkbook);
            this.parent.off(keyUp, this.KeyUpHandler);
            this.parent.off(unProtectWorkbook, this.unProtectWorkbook);
            this.parent.off(unProtectSheetPassword, this.unProtectSheetPassword);
            this.parent.off(importProtectWorkbook, this.importProtectWorkbook);
            this.parent.off(setProtectWorkbook, this.protectWorkbookHandler);
            this.parent.off(removeWorkbookProtection, this.removeWorkbookProtection);
            this.parent.off(toggleProtect, this.toggleProtect);
        }
    };
    ProtectSheet.prototype.protect = function (args) {
        if (args.isActive) {
            var sheet = this.parent.getActiveSheet();
            if (sheet.isImportProtected) {
                sheet.isImportProtected = false;
            }
        }
        this.parent.notify(clearCopy, null);
        if (!args.isActive) {
            this.createDialogue();
        }
        else {
            this.parent.setSheetPropertyOnMute(getSheet(this.parent, args.sheetIndex), 'isProtected', false);
            this.parent.notify(updateToggleItem, { props: 'Protect' });
            this.parent.notify(protectSheet, args);
            this.parent.notify(protectSelection, null);
        }
    };
    ProtectSheet.prototype.createDialogue = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var listData = [
            { text: l10n.getConstant('SelectCells'), id: '1' },
            { text: l10n.getConstant('SelectUnlockedCells'), id: '6' },
            { text: l10n.getConstant('FormatCells'), id: '2' },
            { text: l10n.getConstant('FormatRows'), id: '3' },
            { text: l10n.getConstant('FormatColumns'), id: '4' },
            { text: l10n.getConstant('InsertLinks'), id: '5' }
        ];
        this.optionList = new ListView({
            dataSource: listData,
            showCheckBox: true,
            select: this.dialogOpen.bind(this)
        });
        var dialogElem = this.parent.createElement('div', { className: 'e-sheet-password-dialog' });
        var pwdCont = this.parent.createElement('div', { className: 'e-sheet-password-content' });
        var textH = this.parent.createElement('div', { className: 'e-header' });
        textH.innerText = l10n.getConstant('SheetPassword');
        var pwdInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        pwdInput.setAttribute('placeholder', l10n.getConstant('EnterThePassword'));
        pwdCont.appendChild(pwdInput);
        pwdCont.insertBefore(textH, pwdInput);
        dialogElem.appendChild(pwdCont);
        var protectHeaderCntent = this.parent.createElement('div', { className: 'e-protect-content' });
        protectHeaderCntent.innerText = l10n.getConstant('ProtectAllowUser');
        this.parent.setSheetPropertyOnMute(this.parent.getActiveSheet(), 'isProtected', false);
        var checkbox = new CheckBox({ checked: true, label: l10n.getConstant('ProtectContent'), cssClass: 'e-protect-checkbox' });
        var listViewElement = this.parent.createElement('div', {
            className: 'e-protect-option-list',
            id: this.parent.element.id + '_option_list'
        });
        var headerContent = this.parent.createElement('div', { className: 'e-header-content' });
        headerContent.innerText = l10n.getConstant('ProtectSheet');
        var checkBoxElement = this.parent.createElement('input', { id: this.parent.element.id + '_protect_check', attrs: { type: 'checkbox' } });
        var protectSheetDlg = this.parent.serviceLocator.getService('dialog');
        var checkBoxClickHandler = function () {
            var ch = getInstance(document.getElementById(_this.parent.element.id + '_protect_check'), CheckBox);
            protectSheetDlg.dialogInstance.element.querySelector('.e-footer-content .e-btn.e-primary').disabled =
                !ch.checked;
        };
        var dlgCanceled;
        protectSheetDlg.show({
            header: headerContent.outerHTML,
            content: dialogElem.outerHTML + checkBoxElement.outerHTML + protectHeaderCntent.outerHTML + listViewElement.outerHTML,
            showCloseIcon: true, isModal: true,
            cssClass: 'e-protect-dlg',
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'ProtectSheetDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    dlgCanceled = args.cancel = true;
                }
                else {
                    focus(_this.parent.element);
                }
            },
            beforeClose: function () {
                if (!dlgCanceled) {
                    EventHandler.remove(checkbox.element, 'click', checkBoxClickHandler);
                }
            },
            buttons: [{
                    click: this.selectOption.bind(this, protectSheetDlg),
                    buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true }
                },
                {
                    click: function () { return protectSheetDlg.hide(); },
                    buttonModel: { content: l10n.getConstant('Cancel') }
                }]
        }, false);
        if (!dlgCanceled) {
            checkbox.appendTo('#' + this.parent.element.id + '_protect_check');
            this.optionList.appendTo('#' + this.parent.element.id + '_option_list');
            this.optionList.selectMultipleItems([{ id: '1' }, { id: '6' }]);
            EventHandler.add(checkbox.element, 'click', checkBoxClickHandler, this);
        }
    };
    ProtectSheet.prototype.dialogOpen = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        if (args.text === l10n.getConstant('SelectCells') && args.isChecked && args.isInteracted) {
            this.optionList.checkItem({ id: '6' });
        }
        if (args.text === l10n.getConstant('SelectUnlockedCells') && !args.isChecked && args.isInteracted) {
            this.optionList.uncheckItem({ id: '1' });
        }
    };
    ProtectSheet.prototype.selectOption = function (protectSheetDlg) {
        var pwdInput = protectSheetDlg.dialogInstance.element.querySelector('.e-sheet-password-content .e-input');
        var pwd = pwdInput.value;
        if (pwd) {
            this.reEnterSheetPassword(pwd);
        }
        else {
            var sheet = this.parent.getActiveSheet();
            this.parent.setSheetPropertyOnMute(sheet, 'isProtected', true);
            this.parent.setSheetPropertyOnMute(sheet, 'password', pwd);
            this.updateProtectSheet(pwd);
            protectSheetDlg.hide();
            if (!sheet.protectSettings.selectCells && !sheet.protectSettings.selectUnLockedCells) {
                this.parent.notify(hideAutoFillElement, null);
            }
            else if (sheet.protectSettings.selectUnLockedCells && isLockedCells(this.parent, getRangeIndexes(sheet.selectedRange))) {
                this.parent.notify(hideAutoFillElement, null);
            }
        }
    };
    ProtectSheet.prototype.applySheetPwd = function (pwd) {
        var actSheet = this.parent.getActiveSheet();
        this.parent.setSheetPropertyOnMute(actSheet, 'isProtected', true);
        this.parent.setSheetPropertyOnMute(actSheet, 'password', pwd);
        this.updateProtectSheet(pwd);
        if (!actSheet.protectSettings.selectCells && !actSheet.protectSettings.selectUnLockedCells) {
            this.parent.notify(hideAutoFillElement, null);
        }
    };
    ProtectSheet.prototype.updateProtectSheet = function (password) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var selectedItems = this.optionList.getSelectedItems();
        var protectSettings = {
            selectCells: selectedItems.text.indexOf(l10n.getConstant('SelectCells')) > -1,
            formatCells: selectedItems.text.indexOf(l10n.getConstant('FormatCells')) > -1,
            formatRows: selectedItems.text.indexOf(l10n.getConstant('FormatRows')) > -1,
            formatColumns: selectedItems.text.indexOf(l10n.getConstant('FormatColumns')) > -1,
            insertLink: selectedItems.text.indexOf(l10n.getConstant('InsertLinks')) > -1,
            selectUnLockedCells: selectedItems.text.indexOf(l10n.getConstant('SelectUnlockedCells')) > -1
        };
        this.parent.notify(protectsheetHandler, { protectSettings: protectSettings, password: password, triggerEvent: true });
        this.parent.notify(protectSelection, null);
        this.parent.notify(clearUndoRedoCollection, null);
    };
    ProtectSheet.prototype.protectSheetHandler = function (args) {
        var sheetIndex = isNullOrUndefined(args && args.sheetIndex) ? this.parent.activeSheetIndex : args.sheetIndex;
        var sheet = getSheet(this.parent, sheetIndex);
        var id = this.parent.element.id;
        var disableHomeBtnId = [id + '_undo', id + '_redo', id + '_cut', id + '_copy', id + '_paste', id + '_number_format',
            id + '_font_name', id + '_font_size', id + '_bold', id + '_italic', id + '_line-through', id + '_underline',
            id + '_font_color_picker', id + '_fill_color_picker', id + '_borders', id + '_merge_cells', id + '_text_align',
            id + '_vertical_align', id + '_wrap', id + '_sorting', id + '_clear', id + '_conditionalformatting'];
        var enableHomeBtnId = [id + '_cut', id + '_copy', id + '_number_format', id + '_font_name', id + '_font_size',
            id + '_bold', id + '_italic', id + '_line-through', id + '_underline', id + '_font_color_picker', id + '_fill_color_picker',
            id + '_borders', id + '_text_align', id + '_vertical_align', id + '_wrap', id + '_sorting',
            id + '_clear', id + '_conditionalformatting'];
        var enableFrmlaBtnId = [id + '_insert_function'];
        var enableInsertBtnId = [id + '_hyperlink', id + '_', id + '_chart'];
        var imageBtnId = [id + '_image'];
        var findBtnId = [id + '_find'];
        var dataValidationBtnId = [id + '_datavalidation'];
        var chartBtnId = [id + '_chart'];
        var sheetElement = document.getElementById(this.parent.element.id + '_sheet_panel');
        if (sheetElement) {
            if (sheet.isProtected) {
                if (sheet.protectSettings.selectCells) {
                    sheetElement.classList.remove('e-protected');
                }
                else if (sheet.protectSettings.selectUnLockedCells && !isLockedCells(this.parent, getRangeIndexes(sheet.selectedRange))) {
                    sheetElement.classList.remove('e-protected');
                }
                else {
                    sheetElement.classList.add('e-protected');
                }
            }
            else {
                sheetElement.classList.add('e-protected');
            }
            if (!sheet.isProtected) {
                sheetElement.classList.remove('e-protected');
            }
        }
        this.parent.dataBind();
        this.parent.notify(protectCellFormat, {
            disableHomeBtnId: disableHomeBtnId,
            enableHomeBtnId: enableHomeBtnId, enableFrmlaBtnId: enableFrmlaBtnId, enableInsertBtnId: enableInsertBtnId,
            findBtnId: findBtnId, dataValidationBtnId: dataValidationBtnId, imageBtnId: imageBtnId, chartBtnId: chartBtnId
        });
        this.parent.notify(enableFormulaInput, null);
        if (sheet.isProtected) {
            this.parent.notify(updateToggleItem, { props: 'Protect' });
        }
        if (args && args.triggerEvent) {
            this.parent.notify(completeAction, { action: 'protectSheet', eventArgs: { sheetIndex: sheetIndex, isProtected: sheet.isProtected, password: sheet.password, protectSettings: sheet.protectSettings.properties || sheet.protectSettings } });
        }
    };
    ProtectSheet.prototype.editProtectedAlert = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var protectedAlertDlg = this.parent.serviceLocator.getService('dialog');
        protectedAlertDlg.show({
            content: l10n.getConstant('EditAlert'),
            isModal: true,
            closeOnEscape: true,
            showCloseIcon: true,
            width: '400px',
            cssClass: 'e-editAlert-dlg',
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'EditAlertDialog',
                    content: l10n.getConstant('EditAlert'),
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                else {
                    protectedAlertDlg.dialogInstance.content = dlgArgs.content;
                    focus(_this.parent.element);
                }
            },
            close: function () { return focus(_this.parent.element); }
        });
    };
    ProtectSheet.prototype.protectWorkbook = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-protectworkbook-dlg',
            header: l10n.getConstant('ProtectWorkbook'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'ProtectWorkbook',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                else {
                    dialogInst.dialogInstance.content = _this.passwordProtectContent();
                    dialogInst.dialogInstance.dataBind();
                    focus(_this.parent.element);
                }
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true
                    },
                    click: function () {
                        _this.alertMessage();
                        _this.dlgClickHandler(dialogInst);
                    }
                }]
        });
    };
    ProtectSheet.prototype.passwordProtectContent = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogElem = this.parent.createElement('div', { className: 'e-password-dialog' });
        var pwdCont = this.parent.createElement('div', { className: 'e-password-content' });
        var cnfrmPwdCont = this.parent.createElement('div', { className: 'e-password-content' });
        var textH = this.parent.createElement('div', { className: 'e-header' });
        textH.innerText = l10n.getConstant('Password');
        var urlH = this.parent.createElement('div', { className: 'e-header' });
        urlH.innerText = l10n.getConstant('ConfirmPassword');
        var pwdInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        var cnfrmPwdInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        pwdInput.setAttribute('placeholder', l10n.getConstant('EnterThePassword'));
        cnfrmPwdInput.setAttribute('placeholder', l10n.getConstant('EnterTheConfirmPassword'));
        pwdCont.appendChild(pwdInput);
        pwdCont.insertBefore(textH, pwdInput);
        cnfrmPwdCont.appendChild(cnfrmPwdInput);
        cnfrmPwdCont.insertBefore(urlH, cnfrmPwdInput);
        dialogElem.appendChild(cnfrmPwdCont);
        dialogElem.insertBefore(pwdCont, cnfrmPwdCont);
        return dialogElem;
    };
    ProtectSheet.prototype.KeyUpHandler = function (e) {
        var trgt = e.target;
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-password-content')) {
            if (closest(trgt, '.e-password-dialog') && closest(trgt, '.e-password-dialog').
                getElementsByClassName('e-password-content')[1] === trgt.parentElement) {
                var dlgEle = closest(trgt, '.e-protectworkbook-dlg');
                var ftrEle = dlgEle.getElementsByClassName('e-footer-content')[0];
                var okBtn = ftrEle.firstChild;
                if (trgt.value !== '') {
                    okBtn.removeAttribute('disabled');
                }
                else {
                    okBtn.setAttribute('disabled', 'true');
                }
            }
        }
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-unprotectpwd-content')) {
            if (closest(trgt, '.e-unprotectpwd-dialog') && closest(trgt, '.e-unprotectpwd-dialog').
                getElementsByClassName('e-unprotectpwd-content')[0] === trgt.parentElement) {
                var dlgElement = closest(trgt, '.e-unprotectworkbook-dlg');
                var ftrElement = dlgElement.getElementsByClassName('e-footer-content')[0];
                var okButton = ftrElement.firstChild;
                if (trgt.value !== '') {
                    okButton.removeAttribute('disabled');
                }
                else {
                    okButton.setAttribute('disabled', 'true');
                }
            }
        }
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-reenterpwd-content')) {
            if (closest(trgt, '.e-reenterpwd-dialog') && closest(trgt, '.e-reenterpwd-dialog').
                getElementsByClassName('e-reenterpwd-content')[0] === trgt.parentElement) {
                var dlgCnt = closest(trgt, '.e-reenterpwd-dlg');
                var ftrCnt = dlgCnt.getElementsByClassName('e-footer-content')[0];
                var okBtnElem = ftrCnt.firstChild;
                if (trgt.value !== '') {
                    okBtnElem.removeAttribute('disabled');
                }
                else {
                    okBtnElem.setAttribute('disabled', 'true');
                }
            }
        }
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-unprotectsheetpwd-content')) {
            if (closest(trgt, '.e-unprotectsheetpwd-dialog') && closest(trgt, '.e-unprotectsheetpwd-dialog').
                getElementsByClassName('e-unprotectsheetpwd-content')[0] === trgt.parentElement) {
                var dlg = closest(trgt, '.e-unprotectworksheet-dlg');
                var ftr = dlg.getElementsByClassName('e-footer-content')[0];
                var btn = ftr.firstChild;
                if (trgt.value !== '') {
                    btn.removeAttribute('disabled');
                }
                else {
                    btn.setAttribute('disabled', 'true');
                }
            }
        }
        if (trgt.classList.contains('e-text') && closest(trgt, '.e-importprotectpwd-content')) {
            if (closest(trgt, '.e-importprotectpwd-dialog') && closest(trgt, '.e-importprotectpwd-dialog').
                getElementsByClassName('e-importprotectpwd-content')[0] === trgt.parentElement) {
                var dlgElem = closest(trgt, '.e-importprotectworkbook-dlg');
                var ftrElem = dlgElem.getElementsByClassName('e-footer-content')[0];
                var btn = ftrElem.firstChild;
                if (trgt.value !== '') {
                    btn.removeAttribute('disabled');
                }
                else {
                    btn.setAttribute('disabled', 'true');
                }
            }
        }
    };
    ProtectSheet.prototype.alertMessage = function () {
        var spanElem = this.parent.element.querySelector('.e-pwd-alert-span');
        var unpotectSpanElem = this.parent.element.querySelector('.e-unprotectpwd-alert-span');
        var importpotectSpanElem = this.parent.element.querySelector('.e-importprotectpwd-alert-span');
        var protectSheetSpanElem = this.parent.element.querySelector('.e-reenterpwd-alert-span');
        var unProtectSheetSpanElem = this.parent.element.querySelector('.e-unprotectsheetpwd-alert-span');
        if (spanElem) {
            spanElem.remove();
        }
        if (unpotectSpanElem) {
            unpotectSpanElem.remove();
        }
        if (importpotectSpanElem) {
            importpotectSpanElem.remove();
        }
        if (protectSheetSpanElem) {
            protectSheetSpanElem.remove();
        }
        if (unProtectSheetSpanElem) {
            unProtectSheetSpanElem.remove();
        }
    };
    ProtectSheet.prototype.dlgClickHandler = function (dialogInst) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var pwdVal = this.parent.element.querySelector('.e-password-dialog').
            getElementsByClassName('e-password-content')[0].querySelector('.e-input');
        var cnfrmPwd = this.parent.element.querySelector('.e-password-dialog').
            getElementsByClassName('e-password-content')[1].querySelector('.e-input');
        var pwdSpan = this.parent.createElement('span', {
            className: 'e-pwd-alert-span'
        });
        if (pwdVal.value === cnfrmPwd.value) {
            dialogInst.hide();
            this.parent.notify(updateToggleItem, { props: 'Protectworkbook' });
            this.protectWorkbookHandler({ password: pwdVal.value });
            this.parent.notify(completeAction, { action: 'protectWorkbook', eventArgs: { isProtected: true, password: pwdVal.value } });
        }
        else if (pwdVal.value === '') {
            pwdSpan.textContent = l10n.getConstant('PasswordAlertMsg');
        }
        else if (cnfrmPwd.value === '') {
            pwdSpan.textContent = l10n.getConstant('ConfirmPasswordAlertMsg');
        }
        else if (pwdVal.value !== cnfrmPwd.value) {
            pwdSpan.textContent = l10n.getConstant('PasswordAlert');
        }
        if (dialogInst.dialogInstance) {
            (this.parent.element.querySelector('.e-protectworkbook-dlg').querySelector('.e-dlg-content')).appendChild(pwdSpan);
        }
    };
    ProtectSheet.prototype.protectWorkbookHandler = function (args) {
        this.parent.password = args.password;
        this.parent.isProtected = true;
        if (this.parent.showSheetTabs) {
            this.parent.element.querySelector('.e-add-sheet-tab').setAttribute('disabled', 'true');
            this.parent.element.querySelector('.e-add-sheet-tab').classList.add('e-disabled');
        }
        this.parent.notify(updateToggleItem, { props: 'Protectworkbook' });
    };
    ProtectSheet.prototype.unProtectWorkbook = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-unprotectworkbook-dlg',
            header: l10n.getConstant('UnprotectWorkbook'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'UnprotectWorkbook',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                else {
                    dialogInst.dialogInstance.content = _this.unProtectPasswordContent();
                    dialogInst.dialogInstance.dataBind();
                    focus(_this.parent.element);
                }
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true, disabled: true
                    },
                    click: function () {
                        _this.alertMessage();
                        _this.unprotectdlgOkClick(dialogInst);
                    }
                }]
        });
    };
    ProtectSheet.prototype.unProtectsheet = function (isImportedSheet) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-unprotectworksheet-dlg',
            header: l10n.getConstant('UnprotectWorksheet'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'UnProtectSheet',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                else {
                    dialogInst.dialogInstance.content = _this.unProtectSheetPasswordContent();
                    dialogInst.dialogInstance.dataBind();
                    focus(_this.parent.element);
                }
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true, disabled: this.parent.allowOpen && this.parent.openModule.isImportedFile &&
                            (this.parent.openModule.unProtectSheetIdx.indexOf(this.parent.activeSheetIndex) === -1) ? false : true
                    },
                    click: function () {
                        _this.alertMessage();
                        _this.unprotectSheetdlgOkClick(dialogInst, isImportedSheet);
                    }
                }]
        });
    };
    ProtectSheet.prototype.reEnterSheetPassword = function (pwd) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var protectSheetDlgInst = dialogInst.dialogInstance;
        var dlgCancel;
        var pwdApplied;
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-reenterpwd-dlg',
            header: l10n.getConstant('ConfirmPassword'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'Re-enterPassword',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    dlgCancel = args.cancel = true;
                }
                else {
                    var l10n_1 = _this.parent.serviceLocator.getService(locale);
                    var dialogCont = _this.parent.createElement('div', { className: 'e-reenterpwd-dialog' });
                    var pwdCont = _this.parent.createElement('div', { className: 'e-reenterpwd-content' });
                    var textH = _this.parent.createElement('div', { className: 'e-header' });
                    textH.innerText = l10n_1.getConstant('ReEnterPassword');
                    var pwdInput = _this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
                    pwdCont.appendChild(pwdInput);
                    pwdCont.insertBefore(textH, pwdInput);
                    dialogCont.appendChild(pwdCont);
                    dialogInst.dialogInstance.content = dialogCont;
                    dialogInst.dialogInstance.dataBind();
                    focus(_this.parent.element.querySelector('.e-protect-dlg.e-dialog .e-footer-content .e-btn'));
                }
            },
            close: function () {
                dialogInst.dialogInstance = protectSheetDlgInst;
                if (dlgCancel) {
                    _this.applySheetPwd(pwd);
                    dialogInst.hide(true);
                }
                else if (pwdApplied) {
                    dialogInst.hide(true);
                }
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true, disabled: true
                    },
                    click: function () {
                        _this.alertMessage();
                        var l10n = _this.parent.serviceLocator.getService(locale);
                        var cnfrmPwdInput = _this.parent.element.querySelector('.e-reenterpwd-dialog .e-reenterpwd-content .e-input');
                        var cnfrmPwd = cnfrmPwdInput.value;
                        if (pwd === cnfrmPwd) {
                            _this.applySheetPwd(pwd);
                            pwdApplied = true;
                            dialogInst.hide();
                        }
                        else {
                            var pwdSpan = _this.parent.createElement('span', { className: 'e-reenterpwd-alert-span' });
                            if (!cnfrmPwd) {
                                pwdSpan.textContent = l10n.getConstant('ConfirmPasswordAlertMsg');
                            }
                            else {
                                pwdSpan.textContent = l10n.getConstant('PasswordAlert');
                            }
                            (_this.parent.element.querySelector('.e-reenterpwd-dlg').querySelector('.e-reenterpwd-dialog')).appendChild(pwdSpan);
                        }
                    }
                }]
        });
    };
    ProtectSheet.prototype.unProtectPasswordContent = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dlgElem = this.parent.createElement('div', { className: 'e-unprotectpwd-dialog' });
        var pwdCont = this.parent.createElement('div', { className: 'e-unprotectpwd-content' });
        var textHeader = this.parent.createElement('div', { className: 'e-header' });
        textHeader.innerText = l10n.getConstant('EnterThePassword');
        var pwdInputElem = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        pwdCont.appendChild(pwdInputElem);
        pwdCont.insertBefore(textHeader, pwdInputElem);
        dlgElem.appendChild(pwdCont);
        return dlgElem;
    };
    ProtectSheet.prototype.unProtectSheetPasswordContent = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogCnt = this.parent.createElement('div', { className: 'e-unprotectsheetpwd-dialog' });
        var pwdCnt = this.parent.createElement('div', { className: 'e-unprotectsheetpwd-content' });
        var textH = this.parent.createElement('div', { className: 'e-header' });
        textH.innerText = l10n.getConstant('EnterThePassword');
        var pwdInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        pwdCnt.appendChild(pwdInput);
        pwdCnt.insertBefore(textH, pwdInput);
        dialogCnt.appendChild(pwdCnt);
        return dialogCnt;
    };
    ProtectSheet.prototype.unprotectdlgOkClick = function (dialogInst) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var pwd = this.parent.element.querySelector('.e-unprotectpwd-dialog').
            getElementsByClassName('e-unprotectpwd-content')[0].querySelector('.e-input');
        if (this.parent.password === pwd.value) {
            dialogInst.hide();
            this.removeWorkbookProtection();
            this.parent.notify(completeAction, { action: 'protectWorkbook', eventArgs: { isProtected: false } });
        }
        else {
            var pwdSpan = this.parent.createElement('span', { className: 'e-unprotectpwd-alert-span' });
            pwdSpan.innerText = l10n.getConstant('UnprotectPasswordAlert');
            (this.parent.element.querySelector('.e-unprotectworkbook-dlg').querySelector('.e-dlg-content')).appendChild(pwdSpan);
        }
    };
    ProtectSheet.prototype.removeWorkbookProtection = function () {
        this.parent.password = '';
        this.parent.isProtected = false;
        if (this.parent.showSheetTabs) {
            this.parent.element.querySelector('.e-add-sheet-tab').removeAttribute('disabled');
            this.parent.element.querySelector('.e-add-sheet-tab').classList.remove('e-disabled');
        }
        var elem = document.getElementById(this.parent.element.id + '_protectworkbook');
        if (elem) {
            elem.classList.remove('e-active');
        }
        this.parent.notify(updateToggleItem, { props: 'Protectworkbook' });
    };
    ProtectSheet.prototype.unprotectSheetdlgOkClick = function (dialogInst, isImportedSheet) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        var pwd = this.parent.element.querySelector('.e-unprotectsheetpwd-dialog').
            getElementsByClassName('e-unprotectsheetpwd-content')[0].querySelector('.e-input');
        if (isImportedSheet && sheet.password.length === 0) {
            var impArgs = {
                sheetPassword: pwd.value,
                sheetIndex: this.parent.activeSheetIndex
            };
            this.parent.open(impArgs);
        }
        else {
            if (sheet.password === pwd.value) {
                dialogInst.hide();
                this.unProtectSheetPassword();
            }
            else {
                var pwdSpan = this.parent.createElement('span', { className: 'e-unprotectsheetpwd-alert-span' });
                pwdSpan.innerText = l10n.getConstant('UnprotectPasswordAlert');
                (this.parent.element.querySelector('.e-unprotectworksheet-dlg').querySelector('.e-dlg-content')).appendChild(pwdSpan);
            }
        }
    };
    ProtectSheet.prototype.unProtectSheetPassword = function () {
        var sheet = this.parent.getActiveSheet();
        var sheetIdx = this.parent.activeSheetIndex;
        this.parent.setSheetPropertyOnMute(sheet, 'isProtected', !sheet.isProtected);
        this.parent.setSheetPropertyOnMute(sheet, 'password', '');
        var isActive = sheet.isProtected ? false : true;
        this.parent.notify(applyProtect, { isActive: isActive, id: this.parent.element.id + '_protect', sheetIndex: sheetIdx, triggerEvent: true });
        if (this.parent.allowOpen && this.parent.openModule.isImportedFile &&
            this.parent.openModule.unProtectSheetIdx.indexOf(sheetIdx) === -1) {
            this.parent.openModule.unProtectSheetIdx.push(sheetIdx);
        }
    };
    ProtectSheet.prototype.importProtectWorkbook = function (fileArgs) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 323, isModal: true, showCloseIcon: true, cssClass: 'e-importprotectworkbook-dlg',
            header: l10n.getConstant('UnprotectWorkbook'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'ImportProtectWorkbook',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                else {
                    dialogInst.dialogInstance.content = _this.importProtectPasswordContent(fileArgs);
                    dialogInst.dialogInstance.dataBind();
                    focus(_this.parent.element);
                }
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'), isPrimary: true, disabled: true
                    },
                    click: function () {
                        _this.alertMessage();
                        _this.importOkClick(fileArgs);
                    }
                }]
        });
    };
    ProtectSheet.prototype.importProtectPasswordContent = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogElem = this.parent.createElement('div', { className: 'e-importprotectpwd-dialog' });
        var pwdCont = this.parent.createElement('div', { className: 'e-importprotectpwd-content' });
        var textSpan = this.parent.createElement('span', { className: 'e-header' });
        textSpan.innerText = '"' + args.file.name + '"' + ' ' + l10n.getConstant('IsProtected');
        var pwdInput = this.parent.createElement('input', { className: 'e-input e-text', attrs: { 'type': 'password' } });
        pwdInput.setAttribute('placeholder', l10n.getConstant('EnterThePassword'));
        pwdCont.appendChild(textSpan);
        pwdCont.appendChild(pwdInput);
        dialogElem.appendChild(pwdCont);
        return dialogElem;
    };
    ProtectSheet.prototype.importOkClick = function (args) {
        var pwd = this.parent.element.querySelector('.e-importprotectpwd-dialog').
            getElementsByClassName('e-importprotectpwd-content')[0].querySelector('.e-input');
        this.parent.password = pwd.value;
        var impArgs = {
            file: args.file,
            password: pwd.value
        };
        this.parent.open(impArgs);
    };
    ProtectSheet.prototype.toggleProtect = function () {
        var isActive;
        var parentId = this.parent.element.id;
        var sheet = this.parent.getActiveSheet();
        if (sheet.isProtected && this.parent.allowOpen && sheet.isImportProtected && this.parent.openModule.isImportedFile &&
            this.parent.openModule.unProtectSheetIdx.indexOf(this.parent.activeSheetIndex) === -1) {
            this.unProtectsheet(true);
        }
        else if (sheet.password && sheet.password.length > 0) {
            this.unProtectsheet();
        }
        else {
            this.parent.setSheetPropertyOnMute(sheet, 'isProtected', !sheet.isProtected);
            isActive = sheet.isProtected ? false : true;
            this.parent.notify(applyProtect, { isActive: isActive, id: parentId + '_protect', sheetIndex: this.parent.activeSheetIndex, triggerEvent: true });
        }
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     *
     * @private
     */
    ProtectSheet.prototype.getModuleName = function () {
        return 'protectSheet';
    };
    return ProtectSheet;
}());

/**
 * `FindAndReplace` module is used to handle the search action in Spreadsheet.
 */
var FindAndReplace = /** @class */ (function () {
    /**
     * Constructor for FindAndReplace module.
     *
     * @param {Spreadsheet} parent - Constructor for FindAndReplace module.
     */
    function FindAndReplace(parent) {
        this.shortValue = '';
        this.divElements = [];
        this.paraElements = [];
        this.inputElements = [];
        this.textBoxElements = [];
        this.dropDownListElements = [];
        this.parent = parent;
        this.addEventListener();
    }
    FindAndReplace.prototype.addEventListener = function () {
        this.parent.on(findDlg, this.renderFindDlg, this);
        this.parent.on(gotoDlg, this.renderGotoDlg, this);
        this.parent.on(goto, this.gotoHandler, this);
        this.parent.on(findHandler, this.findHandler, this);
        this.parent.on(showFindAlert, this.showFindAlert, this);
        this.parent.on(replaceAllDialog, this.replaceAllDialog, this);
        this.parent.on(findKeyUp, this.findKeyUp, this);
        this.parent.on(findToolDlg, this.findToolDlg, this);
        this.parent.on(activeSheetChanged, this.refreshFindDlg, this);
    };
    FindAndReplace.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(findDlg, this.renderFindDlg);
            this.parent.off(gotoDlg, this.renderGotoDlg);
            this.parent.off(goto, this.gotoHandler);
            this.parent.off(findHandler, this.findHandler);
            this.parent.off(showFindAlert, this.showFindAlert);
            this.parent.off(replaceAllDialog, this.replaceAllDialog);
            this.parent.off(findKeyUp, this.findKeyUp);
            this.parent.off(findToolDlg, this.findToolDlg);
            this.parent.off(activeSheetChanged, this.refreshFindDlg);
        }
    };
    FindAndReplace.prototype.findToolDlg = function (args) {
        var _this = this;
        var updateDisableState = function (disable) {
            var ribbon = _this.parent.showRibbon && _this.parent.element.querySelector('.e-ribbon');
            if (ribbon) {
                var findBtn = (args.event && args.event.target ?
                    closest(args.event.target, "#" + _this.parent.element.id + "_findbtn") :
                    select("#" + _this.parent.element.id + "_findbtn", ribbon));
                if (findBtn) {
                    if (disable) {
                        findBtn.classList.add('e-disabled');
                    }
                    else {
                        findBtn.classList.remove('e-disabled');
                    }
                    findBtn.disabled = disable;
                }
            }
        };
        var dialogDiv = args.dialogEle || this.parent.element.getElementsByClassName('e-findtool-dlg')[0];
        if (args.isPublic) {
            this.findValue = args.findValue;
        }
        var sheet = this.parent.getActiveSheet();
        var toolbarObj;
        var findTextInput;
        var findSpan;
        var findHandlerFn = function (e) {
            if (!findTextInput || (sheet.isProtected && !sheet.protectSettings.selectCells &&
                !sheet.protectSettings.selectUnLockedCells)) {
                return;
            }
            var inputValue = findTextInput.value;
            if (e && e.keyCode === 13) {
                if (findTextInput.value && findSpan.textContent !== '0 of 0') {
                    _this.parent.notify(findHandler, { findOption: e.shiftKey ? 'prev' : 'next' });
                    _this.updateCount(findSpan, e.shiftKey);
                }
            }
            else {
                var enable = void 0;
                if (inputValue === '') {
                    findSpan.textContent = '0 of 0';
                    enable = false;
                }
                else {
                    var countArgs = { value: inputValue, mode: 'Sheet',
                        isCSen: false, sheetIndex: _this.parent.activeSheetIndex, isEMatch: false, searchBy: 'By Row' };
                    _this.parent.notify(count, countArgs);
                    findSpan.textContent = countArgs.findCount;
                    enable = countArgs.findCount !== '0 of 0';
                }
                toolbarObj.enableItems(1, enable);
                toolbarObj.enableItems(2, enable);
            }
        };
        if (dialogDiv) {
            if (args.isPublic || args.refreshPosition) {
                if (args.isPublic) {
                    findTextInput = dialogDiv.querySelector('.e-text-findNext-short');
                    findTextInput.value = this.findValue;
                    findSpan = dialogDiv.querySelector('.e-input-group-icon');
                    toolbarObj = getComponent(dialogDiv.querySelector('.e-find-toolbar'), 'toolbar');
                    findHandlerFn();
                }
                if (args.refreshPosition) {
                    var headerHgt = void 0;
                    if (this.parent.getActiveSheet().showHeaders) {
                        var hdrPanel = this.parent.getColumnHeaderContent().parentElement;
                        headerHgt = ((hdrPanel && hdrPanel.offsetHeight) || 30) + 1;
                    }
                    else {
                        headerHgt = 1;
                    }
                    dialogDiv.style.top = headerHgt + "px";
                }
            }
            else {
                updateDisableState(true);
                this.findDialog.hide();
            }
        }
        else {
            var findTextElement = this.parent.createElement('div', { className: 'e-input-group' });
            findTextInput = this.parent.createElement('input', { className: 'e-input e-text-findNext-short', attrs: { 'type': 'Text' } });
            if (this.findValue) {
                findTextInput.value = this.findValue;
            }
            var l10n = this.parent.serviceLocator.getService(locale);
            findTextInput.setAttribute('placeholder', l10n.getConstant('FindValue'));
            findSpan = this.parent.createElement('span', { className: 'e-input-group-icon' });
            var timeoutHandler_1;
            var largeData_1 = (sheet.usedRange.rowIndex * sheet.usedRange.colIndex) > 100;
            findTextInput.onkeyup = function (e) {
                if (largeData_1) {
                    if (timeoutHandler_1) {
                        clearTimeout(timeoutHandler_1);
                    }
                    timeoutHandler_1 = setTimeout(findHandlerFn.bind(_this, e), 500);
                }
                else {
                    findHandlerFn(e);
                }
            };
            findTextElement.appendChild(findTextInput);
            findTextElement.appendChild(findSpan);
            var toolItemModel = [
                { type: 'Input', template: findTextElement },
                {
                    prefixIcon: 'e-icons e-prev-icon', tooltipText: l10n.getConstant('FindPreviousBtn'), type: 'Button', cssClass: 'e-findRib-prev',
                    disabled: true
                },
                { prefixIcon: 'e-icons e-next-icon', tooltipText: l10n.getConstant('FindNextBtn'), type: 'Button', cssClass: 'e-findRib-next', disabled: true },
                { type: 'Separator' },
                { prefixIcon: 'e-icons e-option-icon', tooltipText: l10n.getConstant('MoreOptions'), type: 'Button', cssClass: 'e-findRib-more' },
                { prefixIcon: 'e-icons e-close', tooltipText: l10n.getConstant('Close'), type: 'Button', cssClass: 'e-findRib-close' }
            ];
            toolbarObj = new Toolbar({
                clicked: function (args) {
                    if (args.item.cssClass === 'e-findRib-next') {
                        _this.parent.notify(findHandler, { findOption: 'next' });
                        _this.updateCount(findSpan);
                    }
                    else if (args.item.cssClass === 'e-findRib-prev') {
                        _this.parent.notify(findHandler, { findOption: 'prev' });
                        _this.updateCount(findSpan, true);
                    }
                    else if (args.item.cssClass === 'e-findRib-more') {
                        _this.findDialog.animationSettings.effect = 'None';
                        _this.findDialog.setProperties({ animationSettings: _this.findDialog.animationSettings }, true);
                        _this.renderFindDlg();
                        _this.findDialog.hide();
                    }
                }, width: 'auto', height: 'auto', items: toolItemModel, cssClass: 'e-find-toolObj',
                created: function () {
                    var tbarBtns = toolbarObj.element.querySelectorAll('.e-toolbar-item .e-tbar-btn');
                    tbarBtns.forEach(function (tbarBtn) { return tbarBtn.removeAttribute('tabindex'); });
                }
            });
            var tbarEle = this.parent.createElement('div', { className: 'e-find-toolbar', attrs: { 'tabindex': '-1' } });
            toolbarObj.createElement = this.parent.createElement;
            toolbarObj.appendTo(tbarEle);
            dialogDiv = this.parent.createElement('div', { className: 'e-dlg-div', attrs: { 'aria-label': l10n.getConstant('FindValue') } });
            var sheetPanel_1 = this.parent.element.getElementsByClassName('e-sheet-panel')[0];
            var findDlgModel = {
                cssClass: 'e-findtool-dlg', visible: false, enableRtl: this.parent.enableRtl, target: sheetPanel_1,
                open: function () {
                    EventHandler.add(document, 'click', _this.closeDialog, _this);
                    if (_this.findValue && (!sheet.isProtected || sheet.protectSettings.selectCells ||
                        sheet.protectSettings.selectUnLockedCells)) {
                        var countArgs = { value: _this.findValue, mode: 'Sheet',
                            isCSen: false, sheetIndex: _this.parent.activeSheetIndex, isEMatch: false, searchBy: 'By Row' };
                        _this.parent.notify(count, countArgs);
                        findSpan.textContent = countArgs.findCount;
                        var enable = countArgs.findCount !== '0 of 0';
                        toolbarObj.enableItems(1, enable);
                        toolbarObj.enableItems(2, enable);
                    }
                    else {
                        findSpan.textContent = '0 of 0';
                    }
                    updateDisableState(false);
                    var inputContainer = toolbarObj.element.querySelector('.e-input-group');
                    if (inputContainer) {
                        inputContainer.addEventListener('focus', function () {
                            var textInput = toolbarObj.element.querySelector('.e-text-findNext-short');
                            focus(textInput);
                            textInput.classList.add('e-input-focus');
                            (textInput).setSelectionRange(0, textInput.value.length);
                        });
                    }
                    if (animationSettings_1) {
                        _this.findDialog.setProperties({ animationSettings: animationSettings_1 }, true);
                    }
                },
                beforeOpen: function () { return focus(_this.parent.element); },
                beforeClose: function () {
                    _this.findValue = findTextInput.value || null;
                    toolbarObj.destroy();
                    EventHandler.remove(document, 'click', _this.closeDialog);
                },
                close: function () {
                    _this.findDialog.destroy();
                    _this.findDialog = null;
                    detach(dialogDiv);
                    sheetPanel_1.style.position = '';
                    focus(_this.parent.element);
                    updateDisableState(false);
                },
                created: function () {
                    sheetPanel_1.style.position = 'relative';
                    dialogDiv.style.width = _this.parent.getMainContent().offsetWidth + 'px';
                    dialogDiv.style.visibility = 'hidden';
                    dialogDiv.style.display = 'block';
                    _this.findDialog.width = (parseInt(getComputedStyle(dialogDiv).borderLeftWidth, 10) * 2) +
                        dialogDiv.querySelector('.e-toolbar-items').getBoundingClientRect().width + 'px';
                    dialogDiv.style.display = '';
                    dialogDiv.style.width = '';
                    dialogDiv.style.visibility = '';
                    dialogDiv.style.top =
                        ((args && args.headerHgt) || (_this.parent.getColumnHeaderContent().parentElement.offsetHeight + 1)) + "px";
                    dialogDiv.style.left = '';
                    dialogDiv.style[_this.parent.enableRtl ? 'left' : 'right'] = _this.parent.sheetModule.getScrollSize() + "px";
                    _this.findDialog.show();
                }
            };
            if (Browser.isDevice) {
                findDlgModel.header = tbarEle;
                findDlgModel.allowDragging = true;
            }
            else {
                findDlgModel.content = tbarEle;
            }
            this.findDialog = new Dialog$1(findDlgModel);
            this.findDialog.createElement = this.parent.createElement;
            var animationSettings_1;
            if (args && args.isPublic) {
                animationSettings_1 = { effect: this.findDialog.animationSettings.effect };
                this.findDialog.setProperties({ animationSettings: { effect: 'None' } }, true);
            }
            this.findDialog.appendTo(dialogDiv);
        }
    };
    FindAndReplace.prototype.refreshFindDlg = function () {
        var findDialog = this.findDialog && this.parent.element.getElementsByClassName('e-findtool-dlg')[0];
        if (findDialog) {
            var findToolInput = findDialog.querySelector('.e-text-findNext-short');
            this.findToolDlg({ findValue: findToolInput.value, isPublic: true, refreshPosition: true, dialogEle: findDialog });
        }
    };
    FindAndReplace.prototype.updateCount = function (countEle, isPrev) {
        var values = countEle.textContent.split(' ');
        var newStart;
        if (isPrev) {
            newStart = Number(values[0]) - 1;
            if (newStart < 1) {
                newStart = Number(values[2]);
            }
        }
        else {
            newStart = Number(values[0]) + 1;
            if (newStart > Number(values[2])) {
                newStart = 1;
            }
        }
        values[0] = newStart.toString();
        countEle.textContent = values.join(' ');
    };
    FindAndReplace.prototype.closeDialog = function (e) {
        if ((closest(e.target, '.e-findRib-close') || !closest(e.target, '.e-spreadsheet')) && this.findDialog) {
            this.findToolDlg({});
        }
    };
    FindAndReplace.prototype.renderFindDlg = function () {
        var _this = this;
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        if (!this.parent.element.querySelector('.e-find-dlg')) {
            var l10n = this.parent.serviceLocator.getService(locale);
            var dlg = {
                isModal: false, showCloseIcon: true, cssClass: 'e-find-dlg',
                header: l10n.getConstant('FindAndReplace'),
                beforeOpen: function (args) {
                    var dlgArgs = { dialogName: 'FindAndReplaceDialog', element: args.element, target: args.target, cancel: args.cancel };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                    else {
                        dialogInst.dialogInstance.content = _this.findandreplaceContent();
                        dialogInst.dialogInstance.dataBind();
                        focus(_this.parent.element);
                    }
                },
                buttons: [{
                        buttonModel: { content: l10n.getConstant('FindPreviousBtn'), isPrimary: true, cssClass: 'e-btn-findPrevious',
                            disabled: true },
                        click: function (e) {
                            _this.dialogMessage();
                            _this.findHandler({ findOption: e && e.keyCode === 13 ? 'next' : 'prev' });
                        }
                    },
                    {
                        buttonModel: { content: l10n.getConstant('FindNextBtn'), isPrimary: true, cssClass: 'e-btn-findNext', disabled: true },
                        click: function () {
                            _this.dialogMessage();
                            _this.findHandler({ findOption: 'next' });
                        }
                    },
                    {
                        buttonModel: { content: l10n.getConstant('ReplaceBtn'), isPrimary: true, cssClass: 'e-btn-replace', disabled: true },
                        click: function () {
                            _this.dialogMessage();
                            _this.replaceHandler(replace);
                        }
                    },
                    {
                        buttonModel: { content: l10n.getConstant('ReplaceAllBtn'), isPrimary: true, cssClass: 'e-btn-replaceAll', disabled: true },
                        click: function () {
                            _this.dialogMessage();
                            _this.replaceHandler(replaceAll);
                        }
                    }],
                open: function () {
                    var findInput = _this.parent.element.querySelector('.e-text-findNext');
                    if (findInput.value) {
                        var prevButton = _this.parent.element.querySelector('.e-btn-findPrevious');
                        var prevButtonObj = getComponent(prevButton, 'btn');
                        prevButtonObj.disabled = false;
                        getComponent(_this.parent.element.querySelector('.e-btn-findNext'), 'btn').disabled = false;
                    }
                    getUpdateUsingRaf(function () {
                        focus(findInput);
                    });
                },
                beforeClose: this.dialogBeforeClose.bind(this)
            };
            dialogInst.show(dlg);
        }
        else {
            dialogInst.hide();
        }
    };
    FindAndReplace.prototype.dialogBeforeClose = function () {
        var checkBox = this.checkBoxElements;
        if (checkBox && checkBox.element) {
            checkBox.destroy();
            checkBox.element.remove();
        }
        this.checkBoxElements = null;
        this.textBoxElements.forEach(function (textBox) {
            if (textBox && textBox.element) {
                textBox.destroy();
                textBox.element.remove();
            }
        });
        this.textBoxElements = [];
        this.dropDownListElements.forEach(function (dropDownList) {
            if (dropDownList && dropDownList.element) {
                dropDownList.destroy();
                dropDownList.element.remove();
            }
        });
        this.dropDownListElements = [];
        removeElements(this.paraElements);
        this.paraElements = [];
        removeElements(this.inputElements);
        this.inputElements = [];
        removeElements(this.divElements);
        this.divElements = [];
    };
    FindAndReplace.prototype.dialogMessage = function () {
        if (this.parent.element.querySelector('.e-replace-alert-span')) {
            this.parent.element.querySelector('.e-replace-alert-span').remove();
        }
        else if (this.parent.element.querySelector('.e-find-alert-span')) {
            this.parent.element.querySelector('.e-find-alert-span').remove();
        }
    };
    FindAndReplace.prototype.renderGotoDlg = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var cancelBtn = false;
        if (isNullOrUndefined(this.parent.element.querySelector('.e-goto-dlg'))) {
            var dlg = {
                width: 300, isModal: false, showCloseIcon: true, cssClass: 'e-goto-dlg',
                header: l10n.getConstant('GotoHeader'),
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'GoToDialog',
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                    else {
                        dialogInst.dialogInstance.content = _this.GotoContent();
                        dialogInst.dialogInstance.dataBind();
                        focus(_this.parent.element);
                    }
                },
                buttons: [{
                        buttonModel: {
                            content: l10n.getConstant('Ok'), isPrimary: true, cssClass: 'e-btn-goto-ok'
                        },
                        click: function () {
                            if (_this.gotoHandler()) {
                                dialogInst.hide();
                            }
                        }
                    }], open: function () {
                    _this.textFocus();
                }
            };
            dialogInst.show(dlg, cancelBtn);
        }
        else {
            dialogInst.hide();
        }
    };
    FindAndReplace.prototype.textFocus = function () {
        var _this = this;
        var element = this.parent.element.querySelector('.e-text-goto');
        element.addEventListener('focus', function () {
            if (_this.parent.element.querySelector('.e-goto-alert-span')) {
                _this.parent.element.querySelector('.e-goto-alert-span').remove();
            }
        });
    };
    FindAndReplace.prototype.findHandler = function (findOpt) {
        var findInput = this.parent.element.querySelector('.e-text-findNext');
        if (!findInput) {
            findInput = this.parent.element.querySelector('.e-text-findNext-short');
            if (!findInput) {
                this.gotoAlert();
            }
        }
        var value = findInput.value;
        if (findInput.value !== '') {
            var sheet = this.parent.getActiveSheet();
            if (sheet.isProtected && !sheet.protectSettings.selectCells && !sheet.protectSettings.selectUnLockedCells) {
                return;
            }
            var sheetIndex = this.parent.activeSheetIndex;
            var checkCase = this.parent.element.querySelector('.e-findnreplace-checkcase');
            var isCSen = void 0;
            if (!checkCase) {
                isCSen = false;
            }
            else {
                var caseCheckbox = getComponent(checkCase, 'checkbox');
                isCSen = caseCheckbox.checked;
            }
            var checkmatch = this.parent.element.querySelector('.e-findnreplace-checkmatch');
            var isEMatch = void 0;
            if (!checkmatch) {
                isEMatch = false;
            }
            else {
                var entireMatchCheckbox = getComponent(checkmatch, 'checkbox');
                isEMatch = entireMatchCheckbox.checked;
            }
            var searchitem = this.parent.element.querySelector('.e-findnreplace-searchby');
            var searchBy = void 0;
            if (!searchitem) {
                searchBy = 'By Row';
            }
            else {
                var searchDDL = getComponent(searchitem, 'dropdownlist');
                searchBy = searchDDL.value.toString();
            }
            var modeitem = this.parent.element.querySelector('.e-findnreplace-searchwithin');
            var mode = void 0;
            if (!modeitem) {
                mode = 'Sheet';
            }
            else {
                var modeDDL = getComponent(modeitem, 'dropdownlist');
                mode = modeDDL.value.toString();
            }
            var args = {
                value: value, sheetIndex: sheetIndex, findOpt: findOpt.findOption, mode: mode, isCSen: isCSen,
                isEMatch: isEMatch, searchBy: searchBy, isAction: true
            };
            this.parent.find(args);
        }
    };
    FindAndReplace.prototype.replaceHandler = function (action) {
        var dlg = this.parent.element.querySelector('.e-find-dlg');
        var findValue = dlg.querySelector('.e-text-findNext').value;
        var replaceValue = this.parent.element.querySelector('.e-text-replaceInp').value;
        var checkCase = this.parent.element.querySelector('.e-findnreplace-checkcase').checked;
        var checkmatch = this.parent.element.querySelector('.e-findnreplace-checkmatch').checked;
        var searchInValue = this.parent.element.querySelector('.e-search-within .e-ddl-hidden').value;
        var searchByValue = this.parent.element.querySelector('.e-searchby .e-ddl-hidden').value;
        this.parent.notify(action, { value: findValue, mode: searchInValue, isCSen: checkCase, isEMatch: checkmatch, searchBy: searchByValue,
            findOpt: 'next', replaceValue: replaceValue, replaceBy: action, sheetIndex: this.parent.activeSheetIndex, isAction: true });
    };
    FindAndReplace.prototype.gotoHandler = function (address) {
        var isNotAlertShown = true;
        if (address) {
            this.parent.goTo(address.address);
        }
        else {
            var gotoAddress = this.parent.element.querySelector('.e-text-goto').value;
            for (var nameIdx = 0; nameIdx < this.parent.definedNames.length; nameIdx++) {
                if (this.parent.definedNames[nameIdx].name === gotoAddress) {
                    gotoAddress = this.parent.definedNames[nameIdx].refersTo.slice(1);
                    break;
                }
            }
            var addr = gotoAddress;
            if (gotoAddress.includes('!')) {
                addr = gotoAddress.substring(gotoAddress.lastIndexOf('!') + 1);
            }
            addr = addr.split('$').join('');
            if (addr.includes(':')) {
                addr = addr.split(':')[0];
            }
            var rowMatch = addr.match(/\d+/);
            var colMatch = addr.match(/[A-Z]+/i);
            if (!rowMatch || !colMatch || colMatch.index !== 0) {
                this.gotoAlert();
                isNotAlertShown = false;
            }
            else {
                var indexes = getSwapRange(getRangeIndexes(addr));
                var sheet = this.parent.getActiveSheet();
                if (indexes[2] >= 1048576 || indexes[3] >= 16384) {
                    this.gotoAlert();
                    isNotAlertShown = false;
                }
                else if (this.parent.scrollSettings.isFinite && (sheet.rowCount < indexes[2] + 1 || sheet.colCount < indexes[3] + 1)) {
                    this.parent.notify(finiteAlert, null);
                    isNotAlertShown = false;
                }
                else {
                    this.parent.goTo(gotoAddress);
                }
            }
        }
        return isNotAlertShown;
    };
    FindAndReplace.prototype.gotoAlert = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var gotoSpan = this.parent.createElement('span', { className: 'e-goto-alert-span' });
        gotoSpan.innerText = l10n.getConstant('InsertingEmptyValue');
        if (this.parent.element.querySelector('.e-goto-alert-span')) {
            this.parent.element.querySelector('.e-goto-alert-span').remove();
        }
        (this.parent.element.querySelector('.e-goto-dlg').querySelector('.e-dlg-content')).appendChild(gotoSpan);
    };
    FindAndReplace.prototype.showFindAlert = function () {
        if (this.parent.element.querySelector('.e-replace-alert-span')) {
            this.parent.element.querySelector('.e-replace-alert-span').remove();
        }
        var replaceDlgCont = this.parent.element.querySelector('.e-find-dlg .e-dlg-content');
        if (replaceDlgCont) {
            var findSpan = this.parent.createElement('span', { className: 'e-find-alert-span' });
            findSpan.innerText = this.parent.serviceLocator.getService(locale).getConstant('NoElements');
            replaceDlgCont.appendChild(findSpan);
        }
    };
    FindAndReplace.prototype.replaceAllDialog = function (options) {
        if (this.parent.element.querySelector('.e-find-alert-span')) {
            this.parent.element.querySelector('.e-find-alert-span').remove();
        }
        var replaceAlert = this.parent.element.querySelector('.e-replace-alert-span');
        if (replaceAlert) {
            replaceAlert.remove();
        }
        var l10n = (this.parent.serviceLocator.getService(locale));
        var replaceSpan = this.parent.createElement('span', { className: 'e-replace-alert-span' });
        replaceSpan.innerText = options.count + l10n.getConstant('ReplaceAllEnd') + options.replaceValue;
        if (this.parent.element.querySelector('.e-find-dlg')) {
            (this.parent.element.querySelector('.e-find-dlg').querySelector('.e-dlg-content')).appendChild(replaceSpan);
        }
    };
    FindAndReplace.prototype.findKeyUp = function (e) {
        if (e.target.classList.contains('e-text-findNext')) {
            var findValue_1 = this.parent.element.querySelector('.e-text-findNext').value;
            if (!isNullOrUndefined(findValue_1) && findValue_1 !== '') {
                var prevButton = this.parent.element.querySelector('.e-btn-findPrevious');
                var prevButtonObj = getComponent(prevButton, 'btn');
                prevButtonObj.disabled = false;
                getComponent(this.parent.element.querySelector('.e-btn-findNext'), 'btn').disabled = false;
            }
            else {
                getComponent(this.parent.element.querySelector('.e-btn-findPrevious'), 'btn').disabled = true;
                getComponent(this.parent.element.querySelector('.e-btn-findNext'), 'btn').disabled = true;
                this.dialogMessage();
            }
        }
        var findValue = this.parent.element.querySelector('.e-text-findNext').value;
        var replaceValue = this.parent.element.querySelector('.e-text-replaceInp').value;
        if (!isNullOrUndefined(findValue) && !isNullOrUndefined(replaceValue) && (findValue !== '') && (replaceValue !== '')) {
            if (!this.parent.getActiveSheet().isProtected) {
                getComponent(this.parent.element.querySelector('.e-btn-replace'), 'btn').disabled = false;
                getComponent(this.parent.element.querySelector('.e-btn-replaceAll'), 'btn').disabled = false;
            }
        }
        else {
            getComponent(this.parent.element.querySelector('.e-btn-replace'), 'btn').disabled = true;
            getComponent(this.parent.element.querySelector('.e-btn-replaceAll'), 'btn').disabled = true;
        }
    };
    FindAndReplace.prototype.findandreplaceContent = function () {
        if (this.parent.element.querySelector('.e-text-findNext-short')) {
            this.shortValue = this.parent.element.querySelector('.e-text-findNext-short').value;
        }
        var dialogElem = this.parent.createElement('div', { className: 'e-link-dialog' });
        var findElem = this.parent.createElement('div', { className: 'e-find' });
        var findCheck = this.parent.createElement('div', { className: 'e-findCheck' });
        this.divElements.push(dialogElem);
        this.divElements.push(findElem);
        this.divElements.push(findCheck);
        var l10n = this.parent.serviceLocator.getService(locale);
        dialogElem.appendChild(findElem);
        var findTextE = this.parent.createElement('div', { className: 'e-cont' });
        var findTextH = this.parent.createElement('p', { className: 'e-header' });
        findTextH.innerText = l10n.getConstant('FindWhat');
        var findTextIp = this.parent.createElement('input', {
            className: 'e-input e-text-findNext', attrs: {
                'type': 'Text', 'placeholder': l10n.getConstant('FindValue'),
                'value': this.shortValue
            }
        });
        this.divElements.push(findTextE);
        this.paraElements.push(findTextH);
        this.inputElements.push(findTextIp);
        findTextE.appendChild(findTextIp);
        findTextE.insertBefore(findTextH, findTextIp);
        findElem.appendChild(findTextE);
        var findTextBox = new TextBox({ width: '70%' });
        this.textBoxElements.push(findTextBox);
        findTextBox.createElement = this.parent.createElement;
        findTextBox.appendTo(findTextIp);
        var replaceTextE = this.parent.createElement('div', { className: 'e-cont' });
        var replaceTextH = this.parent.createElement('p', { className: 'e-header' });
        replaceTextH.innerText = l10n.getConstant('ReplaceWith');
        var replaceTextIp = this.parent.createElement('input', {
            className: 'e-input e-text-replaceInp', attrs: { 'type': 'Text', 'placeholder': l10n.getConstant('ReplaceValue') }
        });
        this.divElements.push(replaceTextE);
        this.paraElements.push(replaceTextH);
        this.inputElements.push(replaceTextIp);
        replaceTextE.appendChild(replaceTextIp);
        replaceTextE.insertBefore(replaceTextH, replaceTextIp);
        findElem.appendChild(replaceTextE);
        var replaceTextBox = new TextBox({ width: '70%' });
        this.textBoxElements.push(replaceTextBox);
        replaceTextBox.createElement = this.parent.createElement;
        replaceTextBox.appendTo(replaceTextIp);
        var withinData = [
            { Id: 'Sheet', Within: l10n.getConstant('Sheet') },
            { Id: 'Workbook', Within: l10n.getConstant('Workbook') }
        ];
        var withInDDL = new DropDownList({
            dataSource: withinData,
            cssClass: 'e-search-within',
            fields: { value: 'Id', text: 'Within' }, width: '50%', index: 0
        });
        this.dropDownListElements.push(withInDDL);
        var label = l10n.getConstant('SearchWithin');
        var withIn = this.parent.createElement('input', {
            className: 'e-findnreplace-searchwithin', attrs: { type: 'select', label: label }
        });
        var withinTextH = this.parent.createElement('p', { className: 'e-header' });
        withinTextH.innerText = label;
        this.inputElements.push(withIn);
        this.paraElements.push(withinTextH);
        findElem.appendChild(withinTextH);
        findElem.appendChild(withIn);
        withInDDL.createElement = this.parent.createElement;
        withInDDL.appendTo(withIn);
        var searchData = [
            { Id: 'By Row', Search: l10n.getConstant('ByRow') },
            { Id: 'By Column', Search: l10n.getConstant('ByColumn') }
        ];
        var searchDDL = new DropDownList({
            dataSource: searchData,
            cssClass: 'e-searchby',
            fields: { value: 'Id', text: 'Search' }, width: '50%', index: 0
        });
        this.dropDownListElements.push(searchDDL);
        label = l10n.getConstant('SearchBy');
        var searchIn = this.parent.createElement('input', {
            className: 'e-findnreplace-searchby', attrs: { type: 'select', label: label }
        });
        var searchTextH = this.parent.createElement('p', { className: 'e-header' });
        searchTextH.innerText = label;
        this.inputElements.push(searchIn);
        this.paraElements.push(searchTextH);
        findElem.appendChild(searchTextH);
        findElem.appendChild(searchIn);
        searchDDL.createElement = this.parent.createElement;
        searchDDL.appendTo(searchIn);
        var isCSen = new CheckBox({
            label: l10n.getConstant('MatchCase'), checked: false,
            cssClass: 'e-findnreplace-casecheckbox'
        });
        var caaseCheckbox = this.parent.createElement('input', {
            className: 'e-findnreplace-checkcase', attrs: { type: 'checkbox' }
        });
        this.inputElements.push(caaseCheckbox);
        findCheck.appendChild(caaseCheckbox);
        isCSen.createElement = this.parent.createElement;
        isCSen.appendTo(caaseCheckbox);
        var isEMatch = new CheckBox({
            label: l10n.getConstant('MatchExactCellElements'), checked: false,
            cssClass: 'e-findnreplace-exactmatchcheckbox'
        });
        this.checkBoxElements = isEMatch;
        var entirematchCheckbox = this.parent.createElement('input', {
            className: 'e-findnreplace-checkmatch', attrs: { type: 'checkbox' }
        });
        this.inputElements.push(entirematchCheckbox);
        findCheck.appendChild(entirematchCheckbox);
        isEMatch.createElement = this.parent.createElement;
        isEMatch.appendTo(entirematchCheckbox);
        findElem.appendChild(findCheck);
        return dialogElem;
    };
    FindAndReplace.prototype.GotoContent = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogElem = this.parent.createElement('div', { className: 'e-link-dialog' });
        var gotoElem = this.parent.createElement('div', { className: 'e-goto' });
        dialogElem.appendChild(gotoElem);
        var gotoTextE = this.parent.createElement('div', { className: 'e-cont' });
        var gotoTextH = this.parent.createElement('p', { className: 'e-header' });
        gotoTextH.innerText = l10n.getConstant('Reference');
        var gotoTextBox = new TextBox({
            placeholder: l10n.getConstant('EnterCellAddress')
        });
        var gotoTextIp = this.parent.createElement('input', { className: 'e-text-goto', attrs: { 'type': 'Text' } });
        gotoTextE.appendChild(gotoTextIp);
        gotoTextE.insertBefore(gotoTextH, gotoTextIp);
        gotoElem.appendChild(gotoTextE);
        gotoTextBox.createElement = this.parent.createElement;
        gotoTextBox.appendTo(gotoTextIp);
        return dialogElem;
    };
    /**
     * To destroy the find-and-replace module.
     *
     * @returns {void} - To destroy the find-and-replace module.
     */
    FindAndReplace.prototype.destroy = function () {
        this.removeEventListener();
        if (this.findDialog) {
            this.findDialog.hide();
        }
        this.parent = null;
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    FindAndReplace.prototype.getModuleName = function () {
        return 'findAndReplace';
    };
    return FindAndReplace;
}());

/**
 * The `Merge` module is used to to merge the range of cells.
 */
var Merge = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet merge module.
     *
     * @param {Spreadsheet} parent - Specify the spreadsheet.
     * @private
     */
    function Merge(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    Merge.prototype.merge = function (args) {
        this.parent.serviceLocator.getService('cell').refresh(args.rowIdx, args.colIdx, args.lastCell, args.element, false, false, isImported(this.parent));
    };
    Merge.prototype.hideHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        var mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };
        this.parent.notify(activeCellMergedRange, mergeArgs);
        mergeArgs.range = mergeArgs.range;
        var cell = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet) || {};
        var startIdx = args.model === 'row' ? mergeArgs.range[0] : mergeArgs.range[1];
        var endIdx = startIdx + ((cell[args.model + "Span"] || 1) - 1);
        if ((!args.isEnd && (args.start === startIdx || isHiddenCol(sheet, startIdx))) || (args.isEnd && (args.start > startIdx &&
            !isHiddenCol(sheet, startIdx)))) {
            return;
        }
        if (cell[args.model + "Span"] > 1 && endIdx >= args.start) {
            if (args.model === 'row' ? isHiddenRow(sheet, startIdx) : isHiddenCol(sheet, startIdx)) {
                if (args.colIdx <= endIdx) {
                    var colIdx = skipHiddenIdx(sheet, mergeArgs.range[1], true, 'columns');
                    if (colIdx <= endIdx) {
                        var rowIdx = mergeArgs.range[0];
                        if (cell.rowSpan > 1) {
                            rowIdx = skipHiddenIdx(sheet, mergeArgs.range[0], true);
                            rowIdx = rowIdx <= mergeArgs.range[2] ? rowIdx : mergeArgs.range[0];
                        }
                        var cellEle = this.parent.getCell(rowIdx, colIdx);
                        if (cellEle) {
                            cellEle.style.display = '';
                            this.parent.serviceLocator.getService('cell').refresh(mergeArgs.range[0], mergeArgs.range[1], true, cellEle, true, true);
                        }
                    }
                }
            }
            else {
                var rowIdx = cell.rowSpan > 1 ? skipHiddenIdx(sheet, mergeArgs.range[0], true) : mergeArgs.range[0];
                this.merge({ rowIdx: mergeArgs.range[0], colIdx: mergeArgs.range[1], element: this.parent.getCell(rowIdx, mergeArgs.range[1]) });
            }
        }
    };
    Merge.prototype.checkPrevMerge = function (args) {
        var _this = this;
        var cell;
        var mergeArgs;
        var mergeCount;
        var isMergeApplied;
        var isRowMergeCell;
        var sheet = this.parent.getActiveSheet();
        var clearMerge = function () {
            var contTable = _this.parent.getContentTable();
            var contRow = contTable && contTable.rows[0];
            if (!contRow) {
                return;
            }
            var firstRowIdx = parseInt(contRow.getAttribute('aria-rowindex'), 10) - 1;
            mergeArgs.range = mergeArgs.range;
            if (firstRowIdx > _this.parent.viewport.topIndex + _this.parent.frozenRowCount(sheet) && firstRowIdx > mergeArgs.range[0] &&
                firstRowIdx <= mergeArgs.range[2]) {
                var cellEle = void 0;
                var hdrTable = _this.parent.getRowHeaderTable();
                var hdrRow = hdrTable && hdrTable.rows[0];
                var frozenCol = _this.parent.frozenColCount(sheet);
                if (frozenCol && !hdrRow) {
                    return;
                }
                for (var colIdx = args.colIdx; colIdx <= mergeArgs.range[3]; colIdx++) {
                    cellEle = _this.parent.getCell(firstRowIdx, colIdx, colIdx < frozenCol ? hdrRow : contRow);
                    if (cellEle && (cellEle.colSpan > 1 || cellEle.rowSpan > 1)) {
                        cellEle.style.display = 'none';
                        cellEle.removeAttribute('colSpan');
                        cellEle.removeAttribute('rowSpan');
                    }
                }
            }
        };
        var checkRowMerge = function (isColMerge) {
            mergeArgs.range = mergeArgs.range;
            if (isHiddenRow(sheet, mergeArgs.range[0]) && args.rowIdx >= mergeArgs.range[0] && args.rowIdx <= mergeArgs.range[2]) {
                isMergeApplied = false;
                for (var rowIdx = mergeArgs.range[0]; rowIdx < args.rowIdx; rowIdx++) {
                    if (!isHiddenRow(sheet, rowIdx)) {
                        isMergeApplied = true;
                        break;
                    }
                }
                if (cell.rowSpan > 1 && !isMergeApplied) {
                    var rowMergeCount = cell.rowSpan - _this.parent.hiddenCount(mergeArgs.range[0], mergeArgs.range[2]);
                    if (rowMergeCount > 0) {
                        clearMerge();
                        args.td.style.display = '';
                        args.colSpan = mergeCount;
                        args.rowSpan = rowMergeCount;
                        args.cell = cell;
                        args.isMerged = false;
                    }
                }
            }
            else if (isColMerge) {
                for (var rowIdx = mergeArgs.range[0]; isRowMergeCell && rowIdx < args.rowIdx; rowIdx++) {
                    if (!isHiddenRow(sheet, rowIdx)) {
                        isMergeApplied = true;
                        break;
                    }
                }
                if (!isMergeApplied) {
                    clearMerge();
                    args.td.style.display = '';
                    args.colSpan = mergeCount;
                    args.cell = cell;
                    args.isMerged = false;
                }
            }
        };
        if (args.cell.colSpan < 0) {
            if (args.colIdx - 1 > -1 && isHiddenCol(sheet, args.colIdx - 1)) {
                cell = getCell(args.rowIdx, args.colIdx - 1, sheet, false, true);
                isRowMergeCell = args.rowIdx - 1 > -1 && isHiddenRow(sheet, args.rowIdx - 1);
                if ((cell.colSpan !== undefined || cell.rowSpan !== undefined) && (cell.rowSpan === undefined ||
                    cell.rowSpan > 1 || isRowMergeCell)) {
                    mergeArgs = { range: [args.rowIdx, args.colIdx - 1, args.rowIdx, args.colIdx - 1] };
                    this.parent.notify(activeCellMergedRange, mergeArgs);
                    mergeArgs.range = mergeArgs.range;
                    cell = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet, false, true);
                    if (isHiddenCol(sheet, mergeArgs.range[1]) && args.colIdx >= mergeArgs.range[1] && args.colIdx <= mergeArgs.range[3]) {
                        for (var colIdx = mergeArgs.range[1]; colIdx < args.colIdx; colIdx++) {
                            if (!isHiddenCol(sheet, colIdx)) {
                                isMergeApplied = true;
                                break;
                            }
                        }
                        if (cell.colSpan > 1 && !isMergeApplied) {
                            mergeCount = cell.colSpan - this.parent.hiddenCount(mergeArgs.range[1], mergeArgs.range[3], 'columns');
                            if (mergeCount > 0) {
                                checkRowMerge(true);
                            }
                        }
                    }
                }
            }
        }
        else {
            if (args.rowIdx - 1 > -1 && isHiddenRow(sheet, args.rowIdx - 1)) {
                cell = getCell(args.rowIdx - 1, args.colIdx, sheet, false, true);
                if (cell.rowSpan !== undefined) {
                    mergeArgs = { range: [args.rowIdx - 1, args.colIdx, args.rowIdx - 1, args.colIdx] };
                    this.parent.notify(activeCellMergedRange, mergeArgs);
                    mergeArgs.range = mergeArgs.range;
                    cell = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet, false, true);
                    checkRowMerge();
                }
            }
        }
    };
    Merge.prototype.checkMerge = function (args) {
        var sheet = this.parent.getActiveSheet();
        var mergeArgs;
        var cell = getCell(args.rowIdx, args.colIdx, sheet) || {};
        if (args.isRow) {
            if (cell.colSpan === undefined || isHiddenCol(sheet, args.colIdx - 1)) {
                mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };
                mergeArgs.range = mergeArgs.range;
                this.parent.notify(activeCellMergedRange, mergeArgs);
                if ((isHiddenCol(sheet, args.colIdx - 1) && !isHiddenCol(sheet, mergeArgs.range[1])) || (args.isFreezePane &&
                    mergeArgs.range[0] < this.parent.frozenRowCount(sheet))) {
                    args.insideFreezePane = mergeArgs.range[0] < this.parent.frozenRowCount(sheet);
                    return;
                }
                if (args.colIdx !== this.parent.viewport.leftIndex + this.parent.frozenColCount(sheet) &&
                    isHiddenCol(sheet, args.colIdx - 1)) {
                    for (var colIdx = mergeArgs.range[1]; cell.colSpan !== undefined && colIdx < args.colIdx; colIdx++) {
                        if (!isHiddenCol(sheet, colIdx)) {
                            return;
                        }
                    }
                }
                cell = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet);
                var mergeCount = (mergeArgs.range[2] - args.rowIdx) + 1 -
                    this.parent.hiddenCount(args.rowIdx, mergeArgs.range[2]);
                if (mergeCount >= 1) {
                    this.merge({ rowIdx: mergeArgs.range[0], colIdx: mergeArgs.range[1], element: args.td });
                    if (mergeCount === 1) {
                        args.td.removeAttribute('rowspan');
                    }
                    else {
                        args.td.rowSpan = mergeCount;
                    }
                    args.td.style.display = '';
                }
            }
        }
        else {
            if (cell.rowSpan === undefined || isHiddenRow(sheet, args.rowIdx - 1)) {
                mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };
                mergeArgs.range = mergeArgs.range;
                this.parent.notify(activeCellMergedRange, mergeArgs);
                if ((isHiddenRow(sheet, args.rowIdx - 1) && !isHiddenRow(sheet, mergeArgs.range[0])) || (args.isFreezePane &&
                    mergeArgs.range[1] < this.parent.frozenColCount(sheet))) {
                    args.insideFreezePane = mergeArgs.range[1] < this.parent.frozenColCount(sheet);
                    return;
                }
                if (args.rowIdx !== this.parent.viewport.topIndex + this.parent.frozenRowCount(sheet) &&
                    isHiddenRow(sheet, args.rowIdx - 1)) {
                    for (var rowIdx = mergeArgs.range[0]; cell.rowSpan !== undefined && rowIdx < args.rowIdx; rowIdx++) {
                        if (!isHiddenRow(sheet, rowIdx)) {
                            return;
                        }
                    }
                }
                cell = getCell(mergeArgs.range[0], mergeArgs.range[1], sheet);
                var mergeCount = (mergeArgs.range[3] - args.colIdx) + 1 - this.parent.hiddenCount(args.colIdx, mergeArgs.range[3], 'columns');
                if (mergeCount >= 1) {
                    this.merge({ rowIdx: mergeArgs.range[0], colIdx: mergeArgs.range[1], element: args.td });
                    if (mergeCount === 1) {
                        args.td.removeAttribute('colspan');
                    }
                    else {
                        args.td.colSpan = mergeCount;
                    }
                    args.td.style.display = '';
                }
            }
        }
    };
    Merge.prototype.addEventListener = function () {
        this.parent.on(applyMerge, this.merge, this);
        this.parent.on(hiddenMerge, this.hideHandler, this);
        this.parent.on(checkPrevMerge, this.checkPrevMerge, this);
        this.parent.on(checkMerge, this.checkMerge, this);
    };
    /**
     * Destroy merge module.
     *
     * @returns {void} - Destroy merge module.
     */
    Merge.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Merge.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(applyMerge, this.merge);
            this.parent.off(hiddenMerge, this.hideHandler);
            this.parent.off(checkPrevMerge, this.checkPrevMerge);
            this.parent.off(checkMerge, this.checkMerge);
        }
    };
    /**
     * Get the merge module name.
     *
     * @returns {string} - Get the merge module name.
     */
    Merge.prototype.getModuleName = function () {
        return 'merge';
    };
    return Merge;
}());

/**
 * Represents Conditional Formatting support for Spreadsheet.
 */
var ConditionalFormatting = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet Conditional Formatting module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet Conditional Formatting module.
     */
    function ConditionalFormatting(parent) {
        this.divElements = [];
        this.spanElements = [];
        this.inputElements = [];
        this.dropDownListElements = [];
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the Conditional Formatting module.
     *
     * @returns {void} - To destroy the Conditional Formatting module.
     */
    ConditionalFormatting.prototype.destroy = function () {
        this.removeEventListener();
        if (this.dupData) {
            this.dupData = [];
        }
        if (this.colorData) {
            this.colorData = [];
        }
        this.parent = null;
    };
    ConditionalFormatting.prototype.addEventListener = function () {
        this.parent.on(applyCF, this.applyCF, this);
        this.parent.on(renderCFDlg, this.renderCFDlg, this);
        this.parent.on(clearCF, this.clearCF, this);
    };
    ConditionalFormatting.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(applyCF, this.applyCF);
            this.parent.off(renderCFDlg, this.renderCFDlg);
            this.parent.off(clearCF, this.clearCF);
        }
    };
    ConditionalFormatting.prototype.clearCF = function (args) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var clearFn = function (rIdx, cIdx, cell, td) {
            removeClass([td], ['e-redft', 'e-yellowft', 'e-greenft', 'e-redf', 'e-redt', 'e-iconset']);
            var styleVal;
            var style;
            ['backgroundColor', 'color'].forEach(function (styleProp) {
                if (td.style["" + styleProp]) {
                    td.style["" + styleProp] = '';
                    styleVal = cell && cell.style && cell.style["" + styleProp] || _this.parent.commonCellStyle["" + styleProp];
                    if (styleVal) {
                        style = {};
                        style["" + styleProp] = styleVal;
                        _this.parent.notify(applyCellFormat, { style: style, rowIdx: rIdx, colIdx: cIdx, td: td });
                    }
                }
            });
            var cfEle;
            ['.e-cf-databar', '.e-iconsetspan'].forEach(function (clsSelector) {
                cfEle = td.querySelector(clsSelector);
                var wrapElement = td.querySelector('.e-wrap-content');
                if (cfEle) {
                    if (wrapElement) {
                        wrapElement.removeChild(cfEle);
                    }
                    else {
                        td.removeChild(cfEle);
                    }
                    td.textContent = _this.parent.getDisplayText(cell);
                }
            });
        };
        this.updateRange(sheet, args.indexes, this.parent.frozenRowCount(sheet), this.parent.frozenColCount(sheet), getCellIndexes(sheet.topLeftCell), clearFn);
    };
    ConditionalFormatting.prototype.renderCFDlg = function (args) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var readonlyAlertThrow;
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 375, showCloseIcon: true, isModal: true, cssClass: 'e-conditionalformatting-dlg',
            header: args.action.replace('...', ''),
            beforeOpen: function (beforeOpenArgs) {
                var dlgArgs = {
                    dialogName: 'ConditionalFormatDialog',
                    element: beforeOpenArgs.element, target: beforeOpenArgs.target, cancel: beforeOpenArgs.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    beforeOpenArgs.cancel = true;
                }
                else {
                    dialogInst.dialogInstance.content = _this.cfDlgContent(args.action);
                    dialogInst.dialogInstance.dataBind();
                    focus(_this.parent.element);
                }
            },
            beforeClose: this.dialogBeforeClose.bind(this),
            close: function () {
                if (readonlyAlertThrow) {
                    _this.parent.notify(readonlyAlert, null);
                    readonlyAlertThrow = false;
                }
            },
            buttons: [{
                    buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true },
                    click: function () {
                        var sheet = _this.parent.getActiveSheet();
                        if (isReadOnlyCells(_this.parent, getSwapRange(getRangeIndexes(sheet.selectedRange)))) {
                            readonlyAlertThrow = true;
                        }
                        else {
                            _this.dlgClickHandler(args.action);
                        }
                        dialogInst.hide();
                    }
                }]
        });
    };
    ConditionalFormatting.prototype.dialogBeforeClose = function () {
        var numeric = this.numericTBElements;
        if (numeric && numeric.element) {
            numeric.destroy();
            numeric.element.remove();
        }
        this.numericTBElements = null;
        this.dropDownListElements.forEach(function (dropDownList) {
            if (dropDownList && dropDownList.element) {
                dropDownList.destroy();
                dropDownList.element.remove();
            }
        });
        this.dropDownListElements = [];
        if (this.value1Inp) {
            this.value1Inp.removeEventListener('input', this.validateCFInput.bind(this));
            if (this.value1Inp.parentNode) {
                this.value1Inp.parentNode.removeChild(this.value1Inp);
            }
            this.value1Inp = null;
        }
        if (this.value2Inp) {
            this.value2Inp.removeEventListener('input', this.validateCFInput.bind(this));
            if (this.value2Inp.parentNode) {
                this.value2Inp.parentNode.removeChild(this.value2Inp);
            }
            this.value2Inp = null;
        }
        removeElements(this.spanElements);
        this.spanElements = [];
        removeElements(this.inputElements);
        this.inputElements = [];
        removeElements(this.divElements);
        this.divElements = [];
    };
    ConditionalFormatting.prototype.dlgClickHandler = function (action) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var cont = this.parent.element.querySelector('.e-conditionalformatting-dlg .e-dlg-content .e-cf-dlg');
        var cf = { cFColor: this.getCFColor(cont.querySelector('.e-cfsub .e-input').value),
            range: this.parent.getActiveSheet().selectedRange };
        var cfInputs = cont.querySelectorAll('.e-cfmain .e-input');
        if (action === l10n.getConstant('DuplicateValues') + '...') {
            cf.type = cfInputs[0].value === l10n.getConstant('Duplicate') ? 'Duplicate' : 'Unique';
        }
        else {
            cf.type = this.getType(action);
            var cfValues = [];
            if (cfInputs[0]) {
                cfValues.push(cfInputs[0].value);
            }
            if (cfInputs[1]) {
                cfValues.push(cfInputs[1].value);
            }
            parseLocaleNumber(cfValues, this.parent);
            cf.value = cfValues.join(',');
        }
        this.parent.notify(setCFRule, { cfModel: cf, isAction: true });
    };
    ConditionalFormatting.prototype.getType = function (action) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var result;
        switch (action) {
            case l10n.getConstant('GreaterThan') + '...':
                result = 'GreaterThan';
                break;
            case l10n.getConstant('LessThan') + '...':
                result = 'LessThan';
                break;
            case l10n.getConstant('Between') + '...':
                result = 'Between';
                break;
            case l10n.getConstant('CFEqualTo') + '...':
                result = 'EqualTo';
                break;
            case l10n.getConstant('TextThatContains') + '...':
                result = 'ContainsText';
                break;
            case l10n.getConstant('ADateOccuring') + '...':
                result = 'DateOccur';
                break;
            case l10n.getConstant('Top10Items') + '...':
                result = 'Top10Items';
                break;
            case l10n.getConstant('Bottom10Items') + '...':
                result = 'Bottom10Items';
                break;
            case l10n.getConstant('Top10') + ' %...':
                result = 'Top10Percentage';
                break;
            case l10n.getConstant('Bottom10') + ' %...':
                result = 'Bottom10Percentage';
                break;
            case l10n.getConstant('AboveAverage') + '...':
                result = 'AboveAverage';
                break;
            case l10n.getConstant('BelowAverage') + '...':
                result = 'BelowAverage';
                break;
        }
        return result;
    };
    ConditionalFormatting.prototype.getCFColor = function (value) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var result = 'RedFT';
        switch (value) {
            case l10n.getConstant('LightRedFillWithDarkRedText'):
                result = 'RedFT';
                break;
            case l10n.getConstant('YellowFillWithDarkYellowText'):
                result = 'YellowFT';
                break;
            case l10n.getConstant('GreenFillWithDarkGreenText'):
                result = 'GreenFT';
                break;
            case l10n.getConstant('RedFill'):
                result = 'RedF';
                break;
            case l10n.getConstant('RedText'):
                result = 'RedT';
                break;
        }
        return result;
    };
    ConditionalFormatting.prototype.cfDlgContent = function (action) {
        var dlgText = this.getDlgText(action);
        var l10n = this.parent.serviceLocator.getService(locale);
        var dlgContent = this.parent.createElement('div', { className: 'e-cf-dlg' });
        var mainDiv = this.parent.createElement('div', { className: 'e-cfmain' });
        var subDiv = this.parent.createElement('div', { className: 'e-cfsub' });
        this.divElements.push(dlgContent);
        this.divElements.push(mainDiv);
        this.divElements.push(subDiv);
        var value1Text = this.parent.createElement('span', { className: 'e-header e-top-header' });
        value1Text.innerText = dlgText;
        this.value1Inp =
            this.parent.createElement('input', { className: 'e-input', id: 'valueInput', attrs: { type: 'text',
                    'aria-label': dlgText } });
        var duplicateSelectEle = this.parent.createElement('input', { className: 'e-select' });
        var subDivText = this.parent.createElement('span', { className: 'e-header' });
        subDivText.innerText = l10n.getConstant('With');
        var colorSelectEle = this.parent.createElement('input', { className: 'e-select' });
        this.spanElements.push(value1Text);
        this.inputElements.push(duplicateSelectEle);
        this.spanElements.push(subDivText);
        this.inputElements.push(colorSelectEle);
        dlgContent.appendChild(mainDiv);
        dlgContent.appendChild(subDiv);
        mainDiv.appendChild(value1Text);
        var setValidation;
        if (action !== l10n.getConstant('DuplicateValues') + '...') {
            if (action !== l10n.getConstant('AboveAverage') + '...' && action !== l10n.getConstant('BelowAverage') + '...') {
                mainDiv.appendChild(this.value1Inp);
                setValidation = true;
                var percent = action === l10n.getConstant('Top10') + ' %...' || action === l10n.getConstant('Bottom10') + ' %...';
                if (action === l10n.getConstant('Top10Items') + '...' || action === l10n.getConstant('Bottom10Items') + '...' || percent) {
                    this.value1Inp.maxLength = percent ? 3 : 4;
                    var numeric = new NumericTextBox({ value: 10, min: 1, max: percent ? 100 : 1000, format: '###' });
                    this.numericTBElements = numeric;
                    numeric.appendTo(this.value1Inp);
                }
            }
        }
        else {
            mainDiv.appendChild(duplicateSelectEle);
            this.dupData = [
                { text: l10n.getConstant('Duplicate'), id: 'duplicate' },
                { text: l10n.getConstant('Unique'), id: 'unique' }
            ];
            var dupList = new DropDownList({
                dataSource: this.dupData,
                index: 0,
                popupHeight: '200px'
            });
            this.dropDownListElements.push(dupList);
            dupList.appendTo(duplicateSelectEle);
        }
        if (action === l10n.getConstant('Between') + '...') {
            var value2Text = this.parent.createElement('span', { className: 'e-header e-header-2' });
            value2Text.innerText = l10n.getConstant('And');
            this.value2Inp = this.parent.createElement('input', { className: 'e-input e-between' });
            this.spanElements.push(value2Text);
            mainDiv.appendChild(value2Text);
            mainDiv.appendChild(this.value2Inp);
            this.value2Inp.addEventListener('input', this.validateCFInput.bind(this));
        }
        if (setValidation) {
            this.validateCFInput({ target: this.value1Inp });
            this.value1Inp.addEventListener('input', this.validateCFInput.bind(this));
        }
        subDiv.appendChild(subDivText);
        subDiv.appendChild(colorSelectEle);
        this.colorData = [
            { text: l10n.getConstant('LightRedFillWithDarkRedText'), value: 'redft', id: 'redft' },
            { text: l10n.getConstant('YellowFillWithDarkYellowText'), id: 'yellowft' },
            { text: l10n.getConstant('GreenFillWithDarkGreenText'), id: 'greenft' },
            { text: l10n.getConstant('RedFill'), id: 'redf' },
            { text: l10n.getConstant('RedText'), id: 'redt' }
        ];
        var colorList = new DropDownList({
            dataSource: this.colorData,
            index: 0,
            popupHeight: '200px'
        });
        this.dropDownListElements.push(colorList);
        colorList.appendTo(colorSelectEle);
        return dlgContent;
    };
    ConditionalFormatting.prototype.validateCFInput = function (e) {
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var text = e.target.value;
        var btn = dialogInst.dialogInstance.element.getElementsByClassName('e-primary')[0];
        if (text && (e.target.classList.contains('e-between') || e.target.parentElement.querySelector('.e-between'))) {
            text = e.target.parentElement.querySelector((e.target.classList.contains('e-between') ? '.e-input' : '.e-between')).value;
        }
        btn.disabled = !(text.trim());
    };
    ConditionalFormatting.prototype.checkCellHandler = function (rowIdx, colIdx, cf) {
        var ranges = cf.range.trim().split(',');
        return ranges.some(function (range) {
            var indexes = getRangeIndexes(range.includes(':') ? range : range + ":" + range);
            return rowIdx >= indexes[0] && rowIdx <= indexes[2] && colIdx >= indexes[1] && colIdx <= indexes[3];
        });
    };
    ConditionalFormatting.prototype.getDlgText = function (action) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var result = '';
        switch (action) {
            case l10n.getConstant('GreaterThan') + '...':
                result = l10n.getConstant('FormatCellsGreaterThan');
                break;
            case l10n.getConstant('LessThan') + '...':
                result = l10n.getConstant('FormatCellsLessThan');
                break;
            case l10n.getConstant('Between') + '...':
                result = l10n.getConstant('FormatCellsBetween');
                break;
            case l10n.getConstant('CFEqualTo') + '...':
                result = l10n.getConstant('FormatCellsEqualTo');
                break;
            case l10n.getConstant('TextThatContains') + '...':
                result = l10n.getConstant('FormatCellsThatContainTheText');
                break;
            case l10n.getConstant('ADateOccuring') + '...':
                result = l10n.getConstant('FormatCellsThatContainADateOccurring');
                break;
            case l10n.getConstant('DuplicateValues') + '...':
                result = l10n.getConstant('FormatCellsDuplicate');
                break;
            case l10n.getConstant('Top10Items') + '...':
                result = l10n.getConstant('FormatCellsTop');
                break;
            case l10n.getConstant('Top10') + ' %...':
                result = l10n.getConstant('FormatCellsTop');
                break;
            case l10n.getConstant('Bottom10Items') + '...':
                result = l10n.getConstant('FormatCellsBottom');
                break;
            case l10n.getConstant('Bottom10') + ' %...':
                result = l10n.getConstant('FormatCellsBottom');
                break;
            case l10n.getConstant('AboveAverage') + '...':
                result = l10n.getConstant('FormatCellsAbove');
                break;
            case l10n.getConstant('BelowAverage') + '...':
                result = l10n.getConstant('FormatCellsBelow');
                break;
        }
        return result;
    };
    ConditionalFormatting.prototype.updateResult = function (cf, sheet, isDataBar, isColorScale, isAverage, isTopBottom, isIconSets, input) {
        var valueObj = {};
        var dupValueObj = {};
        var rangeArr = cf.range.split(',');
        var result = [];
        var rangeIndexes;
        var val;
        var cell;
        var cellType;
        var updateFn;
        if (isDataBar) {
            updateFn = function () {
                if (isNumber(val) && cellType !== 'Text') {
                    var intVal = parseFloat(val);
                    if (intVal >= 0) {
                        if (result[0] === undefined || intVal > result[0]) {
                            result[0] = intVal;
                        }
                    }
                    else if (result[1] === undefined || intVal < result[1]) {
                        result[1] = intVal;
                    }
                }
            };
        }
        else if (isColorScale) {
            updateFn = function () {
                if (isNumber(val) && cellType !== 'Text') {
                    var intVal = parseFloat(val);
                    result.push(Number(intVal));
                }
            };
        }
        else if (isAverage) {
            result = [0, 0];
            updateFn = function () {
                if (isNumber(val) && cellType !== 'Text') {
                    result[0] += parseFloat(val);
                    result[1]++;
                }
            };
        }
        else if (isTopBottom) {
            updateFn = function () {
                if (isNumber(val) && cellType !== 'Text') {
                    result.push(parseFloat(val));
                }
            };
        }
        else if (isIconSets) {
            updateFn = function () {
                if (isNumber(val) && cellType !== 'Text') {
                    var intVal = parseFloat(val);
                    if (result[0] === undefined || intVal < result[0]) {
                        result[0] = intVal;
                    }
                    if (result[1] === undefined || intVal > result[1]) {
                        result[1] = intVal;
                    }
                }
            };
        }
        else {
            updateFn = function () {
                if (valueObj["" + val]) {
                    if (val !== '') {
                        if (!dupValueObj["" + val]) {
                            dupValueObj["" + val] = true;
                            result.push(val);
                        }
                    }
                }
                else {
                    valueObj["" + val] = true;
                }
            };
        }
        for (var rangeIdx = 0; rangeIdx < rangeArr.length; rangeIdx++) {
            rangeIndexes = getRangeIndexes(rangeArr[rangeIdx]);
            for (var i = rangeIndexes[0]; i <= rangeIndexes[2]; i++) {
                for (var j = rangeIndexes[1]; j <= rangeIndexes[3]; j++) {
                    cell = getCell(i, j, sheet, false, true);
                    cellType = '';
                    if (!isNullOrUndefined(cell.value)) {
                        val = cell.value.toString().toLowerCase();
                        cellType = getTypeFromFormat(cell.format);
                        updateFn();
                    }
                    else if (cell.formula) {
                        this.parent.notify(calculateFormula, {
                            cell: cell, rowIdx: i, colIdx: j, sheetIndex: this.parent.activeSheetIndex
                        });
                        val = cell.value.toString().toLowerCase();
                        cellType = getTypeFromFormat(cell.format);
                        updateFn();
                    }
                }
            }
        }
        if (isColorScale || isTopBottom) {
            result = result.sort(function (n1, n2) { return n1 - n2; });
            if (!cf.type.includes('Bottom')) {
                result = result.reverse();
            }
            if (isTopBottom) {
                var endIdx = parseFloat(input);
                if (cf.type.includes('Percentage')) {
                    endIdx = endIdx / (100 / result.length);
                    endIdx = (endIdx < 1) ? 1 : endIdx;
                }
                result = result.slice(0, endIdx);
            }
        }
        else if (isAverage) {
            result = [result[0] / result[1]];
            if (!result[0]) {
                result = [];
            }
        }
        cf.result = result;
    };
    ConditionalFormatting.prototype.applyCF = function (args) {
        var rangeCheck = !args.cfModel;
        var sheet = this.parent.getActiveSheet();
        var cfRule = args.cfModel || sheet.conditionalFormats;
        var indexes = [args.indexes];
        if (args.refreshAll) {
            indexes = getViewportIndexes(this.parent, this.parent.viewport);
        }
        var updatedCFCellRef = {};
        for (var i = cfRule.length - 1; i >= 0; i--) {
            if (rangeCheck && (indexes[0].length === 2 ? !this.checkCellHandler(args.indexes[0], args.indexes[1], cfRule[i]) :
                !checkRange(indexes, cfRule[i].range))) {
                continue;
            }
            this.updateCF(args, sheet, cfRule[i], updatedCFCellRef);
        }
    };
    ConditionalFormatting.prototype.updateCF = function (args, sheet, cf, updatedCFCellRef) {
        var _this = this;
        var value1;
        var value2 = '';
        var isLongDate = false;
        if (cf.value) {
            var dateValues = [];
            var valueArr = [];
            if (cf.type === 'Between') {
                dateValues = cf.value.split('"').filter(function (date) { return date.trim() && date.trim() !== ','; });
                if (dateValues.length > 1) {
                    valueArr = dateValues;
                    isLongDate = true;
                }
                else {
                    valueArr = cf.value.split(',').filter(function (value) { return !!value.trim(); });
                }
            }
            else {
                valueArr = [cf.value];
            }
            if (valueArr.length > 1) {
                if (valueArr[0].split('(').length > 1) {
                    var valueStr = '';
                    for (var idx = 0; idx < valueArr.length; idx++) {
                        valueStr += valueArr[idx] + ',';
                        if (valueStr.split('(').length === valueStr.split(')').length && value1 === undefined) {
                            value1 = valueStr.substring(0, valueStr.length - 1);
                            valueStr = '';
                        }
                    }
                    value2 = valueStr.substring(0, valueStr.length - 1);
                }
                else {
                    value1 = valueArr[0];
                    for (var idx = 1; idx < valueArr.length; idx++) {
                        value2 += idx + 1 === valueArr.length ? valueArr[idx] : valueArr[idx] + ',';
                    }
                }
            }
            else {
                value1 = valueArr[0] || cf.value;
            }
        }
        if (!cf.type) {
            cf.type = 'GreaterThan';
        }
        var style;
        var cfColor;
        if (cf.format && cf.format.style) {
            style = skipDefaultValue(cf.format.style, true);
            if (!Object.keys(style).length) {
                cfColor = cf.cFColor;
                if (!cfColor) {
                    cfColor = cf.cFColor = 'RedFT';
                }
            }
        }
        else {
            style = {};
            cfColor = cf.cFColor;
            if (!cfColor) {
                cfColor = cf.cFColor = 'RedFT';
            }
        }
        var isAverage = cf.type.includes('Average');
        var isTopBottom = cf.type.includes('10') && isNumber(value1);
        var isIconSets = (cf.type.includes('Three') || cf.type.includes('Four') || cf.type.includes('Five'));
        var isDataBar = cf.type.includes('DataBar');
        var isColorScale = cf.type.includes('ColorScale');
        if ((!args.isRender || !cf.result) && (cf.type === 'Duplicate' || cf.type === 'Unique' || isDataBar
            || isColorScale || isAverage || isTopBottom || isIconSets)) {
            this.updateResult(cf, sheet, isDataBar, isColorScale, isAverage, isTopBottom, isIconSets, value1);
        }
        var updateCF = function (rIdx, cIdx, cell, td, currentRowHeight, isLongDate) {
            var cellVal = cell && !isNullOrUndefined(cell.value) ? cell.value.toString() : '';
            var isApply;
            var dateEventArgs;
            var isValueCFRule = true;
            var cellType = cell ? getTypeFromFormat(cell.format) : '';
            switch (cf.type) {
                case 'GreaterThan':
                case 'LessThan':
                    isApply = _this.isGreaterThanLessThan(cf, cellVal, value1, cellType);
                    break;
                case 'Between':
                    isApply = isNumber(cellVal) && cellType !== 'Text' && _this.isBetWeen(cf, cellVal, value1, value2, isLongDate);
                    break;
                case 'EqualTo':
                    isApply = _this.isEqualTo(cf, cellVal, value1);
                    break;
                case 'ContainsText':
                    isApply = cellVal && value1 && _this.isContainsText(cellVal, value1);
                    break;
                case 'DateOccur':
                    dateEventArgs = { value: value1, cell: {}, updatedVal: value1 };
                    if (!isNumber(value1)) {
                        _this.parent.notify(checkDateFormat, dateEventArgs);
                    }
                    isApply = cellVal === dateEventArgs.updatedVal;
                    break;
                case 'Unique':
                    isApply = cellVal !== '' && cf.result.indexOf(cellVal.toLowerCase()) === -1;
                    break;
                case 'Duplicate':
                    isApply = cf.result.indexOf(cellVal.toLowerCase()) > -1;
                    break;
                case 'Top10Items':
                case 'Bottom10Items':
                case 'Top10Percentage':
                case 'Bottom10Percentage':
                    if (cf.result) {
                        var value = parseFloat(cellVal);
                        if (isDateTime(cellVal)) {
                            value = dateToInt(cellVal);
                        }
                        isApply = cf.result.indexOf(value) > -1;
                    }
                    break;
                case 'AboveAverage':
                    isApply = cf.result.length && isNumber(cellVal) && cellType !== 'Text' && parseFloat(cellVal) > cf.result[0];
                    break;
                case 'BelowAverage':
                    isApply = cf.result.length && isNumber(cellVal) && cellType !== 'Text' && parseFloat(cellVal) < cf.result[0];
                    break;
                default:
                    isValueCFRule = false;
                    if (isDataBar) {
                        if (!updatedCFCellRef[rIdx + "_" + cIdx + "_bars"]) {
                            updatedCFCellRef[rIdx + "_" + cIdx + "_bars"] = true;
                            _this.applyDataBars(cellVal, cf, td, rIdx, cellType, currentRowHeight);
                        }
                    }
                    else if (isColorScale) {
                        if (!updatedCFCellRef[rIdx + "_" + cIdx]) {
                            var value = isNumber(cellVal) ? parseFloat(cellVal) : NaN;
                            if (isNaN(value)) {
                                if (td.style.backgroundColor && !td.classList.contains('e-yellowft') && !td.classList.contains('e-greenft') && !td.classList.value.includes('e-redf')) {
                                    td.style.backgroundColor = '';
                                    var style_1 = extend({}, _this.parent.commonCellStyle, cell && cell.style);
                                    if (style_1.backgroundColor) {
                                        _this.parent.notify(applyCellFormat, {
                                            style: { backgroundColor: style_1.backgroundColor }, td: td, rowIdx: rIdx,
                                            colIdx: cIdx
                                        });
                                    }
                                }
                            }
                            else {
                                var valArr = cf.result;
                                var idx = valArr.indexOf(value);
                                if (idx === -1) {
                                    if (td.style.backgroundColor) {
                                        td.style.backgroundColor = '';
                                        var style_2 = extend({}, _this.parent.commonCellStyle, cell && cell.style);
                                        if (style_2.backgroundColor) {
                                            _this.parent.notify(applyCellFormat, {
                                                style: { backgroundColor: style_2.backgroundColor }, td: td, rowIdx: rIdx,
                                                colIdx: cIdx
                                            });
                                        }
                                    }
                                }
                                else {
                                    var colors = _this.getColor(cf.type);
                                    td.style.backgroundColor = idx === 0 ? colors[0] :
                                        (idx === valArr.length - 1 ? colors[colors.length - 1] : (valArr.length === 3 && idx === 1 ? colors[1] :
                                            _this.getGradient(idx, colors[0], colors[1], colors[2], valArr.length)));
                                    updatedCFCellRef[rIdx + "_" + cIdx] = true;
                                }
                            }
                        }
                    }
                    else {
                        if (!updatedCFCellRef[rIdx + "_" + cIdx + "_icons"]) {
                            updatedCFCellRef[rIdx + "_" + cIdx + "_icons"] = true;
                            var cfIcon = _this.parent.createElement('span', { className: 'e-icon e-iconsetspan' });
                            var iconSetUpdated = _this.applyIconSet(cellVal, cf, td, cfIcon, cellType);
                            if (iconSetUpdated && cell && cell.format && cell.format.includes('*') &&
                                getTypeFromFormat(cell.format) !== 'Accounting') {
                                _this.parent.notify(rowFillHandler, { cell: cell, cellEle: td, rowIdx: rIdx, colIdx: cIdx, updateFillSize: true,
                                    iconSetSpan: cfIcon });
                            }
                        }
                    }
                    break;
            }
            if (args.isAction && isValueCFRule) {
                _this.parent.trigger('beforeConditionalFormat', { conditionalFormat: cf, cell: cell, element: td, apply: isApply,
                    address: getCellAddress(rIdx, cIdx) });
                if (!isApply && args.isEdit && !updatedCFCellRef[rIdx + "_" + cIdx]) {
                    var style_3;
                    if (cfColor) {
                        if (td.className.includes('e-' + cfColor.toLowerCase())) {
                            td.classList.remove('e-' + cfColor.toLowerCase());
                            td.style.backgroundColor = '';
                            td.style.color = '';
                            style_3 = extend({}, _this.parent.commonCellStyle, cell && cell.style);
                            if (style_3.backgroundColor || style_3.color) {
                                _this.parent.notify(applyCellFormat, { rowIdx: rIdx, colIdx: cIdx, td: td,
                                    style: { backgroundColor: style_3.backgroundColor, color: style_3.color } });
                            }
                        }
                    }
                    else {
                        td.removeAttribute('style');
                        style_3 = extend({}, _this.parent.commonCellStyle, cell && cell.style);
                        if (Object.keys(style_3).length) {
                            _this.parent.notify(applyCellFormat, { style: style_3, rowIdx: rIdx, colIdx: cIdx, td: td });
                        }
                    }
                }
            }
            if (isApply && !updatedCFCellRef[rIdx + "_" + cIdx]) {
                updatedCFCellRef[rIdx + "_" + cIdx] = true;
                removeClass([td], ['e-redft', 'e-yellowft', 'e-greenft', 'e-redf', 'e-redt']);
                if (cfColor) {
                    td.classList.add('e-' + cfColor.toLowerCase());
                    _this.setCFStyle(style, cf);
                }
                Object.assign(td.style, style);
            }
        };
        if (args.ele) {
            updateCF(args.indexes[0], args.indexes[1], args.cell, args.ele, args.resizedRowHeight, isLongDate);
        }
        else {
            var rangeArr = cf.range.split(',');
            var frozenRow = this.parent.frozenRowCount(sheet);
            var frozenCol = this.parent.frozenColCount(sheet);
            var topLeftIdx = getCellIndexes(sheet.topLeftCell);
            for (var i = 0; i < rangeArr.length; i++) {
                this.updateRange(sheet, getRangeIndexes(rangeArr[i]), frozenRow, frozenCol, topLeftIdx, updateCF, isLongDate);
            }
        }
    };
    ConditionalFormatting.prototype.updateRange = function (sheet, rangeIdx, frozenRow, frozenCol, topLeftIdx, invokeFn, isLongDate) {
        rangeIdx[0] = rangeIdx[0] < frozenRow ? (rangeIdx[0] < topLeftIdx[0] ? topLeftIdx[0] : rangeIdx[0]) :
            (rangeIdx[0] < this.parent.viewport.topIndex + frozenRow ? this.parent.viewport.topIndex + frozenRow : rangeIdx[0]);
        rangeIdx[1] = rangeIdx[1] < frozenCol ? (rangeIdx[1] < topLeftIdx[1] ? topLeftIdx[1] : rangeIdx[1]) :
            (rangeIdx[1] < this.parent.viewport.leftIndex + frozenCol ? this.parent.viewport.leftIndex + frozenCol : rangeIdx[1]);
        rangeIdx[2] = rangeIdx[2] < frozenRow ? (rangeIdx[2] < topLeftIdx[0] ? topLeftIdx[0] - 1 :
            rangeIdx[2]) : (rangeIdx[2] > this.parent.viewport.bottomIndex ? this.parent.viewport.bottomIndex : rangeIdx[2]);
        rangeIdx[3] = rangeIdx[3] < frozenCol ? (rangeIdx[3] < topLeftIdx[1] ? topLeftIdx[1] - 1 : rangeIdx[3]) :
            (rangeIdx[3] > this.parent.viewport.rightIndex ? this.parent.viewport.rightIndex : rangeIdx[3]);
        var td;
        for (var rowIdx = rangeIdx[0]; rowIdx <= rangeIdx[2]; rowIdx++) {
            if (frozenRow && rowIdx === frozenRow) {
                rowIdx = this.parent.viewport.topIndex + frozenRow;
            }
            if (isHiddenRow(sheet, rowIdx)) {
                continue;
            }
            for (var colIdx = rangeIdx[1]; colIdx <= rangeIdx[3]; colIdx++) {
                if (frozenCol && colIdx === frozenCol) {
                    colIdx = this.parent.viewport.leftIndex + frozenCol;
                }
                if (isHiddenCol(sheet, colIdx)) {
                    continue;
                }
                td = this.parent.getCell(rowIdx, colIdx);
                if (td) {
                    invokeFn(rowIdx, colIdx, getCell(rowIdx, colIdx, sheet), td, undefined, isLongDate);
                }
            }
        }
    };
    ConditionalFormatting.prototype.applyIconSet = function (val, cf, cellEle, cfIcon, cellType) {
        var iconSetExist = cellEle.classList.contains('e-iconset');
        var wrapText = cellEle.querySelector('.e-wrap-content');
        if (iconSetExist) {
            cellEle.classList.remove('e-iconset');
            var iconSpan = cellEle.querySelector('.e-iconsetspan');
            if (iconSpan) {
                if (wrapText) {
                    wrapText.removeChild(iconSpan);
                }
                else {
                    cellEle.removeChild(iconSpan);
                }
            }
        }
        var value = isNumber(val) ? parseFloat(val) : NaN;
        var result = cf.result;
        if (isNaN(value) || (result[0] === undefined && result[1] === undefined) || (isNumber(val) && cellType === 'Text')) {
            return iconSetExist;
        }
        var min = result[0];
        var max = result[1];
        var iconList = this.getIconList(cf.type).split(',');
        var currentSymbol;
        if (iconList.length === 3) {
            var maxPercent = min + (0.67 * ((max) - (min)));
            var minPercent = min + (0.33 * ((max) - (min)));
            currentSymbol =
                'e-' + (value >= maxPercent ? iconList[0].trim() : value >= minPercent ? iconList[1].trim() : iconList[2].trim());
        }
        else if (iconList.length === 4) {
            var percent1 = min + (0.25 * ((max) - (min)));
            var percent2 = min + (0.50 * ((max) - (min)));
            var percent3 = min + (0.75 * ((max) - (min)));
            currentSymbol =
                'e-' + (value >= percent3 ? iconList[0].trim() : value >= percent2 ? iconList[1].trim() : value >= percent1 ?
                    iconList[2].trim() : iconList[3].trim());
        }
        else if (iconList.length === 5) {
            var percent1 = min + (0.20 * ((max) - (min)));
            var percent2 = min + (0.40 * ((max) - (min)));
            var percent3 = min + (0.60 * ((max) - (min)));
            var percent4 = min + (0.80 * ((max) - (min)));
            currentSymbol =
                'e-' + (value >= percent4 ? iconList[0].trim() : value >= percent3 ? iconList[1].trim() : value >= percent2 ?
                    iconList[2].trim() : value >= percent1 ? iconList[3].trim() : iconList[4].trim());
        }
        cfIcon.classList.add(currentSymbol);
        var dataBar = cellEle.querySelector('.e-cf-databar');
        if (dataBar) {
            cfIcon.style.height = dataBar.style.height;
            cfIcon.classList.add(cellEle.style.verticalAlign === 'top' ? 'e-cf-icon-top' : cellEle.style.verticalAlign === 'middle' ?
                'e-cf-icon-middle' : 'e-cf-icon-end');
        }
        if (wrapText) {
            wrapText.insertBefore(cfIcon, wrapText.firstChild);
        }
        else {
            cellEle.insertBefore(cfIcon, cellEle.childNodes[0]);
        }
        cellEle.classList.add('e-iconset');
        return true;
    };
    ConditionalFormatting.prototype.getIconList = function (iconName) {
        var result = '3arrows-1,3arrows-2,3arrows-3';
        switch (iconName) {
            case 'ThreeArrows':
                return '3arrows-1,3arrows-2,3arrows-3';
            case 'ThreeArrowsGray':
                return '3arrowsgray-1,3arrowsgray-2,3arrowsgray-3';
            case 'FourArrowsGray':
                return '4arrowsgray-1,4arrowsgray-2,4arrowsgray-3,4arrowsgray-4';
            case 'FourArrows':
                return '4arrows-1,4arrows-2,4arrows-3,4arrows-4';
            case 'FiveArrowsGray':
                return '5arrowsgray-1,5arrowsgray-2,5arrowsgray-3,5arrowsgray-4,5arrowsgray-5';
            case 'FiveArrows':
                return '5arrows-1,5arrows-2,5arrows-3,5arrows-4,5arrows-5';
            case 'ThreeTrafficLights1':
                return '3trafficlights-1,3trafficlights-2,3trafficlights-3';
            case 'ThreeTrafficLights2':
                return '3rafficlights2-1,3rafficlights2-2,3rafficlights2-3';
            case 'ThreeSigns':
                return '3signs-1,3signs-2,3signs-3';
            case 'FourTrafficLights':
                return '4trafficlights-1,4trafficlights-2,4trafficlights-3,4trafficlights-4';
            case 'FourRedToBlack':
                return '4redtoblack-1,4redtoblack-2,4redtoblack-3,4redtoblack-4';
            case 'ThreeSymbols':
                return '3symbols-1,3symbols-2,3symbols-3';
            case 'ThreeSymbols2':
                return '3symbols2-1,3symbols2-2,3symbols2-3';
            case 'ThreeFlags':
                return '3flags-1,3flags-2,3flags-3';
            case 'FourRating':
                return '4rating-4,4rating-3,4rating-2,4rating-1';
            case 'FiveQuarters':
                return '5quarters-1,5quarters-2,5quarters-3,5quarters-4,5quarters-5';
            case 'FiveRating':
                return '5rating-5,5rating-4,5rating-3,5rating-2,5rating-1';
            case 'ThreeTriangles':
                return '3triangles-1,3triangles-2,3triangles-3';
            case 'ThreeStars':
                return '3stars-1,3stars-2,3stars-3';
            case 'FiveBoxes':
                return '5boxes-1,5boxes-2,5boxes-3,5boxes-4,5boxes-5';
        }
        return result;
    };
    ConditionalFormatting.prototype.applyDataBars = function (val, cf, td, rIdx, cellType, currentRowHeight) {
        var sheet = this.parent.getActiveSheet();
        var result = cf.result;
        var leftStandardWidth = 0;
        var topVal;
        var value;
        if (isNumber(val)) {
            value = parseFloat(val);
        }
        if ((result[0] === undefined && result[1] === undefined) || isNaN(value) || (isNumber(val) && cellType === 'Text')) {
            var dataBar = td.getElementsByClassName('e-cf-databar')[0];
            if (dataBar) {
                var textContent = dataBar.getElementsByClassName('e-databar-value')[0].textContent;
                var hyperlink_1 = td.querySelector('.e-hyperlink');
                var noteIndicator_1 = td.querySelector('.e-addNoteIndicator');
                var wrapText_1 = td.querySelector('.e-wrap-content');
                if (wrapText_1) {
                    wrapText_1.textContent = '';
                    if (hyperlink_1) {
                        wrapText_1.appendChild(hyperlink_1);
                    }
                    else {
                        wrapText_1.innerText = textContent;
                    }
                }
                else {
                    td.removeChild(dataBar);
                    if (hyperlink_1) {
                        td.appendChild(hyperlink_1);
                    }
                    else {
                        td.innerText = textContent;
                    }
                }
                if (noteIndicator_1) {
                    td.appendChild(noteIndicator_1);
                }
            }
            return;
        }
        if (result[0] !== undefined && result[1] !== undefined) {
            topVal = result[0] + Math.abs(result[1]);
            leftStandardWidth = Math.abs((result[1] / topVal) * 100);
        }
        else if (result[0] !== undefined) {
            topVal = result[0];
        }
        else {
            topVal = result[1];
        }
        var databar = this.parent.createElement('div', { id: 'spreadsheet-databar', className: 'e-cf-databar' });
        var leftSpan = this.parent.createElement('span', { id: 'spreadsheet-leftspan', className: 'e-databar' });
        var rightSpan = this.parent.createElement('span', { id: 'spreadsheet-rightspan', className: 'e-databar' });
        var dataSpan = this.parent.createElement('span', { id: 'spreadsheet-dataspan', className: 'e-databar-value' });
        var iconSetSpan = td.querySelector('.e-iconsetspan');
        var noteIndicator = td.querySelector('.e-addNoteIndicator');
        var wrapText = td.querySelector('.e-wrap-content');
        var rowHeight = currentRowHeight ? currentRowHeight : getRowHeight(sheet, rIdx, true);
        var currencySpan = td.querySelector('#' + this.parent.element.id + '_currency');
        databar.style.height = rowHeight - 1 + 'px';
        if (iconSetSpan) {
            iconSetSpan.style.height = rowHeight - 1 + 'px';
            iconSetSpan.classList.add(td.style.verticalAlign === 'top' ? 'e-cf-icon-top' : td.style.verticalAlign === 'middle' ?
                'e-cf-icon-middle' : 'e-cf-icon-end');
        }
        if (currencySpan) {
            currencySpan.style.alignItems = td.style.verticalAlign === 'top' ? 'start' : td.style.verticalAlign === 'middle' ?
                'center' : 'end';
            currencySpan.classList.add('e-cf-currency');
        }
        var cfColor = cf.type[0];
        if (cfColor === 'L') {
            cfColor += 'B';
        }
        if (result[1] === undefined) {
            rightSpan.style.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';
            rightSpan.style.height = rowHeight - 3 + 'px';
            rightSpan.style.backgroundColor = this.getColor(cfColor)[0];
            rightSpan.style.left = '0px';
        }
        else if (result[0] === undefined) {
            rightSpan.style.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';
            rightSpan.style.height = rowHeight - 3 + 'px';
            rightSpan.style.backgroundColor = this.getColor('R')[0];
            rightSpan.style.left = '0px';
        }
        else if (value >= 0) {
            leftSpan.style.width = leftStandardWidth + '%';
            leftSpan.style.height = rowHeight - 3 + 'px'; // -3 buffer of data bar.
            leftSpan.style.backgroundColor = 'transparent';
            leftSpan.style.left = '0px';
            rightSpan.style.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';
            rightSpan.style.height = rowHeight - 3 + 'px';
            rightSpan.style.backgroundColor = this.getColor(cfColor)[0];
            rightSpan.style.left = leftStandardWidth + '%';
        }
        else {
            leftSpan.style.width = '' + Math.ceil(Math.abs((value / topVal) * 100)) + '%';
            leftSpan.style.height = rowHeight - 3 + 'px';
            leftSpan.style.backgroundColor = this.getColor('R')[0];
            if (leftSpan.style.width === leftStandardWidth + '%') {
                leftSpan.style.left = '0px';
            }
            else {
                leftSpan.style.right = (100 - leftStandardWidth) + '%';
            }
        }
        dataSpan.style.fontSize = td.style.fontSize || '11pt';
        dataSpan.style.alignItems = td.style.verticalAlign === 'top' ? 'start' : td.style.verticalAlign === 'middle' ?
            'center' : 'end';
        dataSpan.style.textDecoration = td.style.textDecoration;
        var curEle = td.querySelector("#" + this.parent.element.id + "_currency");
        if (curEle) {
            databar.appendChild(curEle);
        }
        var hyperlink = td.querySelector('.e-hyperlink');
        if (hyperlink) {
            dataSpan.appendChild(hyperlink);
        }
        else {
            var dataContent = td.querySelector('.e-validation-list') ? td.innerText : td.textContent;
            dataSpan.innerText = dataContent;
            if (dataContent === '') {
                dataSpan.appendChild(document.createTextNode(dataContent));
            }
        }
        databar.appendChild(leftSpan);
        databar.appendChild(rightSpan);
        databar.appendChild(dataSpan);
        td.textContent = '';
        if (wrapText) {
            wrapText.textContent = '';
            if (iconSetSpan) {
                wrapText.appendChild(iconSetSpan);
            }
            wrapText.appendChild(databar);
            td.appendChild(wrapText);
        }
        else {
            if (iconSetSpan) {
                td.insertBefore(iconSetSpan, td.firstElementChild);
            }
            td.appendChild(databar);
        }
        if (noteIndicator) {
            td.appendChild(noteIndicator);
        }
    };
    ConditionalFormatting.prototype.getColor = function (cfColor) {
        if (cfColor === 'LB') {
            return ['#008aef'];
        }
        var colorCodeArr = cfColor.split('');
        var colorArr = [];
        for (var i = 0; i < colorCodeArr.length; i++) {
            switch (colorCodeArr[i]) {
                case 'G':
                    colorArr.push('#63be7b');
                    break;
                case 'Y':
                    colorArr.push('#ffeb84');
                    break;
                case 'R':
                    colorArr.push('#f8696b');
                    break;
                case 'W':
                    colorArr.push('#ffffff');
                    break;
                case 'B':
                    colorArr.push('#5a8ac6');
                    break;
                case 'O':
                    colorArr.push('#ffb628');
                    break;
                case 'LB':
                    colorArr.push('#008aef');
                    break;
                case 'P':
                    colorArr.push('#d6007b');
                    break;
            }
        }
        return colorArr;
    };
    ConditionalFormatting.prototype.getGradient = function (t, start, middle, end, large) {
        if (isNullOrUndefined(end)) {
            return this.getLinear(start, middle, t / large);
        }
        else {
            var center = large / 2;
            return t >= center ? this.getLinear(middle, end, Math.abs((t - center) / center)) : this.getLinear(start, middle, t / center);
        }
    };
    ConditionalFormatting.prototype.getLinear = function (s, e, x) {
        var r = this.byteLinear(s[1] + s[2], e[1] + e[2], x);
        var g = this.byteLinear(s[3] + s[4], e[3] + e[4], x);
        var b = this.byteLinear(s[5] + s[6], e[5] + e[6], x);
        return '#' + r + g + b;
    };
    ConditionalFormatting.prototype.byteLinear = function (a, b, x) {
        var y = (parseInt(a, 16) * (1 - x) + parseInt(b, 16) * x) | 0;
        return Math.abs(y).toString(16);
    };
    ConditionalFormatting.prototype.isGreaterThanLessThan = function (cf, value, input, cellType) {
        if (isNumber(value) && cellType !== 'Text') {
            if (isNumber(input)) {
                var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
                return cf.type === 'GreaterThan' ? parseFloat(value) > parseFloat(input.replace(txtRegx, '')) : parseFloat(value) <
                    parseFloat(input.replace(txtRegx, ''));
            }
            else {
                var dateEventArgs = {
                    value: input, rowIndex: 0, colIndex: 0, sheetIndex: 0,
                    isDate: false, updatedVal: '', isTime: false
                };
                this.parent.notify(checkDateFormat, dateEventArgs);
                if (dateEventArgs.isDate || dateEventArgs.isTime) {
                    cf.value = dateEventArgs.updatedVal.toString();
                    return cf.type === 'GreaterThan' ? Number(value) > Number(dateEventArgs.updatedVal) :
                        Number(value) < Number(dateEventArgs.updatedVal);
                }
                else if (input) {
                    return cf.type === 'GreaterThan' ? value.toLowerCase() > input.toLowerCase() : value.toLowerCase() < input.toLowerCase();
                }
            }
        }
        else if (value === '' && Number(input) > 0 && cf.type === 'LessThan') {
            return true;
        }
        return false;
    };
    ConditionalFormatting.prototype.isBetWeen = function (cf, value, input1, input2, isLongDate) {
        var _a, _b;
        if (!isLongDate) {
            var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
            input1 = input1.replace(txtRegx, '');
            input2 = input2.replace(txtRegx, '');
        }
        if (isNumber(input1)) {
            var firstVal = parseFloat(input1);
            var secondVal = parseFloat(input2);
            if (firstVal > secondVal) {
                _a = [secondVal, firstVal], firstVal = _a[0], secondVal = _a[1];
            }
            return parseFloat(value) >= firstVal && parseFloat(value) <= secondVal;
        }
        else if (input1 && input2) {
            var dateEventArgs1 = { value: input1, cell: {}, updatedVal: '' };
            var dateEventArgs2 = { value: input2, cell: {}, updatedVal: '' };
            this.parent.notify(checkDateFormat, dateEventArgs1);
            this.parent.notify(checkDateFormat, dateEventArgs2);
            if ((dateEventArgs1.isDate || dateEventArgs1.isTime) && (dateEventArgs2.isDate || dateEventArgs2.isTime)) {
                cf.value = dateEventArgs1.updatedVal + ',' + dateEventArgs2.updatedVal;
                if (dateEventArgs1.updatedVal > dateEventArgs2.updatedVal) {
                    _b = [dateEventArgs2.updatedVal, dateEventArgs1.updatedVal], dateEventArgs1.updatedVal = _b[0], dateEventArgs2.updatedVal = _b[1];
                }
                return value >= dateEventArgs1.updatedVal && value <= dateEventArgs2.updatedVal;
            }
            else {
                return value.toLowerCase() >= input1.toLowerCase() && value.toLowerCase() <= input2.toLowerCase();
            }
        }
        return false;
    };
    ConditionalFormatting.prototype.isEqualTo = function (cf, value, input) {
        if (isNumber(input)) {
            if (value === '') {
                return parseFloat(input) === 0;
            }
            var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
            return parseFloat(value) === parseFloat(input.replace(txtRegx, ''));
        }
        else if (!value || !input) {
            return false;
        }
        else {
            var dateTimeArgs = { value: input, cell: {}, updatedVal: '' };
            this.parent.notify(checkDateFormat, dateTimeArgs);
            if (dateTimeArgs.isTime || dateTimeArgs.isDate) {
                cf.value = dateTimeArgs.updatedVal;
                return value === dateTimeArgs.updatedVal;
            }
            else {
                return value.toLowerCase() === input.toLowerCase();
            }
        }
    };
    ConditionalFormatting.prototype.isContainsText = function (value, input) {
        var txtRegx = new RegExp(/[^.-a-zA-Z 0-9]+/g);
        if (isNumber(input.replace(txtRegx, ''))) {
            input = input.replace(txtRegx, '');
            if (isDateTime(value)) {
                value = dateToInt(value).toString();
            }
            return value.indexOf(input) > -1;
        }
        else if (isDateTime(input)) {
            if (isDateTime(value)) {
                value = dateToInt(value).toString();
            }
            return value.indexOf(dateToInt(input).toString()) > -1;
        }
        else {
            return value.toLowerCase().indexOf(input.toLowerCase()) > -1;
        }
    };
    ConditionalFormatting.prototype.setCFStyle = function (style, cf) {
        switch (cf.cFColor) {
            case 'RedFT':
                style.backgroundColor = '#ffc7ce';
                style.color = '#9c0055';
                break;
            case 'YellowFT':
                style.backgroundColor = '#ffeb9c';
                style.color = '#9c6500';
                break;
            case 'GreenFT':
                style.backgroundColor = '#c6efce';
                style.color = '#006100';
                break;
            case 'RedF':
                style.backgroundColor = '#ffc7ce';
                break;
            case 'RedT':
                style.color = '#9c0055';
                break;
        }
        return style;
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    ConditionalFormatting.prototype.getModuleName = function () {
        return 'conditionalFormatting';
    };
    return ConditionalFormatting;
}());

/**
 * AutoFill module allows to perform auto fill functionalities.
 */
var AutoFill = /** @class */ (function () {
    function AutoFill(parent) {
        this.fillOptionIndex = 0;
        this.parent = parent;
        this.addEventListener();
    }
    AutoFill.prototype.getfillItems = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        return [
            { text: l10n.getConstant('CopyCells') },
            { text: l10n.getConstant('FillSeries') },
            { text: l10n.getConstant('FillFormattingOnly') },
            { text: l10n.getConstant('FillWithoutFormatting') }
        ];
    };
    AutoFill.prototype.createAutoFillElement = function () {
        if (this.parent.allowAutoFill) {
            var element = this.parent.getMainContent();
            var ele = this.parent.createElement('div', { className: 'e-autofill' });
            if (element.lastElementChild && element.lastElementChild.classList.contains('e-ss-overlay')) {
                element.insertBefore(ele, element.getElementsByClassName('e-ss-overlay')[0]);
            }
            else {
                element.appendChild(ele);
            }
            this.autoFillElement = ele;
            if (this.autoFillDropDown) {
                this.autoFillDropDown.destroy();
                this.autoFillDropDown = null;
            }
            this.getautofillDDB({ id: this.parent.element.id + '_autofilloptionbtn', appendElem: element });
        }
    };
    AutoFill.prototype.getautofillDDB = function (args) {
        var _this = this;
        this.splitBtnElem = this.parent.createElement('button', { id: args.id, className: 'e-filloption', attrs: { 'type': 'button' } });
        this.splitBtnElem.appendChild(this.parent.createElement('span', { className: 'e-tbar-btn-text' }));
        this.autoFillDropDown = new DropDownButton({
            cssClass: 'e-dragfill-ddb',
            iconCss: 'e-icons e-dragfill-icon',
            items: this.getfillItems(),
            createPopupOnClick: true,
            enableRtl: this.parent.enableRtl,
            select: function (args) {
                _this.autoFillOptionClick({ type: _this.getFillType(args.item.text) });
            },
            beforeOpen: function () { return _this.autoFillClick(); }
        });
        this.autoFillDropDown.createElement = this.parent.createElement;
        this.autoFillDropDown.appendTo(this.splitBtnElem);
        args.appendElem.appendChild(this.splitBtnElem);
        return this.autoFillDropDown;
    };
    AutoFill.prototype.getFillType = function (text) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var type;
        if (text === l10n.getConstant('CopyCells')) {
            type = 'CopyCells';
        }
        else if (text === l10n.getConstant('FillSeries')) {
            type = 'FillSeries';
        }
        else if (text === l10n.getConstant('FillFormattingOnly')) {
            type = 'FillFormattingOnly';
        }
        else {
            type = 'FillWithoutFormatting';
        }
        return type;
    };
    AutoFill.prototype.autoFillClick = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var fillInfo = { fillType: 'FillSeries', disableItems: [''] };
        this.parent.notify(getFillInfo, fillInfo);
        this.autoFillDropDown.setProperties({ 'items': this.getfillItems() }, true);
        this.autoFillDropDown.removeItems(fillInfo.disableItems);
        this.refreshAutoFillOption(l10n.getConstant(fillInfo.fillType));
    };
    AutoFill.prototype.getFillRange = function (pStartCell, pEndCell, pFillCell, direction) {
        switch (direction) {
            case 'Up':
                return [pFillCell.rowIndex, pStartCell.colIndex, pStartCell.rowIndex - 1, pEndCell.colIndex];
            case 'Right':
                return [pStartCell.rowIndex, pEndCell.colIndex + 1, pEndCell.rowIndex, pFillCell.colIndex];
            case 'Down':
                return [pEndCell.rowIndex + 1, pStartCell.colIndex, pFillCell.rowIndex, pEndCell.colIndex];
            case 'Left':
                return [pStartCell.rowIndex, pFillCell.colIndex, pEndCell.rowIndex, pStartCell.colIndex - 1];
        }
    };
    AutoFill.prototype.autoFillOptionClick = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        var range = getSwapRange(getRangeIndexes(this.parent.selectionModule.dAutoFillCell));
        var currcell = getRangeIndexes(sheet.selectedRange);
        var minr = range[0];
        var minc = range[1];
        var maxr = range[2];
        var maxc = range[3];
        var dir = this.getDirection({ rowIndex: maxr, colIndex: maxc }, { rowIndex: currcell[2],
            colIndex: currcell[3] });
        var dataRange = [minr, minc, maxr, maxc];
        var fillRange = this.getFillRange({ rowIndex: minr, colIndex: minc }, { rowIndex: maxr, colIndex: maxc }, { rowIndex: currcell[2], colIndex: currcell[3] }, dir);
        this.refreshAutoFillOption(l10n.getConstant(args.type));
        var evtArgs = { isUndo: true, isPublic: true, preventReSelect: true,
            preventEvt: args.type === 'FillWithoutFormatting',
            setCollection: args.type === 'FillFormattingOnly' || args.type === 'FillWithoutFormatting', isFromAutoFillOption: true };
        this.parent.notify(performUndoRedo, evtArgs);
        var eventArgs = { dataRange: sheet.name + '!' + getRangeAddress(dataRange), fillRange: sheet.name + '!' + getRangeAddress(fillRange), direction: dir, fillType: args.type, isFillOptClick: true };
        this.isVerticalFill = eventArgs.direction === 'Down' || eventArgs.direction === 'Up';
        this.parent.notify(setAutoFill, eventArgs);
        this.positionAutoFillElement({ isautofill: true });
        var autoFillArgs = { dataRange: eventArgs.dataRange, fillRange: eventArgs.fillRange,
            fillType: eventArgs.fillType, direction: eventArgs.direction, selectedRange: sheet.name + '!' + getRangeAddress(currcell),
            undoArgs: evtArgs.undoArgs };
        this.parent.notify(completeAction, { eventArgs: autoFillArgs, action: 'autofill' });
        if (this.parent.showAggregate) {
            this.parent.notify(showAggregate, {});
        }
        this.autoFillClick();
    };
    AutoFill.prototype.refreshAutoFillOption = function (type) {
        for (var i = 0; i < this.autoFillDropDown.items.length; i++) {
            this.autoFillDropDown.items[i].iconCss = '';
        }
        for (var i = 0; i < this.autoFillDropDown.items.length; i++) {
            if (this.autoFillDropDown.items[i].text === type) {
                this.autoFillDropDown.items[i].iconCss = 'e-icons e-selected-icon';
            }
        }
        if (['Copy Cells', 'Fill Series', 'Fill Formatting Only', 'Fill Without Formatting'].indexOf(type) < 0) {
            this.autoFillDropDown.items[this.fillOptionIndex].iconCss = '';
        }
        this.autoFillDropDown.dataBind();
    };
    AutoFill.prototype.positionAutoFillElement = function (args) {
        var top = 0;
        var left = 0;
        var sheet = this.parent.getActiveSheet();
        var indexes = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var tdiff = -5;
        var ldiff = -5;
        var otdiff = 6;
        var oldiff = 6;
        var isRowSelected = (indexes[1] === 0 && indexes[3] === sheet.colCount - 1);
        var isColSelected = (indexes[0] === 0 && indexes[2] === sheet.rowCount - 1);
        var rowIdx = indexes[2];
        var colIdx = indexes[3];
        var height;
        var width;
        var pos;
        var isRtl = this.parent.enableRtl;
        var cell = this.parent.getCell(rowIdx, colIdx);
        if (isHiddenCol(sheet, indexes[3]) || isHiddenRow(sheet, indexes[2]) ||
            (cell && cell.classList.contains('e-formularef-selection')) || (sheet.isProtected && sheet.protectSettings.selectUnLockedCells
            && isLockedCells(this.parent, indexes))) {
            this.hideAutoFillElement();
            return;
        }
        if ((sheet.isProtected && (sheet.protectSettings.selectCells || sheet.protectSettings.selectUnLockedCells)) || !sheet.isProtected) {
            if (isRowSelected) {
                tdiff = -5;
                ldiff = -1;
                otdiff = 6;
                oldiff = 2;
                rowIdx = indexes[2];
                colIdx = indexes[1];
            }
            else if (isColSelected) {
                ldiff = -5;
                tdiff = 0;
                otdiff = 1;
                oldiff = 6;
                rowIdx = indexes[0];
                colIdx = indexes[3];
            }
            if (sheet.frozenColumns || sheet.frozenRows) {
                if (isColSelected || isRowSelected) {
                    setPosition(this.parent, this.autoFillElement, indexes, 'e-autofill', args && args.preventAnimation);
                    if (this.parent.autoFillSettings.showFillOptions && args && args.isautofill) {
                        setPosition(this.parent, this.autoFillDropDown.element, indexes, 'e-filloption');
                    }
                }
                else {
                    setPosition(this.parent, this.autoFillElement, [rowIdx, colIdx, rowIdx, colIdx], 'e-autofill', args && args.preventAnimation);
                    if (this.parent.autoFillSettings.showFillOptions && args && args.isautofill) {
                        setPosition(this.parent, this.autoFillDropDown.element, [rowIdx, colIdx, rowIdx, colIdx], 'e-filloption');
                    }
                }
                if (this.autoFillElement) {
                    this.autoFillCell = { rowIndex: rowIdx, colIndex: colIdx };
                    var autoFillHandles = this.parent.element.querySelectorAll('.e-autofill');
                    if (autoFillHandles.length) {
                        var clientRect = autoFillHandles[0].getBoundingClientRect();
                        this.autoFillElementPosition = {
                            left: clientRect.left, top: clientRect.top
                        };
                        [].slice.call(autoFillHandles).forEach(function (autoFillElem) {
                            removeClass([autoFillElem], 'e-hide');
                        });
                    }
                }
            }
            else {
                pos = getCellPosition(sheet, [rowIdx, colIdx, rowIdx, colIdx], this.parent.frozenRowCount(sheet), this.parent.frozenColCount(sheet), this.parent.viewport.beforeFreezeHeight, this.parent.viewport.beforeFreezeWidth, this.parent.sheetModule.colGroupWidth);
                height = getRowsHeight(sheet, rowIdx, rowIdx, true);
                width = getColumnsWidth(sheet, colIdx, colIdx, true);
                if (!isColSelected) {
                    top += height;
                }
                if (!isRowSelected) {
                    left += width;
                }
                top += Math.round(pos.top) + tdiff;
                left += Math.round(pos.left) + ldiff;
                if (this.autoFillElement) {
                    removeClass([this.autoFillElement], 'e-hide');
                    this.autoFillElement.style.top = top + 'px';
                    if (isRtl) {
                        this.autoFillElement.style.right = left + 'px';
                    }
                    else {
                        this.autoFillElement.style.left = left + 'px';
                    }
                    this.autoFillCell = { rowIndex: rowIdx, colIndex: colIdx };
                    var clientRect = this.autoFillElement.getBoundingClientRect();
                    this.autoFillElementPosition = {
                        left: clientRect.left, top: clientRect.top
                    };
                    if (this.parent.autoFillSettings.showFillOptions && args && args.isautofill) {
                        removeClass([this.autoFillDropDown.element], 'e-hide');
                        var sheetPanel = this.parent.element.querySelector('.e-main-panel');
                        var virtualable = this.parent.element.querySelector('.e-main-panel .e-sheet-content .e-virtualable');
                        var scroller = this.parent.element.querySelector('.e-sheet-panel .e-scrollbar .e-scroller');
                        var rowOffset = virtualable && virtualable.clientHeight < sheetPanel.clientHeight ?
                            (sheetPanel.clientHeight - virtualable.clientHeight) : 0;
                        var columnsOffset = virtualable && virtualable.clientWidth < sheetPanel.clientWidth ?
                            (sheetPanel.clientWidth - virtualable.clientWidth) : 0;
                        var autoFillDropDownRect = this.autoFillDropDown.element.getBoundingClientRect();
                        if ((sheetPanel.scrollTop + sheetPanel.clientHeight - rowOffset) < (top + autoFillDropDownRect.height)) {
                            top -= autoFillDropDownRect.height;
                        }
                        if ((scroller.scrollLeft + scroller.clientWidth - columnsOffset) < (left + autoFillDropDownRect.width)) {
                            left -= autoFillDropDownRect.width;
                        }
                        this.autoFillDropDown.element.style.top = top + otdiff + 'px';
                        if (isRtl) {
                            this.autoFillDropDown.element.style.right = left + oldiff + 'px';
                        }
                        else {
                            this.autoFillDropDown.element.style.left = left + oldiff + 'px';
                        }
                    }
                }
            }
        }
    };
    AutoFill.prototype.hideAutoFillElement = function () {
        var elem = this.parent.element;
        [].slice.call(elem.querySelectorAll('.e-autofill')).forEach(function (optElem) {
            if (elem) {
                addClass([optElem], 'e-hide');
            }
        });
    };
    AutoFill.prototype.hideAutoFillOptions = function () {
        var elem = this.parent.element;
        [].slice.call(elem.querySelectorAll('.e-filloption')).forEach(function (optElem) {
            if (elem) {
                addClass([optElem], 'e-hide');
            }
        });
    };
    AutoFill.prototype.selectAutoFillRange = function (args) {
        var rowObj = { clientY: getClientY(args.e), target: args.e.target };
        var colObj = { clientX: getClientX(args.e), target: args.e.target };
        var sheet = this.parent.getActiveSheet();
        this.parent.notify(getRowIdxFromClientY, rowObj);
        this.parent.notify(getColIdxFromClientX, colObj);
        var rangeIndexes;
        var autofillRange = this.getAutoFillRange({ rowIndex: rowObj.clientY, colIndex: colObj.clientX });
        if (autofillRange && autofillRange.fillRange) {
            rangeIndexes = [autofillRange.startCell.rowIndex, autofillRange.startCell.colIndex, autofillRange.endCell.rowIndex,
                autofillRange.endCell.colIndex];
        }
        else {
            rangeIndexes = getRangeIndexes(sheet.selectedRange);
        }
        args.indexes = rangeIndexes;
        return rangeIndexes;
    };
    AutoFill.prototype.getAutoFillRange = function (idx) {
        var sheet = this.parent.getActiveSheet();
        var aCell = this.autoFillCell;
        var range = getSwapRange(getRangeIndexes(sheet.selectedRange));
        var minr = range[0];
        var minc = range[1];
        var maxr = range[2];
        var maxc = range[3];
        var inRange = isInRange(range, [idx.rowIndex, idx.colIndex, idx.rowIndex, idx.colIndex], true);
        var minIdx = { rowIndex: minr, colIndex: minc };
        var scell = { rowIndex: range[0], colIndex: range[1] };
        var ecell = { rowIndex: range[2], colIndex: range[3] };
        var maxIdx = { rowIndex: maxr, colIndex: maxc };
        var modifiedIdx = this.modifyRangeForMerge(idx.rowIndex, idx.colIndex, aCell.rowIndex, aCell.colIndex, range);
        if (idx.rowIndex < aCell.rowIndex) { // up
            if ((minr - idx.rowIndex > idx.colIndex - maxc) && (minr - idx.rowIndex > minc - idx.colIndex)) {
                return inRange ? { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc } } : { startCell: maxIdx, endCell: { rowIndex: modifiedIdx.rowIndex, colIndex: minc }, fillRange: [modifiedIdx.rowIndex, minc, minr - 1, maxc], direction: 'Up' };
            }
            else if (idx.colIndex > aCell.colIndex) {
                return { startCell: minIdx, endCell: { rowIndex: maxr, colIndex: idx.colIndex },
                    fillRange: [minr, maxc + 1, maxr, idx.colIndex], direction: 'Right' };
            }
            else if (idx.colIndex < aCell.colIndex) {
                return inRange ? { startCell: minIdx, endCell: maxIdx } : { startCell: maxIdx, endCell: { rowIndex: minr, colIndex: idx.colIndex }, fillRange: [minr, idx.colIndex, maxr, minc - 1], direction: 'Left' };
            }
            else {
                return { startCell: scell, endCell: ecell };
            }
        }
        else if (idx.colIndex > aCell.colIndex) { // right
            if ((idx.rowIndex - maxr > idx.colIndex - maxc)) {
                return { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc },
                    fillRange: [maxr + 1, minc, idx.rowIndex, maxc], direction: 'Down' };
            }
            else {
                return { startCell: minIdx, endCell: { rowIndex: maxr, colIndex: modifiedIdx.colIndex },
                    fillRange: [minr, maxc + 1, maxr, modifiedIdx.colIndex], direction: 'Right' };
            }
        }
        else if (idx.colIndex < aCell.colIndex) { // left
            if ((idx.rowIndex - maxr > maxc - idx.colIndex) || ((idx.rowIndex - minr > maxc - idx.colIndex) && idx.rowIndex !== maxr)) {
                return { startCell: minIdx, endCell: { rowIndex: idx.rowIndex, colIndex: maxc },
                    fillRange: [maxr + 1, minc, idx.rowIndex, maxc], direction: 'Down' };
            }
            else {
                return inRange ? { startCell: minIdx, endCell: maxIdx } : { startCell: maxIdx, endCell: { rowIndex: minr, colIndex: modifiedIdx.colIndex }, fillRange: [minr, modifiedIdx.colIndex, maxr, minc - 1], direction: 'Left' };
            }
        }
        else if (idx.rowIndex > aCell.rowIndex) { // down
            return { startCell: minIdx, endCell: { rowIndex: modifiedIdx.rowIndex, colIndex: maxc },
                fillRange: [maxr + 1, minc, modifiedIdx.rowIndex, maxc], direction: 'Down' };
        }
        else if (idx.rowIndex === aCell.rowIndex && idx.colIndex === aCell.colIndex) {
            return { startCell: scell, endCell: ecell };
        }
        else {
            return { startCell: scell, endCell: ecell };
        }
    };
    AutoFill.prototype.modifyRangeForMerge = function (rowIdx, colIdx, autoFillRowIdx, autoFillColIdx, selRange) {
        var modifiedIdx = { rowIndex: rowIdx, colIndex: colIdx };
        if (this.isMergedRange(selRange)) {
            var selRowCount = selRange[2] - selRange[0] + 1;
            var selColCount = selRange[3] - selRange[1] + 1;
            var remainder = void 0;
            if (rowIdx < autoFillRowIdx) { // up
                remainder = (selRange[2] - rowIdx + 1) % selRowCount;
                if (remainder && rowIdx - (selRowCount - remainder) >= 0) {
                    modifiedIdx.rowIndex = rowIdx - (selRowCount - remainder);
                }
            }
            else if (colIdx > autoFillColIdx) { // right
                remainder = (colIdx - selRange[1] + 1) % selColCount;
                if (remainder) {
                    modifiedIdx.colIndex = colIdx + (selColCount - remainder);
                }
            }
            else if (colIdx < autoFillColIdx) { // left
                remainder = (selRange[3] - colIdx + 1) % selColCount;
                if (remainder && colIdx - (selColCount - remainder) >= 0) {
                    modifiedIdx.colIndex = colIdx - (selColCount - remainder);
                }
            }
            else if (rowIdx > autoFillRowIdx) { // down
                remainder = (rowIdx - selRange[0] + 1) % selRowCount;
                if (remainder) {
                    modifiedIdx.rowIndex = rowIdx + (selRowCount - remainder);
                }
            }
        }
        return modifiedIdx;
    };
    AutoFill.prototype.performAutoFill = function (args) {
        if (args.rangeInfo || !(args.event.clientX > this.autoFillElementPosition.left &&
            args.event.clientX < this.autoFillElementPosition.left + 10) ||
            !(args.event.clientY > this.autoFillElementPosition.top && args.event.clientY < this.autoFillElementPosition.top + 10)) {
            var autofillRange = void 0;
            if (args.rangeInfo) {
                autofillRange = args.rangeInfo;
            }
            else {
                var rowObj = {
                    clientY: getClientY(args.event), target: args.event.target
                };
                var colObj = {
                    clientX: getClientX(args.event), target: args.event.target
                };
                this.parent.notify(getRowIdxFromClientY, rowObj);
                this.parent.notify(getColIdxFromClientX, colObj);
                autofillRange = this.getAutoFillRange({ rowIndex: rowObj.clientY, colIndex: colObj.clientX });
            }
            var sheet = this.parent.getActiveSheet();
            if (autofillRange && autofillRange.fillRange) {
                var eventArgs = {
                    dataRange: sheet.name + '!' + args.dAutoFillCell,
                    fillRange: sheet.name + '!' + getRangeAddress(autofillRange.fillRange), direction: autofillRange.direction,
                    fillType: args.fillType || this.parent.autoFillSettings.fillType, cancel: false
                };
                var isReadonlyCells = isReadOnlyCells(this.parent, getRangeIndexes(args.dAutoFillCell)) ||
                    isReadOnlyCells(this.parent, autofillRange.fillRange);
                if (isReadonlyCells) {
                    this.parent.notify(readonlyAlert, null);
                    return;
                }
                this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'autofill' });
                if (eventArgs.cancel) {
                    return;
                }
                var isLockedCell = isLockedCells(this.parent, autofillRange.fillRange);
                if (sheet.isProtected && isLockedCell) {
                    this.parent.notify(editAlert, null);
                    return;
                }
                if (args.rangeInfo) {
                    this.performAutoFillAction(eventArgs, null, isLockedCell);
                }
                else {
                    this.performAutoFillAction(eventArgs, autofillRange, isLockedCell);
                    this.positionAutoFillElement({ isautofill: true });
                }
            }
        }
        else {
            this.positionAutoFillElement({ isautofill: false });
        }
    };
    AutoFill.prototype.refreshCell = function (options) {
        this.parent.serviceLocator.getService('cell').refreshRange([options.rowIndex, options.colIndex, options.rowIndex, options.colIndex]);
    };
    AutoFill.prototype.getDirection = function (endCell, currcell, isVerticalFill) {
        isVerticalFill = isNullOrUndefined(isVerticalFill) ? this.isVerticalFill : isVerticalFill;
        if (isVerticalFill) {
            if (currcell.rowIndex < endCell.rowIndex) { // up
                return 'Up';
            }
            else if (currcell.rowIndex > endCell.rowIndex) { // down
                return 'Down';
            }
            else if (currcell.colIndex > endCell.colIndex) { // right
                return 'Right';
            }
            else if (currcell.colIndex < endCell.colIndex) { // left
                return 'Left';
            }
        }
        else {
            if (currcell.colIndex > endCell.colIndex) { // right
                return 'Right';
            }
            else if (currcell.colIndex < endCell.colIndex) { // left
                return 'Left';
            }
            else if (currcell.rowIndex < endCell.rowIndex) { // up
                return 'Up';
            }
            else if (currcell.rowIndex > endCell.rowIndex) { // down
                return 'Down';
            }
        }
        return null;
    };
    AutoFill.prototype.performAutoFillAction = function (args, autoFillRange, isLockedCell) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        if (this.isMergedRange(getRangeIndexes(args.fillRange))) {
            var dialogInst_1 = this.parent.serviceLocator.getService(dialog);
            dialogInst_1.show({
                isModal: true, showCloseIcon: true, height: 180, width: 400, content: l10n.getConstant('AutoFillMergeAlertMsg'),
                buttons: [{
                        buttonModel: { content: this.parent.serviceLocator.getService(locale).getConstant('Ok'), isPrimary: true },
                        click: function () { dialogInst_1.hide(); _this.parent.selectRange(args.dataRange); }
                    }],
                close: function () { dialogInst_1.hide(); _this.parent.selectRange(args.dataRange); }
            }, false);
            return;
        }
        this.isVerticalFill = args.direction === 'Down' || args.direction === 'Up';
        this.parent.notify(setAutoFill, {
            dataRange: args.dataRange,
            fillRange: args.fillRange, direction: args.direction, fillType: args.fillType, isLockedCell: isLockedCell
        });
        var selRange = autoFillRange ? getRangeAddress([autoFillRange.startCell.rowIndex, autoFillRange.startCell.colIndex,
            autoFillRange.endCell.rowIndex, autoFillRange.endCell.colIndex]) : sheet.selectedRange;
        updateSelectedRange(this.parent, selRange, sheet);
        var autoFillArgs = { dataRange: args.dataRange, fillRange: args.fillRange, fillType: args.fillType, direction: args.direction,
            selectedRange: selRange };
        this.parent.notify(completeAction, {
            eventArgs: autoFillArgs, action: sheet.conditionalFormats && sheet.conditionalFormats.length > 0 &&
                sheet.conditionalFormats[sheet.conditionalFormats.length - 1].action === 'autofillWithCF' ? 'autofillWithCF' :
                'autofill'
        });
        this.parent.trigger('select', { range: this.parent.getActiveSheet().selectedRange });
        if (this.parent.showAggregate) {
            this.parent.notify(showAggregate, {});
        }
        this.parent.notify(refreshRibbonIcons, null);
    };
    AutoFill.prototype.getRangeData = function (options) {
        var arr = [];
        var sheet = this.parent.getActiveSheet();
        var minr = options.range[0];
        var minc = options.range[1];
        var maxr = options.range[2];
        var maxc = options.range[3];
        var minCol = minc;
        var cell;
        while (minr <= maxr) {
            if (isHiddenRow(sheet, minr)) {
                minr++;
                continue;
            }
            minc = minCol;
            while (minc <= maxc) {
                if (isHiddenCol(sheet, minc)) {
                    minc++;
                    continue;
                }
                cell = getCell(minr, minc, sheet);
                arr.push(cell);
                minc++;
            }
            minr++;
        }
        return arr;
    };
    AutoFill.prototype.isMergedRange = function (range) {
        var i = 0;
        var data = this.getRangeData({ range: range, sheetIdx: this.parent.activeSheetIndex });
        for (i = 0; i < data.length; i++) {
            if (data[i] && (data[i].rowSpan || data[i].colSpan)) {
                return true;
            }
        }
        return false;
    };
    AutoFill.prototype.addEventListener = function () {
        this.parent.on(contentLoaded, this.createAutoFillElement, this);
        this.parent.on(positionAutoFillElement, this.positionAutoFillElement, this);
        this.parent.on(hideAutoFillOptions, this.hideAutoFillOptions, this);
        this.parent.on(hideAutoFillElement, this.hideAutoFillElement, this);
        this.parent.on(performAutoFill, this.performAutoFill, this);
        this.parent.on(selectAutoFillRange, this.selectAutoFillRange, this);
        this.parent.on(refreshCell, this.refreshCell, this);
        this.parent.on(getautofillDDB, this.getautofillDDB, this);
    };
    AutoFill.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(contentLoaded, this.createAutoFillElement);
            this.parent.off(positionAutoFillElement, this.positionAutoFillElement);
            this.parent.off(hideAutoFillOptions, this.hideAutoFillOptions);
            this.parent.off(hideAutoFillElement, this.hideAutoFillElement);
            this.parent.off(performAutoFill, this.performAutoFill);
            this.parent.off(selectAutoFillRange, this.selectAutoFillRange);
            this.parent.off(refreshCell, this.refreshCell);
            this.parent.off(getautofillDDB, this.getautofillDDB);
        }
    };
    /**
     * Destroy AutoFill module.
     *
     * @returns {void} - Destroy auto fill module.
     */
    AutoFill.prototype.destroy = function () {
        this.removeEventListener();
        if (this.autoFillElement) {
            this.autoFillElement.remove();
        }
        this.autoFillElement = null;
        this.autoFillElementPosition = null;
        this.autoFillCell = null;
        if (this.autoFillDropDown) {
            this.autoFillDropDown.destroy();
        }
        this.autoFillDropDown = null;
        this.isVerticalFill = null;
        this.fillOptionIndex = null;
        if (this.splitBtnElem) {
            removeAllChildren(this.splitBtnElem);
            this.splitBtnElem.remove();
        }
        this.splitBtnElem = null;
        this.parent = null;
    };
    /**
     * Get the AutoFill module name.
     *
     * @returns {string} - Get the auto fill module name.
     */
    AutoFill.prototype.getModuleName = function () {
        return 'autofill';
    };
    return AutoFill;
}());

/**
 * `Note` module
 */
var SpreadsheetNote = /** @class */ (function () {
    /**
     * Constructor for Note module.
     *
     * @param {Spreadsheet} parent - Constructor for Note module.
     */
    function SpreadsheetNote(parent) {
        /** @hidden */
        this.isNoteVisible = false;
        /** @hidden */
        this.isNoteVisibleOnTouch = false;
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the Note module.
     *
     * @returns {void} - To destroy the Note module.
     */
    SpreadsheetNote.prototype.destroy = function () {
        this.removeEventListener();
        if (!this.parent.isDestroyed && !this.parent.refreshing) {
            var noteIndicators = this.parent.element.getElementsByClassName('e-addNoteIndicator');
            while (noteIndicators.length) {
                var cellEle = closest(noteIndicators[0], '.e-cell');
                if (cellEle) {
                    EventHandler.remove(cellEle, 'mouseover', this.mouseOver);
                    EventHandler.remove(cellEle, 'mouseout', this.mouseOut);
                }
                detach(noteIndicators[0]);
            }
        }
        this.parent = null;
        this.isNoteVisible = null;
    };
    SpreadsheetNote.prototype.addEventListener = function () {
        this.parent.on(addNote, this.addNote, this);
        this.parent.on(editNote, this.editNote, this);
        this.parent.on(deleteNote, this.deleteNote, this);
        this.parent.on(createNoteIndicator, this.createNoteIndicator, this);
        this.parent.on(showNote, this.showNote, this);
        this.parent.on(removeNoteContainer, this.removeNoteContainer, this);
        this.parent.on(updateNoteContainer, this.updateNoteContainer, this);
    };
    SpreadsheetNote.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(addNote, this.addNote);
            this.parent.off(editNote, this.editNote);
            this.parent.off(showNote, this.showNote);
            this.parent.off(deleteNote, this.deleteNote);
            this.parent.off(createNoteIndicator, this.createNoteIndicator);
            this.parent.off(removeNoteContainer, this.removeNoteContainer);
            this.parent.off(updateNoteContainer, this.updateNoteContainer);
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    SpreadsheetNote.prototype.getModuleName = function () {
        return 'spreadsheetNote';
    };
    SpreadsheetNote.prototype.addNote = function () {
        var cellIndexes = !isNullOrUndefined(this.noteCellIndexes) ?
            this.noteCellIndexes : getCellIndexes(this.parent.getActiveSheet().activeCell);
        var targetElement = this.parent.getCell(cellIndexes[0], cellIndexes[1]);
        if (!isNullOrUndefined(targetElement) && ((targetElement.children.length === 0) || (targetElement.children.length > 0 && targetElement.children[targetElement.childElementCount - 1].className.indexOf('e-addNoteIndicator') === -1))) {
            this.createNoteIndicator({ targetElement: targetElement, rowIndex: cellIndexes[0], columnIndex: cellIndexes[1] });
            this.createNoteContainer(targetElement, cellIndexes[0], cellIndexes[1], false, true);
        }
    };
    SpreadsheetNote.prototype.deleteNote = function (args) {
        var cellIndexes = getCellIndexes(this.parent.getActiveSheet().activeCell);
        var rowIndex = !isNullOrUndefined(args) && !isNullOrUndefined(args.rowIndex) ? args.rowIndex : cellIndexes[0];
        var columnIndex = !isNullOrUndefined(args) && !isNullOrUndefined(args.columnIndex) ? args.columnIndex : cellIndexes[1];
        var targetElement = this.parent.getCell(rowIndex, columnIndex);
        if (targetElement.children.length > 0 && targetElement.children[targetElement.children.length - 1].className.indexOf('e-addNoteIndicator') > -1) {
            targetElement.removeChild(targetElement.children[targetElement.children.length - 1]);
            EventHandler.remove(targetElement, 'mouseover', this.mouseOver);
            EventHandler.remove(targetElement, 'mouseout', this.mouseOut);
            var address = getSheetName(this.parent, this.parent.activeSheetIndex) + '!' + this.parent.getActiveSheet().activeCell;
            var cell = getCell(rowIndex, columnIndex, this.parent.getActiveSheet());
            if (!isNullOrUndefined(args) && args.isDeleteFromMenu) {
                this.parent.notify(setActionData, { args: { action: 'beforeCellSave', eventArgs: { address: address } } });
            }
            if (!isNullOrUndefined(cell) && cell.notes) {
                delete cell.notes;
            }
            if (!isNullOrUndefined(args) && args.isDeleteFromMenu) {
                var eventArgs = { notes: cell.notes, address: address };
                this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'deleteNote' });
                this.isShowNote = null;
            }
        }
    };
    SpreadsheetNote.prototype.editNote = function () {
        var cellIndexes = !isNullOrUndefined(this.noteCellIndexes) ?
            this.noteCellIndexes : getCellIndexes(this.parent.getActiveSheet().activeCell);
        this.showNote({ rowIndex: cellIndexes[0], columnIndex: cellIndexes[1], isNoteEditable: true });
        var noteContainerElement = document.getElementsByClassName('e-addNoteContainer')[0];
        updateCell(this.parent, this.parent.getActiveSheet(), { rowIdx: cellIndexes[0], colIdx: cellIndexes[1], preventEvt: true,
            cell: { isNoteEditable: true } });
        if (noteContainerElement) {
            this.getNoteFocus(noteContainerElement);
        }
    };
    SpreadsheetNote.prototype.createNoteIndicator = function (args) {
        var noteIndicator = this.parent.createElement('div', { className: 'e-addNoteIndicator', styles: 'position: absolute;top: 0;right: 0;width: 0;height: 0;border-left: 8px solid transparent;border-top: 8px solid red;cursor: pointer;' });
        if (args.targetElement.children.length > 0) {
            var rowHeight = getRowHeight(this.parent.getActiveSheet(), args.rowIndex);
            var defaultFilterButtonHeight = 20;
            for (var i = 0; i < args.targetElement.childElementCount; i++) {
                if (args.targetElement.children[i].className.indexOf('e-filter-btn') > -1) {
                    noteIndicator.style.right = (rowHeight < (defaultFilterButtonHeight + 10) ?
                        (args.targetElement.children[i].getBoundingClientRect().width <= 0 ? defaultFilterButtonHeight :
                            args.targetElement.children[i].getBoundingClientRect().width) : 0 + 2) + 'px';
                }
                if (args.targetElement.children[i].className.indexOf('e-validation-list') > -1) {
                    noteIndicator.style.right = (args.targetElement.children[i].getBoundingClientRect().width || 20) + 2 + "px";
                }
            }
        }
        if (!isNullOrUndefined(args.targetElement) && (args.targetElement.children.length === 0) || (args.targetElement.children.length > 0 && args.targetElement.children[args.targetElement.childElementCount - 1].className.indexOf('e-addNoteIndicator') === -1)) {
            if (!args.skipEvent) {
                EventHandler.add(args.targetElement, 'mouseover', this.mouseOver, [this, args.rowIndex, args.columnIndex]);
                EventHandler.add(args.targetElement, 'mouseout', this.mouseOut, this);
            }
            args.targetElement.appendChild(noteIndicator);
        }
    };
    SpreadsheetNote.prototype.mouseOver = function () {
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        var args = this;
        var noteModule = args[0];
        if ((noteModule.isNoteVisibleOnTouch && !isNullOrUndefined(document.getElementsByClassName('e-addNoteContainer')[0])) ||
            isNullOrUndefined(document.getElementsByClassName('e-addNoteContainer')[0])) {
            if (!isNullOrUndefined(document.getElementsByClassName('e-addNoteContainer')[0])) {
                noteModule.removeNoteContainer();
            }
            noteModule.showNote({ rowIndex: args[1], columnIndex: args[2], isNoteEditable: false });
            noteModule.isNoteVisible = true;
        }
    };
    SpreadsheetNote.prototype.mouseOut = function (e) {
        if (this.isNoteVisible && (!this.isNoteVisibleOnTouch && !isNullOrUndefined(document.getElementsByClassName('e-addNoteContainer')[0]))) {
            if (document.activeElement.className.indexOf('e-addNoteContainer') === -1 && !isNullOrUndefined(e.relatedTarget) && e.relatedTarget.className.indexOf('e-connectorLine') === -1 && e.relatedTarget.className.indexOf('e-addNoteContainer') === -1) {
                this.removeNoteContainer();
                this.isNoteVisible = false;
            }
        }
    };
    SpreadsheetNote.prototype.createNoteContainer = function (targetElement, rowIndex, columnIndex, isShowNote, isNoteEditable) {
        var sheet = this.parent.getActiveSheet();
        var cell = getCell(rowIndex, columnIndex, sheet);
        var cellRect = targetElement.getBoundingClientRect();
        var noteContainer = this.parent.createElement('textarea', { className: 'e-addNoteContainer' });
        this.createContainer(noteContainer, cell, cellRect, isShowNote);
        this.createConnectorLine(noteContainer, cellRect);
        if (isNoteEditable) {
            this.getNoteFocus(noteContainer);
        }
        EventHandler.add(noteContainer, 'mouseout', this.mouseOut, this);
        EventHandler.add(document.getElementsByClassName('e-connectorLine')[0], 'mouseout', this.mouseOut, this);
    };
    SpreadsheetNote.prototype.getNoteFocus = function (noteContainerElement) {
        noteContainerElement.selectionStart = noteContainerElement.value.length;
        noteContainerElement.focus();
    };
    SpreadsheetNote.prototype.createContainer = function (noteContainer, cell, cellRect, isShowNote) {
        var containerTop = 5;
        if (!isNullOrUndefined(document.getElementsByClassName('e-select-all-cell')[0]) && !isNullOrUndefined(document.getElementsByClassName('e-scroller')[0]) &&
            cellRect.top >= document.getElementsByClassName('e-select-all-cell')[0].getBoundingClientRect().bottom && cellRect.right >= document.getElementsByClassName('e-select-all-cell')[0].getBoundingClientRect().right &&
            cellRect.bottom <= document.getElementsByClassName('e-scroller')[0].getBoundingClientRect().top && cellRect.right <= document.getElementsByClassName('e-scroller')[0].getBoundingClientRect().width) {
            noteContainer.style.display = 'block';
            containerTop = cellRect.top === document.getElementsByClassName('e-select-all-cell')[0].getBoundingClientRect().bottom ? 0 : containerTop;
        }
        else {
            noteContainer.style.display = 'none';
        }
        var elementClientRect = this.parent.element.getBoundingClientRect();
        var elementPosition = this.parent.element.style.getPropertyValue('position');
        noteContainer.style.position = 'absolute';
        noteContainer.style.top = (cellRect.top - (elementClientRect.top - (elementPosition === 'absolute' ? 0 :
            this.parent.element.offsetTop)) - containerTop) + 'px';
        noteContainer.style.left = (cellRect.left + cellRect.width - (elementClientRect.left - (elementPosition === 'absolute' ?
            0 : this.parent.element.offsetLeft)) + 10) + 'px';
        noteContainer.style.width = '120px';
        noteContainer.style.height = '120px';
        noteContainer.style.zIndex = '5';
        noteContainer.style.color = 'black';
        noteContainer.style.backgroundColor = 'lightyellow';
        if (isShowNote && !isNullOrUndefined(cell) && !isNullOrUndefined(cell.notes)) {
            noteContainer.innerHTML = cell.notes;
        }
        else {
            noteContainer.innerHTML = '';
        }
        this.parent.element.appendChild(noteContainer);
    };
    SpreadsheetNote.prototype.createConnectorLine = function (noteContainer, cellRect) {
        var connectorLine = this.parent.createElement('canvas', { className: 'e-connectorLine', styles: 'width: 100px; position: absolute;  z-index: 1;' });
        var context = connectorLine.getContext('2d');
        var elementClientRect = this.parent.element.getBoundingClientRect();
        var elementPosition = this.parent.element.style.getPropertyValue('position');
        connectorLine.style.left = cellRect.left + cellRect.width - (elementClientRect.left - (elementPosition === 'absolute' ?
            0 : this.parent.element.offsetLeft)) + 'px';
        connectorLine.style.top = (noteContainer.getBoundingClientRect().top - (elementClientRect.top - (elementPosition === 'absolute' ?
            0 : this.parent.element.offsetTop)) - 5) + 'px';
        context.clearRect(0, 0, connectorLine.width, connectorLine.height);
        context.beginPath();
        if (noteContainer.getBoundingClientRect().top === cellRect.top) {
            context.moveTo(0, 16);
            context.lineTo(30, 15);
        }
        else {
            context.moveTo(0, 30);
            context.lineTo(30, 15);
        }
        context.strokeStyle = 'black';
        context.lineWidth = 5;
        context.stroke();
        this.parent.element.appendChild(connectorLine);
        if (noteContainer.getBoundingClientRect().top > 0) {
            connectorLine.style.display = 'block';
            connectorLine.style.zIndex = '4';
        }
        else {
            connectorLine.style.display = 'none';
        }
    };
    SpreadsheetNote.prototype.showNote = function (args) {
        var targetElement = !isNullOrUndefined(this.parent.getCell(args.rowIndex, args.columnIndex)) ?
            this.parent.getCell(args.rowIndex, args.columnIndex) : args.cellElement;
        var contextMenuElement = document.getElementById(this.parent.element.id + '_contextmenu');
        var contextMenuDisplayStyle = !isNullOrUndefined(contextMenuElement) ? contextMenuElement.style.getPropertyValue('display') : 'none';
        var showNoteOverContextMenu = args.isNoteEditable ? true : contextMenuDisplayStyle !== 'block';
        if (!isNullOrUndefined(targetElement) && isNullOrUndefined(document.getElementsByClassName('e-addNoteContainer')[0]) && showNoteOverContextMenu
            && (args.isScrollWithNote || (targetElement.children !== null && targetElement.children.length > 0 && targetElement.children[targetElement.children.length - 1].classList.contains('e-addNoteIndicator')))) {
            this.createNoteContainer(targetElement, args.rowIndex, args.columnIndex, true, args.isNoteEditable);
            this.noteCellIndexes = [args.rowIndex, args.columnIndex];
        }
    };
    SpreadsheetNote.prototype.removeNoteContainer = function () {
        EventHandler.remove(document.getElementsByClassName('e-addNoteContainer')[0], 'mouseout', this.mouseOut);
        EventHandler.remove(document.getElementsByClassName('e-connectorLine')[0], 'mouseout', this.mouseOut);
        this.parent.element.removeChild(document.getElementsByClassName('e-addNoteContainer')[0]);
        this.parent.element.removeChild(document.getElementsByClassName('e-connectorLine')[0]);
        this.noteCellIndexes = null;
        this.isNoteVisible = false;
        this.isNoteVisibleOnTouch = false;
    };
    SpreadsheetNote.prototype.updateNoteContainer = function () {
        this.parent.selectionModule.isNoteActiveElement = document.activeElement.className.indexOf('e-addNoteContainer') > -1 ? true : this.parent.selectionModule.isNoteActiveElement;
        var cellIdxs = !isNullOrUndefined(this.noteCellIndexes) ?
            this.noteCellIndexes : getCellIndexes(this.parent.getActiveSheet().activeCell);
        var cell = getCell(cellIdxs[0], cellIdxs[1], this.parent.getActiveSheet());
        var noteContainer = document.getElementsByClassName('e-addNoteContainer')[0];
        if (((isNullOrUndefined(cell) || isNullOrUndefined(cell.notes)) || (cell.notes !== noteContainer.value))
            && this.parent.selectionModule.isNoteActiveElement) {
            var address = getSheetName(this.parent, this.parent.activeSheetIndex) + '!' + getRangeAddress(cellIdxs);
            this.parent.notify(setActionData, { args: { action: 'beforeCellSave', eventArgs: { address: address } } });
            var eventAction = !isNullOrUndefined(cell) && cell.notes ? 'editNote' : 'addNote';
            updateCell(this.parent, this.parent.getActiveSheet(), { rowIdx: cellIdxs[0], colIdx: cellIdxs[1], preventEvt: true,
                cell: { notes: noteContainer.value, isNoteEditable: true } });
            var eventArgs = { notes: noteContainer.value, address: address };
            this.parent.notify(completeAction, { eventArgs: eventArgs, action: eventAction });
            this.isShowNote = null;
        }
        this.isShowNote = isNullOrUndefined(this.isShowNote) ? this.parent.selectionModule.isNoteActiveElement : this.isShowNote;
        if (this.isShowNote) {
            var isScrollWithNote = !isNullOrUndefined(cell) && !isNullOrUndefined(cell.isNoteEditable) ?
                cell.isNoteEditable : false;
            this.parent.notify(removeNoteContainer, '');
            this.parent.notify(showNote, { rowIndex: cellIdxs[0], columnIndex: cellIdxs[1], isNoteEditable: true, isScrollWithNote: isScrollWithNote });
        }
        else {
            this.parent.notify(removeNoteContainer, '');
            this.isShowNote = null;
        }
    };
    return SpreadsheetNote;
}());

/**
 * Dialog Service.
 *
 * @hidden
 */
var Dialog = /** @class */ (function () {
    /**
     * Constructor for initializing dialog service.
     *
     * @param {Spreadsheet} parent - Specifies the Spreadsheet instance.
     */
    function Dialog(parent) {
        this.parent = parent;
    }
    /**
     * To show dialog.
     *
     * @param {DialogModel} dialogModel - Specifies the Dialog model.
     * @param {boolean} cancelBtn - Specifies the cancel button.
     * @returns {void}
     */
    Dialog.prototype.show = function (dialogModel, cancelBtn) {
        var _this = this;
        var btnContent;
        cancelBtn = isNullOrUndefined(cancelBtn) ? true : false;
        var beforeOpenHandler = dialogModel.beforeOpen || null;
        var closeHandler = dialogModel.close || null;
        var model = {
            header: 'Spreadsheet',
            cssClass: this.parent.cssClass,
            target: this.parent.element,
            buttons: [],
            allowDragging: true
        };
        dialogModel.beforeOpen = function (args) {
            if (beforeOpenHandler) {
                beforeOpenHandler(args);
                if (args.cancel) {
                    _this.hide(true);
                    if (!args.preventFocus) {
                        focus(_this.parent.element);
                    }
                }
            }
        };
        dialogModel.close = function () {
            _this.destroyDialog();
            if (closeHandler) {
                closeHandler();
            }
        };
        extend(model, dialogModel);
        if (cancelBtn) {
            btnContent = this.parent.serviceLocator.getService(locale).getConstant(model.buttons.length ? 'Cancel' : 'Ok');
            model.buttons.push({
                buttonModel: { content: btnContent, isPrimary: model.buttons.length === 0 },
                click: this.hide.bind(this)
            });
        }
        var div = this.parent.createElement('div');
        document.body.appendChild(div);
        this.dialogInstance = new Dialog$1(model);
        this.dialogInstance.createElement = this.parent.createElement;
        this.dialogInstance.appendTo(div);
        if (this.dialogInstance) {
            this.dialogInstance.refreshPosition();
        }
    };
    /**
     * To destroy the dialog if it open is prevented by user.
     *
     * @returns {void}
     */
    Dialog.prototype.destroyDialog = function () {
        this.dialogInstance.destroy();
        remove(this.dialogInstance.element);
        this.dialogInstance = null;
    };
    /**
     * To hide dialog.
     *
     * @param {DialogModel} disableAnimation - To disable the animation while hiding the dialog.
     * @returns {void}
     */
    Dialog.prototype.hide = function (disableAnimation) {
        if (this.dialogInstance) {
            if (disableAnimation) {
                this.dialogInstance.animationSettings.effect = 'None';
                this.dialogInstance.dataBind();
            }
            this.dialogInstance.hide();
        }
    };
    /**
     * To clear private variables.
     *
     * @returns {void}
     */
    Dialog.prototype.destroy = function () {
        this.parent = null;
    };
    return Dialog;
}());

/**
 *  Begin and complete events.
 *
 * @hidden
 */
var ActionEvents = /** @class */ (function () {
    /**
     * Constructor for initializing action begin and action complete services.
     *
     * @param {Spreadsheet} parent - Specifies the spreadsheet element.
     */
    function ActionEvents(parent) {
        this.parent = parent;
        this.addEventListener();
        //this.initializeActionBegin();
        //this.initializeActionComplete();
    }
    ActionEvents.prototype.initializeActionBegin = function () {
        var _this = this;
        var cellFormat = this.parent.beforeCellFormat;
        this.parent.beforeCellFormat = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: cellFormat, actionType: 'begin', eventType: 'format' });
        };
        var beforeOpen = this.parent.beforeOpen;
        this.parent.beforeOpen = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: beforeOpen, actionType: 'begin', eventType: 'beforeOpen' });
        };
        var beforeSave = this.parent.beforeSave;
        this.parent.beforeSave = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: beforeSave, actionType: 'begin', eventType: 'beforeSave' });
        };
        var beforeSort = this.parent.beforeSort;
        this.parent.beforeSort = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: beforeSort, actionType: 'begin', eventType: 'beforeSort' });
        };
    };
    ActionEvents.prototype.initializeActionComplete = function () {
        var _this = this;
        var sortComplete = this.parent.sortComplete;
        this.parent.sortComplete = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: sortComplete, actionType: 'complete', eventType: 'sorting' });
        };
        var cellSave = this.parent.cellSave;
        this.parent.cellSave = function (args) {
            _this.actionEventHandler({ evtArgs: args, evtFunc: cellSave, actionType: 'complete', eventType: 'cellSave' });
        };
    };
    ActionEvents.prototype.actionEventHandler = function (args) {
        if (args.evtFunc) {
            args.evtFunc.apply(this, [args]);
        }
        if (args.actionType === 'begin') {
            this.actionBeginHandler({ eventArgs: args.evtArgs, action: args.eventType });
        }
        else {
            this.actionCompleteHandler({ eventArgs: args.evtArgs, action: args.eventType });
        }
    };
    ActionEvents.prototype.actionBeginHandler = function (args) {
        var preventAction = args.preventAction;
        delete args.preventAction;
        var actionArgs = { action: args.action };
        if (args.isUndo) {
            actionArgs.isUndo = true;
            delete args.isUndo;
        }
        if (args.isRedo) {
            actionArgs.isUndo = false;
            delete args.isRedo;
        }
        actionArgs.args = args;
        this.parent.trigger('actionBegin', actionArgs);
        if (!preventAction && !this.parent.isPrintingProcessing && (args.action === 'clipboard' || args.action === 'format' ||
            args.action === 'cellSave' || args.action === 'addNote' || args.action === 'editNote' || args.action === 'deleteNote' ||
            args.action === 'beforeWrap' || args.action === 'beforeReplace' || args.action === 'filter' || args.action === 'beforeClear' ||
            args.action === 'beforeInsertImage' || args.action === 'beforeInsertChart' || args.action === 'chartDesign' ||
            args.action === 'cellDelete' || args.action === 'autofill' || args.action === 'validation' ||
            args.action === 'removeValidation' || args.action === 'hyperlink' || args.action === 'removeHyperlink' || args.action === 'deleteImage')) {
            this.parent.notify(setActionData, { args: args });
        }
        if (preventAction) {
            args.preventAction = true;
        }
        if (actionArgs.isUndo) {
            args.isUndo = true;
        }
        if (actionArgs.isUndo === false) {
            args.isRedo = true;
        }
    };
    ActionEvents.prototype.actionCompleteHandler = function (args) {
        var preventAction = args.preventAction;
        delete args.preventAction;
        this.parent.notify(triggerDataChange, args);
        if (!args.preventEventTrigger) {
            this.parent.trigger('actionComplete', args);
        }
        if (!preventAction && args.action !== 'undoRedo' && args.action !== 'gotoSheet') {
            this.parent.notify(updateUndoRedoCollection, { args: args });
        }
        this.parent.notify(positionAutoFillElement, null);
    };
    ActionEvents.prototype.addEventListener = function () {
        this.parent.on(completeAction, this.actionCompleteHandler, this);
        this.parent.on(beginAction, this.actionBeginHandler, this);
        this.parent.on(spreadsheetDestroyed, this.removeEventListener, this);
    };
    ActionEvents.prototype.removeEventListener = function () {
        this.parent.off(completeAction, this.actionCompleteHandler);
        this.parent.off(beginAction, this.actionBeginHandler);
        this.parent.off(spreadsheetDestroyed, this.removeEventListener);
    };
    return ActionEvents;
}());

/**
 * Specifes to create or modify overlay.
 *
 * @hidden
 */
var Overlay = /** @class */ (function () {
    /**
     * Constructor for initializing Overlay service.
     *
     *  @param {Spreadsheet} parent - Specifies the Spreadsheet instance.
     */
    function Overlay(parent) {
        this.minHeight = '300px';
        this.minWidth = '400px';
        this.isOverlayClicked = false;
        this.isResizerClicked = false;
        this.currentWidth = 400;
        this.currenHeight = 300;
        this.parent = parent;
        this.parent.on(selectionStatus, this.isOverlaySelected, this);
        this.parent.on(refreshOverlayElem, this.refreshOverlayElem, this);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
    }
    /**
     * To insert a shape.
     *
     * @param {string} id - Specifies the id.
     * @param {string} range - Specifies the range.
     * @param {number} sheetIndex - Specifies the sheet index.
     * @returns {HTMLElement} - Returns div element
     * @hidden
     */
    Overlay.prototype.insertOverlayElement = function (id, range, sheetIndex) {
        var div = this.parent.createElement('div', {
            id: id,
            attrs: { 'class': 'e-ss-overlay' },
            styles: 'width: ' + this.minWidth + ';  height: ' + this.minHeight
        });
        if (this.parent.allowEditing) {
            var actOverlayElem = this.parent.element.getElementsByClassName('e-ss-overlay-active')[0];
            if (actOverlayElem) {
                removeClass([actOverlayElem], 'e-ss-overlay-active');
                this.parent.notify(removeDesignChart, {});
            }
            div.classList.add('e-ss-overlay-active');
        }
        var indexes = getRangeIndexes(range);
        var sheet = this.parent.sheets[sheetIndex];
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        var pos = getCellPosition(sheet, indexes, frozenRow, frozenCol, this.parent.viewport.beforeFreezeHeight, this.parent.viewport.beforeFreezeWidth, this.parent.sheetModule.colGroupWidth, true);
        if (indexes[0] >= frozenRow && indexes[1] < frozenCol) {
            var mainPanel = this.parent.sheetModule.contentPanel;
            if (mainPanel.scrollTop) {
                pos.top -= mainPanel.scrollTop;
                pos.top +=
                    this.parent.getColumnHeaderContent().parentElement.getBoundingClientRect().height;
            }
        }
        if (indexes[1] >= frozenCol && indexes[0] < frozenRow) {
            var scrollPanel = this.parent.getScrollElement();
            if (scrollPanel.scrollLeft) {
                pos.left -= scrollPanel.scrollLeft;
                pos.left += this.parent.sheetModule.getRowHeaderWidth(sheet);
            }
        }
        var parent;
        if (indexes[0] < frozenRow || indexes[1] < frozenCol) {
            parent = this.parent.element.querySelector('#' + this.parent.element.id + '_sheet');
            if (frozenRow) {
                if (indexes[0] >= frozenRow) {
                    pos.top += (sheet.showHeaders ? 31 : 0) + getRowsHeight(sheet, getCellIndexes(sheet.topLeftCell)[0], frozenRow - 1);
                }
                else if (!frozenCol) {
                    pos.left += this.parent.sheetModule.getRowHeaderWidth(sheet, true);
                }
            }
            if (frozenCol) {
                if (indexes[1] >= frozenCol) {
                    pos.left += this.parent.sheetModule.getRowHeaderWidth(sheet);
                }
                else if (!frozenRow) {
                    pos.left += (sheet.showHeaders ? 31 : 0);
                }
            }
        }
        else {
            parent = this.parent.getMainContent();
        }
        div.style.top = Number(addDPRValue(pos.top).toFixed(2)) + 'px';
        div.style.left = Number(addDPRValue(pos.left).toFixed(2)) + 'px';
        if (sheetIndex === this.parent.activeSheetIndex) {
            parent.appendChild(div);
            this.renderResizeHandler(div);
            this.addEventListener(div);
        }
        else if (this.parent.isPrintingProcessing) {
            div.style.visibility = 'hidden';
            document.body.append(div);
        }
        this.originalWidth = parseFloat(getComputedStyle(div, null).getPropertyValue('width').replace('px', ''));
        this.originalHeight = parseFloat(getComputedStyle(div, null).getPropertyValue('height').replace('px', ''));
        return { element: div, top: pos.top, left: pos.left };
    };
    /**
     * To adjust the layout inside freeze pane.
     *
     * @hidden
     * @param {ChartModel} model - Specifies the id.
     * @param {HTMLElement} element - Specifies the range.
     * @param {string} range - Specifies the sheet index.
     * @returns {void}
     */
    Overlay.prototype.adjustFreezePaneSize = function (model, element, range) {
        var indexes = getRangeIndexes(range);
        var sheet = this.parent.getActiveSheet();
        var frozenRow = this.parent.frozenRowCount(sheet);
        var frozenCol = this.parent.frozenColCount(sheet);
        if (indexes[0] < frozenRow || indexes[1] < frozenCol) {
            if (!isNullOrUndefined(model.top)) {
                element.style.top = model.top + (sheet.showHeaders ? 31 : 0) - this.parent.viewport.beforeFreezeHeight + 'px';
            }
            if (!isNullOrUndefined(model.left)) {
                element.style.left = model.left + this.parent.sheetModule.getRowHeaderWidth(sheet, true) -
                    this.parent.viewport.beforeFreezeWidth + 'px';
            }
        }
        else {
            if (!isNullOrUndefined(model.top)) {
                element.style.top = model.top - this.parent.viewport.beforeFreezeHeight - (frozenRow ? getRowsHeight(sheet, getCellIndexes(sheet.topLeftCell)[0], frozenRow - 1) : 0) + 'px';
            }
            if (!isNullOrUndefined(model.left)) {
                element.style.left = model.left - this.parent.viewport.beforeFreezeWidth - (frozenCol ? getColumnsWidth(sheet, getCellIndexes(sheet.topLeftCell)[1], frozenCol - 1) : 0) + 'px';
            }
        }
        if (isNullOrUndefined(model.top)) {
            var startTop = getCellIndexes(sheet.topLeftCell)[0];
            model.top = this.parent.viewport.beforeFreezeHeight + (frozenRow && startTop === indexes[0] ? 0 : getRowsHeight(sheet, frozenRow ? startTop : 0, indexes[0] - 1));
        }
        if (isNullOrUndefined(model.left)) {
            var startLeft = getCellIndexes(sheet.topLeftCell)[1];
            model.left = this.parent.viewport.beforeFreezeWidth + (frozenCol && startLeft === indexes[1] ? 0 : getColumnsWidth(sheet, frozenCol ? startLeft : 0, indexes[1] - 1));
        }
    };
    Overlay.prototype.addEventListener = function (div) {
        var overlayElem = div;
        EventHandler.add(overlayElem, getStartEvent(), this.overlayClickHandler, this);
        EventHandler.add(overlayElem, getMoveEvent(), this.overlayMouseMoveHandler, this);
        EventHandler.add(this.parent.element.querySelector('#' + this.parent.element.id + '_sheet'), getMoveEvent(), this.overlayMouseMoveHandler, this);
        EventHandler.add(document, getEndEvent(), this.overlayMouseUpHandler, this);
        this.parent.on(overlayEleSize, this.setOriginalSize, this);
    };
    Overlay.prototype.setOriginalSize = function (args) {
        this.originalHeight = args.height;
        this.originalWidth = args.width;
    };
    Overlay.prototype.overlayMouseMoveHandler = function (e) {
        var target = e.target;
        var overlayElem = document.getElementsByClassName('e-ss-overlay-active')[0];
        var sheet = this.parent.getActiveSheet();
        var checkOffset = sheet.frozenRows || sheet.frozenColumns ? [29, this.parent.sheetModule.getRowHeaderWidth(sheet, true)] : [-1, -1];
        var height1;
        var top;
        var width1;
        var height2;
        var width2;
        var left;
        if (this.isOverlayClicked && this.isResizerClicked) {
            if (isTouchMove(e)) {
                e.preventDefault();
            }
            switch (this.resizer) {
                case 'e-ss-overlay-t':
                    height1 = Math.max(this.originalMouseY - getClientY(e) + this.originalHeight, 20);
                    top = getClientY(e) - (this.originalMouseY - this.originalResizeTop);
                    if (height1 > 20 && top > checkOffset[0]) {
                        overlayElem.style.height = height1 + 'px';
                        overlayElem.style.top = top + 'px';
                        this.resizedReorderTop = top; // resized divTop
                        this.currenHeight = height1;
                        this.parent.notify(refreshChartSize, {
                            height: overlayElem.style.height, width: overlayElem.style.width, overlayEle: overlayElem
                        });
                    }
                    break;
                case 'e-ss-overlay-r':
                    width1 = this.originalWidth + (getPageX(e) - this.originalMouseX);
                    if (width1 > 20) {
                        overlayElem.style.width = width1 + 'px';
                        this.currentWidth = width1;
                        this.parent.notify(refreshChartSize, {
                            height: overlayElem.style.height, width: overlayElem.style.width, overlayEle: overlayElem
                        });
                    }
                    break;
                case 'e-ss-overlay-b':
                    height2 = this.originalHeight + (getPageY(e) - this.originalMouseY);
                    if (height2 > 20) {
                        overlayElem.style.height = height2 + 'px';
                        this.currenHeight = height2;
                        this.parent.notify(refreshChartSize, {
                            height: overlayElem.style.height, width: overlayElem.style.width, overlayEle: overlayElem
                        });
                    }
                    break;
                case 'e-ss-overlay-l':
                    width2 = Math.max(this.originalMouseX - getClientX(e) + this.originalWidth, 20);
                    left = getClientX(e) - (this.originalMouseX - this.originalResizeLeft);
                    if (width2 > 20 && left > checkOffset[1]) {
                        overlayElem.style.width = width2 + 'px';
                        overlayElem.style.left = left + 'px';
                        this.resizedReorderLeft = left; //resized divLeft
                        this.currentWidth = width2;
                        this.parent.notify(refreshChartSize, {
                            height: overlayElem.style.height, width: overlayElem.style.width, overlayEle: overlayElem
                        });
                    }
                    break;
            }
        }
        else if (this.isOverlayClicked) {
            if (isTouchMove(e)) {
                e.preventDefault();
            }
            if ((closest(target, '.e-sheet') && !target.classList.contains('e-sheet-content')) ||
                target.classList.contains('e-cell')) {
                if (!overlayElem) {
                    return;
                }
                var aX = getClientX(e) - this.diffX;
                var aY = getClientY(e) - this.diffY;
                if (aX > checkOffset[1]) {
                    overlayElem.style.left = aX + 'px';
                }
                if (aY > checkOffset[0]) {
                    overlayElem.style.top = aY + 'px';
                }
                this.resizedReorderLeft = aX < 0 ? 0 : aX; //resized divLeft
                this.resizedReorderTop = aY < 0 ? 0 : aY; // resized divTop
            }
            else {
                this.overlayMouseUpHandler(e, true);
            }
        }
    };
    Overlay.prototype.overlayMouseUpHandler = function (e, isMouseUp) {
        if (!this.parent || this.parent.getActiveSheet().isProtected || !this.parent.allowEditing) {
            return;
        }
        this.isResizerClicked = false;
        var elem = e.target;
        var overlayElems = document.getElementsByClassName('e-datavisualization-chart e-ss-overlay-active');
        if (!elem.classList.contains('e-ss-overlay')) {
            elem = closest(e.target, '.e-datavisualization-chart') ?
                closest(e.target, '.e-datavisualization-chart') : elem;
        }
        var sheet = this.parent.getActiveSheet();
        var eventArgs = {
            prevTop: sheet.frozenRows || sheet.frozenColumns ? this.prevY : this.originalReorderTop,
            prevLeft: sheet.frozenRows || sheet.frozenColumns ? this.prevX : this.originalReorderLeft,
            currentTop: this.resizedReorderTop >= 0 ? parseInt(this.resizedReorderTop.toString(), 10) : this.originalReorderTop,
            currentLeft: this.resizedReorderLeft >= 0 ? parseInt(this.resizedReorderLeft.toString(), 10) : this.originalReorderLeft,
            id: elem.id, currentHeight: this.currenHeight, currentWidth: this.currentWidth,
            requestType: 'imageRefresh', prevHeight: this.originalHeight, prevWidth: this.originalWidth
        };
        if (this.isOverlayClicked || isMouseUp) {
            var currRowIdx = void 0;
            var currColIdx = void 0;
            var prevRowIdx = { clientY: eventArgs.prevTop, isImage: true };
            var prevColIdx = { clientX: eventArgs.prevLeft, isImage: true };
            var overlayEle = this.parent.element.getElementsByClassName('e-ss-overlay-active')[0];
            if (sheet.frozenRows || sheet.frozenColumns) {
                if (!overlayEle) {
                    return;
                }
                prevRowIdx.isImage = false;
                prevColIdx.isImage = false;
                prevRowIdx.target = overlayEle;
                prevColIdx.target = overlayEle;
                if (eventArgs.prevTop < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {
                    prevRowIdx.target = this.parent.getColumnHeaderContent();
                }
                if (eventArgs.prevLeft < this.parent.getRowHeaderContent().getBoundingClientRect().right) {
                    prevColIdx.target = this.parent.getRowHeaderTable();
                }
                var clientRect = overlayEle.getBoundingClientRect();
                currRowIdx = { clientY: clientRect.top };
                currColIdx = { clientX: clientRect.left };
                if (clientRect.top < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {
                    currRowIdx.target = this.parent.getColumnHeaderContent();
                }
                if (clientRect.left < this.parent.getRowHeaderContent().getBoundingClientRect().right) {
                    currColIdx.target = this.parent.getRowHeaderTable();
                }
            }
            else {
                currRowIdx = { clientY: eventArgs.currentTop, isImage: true };
                currColIdx = { clientX: eventArgs.currentLeft, isImage: true };
            }
            this.parent.notify(getRowIdxFromClientY, prevRowIdx);
            this.parent.notify(getRowIdxFromClientY, currRowIdx);
            this.parent.notify(getColIdxFromClientX, prevColIdx);
            this.parent.notify(getColIdxFromClientX, currColIdx);
            if (currRowIdx.size) {
                eventArgs.currentTop = currRowIdx.size;
            }
            if (currColIdx.size) {
                eventArgs.currentLeft = currColIdx.size;
            }
            eventArgs.prevRowIdx = prevRowIdx.clientY;
            eventArgs.prevColIdx = prevColIdx.clientX;
            eventArgs.currentRowIdx = currRowIdx.clientY;
            eventArgs.currentColIdx = currColIdx.clientX;
            if ((sheet.frozenColumns || sheet.frozenRows) && !closest(overlayEle, '.e-sheet-content')) {
                var frozenCol = this.parent.frozenColCount(sheet);
                var frozenRow = this.parent.frozenRowCount(sheet);
                if (eventArgs.currentRowIdx >= frozenRow && eventArgs.currentColIdx >= frozenCol) {
                    var top_1 = parseInt(overlayEle.style.top, 10);
                    var left = parseInt(overlayEle.style.left, 10);
                    var mainPanel = this.parent.sheetModule.contentPanel;
                    top_1 += mainPanel.scrollTop;
                    top_1 -= this.parent.getColumnHeaderContent().parentElement.getBoundingClientRect().height;
                    var scrollPanel = this.parent.getScrollElement();
                    left += scrollPanel.scrollLeft;
                    left -= this.parent.sheetModule.getRowHeaderWidth(sheet);
                    overlayEle.style.top = top_1 + 'px';
                    overlayEle.style.left = left + 'px';
                    this.parent.getMainContent().appendChild(overlayEle);
                }
            }
            if (overlayElems && overlayElems[0]) {
                if (overlayElems[0].querySelector('.e-control')) {
                    eventArgs.id = overlayElems[0].id;
                }
            }
            if (this.originalReorderTop !== this.resizedReorderTop || this.originalReorderLeft !== this.resizedReorderLeft) {
                eventArgs.id = overlayEle.id;
                if (overlayElems && overlayElems[0]) {
                    eventArgs.requestType = 'chartRefresh';
                    this.parent.notify(refreshChartCellObj, eventArgs);
                }
                else {
                    this.parent.notify(refreshImgCellObj, eventArgs);
                }
                this.resizedReorderTop = this.originalReorderTop;
                this.resizedReorderLeft = this.originalReorderLeft;
            }
            else if (this.currenHeight !== this.originalHeight || this.originalWidth !== this.currentWidth) {
                eventArgs.id = elem.id.indexOf('overlay') > 0 ? elem.id : elem.parentElement &&
                    elem.parentElement.classList.contains('e-ss-overlay') ? elem.parentElement.id : overlayEle.id;
                if (overlayElems && overlayElems[0]) {
                    eventArgs.requestType = 'chartRefresh';
                    this.parent.notify(refreshChartCellObj, eventArgs);
                }
                else {
                    this.parent.notify(refreshImgCellObj, eventArgs);
                }
                this.originalHeight = this.currenHeight;
                this.originalWidth = this.currentWidth;
            }
        }
        this.isOverlayClicked = false;
    };
    Overlay.prototype.isOverlaySelected = function (args) {
        args.isOverlayClicked = this.isOverlayClicked;
    };
    Overlay.prototype.refreshOverlayElem = function (args) {
        if (args) {
            var selector = '.e-ss-overlay-active' + ((args && args.selector) || '');
            var overlayElem = this.parent.element.querySelector(selector);
            if (overlayElem) {
                removeClass([overlayElem], 'e-ss-overlay-active');
                this.parent.notify(removeDesignChart, {});
            }
        }
        else {
            var selector = 'e-ss-overlay-active';
            var overlayElems = Array.from(this.parent.element.getElementsByClassName(selector));
            for (var i = 0; i < overlayElems.length; i++) {
                var element = overlayElems[i];
                if (element) {
                    removeClass([element], 'e-ss-overlay-active');
                    this.parent.notify(removeDesignChart, {});
                }
            }
        }
        this.parent.notify(clearChartBorder, null);
    };
    Overlay.prototype.overlayClickHandler = function (e) {
        if (this.parent.getActiveSheet().isProtected || !this.parent.allowEditing) {
            return;
        }
        this.isOverlayClicked = true;
        var target = e.target;
        var overlayElem = e.target;
        if (!target.classList.contains('e-ss-overlay')) {
            overlayElem = target.parentElement;
            if (closest(e.target, '.e-datavisualization-chart')) {
                overlayElem = closest(e.target, '.e-datavisualization-chart');
            }
        }
        var sheet = this.parent.getActiveSheet();
        if ((sheet.frozenColumns || sheet.frozenRows) && closest(overlayElem, '.e-sheet-content')) {
            var top_2 = parseInt(overlayElem.style.top, 10);
            var left = parseInt(overlayElem.style.left, 10);
            var mainPanel = this.parent.sheetModule.contentPanel;
            top_2 -= mainPanel.scrollTop;
            top_2 += this.parent.getColumnHeaderContent().parentElement.getBoundingClientRect().height;
            var scrollPanel = this.parent.getScrollElement();
            left -= scrollPanel.scrollLeft;
            left += this.parent.sheetModule.getRowHeaderWidth(sheet);
            overlayElem.style.top = top_2 + 'px';
            overlayElem.style.left = left + 'px';
            this.parent.element.querySelector('#' + this.parent.element.id + '_sheet').appendChild(overlayElem);
        }
        this.originalWidth = this.currentWidth = parseFloat(overlayElem.style.width);
        this.originalHeight = this.currenHeight = parseFloat(overlayElem.style.height);
        this.originalReorderLeft = parseFloat(overlayElem.style.left); //divLeft
        this.originalReorderTop = parseFloat(overlayElem.style.top); // divTop
        this.resizedReorderLeft = parseFloat(overlayElem.style.left); //resized divLeft
        this.resizedReorderTop = parseFloat(overlayElem.style.top); // resized divTop
        this.originalResizeTop = this.originalReorderTop;
        this.originalResizeLeft = this.originalReorderLeft;
        this.originalMouseX = getClientX(e); // posX
        this.originalMouseY = getClientY(e); // posY
        this.diffX = this.originalMouseX - this.originalReorderLeft;
        this.diffY = this.originalMouseY - this.originalReorderTop;
        var actOverlayElem = document.getElementsByClassName('e-ss-overlay-active')[0];
        if (actOverlayElem) {
            removeClass([actOverlayElem], 'e-ss-overlay-active');
        }
        this.parent.element.querySelector('#' + overlayElem.id).classList.add('e-ss-overlay-active');
        if (target.classList.contains('e-ss-resizer')) {
            this.resizer = target.classList[0];
            this.isResizerClicked = true;
        }
        if (overlayElem.classList.contains('e-datavisualization-chart')) {
            this.parent.notify(focusChartBorder, { id: overlayElem.id });
            if (!actOverlayElem) {
                this.parent.notify(insertDesignChart, { id: overlayElem.id });
            }
        }
        var clientRect = overlayElem.getBoundingClientRect();
        this.prevX = clientRect.left;
        this.prevY = clientRect.top;
    };
    Overlay.prototype.renderResizeHandler = function (overlay) {
        var handles = ['e-ss-overlay-t', 'e-ss-overlay-r', 'e-ss-overlay-b', 'e-ss-overlay-l'];
        var idx = 0;
        var handleElem;
        while (idx < handles.length) {
            handleElem = this.parent.createElement('div', { className: handles[idx] + ' ' + 'e-ss-resizer' + (Browser.isDevice ? ' e-ss-resizer-touch' : ''),
                styles: 'width: 8px; height: 8px; border-radius: 4px;' });
            overlay.appendChild(handleElem);
            idx++;
        }
    };
    Overlay.prototype.removeEventListener = function () {
        var overlays = this.parent.element.querySelectorAll('.e-ss-overlay');
        if (overlays.length) { // Added this condition temporarly to handle chart destroy from spec file.
            for (var idx = 0; idx < overlays.length; idx++) {
                EventHandler.remove(overlays[idx], getStartEvent(), this.overlayClickHandler);
                EventHandler.remove(overlays[idx], getMoveEvent(), this.overlayMouseMoveHandler);
            }
        }
        var ele = this.parent.element.querySelector('#' + this.parent.element.id + '_sheet');
        if (ele) {
            EventHandler.remove(ele, getMoveEvent(), this.overlayMouseMoveHandler);
        }
        if (document) {
            EventHandler.remove(document, getEndEvent(), this.overlayMouseUpHandler);
        }
        if (!this.parent.isDestroyed) {
            this.parent.off(overlayEleSize, this.setOriginalSize);
            this.parent.off(selectionStatus, this.isOverlaySelected);
            this.parent.off(refreshOverlayElem, this.refreshOverlayElem);
            this.parent.off(spreadsheetDestroyed, this.destroy);
        }
    };
    /**
     * To clear private variables.
     *
     * @returns {void}
     */
    Overlay.prototype.destroy = function () {
        this.removeEventListener();
        if (this.currentWidth) {
            this.currentWidth = null;
        }
        if (this.currenHeight) {
            this.currenHeight = null;
        }
        if (this.minHeight) {
            this.minHeight = null;
        }
        if (this.minWidth) {
            this.minWidth = null;
        }
        if (this.isOverlayClicked) {
            this.isOverlayClicked = null;
        }
        if (this.isResizerClicked) {
            this.isResizerClicked = null;
        }
        this.parent = null;
    };
    return Overlay;
}());

var __extends$9 = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign$4 = (undefined && undefined.__assign) || function () {
    __assign$4 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign$4.apply(this, arguments);
};
var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Objects used for configuring the Ribbon tab header properties.
 */
var RibbonHeader = /** @class */ (function (_super) {
    __extends$9(RibbonHeader, _super);
    function RibbonHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$8([
        Property('')
    ], RibbonHeader.prototype, "text", void 0);
    __decorate$8([
        Property('')
    ], RibbonHeader.prototype, "iconCss", void 0);
    __decorate$8([
        Property('left')
    ], RibbonHeader.prototype, "iconPosition", void 0);
    return RibbonHeader;
}(ChildProperty));
/**
 * An array of object that is used to configure the Tab.
 */
var RibbonItem = /** @class */ (function (_super) {
    __extends$9(RibbonItem, _super);
    function RibbonItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate$8([
        Complex({}, RibbonHeader)
    ], RibbonItem.prototype, "header", void 0);
    __decorate$8([
        Collection([], Item)
    ], RibbonItem.prototype, "content", void 0);
    __decorate$8([
        Property('')
    ], RibbonItem.prototype, "cssClass", void 0);
    __decorate$8([
        Property(false)
    ], RibbonItem.prototype, "disabled", void 0);
    return RibbonItem;
}(ChildProperty));
/**
 * Represents Ribbon component.
 */
var Ribbon = /** @class */ (function (_super) {
    __extends$9(Ribbon, _super);
    /**
     * Constructor for creating the widget.
     *
     * @param {RibbonModel} options - Specify the options
     * @param {string|HTMLDivElement} element -specify the element.
     */
    function Ribbon(options, element) {
        return _super.call(this, options) || this;
    }
    /**
     * For internal use only.
     *
     * @returns {void} - For internal use only.
     * @private
     */
    Ribbon.prototype.preRender = function () {
        /** */
    };
    /**
     * For internal use only.
     *
     * @returns {void} - For internal use only.
     * @private
     */
    Ribbon.prototype.render = function () {
        if (!this.element.id) {
            this.element.id = getUniqueID('ribbon');
        }
        this.renderRibbon();
    };
    /**
     * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).
     *
     * {% codeBlock src='spreadsheet/destroy/index.md' %}{% endcodeBlock %}
     *
     * @function destroy
     * @returns {void} - Destroys the component
     */
    Ribbon.prototype.destroy = function () {
        var expandCollapseElem = this.element.querySelector('.e-drop-icon');
        if (expandCollapseElem) {
            expandCollapseElem.removeEventListener('click', this.ribbonExpandCollapse.bind(this));
        }
        if (this.menuItems.length) {
            var fileMenu = document.getElementById(this.element.id + "_menu");
            if (fileMenu) {
                getComponent(fileMenu, 'menu').destroy();
            }
        }
        if (this.toolbarObj) {
            this.toolbarObj.destroy();
        }
        if (this.tabObj) {
            this.tabObj.destroy();
        }
        this.element.innerHTML = '';
        this.toolbarObj = null;
        this.tabObj = null;
        _super.prototype.destroy.call(this);
    };
    Ribbon.prototype.getTabItems = function () {
        var _this = this;
        var tabItems = [];
        if (this.menuItems.length) {
            tabItems.push({
                header: { text: this.initMenu(this.menuItems) },
                content: this.toolbarObj.element,
                cssClass: 'e-menu-tab'
            });
        }
        this.items.forEach(function (item) {
            tabItems.push({
                header: item.header,
                content: _this.toolbarObj.element
            });
        });
        return tabItems;
    };
    Ribbon.prototype.initMenu = function (menuItems) {
        var _this = this;
        var menu = this.createElement('ul', { id: this.element.id + "_menu" });
        this.element.appendChild(menu);
        var menuObj = new Menu({
            cssClass: 'e-file-menu',
            items: menuItems,
            showItemOnClick: true,
            beforeOpen: function (args) {
                if (args.parentItem.text === menuItems[0].text) {
                    menuObj.showItemOnClick = false;
                }
                _this.trigger('beforeOpen', args);
            },
            select: function (args) {
                _this.trigger('fileMenuItemSelect', args);
            },
            beforeClose: function (args) {
                if (args.event.type === 'mouseover' && !closest(args.event.target, '.e-menu-popup')) {
                    args.cancel = true;
                    return;
                }
                _this.trigger('beforeClose', args);
                if (!args.parentItem || args.parentItem.text === menuItems[0].text) {
                    menuObj.setProperties({ showItemOnClick: true }, true);
                }
            },
            beforeItemRender: function (args) {
                _this.trigger('beforeFileMenuItemRender', args);
            },
            created: function () {
                menuObj.element.removeAttribute('tabindex');
                var fileItem = menuObj.element.querySelector('.e-menu-item');
                if (fileItem) {
                    fileItem.removeAttribute('tabindex');
                }
            }
        });
        menuObj.createElement = this.createElement;
        menuObj.appendTo(menu);
        return menu.parentElement;
    };
    Ribbon.prototype.renderRibbon = function () {
        var _this = this;
        var tabElement = this.createElement('div');
        var tBarElement = this.createElement('div');
        var isShortcut;
        this.toolbarObj = new Toolbar({
            items: this.items[this.selectedTab].content,
            clicked: function (args) { return _this.trigger('clicked', args); }
        });
        this.toolbarObj.createElement = this.createElement;
        this.toolbarObj.appendTo(tBarElement);
        this.tabObj = new Tab({
            selectedItem: this.getIndex(this.selectedTab),
            animation: { next: { duration: 0 }, previous: { duration: 0 } },
            items: this.getTabItems(),
            selecting: function (args) {
                if (args.isSwiped) {
                    args.cancel = true;
                    return;
                }
                isShortcut = args.event && args.event.isShortcut;
                if (_this.menuItems.length && args.selectingIndex === 0) {
                    args.cancel = true;
                    if ((!args.event || isShortcut || args.event.type === 'keydown') && args.selectingItem) {
                        var fileMenu = args.selectingItem.querySelector('.e-file-menu .e-menu-item');
                        if (fileMenu) {
                            fileMenu.click();
                        }
                    }
                }
                else {
                    if (args.selectingIndex === _this.getIndex(_this.selectedTab)) {
                        return;
                    }
                    _this.updateToolbar(_this.getIndex(args.selectingIndex, true));
                    _this.toolbarObj.dataBind();
                    _this.refreshTemplateItems(_this.toolbarObj); // To refresh template items in the toolbar.
                    if (_this.element.classList.contains('e-collapsed')) {
                        EventHandler.remove(args.selectedItem, 'click', _this.ribbonExpandCollapse);
                    }
                    var eventArgs = void 0;
                    if (_this.menuItems.length) {
                        eventArgs = __assign$4({}, args);
                        eventArgs.selectingIndex -= 1;
                        eventArgs.selectedIndex -= 1;
                    }
                    else {
                        eventArgs = args;
                    }
                    _this.trigger('selecting', eventArgs);
                }
            },
            selected: function (args) {
                if (!args.isInteracted && !isShortcut) {
                    args.preventFocus = true;
                }
                if (args.selectedIndex === _this.getIndex(_this.selectedTab)) {
                    return;
                }
                _this.setProperties({ 'selectedTab': _this.getIndex(args.selectedIndex, true) }, true);
                if (_this.element.classList.contains('e-collapsed')) {
                    _this.element.classList.remove('e-collapsed');
                    _this.trigger('expandCollapse', { element: _this.toolbarObj.element, expanded: true });
                }
            },
            created: function () {
                _this.toolbarObj.refreshOverflow();
            }
        });
        this.element.appendChild(tabElement);
        this.tabObj.createElement = this.createElement;
        this.tabObj.appendTo(tabElement);
        var collapseBtn = this.createElement('span', { className: 'e-drop-icon e-icons' });
        collapseBtn.addEventListener('click', this.ribbonExpandCollapse.bind(this));
        this.element.appendChild(collapseBtn);
    };
    Ribbon.prototype.ribbonExpandCollapse = function (e) {
        var eventArgs = { element: this.toolbarObj.element, expanded: true };
        var activeTab;
        if (this.element.classList.contains('e-collapsed')) {
            activeTab = this.tabObj.element.querySelector('.e-tab-header').getElementsByClassName('e-toolbar-item')[this.tabObj.selectedItem];
            this.element.classList.remove('e-collapsed');
            activeTab.classList.add('e-active');
            EventHandler.remove(activeTab, 'click', this.ribbonExpandCollapse);
            this.trigger('expandCollapse', eventArgs);
        }
        else {
            activeTab = this.tabObj.element.querySelector('.e-tab-header .e-toolbar-item.e-active');
            this.element.classList.add('e-collapsed');
            eventArgs.expanded = false;
            activeTab.classList.remove('e-active');
            EventHandler.add(activeTab, 'click', this.ribbonExpandCollapse, this);
            this.trigger('expandCollapse', eventArgs);
        }
    };
    Ribbon.prototype.getIndex = function (index, decrement) {
        return this.menuItems.length ? (decrement ? index - 1 : index + 1) : index;
    };
    Ribbon.prototype.updateToolbar = function (index) {
        this.toolbarObj.items = this.items[index].content;
        this.toolbarObj.dataBind();
    };
    Ribbon.prototype.refreshTemplateItems = function (toolbarInstance) {
        if (this.spreadInstance && this.spreadInstance.isReact && this.spreadInstance.portals &&
            toolbarInstance && toolbarInstance.portals) {
            this.spreadInstance.portals = this.spreadInstance.portals.concat(toolbarInstance.portals);
            this.spreadInstance['renderReactTemplates']();
        }
    };
    /**
     * To enable / disable the ribbon menu items.
     *
     * @param {string[]} items - Items that needs to be enabled / disabled.
     * @param {boolean} enable - Set `true` / `false` to enable / disable the menu items.
     * @param {boolean} isUniqueId - Set `true` if the given menu items `text` is a unique id.
     * @returns {void} - To enable / disable the ribbon menu items.
     */
    Ribbon.prototype.enableMenuItems = function (items, enable, isUniqueId) {
        if (enable === void 0) { enable = true; }
        if (!this.menuItems.length) {
            return;
        }
        getComponent(document.getElementById(this.element.id + "_menu"), 'menu').enableItems(items, enable, isUniqueId);
    };
    /**
     * To show/hide the menu items in Ribbon.
     *
     * @param {string[]} items - Specifies the menu items text which is to be show/hide.
     * @param {boolean} hide - Set `true` / `false` to hide / show the menu items.
     * @param {boolean} isUniqueId - Set `true` if the given menu items `text` is a unique id.
     * @returns {void} - To show/hide the menu items in Ribbon.
     */
    Ribbon.prototype.hideMenuItems = function (items, hide, isUniqueId) {
        if (hide === void 0) { hide = true; }
        if (!this.menuItems.length) {
            return;
        }
        var menuInstance = getComponent(document.getElementById(this.element.id + "_menu"), 'menu');
        if (hide) {
            menuInstance.hideItems(items, isUniqueId);
        }
        else {
            menuInstance.showItems(items, isUniqueId);
        }
    };
    /**
     * To add custom menu items.
     *
     * @param {MenuItemModel[]} items - Specifies the Ribbon menu items to be inserted.
     * @param {string} text - Specifies the existing file menu item text before / after which the new file menu items to be inserted.
     * @param {boolean} insertAfter - Set `false` if the `items` need to be inserted before the `text`.
     * By default, `items` are added after the `text`.
     * @param {boolean} isUniqueId - Set `true` if the given menu items `text` is a unique id.
     * @returns {void} - To add custom menu items.
     */
    Ribbon.prototype.addMenuItems = function (items, text, insertAfter, isUniqueId) {
        if (insertAfter === void 0) { insertAfter = true; }
        if (!this.menuItems.length) {
            return;
        }
        var menuInstance = getComponent(document.getElementById(this.element.id + "_menu"), 'menu');
        if (insertAfter) {
            menuInstance.insertAfter(items.reverse(), text, isUniqueId);
        }
        else {
            menuInstance.insertBefore(items, text, isUniqueId);
        }
    };
    /**
     * To show/hide the Ribbon tabs.
     *
     * @param {string[]} tabs - Specifies the tab header text which needs to be shown/hidden.
     * @param {boolean} hide - Set `true` / `false` to hide / show the ribbon tabs.
     * @returns {void} - To show/hide the Ribbon tabs.
     */
    Ribbon.prototype.hideTabs = function (tabs, hide) {
        var _this = this;
        if (hide === void 0) { hide = true; }
        var idx;
        var activeTab;
        var stateChanged;
        var isAllHidden;
        if (!hide) {
            isAllHidden = this.isAllHidden();
        }
        tabs.forEach(function (tab) {
            idx = _this.getTabIndex(tab, -1);
            if (idx > -1) {
                if (hide) {
                    if (!_this.items[idx].cssClass.includes(' e-hide')) {
                        _this.items[idx].cssClass = _this.items[idx].cssClass + " e-hide";
                        _this.tabObj.items[_this.getIndex(idx)].cssClass = _this.items[idx].cssClass;
                        if (activeTab === undefined && idx === _this.selectedTab) {
                            activeTab = true;
                        }
                        stateChanged = true;
                    }
                }
                else {
                    if (_this.items[idx].cssClass.includes(' e-hide')) {
                        _this.items[idx].cssClass = _this.items[idx].cssClass.replace(' e-hide', '');
                        _this.tabObj.items[_this.getIndex(idx)].cssClass = _this.items[idx].cssClass;
                        if (activeTab === undefined && idx === _this.selectedTab) {
                            activeTab = true;
                        }
                        stateChanged = true;
                    }
                }
            }
        });
        this.setProperties({ 'items': this.items }, true);
        // eslint-disable-next-line no-self-assign
        this.tabObj.items = this.tabObj.items;
        this.tabObj.dataBind();
        if (hide) {
            isAllHidden = this.isAllHidden();
            if (isAllHidden) {
                activeTab = false;
            }
        }
        if (!hide && isAllHidden) {
            activeTab = activeTab ? false : true;
        }
        if (stateChanged && isAllHidden) {
            if (this.element.classList.contains('e-collapsed')) {
                this.element.classList.remove('e-collapsed');
                this.element.querySelector('.e-drop-icon').classList.remove('e-hide');
            }
            else {
                this.element.classList.add('e-collapsed');
                this.element.querySelector('.e-drop-icon').classList.add('e-hide');
            }
        }
        if (activeTab) {
            for (var i = 0; i < this.items.length; i++) {
                if (!this.items[i].cssClass.includes(' e-hide')) {
                    this.tabObj.selectedItem = this.getIndex(i);
                    this.tabObj.dataBind();
                    break;
                }
            }
        }
    };
    Ribbon.prototype.isAllHidden = function () {
        var allHidden = true;
        for (var i = 0; i < this.items.length; i++) {
            if (!this.items[i].cssClass.includes(' e-hide')) {
                allHidden = false;
                break;
            }
        }
        return allHidden;
    };
    /**
     * To enable / disable the Ribbon tabs.
     *
     * @param {string[]} tabs - Specifies the tab header text which needs to be enabled / disabled.
     * @param {boolean} enable - Set `true` / `false` to enable / disable the ribbon tabs.
     * @returns {void} - To enable / disable the Ribbon tabs.
     */
    Ribbon.prototype.enableTabs = function (tabs, enable) {
        var _this = this;
        if (enable === void 0) { enable = true; }
        tabs.forEach(function (tab) {
            var idx = (_this.getTabIndex(tab, -1));
            if (idx > -1) {
                _this.items[idx].disabled = !enable;
                idx = _this.getIndex(idx);
                _this.tabObj.enableTab(idx, enable);
            }
        });
        this.setProperties({ 'items': this.items }, true);
    };
    /**
     * To add custom tabs.
     *
     * @param {RibbonItemModel[]} items - Specifies the Ribbon tab items to be inserted.
     * @param {string} insertBefore - Specifies the existing Ribbon header text before which the new tabs will be inserted.
     * If not specified, the new tabs will be inserted at the end.
     * @returns {void} - To add custom tabs.
     */
    Ribbon.prototype.addTabs = function (items, insertBefore) {
        var _this = this;
        var idx = this.getTabIndex(insertBefore);
        items.forEach(function (item) {
            item = new RibbonItem(_this.items[0], 'items', item, true);
            _this.items.splice(idx, 0, item);
            _this.tabObj.addTab([{ header: item.header, content: _this.toolbarObj.element }], _this.getIndex(idx));
            idx++;
        });
        this.setProperties({ 'items': this.items }, true);
        this.setProperties({ 'selectedTab': this.getIndex(this.tabObj.selectedItem, true) }, true);
    };
    Ribbon.prototype.getTabIndex = function (headerText, idx) {
        if (idx === void 0) { idx = this.items.length; }
        if (headerText) {
            for (var i = 0; i < this.items.length; i++) {
                if (this.items[i].header.text === headerText) {
                    idx = i;
                    break;
                }
            }
        }
        return idx;
    };
    /**
     * To add the custom items in Ribbon toolbar.
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the specified items will be inserted..
     * @param {ItemModel[]} items - Specifies the ribbon toolbar items that needs to be inserted.
     * @param {number} index - Specifies the index text before which the new items will be inserted.
     * @returns {void} - To add the custom items in Ribbon toolbar.
     * If not specified, the new items will be inserted at the end of the toolbar.
     */
    Ribbon.prototype.addToolbarItems = function (tab, items, index) {
        var _this = this;
        var tabIdx = this.getTabIndex(tab);
        if (isNullOrUndefined(index)) {
            index = this.items[tabIdx].content.length;
        }
        items.forEach(function (item) {
            item = new Item(_this.items[tabIdx].content[0], 'content', item, true);
            _this.items[tabIdx].content.splice(index, 0, item);
            index++;
        });
        this.setProperties({ 'items': this.items }, true);
        if (tabIdx === this.selectedTab && items.length) {
            this.updateToolbar(tabIdx);
        }
    };
    /**
     * Enables or disables the specified Ribbon toolbar items or all ribbon items.
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the toolbar items need to be enabled / disabled.
     * @param {number[]} items - Specifies the toolbar item indexes / unique id's which needs to be enabled / disabled.
     * If it is not specified the entire toolbar items will be enabled / disabled.
     * @param  {boolean} enable - Boolean value that determines whether the toolbar items should be enabled or disabled.
     * @returns {void} - Enables or disables the specified Ribbon toolbar items or all ribbon items.
     */
    Ribbon.prototype.enableItems = function (tab, items, enable) {
        if (enable === undefined) {
            enable = true;
        }
        if (items) {
            var tabIdx = this.getTabIndex(tab, -1);
            if (tabIdx < 0) {
                return;
            }
            for (var i = 0; i < items.length; i++) {
                if (typeof items[i] === 'string') {
                    for (var j = 0; j < this.items[tabIdx].content.length; j++) {
                        if (this.items[tabIdx].content[j].id === items[i]) {
                            items[i] = j;
                            break;
                        }
                    }
                }
                if (typeof items[i] === 'string') {
                    if (items.length - 1 > i) {
                        continue;
                    }
                    else {
                        return;
                    }
                }
                this.items[tabIdx].content[items[i]].disabled = !enable;
                this.setProperties({ 'items': this.items }, true);
                if (tabIdx === this.selectedTab) {
                    this.toolbarObj.enableItems(items[i], enable);
                }
            }
        }
        else {
            this.toolbarObj.disable(!enable);
        }
    };
    /**
     * To show/hide the existing Ribbon toolbar items.
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the specified items need to be hidden / shown.
     * @param {number[]} indexes - Specifies the toolbar indexes which needs to be shown/hidden from UI.
     * @param {boolean} hide - Set `true` / `false` to hide / show the toolbar items.
     * @returns {void} - To show/hide the existing Ribbon toolbar items.
     */
    Ribbon.prototype.hideToolbarItems = function (tab, indexes, hide) {
        var _this = this;
        if (hide === void 0) { hide = true; }
        var tabIdx;
        var tabContent;
        for (var i = 0; i < this.items.length; i++) {
            if (this.items[i].header.text === tab) {
                tabIdx = i;
                indexes.forEach(function (idx) {
                    tabContent = _this.items[tabIdx].content[idx];
                    if (tabContent) {
                        if (hide) {
                            if (!tabContent.cssClass.includes(' e-hide')) {
                                tabContent.cssClass = tabContent.cssClass + ' e-hide';
                            }
                        }
                        else {
                            if (tabContent.cssClass.includes(' e-hide')) {
                                tabContent.cssClass = tabContent.cssClass.replace(' e-hide', '');
                            }
                        }
                    }
                });
                break;
            }
        }
        this.setProperties({ 'items': this.items }, true);
        if (tabIdx !== undefined && tabIdx === this.selectedTab) {
            this.updateToolbar(tabIdx);
        }
    };
    /**
     * Get component name.
     *
     * @returns {string} - Get component name.
     * @private
     */
    Ribbon.prototype.getModuleName = function () {
        return 'ribbon';
    };
    /**
     * Get the properties to be maintained in the persisted state.
     *
     * @returns {string} - Get the properties to be maintained in the persisted state.
     * @private
     */
    Ribbon.prototype.getPersistData = function () {
        return this.addOnPersist([]);
    };
    /**
     * Called internally if any of the property value changed.
     *
     * @param {RibbonModel} newProp - Specify the new properties
     * @param {RibbonModel} oldProp - specify the old properties.
     * @returns {void} - if any of the property value changed.
     * @private
     */
    Ribbon.prototype.onPropertyChanged = function (newProp, oldProp) {
        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
            var prop = _a[_i];
            switch (prop) {
                case 'selectedTab':
                    this.tabObj.selectedItem = this.getIndex(newProp.selectedTab);
                    this.tabObj.dataBind();
                    break;
            }
        }
    };
    __decorate$8([
        Property('')
    ], Ribbon.prototype, "cssClass", void 0);
    __decorate$8([
        Property(true)
    ], Ribbon.prototype, "menuType", void 0);
    __decorate$8([
        Collection([], MenuItem)
    ], Ribbon.prototype, "menuItems", void 0);
    __decorate$8([
        Property(0)
    ], Ribbon.prototype, "selectedTab", void 0);
    __decorate$8([
        Collection([], RibbonItem)
    ], Ribbon.prototype, "items", void 0);
    __decorate$8([
        Property(null)
    ], Ribbon.prototype, "spreadInstance", void 0);
    __decorate$8([
        Event$1()
    ], Ribbon.prototype, "selecting", void 0);
    __decorate$8([
        Event$1()
    ], Ribbon.prototype, "fileMenuItemSelect", void 0);
    __decorate$8([
        Event$1()
    ], Ribbon.prototype, "beforeFileMenuItemRender", void 0);
    __decorate$8([
        Event$1()
    ], Ribbon.prototype, "beforeOpen", void 0);
    __decorate$8([
        Event$1()
    ], Ribbon.prototype, "beforeClose", void 0);
    __decorate$8([
        Event$1()
    ], Ribbon.prototype, "selectFormat", void 0);
    __decorate$8([
        Event$1()
    ], Ribbon.prototype, "clicked", void 0);
    __decorate$8([
        Event$1()
    ], Ribbon.prototype, "created", void 0);
    __decorate$8([
        Event$1()
    ], Ribbon.prototype, "expandCollapse", void 0);
    Ribbon = __decorate$8([
        NotifyPropertyChanges
    ], Ribbon);
    return Ribbon;
}(Component));

/**
 * `Color Picker` module is used to handle ColorPicker functionality.
 *
 * @hidden
 */
var ColorPicker = /** @class */ (function () {
    function ColorPicker(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    ColorPicker.prototype.render = function () {
        var _this = this;
        var id = this.parent.element.id;
        var input = this.parent.createElement('input', { attrs: { 'type': 'color' } });
        var tileRenderHandler = function (args) {
            args.element.tabIndex = -1;
        };
        this.fontColorPicker = new ColorPicker$1({
            value: '#000000ff',
            mode: 'Palette',
            showButtons: false,
            presetColors: fontColor,
            enableOpacity: false,
            cssClass: 'e-spreadsheet-color-popup',
            beforeTileRender: tileRenderHandler,
            beforeClose: function () { return _this.beforeCloseHandler(_this.fontColorPicker); },
            open: this.openHandler.bind(this),
            beforeModeSwitch: function (args) { return _this.beforeModeSwitch(_this.fontColorPicker, args); },
            change: function (args) {
                var color = _this.fontColorPicker.getValue(args.currentValue.rgba);
                var eventArgs = { style: { color: color }, onActionUpdate: true };
                _this.parent.notify(setCellFormat, eventArgs);
                if (eventArgs.cancel) {
                    _this.fontColorPicker.setProperties({ 'value': _this.fontColorPicker.getValue(args.previousValue.rgba, 'HEXA') }, true);
                }
                else {
                    _this.updateSelectedColor(eventArgs.style.color, _this.fontColorPicker.element, 'TextColor');
                }
            },
            created: function () { return _this.updateSelectedColor('#000000', _this.fontColorPicker.element, 'TextColor', true); }
        });
        this.fontColorPicker.createElement = this.parent.createElement;
        this.parent.element.appendChild(input);
        this.fontColorPicker.appendTo(input);
        input.parentElement.id = id + "_font_color_picker";
        addClass([input.nextElementSibling.getElementsByClassName('e-selected-color')[0]], ['e-icons', 'e-font-color']);
        input = this.parent.createElement('input', { attrs: { 'type': 'color' } });
        this.filColorPicker = new ColorPicker$1({
            value: '#ffff00ff',
            mode: 'Palette',
            presetColors: fillColor,
            showButtons: false,
            enableOpacity: false,
            cssClass: 'e-spreadsheet-color-popup',
            open: this.openHandler.bind(this),
            beforeTileRender: tileRenderHandler,
            beforeClose: function () { return _this.beforeCloseHandler(_this.filColorPicker); },
            beforeModeSwitch: function (args) { return _this.beforeModeSwitch(_this.filColorPicker, args); },
            change: function (args) {
                var color = _this.filColorPicker.getValue(args.currentValue.rgba);
                var eventArgs = { style: { backgroundColor: color }, onActionUpdate: true };
                _this.parent.notify(setCellFormat, eventArgs);
                if (eventArgs.cancel) {
                    _this.filColorPicker.setProperties({ 'value': _this.filColorPicker.getValue(args.previousValue.rgba, 'HEXA') }, true);
                }
                else {
                    _this.updateSelectedColor(eventArgs.style.backgroundColor, _this.filColorPicker.element, 'FillColor');
                }
            },
            created: function () { return _this.updateSelectedColor('#ffff00', _this.filColorPicker.element, 'FillColor', true); }
        });
        this.filColorPicker.createElement = this.parent.createElement;
        this.parent.element.appendChild(input);
        this.filColorPicker.appendTo(input);
        input.parentElement.id = id + "_fill_color_picker";
        addClass([input.nextElementSibling.getElementsByClassName('e-selected-color')[0]], ['e-icons', 'e-fill-color']);
    };
    ColorPicker.prototype.updateSelectedColor = function (color, ele, name, isCreated) {
        var localeText = this.parent.serviceLocator.getService(locale).getConstant(name);
        if (isCreated) {
            ele.parentElement.querySelector('.e-dropdown-btn').setAttribute('aria-label', localeText);
        }
        var primaryBtn = ele.parentElement.querySelector('.e-split-colorpicker');
        primaryBtn.setAttribute('aria-label', localeText + " " + color);
        primaryBtn.firstElementChild.style.borderBottomColor = color;
    };
    ColorPicker.prototype.openHandler = function (args) {
        args.element.querySelector('.e-mode-switch-btn').title =
            this.parent.serviceLocator.getService(locale).getConstant('MoreColors');
    };
    ColorPicker.prototype.beforeCloseHandler = function (inst) {
        if (!inst.modeSwitcher) {
            inst.setProperties({ modeSwitcher: true }, true);
        }
        if (inst.showButtons) {
            inst.setProperties({ showButtons: false }, true);
        }
        focus(inst.element.parentElement.querySelector('.e-split-colorpicker'));
    };
    ColorPicker.prototype.beforeModeSwitch = function (inst, args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        if (args.mode === 'Picker') {
            inst.showButtons = true;
            inst.dataBind();
            args.element.querySelector('.e-apply').title = l10n.getConstant('Apply');
            args.element.querySelector('.e-cancel').title = l10n.getConstant('Cancel');
            args.element.querySelector('.e-mode-switch-btn').title = l10n.getConstant('StandardColors');
        }
        else {
            inst.showButtons = false;
            inst.dataBind();
            args.element.querySelector('.e-mode-switch-btn').title = l10n.getConstant('MoreColors');
        }
    };
    ColorPicker.prototype.destroy = function () {
        if (this.parent) {
            this.removeEventListener();
            if (this.fontColorPicker) {
                this.fontColorPicker.destroy();
            }
            this.fontColorPicker = null;
            if (this.filColorPicker) {
                this.filColorPicker.destroy();
            }
            this.filColorPicker = null;
            this.parent = null;
        }
    };
    ColorPicker.prototype.addEventListener = function () {
        this.parent.on(beforeRibbonCreate, this.render, this);
        this.parent.on('destroyRibbonComponents', this.destroy, this);
        this.parent.on(spreadsheetDestroyed, this.destroy, this);
    };
    ColorPicker.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(beforeRibbonCreate, this.render);
            this.parent.off('destroyRibbonComponents', this.destroy);
            this.parent.off(spreadsheetDestroyed, this.destroy);
        }
    };
    return ColorPicker;
}());

/**
 * Represents Ribbon for Spreadsheet.
 */
var Ribbon$1 = /** @class */ (function () {
    function Ribbon$1(parent) {
        this.border = '1px solid #000000';
        this.fontNameIndex = 5;
        this.numPopupWidth = 0;
        this.preTabIdx = 1;
        this.spanElements = []; // To keep track of dynamically added elements in conditional formatting.
        this.iconSetGroupElement = [];
        this.iconSetElements = [];
        this.iconWrapElements = [];
        this.parent = parent;
        this.addEventListener();
        new ColorPicker(parent);
    }
    Ribbon$1.prototype.getModuleName = function () {
        return 'ribbon';
    };
    Ribbon$1.prototype.ribbonOperation = function (args) {
        if (args && args.onPropertyChange) {
            this.onPropertyChanged(args.prop);
        }
        else {
            this.initialize();
        }
    };
    Ribbon$1.prototype.initialize = function (onPropertyChange) {
        this.parent.notify(beforeRibbonCreate, {});
        if (this.parent.isMobileView()) {
            this.createMobileView();
        }
        else {
            var refEle = onPropertyChange && (this.parent.element.querySelector('.e-formula-bar-panel') ||
                document.getElementById(this.parent.element.id + '_sheet_panel'));
            this.createRibbon(refEle);
        }
    };
    Ribbon$1.prototype.getRibbonMenuItems = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var id = this.parent.element.id;
        var menuItems = [{
                text: this.parent.isMobileView() ? '' : l10n.getConstant('File'),
                iconCss: this.parent.isMobileView() ? 'e-icons e-file-menu-icon' : null, id: id + "_File",
                items: [
                    { text: l10n.getConstant('New'), id: id + "_New", iconCss: 'e-new e-icons' },
                    { text: l10n.getConstant('Open'), id: id + "_Open", iconCss: 'e-open e-icons' },
                    {
                        text: l10n.getConstant('SaveAs'), iconCss: 'e-save e-icons', id: id + "_Save_As",
                        items: [
                            { text: l10n.getConstant('ExcelXlsx'), id: id + "_Xlsx", iconCss: 'e-xlsx e-icons' },
                            { text: l10n.getConstant('ExcelXls'), id: id + "_Xls", iconCss: 'e-xls e-icons' },
                            { text: l10n.getConstant('CSV'), id: id + "_Csv", iconCss: 'e-csv e-icons' },
                            { text: l10n.getConstant('PDF'), id: id + "_Pdf", iconCss: 'e-pdf e-icons' }
                        ]
                    },
                    { text: l10n.getConstant('Print'), id: id + "_Print", iconCss: 'e-print e-icons' }
                ]
            }];
        return menuItems;
    };
    Ribbon$1.prototype.getRibbonItems = function () {
        var _this = this;
        var id = this.parent.element.id;
        var l10n = this.parent.serviceLocator.getService(locale);
        var items = [{
                header: { text: l10n.getConstant('Home') },
                content: [
                    { prefixIcon: 'e-undo-icon', tooltipText: l10n.getConstant('Undo') + " (Ctrl+Z)",
                        htmlAttributes: { 'aria-label': l10n.getConstant('Undo') }, id: id + '_undo', disabled: true },
                    { prefixIcon: 'e-redo-icon', tooltipText: l10n.getConstant('Redo') + " (Ctrl+Y)",
                        htmlAttributes: { 'aria-label': l10n.getConstant('Redo') }, id: id + '_redo', disabled: true },
                    { type: 'Separator', id: id + '_separator_1' },
                    { prefixIcon: 'e-cut-icon', tooltipText: l10n.getConstant('Cut') + " (Ctrl+X)",
                        htmlAttributes: { 'aria-label': l10n.getConstant('Cut') }, id: id + '_cut' },
                    { prefixIcon: 'e-copy-icon', tooltipText: l10n.getConstant('Copy') + " (Ctrl+C)",
                        htmlAttributes: { 'aria-label': l10n.getConstant('Copy') }, id: id + '_copy' },
                    { tooltipText: l10n.getConstant('Paste') + " (Ctrl+V)", template: this.getPasteBtn(id, l10n), id: id + '_paste',
                        disabled: true }, { type: 'Separator', id: id + '_separator_2' },
                    { template: this.getNumFormatDDB(id, l10n), tooltipText: l10n.getConstant('NumberFormat'), id: id + '_number_format' },
                    { type: 'Separator', id: id + '_separator_3' },
                    { template: this.getFontNameDDB(id), tooltipText: l10n.getConstant('Font'), id: id + '_font_name' },
                    { type: 'Separator', id: id + '_separator_4' },
                    { template: this.getFontSizeDDB(id), tooltipText: l10n.getConstant('FontSize'), id: id + '_font_size' },
                    { type: 'Separator', id: id + '_separator_5' },
                    { template: this.getBtn(id, 'bold', l10n.getConstant('Bold')), tooltipText: l10n.getConstant('Bold') + " (Ctrl+B)",
                        id: id + '_bold' },
                    { template: this.getBtn(id, 'italic', l10n.getConstant('Italic')), tooltipText: l10n.getConstant('Italic') + " (Ctrl+I)",
                        id: id + '_italic' },
                    { template: this.getBtn(id, 'line-through', l10n.getConstant('Strikethrough')),
                        tooltipText: l10n.getConstant('Strikethrough') + " (Ctrl+5)",
                        id: id + '_line-through' },
                    { template: this.getBtn(id, 'underline', l10n.getConstant('Underline')), tooltipText: l10n.getConstant('Underline') + " (Ctrl+U)",
                        id: id + '_underline' },
                    { template: document.getElementById(id + "_font_color_picker"), tooltipText: l10n.getConstant('TextColor'),
                        id: id + '_font_color_picker' }, { type: 'Separator', id: id + '_separator_6' },
                    { template: document.getElementById(id + "_fill_color_picker"), tooltipText: l10n.getConstant('FillColor'),
                        id: id + '_fill_color_picker' },
                    { template: this.getBordersDBB(id), tooltipText: l10n.getConstant('Borders'), id: id + '_borders' },
                    { template: this.getMergeSplitBtn(id), tooltipText: l10n.getConstant('MergeCells'), id: id + '_merge_cells',
                        disabled: true },
                    { type: 'Separator', id: id + '_separator_7' },
                    { template: this.getTextAlignDDB(id), tooltipText: l10n.getConstant('HorizontalAlignment'), id: id + '_text_align' },
                    { template: this.getVerticalAlignDDB(id), tooltipText: l10n.getConstant('VerticalAlignment'), id: id + '_vertical_align' },
                    { template: this.getBtn(id, 'wrap', l10n.getConstant('WrapText'), false), tooltipText: "" + l10n.getConstant('WrapText'), id: id + '_wrap' }
                ]
            },
            {
                header: { text: l10n.getConstant('Insert') }, content: [
                    {
                        prefixIcon: 'e-hyperlink-icon', text: l10n.getConstant('Link'),
                        id: id + '_hyperlink', tooltipText: l10n.getConstant('Link'), click: function () { _this.getHyperlinkDlg(); }
                    },
                    {
                        prefixIcon: 'e-image-icon', text: l10n.getConstant('Image'),
                        id: id + '_image', tooltipText: l10n.getConstant('Image'), click: function () { select('#' + id + '_imageUpload', _this.parent.element).click(); }
                    }
                ]
            },
            {
                header: { text: l10n.getConstant('Formulas') }, content: [
                    {
                        prefixIcon: 'e-insert-function', tooltipText: l10n.getConstant('InsertFunction'), text: l10n.getConstant('InsertFunction'),
                        id: id + '_insert_function'
                    },
                    { type: 'Separator', id: id + '_separator_14' },
                    {
                        template: this.createCalcOptions(id, l10n), tooltipText: l10n.getConstant('CalcOptionsTip'), id: id + '_calc_types'
                    },
                    { type: 'Separator', id: id + '_separator_15' },
                    {
                        prefixIcon: 'e-calculate-sheet', tooltipText: l10n.getConstant('CalcSheetTip'), text: l10n.getConstant('CalcActiveSheet'),
                        id: id + '_calc_current_sheet', click: function () {
                            _this.parent.notify(workbookFormulaOperation, { action: 'ClearDependentCellCollection' });
                            _this.parent.calculateNow('Sheet');
                        },
                        disabled: this.parent.calculationMode === 'Automatic'
                    },
                    {
                        prefixIcon: 'e-calculation', tooltipText: l10n.getConstant('CalcWorkbookTip'), text: l10n.getConstant('CalcWorkbook'),
                        id: id + '_calc_entire_sheets', click: function () {
                            _this.parent.notify(workbookFormulaOperation, { action: 'ClearDependentCellCollection' });
                            _this.parent.calculateNow('Workbook');
                        },
                        disabled: this.parent.calculationMode === 'Automatic'
                    }
                ]
            },
            {
                header: { text: l10n.getConstant('Data') }, content: [
                    {
                        prefixIcon: 'e-protect-icon', text: l10n.getConstant('ProtectSheet'), id: id + '_protect',
                        tooltipText: l10n.getConstant('ProtectSheet')
                    },
                    {
                        prefixIcon: 'e-password-protect-icon', text: l10n.getConstant('ProtectWorkbook'), id: id + '_protectworkbook',
                        tooltipText: l10n.getConstant('ProtectWorkbook')
                    },
                    { type: 'Separator', id: id + '_separator_8' },
                    {
                        template: this.datavalidationDDB(id), tooltipText: l10n.getConstant('DataValidation'),
                        id: id + '_datavalidation'
                    }
                ]
            },
            {
                header: { text: l10n.getConstant('View') }, content: [
                    {
                        prefixIcon: 'e-hide-headers', text: this.getLocaleText('Headers'), id: id + '_headers',
                        tooltipText: this.getLocaleText('Headers')
                    }, { type: 'Separator', id: id + '_separator_9' },
                    {
                        prefixIcon: 'e-hide-gridlines', text: this.getLocaleText('GridLines'), id: id + '_gridlines',
                        tooltipText: this.getLocaleText('GridLines')
                    },
                    { type: 'Separator', id: id + '_separator_13' },
                    { prefixIcon: 'e-freeze-pane', text: l10n.getConstant('FreezePanes'), id: id + '_freezepanes', tooltipText: l10n.getConstant('FreezePanes'), disabled: !this.parent.allowFreezePane },
                    { prefixIcon: 'e-freeze-row', text: l10n.getConstant('FreezeRows'), id: id + '_freezerows', tooltipText: l10n.getConstant('FreezeRows'), disabled: !this.parent.allowFreezePane },
                    { prefixIcon: 'e-freeze-column', text: l10n.getConstant('FreezeColumns'), id: id + '_freezecolumns', tooltipText: l10n.getConstant('FreezeColumns'), disabled: !this.parent.allowFreezePane }
                ]
            }];
        if (this.parent.allowConditionalFormat) {
            items.find(function (x) { return x.header && x.header.text === l10n.getConstant('Home'); }).content.push({ type: 'Separator', id: id + '_separator_10' }, { template: this.getCFDBB(id), tooltipText: l10n.getConstant('ConditionalFormatting'), id: id + '_conditionalformatting' });
        }
        if (this.parent.allowChart) {
            items.find(function (x) { return x.header && x.header.text === l10n.getConstant('Insert'); }).content.push({ type: 'Separator', id: id + '_separator_11' }, {
                template: this.getChartDDB(id, true), text: l10n.getConstant('Chart'),
                tooltipText: l10n.getConstant('Chart'), id: id + '_chart'
            });
        }
        if (this.parent.allowCellFormatting) {
            items.find(function (x) { return x.header && x.header.text === l10n.getConstant('Home'); }).content.push({ type: 'Separator', id: id + '_separator_12' }, { template: this.getClearDDB(id), tooltipText: l10n.getConstant('Clear'), id: id + '_clear' });
        }
        if (this.parent.allowSorting || this.parent.allowFiltering) {
            items.find(function (x) { return x.header && x.header.text === l10n.getConstant('Home'); }).content.push({ template: this.getSortFilterDDB(id), tooltipText: l10n.getConstant('SortAndFilter'), id: id + '_sorting' });
        }
        if (this.parent.allowFindAndReplace) {
            items.find(function (x) { return x.header && x.header.text === l10n.getConstant('Home'); }).content.push({
                template: this.getFindBtn(id), prefixIcon: 'e-tbar-search-icon tb-icons',
                tooltipText: l10n.getConstant('FindReplaceTooltip'), id: id + '_find'
            });
        }
        return items;
    };
    Ribbon$1.prototype.createCalcOptions = function (id, l10n) {
        var typeBtn = createElement('button', { id: id + '_calc_types', attrs: { 'type': 'button' }, className: 'e-calc-types' });
        var typeBtnText = createElement('span', { className: 'e-calc-types-text' });
        typeBtnText.innerText = l10n.getConstant('CalcOptions');
        typeBtn.appendChild(typeBtnText);
        this.calcTypeOptions = new DropDownButton({
            items: [
                { id: id + '_Automatic', text: l10n.getConstant('Automatic'), iconCss: this.parent.calculationMode === 'Automatic' ? 'e-icons e-selected-icon' : '' },
                { id: id + '_Manual', text: l10n.getConstant('Manual'), iconCss: this.parent.calculationMode === 'Manual' ? 'e-icons e-selected-icon' : '' }
            ],
            createPopupOnClick: true,
            iconCss: 'e-calculation e-icons',
            cssClass: 'e-flat e-calc-types'
        });
        this.calcTypeOptions.select = this.selectCalcOptions.bind(this);
        this.calcTypeOptions.appendTo(typeBtn);
        return typeBtn;
    };
    Ribbon$1.prototype.selectCalcOptions = function (args) {
        if (args.item.id === this.parent.element.id + '_Automatic') {
            this.calcTypeOptions.items[0].iconCss = 'e-icons e-selected-icon';
            this.calcTypeOptions.items[1].iconCss = '';
            if (this.parent.calculationMode === 'Manual') {
                this.parent.notify(workbookFormulaOperation, { action: 'ClearDependentCellCollection' });
            }
            this.parent.setProperties({ calculationMode: 'Automatic' }, true);
            this.updateFormulaButtons();
            this.parent.calculateNow('Workbook');
        }
        else {
            this.calcTypeOptions.items[0].iconCss = '';
            this.calcTypeOptions.items[1].iconCss = 'e-icons e-selected-icon';
            this.parent.setProperties({ calculationMode: 'Manual' }, true);
            this.updateFormulaButtons();
        }
    };
    Ribbon$1.prototype.updateFormulaButtons = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        this.parent.notify(enableToolbarItems, [{
                tab: l10n.getConstant('Formulas'), items: [this.parent.element.id + '_calc_current_sheet'],
                enable: this.parent.calculationMode === 'Manual'
            }]);
        this.parent.notify(enableToolbarItems, [{
                tab: l10n.getConstant('Formulas'), items: [this.parent.element.id + '_calc_entire_sheets'],
                enable: this.parent.calculationMode === 'Manual'
            }]);
    };
    Ribbon$1.prototype.getPasteBtn = function (id, l10n) {
        var _this = this;
        var btn = this.parent.element.appendChild(this.parent.createElement('button', { id: id + '_paste', attrs: { 'type': 'button' } }));
        this.pasteSplitBtn = new SplitButton({
            iconCss: 'e-icons e-paste-icon',
            items: [
                { text: l10n.getConstant('All'), id: 'All' },
                { text: l10n.getConstant('Values'), id: 'Values' },
                { text: l10n.getConstant('Formats'), id: 'Formats' }
            ],
            createPopupOnClick: true,
            select: function (args) {
                _this.pasteSplitBtn.element.setAttribute('aria-label', l10n.getConstant('Paste') + ' ' + args.item.text);
                _this.parent.notify(paste, { type: args.item.id, isAction: true, isInternal: true });
            },
            click: function () {
                btn.setAttribute('aria-label', l10n.getConstant('Paste'));
                _this.parent.notify(paste, { isAction: true, isInternal: true });
            },
            beforeOpen: function (args) {
                args.element.setAttribute('aria-label', l10n.getConstant('Paste'));
            }
        });
        this.pasteSplitBtn.createElement = this.parent.createElement;
        this.pasteSplitBtn.appendTo(btn);
        return btn.parentElement;
    };
    Ribbon$1.prototype.getHyperlinkDlg = function () {
        var activeSheet = this.parent.getActiveSheet();
        var indexes = getRangeIndexes(activeSheet.activeCell);
        var cell = getCell(indexes[0], indexes[1], activeSheet);
        if (cell && cell.hyperlink) {
            this.parent.notify(editHyperlink, null);
        }
        else {
            this.parent.notify(initiateHyperlink, null);
        }
    };
    Ribbon$1.prototype.passwordProtectDlg = function () {
        if (this.parent.password.length > 0) {
            this.parent.notify(unProtectWorkbook, null);
        }
        else {
            if (document.getElementById(this.parent.element.id + '_protectworkbook').classList.contains('e-active')) {
                document.getElementById(this.parent.element.id + '_protectworkbook').classList.remove('e-active');
                if (this.parent.showSheetTabs) {
                    this.parent.element.querySelector('.e-add-sheet-tab').removeAttribute('disabled');
                }
            }
            else {
                this.parent.notify(protectWorkbook, null);
            }
        }
    };
    Ribbon$1.prototype.getLocaleText = function (str) {
        var text;
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        if (sheet['show' + str]) {
            text = l10n.getConstant('Hide' + str);
        }
        else {
            text = l10n.getConstant('Show' + str);
        }
        return text;
    };
    Ribbon$1.prototype.getLocaleProtectText = function (str, setClass) {
        var text;
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        if (sheet.isProtected) {
            if (setClass) {
                this.parent.getMainContent().classList.remove('e-hide-' + str.toLowerCase());
            }
            text = l10n.getConstant('Unprotect' + str);
        }
        else {
            if (setClass) {
                this.parent.getMainContent().classList.add('e-hide-' + str.toLowerCase());
            }
            text = l10n.getConstant('Protect' + str);
        }
        return text;
    };
    Ribbon$1.prototype.getLocaleProtectWorkbook = function (str, setClass) {
        var text;
        var l10n = this.parent.serviceLocator.getService(locale);
        if (this.parent.isProtected) {
            if (setClass) {
                this.parent.getMainContent().classList.remove('e-hide-' + str.toLowerCase());
            }
            text = l10n.getConstant(str);
        }
        else {
            if (setClass) {
                this.parent.getMainContent().classList.add('e-hide-' + str.toLowerCase());
            }
            text = l10n.getConstant(str);
        }
        return text;
    };
    Ribbon$1.prototype.insertDesignChart = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var tabIdx = this.ribbon.items.length - 1;
        var chartTabHeader = l10n.getConstant('ChartDesign');
        if (this.parent.allowChart && this.ribbon.items[tabIdx] && this.ribbon.items[tabIdx].header.text !==
            chartTabHeader) {
            this.preTabIdx = this.ribbon.selectedTab;
            var id = this.parent.element.id;
            var items = [{
                    header: { text: chartTabHeader },
                    content: [
                        {
                            template: this.getAddChartEleDBB(id),
                            tooltipText: l10n.getConstant('AddChartElement'), id: id + 'add_chart_ element_chart'
                        },
                        { type: 'Separator' },
                        {
                            prefixIcon: 'e-switch-row-column-icon', text: l10n.getConstant('SwitchRowColumn'),
                            tooltipText: l10n.getConstant('SwitchRowColumn'),
                            id: id + 'switch_row_column_chart', click: function () {
                                _this.parent.notify(chartDesignTab, { switchRowColumn: true, triggerEvent: true });
                            }
                        },
                        { type: 'Separator' },
                        { template: this.getChartThemeDDB(id), tooltipText: l10n.getConstant('ChartTheme'), id: id + '_chart_theme' },
                        { type: 'Separator' },
                        { template: this.getChartDDB(id, false), tooltipText: l10n.getConstant('ChartType'), id: id + '_chart_type' }
                    ]
                }];
            this.addRibbonTabs({ items: items });
            this.ribbon.tabObj.select(this.ribbon.items.length);
        }
    };
    Ribbon$1.prototype.removeDesignChart = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var tabIdx = this.ribbon.items.length - 1;
        if (this.ribbon.items[tabIdx] && this.ribbon.items[tabIdx].header.text ===
            l10n.getConstant('ChartDesign')) {
            this.ribbon.tabObj.select(this.preTabIdx + 1);
            this.parent.hideRibbonTabs([l10n.getConstant('ChartDesign')], true);
            if (document.getElementsByClassName('e-addchart-ddb').length > 0) {
                document.getElementsByClassName('e-addchart-ddb')[0].remove();
            }
            if (document.getElementsByClassName('e-chart-type-ddb').length > 0) {
                document.getElementsByClassName('e-chart-type-ddb')[0].remove();
            }
            if (document.getElementsByClassName('e-charttheme-ddb').length > 0) {
                document.getElementsByClassName('e-charttheme-ddb')[0].remove();
            }
            delete this.ribbon.items[tabIdx].content[0];
            this.ribbon.items.length = this.ribbon.items.length - 1;
        }
    };
    Ribbon$1.prototype.createRibbon = function (refEle) {
        var ribbonElement = this.parent.createElement('div', { id: this.parent.element.id + "_ribbon" });
        this.ribbon = new Ribbon({
            selectedTab: 0,
            menuItems: this.getRibbonMenuItems(),
            items: this.getRibbonItems(),
            fileMenuItemSelect: this.fileMenuItemSelect.bind(this),
            beforeOpen: this.fileMenuBeforeOpen.bind(this),
            beforeClose: this.fileMenuBeforeClose.bind(this),
            clicked: this.toolbarClicked.bind(this),
            created: this.ribbonCreated.bind(this),
            selecting: this.tabSelecting.bind(this),
            expandCollapse: this.expandCollapseHandler.bind(this),
            beforeFileMenuItemRender: this.beforeRenderHandler.bind(this),
            spreadInstance: (this.parent && this.parent.isReact) ? this.parent : null
        });
        this.ribbon.createElement = this.parent.createElement;
        if (refEle) {
            this.parent.element.insertBefore(ribbonElement, refEle);
        }
        else {
            this.parent.element.appendChild(ribbonElement);
        }
        this.ribbon.appendTo(ribbonElement);
    };
    Ribbon$1.prototype.tabSelecting = function (args) {
        if (args.selectingIndex !== this.ribbon.selectedTab) {
            var l10n = this.parent.serviceLocator.getService(locale);
            if (this.ribbon.items[args.selectingIndex] && this.ribbon.items[args.selectingIndex].header.text ===
                l10n.getConstant('Insert')) {
                var ribbonContent = this.ribbon.items[args.selectingIndex].content;
                for (var i = ribbonContent.length - 1; i >= 0; i--) {
                    if (ribbonContent[i].id === this.parent.element.id + '_chart') {
                        var chartBtn = ribbonContent[i].template;
                        if (chartBtn && !chartBtn.classList.contains('e-dropdown-btn')) {
                            this.createChartDdb(document.getElementById(this.parent.element.id + '_chart-btn'), true);
                        }
                        break;
                    }
                }
            }
            if (this.ribbon.items[args.selectedIndex] && this.ribbon.items[args.selectedIndex].header.text ===
                l10n.getConstant('Insert')) {
                var ribbonContent = this.ribbon.items[args.selectedIndex].content;
                for (var i = ribbonContent.length - 1; i >= 0; i--) {
                    if (ribbonContent[i].id === this.parent.element.id + '_chart') {
                        var chartBtn = ribbonContent[i].template;
                        if (chartBtn && chartBtn.classList.contains('e-dropdown-btn')) {
                            this.destroyComponent(chartBtn, 'dropdown-btn');
                        }
                        break;
                    }
                }
            }
            this.refreshRibbonContent(args.selectingIndex);
            this.parent.notify(tabSwitch, { activeTab: args.selectingIndex });
        }
    };
    Ribbon$1.prototype.beforeRenderHandler = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        if (args.item.text === l10n.getConstant('Open') && (!this.parent.openUrl || !this.parent.allowOpen)) {
            args.element.classList.add('e-disabled');
        }
        if (args.item.text === l10n.getConstant('SaveAs') && (!this.parent.saveUrl || !this.parent.allowSave)) {
            args.element.classList.add('e-disabled');
        }
        if (args.item.text === l10n.getConstant('Print') && !this.parent.allowPrint) {
            args.element.classList.add('e-disabled');
        }
    };
    Ribbon$1.prototype.getChartThemeDDB = function (id) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var chartThemeBtn = this.parent.createElement('button', { id: id + '_chart_theme', attrs: { 'type': 'button' }, className: 'e-ss-ddb' });
        chartThemeBtn.appendChild(this.parent.createElement('span', { className: 'e-tbar-btn-text' }));
        var theme = 'Material';
        var overlay = this.parent.element.querySelector('.e-ss-overlay-active');
        if (overlay) {
            var chart = overlay.querySelector('.e-chart');
            if (chart) {
                theme = getComponent(chart, 'chart').theme;
            }
            else {
                chart = overlay.querySelector('.e-accumulationchart');
                if (chart) {
                    theme = getComponent(chart, 'accumulationchart').theme;
                }
            }
        }
        var chartThemeDDB = new DropDownButton({
            items: this.getChartThemeDdbItems(theme),
            content: l10n.getConstant(theme),
            createPopupOnClick: true,
            select: function (args) {
                _this.parent.notify(selectionComplete, { type: 'mousedown' });
                if (!args.element || !args.element.querySelector('.e-selected-icon')) {
                    chartThemeDDB.content = args.item.text;
                    chartThemeDDB.dataBind();
                    _this.parent.notify(chartDesignTab, { chartTheme: args.item.id, triggerEvent: true });
                    chartThemeDDB.setProperties({ items: _this.getChartThemeDdbItems(args.item.id) }, true);
                }
            },
            cssClass: 'e-flat e-charttheme-ddb',
            beforeOpen: function (args) {
                _this.tBarDdbBeforeOpen(args.element, args.items, _this.parent.serviceLocator.getService(locale).getConstant('Chart'));
            }
        });
        chartThemeDDB.createElement = this.parent.createElement;
        chartThemeDDB.appendTo(chartThemeBtn);
        return chartThemeBtn;
    };
    Ribbon$1.prototype.getNumFormatDDB = function (id, l10n) {
        var _this = this;
        var numFormatBtn = this.parent.createElement('button', { id: id + '_number_format', attrs: { 'type': 'button' }, className: 'e-ss-ddb' });
        var numFormatText = this.parent.createElement('span', { className: 'e-tbar-btn-text' });
        numFormatText.innerText = l10n.getConstant('General');
        numFormatBtn.appendChild(numFormatText);
        var eventArgs = { action: 'getLocalizedFormats' };
        this.parent.notify(localizedFormatAction, eventArgs);
        var defaultFormats = eventArgs.defaultFormats;
        var localizedFormats = eventArgs.localizedFormats;
        this.numFormatDDB = new DropDownButton({
            items: this.getNumFormatDdbItems(id),
            createPopupOnClick: true,
            select: function (args) {
                var l10n = _this.parent.serviceLocator.getService(locale);
                if (args.item.text === l10n.getConstant('Custom')) {
                    _this.renderCustomFormatDialog(defaultFormats, localizedFormats);
                }
                else {
                    var type = args.item.id.split(_this.parent.element.id + '_')[1];
                    var format = getFormatFromType(type);
                    _this.applyNumFormat(format);
                    var sheet = _this.parent.getActiveSheet();
                    _this.refreshNumFormatSelection(getTypeFromFormat(format, true), sheet, l10n, format);
                    var cellIndex = getCellIndexes(sheet.activeCell);
                    _this.refreshTextAlign(sheet, getCell(cellIndex[0], cellIndex[1], sheet, false, true), type, cellIndex);
                    _this.numFormatDDB.element.setAttribute('aria-label', type);
                    if (_this.parent.showAggregate) {
                        _this.parent.notify(showAggregate, {});
                    }
                }
            },
            open: function (args) { return _this.numDDBOpen(args); },
            beforeItemRender: function (args) { return _this.previewNumFormat(args); },
            cssClass: 'e-flat e-numformat-ddb',
            beforeOpen: function (args) {
                _this.tBarDdbBeforeOpen(args.element, args.items, _this.parent.serviceLocator.getService(locale).getConstant('NumberFormat'));
            }
        });
        this.numFormatDDB.createElement = this.parent.createElement;
        this.numFormatDDB.appendTo(numFormatBtn);
        return numFormatBtn;
    };
    Ribbon$1.prototype.getFontSizeDDB = function (id) {
        var _this = this;
        this.fontSizeDdb = new DropDownButton({
            cssClass: 'e-font-size-ddb',
            content: '11',
            createPopupOnClick: true,
            items: [{ text: '8' }, { text: '9' }, { text: '10' }, { text: '11' }, { text: '12' }, { text: '14' }, { text: '16' },
                { text: '18' }, { text: '20' }, { text: '22' }, { text: '24' }, { text: '26' }, { text: '28' }, { text: '36' },
                { text: '48' }, { text: '72' }],
            beforeOpen: function (args) {
                _this.tBarDdbBeforeOpen(args.element, args.items, _this.parent.serviceLocator.getService(locale).getConstant('FontSize'));
                _this.refreshSelected(_this.fontSizeDdb, args.element, 'content', 'text');
            },
            select: function (args) {
                var eventArgs = { style: { fontSize: args.item.text + "pt" }, onActionUpdate: true };
                _this.parent.notify(setCellFormat, eventArgs);
                if (!eventArgs.cancel) {
                    _this.fontSizeDdb.content = eventArgs.style.fontSize.split('pt')[0];
                    _this.fontSizeDdb.dataBind();
                }
                _this.fontSizeDdb.element.setAttribute('aria-label', args.item.text);
            }
        });
        this.fontSizeDdb.createElement = this.parent.createElement;
        this.fontSizeDdb.appendTo(this.parent.createElement('button', { id: id + '_font_size', attrs: { 'type': 'button' }, className: 'e-ss-ddb' }));
        return this.fontSizeDdb.element;
    };
    Ribbon$1.prototype.getChartDDB = function (id, isChart) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var chartBtn;
        if (isChart) {
            chartBtn = this.parent.createElement('button', { id: id + '_chart-btn', attrs: { 'type': 'button' } });
            var chartBtnSpan = this.parent.createElement('span', { id: id + '_chart' });
            chartBtnSpan.innerText = l10n.getConstant('Chart');
            chartBtn.appendChild(chartBtnSpan);
        }
        else {
            chartBtn = this.parent.createElement('button', { id: id + '_chart-type-btn', attrs: { 'type': 'button' } });
            var chartBtnSpan = this.parent.createElement('span', { id: id + '_chart_type' });
            chartBtnSpan.innerText = l10n.getConstant('ChartType');
            chartBtn.appendChild(chartBtnSpan);
            this.createChartDdb(chartBtn, false);
        }
        return chartBtn;
    };
    Ribbon$1.prototype.closeDropdownPopup = function (e) {
        if ((e.altKey && e.keyCode === 38) || e.keyCode === 27) {
            var dropdownObj = this[1];
            if (dropdownObj) {
                dropdownObj.toggle();
                focus(dropdownObj.element);
            }
        }
    };
    Ribbon$1.prototype.createChartDdb = function (chartBtn, isChart) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var menuClass = isChart ? 'e-chart-menu' : 'e-chart-type-menu';
        var ul = this.parent.createElement('ul', { id: "" + this.parent.element.id + (isChart ? '_chart_menu' : '_chart_type_menu') });
        var chartMenu;
        var chartDdb = new DropDownButton({
            iconCss: "e-icons " + (isChart ? 'e-chart-icon' : 'e-chart-type-icon'),
            cssClass: isChart ? 'e-chart-ddb' : 'e-chart-type-ddb',
            target: ul,
            createPopupOnClick: true,
            beforeOpen: function (args) {
                chartMenu = _this.createChartMenu(ul, menuClass, l10n, chartDdb);
                _this.tBarDdbBeforeOpen(args.element, chartMenu.items, _this.parent.serviceLocator.getService(locale).getConstant('Chart'));
                EventHandler.add(ul, 'keydown', _this.closeDropdownPopup, [_this, chartDdb]);
            },
            open: function () { return focus(ul); },
            beforeClose: function (args) {
                if (args.event && closest(args.event.target, '.' + menuClass)) {
                    args.cancel = true;
                }
                else {
                    EventHandler.remove(ul, 'keydown', _this.closeDropdownPopup);
                    chartMenu.destroy();
                }
            }
        });
        chartDdb.createElement = this.parent.createElement;
        chartDdb.appendTo(chartBtn);
    };
    Ribbon$1.prototype.createChartMenu = function (ul, cssClass, l10n, chartDdb) {
        var _this = this;
        var chartMenu = new Menu({
            cssClass: cssClass,
            items: [
                {
                    iconCss: 'e-icons e-column', text: l10n.getConstant('Column'),
                    items: [{ id: 'column_chart' }]
                },
                {
                    iconCss: 'e-icons e-bar', text: l10n.getConstant('Bar'),
                    items: [{ id: 'bar_chart' }]
                },
                {
                    iconCss: 'e-icons e-area', text: l10n.getConstant('Area'),
                    items: [{ id: 'area_chart' }]
                },
                {
                    iconCss: 'e-icons e-pie-doughnut', text: l10n.getConstant('PieAndDoughnut'),
                    items: [{ id: 'pie_doughnut_chart' }]
                },
                {
                    iconCss: 'e-icons e-line', text: l10n.getConstant('Line'),
                    items: [{ id: 'line_chart' }]
                },
                // {
                //     iconCss: 'e-icons e-radar', text: l10n.getConstant('Radar'),
                //     items: [{ id: 'radar_chart' }]
                // },
                {
                    iconCss: 'e-icons e-scatter', text: l10n.getConstant('Scatter'),
                    items: [{ id: 'scatter_chart' }]
                }
            ],
            orientation: 'Vertical',
            beforeOpen: function (args) {
                var wrapperCls;
                if (args.parentItem.text === l10n.getConstant('Column')) {
                    args.element.firstChild.appendChild(column);
                    wrapperCls = 'e-column-chart';
                }
                else if (args.parentItem.text === l10n.getConstant('Bar')) {
                    args.element.firstChild.appendChild(bar);
                    wrapperCls = 'e-bar-chart';
                }
                else if (args.parentItem.text === l10n.getConstant('Area')) {
                    args.element.firstChild.appendChild(area);
                    wrapperCls = 'e-area-chart';
                }
                else if (args.parentItem.text === l10n.getConstant('Line')) {
                    args.element.firstChild.appendChild(line);
                    wrapperCls = 'e-line-chart';
                }
                else if (args.parentItem.text === l10n.getConstant('PieAndDoughnut')) {
                    args.element.firstChild.appendChild(pie);
                    wrapperCls = 'e-pie-doughnut-chart';
                }
                else if (args.parentItem.text === l10n.getConstant('Radar')) {
                    args.element.firstChild.appendChild(radar);
                    wrapperCls = 'e-radar-chart';
                }
                else if (args.parentItem.text === l10n.getConstant('Scatter')) {
                    args.element.firstChild.appendChild(scatter);
                    wrapperCls = 'e-scatter-chart';
                }
                if (wrapperCls) {
                    args.element.parentElement.classList.add(wrapperCls);
                    EventHandler.add(args.element, 'keydown', _this.menuIconKeyDown.bind(_this, wrapperCls + " .e-menu-icon", 0));
                }
            },
            select: function (args) { return _this.chartSelected(args, chartDdb); },
            beforeItemRender: function (args) {
                if (!args.item.text) {
                    args.element.removeAttribute('tabindex');
                }
            },
            beforeClose: function (args) {
                if (args.event && args.event.keyCode === 37) {
                    args.cancel = true;
                }
                else {
                    EventHandler.remove(args.element, 'keydown', _this.menuIconKeyDown);
                }
            }
        });
        var column = this.parent.createElement('div', { id: 'column_main', className: 'e-column-main' });
        var column1Text = this.parent.createElement('div', { id: 'column1_text', className: 'e-column1-text' });
        column1Text.innerText = l10n.getConstant('Column');
        var column1Cont = this.parent.createElement('div', { id: 'column1_cont', className: 'e-column1-cont' });
        var column2Cont = this.parent.createElement('div', { id: 'column2_cont', className: 'e-column2-cont' });
        column.appendChild(column1Text);
        column.appendChild(column1Cont);
        //column.appendChild(column2Text);
        //column.appendChild(column2Cont);
        var cultureText = l10n.getConstant('ClusteredColumn');
        var clusteredColumn = this.parent.createElement('span', { id: 'clusteredColumn', className: 'e-clusteredcolumn e-column-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('StackedColumn');
        var stackedColumn = this.parent.createElement('span', { id: 'stackedColumn', className: 'e-stackedcolumn e-column-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('StackedColumn100');
        var stackedColumn100 = this.parent.createElement('span', { id: 'stackedColumn100', className: 'e-stackedcolumn100 e-column-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        var clusteredColumn3D = this.parent.createElement('span', { id: 'clusteredColumn3D', className: 'e-clusteredColumn3D e-column-icon' });
        var stackedColumn3D = this.parent.createElement('span', { id: 'stackedColumn3D', className: 'e-stackedColumn3D e-column-icon' });
        var stackedColumn1003D = this.parent.createElement('span', { id: 'stackedColumn1003D', className: 'e-stackedColumn1003D e-column-icon' });
        column1Cont.appendChild(clusteredColumn);
        column1Cont.appendChild(stackedColumn);
        column1Cont.appendChild(stackedColumn100);
        column2Cont.appendChild(clusteredColumn3D);
        column2Cont.appendChild(stackedColumn3D);
        column2Cont.appendChild(stackedColumn1003D);
        var bar = this.parent.createElement('div', { id: 'bar_main', className: 'e-bar-main' });
        var bar1Text = this.parent.createElement('div', { id: 'bar1_text', className: 'e-bar1-text' });
        bar1Text.innerText = l10n.getConstant('Bar');
        var bar1Cont = this.parent.createElement('div', { id: 'bar1_cont', className: 'e-bar1-cont' });
        var bar2Cont = this.parent.createElement('div', { id: 'bar2_cont', className: 'e-bar2-cont' });
        bar.appendChild(bar1Text);
        bar.appendChild(bar1Cont);
        //bar.appendChild(bar2Text);
        //bar.appendChild(bar2Cont);
        cultureText = l10n.getConstant('ClusteredBar');
        var clusteredBar = this.parent.createElement('span', { id: 'clusteredBar', className: 'e-clusteredbar e-bar-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('StackedBar');
        var stackedBar = this.parent.createElement('span', { id: 'stackedBar', className: 'e-stackedbar e-bar-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('StackedBar100');
        var stackedBar100 = this.parent.createElement('span', { id: 'stackedBar100', className: 'e-stackedbar100 e-bar-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        var clusteredBar3D = this.parent.createElement('span', { id: 'clusteredBar3D', className: 'e-clusteredBar3D e-bar-icon' });
        var stackedBar3D = this.parent.createElement('span', { id: 'stackedBar3D', className: 'e-stackedBar3D e-bar-icon' });
        var stackedBar1003D = this.parent.createElement('span', { id: 'stackedBar1003D', className: 'e-stackedBar1003D e-bar-icon' });
        bar1Cont.appendChild(clusteredBar);
        bar1Cont.appendChild(stackedBar);
        bar1Cont.appendChild(stackedBar100);
        bar2Cont.appendChild(clusteredBar3D);
        bar2Cont.appendChild(stackedBar3D);
        bar2Cont.appendChild(stackedBar1003D);
        var area = this.parent.createElement('div', { id: 'area_main', className: 'e-area-main' });
        var areaText = this.parent.createElement('div', { id: 'area_text', className: 'e-area-text' });
        areaText.innerText = l10n.getConstant('Area');
        var areaCont = this.parent.createElement('div', { id: 'area_cont', className: 'e-area-cont' });
        area.appendChild(areaText);
        area.appendChild(areaCont);
        cultureText = l10n.getConstant('Area');
        var defArea = this.parent.createElement('span', { id: 'area', className: 'e-area e-area-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('StackedArea');
        var stackedArea = this.parent.createElement('span', { id: 'stackedArea', className: 'e-stackedarea e-area-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('StackedArea100');
        var stackedArea100 = this.parent.createElement('span', { id: 'stackedArea100', className: 'e-stackedarea100 e-area-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        areaCont.appendChild(defArea);
        areaCont.appendChild(stackedArea);
        areaCont.appendChild(stackedArea100);
        var line = this.parent.createElement('div', { id: 'line_main', className: 'e-line-main' });
        var lineText = this.parent.createElement('div', { id: 'line_text', className: 'e-line-text' });
        lineText.innerText = l10n.getConstant('Line');
        var lineCont = this.parent.createElement('div', { id: 'line_cont', className: 'e-line-cont' });
        var lineContMarker = this.parent.createElement('div', { id: 'line_cont_marker', className: 'e-line-cont' });
        line.appendChild(lineText);
        line.appendChild(lineCont);
        line.appendChild(lineContMarker);
        cultureText = l10n.getConstant('Line');
        var defLine = this.parent.createElement('span', { id: 'line', className: 'e-line e-line-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('StackedLine');
        var stackedLine = this.parent.createElement('span', { id: 'stackedLine', className: 'e-stackedline e-line-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('StackedLine100');
        var stackedLine100 = this.parent.createElement('span', { id: 'stackedLine100', className: 'e-stackedline100 e-line-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('LineMarker');
        var defLineMarker = this.parent.createElement('span', { id: 'lineMarker', className: 'e-line-marker e-line-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('StackedLineMarker');
        var stackedLineMarker = this.parent.createElement('span', { id: 'stackedLineMarker', className: 'e-stackedline-marker e-line-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('StackedLine100Marker');
        var stackedLine100Marker = this.parent.createElement('span', { id: 'stackedLine100Marker', className: 'e-stackedline100-marker e-line-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        lineCont.appendChild(defLine);
        lineCont.appendChild(stackedLine);
        lineCont.appendChild(stackedLine100);
        lineContMarker.appendChild(defLineMarker);
        lineContMarker.appendChild(stackedLineMarker);
        lineContMarker.appendChild(stackedLine100Marker);
        var pie = this.parent.createElement('div', { id: 'pie_main', className: 'e-pie-main' });
        var pieText = this.parent.createElement('div', { id: 'pie_text', className: 'e-pie-text' });
        pieText.innerText = l10n.getConstant('Pie');
        var pieCont = this.parent.createElement('div', { id: 'pie_cont', className: 'e-pie-cont' });
        pie.appendChild(pieText);
        pie.appendChild(pieCont);
        cultureText = l10n.getConstant('Pie');
        var defPie = this.parent.createElement('span', { id: 'pie', className: 'e-pie e-pie-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        cultureText = l10n.getConstant('Doughnut');
        var doughnut = this.parent.createElement('span', { id: 'doughnut', className: 'e-doughnut e-pie-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        pieCont.appendChild(defPie);
        pieCont.appendChild(doughnut);
        var radar = this.parent.createElement('div', { id: 'radar_main', className: 'e-radar-main' });
        var radarText = this.parent.createElement('div', { id: 'radar_text', className: 'e-radar-text' });
        radarText.innerText = l10n.getConstant('Radar');
        var radarCont = this.parent.createElement('div', { id: 'radar_cont', className: 'e-radar-cont' });
        radar.appendChild(radarText);
        radar.appendChild(radarCont);
        var defradar = this.parent.createElement('span', { id: 'radar', className: 'e-radar e-radar-icon e-menu-icon e-icons', attrs: { tabindex: '-1' } });
        var radarMarkers = this.parent.createElement('span', { id: 'radar_markers', className: 'e-radar-markers e-radar-icon e-menu-icon e-icons', attrs: { tabindex: '-1' } });
        defradar.title = l10n.getConstant('BlueDataBar');
        radarMarkers.title = l10n.getConstant('GreenDataBar');
        radarCont.appendChild(defradar);
        radarCont.appendChild(radarMarkers);
        var scatter = this.parent.createElement('div', { id: 'scatter_main', className: 'e-scatter-main' });
        var scatterText = this.parent.createElement('div', { id: 'scatter_text', className: 'e-scatter-text' });
        cultureText = l10n.getConstant('Scatter');
        scatterText.innerText = cultureText;
        var scatterCont = this.parent.createElement('div', { id: 'scatter_cont', className: 'e-scatter-cont' });
        scatter.appendChild(scatterText);
        scatter.appendChild(scatterCont);
        var defscatter = this.parent.createElement('span', { id: 'scatter', className: 'e-scatter e-scatter-icon e-menu-icon e-icons',
            attrs: { title: cultureText, 'aria-label': cultureText, tabindex: '-1' } });
        scatterCont.appendChild(defscatter);
        chartMenu.createElement = this.parent.createElement;
        chartMenu.appendTo(ul);
        ul.classList.add('e-ul');
        return chartMenu;
    };
    Ribbon$1.prototype.getAddChartEleDBB = function (id) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var ul = this.parent.createElement('ul', { id: id + '_add_chart_menu' });
        var addChartMenu;
        this.addChartDdb = new DropDownButton({
            iconCss: 'e-icons e-addchart-icon',
            cssClass: 'e-addchart-ddb',
            target: ul,
            createPopupOnClick: true,
            close: function () { return focus(_this.parent.element); },
            beforeOpen: function (args) {
                addChartMenu = _this.createAddChartMenu(ul, l10n);
                _this.tBarDdbBeforeOpen(args.element, addChartMenu.items);
                EventHandler.add(ul, 'keydown', _this.closeDropdownPopup, [_this, _this.addChartDdb]);
            },
            open: function () { return focus(ul); },
            beforeClose: function (args) {
                if (args.event && closest(args.event.target, '.e-addchart-menu')) {
                    args.cancel = true;
                }
                else {
                    EventHandler.remove(ul, 'keydown', _this.closeDropdownPopup);
                    addChartMenu.destroy();
                }
            }
        });
        this.addChartDdb.createElement = this.parent.createElement;
        var addChartBtn = this.parent.createElement('button', { id: id + '_addchart', attrs: { 'type': 'button' } });
        var chartBtnText = this.parent.createElement('span', { id: id + '_chart' });
        chartBtnText.innerText = l10n.getConstant('AddChartElement');
        addChartBtn.appendChild(chartBtnText);
        this.addChartDdb.appendTo(addChartBtn);
        return this.addChartDdb.element;
    };
    Ribbon$1.prototype.createAddChartMenu = function (ul, l10n) {
        var _this = this;
        var addChartMenu = new Menu({
            cssClass: 'e-addchart-menu', title: l10n.getConstant('AddChartElement'),
            items: [{
                    iconCss: 'e-icons e-axes', text: l10n.getConstant('Axes'),
                    items: [{
                            iconCss: 'e-icons e-ph-axes', id: 'PHAxes',
                            text: l10n.getConstant('PrimaryHorizontal')
                        },
                        {
                            iconCss: 'e-icons e-pv-axes', id: 'PVAxes',
                            text: l10n.getConstant('PrimaryVertical')
                        }]
                },
                {
                    iconCss: 'e-icons e-axis-title', text: l10n.getConstant('AxisTitle'),
                    items: [{
                            iconCss: 'e-icons e-ph-axistitle', id: 'PHAxisTitle',
                            text: l10n.getConstant('PrimaryHorizontal')
                        },
                        {
                            iconCss: 'e-icons e-pv-axistitle', id: 'PVAxisTitle',
                            text: l10n.getConstant('PrimaryVertical')
                        }]
                },
                {
                    iconCss: 'e-icons e-chart-title', text: l10n.getConstant('ChartTitle'),
                    items: [{ iconCss: 'e-icons e-ct-none', id: 'ChartTitleNone', text: l10n.getConstant('None') },
                        { iconCss: 'e-icons e-ct-abovechart', id: 'ChartTitleAbove', text: l10n.getConstant('AboveChart') }
                        // { iconCss: 'e-icons e-ct-farchart', id: 'chart_farchart', text: l10n.getConstant('AboveChart') },
                        // { iconCss: 'e-icons e-ct-nearchart', id: 'chart_nearchart', text: l10n.getConstant('AboveChart') }
                    ]
                },
                {
                    iconCss: 'e-icons e-data-labels', id: this.parent.element.id + 'data-labels', text: l10n.getConstant('DataLabels'),
                    items: [{ iconCss: 'e-icons e-dl-none', id: 'DLNone', text: l10n.getConstant('None') },
                        { iconCss: 'e-icons e-dl-center', id: 'DLCenter', text: l10n.getConstant('Center') },
                        { iconCss: 'e-icons e-dl-insideend', id: 'DLInsideend', text: l10n.getConstant('InsideEnd') },
                        { iconCss: 'e-icons e-dl-insidebase', id: 'DLInsidebase', text: l10n.getConstant('InsideBase') },
                        { iconCss: 'e-icons e-dl-outsideend', id: 'DLOutsideend', text: l10n.getConstant('OutsideEnd') }]
                },
                {
                    iconCss: 'e-icons e-gridlines', text: l10n.getConstant('Gridlines'),
                    items: [{
                            iconCss: 'e-icons e-gl-major-horizontal', id: 'GLMajorHorizontal',
                            text: l10n.getConstant('PrimaryMajorHorizontal')
                        },
                        {
                            iconCss: 'e-icons e-gl-major-vertical', id: 'GLMajorVertical',
                            text: l10n.getConstant('PrimaryMajorVertical')
                        },
                        {
                            iconCss: 'e-icons e-gl-minor-horizontal', id: 'GLMinorHorizontal',
                            text: l10n.getConstant('PrimaryMinorHorizontal')
                        },
                        {
                            iconCss: 'e-icons e-gl-minor-vertical', id: 'GLMinorVertical',
                            text: l10n.getConstant('PrimaryMinorVertical')
                        }]
                },
                {
                    iconCss: 'e-icons e-legends', text: l10n.getConstant('Legends'),
                    items: [{ iconCss: 'e-icons e-legends-none', id: 'LegendNone', text: l10n.getConstant('None') },
                        { iconCss: 'e-icons e-legends-right', id: 'LegendsRight', text: l10n.getConstant('Right') },
                        { iconCss: 'e-icons e-legends-left', id: 'LegendsLeft', text: l10n.getConstant('Left') },
                        { iconCss: 'e-icons e-legends-bottom', id: 'LegendsBottom', text: l10n.getConstant('Bottom') },
                        { iconCss: 'e-icons e-legends-top', id: 'LegendsTop', text: l10n.getConstant('Top') }]
                }],
            orientation: 'Vertical',
            select: this.addChartEleSelected.bind(this),
            beforeOpen: function (args) {
                if (args.parentItem.id === _this.parent.element.id + 'data-labels') {
                    var overlay = _this.parent.element.querySelector('.e-ss-overlay-active');
                    if (overlay) {
                        var chart = overlay.querySelector('.e-chart');
                        if (chart) {
                            var chartObj = getComponent(chart, 'chart');
                            if (chartObj.series[0] && chartObj.series[0].type.includes('Line')) {
                                var updateTextNode = function (listIcon, key) {
                                    if (listIcon) {
                                        var dlList = listIcon.parentElement;
                                        dlList.innerHTML = '';
                                        dlList.appendChild(listIcon);
                                        dlList.appendChild(document.createTextNode(l10n.getConstant(key)));
                                    }
                                };
                                updateTextNode(args.element.querySelector('.e-dl-insideend'), 'Above');
                                updateTextNode(args.element.querySelector('.e-dl-insidebase'), 'Below');
                                var outsideIcon = args.element.querySelector('.e-dl-outsideend');
                                if (outsideIcon) {
                                    outsideIcon.parentElement.style.display = 'none';
                                }
                            }
                        }
                    }
                }
            }
        });
        addChartMenu.createElement = this.parent.createElement;
        addChartMenu.appendTo(ul);
        ul.classList.add('e-ul');
        return addChartMenu;
    };
    Ribbon$1.prototype.getCFDBB = function (id) {
        var _this = this;
        var ul = this.parent.createElement('ul', { id: id + '_cf_menu' });
        var cfMenu;
        this.cfDdb = new DropDownButton({
            iconCss: 'e-icons e-conditionalformatting-icon',
            cssClass: 'e-cf-ddb',
            target: ul,
            createPopupOnClick: true,
            close: function () { return focus(_this.parent.element); },
            beforeOpen: function (args) {
                cfMenu = _this.createCFMenu(ul);
                _this.tBarDdbBeforeOpen(args.element, cfMenu.items, _this.parent.serviceLocator.getService(locale).getConstant('ConditionalFormatting'));
                EventHandler.add(ul, 'keydown', _this.closeDropdownPopup, [_this, _this.cfDdb]);
            },
            open: function () { return focus(ul); },
            beforeClose: function (args) {
                if (args.event && closest(args.event.target, '.e-cf-menu')) {
                    args.cancel = true;
                }
                else {
                    EventHandler.remove(ul, 'keydown', _this.closeDropdownPopup);
                    if (cfMenu && cfMenu.element) {
                        removeElements(_this.spanElements);
                        _this.spanElements = [];
                        removeElements(_this.iconWrapElements);
                        _this.iconWrapElements = [];
                        removeElements(_this.iconSetElements);
                        _this.iconSetElements = [];
                        removeElements(_this.iconSetGroupElement);
                        _this.iconSetGroupElement = [];
                        cfMenu.destroy();
                        cfMenu.element.remove();
                    }
                }
            }
        });
        this.cfDdb.createElement = this.parent.createElement;
        this.cfDdb.appendTo(this.parent.createElement('button', { id: id + '_conditionalformatting', attrs: { 'type': 'button' } }));
        return this.cfDdb.element;
    };
    Ribbon$1.prototype.createCFMenu = function (ul) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var addIcons = function (icons, category, appendTo) {
            var content;
            icons.forEach(function (icon) {
                content = l10n.getConstant(icon + category);
                var span = _this.parent.createElement('span', {
                    id: icon + category, className: "e-" + icon.toLowerCase() + " e-cf-icon",
                    attrs: { 'title': content, 'aria-label': content, tabindex: '-1' }
                });
                _this.spanElements.push(span);
                appendTo.appendChild(span);
            });
        };
        var cfMenu = new Menu({
            cssClass: 'e-cf-menu',
            items: [{
                    iconCss: 'e-icons e-hlcellrules', text: l10n.getConstant('HighlightCellsRules'),
                    items: [{ iconCss: 'e-icons e-greaterthan', id: 'cf_greaterthan_dlg', text: l10n.getConstant('GreaterThan') + '...' },
                        { iconCss: 'e-icons e-lessthan', id: 'cf_lessthan_dlg', text: l10n.getConstant('LessThan') + '...' },
                        { iconCss: 'e-icons e-between', id: 'cf_between_dlg', text: l10n.getConstant('Between') + '...' },
                        { iconCss: 'e-icons e-equalto', id: 'cf_eqaulto_dlg', text: l10n.getConstant('CFEqualTo') + '...' },
                        { iconCss: 'e-icons e-textcontains', id: 'cf_textcontains_dlg', text: l10n.getConstant('TextThatContains') + '...' },
                        { iconCss: 'e-icons e-adateoccuring', id: 'cf_adateoccuring_dlg', text: l10n.getConstant('ADateOccuring') + '...' },
                        { iconCss: 'e-icons e-duplicate', id: 'cf_duplicatevalues_dlg', text: l10n.getConstant('DuplicateValues') + '...' }]
                },
                {
                    iconCss: 'e-icons e-topbottomrules', text: l10n.getConstant('TopBottomRules'),
                    items: [{ iconCss: 'e-icons e-top10items', id: 'cf_top10items_dlg', text: l10n.getConstant('Top10Items') + '...' },
                        { iconCss: 'e-icons e-top10', id: 'cf_top10_dlg', text: l10n.getConstant('Top10') + ' %...' },
                        { iconCss: 'e-icons e-bottom10items', id: 'cf_bottom10items_dlg', text: l10n.getConstant('Bottom10Items') + '...' },
                        { iconCss: 'e-icons e-bottom10', id: 'cf_bottom10_dlg', text: l10n.getConstant('Bottom10') + ' %...' },
                        { iconCss: 'e-icons e-aboveaverage', id: 'cf_aboveaverage_dlg', text: l10n.getConstant('AboveAverage') + '...' },
                        { iconCss: 'e-icons e-belowaverage', id: 'cf_belowaverage_dlg', text: l10n.getConstant('BelowAverage') + '...' }]
                },
                { iconCss: 'e-icons e-databars', text: l10n.getConstant('DataBars'), items: [{ id: 'db_icons1' }, { id: 'db_icons2' }] },
                { iconCss: 'e-icons e-colorscales', text: l10n.getConstant('ColorScales'), items: [{ id: 'cs_icons1' }, { id: 'cs_icons2' },
                        { id: 'cs_icons3' }] },
                { iconCss: 'e-icons e-iconsets', text: l10n.getConstant('IconSets'), items: [{ id: 'is_icons' }] },
                {
                    iconCss: 'e-icons e-clearrules', text: l10n.getConstant('ClearRules'),
                    items: [{ id: 'cf_cr_cells', text: l10n.getConstant('SelectedCells') },
                        { id: 'cf_cr_sheet', text: l10n.getConstant('EntireSheet') }]
                }],
            orientation: 'Vertical',
            beforeOpen: function (args) {
                if (args.parentItem.iconCss === 'e-icons e-databars') {
                    args.element.parentElement.classList.add('e-databars');
                    addIcons(['Blue', 'Green', 'Red'], 'DataBar', args.element.firstChild);
                    addIcons(['Orange', 'LightBlue', 'Purple'], 'DataBar', args.element.lastChild);
                    EventHandler.add(args.element, 'keydown', _this.menuIconKeyDown.bind(_this, 'e-cf-icon', 3));
                }
                else if (args.parentItem.iconCss === 'e-icons e-colorscales') {
                    args.element.parentElement.classList.add('e-colorscales');
                    addIcons(['GYR', 'RYG', 'GWR', 'RWG'], 'ColorScale', args.element.firstChild);
                    addIcons(['BWR', 'RWB', 'WR', 'RW'], 'ColorScale', args.element.querySelector('#cs_icons2'));
                    addIcons(['GW', 'WG', 'GY', 'YG'], 'ColorScale', args.element.lastChild);
                    EventHandler.add(args.element, 'keydown', _this.menuIconKeyDown.bind(_this, 'e-cf-icon', 4));
                }
                else if (args.parentItem.iconCss === 'e-icons e-iconsets') {
                    args.element.parentElement.classList.add('e-iconsets');
                    var iconSetGroup_1 = _this.parent.createElement('div', { id: 'is', className: 'e-is' });
                    _this.iconSetGroupElement.push(iconSetGroup_1);
                    var iconSets = [
                        { hdr: 'Directional' }, {
                            cont: [
                                { cls: '3arrows', key: 'ThreeArrowsColor', id: 'ThreeArrows', count: 3 },
                                { cls: '3arrowsgray', key: 'ThreeArrowsGray', count: 3 },
                                { cls: '3triangles', key: 'ThreeTriangles', count: 3 },
                                { cls: '4arrowsgray', key: 'FourArrowsGray', count: 4 },
                                { cls: '4arrows', key: 'FourArrowsColor', id: 'FourArrows', count: 4 },
                                { cls: '5arrowsgray', key: 'FiveArrowsGray', count: 5 },
                                { cls: '5arrows', key: 'FiveArrowsColor', id: 'FiveArrows', count: 5 }
                            ]
                        },
                        { hdr: 'Shapes' }, {
                            cont: [
                                { cls: '3trafficlights', key: 'ThreeTrafficLights1', count: 3 },
                                { cls: '3rafficlights2', key: 'ThreeTrafficLights2', count: 3 },
                                { cls: '3signs', key: 'ThreeSigns', count: 3 },
                                { cls: '4trafficlights', key: 'FourTrafficLights', count: 4 },
                                { cls: '4redtoblack', key: 'RedToBlack', id: 'FourRedToBlack', count: 4 }
                            ]
                        },
                        { hdr: 'Indicators' }, {
                            cont: [
                                { cls: '3symbols', key: 'ThreeSymbols1', id: 'ThreeSymbols', count: 3 },
                                { cls: '3symbols2', key: 'ThreeSymbols2', count: 3 },
                                { cls: '3flags', key: 'ThreeFlags', count: 3 }
                            ]
                        },
                        { hdr: 'Ratings' }, {
                            cont: [
                                { cls: '3stars', key: 'ThreeStars', count: 3 },
                                { cls: '4rating', key: 'FourRatings', id: 'FourRating', count: 4 },
                                { cls: '5quarters', key: 'FiveQuarters', count: 5 },
                                { cls: '5rating', key: 'FiveRatings', id: 'FiveRating', count: 5 },
                                { cls: '5boxes', key: 'FiveBoxes', count: 5 }
                            ]
                        }
                    ];
                    var iconSetEle_1;
                    var iconWrap_1;
                    var cultureText_1;
                    var countIdx_1;
                    iconSets.forEach(function (iconSet, index) {
                        iconSetEle_1 = _this.parent.createElement('div', { id: "is" + (index + 1), className: "e-is" + (index + 1) });
                        _this.iconSetElements.push(iconSetEle_1);
                        if (iconSet.hdr) {
                            iconSetEle_1.innerText = l10n.getConstant(iconSet.hdr);
                        }
                        else {
                            iconSet.cont.forEach(function (icon) {
                                cultureText_1 = l10n.getConstant(icon.key);
                                iconWrap_1 =
                                    _this.parent.createElement('div', {
                                        id: icon.id || icon.key, className: "e-" + icon.cls + " e-is-wrapper",
                                        attrs: { title: cultureText_1, 'aria-label': cultureText_1, tabindex: '-1' }
                                    });
                                _this.iconWrapElements.push(iconWrap_1);
                                for (countIdx_1 = 0; countIdx_1 < icon.count; countIdx_1++) {
                                    var span = _this.createElement('span', "e-" + icon.cls + "-" + (countIdx_1 + 1) + " e-iconsetspan");
                                    _this.spanElements.push(span);
                                    iconWrap_1.appendChild(span);
                                }
                                iconSetEle_1.appendChild(iconWrap_1);
                            });
                        }
                        iconSetGroup_1.appendChild(iconSetEle_1);
                    });
                    args.element.firstChild.appendChild(iconSetGroup_1);
                    EventHandler.add(args.element, 'keydown', _this.menuIconKeyDown.bind(_this, 'e-is-wrapper', 0));
                }
            },
            select: this.cfSelected.bind(this),
            beforeItemRender: function (args) {
                if (args.item.id.includes('db_icons') || args.item.id.includes('cs_icons') || args.item.id === 'is_icons') {
                    args.element.removeAttribute('tabindex');
                }
            },
            beforeClose: function (args) {
                var cfIcons = ['e-icons e-databars', 'e-icons e-colorscales', 'e-icons e-iconsets'].indexOf(args.parentItem.iconCss) > -1;
                args.cancel = args.event && args.event.keyCode === 37 && cfIcons;
                if (cfIcons && !args.cancel) {
                    EventHandler.remove(args.element, 'keydown', _this.menuIconKeyDown);
                }
            }
        });
        cfMenu.createElement = this.parent.createElement;
        cfMenu.appendTo(ul);
        ul.classList.add('e-ul');
        return cfMenu;
    };
    Ribbon$1.prototype.menuIconKeyDown = function (iconCls, rowWiseCount, e) {
        var index;
        var icons = [];
        if (!e) {
            index = 0;
            icons = [].slice.call(document.querySelectorAll("." + iconCls));
        }
        else if (e.keyCode === 40 || e.keyCode === 39 || e.keyCode === 38 || e.keyCode === 37) {
            e.preventDefault();
            icons = [].slice.call(document.querySelectorAll("." + iconCls));
            index = icons.indexOf(e.target);
            if (index === -1) {
                index = 0;
            }
            else if (e.keyCode === 39) {
                index++;
                if (index === icons.length) {
                    index = 0;
                }
            }
            else if (e.keyCode === 37) {
                index--;
                if (index === -1) {
                    index = icons.length - 1;
                }
            }
            else if (!iconCls.includes('e-menu-icon')) {
                var totalIcons = icons.length;
                var firstIndexes = void 0;
                var secIndexes = void 0;
                if (!rowWiseCount) {
                    rowWiseCount = 2;
                    if (e.keyCode === 40) {
                        firstIndexes = [6, 11, 14, 19];
                        secIndexes = [5, 10, 13];
                    }
                    else {
                        firstIndexes = [7, 12, 15];
                        secIndexes = [8, 13, 16];
                    }
                    totalIcons--;
                }
                if (e.keyCode === 40) {
                    if (index === totalIcons - 1) {
                        index = 0;
                    }
                    else {
                        index += firstIndexes && firstIndexes.indexOf(index) > -1 ? 1 :
                            (secIndexes && secIndexes.indexOf(index) > -1 ? 3 : rowWiseCount);
                        if (firstIndexes) {
                            totalIcons++;
                        }
                        if (index >= totalIcons) {
                            index = (index - totalIcons) + 1;
                        }
                    }
                }
                else {
                    if (index === 0) {
                        index = totalIcons - 1;
                    }
                    else {
                        index -= firstIndexes && firstIndexes.indexOf(index) > -1 ? 1 :
                            (secIndexes && secIndexes.indexOf(index) > -1 ? 3 : rowWiseCount);
                        if (index < 0) {
                            index = firstIndexes ? totalIcons : (totalIcons + index) - 1;
                        }
                    }
                }
            }
        }
        if (icons[index]) {
            focus(icons[index]);
        }
    };
    Ribbon$1.prototype.createElement = function (tag, className) {
        return this.parent.createElement(tag, { className: className });
    };
    Ribbon$1.prototype.getBordersDBB = function (id) {
        var _this = this;
        var ul = this.parent.createElement('ul', { id: id + '_borders_menu' });
        this.cPickerEle = this.parent.createElement('input', { id: id + "_cell_border_color", attrs: { 'type': 'color' } });
        this.parent.element.appendChild(this.cPickerEle);
        this.colorPicker = new ColorPicker$1({
            cssClass: 'e-border-colorpicker',
            mode: 'Palette',
            inline: true,
            beforeTileRender: function (args) {
                args.element.tabIndex = -1;
            },
            change: function (args) {
                var border = _this.border.split(' ');
                border[2] = args.currentValue.hex;
                _this.border = border.join(' ');
            }
        });
        this.colorPicker.createElement = this.parent.createElement;
        this.colorPicker.appendTo(this.cPickerEle);
        var bordersMenu;
        this.bordersDdb = new DropDownButton({
            iconCss: 'e-icons e-bottom-borders',
            cssClass: 'e-borders-ddb',
            target: ul,
            createPopupOnClick: true,
            beforeOpen: function (args) {
                bordersMenu = _this.createBorderMenu(ul);
                _this.tBarDdbBeforeOpen(args.element, bordersMenu.items, _this.parent.serviceLocator.getService(locale).getConstant('Borders'), 1);
                EventHandler.add(ul, 'keydown', _this.closeDropdownPopup, [_this, _this.bordersDdb]);
            },
            open: function () { return focus(ul); },
            beforeClose: function (args) {
                if (args.event && closest(args.event.target, '.e-borders-menu')) {
                    args.cancel = true;
                }
                else {
                    EventHandler.remove(ul, 'keydown', _this.closeDropdownPopup);
                    bordersMenu.destroy();
                }
            },
            close: function () { return focus(_this.bordersDdb.element); }
        });
        this.bordersDdb.createElement = this.parent.createElement;
        this.bordersDdb.appendTo(this.parent.createElement('button', { id: id + '_borders', attrs: { 'type': 'button' } }));
        return this.bordersDdb.element;
    };
    Ribbon$1.prototype.createBorderMenu = function (ul) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var id = this.parent.element.id;
        var bordersMenu = new Menu({
            cssClass: 'e-borders-menu',
            items: [{ iconCss: 'e-icons e-top-borders', text: l10n.getConstant('TopBorders'), id: id + "_border_topborders" }, {
                    iconCss: 'e-icons e-left-borders',
                    text: l10n.getConstant('LeftBorders'), id: id + "_border_leftborders"
                }, { iconCss: 'e-icons e-right-borders', text: l10n.getConstant('RightBorders'), id: id + "_border_rightborders" }, {
                    iconCss: 'e-icons e-bottom-borders', text: l10n.getConstant('BottomBorders'), id: id + "_border_bottomborders"
                }, {
                    iconCss: 'e-icons e-all-borders', text: l10n.getConstant('AllBorders'), id: id + "_border_allborders"
                }, { iconCss: 'e-icons e-horizontal-borders', text: l10n.getConstant('HorizontalBorders'), id: id + "_border_horizontalborders" }, {
                    iconCss: 'e-icons e-vertical-borders', text: l10n.getConstant('VerticalBorders'), id: id + "_border_verticalborders"
                }, {
                    iconCss: 'e-icons e-outside-borders',
                    text: l10n.getConstant('OutsideBorders'), id: id + "_border_outsideborders"
                }, { iconCss: 'e-icons e-inside-borders', text: l10n.getConstant('InsideBorders'), id: id + "_border_insideborders" },
                { iconCss: 'e-icons e-no-borders', text: l10n.getConstant('NoBorders'), id: id + "_border_noborders" }, { separator: true }, {
                    text: l10n.getConstant('BorderColor'), items: [{ id: id + "_border_colors" }], id: id + "_border_bordercolor"
                }, {
                    text: l10n.getConstant('BorderStyle'), items: [
                        { iconCss: 'e-icons e-selected-icon', id: id + "_1px" }, { id: id + "_2px" },
                        { id: id + "_3px" }, { id: id + "_dashed" },
                        { id: id + "_dotted" }, { id: id + "_double" }
                    ]
                }],
            orientation: 'Vertical',
            beforeOpen: function (args) {
                if (args.parentItem.id === id + "_border_bordercolor") {
                    _this.colorPicker.refresh();
                    var cPickerWrapper = _this.colorPicker.element.parentElement;
                    args.element.firstElementChild.appendChild(cPickerWrapper);
                    cPickerWrapper.style.display = 'inline-block';
                    args.element.parentElement.classList.add('e-border-color');
                    args.element.firstElementChild.removeAttribute('tabindex');
                }
                else {
                    args.element.classList.add('e-border-style');
                }
            },
            beforeClose: function (args) {
                if (args.event && args.parentItem.id === id + "_border_bordercolor") {
                    if (!closest(args.event.target, '.e-border-colorpicker') ||
                        closest(args.event.target, '.e-apply') || closest(args.event.target, '.e-cancel')) {
                        _this.colorPicker = getComponent(_this.cPickerEle, 'colorpicker');
                        if (_this.colorPicker.mode === 'Picker') {
                            _this.colorPicker.mode = 'Palette';
                            _this.colorPicker.dataBind();
                        }
                        var cPickerWrapper = _this.colorPicker.element.parentElement;
                        cPickerWrapper.style.display = '';
                        _this.parent.element.appendChild(cPickerWrapper);
                    }
                    else {
                        args.cancel = true;
                    }
                }
            },
            onOpen: function (args) {
                if (args.parentItem.id === id + "_border_bordercolor") {
                    args.element.parentElement.style.overflow = 'visible';
                    var colorPalatte = args.element.querySelector('.e-color-palette .e-palette');
                    if (colorPalatte) {
                        focus(colorPalatte);
                    }
                }
            },
            onClose: function () { return focus(bordersMenu.element); },
            select: function (args) {
                _this.borderSelected(args, bordersMenu);
            }
        });
        bordersMenu.createElement = this.parent.createElement;
        bordersMenu.appendTo(ul);
        ul.classList.add('e-ul');
        return bordersMenu;
    };
    Ribbon$1.prototype.chartSelected = function (args, chartDdb) {
        var isChart = !isNullOrUndefined(closest(args.element, '.e-chart-menu'));
        var eleId = args.element.id;
        if (('column_chart' + 'bar_chart' + 'area_chart' + 'pie_doughnut_chart' +
            'line_chart' + 'radar_chart' + 'scatter_chart').includes(eleId)) {
            if (args.item && (!args.item.items || !args.item.items.length)) {
                chartDdb.toggle();
            }
            var id = args.event.target.id;
            this.parent.notify(insertChart, { action: eleId, id: id, isChart: isChart });
        }
    };
    Ribbon$1.prototype.addChartEleSelected = function (args) {
        var eleId = args.element.id;
        this.parent.notify(chartDesignTab, { addChartEle: eleId, triggerEvent: true });
        if (args.item && (!args.item.items || !args.item.items.length)) {
            this.addChartDdb.toggle();
        }
    };
    Ribbon$1.prototype.cfSelected = function (args) {
        var sheet = this.parent.getActiveSheet();
        if (args.item.id.includes('_dlg')) {
            this.parent.notify(renderCFDlg, { action: args.item.text });
        }
        else {
            var isCFIcons = args.item.id.includes('icons');
            if (isCFIcons || args.item.id === 'cf_cr_cells' || args.item.id === 'cf_cr_sheet') {
                if (isReadOnlyCells(this.parent, getSwapRange(getRangeIndexes(sheet.selectedRange)))) {
                    this.parent.notify(readonlyAlert, null);
                }
                else if (isCFIcons) {
                    var trgt = args.event.target;
                    this.parent.notify(setCFRule, { cfModel: { type: trgt.id || trgt.parentElement.id, range: sheet.selectedRange },
                        isAction: true });
                }
                else if (args.item.id === 'cf_cr_cells') {
                    this.parent.notify(clearCFRule, { range: sheet.selectedRange, isAction: true });
                }
                else if (args.item.id === 'cf_cr_sheet') {
                    this.parent.conditionalFormat = null;
                    this.parent.notify(clearCFRule, { isAction: true });
                }
            }
        }
        if (args.item && (!args.item.items || !args.item.items.length)) {
            this.cfDdb.toggle();
        }
    };
    Ribbon$1.prototype.borderSelected = function (args, bordersMenu) {
        this.bordersDdb.element.setAttribute('aria-label', args.item.text);
        var id = this.parent.element.id;
        if (args.item.items.length || args.item.id === id + "_border_colors") {
            return;
        }
        if (!args.item.text) {
            var border = this.border.split(' ');
            var prevStyleId_1 = border[1] === 'solid' ? id + "_" + border[0] : id + "_" + border[1];
            if (prevStyleId_1 === args.item.id) {
                return;
            }
            if (args.item.id === id + "_1px" || args.item.id === id + "_2px" || args.item.id === id + "_3px") {
                border[0] = args.item.id.split(id + "_")[1];
                border[1] = 'solid';
            }
            else {
                border[1] = args.item.id.split(id + "_")[1];
                border[0] = border[1] === 'double' ? '3px' : '1px';
            }
            this.border = border.join(' ');
            bordersMenu.items[12].items.forEach(function (item) {
                if (item.id === prevStyleId_1) {
                    item.iconCss = null;
                }
                if (item.id === args.item.id) {
                    item.iconCss = 'e-icons e-selected-icon';
                }
            });
            bordersMenu.setProperties({ 'items': bordersMenu.items }, true);
            return;
        }
        this.bordersDdb.toggle();
        this.parent.showSpinner();
        switch (args.item.id) {
            case id + "_border_topborders":
                this.parent.notify(setCellFormat, { style: { borderTop: this.border }, onActionUpdate: true });
                break;
            case id + "_border_leftborders":
                this.parent.notify(setCellFormat, { style: { borderLeft: this.border }, onActionUpdate: true });
                break;
            case id + "_border_rightborders":
                this.parent.notify(setCellFormat, { style: { borderRight: this.border }, onActionUpdate: true });
                break;
            case id + "_border_bottomborders":
                this.parent.notify(setCellFormat, { style: { borderBottom: this.border }, onActionUpdate: true });
                break;
            case id + "_border_allborders":
                this.parent.notify(setCellFormat, { style: { border: this.border }, onActionUpdate: true });
                break;
            case id + "_border_horizontalborders":
                this.parent.notify(setCellFormat, { style: { border: this.border }, onActionUpdate: true, borderType: 'Horizontal' });
                break;
            case id + "_border_verticalborders":
                this.parent.notify(setCellFormat, { style: { border: this.border }, onActionUpdate: true, borderType: 'Vertical' });
                break;
            case id + "_border_outsideborders":
                this.parent.notify(setCellFormat, { style: { border: this.border }, onActionUpdate: true, borderType: 'Outer' });
                break;
            case id + "_border_insideborders":
                this.parent.notify(setCellFormat, { style: { border: this.border }, onActionUpdate: true, borderType: 'Inner' });
                break;
            case id + "_border_noborders":
                this.parent.notify(setCellFormat, { style: { border: '' }, onActionUpdate: true });
                break;
        }
        this.parent.hideSpinner();
    };
    Ribbon$1.prototype.getFontNameDDB = function (id) {
        var _this = this;
        var fontNameBtn = this.parent.createElement('button', { id: id + '_font_name', attrs: { 'type': 'button' }, className: 'e-ss-ddb' });
        var fontBtnText = this.parent.createElement('span', { className: 'e-tbar-btn-text' });
        fontBtnText.innerText = 'Calibri';
        fontNameBtn.appendChild(fontBtnText);
        this.fontNameDdb = new DropDownButton({
            cssClass: 'e-font-family',
            items: this.getFontFamilyItems(),
            createPopupOnClick: true,
            select: function (args) {
                var eventArgs = { style: { fontFamily: args.item.text }, onActionUpdate: true };
                _this.parent.notify(setCellFormat, eventArgs);
                fontNameBtn.setAttribute('aria-label', args.item.text);
                if (!eventArgs.cancel) {
                    _this.refreshFontNameSelection(eventArgs.style.fontFamily);
                }
            },
            beforeOpen: function (args) {
                _this.tBarDdbBeforeOpen(args.element, args.items, _this.parent.serviceLocator.getService(locale).getConstant(('Font')));
            }
        });
        this.fontNameDdb.createElement = this.parent.createElement;
        this.fontNameDdb.appendTo(fontNameBtn);
        return fontNameBtn;
    };
    Ribbon$1.prototype.getBtn = function (id, name, text, bindEvent) {
        if (bindEvent === void 0) { bindEvent = true; }
        var btnObj = new Button({ iconCss: "e-icons e-" + name + "-icon", cssClass: 'e-flat', isToggle: true });
        btnObj.createElement = this.parent.createElement;
        btnObj.appendTo(this.parent.createElement('button', { id: id + "_" + name, attrs: { 'aria-label': text, 'type': 'button' } }));
        if (bindEvent) {
            btnObj.element.addEventListener('click', this.toggleBtnClicked.bind(this));
        }
        return btnObj.element;
    };
    Ribbon$1.prototype.datavalidationDDB = function (id) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var direction;
        this.datavalidationDdb = new DropDownButton({
            cssClass: 'e-datavalidation-ddb',
            iconCss: 'e-datavalidation-icon e-icons',
            content: l10n.getConstant('DataValidation'),
            items: [
                { text: l10n.getConstant('DataValidation') },
                { text: l10n.getConstant('HighlightInvalidData') },
                { text: l10n.getConstant('ClearHighlight') },
                { text: l10n.getConstant('ClearValidation') }
            ],
            createPopupOnClick: true,
            beforeOpen: function (args) {
                _this.refreshSelected(_this.datavalidationDdb, args.element, 'iconCss');
                args.element.setAttribute('aria-label', l10n.getConstant('DataValidation'));
            },
            select: function (args) {
                switch (args.item.text) {
                    case l10n.getConstant('DataValidation'):
                        _this.parent.notify(initiateDataValidation, null);
                        break;
                    case l10n.getConstant('HighlightInvalidData'):
                        _this.parent.notify(invalidData, {});
                        break;
                    case l10n.getConstant('ClearHighlight'):
                        _this.parent.notify(invalidData, { isRemoveHighlight: true });
                        break;
                    case l10n.getConstant('ClearValidation'):
                        _this.parent.notify(removeDataValidation, { isAction: true });
                        break;
                    default:
                        direction = args.item.text === l10n.getConstant('SortAscending') ? 'Ascending' : 'Descending';
                        _this.parent.notify(applySort, { sortOptions: { sortDescriptors: { order: direction } } });
                        break;
                }
                _this.datavalidationDdb.element.setAttribute('aria-label', args.item.text);
            }
        });
        this.datavalidationDdb.createElement = this.parent.createElement;
        this.datavalidationDdb.appendTo(this.parent.createElement('button', { id: id + '_datavalidation', attrs: { 'type': 'button' }, className: 'e-ss-ddb' }));
        return this.datavalidationDdb.element;
    };
    Ribbon$1.prototype.getTextAlignDDB = function (id) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        this.textAlignDdb = new DropDownButton({
            cssClass: 'e-align-ddb',
            iconCss: 'e-icons e-left-icon',
            items: [{ iconCss: 'e-icons e-left-icon' }, { iconCss: 'e-icons e-center-icon' }, { iconCss: 'e-icons e-right-icon' }],
            beforeItemRender: this.alignItemRender.bind(this),
            createPopupOnClick: true,
            beforeOpen: function (args) {
                _this.refreshSelected(_this.textAlignDdb, args.element, 'iconCss');
                args.element.setAttribute('aria-label', l10n.getConstant('HorizontalAlignment'));
            },
            select: function (args) {
                var eventArgs = {
                    style: { textAlign: args.item.iconCss.split(' e-')[1].split('-icon')[0] }, onActionUpdate: true
                };
                _this.parent.notify(setCellFormat, eventArgs);
                if (!eventArgs.cancel) {
                    _this.textAlignDdb.iconCss = "e-icons e-" + eventArgs.style.textAlign + "-icon";
                    _this.textAlignDdb.dataBind();
                }
                _this.textAlignDdb.element.setAttribute('aria-label', (l10n.getConstant('HorizontalAlignment') + ' ' + l10n.getConstant('Align' + _this.getAlignText(args))));
            }
        });
        this.textAlignDdb.createElement = this.parent.createElement;
        this.textAlignDdb.appendTo(this.parent.createElement('button', { id: id + '_text_align', attrs: { 'type': 'button' }, className: 'e-ss-ddb' }));
        return this.textAlignDdb.element;
    };
    Ribbon$1.prototype.getVerticalAlignDDB = function (id) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        this.verticalAlignDdb = new DropDownButton({
            cssClass: 'e-align-ddb',
            iconCss: 'e-icons e-bottom-icon',
            items: [{ iconCss: 'e-icons e-top-icon' }, { iconCss: 'e-icons e-middle-icon' }, { iconCss: 'e-icons e-bottom-icon' }],
            beforeItemRender: this.alignItemRender.bind(this),
            createPopupOnClick: true,
            beforeOpen: function (args) {
                _this.refreshSelected(_this.verticalAlignDdb, args.element, 'iconCss');
                args.element.setAttribute('aria-label', l10n.getConstant('VerticalAlignment'));
            },
            select: function (args) {
                var eventArgs = {
                    style: { verticalAlign: args.item.iconCss.split(' e-')[1].split('-icon')[0] }, onActionUpdate: true
                };
                _this.parent.notify(setCellFormat, eventArgs);
                if (!eventArgs.cancel) {
                    _this.verticalAlignDdb.iconCss = "e-icons e-" + eventArgs.style.verticalAlign + "-icon";
                    _this.verticalAlignDdb.dataBind();
                }
                _this.verticalAlignDdb.element.setAttribute('aria-label', (l10n.getConstant('VerticalAlignment') + ' ' + l10n.getConstant('Align' + _this.getAlignText(args))));
            }
        });
        this.verticalAlignDdb.createElement = this.parent.createElement;
        this.verticalAlignDdb.appendTo(this.parent.createElement('button', { id: id + '_vertical_align', attrs: { 'type': 'button' }, className: 'e-ss-ddb' }));
        return this.verticalAlignDdb.element;
    };
    Ribbon$1.prototype.getMergeSplitBtn = function (id) {
        var _this = this;
        this.parent.element.appendChild(this.parent.createElement('button', { id: id + '_merge', attrs: { 'type': 'button' } }));
        var l10n = this.parent.serviceLocator.getService(locale);
        this.mergeSplitBtn = new SplitButton({
            cssClass: 'e-merge-ddb',
            iconCss: 'e-icons e-merge-icon',
            createPopupOnClick: true,
            items: [{ text: l10n.getConstant('MergeAll'), id: id + "_merge_all" }, { text: l10n.getConstant('MergeHorizontally'), id: id + "_merge_horizontally" }, { text: l10n.getConstant('MergeVertically'), id: id + "_merge_vertically" },
                { separator: true, id: id + "_merge_separator" }, { text: l10n.getConstant('Unmerge'), id: id + "_unmerge" }],
            select: this.mergeSelectHandler.bind(this),
            click: function (args) {
                args.element.setAttribute('aria-label', l10n.getConstant('MergeCells'));
                if (args.element.classList.contains('e-active')) {
                    _this.unMerge();
                }
                else {
                    _this.merge(_this.parent.element.id + "_merge_all");
                }
            },
            created: function () {
                var mergeCellTitle = l10n.getConstant('MergeCells');
                _this.mergeSplitBtn.element.title = mergeCellTitle;
                _this.mergeSplitBtn.element.setAttribute('aria-label', mergeCellTitle);
                _this.mergeSplitBtn.element.nextElementSibling.title = l10n.getConstant('SelectMergeType');
            },
            beforeOpen: function (args) { return args.element.setAttribute('aria-label', l10n.getConstant('MergeCells')); }
        });
        this.mergeSplitBtn.createElement = this.parent.createElement;
        this.mergeSplitBtn.appendTo('#' + id + '_merge');
        return this.mergeSplitBtn.element.parentElement;
    };
    Ribbon$1.prototype.mergeSelectHandler = function (args) {
        if (args.item.id === this.parent.element.id + "_unmerge") {
            this.unMerge();
        }
        else {
            this.merge(args.item.id);
        }
        this.mergeSplitBtn.element.setAttribute('aria-label', args.item.text);
    };
    Ribbon$1.prototype.unMerge = function (args) {
        var sheet = this.parent.getActiveSheet();
        var indexes = getSwapRange(getRangeIndexes(sheet.selectedRange));
        if (isReadOnlyCells(this.parent, indexes)) {
            this.parent.notify(readonlyAlert, null);
            return;
        }
        this.parent.showSpinner();
        var selectedRange = sheet.selectedRange;
        var mergeCollection = [];
        for (var i = indexes[0]; i <= indexes[2]; i++) {
            for (var j = indexes[1]; j <= indexes[3]; j++) {
                var cell = getCell(i, j, sheet);
                if (cell && (cell.rowSpan > 1 || cell.colSpan > 1)) {
                    var mergeArgs = { range: [i, j, i, j] };
                    this.parent.notify(mergedRange, mergeArgs);
                    mergeCollection.push(mergeArgs.range);
                }
            }
        }
        var mergeObj = {
            merge: false, range: args ? (args.range || selectedRange) : selectedRange,
            isAction: true, refreshRibbon: true, type: 'All'
        };
        if (mergeCollection.length > 0) {
            mergeObj.mergeCollection = mergeCollection;
        }
        this.parent.notify(setMerge, mergeObj);
        this.toggleActiveState(false);
        this.parent.hideSpinner();
    };
    Ribbon$1.prototype.merge = function (itemId) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var indexes = getRangeIndexes(sheet.selectedRange);
        var cell;
        if (isReadOnlyCells(this.parent, getSwapRange(indexes))) {
            this.parent.notify(readonlyAlert, null);
            return;
        }
        var isDataPresent;
        var isMergeAll = itemId.includes('merge_all');
        for (var i = indexes[0]; i <= indexes[2]; i++) {
            for (var j = indexes[1]; j <= indexes[3]; j++) {
                if (i === indexes[0] && j === indexes[1] && isMergeAll) {
                    continue;
                }
                if (i === indexes[0] && itemId.includes('merge_vertically')) {
                    continue;
                }
                if (j === indexes[1] && itemId.includes('_merge_horizontally')) {
                    continue;
                }
                cell = getCell(i, j, sheet) || {};
                if (cell.value || cell.formula) {
                    isDataPresent = true;
                }
            }
        }
        if (!isDataPresent) {
            this.performMerge(itemId);
            if (isMergeAll) {
                this.toggleActiveState(true);
            }
            return;
        }
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            height: 200, width: 400, isModal: true, showCloseIcon: true, cssClass: 'e-merge-alert-dlg',
            content: this.parent.serviceLocator.getService(locale).getConstant('MergeCellsAlert'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'MergeAlertDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                else {
                    focus(_this.parent.element);
                }
            },
            buttons: [{
                    buttonModel: { content: this.parent.serviceLocator.getService(locale).getConstant('Ok'), isPrimary: true },
                    click: function () {
                        dialogInst.hide();
                        _this.performMerge(itemId);
                        if (isMergeAll) {
                            _this.toggleActiveState(true);
                        }
                    }
                }]
        });
    };
    Ribbon$1.prototype.performMerge = function (itemId) {
        var id = this.parent.element.id;
        this.parent.showSpinner();
        switch (itemId) {
            case id + "_merge_all":
                this.parent.notify(setMerge, { merge: true, range: this.parent.getActiveSheet().selectedRange,
                    type: 'All', isAction: true, refreshRibbon: true });
                break;
            case id + "_merge_horizontally":
                this.parent.notify(setMerge, { merge: true, range: this.parent.getActiveSheet().selectedRange,
                    type: 'Horizontally', isAction: true });
                break;
            case id + "_merge_vertically":
                this.parent.notify(setMerge, { merge: true, range: this.parent.getActiveSheet().selectedRange,
                    type: 'Vertically', isAction: true });
                break;
        }
        this.parent.hideSpinner();
    };
    Ribbon$1.prototype.getSortFilterDDB = function (id) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var direction;
        this.sortingDdb = new DropDownButton({
            cssClass: 'e-sort-filter-ddb',
            iconCss: 'e-icons e-sort-filter-icon',
            items: [
                { text: l10n.getConstant('SortAscending'), iconCss: 'e-icons e-sort-asc' },
                { text: l10n.getConstant('SortDescending'), iconCss: 'e-icons e-sort-desc' },
                { text: l10n.getConstant('CustomSort') + '...', iconCss: 'e-icons e-sort-custom' },
                { separator: true },
                { text: l10n.getConstant('Filter'), iconCss: 'e-icons e-filter-apply', id: id + '_applyfilter' },
                { text: l10n.getConstant('ClearAllFilter'), iconCss: 'e-icons e-filter-clear', id: id + '_clearfilter' },
                { text: l10n.getConstant('ReapplyFilter'), iconCss: 'e-icons e-filter-reapply', id: id + '_reapplyfilter' }
            ],
            createPopupOnClick: true,
            beforeItemRender: function (args) {
                var eventArgs = { isFiltered: false, isClearAll: true };
                _this.parent.notify(getFilteredColumn, eventArgs);
                if (!_this.parent.allowSorting && (args.item.text === l10n.getConstant('SortAscending') ||
                    args.item.text === l10n.getConstant('SortDescending') || args.item.text === (l10n.getConstant('CustomSort') + '...'))) {
                    args.element.classList.add('e-disabled');
                }
                if (!_this.parent.allowFiltering && args.item.text === (l10n.getConstant('Filter'))) {
                    args.element.classList.add('e-disabled');
                }
                if (args.item.id === id + '_clearfilter' || args.item.id === id + '_reapplyfilter') {
                    if (!eventArgs.isFiltered) {
                        args.element.classList.add('e-disabled');
                    }
                    else {
                        args.element.classList.remove('e-disabled');
                    }
                }
            },
            beforeOpen: function (args) {
                _this.refreshSelected(_this.sortingDdb, args.element, 'iconCss');
                args.element.setAttribute('aria-label', _this.parent.serviceLocator.getService(locale).getConstant('SortAndFilter'));
            },
            select: function (args) {
                var prevSort = [];
                if (args.item.text === l10n.getConstant('SortAscending') || args.item.text === l10n.getConstant('SortDescending') ||
                    args.item.text === l10n.getConstant('CustomSort') + '...') {
                    var range = getRangeIndexes(_this.parent.getActiveSheet().selectedRange);
                    var sortRange = getDataRange(range[0], range[1], _this.parent.getActiveSheet());
                    if (isReadOnlyCells(_this.parent, sortRange)) {
                        _this.parent.notify(readonlyAlert, null);
                        return;
                    }
                }
                switch (args.item.text) {
                    case l10n.getConstant('Filter'):
                        _this.parent.notify(initiateFilterUI, {});
                        break;
                    case l10n.getConstant('ClearAllFilter'):
                        _this.parent.notify(clearFilter, { isAction: true });
                        break;
                    case l10n.getConstant('ReapplyFilter'):
                        _this.parent.notify(reapplyFilter, null);
                        break;
                    case l10n.getConstant('CustomSort') + '...':
                        _this.parent.notify(initiateCustomSort, null);
                        break;
                    default:
                        direction = args.item.text === l10n.getConstant('SortAscending') ? 'Ascending' : 'Descending';
                        if (_this.parent.sortCollection) {
                            for (var i = _this.parent.sortCollection.length - 1; i >= 0; i--) {
                                if (_this.parent.sortCollection[i] &&
                                    _this.parent.sortCollection[i].sheetIndex === _this.parent.activeSheetIndex) {
                                    prevSort.push(_this.parent.sortCollection[i]);
                                    _this.parent.sortCollection.splice(i, 1);
                                }
                            }
                        }
                        _this.parent.notify(updateSortCollection, { sortOptions: { sortDescriptors: { order: direction } } });
                        _this.parent.notify(applySort, { sortOptions: { sortDescriptors: { order: direction } }, previousSort: prevSort });
                        break;
                }
                _this.sortingDdb.element.setAttribute('aria-label', args.item.text);
            }
        });
        this.sortingDdb.createElement = this.parent.createElement;
        this.sortingDdb.appendTo(this.parent.createElement('button', { id: id + '_sorting', attrs: { 'type': 'button' }, className: 'e-ss-ddb' }));
        return this.sortingDdb.element;
    };
    Ribbon$1.prototype.getFindBtn = function (id) {
        var _this = this;
        var findToolbtn = this.parent.createElement('button', { id: id + '_findbtn', attrs: { 'type': 'button', 'aria-label': this.parent.serviceLocator.getService(locale).getConstant('FindReplaceTooltip') } });
        this.findDdb = new Button({ cssClass: 'e-spreadsheet-find-ddb e-flat', iconCss: 'e-icons e-search-icon' });
        this.findDdb.createElement = this.parent.createElement;
        this.findDdb.appendTo(findToolbtn);
        findToolbtn.onclick = function (e) {
            _this.parent.notify(findToolDlg, { event: e });
        };
        return this.findDdb.element;
    };
    Ribbon$1.prototype.getClearDDB = function (id) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        this.clearDdb = new DropDownButton({
            cssClass: 'e-clear-ddb',
            iconCss: 'e-icons e-clear-icon',
            items: [
                { text: l10n.getConstant('ClearAll'), id: id + '_Clear All' },
                { text: l10n.getConstant('ClearFormats'), id: id + '_Clear Formats' },
                { text: l10n.getConstant('ClearContents'), id: id + '_Clear Contents' },
                { text: l10n.getConstant('ClearHyperlinks'), id: id + '_Clear Hyperlinks' }
            ],
            createPopupOnClick: true,
            beforeOpen: function (args) {
                args.element.setAttribute('aria-label', _this.parent.serviceLocator.getService(locale).getConstant('Clear'));
            },
            beforeItemRender: function (args) {
                var sheet = _this.parent.getActiveSheet();
                var indexes = getSwapRange(getRangeIndexes(sheet.selectedRange));
                if (sheet.isProtected && sheet.protectSettings.formatCells && args.item.id !== id + '_Clear Formats' && (args.item.id === id + '_Clear Hyperlinks' || isLockedCells(_this.parent, indexes))) {
                    args.element.classList.add('e-disabled');
                    args.element.setAttribute('aria-disabled', 'true');
                }
            },
            select: function (args) {
                _this.parent.notify(clearViewer, { options: { type: args.item.id.replace(id + '_', '') }, isAction: true });
                _this.clearDdb.element.setAttribute('aria-label', args.item.text);
            }
        });
        this.clearDdb.createElement = this.parent.createElement;
        this.clearDdb.appendTo(this.parent.createElement('button', { id: id + '_clear', attrs: { 'type': 'button' }, className: 'e-ss-ddb' }));
        return this.clearDdb.element;
    };
    Ribbon$1.prototype.ribbonCreated = function () {
        var text = this.parent.serviceLocator.getService(locale).getConstant('CollapseToolbar');
        attributes(this.ribbon.element.querySelector('.e-drop-icon'), { 'role': 'button', 'tabindex': '-1', 'title': text, 'aria-label': text });
        if (this.ribbon.toolbarObj) {
            this.ribbon.toolbarObj.allowKeyboard = this.parent.enableKeyboardNavigation;
            this.ribbon.toolbarObj.dataBind();
        }
    };
    Ribbon$1.prototype.alignItemRender = function (args) {
        args.element.title = this.parent.serviceLocator.getService(locale).getConstant('Align' + this.getAlignText(args));
    };
    Ribbon$1.prototype.getAlignText = function (args) {
        var text = args.item.iconCss.split(' e-')[1].split('-icon')[0];
        return text[0].toUpperCase() + text.slice(1, text.length);
    };
    Ribbon$1.prototype.toggleBtnClicked = function (e) {
        var target = closest(e.target, '.e-btn');
        var parentId = this.parent.element.id;
        var id = target.id;
        var property = setCellFormat;
        var value;
        var defaultModel;
        var activeModel;
        var eventArgs;
        var key;
        switch (id) {
            case parentId + "_bold":
                defaultModel = { fontWeight: 'normal' };
                activeModel = { fontWeight: 'bold' };
                key = 'fontWeight';
                break;
            case parentId + "_italic":
                defaultModel = { fontStyle: 'normal' };
                activeModel = { fontStyle: 'italic' };
                key = 'fontStyle';
                break;
            case parentId + "_line-through":
                property = textDecorationUpdate;
                defaultModel = { textDecoration: 'line-through' };
                activeModel = defaultModel;
                key = 'textDecoration';
                break;
            case parentId + "_underline":
                property = textDecorationUpdate;
                defaultModel = { textDecoration: 'underline' };
                activeModel = defaultModel;
                key = 'textDecoration';
                break;
        }
        if (target.classList.contains('e-active')) {
            value = activeModel["" + key];
            eventArgs = { style: activeModel, onActionUpdate: true };
            this.parent.notify(property, eventArgs);
            if (eventArgs.cancel) {
                target.classList.remove('e-active');
            }
        }
        else {
            value = defaultModel["" + key];
            eventArgs = { style: defaultModel, onActionUpdate: true };
            this.parent.notify(property, eventArgs);
            if (eventArgs.cancel) {
                target.classList.add('e-active');
            }
        }
        if (!eventArgs.cancel && value !== eventArgs.style["" + key]) {
            this.refreshToggleBtn(getCellIndexes(this.parent.getActiveSheet().activeCell));
        }
    };
    Ribbon$1.prototype.getCellStyleValue = function (cssProp, indexes) {
        var cell = getCell(indexes[0], indexes[1], this.parent.getActiveSheet());
        var value = this.parent.cellStyle["" + cssProp];
        if (cell && cell.style && cell.style["" + cssProp]) {
            value = cell.style["" + cssProp];
        }
        return value;
    };
    Ribbon$1.prototype.refreshSelected = function (inst, element, key, itemKey) {
        if (itemKey === void 0) { itemKey = key; }
        for (var i = 0; i < inst.items.length; i++) {
            if (inst.items[i]["" + itemKey] === inst["" + key]) {
                element.children[i].classList.add('e-selected');
                break;
            }
        }
    };
    Ribbon$1.prototype.expandCollapseHandler = function (args) {
        var target = this.ribbon.element.querySelector('.e-drop-icon');
        var l10n = this.parent.serviceLocator.getService(locale);
        if (args.expanded) {
            target.title = l10n.getConstant('CollapseToolbar');
            target.setAttribute('aria-label', l10n.getConstant('ExpandToolbar'));
        }
        else {
            target.title = l10n.getConstant('ExpandToolbar');
            target.setAttribute('aria-label', l10n.getConstant('CollapseToolbar'));
        }
        this.parent.setPanelSize();
    };
    Ribbon$1.prototype.getChartThemeDdbItems = function (theme) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var items = [];
        var themes = ['Material', 'Fabric', 'Bootstrap', 'HighContrastLight', 'MaterialDark', 'FabricDark', 'HighContrast',
            'BootstrapDark', 'Bootstrap4', 'Bootstrap5Dark', 'Bootstrap5', 'TailwindDark', 'Tailwind', 'Tailwind3', 'Tailwind3Dark', 'FluentDark', 'Fluent', 'Fluent2', 'Fluent2Dark',
            'Material3', 'Material3Dark'];
        themes.forEach(function (id) {
            items.push({ id: id, text: l10n.getConstant(id), iconCss: id === theme ? 'e-icons e-selected-icon' : '' });
        });
        return items;
    };
    Ribbon$1.prototype.getNumFormatDdbItems = function (id) {
        var l10n = this.parent.serviceLocator.getService(locale);
        return [
            { id: id + '_General', text: l10n.getConstant('General') },
            { id: id + '_Number', text: l10n.getConstant('Number') },
            { id: id + '_Currency', text: l10n.getConstant('Currency') },
            { id: id + '_Accounting', text: l10n.getConstant('Accounting') },
            { id: id + '_ShortDate', text: l10n.getConstant('ShortDate') },
            { id: id + '_LongDate', text: l10n.getConstant('LongDate') },
            { id: id + '_Time', text: l10n.getConstant('Time') },
            { id: id + '_Percentage', text: l10n.getConstant('Percentage') },
            { id: id + '_Fraction', text: l10n.getConstant('Fraction') },
            { id: id + '_Scientific', text: l10n.getConstant('Scientific') },
            { id: id + '_Text', text: l10n.getConstant('Text') },
            { id: id + '_Custom', text: l10n.getConstant('Custom') }
        ];
    };
    Ribbon$1.prototype.getFontFamilyItems = function () {
        return [{ text: 'Arial' }, { text: 'Arial Black' }, { text: 'Axettac Demo' }, { text: 'Batang' }, { text: 'Book Antiqua' },
            { text: 'Calibri', iconCss: 'e-icons e-selected-icon' }, { text: 'Comic Sans MS' }, { text: 'Courier' }, { text: 'Courier New' },
            { text: 'Din Condensed' }, { text: 'Georgia' }, { text: 'Helvetica' }, { text: 'Helvetica New' }, { text: 'Roboto' },
            { text: 'Tahoma' }, { text: 'Times New Roman' }, { text: 'Verdana' }];
    };
    Ribbon$1.prototype.applyNumFormat = function (format) {
        var sheet = this.parent.getActiveSheet();
        var eventArgs = {
            format: format, range: sheet.selectedRange, cancel: false, requestType: 'NumberFormat'
        };
        var actionArgs = {
            range: sheet.name + '!' + eventArgs.range, format: eventArgs.format, requestType: 'NumberFormat'
        };
        var isReadonly = isReadOnlyCells(this.parent, getSwapRange(getRangeIndexes(eventArgs.range)));
        if (!isReadonly) {
            this.parent.trigger('beforeCellFormat', eventArgs);
            this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'format' });
            if (eventArgs.cancel) {
                return eventArgs.format;
            }
        }
        this.parent.notify(applyNumberFormatting, eventArgs);
        this.parent.notify(selectionComplete, { type: 'mousedown' });
        if (!isReadonly) {
            this.parent.notify(completeAction, { eventArgs: actionArgs, action: 'format' });
        }
        return eventArgs.format;
    };
    Ribbon$1.prototype.renderCustomFormatDialog = function (defaultFormats, localizedFormats) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dummyDiv = this.parent.createElement('div');
        var dialogCont = this.parent.createElement('div', { className: 'e-custom-dialog' });
        var dialogBtn = this.parent.createElement('button', { className: 'e-btn', attrs: { 'type': 'button' } });
        dialogBtn.innerText = l10n.getConstant('Apply');
        var sampleDiv = this.parent.createElement('div', { className: 'e-custom-sample' });
        sampleDiv.innerText = l10n.getConstant('CustomFormatTypeList') + ':';
        var inputButtondiv = this.parent.createElement('div', { className: 'e-input-button' });
        var inputElem = this.parent.createElement('input', { className: 'e-input e-dialog-input', attrs: { 'type': 'text', 'name': 'input', 'spellcheck': 'false',
                'placeholder': l10n.getConstant('CustomFormatPlaceholder') } });
        var listviewCont = this.parent.createElement('div', { className: 'e-custom-listview' });
        var customFormatDialog = this.parent.serviceLocator.getService(dialog);
        var listview = new ListView({
            dataSource: localizedFormats,
            select: function (args) {
                // Listview trim the front and end spaces, so we are taking the textContent from selected element instead of using text.
                inputElem.value = args.item.textContent;
                if (args.event && args.event.type === 'keydown' && args.item) {
                    args.item.focus();
                }
            }
        });
        inputButtondiv.appendChild(inputElem);
        inputButtondiv.appendChild(dialogBtn);
        dialogCont.appendChild(inputButtondiv);
        dialogCont.appendChild(sampleDiv);
        dialogCont.appendChild(listviewCont);
        listview.appendTo(listviewCont);
        if (localizedFormats[4] !== defaultFormats[4]) {
            var listItems = listview.element.getElementsByClassName('e-list-text');
            for (var idx = 0, len = listItems.length; idx < len; idx++) {
                if (listItems[idx].textContent !== localizedFormats[idx]) {
                    listItems[idx].textContent = localizedFormats[idx];
                }
            }
        }
        var applyBtnClickHandler = function () {
            var format = inputElem.value;
            var formatIdx = localizedFormats.indexOf(format);
            var defaultFormat;
            if (formatIdx > -1) {
                defaultFormat = defaultFormats[formatIdx];
            }
            else {
                defaultFormat = convertToDefaultFormat(_this.parent, format);
            }
            defaultFormat = _this.applyNumFormat(defaultFormat);
            if (defaultFormat) {
                _this.refreshNumFormatSelection(getTypeFromFormat(defaultFormat, true), _this.parent.getActiveSheet(), l10n, defaultFormat);
                _this.parent.notify(localizedFormatAction, { action: 'addToCustomFormats', format: format, defaultFormat: defaultFormat });
            }
            customFormatDialog.hide();
            if (_this.parent.showAggregate) {
                _this.parent.notify(showAggregate, {});
            }
        };
        dialogBtn.addEventListener('click', applyBtnClickHandler);
        var inputChangeHandler = function () {
            var selectedList = listview.getSelectedItems();
            if (selectedList) {
                listview.unselectItem();
            }
        };
        inputElem.addEventListener('input', inputChangeHandler);
        customFormatDialog.show({
            header: l10n.getConstant('CustomFormat'),
            cssClass: 'e-custom-format-dlg',
            height: this.parent.cssClass.indexOf('e-bigger') > -1 ? 502 : 480,
            width: 440,
            isModal: true,
            showCloseIcon: true,
            content: dialogCont,
            footerTemplate: dummyDiv,
            beforeOpen: function (beforeOpenArgs) {
                var dlgArgs = {
                    dialogName: 'CustomNumberFormatDlg',
                    element: beforeOpenArgs.element, target: beforeOpenArgs.target, cancel: beforeOpenArgs.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    beforeOpenArgs.cancel = true;
                }
                else {
                    var sheet = _this.parent.getActiveSheet();
                    var actCell = getCellIndexes(sheet.activeCell);
                    var cell = getCell(actCell[0], actCell[1], sheet);
                    if (cell && cell.format) {
                        var formatIdx = defaultFormats.indexOf(cell.format);
                        listview.selectItem(listview.element.getElementsByClassName('e-list-item')[formatIdx]);
                    }
                    focus(_this.parent.element);
                }
            }
        });
    };
    Ribbon$1.prototype.tBarDdbBeforeOpen = function (element, items, targetLabel, separatorCount) {
        if (separatorCount === void 0) { separatorCount = 0; }
        var viewportHeight = this.parent.viewport.height;
        var actualHeight = (parseInt(getComputedStyle(element.firstElementChild).height, 10) * (items.length - separatorCount)) +
            (parseInt(getComputedStyle(element).paddingTop, 10) * 2);
        if (separatorCount) {
            var separatorStyle = getComputedStyle(element.querySelector('.e-separator'));
            actualHeight += (separatorCount * (parseInt(separatorStyle.borderBottomWidth, 10) + (parseInt(separatorStyle.marginTop, 10) * 2)));
        }
        if (actualHeight > viewportHeight) {
            element.style.height = viewportHeight + "px";
            element.style.overflowY = 'auto';
        }
        else {
            if (element.style.height) {
                element.style.height = '';
                element.style.overflowY = '';
            }
        }
        element.setAttribute('aria-label', targetLabel);
    };
    Ribbon$1.prototype.numDDBOpen = function (args) {
        this.numPopupWidth = 0;
        var elemList = args.element.querySelectorAll('span.e-numformat-preview-text');
        for (var i = 0, len = elemList.length; i < len; i++) {
            if (this.numPopupWidth < elemList[i].offsetWidth) {
                this.numPopupWidth = elemList[i].offsetWidth;
            }
        }
        var popWidth = this.numPopupWidth + 160;
        document.querySelector('.e-numformat-ddb.e-dropdown-popup').style.width = popWidth + "px";
    };
    Ribbon$1.prototype.previewNumFormat = function (args) {
        if (args.item.id.includes('_Custom')) {
            return;
        }
        var numElem = this.parent.createElement('div', { className: 'e-numformat-text', styles: 'width:100%', innerHTML: args.element.innerHTML });
        args.element.innerHTML = '';
        var sheet = this.parent.getActiveSheet();
        var cellIndex = getCellIndexes(sheet.activeCell);
        var cell = getCell(cellIndex[0], cellIndex[1], sheet, false, true);
        if (!isNullOrUndefined(cell.value) || cell.value !== '') {
            var format = getFormatFromType(args.item.id.split(this.parent.element.id + '_')[1]);
            var eventArgs = { type: args.item.text, formattedText: '', value: cell.value, format: format,
                cell: { value: cell.value, format: format }, skipFormatCheck: isImported(this.parent) };
            this.parent.notify(getFormattedCellObject, eventArgs);
            var previewElem = this.parent.createElement('span', { className: 'e-numformat-preview-text', styles: 'float:right;' });
            previewElem.innerText = eventArgs.formattedText;
            numElem.appendChild(previewElem);
        }
        args.element.appendChild(numElem);
    };
    Ribbon$1.prototype.refreshRibbonContent = function (activeTab) {
        if (!this.ribbon) {
            return;
        }
        if (isNullOrUndefined(activeTab)) {
            activeTab = this.ribbon.selectedTab;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        var cellIndexes = getCellIndexes(sheet.activeCell);
        switch (this.ribbon.items[activeTab].header.text) {
            case l10n.getConstant('Home'):
                this.refreshHomeTabContent(cellIndexes);
                break;
            case l10n.getConstant('Insert'): {
                if (sheet.isProtected) {
                    if (sheet.protectSettings.insertLink &&
                        !isLocked(getCell(cellIndexes[0], cellIndexes[1], sheet), getColumn(sheet, cellIndexes[1]))) {
                        this.enableToolbarItems([{
                                tab: l10n.getConstant('Insert'),
                                items: [this.parent.element.id + "_hyperlink"], enable: true
                            }]);
                    }
                    else {
                        this.enableToolbarItems([{
                                tab: l10n.getConstant('Insert'),
                                items: [this.parent.element.id + "_hyperlink"], enable: false
                            }]);
                    }
                }
                break;
            }
            case l10n.getConstant('Formulas'):
                if (sheet.isProtected) {
                    if (!isLocked(getCell(cellIndexes[0], cellIndexes[1], sheet), getColumn(sheet, cellIndexes[1]))) {
                        this.enableToolbarItems([{
                                tab: l10n.getConstant('Formulas'),
                                items: [this.parent.element.id + "_insert_function"], enable: true
                            }]);
                    }
                    else {
                        this.enableToolbarItems([{
                                tab: l10n.getConstant('Formulas'),
                                items: [this.parent.element.id + "_insert_function"], enable: false
                            }]);
                    }
                }
                break;
            case l10n.getConstant('Data'):
                this.refreshDataTabContent(activeTab);
                break;
            case l10n.getConstant('View'):
                this.refreshViewTabContent(activeTab);
                break;
        }
    };
    Ribbon$1.prototype.refreshHomeTabContent = function (indexes) {
        if (!isNullOrUndefined(document.getElementById(this.parent.element.id + '_number_format'))) {
            this.numFormatDDB = getComponent(document.getElementById(this.parent.element.id + '_number_format'), DropDownButton);
        }
        var sheet = this.parent.getActiveSheet();
        var actCell = getCellIndexes(sheet.activeCell);
        var l10n = this.parent.serviceLocator.getService(locale);
        var cell = getCell(actCell[0], actCell[1], sheet, false, true);
        var type = getTypeFromFormat(cell.format || 'General', true);
        this.refreshNumFormatSelection(type, sheet, l10n, cell.format);
        if (sheet.isProtected && this.parent.enableClipboard &&
            this.parent.clipboardModule.copiedInfo) {
            this.parent.notify(enableToolbarItems, [{
                    items: [this.parent.element.id + '_paste'],
                    enable: !isLocked(cell, getColumn(sheet, actCell[1]))
                }]);
        }
        if (this.fontNameDdb) {
            if (sheet.isProtected && !sheet.protectSettings.formatCells) {
                this.refreshFontNameSelection('Calibri');
            }
            else {
                this.refreshFontNameSelection(this.getCellStyleValue('fontFamily', indexes));
            }
        }
        if (this.fontSizeDdb) {
            var value = this.getCellStyleValue('fontSize', indexes);
            if (sheet.isProtected && !sheet.protectSettings.formatCells) {
                this.fontSizeDdb.content = '11';
            }
            else {
                value = value.includes('pt') ? value.split('pt')[0] : '11';
                if (value !== this.fontSizeDdb.content) {
                    this.fontSizeDdb.content = value;
                    this.fontSizeDdb.dataBind();
                }
            }
        }
        this.refreshTextAlign(sheet, cell, type, indexes);
        if (this.verticalAlignDdb) {
            var value = "e-icons e-" + this.getCellStyleValue('verticalAlign', indexes).toLowerCase() + "-icon";
            if (sheet.isProtected && !sheet.protectSettings.formatCells) {
                this.verticalAlignDdb.iconCss = 'e-icons e-bottom-icon';
            }
            else {
                if (value !== this.verticalAlignDdb.iconCss) {
                    this.verticalAlignDdb.iconCss = value;
                    this.verticalAlignDdb.dataBind();
                }
            }
        }
        this.refreshToggleBtn(indexes);
        if (!sheet.isProtected && (cell.rowSpan > 1 || cell.colSpan > 1)) {
            this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: [this.parent.element.id + "_merge_cells"],
                    enable: true }]);
            this.toggleActiveState(true);
        }
        else {
            var indexes_1 = getRangeIndexes(sheet.selectedRange);
            this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: [this.parent.element.id + "_merge_cells"],
                    enable: indexes_1[0] !== indexes_1[2] || indexes_1[1] !== indexes_1[3] }]);
            this.toggleActiveState(false);
        }
    };
    Ribbon$1.prototype.refreshTextAlign = function (sheet, cell, type, indexes) {
        if (this.textAlignDdb) {
            var style = this.getCellStyleValue('textAlign', indexes);
            if (sheet.isProtected && !sheet.protectSettings.formatCells) {
                this.textAlignDdb.iconCss = 'e-icons e-left-icon';
            }
            else {
                if (cell.value !== undefined && style === 'left' && (type === 'Accounting' || (isNumber(cell.value) && type !== 'Text'))) {
                    style = 'right';
                }
                var value = "e-icons e-" + style.toLowerCase() + "-icon";
                if (value !== this.textAlignDdb.iconCss) {
                    this.textAlignDdb.iconCss = value;
                    this.textAlignDdb.dataBind();
                }
            }
        }
    };
    Ribbon$1.prototype.toggleActiveState = function (active) {
        var l10n = this.parent.serviceLocator.getService(locale);
        if (!this.parent.getActiveSheet().isProtected) {
            if (active) {
                if (!this.mergeSplitBtn.element.classList.contains('e-active')) {
                    this.mergeSplitBtn.element.classList.add('e-active');
                    this.mergeSplitBtn.element.title = l10n.getConstant('UnmergeCells');
                }
            }
            else {
                if (this.mergeSplitBtn.element.classList.contains('e-active')) {
                    this.mergeSplitBtn.element.classList.remove('e-active');
                    this.mergeSplitBtn.element.title = l10n.getConstant('MergeCells');
                }
            }
        }
    };
    Ribbon$1.prototype.refreshToggleBtn = function (indexes) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var btn;
        var id = this.parent.element.id;
        var value;
        var isActive;
        var cell = getCell(indexes[0], indexes[1], sheet);
        var fontProps = ['fontWeight', 'fontStyle', 'textDecoration', 'textDecoration'];
        ['bold', 'italic', 'line-through', 'underline', 'wrap'].forEach(function (name, index) {
            btn = document.getElementById(id + "_" + name);
            if (btn) {
                isActive = false;
                if (!sheet.isProtected || sheet.protectSettings.formatCells) {
                    if (name === 'wrap') {
                        isActive = _this.parent.allowWrap && cell && cell.wrap;
                    }
                    else if (_this.parent.allowCellFormatting) {
                        value = _this.getCellStyleValue(fontProps[index], indexes).toLowerCase();
                        isActive = value.indexOf(name) > -1;
                    }
                }
                if (isActive) {
                    btn.classList.add('e-active');
                }
                else {
                    if (btn.classList.contains('e-active')) {
                        btn.classList.remove('e-active');
                    }
                }
            }
        });
    };
    Ribbon$1.prototype.refreshFontNameSelection = function (fontFamily) {
        fontFamily = fontFamily.split('"').join('');
        this.fontNameDdb.element.firstElementChild.textContent = fontFamily;
        for (var i = 0; i < this.fontNameDdb.items.length; i++) {
            if (this.fontNameDdb.items[i].text === fontFamily) {
                this.fontNameDdb.items[i].iconCss = 'e-icons e-selected-icon';
                if (i !== this.fontNameIndex) {
                    this.fontNameDdb.items[this.fontNameIndex].iconCss = '';
                }
                this.fontNameDdb.setProperties({ 'items': this.fontNameDdb.items }, true);
                this.fontNameIndex = i;
                break;
            }
        }
        if (['Arial', 'Arial Black', 'Axettac Demo', 'Batang', 'Book Antiqua', 'Calibri', 'Comic Sans MS', 'Courier',
            'Courier New', 'Din Condensed', 'Georgia', 'Helvetica', 'Helvetica New', 'Roboto',
            'Tahoma', 'Times New Roman', 'Verdana'].indexOf(fontFamily) < 0) {
            this.fontNameDdb.items[this.fontNameIndex].iconCss = '';
        }
        this.fontNameDdb.element.setAttribute('aria-label', fontFamily);
    };
    Ribbon$1.prototype.refreshNumFormatSelection = function (type, sheet, l10n, format) {
        if (this.numFormatDDB) {
            if (sheet.isProtected && !sheet.protectSettings.formatCells) {
                type = 'General';
            }
            else {
                if (format && type === 'General' && format !== 'General') {
                    type = 'Custom';
                }
                type = l10n.getConstant(type);
            }
            for (var i = 0; i < this.numFormatDDB.items.length; i++) {
                if (this.numFormatDDB.items[i].iconCss !== '') {
                    this.numFormatDDB.items[i].iconCss = '';
                }
                if (this.numFormatDDB.items[i].text === type) {
                    this.numFormatDDB.items[i].iconCss = 'e-icons e-selected-icon';
                }
            }
            this.numFormatDDB.element.firstElementChild.textContent = type;
            this.numFormatDDB.setProperties({ 'items': this.numFormatDDB.items }, true);
            this.numFormatDDB.element.setAttribute('aria-label', type);
        }
    };
    Ribbon$1.prototype.fileMenuItemSelect = function (args) {
        var _this = this;
        var selectArgs = extend({ cancel: false }, args);
        this.parent.trigger('fileMenuItemSelect', selectArgs);
        var id = this.parent.element.id;
        var dialogInst;
        if (!selectArgs.cancel) {
            switch (args.item.id) {
                case id + "_Print":
                    this.parent.print();
                    break;
                case id + "_Open":
                    select('#' + id + '_fileUpload', this.parent.element).click();
                    focus(this.parent.element);
                    break;
                case id + "_Xlsx":
                case id + "_Xls":
                case id + "_Csv":
                case id + "_Pdf":
                    this.parent.notify(exportDialog, args);
                    break;
                case id + "_New":
                    dialogInst = this.parent.serviceLocator.getService(dialog);
                    dialogInst.show({
                        height: 200, width: 400, isModal: true, showCloseIcon: true,
                        content: this.parent.serviceLocator.getService(locale).getConstant('DestroyAlert'),
                        beforeOpen: function (args) {
                            var dlgArgs = {
                                dialogName: 'DestroySheetDialog',
                                element: args.element, target: args.target, cancel: args.cancel
                            };
                            _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                            if (dlgArgs.cancel) {
                                args.cancel = true;
                            }
                            else {
                                focus(_this.parent.element);
                            }
                        },
                        buttons: [{
                                buttonModel: {
                                    content: this.parent.serviceLocator.getService(locale).getConstant('Ok'), isPrimary: true
                                },
                                click: function () {
                                    dialogInst.hide();
                                    _this.parent.refresh(true);
                                }
                            }]
                    });
                    break;
            }
        }
    };
    Ribbon$1.prototype.toolbarClicked = function (args) {
        if (args.item && !(args.item.id === 'spreadsheet_find')) {
            var parentId = this.parent.element.id;
            var sheet = this.parent.getActiveSheet();
            var evtHArgs = void 0;
            var evtglArgs = void 0;
            var indexes = void 0;
            var selectCell = void 0;
            switch (args.item.id) {
                case parentId + '_headers':
                    evtHArgs = {
                        isShow: !sheet.showHeaders,
                        sheetIdx: this.parent.activeSheetIndex,
                        cancel: false
                    };
                    this.parent.notify(completeAction, { eventArgs: evtHArgs, action: 'headers' });
                    if (evtHArgs.cancel) {
                        return;
                    }
                    this.parent.setSheetPropertyOnMute(sheet, 'showHeaders', !sheet.showHeaders);
                    this.parent.serviceLocator.getService('sheet').showHideHeaders();
                    this.toggleRibbonItems({ props: 'Headers', activeTab: this.ribbon.selectedTab });
                    break;
                case parentId + '_gridlines':
                    evtglArgs = {
                        isShow: !sheet.showGridLines,
                        sheetIdx: this.parent.activeSheetIndex,
                        cancel: false
                    };
                    this.parent.notify(completeAction, { eventArgs: evtglArgs, action: 'gridLines' });
                    if (evtglArgs.cancel) {
                        return;
                    }
                    this.parent.setSheetPropertyOnMute(sheet, 'showGridLines', !sheet.showGridLines);
                    this.toggleRibbonItems({ props: 'GridLines', activeTab: this.ribbon.selectedTab });
                    break;
                case parentId + '_protect':
                    this.parent.notify(toggleProtect, {});
                    break;
                case parentId + '_undo':
                    this.parent.notify(performUndoRedo, { isUndo: true });
                    break;
                case parentId + '_redo':
                    this.parent.notify(performUndoRedo, { isUndo: false });
                    break;
                case parentId + '_freezepanes':
                    indexes = getCellIndexes(sheet.topLeftCell);
                    selectCell = sheet.frozenRows || sheet.frozenColumns ? indexes : getCellIndexes(sheet.activeCell);
                    this.parent.notify(freeze, { row: selectCell[0] - indexes[0], column: selectCell[1] - indexes[1], triggerEvent: true });
                    break;
                case parentId + '_freezerows':
                    this.parent.notify(freeze, { row: sheet.frozenRows ? 0 : getCellIndexes(sheet.activeCell)[0] - getCellIndexes(sheet.topLeftCell)[0], column: sheet.frozenColumns, triggerEvent: true });
                    break;
                case parentId + '_freezecolumns':
                    this.parent.notify(freeze, { row: sheet.frozenRows, column: sheet.frozenColumns ? 0 : getCellIndexes(sheet.activeCell)[1] - getCellIndexes(sheet.topLeftCell)[1], triggerEvent: true });
                    break;
                case parentId + '_protectworkbook':
                    if (this.parent.password.length > 0) {
                        this.parent.notify(unProtectWorkbook, null);
                    }
                    else {
                        if (this.parent.isProtected) {
                            this.parent.isProtected = false;
                            if (this.parent.showSheetTabs) {
                                this.parent.element.querySelector('.e-add-sheet-tab').removeAttribute('disabled');
                                this.parent.element.querySelector('.e-add-sheet-tab').classList.remove('e-disabled');
                            }
                            this.toggleRibbonItems({ props: 'Protectworkbook', activeTab: this.ribbon.selectedTab });
                            this.parent.notify(completeAction, { action: 'protectWorkbook', eventArgs: { isProtected: false } });
                        }
                        else if (this.parent.element.querySelector('.e-add-sheet-tab').classList.contains('e-disabled')) {
                            this.toggleRibbonItems({ props: 'Protectworkbook', activeTab: this.ribbon.selectedTab });
                        }
                        else {
                            this.parent.notify(protectWorkbook, null);
                        }
                    }
                    break;
            }
            this.parent.notify(ribbonClick, args);
        }
    };
    Ribbon$1.prototype.toggleRibbonItems = function (args) {
        var text = '';
        var viewtabHeader = this.parent.serviceLocator.getService(locale).getConstant('View');
        var datatabHeader = this.parent.serviceLocator.getService(locale).getConstant('Data');
        if (this.ribbon.items[this.ribbon.selectedTab].header.text === viewtabHeader) {
            if (isNullOrUndefined(args.activeTab)) {
                for (var i = 0, len_1 = this.ribbon.items.length; i < len_1; i++) {
                    if (this.ribbon.items[i].header.text === viewtabHeader) {
                        args.activeTab = i;
                        break;
                    }
                }
            }
            var text_1 = this.getLocaleText(args.props);
            if (args.props === 'GridLines') {
                this.parent.serviceLocator.getService('sheet').toggleGridlines();
            }
            var id = this.parent.element.id + "_" + args.props.toLowerCase();
            var len = this.ribbon.items[args.activeTab].content.length;
            for (var i = void 0; i < len; i++) {
                if (this.ribbon.items[args.activeTab].content[i].type === 'Separator') {
                    continue;
                }
                if (this.ribbon.items[args.activeTab].content[i].id === id) {
                    this.ribbon.items[args.activeTab].content[i].text = text_1;
                    this.ribbon.setProperties({ 'items': this.ribbon.items }, true);
                }
            }
            if (this.ribbon.items[this.ribbon.selectedTab].header.text === viewtabHeader && args.props !== 'Protect') {
                this.updateToggleText(args.props.toLowerCase(), text_1);
            }
        }
        if (this.ribbon.items[this.ribbon.selectedTab].header.text === datatabHeader) {
            if (isNullOrUndefined(args.activeTab)) {
                for (var i = 0, len_2 = this.ribbon.items.length; i < len_2; i++) {
                    if (this.ribbon.items[i].header.text === datatabHeader) {
                        args.activeTab = i;
                        break;
                    }
                }
            }
            var id = this.parent.element.id + "_" + args.props.toLowerCase();
            if (id === this.parent.element.id + '_protect') {
                var len_3 = this.ribbon.items[this.ribbon.selectedTab].content.length;
                var j = void 0;
                for (j = 0; j < len_3; j++) {
                    if (this.ribbon.items[this.ribbon.selectedTab].content[j].id === this.parent.element.id + '_protect') {
                        break;
                    }
                }
                text = this.getLocaleProtectText('Sheet', true);
            }
            else if (id === this.parent.element.id + '_protectworkbook') {
                var len_4 = this.ribbon.items[this.ribbon.selectedTab].content.length;
                var j = void 0;
                for (j = 0; j < len_4; j++) {
                    if (this.ribbon.items[this.ribbon.selectedTab].content[j].id === this.parent.element.id + '_protectworkbook') {
                        break;
                    }
                }
                if (this.parent.isProtected || this.parent.password.length > 0) {
                    text = this.getLocaleProtectWorkbook('UnprotectWorkbook');
                }
                else if (!this.parent.isProtected) {
                    text = this.getLocaleProtectWorkbook('ProtectWorkbook');
                }
            }
            var len = this.ribbon.items[args.activeTab].content.length;
            for (var i = void 0; i < len; i++) {
                if (this.ribbon.items[args.activeTab].content[i].type === 'Separator') {
                    continue;
                }
                if (this.ribbon.items[args.activeTab].content[i].id === id) {
                    this.ribbon.items[args.activeTab].content[i].text = text;
                    this.ribbon.setProperties({ 'items': this.ribbon.items }, true);
                }
            }
            if (this.ribbon.items[this.ribbon.selectedTab].header.text === datatabHeader) {
                this.updateToggleText(args.props.toLowerCase(), text);
            }
        }
    };
    Ribbon$1.prototype.enableFileMenuItems = function (args) {
        this.ribbon.enableMenuItems(args.items, args.enable, args.isUniqueId);
    };
    Ribbon$1.prototype.hideRibbonTabs = function (args) {
        this.ribbon.hideTabs(args.tabs, args.hide);
    };
    Ribbon$1.prototype.addRibbonTabs = function (args) {
        this.ribbon.addTabs(args.items, args.insertBefore);
        var nextTab = select('.e-ribbon .e-tab-header .e-toolbar-item:not(.e-menu-tab).e-hide', this.parent.element);
        if (nextTab) {
            this.parent.updateActiveBorder(selectAll('.e-ribbon .e-tab-header .e-toolbar-item:not(.e-menu-tab)', this.parent.element)[this.ribbon.selectedTab]);
        }
    };
    Ribbon$1.prototype.updateToggleText = function (item, text) {
        var ele = select("#" + this.parent.element.id + "_" + item + " .e-tbar-btn-text", this.ribbon.element);
        if (item === 'protect' || item === 'protectworkbook') {
            ele.parentElement.setAttribute('aria-label', text);
        }
        else {
            ele.parentElement.setAttribute('aria-label', ele.textContent);
        }
        getUpdateUsingRaf(function () {
            if (ele) {
                ele.textContent = text;
            }
        });
        if (item === 'headers') {
            var findDlgEle = this.parent.element.getElementsByClassName('e-findtool-dlg')[0];
            if (findDlgEle && findDlgEle.classList.contains('e-popup-open')) {
                this.parent.notify(findToolDlg, { refreshPosition: true, dialogEle: findDlgEle });
            }
        }
    };
    Ribbon$1.prototype.refreshViewTabContent = function (activeTab) {
        var id = this.parent.element.id;
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        var tabItem;
        for (var i = 0; i < this.ribbon.items[activeTab].content.length; i++) {
            tabItem = this.ribbon.items[activeTab].content[i];
            if (tabItem.type === 'Separator') {
                continue;
            }
            if (tabItem.id === id + "_headers") {
                this.updateViewTabContent(activeTab, 'Headers', i);
            }
            if (tabItem.id === id + "_gridlines") {
                this.updateViewTabContent(activeTab, 'GridLines', i);
            }
            if (tabItem.id === (id + "_freezepanes")) {
                if (sheet.frozenRows || sheet.frozenColumns) {
                    if (tabItem.text === l10n.getConstant('FreezePanes')) {
                        this.updateToggleText('freezepanes', this.updateRibbonItemText('Unfreeze', 'Panes', i, activeTab));
                    }
                }
                else {
                    if (tabItem.text === l10n.getConstant('UnfreezePanes')) {
                        this.updateToggleText('freezepanes', this.updateRibbonItemText('Freeze', 'Panes', i, activeTab));
                    }
                }
            }
            if (tabItem.id === (id + "_freezerows")) {
                if (sheet.frozenRows) {
                    if (tabItem.text === l10n.getConstant('FreezeRows')) {
                        this.updateToggleText('freezerows', this.updateRibbonItemText('Unfreeze', 'Rows', i, activeTab));
                    }
                }
                else {
                    if (tabItem.text === l10n.getConstant('UnfreezeRows')) {
                        this.updateToggleText('freezerows', this.updateRibbonItemText('Freeze', 'Rows', i, activeTab));
                    }
                }
            }
            if (tabItem.id === (id + "_freezecolumns")) {
                if (sheet.frozenColumns) {
                    if (tabItem.text === l10n.getConstant('FreezeColumns')) {
                        this.updateToggleText('freezecolumns', this.updateRibbonItemText('Unfreeze', 'Columns', i, activeTab));
                    }
                }
                else {
                    if (tabItem.text === l10n.getConstant('UnfreezeColumns')) {
                        this.updateToggleText('freezecolumns', this.updateRibbonItemText('Freeze', 'Columns', i, activeTab));
                    }
                }
            }
        }
    };
    Ribbon$1.prototype.updateViewTabContent = function (activeTab, item, idx) {
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        if (sheet['show' + item]) {
            if (this.ribbon.items[activeTab].content[idx].text === l10n.getConstant('Show' + item)) {
                this.updateToggleText(item.toLowerCase(), this.updateRibbonItemText('Hide', item, idx, activeTab));
            }
        }
        else {
            if (this.ribbon.items[activeTab].content[idx].text === l10n.getConstant('Hide' + item)) {
                this.updateToggleText(item.toLowerCase(), this.updateRibbonItemText('Show', item, idx, activeTab));
            }
        }
    };
    Ribbon$1.prototype.updateRibbonItemText = function (showHideText, item, idx, activeTab) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var text = l10n.getConstant(showHideText + item);
        this.ribbon.items[activeTab].content[idx].text = text;
        this.ribbon.setProperties({ 'items': this.ribbon.items }, true);
        return text;
    };
    Ribbon$1.prototype.refreshDataTabContent = function (activeTab) {
        var id = this.parent.element.id;
        var updated;
        for (var j = 0; j < this.ribbon.items[activeTab].content.length; j++) {
            if (this.ribbon.items[activeTab].content[j].type === 'Separator') {
                continue;
            }
            if (this.ribbon.items[activeTab].content[j].id === id + "_protect") {
                this.updateDataTabContent(activeTab, 'Sheet', j);
                if (updated) {
                    break;
                }
                updated = true;
            }
            if (this.ribbon.items[activeTab].content[j].id === id + "_protectworkbook") {
                this.updateDataTabContent(activeTab, 'Workbook', j);
            }
        }
    };
    Ribbon$1.prototype.updateDataTabContent = function (activeTab, item, idx) {
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        if (item === 'Sheet') {
            if (sheet.isProtected) {
                if (this.ribbon.items[activeTab].content[idx].text === l10n.getConstant('Protect' + item)) {
                    this.ribbon.items[activeTab].content[idx].cssClass = 'e-active';
                    this.updateProtectBtn('Unprotect', item, idx, activeTab);
                }
            }
            else {
                this.updateProtectBtn('Protect', item, idx, activeTab);
            }
        }
        else if (item === 'Workbook') {
            var l10n_1 = this.parent.serviceLocator.getService(locale);
            if (this.parent.isProtected) {
                if (this.ribbon.items[activeTab].content[idx].text === l10n_1.getConstant('Protect' + item)) {
                    this.updateToggleText('protectworkbook', this.updateRibbonItemText('Unprotect', item, idx, activeTab));
                }
            }
            else {
                if (this.ribbon.items[activeTab].content[idx].text === l10n_1.getConstant('Unprotect' + item)) {
                    this.updateToggleText('protectworkbook', this.updateRibbonItemText('Protect', item, idx, activeTab));
                }
            }
        }
    };
    Ribbon$1.prototype.updateProtectBtn = function (protectText, item, idx, activeTab) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var text = l10n.getConstant(protectText + item);
        this.ribbon.items[activeTab].content[idx].text = text;
        this.ribbon.setProperties({ 'items': this.ribbon.items }, true);
        this.updateToggleText('protect', text);
    };
    Ribbon$1.prototype.updateProtectWorkbookBtn = function (protectText, item, idx, activeTab) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var text = l10n.getConstant(protectText);
        this.ribbon.items[activeTab].content[idx].text = text;
        this.ribbon.setProperties({ 'items': this.ribbon.items }, true);
        this.updateToggleText('protectworkbook', text);
    };
    Ribbon$1.prototype.addToolbarItems = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        this.ribbon.addToolbarItems(l10n.getConstant(args.tab), args.items, args.index);
        if (this.parent && this.parent.isReact && this.parent.portals &&
            this.ribbon.toolbarObj && this.ribbon.toolbarObj.portals) {
            this.parent.portals = this.parent.portals.concat(this.ribbon.toolbarObj.portals);
            this.parent['renderReactTemplates']();
        }
    };
    Ribbon$1.prototype.enableToolbarItems = function (args) {
        var _this = this;
        args.forEach(function (arg) {
            _this.ribbon.enableItems(arg.tab || _this.ribbon.items[_this.ribbon.selectedTab].header.text, arg.items, arg.enable);
        });
    };
    Ribbon$1.prototype.createMobileView = function () {
        var _this = this;
        var parentId = this.parent.element.id;
        var toobar = this.parent.createElement('div', { className: 'e-header-toolbar' });
        var menu = this.parent.createElement('ul');
        toobar.appendChild(menu);
        var toolbarObj = new Toolbar({
            items: [
                { prefixIcon: 'e-tick-icon', align: 'Left', id: parentId + 'focused_tick', cssClass: 'e-focused-tick' },
                { template: menu, align: 'Right', id: parentId + 'file_menu' }
            ],
            clicked: function (args) {
                switch (args.item.id) {
                    case parentId + 'focused_tick':
                        _this.parent.element.classList.remove('e-mobile-focused');
                        _this.parent.renderModule.setSheetPanelSize();
                        break;
                }
            },
            created: function () {
                var menuObj = new Menu({
                    cssClass: 'e-mobile e-file-menu',
                    enableRtl: true,
                    showItemOnClick: true,
                    items: _this.getRibbonMenuItems(),
                    select: _this.fileMenuItemSelect.bind(_this),
                    beforeOpen: function (args) {
                        args.element.parentElement.classList.remove('e-rtl');
                        _this.fileMenuBeforeOpen(args);
                    },
                    beforeClose: _this.fileMenuBeforeClose.bind(_this)
                });
                menuObj.createElement = _this.parent.createElement;
                menuObj.appendTo(menu);
            }
        });
        toolbarObj.createElement = this.parent.createElement;
        toolbarObj.appendTo(toobar);
        this.parent.element.insertBefore(toobar, this.parent.element.firstElementChild);
        this.renderMobileToolbar();
    };
    Ribbon$1.prototype.renderMobileToolbar = function () {
        var _this = this;
        var toolbarPanel = this.parent.createElement('div', { className: 'e-toolbar-panel e-ribbon' });
        var toolbar = this.parent.createElement('div');
        var ddb = this.parent.createElement('button', { attrs: { 'type': 'button' } });
        toolbarPanel.appendChild(toolbar);
        toolbarPanel.appendChild(ddb);
        toolbarPanel.style.display = 'block';
        this.parent.element.appendChild(toolbarPanel);
        var ddbObj = new DropDownButton({
            cssClass: 'e-caret-hide',
            content: this.ribbon.items[0].header.text,
            items: [
                { text: this.ribbon.items[0].header.text },
                { text: this.ribbon.items[1].header.text },
                { text: this.ribbon.items[2].header.text },
                { text: this.ribbon.items[3].header.text }
            ],
            createPopupOnClick: true,
            select: function (args) {
                if (args.item.text !== ddbObj.content) {
                    toolbarObj.element.style.display = 'none';
                    ddbObj.content = args.item.text;
                    ddbObj.dataBind();
                    toolbarObj.items = _this.ribbon.items[ddbObj.items.indexOf(args.item) + 1].content;
                    toolbarObj.width = "calc(100% - " + ddb.getBoundingClientRect().width + "px)";
                    toolbarObj.element.style.display = '';
                    toolbarObj.dataBind();
                    toolbarObj.items[0].text = args.item.text;
                    toolbarObj.dataBind();
                }
            },
            open: function (args) {
                var element = args.element.parentElement;
                var clientRect = element.getBoundingClientRect();
                var offset = calculatePosition(ddbObj.element, 'right', 'bottom');
                element.style.left = offset.left - clientRect.width + "px";
                element.style.top = offset.top - clientRect.height + "px";
                for (var i = 0; i < ddbObj.items.length; i++) {
                    if (ddbObj.content === ddbObj.items[i].text) {
                        args.element.children[i].classList.add('e-selected');
                        break;
                    }
                }
            },
            close: function () { return focus(_this.parent.element); }
        });
        ddbObj.createElement = this.parent.createElement;
        ddbObj.appendTo(ddb);
        var toolbarObj = new Toolbar({
            width: "calc(100% - " + ddb.getBoundingClientRect().width + "px)",
            items: this.ribbon.items[0].content,
            clicked: this.toolbarClicked.bind(this)
        });
        toolbarObj.createElement = this.parent.createElement;
        toolbarObj.appendTo(toolbar);
        toolbarPanel.style.display = '';
    };
    Ribbon$1.prototype.fileMenuBeforeOpen = function (args) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var wrapper;
        var contents = ['.xlsx', '.xls', '.csv', '.pdf'];
        if (args.parentItem.text === l10n.getConstant('SaveAs')) {
            [].slice.call(args.element.children).forEach(function (li, index) {
                wrapper = _this.parent.createElement('div', { innerHTML: li.innerHTML });
                li.innerHTML = '';
                var extension = _this.parent.createElement('span', { className: 'e-extension' });
                extension.innerText = contents[index];
                wrapper.appendChild(extension);
                li.appendChild(wrapper);
            });
        }
        this.parent.trigger('fileMenuBeforeOpen', args);
        args.element.setAttribute('aria-label', l10n.getConstant('File'));
    };
    Ribbon$1.prototype.enableRibbonTabs = function (args) {
        this.ribbon.enableTabs(args.tabs, args.enable);
    };
    Ribbon$1.prototype.fileMenuBeforeClose = function (args) {
        var _this = this;
        this.parent.trigger('fileMenuBeforeClose', args);
        if (args.parentItem && args.event && args.event.keyCode === 37 &&
            args.parentItem.id === this.parent.element.id + "_File") {
            getUpdateUsingRaf(function () {
                var tabItem = _this.ribbon.element.querySelector('.e-tab-header .e-toolbar-item .e-tab-wrap');
                if (tabItem) {
                    focus(tabItem);
                    var menuItem = tabItem.querySelector('.e-menu-item.e-focused');
                    if (menuItem) {
                        menuItem.classList.remove('e-focused');
                    }
                }
            });
        }
    };
    Ribbon$1.prototype.hideFileMenuItems = function (args) {
        this.ribbon.hideMenuItems(args.items, args.hide, args.isUniqueId);
    };
    Ribbon$1.prototype.addFileMenuItems = function (args) {
        this.ribbon.addMenuItems(args.items, args.text, args.insertAfter, args.isUniqueId);
    };
    Ribbon$1.prototype.hideToolbarItems = function (args) {
        this.ribbon.hideToolbarItems(args.tab, args.indexes, args.hide);
    };
    Ribbon$1.prototype.protectSheetHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        if ((sheet.isProtected && sheet.protectSettings.formatCells) || !sheet.isProtected) {
            if (this.parent.allowCellFormatting) {
                this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.enableHomeBtnId, enable: true }]);
                if (sheet.isProtected && sheet.protectSettings.formatCells) {
                    this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.enableHomeBtnId.slice(15, 16), enable: false }]);
                }
            }
            else {
                this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.enableHomeBtnId.slice(3, 14), enable: false }]);
            }
            if (!this.parent.allowWrap) {
                this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.enableHomeBtnId.slice(14, 15), enable: false }]);
            }
            if (!this.parent.allowNumberFormatting) {
                this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.enableHomeBtnId.slice(2, 3), enable: false }]);
            }
            this.parent.notify(setUndoRedo, null);
        }
        else {
            this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.disableHomeBtnId, enable: false }]);
        }
        if ((sheet.isProtected && sheet.protectSettings.insertLink) || !sheet.isProtected) {
            if (!this.parent.allowHyperlink || (sheet.isProtected && sheet.protectSettings.insertLink)) {
                this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.enableInsertBtnId.slice(0, 1), enable: false }]);
            }
            else {
                this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.enableInsertBtnId, enable: true }]);
            }
        }
        else {
            this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.enableInsertBtnId, enable: false }]);
        }
        this.enableToolbarItems([{ tab: l10n.getConstant('Home'), items: args.findBtnId, enable: !sheet.isProtected || sheet.protectSettings.selectCells ||
                    sheet.protectSettings.selectUnLockedCells }]);
        var len = this.ribbon.items[this.ribbon.selectedTab].content.length;
        var i;
        for (i = 0; i < len; i++) {
            if (this.ribbon.items[this.ribbon.selectedTab].content[i].id === this.parent.element.id + '_protectworkbook') {
                break;
            }
        }
        if (sheet.isProtected) {
            if (this.parent.isProtected && this.parent.element.querySelector('#' + this.parent.element.id + '_protectworkbook') &&
                this.parent.element.querySelector('#' + this.parent.element.id + '_protectworkbook')
                    .querySelector('.e-tbar-btn-text').textContent === l10n.getConstant('UnprotectWorkbook')) {
                if (this.ribbon.items[this.ribbon.selectedTab].header.text === l10n.getConstant('Data')) {
                    this.ribbon.items[this.ribbon.selectedTab].content[i].text = l10n.getConstant('UnprotectWorkbook');
                }
            }
            else {
                if (this.ribbon.items[this.ribbon.selectedTab].header.text === l10n.getConstant('Data')) {
                    this.ribbon.items[this.ribbon.selectedTab].content[i].text = l10n.getConstant('ProtectWorkbook');
                }
            }
            this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.imageBtnId, enable: false }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Data'), items: args.dataValidationBtnId, enable: false }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Formulas'), items: args.enableFrmlaBtnId, enable: false }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.chartBtnId, enable: false }]);
        }
        else {
            if (this.parent.isProtected && this.parent.element.querySelector('#' + this.parent.element.id + '_protectworkbook') &&
                this.parent.element.querySelector('#' + this.parent.element.id + '_protectworkbook')
                    .querySelector('.e-tbar-btn-text').textContent === l10n.getConstant('UnprotectWorkbook')) {
                if (this.ribbon.items[this.ribbon.selectedTab].header.text === l10n.getConstant('Data')) {
                    this.ribbon.items[this.ribbon.selectedTab].content[i].text = l10n.getConstant('UnprotectWorkbook');
                }
            }
            else {
                if (this.ribbon.items[this.ribbon.selectedTab].header.text === l10n.getConstant('Data')) {
                    this.ribbon.items[this.ribbon.selectedTab].content[i].text = l10n.getConstant('ProtectWorkbook');
                }
            }
            this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.imageBtnId, enable: this.parent.allowImage }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Data'), items: args.dataValidationBtnId,
                    enable: this.parent.allowDataValidation }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Formulas'), items: args.enableFrmlaBtnId, enable: true }]);
            this.enableToolbarItems([{ tab: l10n.getConstant('Insert'), items: args.chartBtnId, enable: this.parent.allowChart }]);
        }
    };
    Ribbon$1.prototype.updateMergeItem = function (e) {
        if (this.parent.allowMerge && (isMouseMove(e) || e.type === 'touchmove' ||
            (e.shiftKey && (e.type === 'mousedown' || e.type === 'touchend')))) {
            var sheet = this.parent.getActiveSheet();
            if (!sheet.isProtected) {
                var indexes = getRangeIndexes(sheet.selectedRange);
                if (indexes[1] === indexes[3] && indexes[0] === indexes[2]) {
                    this.enableToolbarItems([{ tab: this.parent.serviceLocator.getService(locale).getConstant('Home'),
                            items: [this.parent.element.id + "_merge_cells"], enable: false }]);
                    this.toggleActiveState(false);
                }
                else {
                    this.enableToolbarItems([{ tab: this.parent.serviceLocator.getService(locale).getConstant('Home'),
                            items: [this.parent.element.id + "_merge_cells"], enable: true }]);
                    indexes = getSwapRange(indexes);
                    var cell = getCell(indexes[0], indexes[1], sheet, false, true);
                    if (cell.rowSpan > 1 || cell.colSpan > 1) {
                        this.toggleActiveState((!(cell.rowSpan > 1) || indexes[0] + cell.rowSpan - 1 === indexes[2]) && (!(cell.colSpan > 1) ||
                            indexes[1] + cell.colSpan - 1 === indexes[3]));
                    }
                    else {
                        this.toggleActiveState(false);
                    }
                }
            }
        }
    };
    Ribbon$1.prototype.onPropertyChanged = function (prop) {
        var l10 = this.parent.serviceLocator.getService(locale);
        var id = this.parent.element.id;
        var sheet = this.parent.getActiveSheet();
        switch (prop) {
            case 'allowFreezePane':
                this.ribbon.enableItems(l10.getConstant('View'), [id + "_freezepanes", id + "_freezerows", id + "_freezecolumns"], this.parent.allowFreezePane);
                break;
            case 'showRibbon':
                if (this.parent.showRibbon) {
                    this.initialize(true);
                }
                else if (this.ribbon) {
                    this.destroy();
                }
                break;
            case 'allowImage':
                this.ribbon.enableItems(l10.getConstant('Insert'), [id + "_image"], this.parent.allowImage);
                break;
            case 'allowChart':
                this.ribbon.enableItems(l10.getConstant('Insert'), [id + "_chart"], this.parent.allowChart);
                if (!this.parent.allowChart) {
                    this.removeDesignChart();
                }
                break;
            case 'allowWrap':
            case 'allowCellFormatting':
                this.refreshToggleBtn(getCellIndexes(sheet.activeCell));
                if (!sheet.isProtected || sheet.protectSettings.formatCells) {
                    if (prop === 'allowWrap') {
                        this.ribbon.enableItems(l10.getConstant('Home'), [id + "_wrap"], this.parent.allowWrap);
                    }
                    else {
                        var formatIds = [id + "_font_name", id + "_font_size", id + "_bold", id + "_italic", id + "_line-through",
                            id + "_underline", id + "_font_color_picker", id + "_fill_color_picker", id + "_borders", id + "_merge_cells",
                            id + "_text_align", id + "_vertical_align"];
                        this.enableToolbarItems([{ tab: l10.getConstant('Home'), items: formatIds, enable: this.parent.allowCellFormatting }]);
                    }
                }
                break;
            case 'allowNumberFormatting':
                if (!sheet.isProtected || sheet.protectSettings.formatCells) {
                    this.ribbon.enableItems(l10.getConstant('Home'), [id + "_number_format"], this.parent.allowNumberFormatting);
                }
                break;
            case 'calculationMode':
                this.parent.notify(enableToolbarItems, [{
                        tab: l10.getConstant('Formulas'), items: [this.parent.element.id + '_calc_current_sheet',
                            this.parent.element.id + '_calc_entire_sheets'], enable: this.parent.calculationMode === 'Manual'
                    }]);
                if (this.calcTypeOptions) {
                    this.calcTypeOptions.items[0].iconCss = this.parent.calculationMode === 'Automatic' ? 'e-icons e-selected-icon' : '';
                    this.calcTypeOptions.items[1].iconCss = this.parent.calculationMode === 'Manual' ? 'e-icons e-selected-icon' : '';
                }
                if (this.parent.calculationMode === 'Automatic') {
                    this.parent.calculateNow('Workbook');
                }
                break;
        }
    };
    Ribbon$1.prototype.addEventListener = function () {
        this.parent.on(ribbon, this.ribbonOperation, this);
        this.parent.on(enableToolbarItems, this.enableToolbarItems, this);
        this.parent.on(activeCellChanged, this.refreshRibbonContent, this);
        this.parent.on(updateToggleItem, this.toggleRibbonItems, this);
        this.parent.on(enableFileMenuItems, this.enableFileMenuItems, this);
        this.parent.on(hideRibbonTabs, this.hideRibbonTabs, this);
        this.parent.on(addRibbonTabs, this.addRibbonTabs, this);
        this.parent.on(addToolbarItems, this.addToolbarItems, this);
        this.parent.on(hideFileMenuItems, this.hideFileMenuItems, this);
        this.parent.on(addFileMenuItems, this.addFileMenuItems, this);
        this.parent.on(hideToolbarItems, this.hideToolbarItems, this);
        this.parent.on(enableRibbonTabs, this.enableRibbonTabs, this);
        this.parent.on(protectCellFormat, this.protectSheetHandler, this);
        this.parent.on(selectionComplete, this.updateMergeItem, this);
        this.parent.on(refreshRibbonIcons, this.refreshRibbonContent, this);
        this.parent.on(insertDesignChart, this.insertDesignChart, this);
        this.parent.on(removeDesignChart, this.removeDesignChart, this);
        this.parent.on(unMerge, this.unMerge, this);
    };
    Ribbon$1.prototype.destroy = function () {
        var parentElem = this.parent.element;
        var ribbonEle = this.ribbon ? this.ribbon.element : null;
        var cPickerEle = this.cPickerEle;
        var id = parentElem.id;
        var l10n = this.parent.serviceLocator.getService(locale);
        var ribbonTabObj = getComponent(parentElem.querySelector('.e-tab'), 'tab');
        var curTabIndex;
        if (ribbonTabObj) {
            curTabIndex = ribbonTabObj.selectedItem;
        }
        this.switchRibbonTab(l10n.getConstant('Home'));
        ['bold', 'italic', 'line-through', 'underline', 'cut', 'copy', 'undo', 'redo', 'wrap'].forEach(function (name) {
            destroyComponent(select('#' + (id + "_" + name), parentElem), Button);
        });
        if (this.pasteSplitBtn) {
            this.pasteSplitBtn.destroy();
        }
        this.pasteSplitBtn = null;
        if (this.mergeSplitBtn) {
            this.mergeSplitBtn.destroy();
        }
        this.mergeSplitBtn = null;
        if (this.numFormatDDB) {
            this.numFormatDDB.destroy();
        }
        this.numFormatDDB = null;
        if (this.fontSizeDdb) {
            this.fontSizeDdb.destroy();
        }
        this.fontSizeDdb = null;
        if (this.fontNameDdb) {
            this.fontNameDdb.destroy();
        }
        this.fontNameDdb = null;
        if (this.textAlignDdb) {
            this.textAlignDdb.destroy();
        }
        this.textAlignDdb = null;
        if (this.verticalAlignDdb) {
            this.verticalAlignDdb.destroy();
        }
        this.verticalAlignDdb = null;
        if (this.sortingDdb) {
            this.sortingDdb.destroy();
        }
        this.sortingDdb = null;
        if (this.clearDdb) {
            this.clearDdb.destroy();
        }
        this.clearDdb = null;
        if (this.colorPicker) {
            this.colorPicker.destroy();
        }
        this.colorPicker = null;
        this.destroyComponent(id + "_borders_menu", 'menu');
        if (this.bordersDdb) {
            this.bordersDdb.destroy();
        }
        this.bordersDdb = null;
        if (this.findDdb) {
            this.findDdb.destroy();
        }
        this.findDdb = null;
        this.destroyComponent(id + '_chart_menu', 'menu');
        this.destroyComponent(id + '_chart_type_menu', 'menu');
        this.destroyComponent(id + '_chart-btn', 'dropdown-btn');
        this.destroyComponent(id + '_chart-type-btn', 'dropdown-btn');
        this.destroyComponent(id + "_cf_menu", 'menu');
        if (this.cfDdb) {
            this.cfDdb.destroy();
            if (this.cfDdb.element) {
                this.cfDdb.element.remove();
            }
        }
        this.cfDdb = null;
        this.detachPopupElement(id);
        this.parent.notify('destroyRibbonComponents', null);
        if (curTabIndex) {
            ribbonTabObj.selectedItem = curTabIndex;
            ribbonTabObj.dataBind();
        }
        if (this.addChartDdb) {
            this.addChartDdb.destroy();
            this.addChartDdb = null;
        }
        this.destroyComponent(id + '_chart_theme', 'menu');
        this.destroyComponent(id + '_chart_theme', 'dropdown-btn');
        this.destroyComponent(id + '_chart-type-btn', 'menu');
        this.destroyComponent(id + '_chart-type-btn', 'dropdown-btn');
        if (this.datavalidationDdb) {
            this.datavalidationDdb.destroy();
        }
        this.datavalidationDdb = null;
        if (cPickerEle) {
            detach(cPickerEle);
        }
        var customFormatDlg = this.parent.serviceLocator.getService(dialog);
        if (customFormatDlg.dialogInstance && customFormatDlg.dialogInstance.element.classList.contains('e-custom-format-dlg')) {
            customFormatDlg.hide(true);
        }
        this.cPickerEle = null;
        if (this.border) {
            this.border = '';
        }
        if (this.fontNameIndex) {
            this.fontNameIndex = null;
        }
        if (this.preTabIdx) {
            this.preTabIdx = null;
        }
        if (this.numPopupWidth) {
            this.numPopupWidth = null;
        }
        if (this.ribbon) {
            this.ribbon.destroy();
        }
        if (ribbonEle) {
            detach(ribbonEle);
        }
        this.ribbon = null;
        this.removeEventListener();
        this.parent = null;
    };
    Ribbon$1.prototype.destroyComponent = function (id, moduleName) {
        var ele = typeof id === 'string' ? document.getElementById(id) : id;
        if (ele) {
            if (moduleName !== 'menu' || ele.childElementCount) {
                var compObj = getComponent(ele, moduleName);
                if (compObj) {
                    compObj.destroy();
                    if (moduleName === 'dropdown-btn') {
                        var popup = document.getElementById(ele.id + "-popup");
                        if (popup) {
                            detach(popup);
                        }
                    }
                }
            }
            if (moduleName === 'menu') {
                detach(ele);
            }
        }
    };
    Ribbon$1.prototype.detachPopupElement = function (id) {
        ['_conditionalformatting', '_chart-type-btn', '_chart-btn', '_borders'].forEach(function (selector) {
            var ddbPopup = document.getElementById("" + id + selector + "-popup");
            if (ddbPopup) {
                detach(ddbPopup);
            }
        });
    };
    Ribbon$1.prototype.switchRibbonTab = function (tabInnerText) {
        var tabId;
        var tabTextElements = this.parent.element.querySelectorAll('.e-tab-text');
        for (var i = 0; i < tabTextElements.length; i++) {
            var element = tabTextElements[i];
            if (element.textContent.toLowerCase() === tabInnerText.toLowerCase()) {
                var parentElement = element.closest('.e-toolbar-item');
                if (parentElement) {
                    tabId = parentElement.getAttribute('data-id');
                    break;
                }
            }
        }
        var tabObj = getComponent(this.parent.element.querySelector('.e-tab'), 'tab');
        if (tabObj && !isNullOrUndefined(tabId)) {
            tabObj.selectedItem = tabObj.getItemIndex(tabId);
            tabObj.dataBind();
        }
    };
    Ribbon$1.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(ribbon, this.ribbonOperation);
            this.parent.off(enableToolbarItems, this.enableToolbarItems);
            this.parent.off(activeCellChanged, this.refreshRibbonContent);
            this.parent.off(updateToggleItem, this.toggleRibbonItems);
            this.parent.off(enableFileMenuItems, this.enableFileMenuItems);
            this.parent.off(hideRibbonTabs, this.hideRibbonTabs);
            this.parent.off(addRibbonTabs, this.addRibbonTabs);
            this.parent.off(addToolbarItems, this.addToolbarItems);
            this.parent.off(hideFileMenuItems, this.hideFileMenuItems);
            this.parent.off(addFileMenuItems, this.addFileMenuItems);
            this.parent.off(hideToolbarItems, this.hideToolbarItems);
            this.parent.off(enableRibbonTabs, this.enableRibbonTabs);
            this.parent.off(protectCellFormat, this.protectSheetHandler);
            this.parent.off(selectionComplete, this.updateMergeItem);
            this.parent.off(refreshRibbonIcons, this.refreshRibbonContent);
            this.parent.off(insertDesignChart, this.insertDesignChart);
            this.parent.off(removeDesignChart, this.removeDesignChart);
            this.parent.off(unMerge, this.unMerge);
        }
    };
    return Ribbon$1;
}());

/**
 * Represents Formula bar for Spreadsheet.
 */
var FormulaBar = /** @class */ (function () {
    function FormulaBar(parent) {
        this.categoryCollection = [];
        this.formulaCollection = [];
        this.isGoto = false;
        this.parent = parent;
        this.addEventListener();
    }
    FormulaBar.prototype.getModuleName = function () {
        return 'formulaBar';
    };
    FormulaBar.prototype.createFormulaBar = function (args) {
        var _this = this;
        if (!this.parent.showFormulaBar && this.insertFnRipple) {
            this.destroy();
            return;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var id = this.parent.element.id;
        var fBarWrapper = this.parent.createElement('div', { className: 'e-formula-bar-panel' });
        if (!this.parent.isMobileView()) {
            var nameBox = this.parent.createElement('input', { id: id + '_name_box', attrs: { type: 'text' } });
            fBarWrapper.appendChild(nameBox);
            this.comboBoxInstance = new ComboBox({
                value: 'A1',
                cssClass: 'e-name-box',
                width: '',
                noRecordsTemplate: initializeCSPTemplate(function () { return ''; }),
                fields: { text: 'name', value: 'refersTo' },
                beforeOpen: this.nameBoxBeforeOpen.bind(this),
                blur: this.nameBoxBlur.bind(this),
                select: this.nameBoxSelect.bind(this),
                open: function () {
                    if (_this.isDevice) {
                        window.browserDetails.isDevice = true;
                    }
                },
                change: function () {
                    /** */
                }
            });
            this.comboBoxInstance.createElement = this.parent.createElement;
            this.comboBoxInstance.appendTo(nameBox);
            this.comboBoxInstance.element.parentElement.title = l10n.getConstant('NameBox');
        }
        var insertFnBtn = fBarWrapper.appendChild(this.parent.createElement('button', {
            className: 'e-btn e-css e-flat e-icon-btn e-insert-function', attrs: { 'title': l10n.getConstant('InsertFunction'), 'type': 'button' }
        }));
        insertFnBtn.appendChild(this.parent.createElement('span', { className: 'e-btn-icon e-icons' }));
        this.insertFnRipple = rippleEffect(fBarWrapper, { selector: '.e-insert-function' });
        fBarWrapper.appendChild(this.parent.createElement('div', { className: 'e-separator' }));
        var formulaBarLocale = l10n.getConstant('FormulaBar');
        var textarea = fBarWrapper.appendChild(this.parent.createElement('textarea', {
            className: 'e-formula-bar e-css', id: id + '_formula_input',
            attrs: { 'title': formulaBarLocale, 'aria-label': formulaBarLocale, 'spellcheck': 'false' }
        }));
        textarea.rows = 1;
        if (this.parent.isMobileView()) {
            textarea.placeholder = l10n.getConstant('MobileFormulaBarPlaceHolder');
            EventHandler.add(textarea, 'focus', this.textAreaFocusIn, this);
            EventHandler.add(textarea, 'blur', this.textAreaFocusOut, this);
        }
        else {
            var text = l10n.getConstant('ExpandFormulaBar');
            fBarWrapper.appendChild(this.parent.createElement('span', { className: 'e-drop-icon e-icons', attrs: { 'title': text, 'role': 'button',
                    'tabindex': '-1', 'aria-label': text } }));
        }
        if (args && args.uiUpdate) {
            this.parent.element.insertBefore(fBarWrapper, document.getElementById(id + '_sheet_panel'));
        }
        else {
            this.parent.element.appendChild(fBarWrapper);
        }
    };
    FormulaBar.prototype.textAreaFocusIn = function () {
        var formulaPanel = this.parent.element.querySelector('.e-formula-bar-panel');
        var tickBtn = this.parent.createElement('button', { className: 'e-btn e-css e-flat e-icon-btn e-formula-submit', attrs: { 'type': 'button' } });
        tickBtn.appendChild(this.parent.createElement('span', { className: 'e-btn-icon e-icons e-tick-icon' }));
        formulaPanel.classList.add('e-focused');
        formulaPanel.appendChild(tickBtn);
    };
    FormulaBar.prototype.textAreaFocusOut = function () {
        var formulaPanel = this.parent.element.querySelector('.e-formula-bar-panel');
        formulaPanel.classList.remove('e-focused');
        detach(formulaPanel.querySelector('.e-formula-submit'));
    };
    FormulaBar.prototype.keyDownHandler = function (e) {
        var trgtElem = e.target;
        if (this.parent.isEdit && (!this.parent.getActiveSheet().isProtected || (trgtElem.classList.contains('e-formula-bar') && !trgtElem.disabled))) {
            if ((checkIsFormula(trgtElem.value) || (trgtElem.validity && trgtElem.value.toString().indexOf('=') === 0)) &&
                (e.keyCode === 16 || e.keyCode === 17)) {
                return;
            }
            if (trgtElem.classList.contains('e-formula-bar') && (!e.shiftKey || (e.shiftKey && !isNavigationKey(e.keyCode)))) {
                this.parent.notify(editOperation, { action: 'refreshEditor', value: trgtElem.value, refreshEditorElem: true });
            }
        }
    };
    FormulaBar.prototype.keyUpHandler = function (e) {
        if (this.parent.isEdit) {
            var trgtElem = e.target;
            if (trgtElem.classList.contains('e-formula-bar')) {
                var eventArg = { action: 'getCurrentEditValue', editedValue: '' };
                this.parent.notify(editOperation, eventArg);
                if (eventArg.editedValue !== trgtElem.value && e.keyCode !== 16 && e.keyCode !== 17 &&
                    (!e.shiftKey || (e.shiftKey && !isNavigationKey(e.keyCode)))) {
                    this.parent.notify(editOperation, { action: 'refreshEditor', value: trgtElem.value, refreshEditorElem: true });
                }
            }
        }
    };
    FormulaBar.prototype.nameBoxBeforeOpen = function (args) {
        if (this.comboBoxInstance.element.classList.contains('e-name-editing')) {
            args.cancel = true;
        }
        else {
            this.comboBoxInstance.element.select();
            this.isDevice = window.browserDetails.isDevice;
            if (this.isDevice) {
                window.browserDetails.isDevice = false;
            }
        }
    };
    FormulaBar.prototype.nameBoxBlur = function () {
        if (this.comboBoxInstance.element.classList.contains('e-name-editing')) {
            this.comboBoxInstance.element.classList.remove('e-name-editing');
            this.updateValueAfterMouseUp();
        }
    };
    FormulaBar.prototype.nameBoxSelect = function (args) {
        if (args.isInteracted && (!args.e || args.e.type !== 'keydown' || (args.e.keyCode !== 40 &&
            args.e.keyCode !== 38))) {
            var refersTo = args.itemData.refersTo.substr(1);
            var sheetIdx = getSheetIndex(this.parent, getSheetNameFromAddress(refersTo));
            if (sheetIdx === undefined) {
                return;
            }
            var range = getRangeFromAddress(refersTo);
            var sheet = getSheet(this.parent, sheetIdx);
            var left = void 0;
            var right = void 0;
            if (range.indexOf(':') === -1) {
                left = right = range.replace('$', '');
            }
            else {
                var colIndex = range.indexOf(':');
                left = range.substr(0, colIndex).replace('$', '');
                right = range.substr(colIndex + 1, range.length).replace('$', '');
            }
            if (right.match(/\D/g) && !right.match(/[0-9]/g) && left.match(/\D/g) && !left.match(/[0-9]/g)) {
                left = left + '1';
                right = right + sheet.rowCount;
                range = left + ':' + right;
            }
            else if (!right.match(/\D/g) && right.match(/[0-9]/g) && !left.match(/\D/g) && left.match(/[0-9]/g)) {
                left = getCellAddress(parseInt(left, 10) - 1, 0);
                right = getCellAddress(parseInt(right, 10) - 1, sheet.colCount - 1);
                range = left + ':' + right;
            }
            if (sheetIdx === this.parent.activeSheetIndex) {
                if (!this.parent.isEdit) {
                    this.parent.selectRange(range);
                }
                this.parent.notify(addressHandle, { range: range, isSelect: false, isMouseDown: false, isNameBoxSelect: true });
                focus(this.parent.element);
            }
            else {
                updateSelectedRange(this.parent, range, sheet);
                this.parent.activeSheetIndex = sheetIdx;
                this.parent.notify(addressHandle, { range: range, isSelect: false, isMouseDown: false, isNameBoxSelect: true });
                focus(this.parent.element);
            }
        }
    };
    FormulaBar.prototype.formulaBarUpdateHandler = function (e) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var range = sheet.selectedRange.split(':');
        var address;
        var editArgs = { action: 'getElement', element: null };
        this.parent.notify(editOperation, editArgs);
        var formulaBar = this.parent.element.querySelector('.e-formula-bar');
        if (e.type === 'mousemove' || e.type === 'pointermove') {
            var indexes1 = getRangeIndexes(range[0]);
            var indexes2 = getRangeIndexes(range[1]);
            address = Math.abs(indexes1[0] - indexes2[0]) + 1 + "R x " + (Math.abs(indexes1[1] - indexes2[1]) + 1) + "C";
            if (this.parent.isEdit) {
                if (e.target && !e.target.classList.contains('e-spreadsheet-edit')) {
                    this.parent.notify(editValue, {});
                }
                else if (editArgs.element) {
                    formulaBar.value = editArgs.element.textContent;
                }
            }
        }
        else {
            address = range[0];
            var cellAddr = getSheetName(this.parent) + "!" + address;
            getData(this.parent, cellAddr, false, true).then(function (values) {
                if (!_this.parent) {
                    return;
                }
                values.forEach(function (cell) {
                    var value = _this.getFormulaBarValue(cell);
                    var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
                    _this.parent.notify(editOperation, eventArgs);
                    var formulaInp = document.getElementById(_this.parent.element.id + '_formula_input');
                    var previousVal = formulaInp.value;
                    formulaInp.value = value;
                    if (!eventArgs.editedValue || !checkIsFormula(eventArgs.editedValue.toString(), true)) {
                        _this.parent.notify(editOperation, { action: 'refreshEditor', value: value, refreshEditorElem: true });
                    }
                    if (_this.parent.isEdit) {
                        if (e.target && !e.target.classList.contains('e-spreadsheet-edit')) {
                            _this.parent.notify(editValue, { isMouseDown: isMouseDown(e), formulaBarVal: previousVal });
                        }
                        else if (editArgs.element) {
                            formulaBar.value = editArgs.element.textContent;
                        }
                    }
                });
            });
        }
        this.updateComboBoxValue(address);
    };
    FormulaBar.prototype.getFormulaBarValue = function (cell) {
        var value = '';
        if (cell) {
            if (cell.formula) {
                value = cell.formula;
            }
            else if (!isNullOrUndefined(cell.value) && cell.value !== '') {
                var option = {};
                var type = cell.format && isCustomDateTime(cell.format, true, option, true) && option.type;
                if (type === 'date' || type === 'time' || type === 'datetime') {
                    var dateVal = intToDate(Number(cell.value));
                    if (dateVal && dateVal.toString() !== 'Invalid Date' && dateVal.getFullYear() >= 1900) {
                        var intl = new Internationalization();
                        var time = getFormatFromType('Time');
                        if (time === 'h:mm:ss AM/PM') {
                            time = 'h:mm:ss a';
                        }
                        var format = cell.format.toLowerCase();
                        // isCustomDateTime returns as type 'time' for 'm', 'mm' and 'mmm' format, so we converting as 'date' type.
                        if (type === 'time' && format.includes('m') && !format.includes(':m') && !format.includes('m:') &&
                            !format.includes('[m') && !format.includes('am')) {
                            type = 'date';
                        }
                        var valArr = cell.value.toString().split('.');
                        var isDateTimeVal = valArr.length === 2;
                        var timeVal = isDateTimeVal ? intToDate(parseFloat((valArr[0] + 1) + '.' + valArr[1]) ||
                            Number(cell.value)) : dateVal;
                        if (type === 'date') {
                            var dateObj = { type: 'date' };
                            dateObj.skeleton = 'yMd';
                            value = intl.formatDate(dateVal, dateObj);
                            if (isDateTimeVal) {
                                value += ' ' + intl.formatDate(timeVal, { type: 'time', skeleton: 'medium', format: time });
                            }
                        }
                        else {
                            if (Number(cell.value) >= 1 || type === 'datetime') {
                                value = intl.formatDate(dateVal, { type: 'date', skeleton: 'yMd' }) + ' ';
                            }
                            value += intl.formatDate(timeVal, { type: 'time', skeleton: 'medium', format: time });
                        }
                    }
                }
                else if (cell.format && cell.format.includes('%') && isNumber(cell.value)) {
                    value = this.parent.getDisplayText(cell);
                    if (!value.includes('%')) {
                        value = '';
                    }
                }
                if (!value) {
                    value = cell.value.toString();
                    if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {
                        value = value.toUpperCase();
                    }
                    else if (this.parent.locale !== 'en-US') {
                        var decimalSep = getNumericObject(this.parent.locale).decimal;
                        if (decimalSep !== '.' && isNumber(value) && value.includes('.')) {
                            value = value.replace('.', decimalSep);
                        }
                    }
                }
            }
            else if (cell.hyperlink) {
                value = typeof cell.hyperlink === 'string' ? cell.hyperlink : (cell.hyperlink.address || '');
            }
        }
        return value;
    };
    FormulaBar.prototype.updateValueAfterMouseUp = function () {
        this.updateComboBoxValue(this.parent.getActiveSheet().selectedRange.split(':')[0]);
    };
    FormulaBar.prototype.updateComboBoxValue = function (value) {
        var sheet = this.parent.getActiveSheet();
        var range = getSheetName(this.parent) + '!' + sheet.selectedRange;
        var eventArgs = {
            action: 'getNameFromRange', range: range, definedName: null
        };
        this.parent.notify(formulaOperation, eventArgs);
        if (eventArgs.definedName) {
            value = eventArgs.definedName.name;
        }
        if (!this.parent.isMobileView()) {
            if (this.comboBoxInstance.text === value) {
                return;
            }
            this.comboBoxInstance.text = value;
            this.comboBoxInstance.dataBind();
        }
    };
    FormulaBar.prototype.disabletextarea = function () {
        var element = this.getFormulaBar();
        if (this.parent.getActiveSheet().isProtected && !this.parent.isEdit) {
            element.disabled = true;
        }
        else {
            element.disabled = false;
        }
    };
    FormulaBar.prototype.updateNameBoxValue = function (definedName, isRemove) {
        var id = this.parent.element.id;
        var comboBoxInstance = getComponent(this.parent.element.querySelector("#" + id + "_name_box"), 'combobox');
        var activeSheet = this.parent.getActiveSheet();
        if (isRemove) {
            if (comboBoxInstance.text === definedName.name) {
                comboBoxInstance.value = activeSheet.activeCell;
                comboBoxInstance.dataBind();
            }
        }
        else {
            var refRangeArr = definedName.refersTo.split('!');
            if (refRangeArr.length === 2 && definedName.refersTo.startsWith('=')) {
                var refSheetName = refRangeArr[0].split('=')[1].replace(/'/g, '');
                var referredRange = definedName.refersTo.split('!')[1];
                if (refSheetName === activeSheet.name && referredRange === activeSheet.selectedRange) {
                    comboBoxInstance.value = definedName.name;
                    comboBoxInstance.dataBind();
                }
            }
        }
    };
    FormulaBar.prototype.formulaBarScrollEdit = function () {
        var index = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
        var viewportIndexes = getCellIndexes(this.parent.getActiveSheet().topLeftCell);
        if (index[0] < viewportIndexes[0]) {
            this.parent.goTo(this.parent.getActiveSheet().selectedRange);
            this.isGoto = true;
        }
        this.parent.notify(editOperation, { action: 'startEdit', refreshCurPos: false });
    };
    FormulaBar.prototype.formulaBarClickHandler = function (e) {
        var target = e.target;
        var sheet = this.parent.getActiveSheet();
        var isSheetProtected = sheet.isProtected;
        var range = getCellIndexes(sheet.activeCell);
        var cell = getCell(range[0], range[1], sheet);
        var isCellLocked = isLocked(cell, getColumn(sheet, range[1]));
        if (target.classList.contains('e-drop-icon') && target.parentElement.classList.contains('e-formula-bar-panel')) {
            this.toggleFormulaBar(target);
        }
        else if (target.classList.contains('e-formula-bar')) {
            if (isReadOnly(cell, getColumn(sheet, range[1]), getRow(sheet, range[0]))) {
                this.parent.notify(readonlyAlert, null);
                return;
            }
            if ((!this.parent.isEdit && (!isSheetProtected || (isSheetProtected && !isCellLocked))) ||
                (this.parent.isEdit && isSheetProtected && !target.disabled)) {
                this.formulaBarScrollEdit();
            }
            else if (isSheetProtected && isCellLocked) {
                this.parent.notify(editAlert, null);
            }
        }
        else if (target.parentElement && target.parentElement.classList.contains('e-name-box')) {
            if (target.classList.contains('e-ddl-icon')) {
                var eventArgs = { action: 'getNames', names: [] };
                this.parent.notify(formulaOperation, eventArgs);
                if (this.comboBoxInstance.dataSource.length !== eventArgs.names.length ||
                    this.comboBoxInstance.value === this.comboBoxInstance.text) {
                    var searchText_1 = this.comboBoxInstance.text;
                    this.comboBoxInstance.dataSource = eventArgs.names;
                    var definedName = eventArgs.names.find(function (name) { return name.name === searchText_1; });
                    this.comboBoxInstance.value = definedName ? definedName.refersTo : this.comboBoxInstance.value;
                    this.comboBoxInstance.dataBind();
                }
            }
            else {
                this.comboBoxInstance.element.classList.add('e-name-editing');
                this.comboBoxInstance.element.select();
            }
        }
        if (!isNullOrUndefined(target.offsetParent) && ((target.offsetParent.classList.contains('e-insert-function')) ||
            (target.classList.contains('e-insert-function')) || (this.parent.element.id + '_insert_function' === target.offsetParent.id)
            || (this.parent.element.id + '_insert_function' === target.id) ||
            target.parentElement.classList.contains('e-insert-function')
            || (this.parent.element.id + '_insert_function' === target.parentElement.id))) {
            this.renderInsertDlg();
        }
    };
    FormulaBar.prototype.renderInsertDlg = function () {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var activeCell = getCellIndexes(sheet.activeCell);
        if (sheet.isProtected) {
            if (isLocked(getCell(activeCell[0], activeCell[1], sheet), getColumn(sheet, activeCell[1])) && !this.parent.isEdit) {
                this.parent.notify(editAlert, null);
                return;
            }
        }
        var cell = getCell(activeCell[0], activeCell[1], sheet);
        if (isReadOnly(cell, getColumn(sheet, activeCell[1]), getRow(sheet, activeCell[0]))) {
            this.parent.notify(readonlyAlert, null);
            return;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var isOpen = !this.parent.isEdit;
        var args = { action: 'getCurrentEditValue', editedValue: '' };
        if (!isOpen) {
            var eventArgs = { action: 'isFormulaEditing', isFormulaEdit: false };
            this.parent.notify(formulaOperation, eventArgs);
            isOpen = eventArgs.isFormulaEdit;
            this.parent.notify(editOperation, args);
        }
        if (isOpen || args.editedValue === '') {
            if (!this.parent.element.querySelector('.e-spreadsheet-function-dlg')) {
                if (args.editedValue === '') {
                    this.parent.notify(editOperation, { action: 'refreshEditor', value: '=' });
                }
                var formulaDescription = this.parent.createElement('div', { className: 'e-formula-description', id: this.parent.element.id + '_description_content' });
                var categoryContent = this.parent.createElement('div', { className: 'e-category-content', id: this.parent.element.id + '_category_content' });
                categoryContent.innerText = l10n.getConstant('PickACategory');
                var dropDownElement = this.parent.createElement('input', { className: 'e-formula-category', id: this.parent.element.id + '_formula_category' });
                var listViewElement = this.parent.createElement('div', { className: 'e-formula-list', id: this.parent.element.id + '_formula_list' });
                var descriptionContent = this.parent.createElement('div', { className: 'e-description-content' });
                descriptionContent.innerText = l10n.getConstant('Description');
                var headerContent = this.parent.createElement('div', { className: 'e-header-content' });
                headerContent.innerText = l10n.getConstant('InsertFunction');
                var categoryArgs = { action: 'getFormulaCategory', categoryCollection: [] };
                this.parent.notify(workbookFormulaOperation, categoryArgs);
                this.categoryCollection = categoryArgs.categoryCollection;
                var categoryPopupOpen_1;
                this.categoryList = new DropDownList({
                    dataSource: this.categoryCollection, cssClass: 'e-ss-formula-category', index: 0, width: '285px', popupHeight: '210px',
                    select: this.dropDownSelect.bind(this),
                    open: function () { return categoryPopupOpen_1 = true; },
                    close: function () { return categoryPopupOpen_1 = false; }
                });
                var listArgs = { action: 'getLibraryFormulas', formulaCollection: [] };
                this.parent.notify(workbookFormulaOperation, listArgs);
                this.formulaCollection = listArgs.formulaCollection;
                this.formulaList = new ListView({
                    dataSource: this.formulaCollection.sort(),
                    actionComplete: this.updateFormulaList.bind(this),
                    select: this.listSelected.bind(this), width: '285px', height: '200px'
                });
                var isCancelled_1;
                this.dialog = this.parent.serviceLocator.getService(dialog);
                this.dialog.show({
                    header: headerContent.outerHTML,
                    content: categoryContent.outerHTML + dropDownElement.outerHTML + listViewElement.outerHTML +
                        descriptionContent.outerHTML + formulaDescription.outerHTML,
                    width: '320px', height: '485px', cssClass: 'e-spreadsheet-function-dlg',
                    showCloseIcon: true, isModal: true,
                    beforeOpen: function (args) {
                        var dlgArgs = {
                            dialogName: 'InsertFunctionDialog', element: args.element, target: args.target, cancel: args.cancel
                        };
                        _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                        if (dlgArgs.cancel) {
                            _this.dialog.dialogInstance.setProperties({ beforeClose: undefined }, true);
                            isCancelled_1 = args.cancel = true;
                        }
                        else {
                            focus(_this.parent.element);
                        }
                    },
                    open: this.dialogOpen.bind(this), beforeClose: this.dialogBeforeClose.bind(this), close: this.dialogClose.bind(this),
                    buttons: [
                        {
                            click: function (event) {
                                if (event && event.keyCode === 13 && !categoryPopupOpen_1) {
                                    return;
                                }
                                _this.selectFormula();
                            },
                            buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true }
                        }
                    ]
                });
                if (isCancelled_1) {
                    this.categoryList = this.formulaList = null;
                }
                else {
                    this.categoryList.appendTo('#' + this.parent.element.id + '_formula_category');
                    this.formulaList.appendTo('#' + this.parent.element.id + '_formula_list');
                    EventHandler.add(this.formulaList.element, 'dblclick', this.formulaClickHandler, this);
                }
            }
        }
    };
    FormulaBar.prototype.toggleFormulaBar = function (target) {
        var parent = target.parentElement;
        var l10n = this.parent.serviceLocator.getService(locale);
        if (parent.classList.contains('e-expanded')) {
            parent.classList.remove('e-expanded');
            document.getElementById(this.parent.element.id + '_formula_input').rows = 1;
            target.title = l10n.getConstant('ExpandFormulaBar');
            target.setAttribute('aria-label', l10n.getConstant('CollapseFormulaBar'));
        }
        else {
            parent.classList.add('e-expanded');
            document.getElementById(this.parent.element.id + '_formula_input').rows = 3;
            target.title = l10n.getConstant('CollapseFormulaBar');
            target.setAttribute('aria-label', l10n.getConstant('ExpandFormulaBar'));
        }
        this.parent.setPanelSize();
    };
    FormulaBar.prototype.dialogOpen = function () {
        var _this = this;
        getUpdateUsingRaf(function () {
            var okBtn = _this.dialog.dialogInstance.element.querySelector('.e-footer-content .e-primary');
            var l10n = _this.parent.serviceLocator.getService(locale);
            okBtn.setAttribute('aria-label', l10n.getConstant('InsertFunction') + ' ' + l10n.getConstant('Ok'));
            if (_this.categoryList) {
                focus(_this.categoryList.element);
            }
        });
    };
    FormulaBar.prototype.dialogClose = function () {
        var args = { action: 'getCurrentEditValue', editedValue: '' };
        this.parent.notify(editOperation, args);
        if (args.editedValue.toString().trim() === '=') {
            this.parent.notify(editOperation, { action: 'refreshEditor', value: '' });
        }
    };
    FormulaBar.prototype.dialogBeforeClose = function () {
        EventHandler.remove(this.formulaList.element, 'dblclick', this.formulaClickHandler);
        var dialogContentEle = document.getElementsByClassName('e-spreadsheet-function-dlg')[0].
            querySelector('.e-dlg-content');
        dialogContentEle.parentNode.removeChild(dialogContentEle);
        this.categoryList.destroy();
        this.categoryList = null;
        this.formulaList.destroy();
        this.formulaList = null;
    };
    FormulaBar.prototype.selectFormula = function () {
        var formulaText = this.formulaList.getSelectedItems().text;
        var sheet = getSheet(this.parent, this.parent.activeSheetIndex);
        if (this.parent.isEdit) {
            this.parent.notify(editOperation, {
                action: 'refreshEditor', value: formulaText + '(', refreshFormulaBar: true,
                refreshEditorElem: true, isAppend: true
            });
        }
        else {
            this.parent.notify(editOperation, { action: 'startEdit', value: '=' + formulaText + '(', address: sheet.activeCell });
            this.parent.notify(formulaBarOperation, { action: 'refreshFormulabar', value: '=' + formulaText + '(' });
        }
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.dialog.dialogInstance.storeActiveElement = document.getElementById(this.parent.element.id + '_edit');
        this.dialog.hide();
    };
    FormulaBar.prototype.listSelected = function (args) {
        this.updateFormulaDescription();
        if (args.isInteracted && args.item) {
            args.item.focus();
        }
    };
    FormulaBar.prototype.updateFormulaList = function () {
        this.activeListFormula();
        this.updateFormulaDescription();
    };
    FormulaBar.prototype.dropDownSelect = function (args) {
        this.formulaCollection = [];
        var listArgs = {
            action: 'getLibraryFormulas',
            formulaCollection: []
        };
        if (args.item.textContent === 'All') {
            this.parent.notify(workbookFormulaOperation, listArgs);
            this.formulaCollection = listArgs.formulaCollection;
        }
        else {
            var category = args.item.textContent;
            var selectArgs = {
                action: 'dropDownSelectFormulas',
                formulaCollection: [],
                selectCategory: category
            };
            this.parent.notify(workbookFormulaOperation, selectArgs);
            this.formulaCollection = selectArgs.formulaCollection;
        }
        this.formulaList.dataSource = this.formulaCollection.sort();
    };
    FormulaBar.prototype.activeListFormula = function () {
        var acListEle = document.getElementById(this.parent.element.id + '_formula_list');
        var firstElement = acListEle.children[0].children[0].firstElementChild;
        this.formulaList.selectItem(firstElement);
    };
    FormulaBar.prototype.updateFormulaDescription = function () {
        var selectedFormula = this.formulaList.getSelectedItems().text;
        var descriptionArgs = {
            action: 'getFormulaDescription',
            description: '',
            selectedList: selectedFormula,
            isCustom: false
        };
        this.parent.notify(workbookFormulaOperation, descriptionArgs);
        var okBtn = this.dialog.dialogInstance.element.querySelector('.e-footer-content .e-primary');
        if (okBtn.hasAttribute('aria-label')) {
            okBtn.removeAttribute('aria-label');
        }
        var descriptionArea = document.getElementById(this.parent.element.id + '_description_content');
        selectedFormula = (selectedFormula === 'AND') ? 'CalculateAND' : (selectedFormula === 'OR') ? 'CalculateOR' : selectedFormula;
        descriptionArea.textContent = descriptionArgs.isCustom ? descriptionArgs.description :
            this.parent.serviceLocator.getService(locale).getConstant(selectedFormula);
    };
    FormulaBar.prototype.formulaClickHandler = function (args) {
        var trgtElem = args.target;
        var sheet = getSheet(this.parent, this.parent.activeSheetIndex);
        if (trgtElem.offsetParent.classList.contains('e-text-content') || trgtElem.classList.contains('e-list-item')) {
            if (this.parent.isEdit) {
                this.parent.notify(editOperation, {
                    action: 'refreshEditor', value: trgtElem.innerText + '(', refreshFormulaBar: true,
                    refreshEditorElem: true, isAppend: true
                });
            }
            else {
                this.parent.notify(editOperation, { action: 'startEdit', value: '=' + trgtElem.innerText + '(', address: sheet.activeCell });
                this.parent.notify(formulaBarOperation, { action: 'refreshFormulabar', value: '=' + trgtElem.innerText + '(' });
            }
            this.dialog.hide();
        }
    };
    FormulaBar.prototype.addEventListener = function () {
        this.parent.on(formulaBar, this.createFormulaBar, this);
        this.parent.on(click, this.formulaBarClickHandler, this);
        this.parent.on(keyDown, this.keyDownHandler, this);
        this.parent.on(renderInsertDlg, this.renderInsertDlg, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
        this.parent.on(selectionComplete, this.formulaBarUpdateHandler, this);
        this.parent.on(mouseUpAfterSelection, this.updateValueAfterMouseUp, this);
        this.parent.on(formulaBarOperation, this.editOperationHandler, this);
        this.parent.on(enableFormulaInput, this.disabletextarea, this);
        this.parent.on(isFormulaBarEdit, this.isFormulaBarEdit, this);
    };
    FormulaBar.prototype.destroy = function () {
        this.removeEventListener();
        if (this.comboBoxInstance) {
            this.comboBoxInstance.destroy();
        }
        this.comboBoxInstance = null;
        this.categoryCollection = null;
        this.formulaCollection = null;
        this.dialog = null;
        this.isGoto = null;
        if (this.insertFnRipple) {
            this.insertFnRipple();
        }
        this.insertFnRipple = null;
        var formulaPanel = this.parent.element.querySelector('.e-formula-bar-panel');
        if (formulaPanel) {
            removeAllChildren(formulaPanel);
            detach(formulaPanel);
        }
        this.parent = null;
    };
    FormulaBar.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(formulaBar, this.createFormulaBar);
            this.parent.off(click, this.formulaBarClickHandler);
            this.parent.off(renderInsertDlg, this.renderInsertDlg);
            this.parent.off(keyDown, this.keyDownHandler);
            this.parent.off(keyUp, this.keyUpHandler);
            this.parent.off(selectionComplete, this.formulaBarUpdateHandler);
            this.parent.off(mouseUpAfterSelection, this.updateValueAfterMouseUp);
            this.parent.off(formulaBarOperation, this.editOperationHandler);
            this.parent.off(enableFormulaInput, this.disabletextarea);
            this.parent.off(isFormulaBarEdit, this.isFormulaBarEdit);
        }
    };
    FormulaBar.prototype.editOperationHandler = function (args) {
        switch (args.action) {
            case 'refreshFormulabar':
                if (args.cell) {
                    this.getFormulaBar().value = this.getFormulaBarValue(args.cell);
                }
                else {
                    this.getFormulaBar().value = isUndefined$1(args.value) ? '' : args.value;
                }
                break;
            case 'setNameBoxValue':
                this.updateNameBoxValue(args.definedName, args.isRemove);
                break;
            case 'getElement':
                args.element = this.getFormulaBar();
                break;
        }
    };
    FormulaBar.prototype.isFormulaBarEdit = function (args) {
        var edit = this.parent.isEdit;
        if (edit && this.isGoto) {
            args.isEdit = true;
        }
        else {
            args.isEdit = false;
        }
    };
    FormulaBar.prototype.getFormulaBar = function () {
        return select('#' + this.parent.element.id + '_formula_input', this.parent.element);
    };
    return FormulaBar;
}());

/**
 * @hidden
 * The `Formula` module is used to handle the formulas and its functionalities in Spreadsheet.
 */
var Formula = /** @class */ (function () {
    /**
     * Constructor for formula module in Spreadsheet.
     *
     * @private
     * @param {Spreadsheet} parent - Constructor for formula module in Spreadsheet.
     */
    function Formula(parent) {
        this.isFormulaBar = false;
        this.isFormula = false;
        this.isPopupOpened = false;
        this.isPreventClose = false;
        this.isSubFormula = false;
        this.parent = parent;
        this.addEventListener();
        //Spreadsheet.Inject(WorkbookFormula);
    }
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    Formula.prototype.getModuleName = function () {
        return 'formula';
    };
    /**
     * To destroy the formula module.
     *
     * @returns {void} - To destroy the formula module.
     * @hidden
     */
    Formula.prototype.destroy = function () {
        this.removeEventListener();
        if (this.autocompleteInstance) {
            this.autocompleteInstance.destroy();
            if (this.autocompleteInstance.element) {
                this.autocompleteInstance.element.remove();
                this.autocompleteInstance.element = null;
            }
        }
        this.autocompleteInstance = null;
        if (this.acInputElement) {
            this.acInputElement.remove();
            this.acInputElement = null;
        }
        this.parent = null;
    };
    Formula.prototype.addEventListener = function () {
        this.parent.on(formulaOperation, this.performFormulaOperation, this);
        this.parent.on(keyUp, this.keyUpHandler, this);
        this.parent.on(keyDown, this.keyDownHandler, this);
        this.parent.on(click, this.formulaClick, this);
        this.parent.on(refreshFormulaDatasource, this.refreshFormulaDatasource, this);
    };
    Formula.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(formulaOperation, this.performFormulaOperation);
            this.parent.off(keyUp, this.keyUpHandler);
            this.parent.off(keyDown, this.keyDownHandler);
            this.parent.off(click, this.formulaClick);
            this.parent.off(refreshFormulaDatasource, this.refreshFormulaDatasource);
        }
    };
    Formula.prototype.performFormulaOperation = function (args) {
        var _this = this;
        var action = args.action;
        var l10n = this.parent.serviceLocator.getService(locale);
        switch (action) {
            case 'renderAutoComplete':
                this.renderAutoComplete();
                break;
            case 'endEdit':
                this.endEdit();
                break;
            case 'addDefinedName':
                args.isAdded = this.addDefinedName(args.definedName);
                break;
            case 'getNames':
                if (!args.sheetName) {
                    args.sheetName = getSheetName(this.parent);
                }
                args.names = this.getNames(args.sheetName);
                break;
            case 'getNameFromRange':
                args.definedName = this.getNameFromRange(args.range);
                break;
            case 'isFormulaEditing':
                args.isFormulaEdit = this.isFormula;
                break;
            case 'isCircularReference': {
                var dialogInst_1 = this.parent.serviceLocator.getService(dialog);
                var dialogContent_1 = l10n.getConstant('CircularReference');
                var triggerEvent_1 = function (dlgArgs) {
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.content !== dialogContent_1) {
                        dialogInst_1.dialogInstance.content = dlgArgs.content;
                        dialogInst_1.dialogInstance.dataBind();
                    }
                };
                var dlgInst = dialogInst_1.dialogInstance;
                if (dlgInst && dlgInst.visible && dlgInst.element.classList.contains('e-circularref-dlg')) {
                    triggerEvent_1({ dialogName: 'CircularReferenceDialog', element: dlgInst.element, target: this.parent.element, cancel: false,
                        cellAddress: args.address, content: dialogContent_1 });
                }
                else {
                    var cellAddress_1 = args.address;
                    dialogInst_1.show({
                        height: 180, width: 400, isModal: true, showCloseIcon: true, cssClass: 'e-circularref-dlg', content: dialogContent_1,
                        beforeOpen: function (args) {
                            var dlgArgs = { dialogName: 'CircularReferenceDialog', element: args.element,
                                target: args.target, cancel: args.cancel, cellAddress: cellAddress_1, content: dialogContent_1 };
                            triggerEvent_1(dlgArgs);
                            args.cancel = dlgArgs.cancel;
                        }
                    });
                }
                args.argValue = '0';
                break;
            }
        }
    };
    Formula.prototype.renderAutoComplete = function () {
        if (!select('#' + this.parent.element.id + '_ac', this.parent.element)) {
            var acElem = this.parent.createElement('input', { id: this.parent.element.id + '_ac', className: 'e-ss-ac' });
            this.parent.element.appendChild(acElem);
            var eventArgs = {
                action: 'getLibraryFormulas',
                formulaCollection: []
            };
            this.parent.notify(workbookFormulaOperation, eventArgs);
            var autoCompleteOptions = {
                dataSource: eventArgs.formulaCollection,
                cssClass: 'e-ss-atc',
                popupWidth: '130px',
                allowFiltering: true,
                filterType: 'StartsWith',
                sortOrder: 'Ascending',
                open: this.onSuggestionOpen.bind(this),
                close: this.onSuggestionClose.bind(this),
                select: this.onSelect.bind(this),
                actionComplete: this.onSuggestionComplete.bind(this)
            };
            this.autocompleteInstance = new AutoComplete(autoCompleteOptions, acElem);
            this.autocompleteInstance.createElement = this.parent.createElement;
            this.acInputElement = acElem;
        }
    };
    Formula.prototype.onSuggestionOpen = function (e) {
        var _this = this;
        this.isPopupOpened = true;
        e.popup.relateTo = this.getRelateToElem();
        e.popup.element.firstChild.style.maxHeight = '180px';
        new Promise(function (resolve) {
            setTimeout(function () { resolve(); }, 100);
        }).then(function () {
            _this.triggerKeyDownEvent(keyCodes.DOWN);
        });
    };
    Formula.prototype.onSuggestionClose = function (e) {
        if (this.isPreventClose) {
            e.cancel = true;
        }
        else {
            this.isPopupOpened = false;
        }
    };
    Formula.prototype.onSelect = function (e) {
        var updatedFormulaValue = '=' + e.itemData.value + '(';
        if (this.isSubFormula) {
            var editValue = this.getEditingValue();
            var parseIndex = editValue.lastIndexOf(this.parent.listSeparator);
            if (parseIndex > -1) {
                updatedFormulaValue = editValue.slice(0, parseIndex + 1);
            }
            else {
                parseIndex = editValue.lastIndexOf('(');
                if (parseIndex > -1) {
                    updatedFormulaValue = editValue.slice(0, parseIndex + 1);
                }
            }
            updatedFormulaValue += e.itemData.value + '(';
        }
        this.parent.notify(editOperation, {
            action: 'refreshEditor', value: updatedFormulaValue,
            refreshFormulaBar: true, refreshEditorElem: true, refreshCurPos: !this.isFormulaBar
        });
        if (this.isPopupOpened) {
            this.hidePopUp();
            var suggPopupElem = select('#' + this.parent.element.id + '_ac_popup');
            if (suggPopupElem) {
                detach(suggPopupElem);
            }
            this.isPopupOpened = false;
        }
    };
    Formula.prototype.onSuggestionComplete = function (args) {
        this.isPreventClose = args.result.length > 0;
        if (!this.isPreventClose) {
            args.cancel = true;
            this.hidePopUp();
        }
    };
    Formula.prototype.refreshFormulaDatasource = function () {
        var eventArgs = {
            action: 'getLibraryFormulas',
            formulaCollection: []
        };
        this.parent.notify(workbookFormulaOperation, eventArgs);
        if (this.autocompleteInstance) {
            this.autocompleteInstance.dataSource = eventArgs.formulaCollection;
        }
    };
    Formula.prototype.keyUpHandler = function (e) {
        if (this.parent.isEdit) {
            var editValue = this.getEditingValue();
            this.isFormula = checkIsFormula(editValue);
            if (this.isFormula || this.isPopupOpened) {
                if (e.keyCode !== keyCodes.TAB && this.isFormula) {
                    editValue = this.getSuggestionKeyFromFormula(editValue);
                }
                this.refreshFormulaSuggestion(e, editValue);
            }
        }
        else if (this.isPopupOpened) {
            this.hidePopUp();
        }
    };
    Formula.prototype.keyDownHandler = function (e) {
        var keyCode = e.keyCode;
        if (this.isFormula) {
            if (this.isPopupOpened) {
                switch (keyCode) {
                    case keyCodes.UP:
                    case keyCodes.DOWN:
                        e.preventDefault();
                        this.triggerKeyDownEvent(keyCode);
                        break;
                    case keyCodes.TAB:
                        e.preventDefault();
                        this.triggerKeyDownEvent(keyCodes.ENTER);
                        break;
                }
            }
        }
        else {
            var trgtElem = e.target;
            if (trgtElem.id === this.parent.element.id + '_name_box') {
                switch (keyCode) {
                    case keyCodes.ENTER:
                        if (!document.querySelector('.e-name-box.e-popup-open')) {
                            this.addDefinedName({ name: trgtElem.value });
                            focus(this.parent.element);
                        }
                        break;
                    case keyCodes.ESC:
                        focus(this.parent.element);
                        break;
                }
            }
        }
    };
    Formula.prototype.formulaClick = function (e) {
        if (this.parent.isEdit) {
            var trgtElem = e.target;
            this.isFormulaBar = trgtElem.classList.contains('e-formula-bar');
        }
    };
    Formula.prototype.refreshFormulaSuggestion = function (e, formula) {
        if (formula.length > 0) {
            var autoCompleteElem = this.autocompleteInstance.element;
            var keyCode = e.keyCode;
            var isSuggestionAlreadyOpened = this.isPopupOpened;
            if (!isNavigationKey(keyCode)) {
                autoCompleteElem.value = formula;
                autoCompleteElem.dispatchEvent(new Event('input'));
                autoCompleteElem.dispatchEvent(new Event('keyup'));
                if (isSuggestionAlreadyOpened) {
                    this.triggerKeyDownEvent(keyCodes.DOWN);
                }
            }
        }
        else {
            if (this.isPopupOpened) {
                this.isPreventClose = false;
                this.hidePopUp();
            }
        }
    };
    Formula.prototype.endEdit = function () {
        this.isSubFormula = false;
        this.isPreventClose = false;
        this.isFormula = false;
        this.isFormulaBar = false;
        if (this.isPopupOpened) {
            this.hidePopUp();
            var suggPopupElem = select('#' + this.parent.element.id + '_ac_popup');
            if (suggPopupElem) {
                detach(suggPopupElem);
            }
            this.isPopupOpened = false;
        }
    };
    Formula.prototype.hidePopUp = function () {
        this.autocompleteInstance.hidePopup();
    };
    Formula.prototype.getSuggestionKeyFromFormula = function (formula) {
        var suggestValue = '';
        formula = formula.substr(1); //remove = char.
        if (formula) {
            var bracketIndex = formula.lastIndexOf('(');
            formula = formula.substr(bracketIndex + 1);
            var fSplit = formula.split(this.parent.listSeparator);
            if (fSplit.length === 1) {
                suggestValue = fSplit[0];
                this.isSubFormula = bracketIndex > -1;
            }
            else {
                suggestValue = fSplit[fSplit.length - 1];
                this.isSubFormula = true;
            }
            var isAlphaNumeric = suggestValue.match(/\w/);
            if (!isAlphaNumeric || (isAlphaNumeric && isAlphaNumeric.index !== 0)) {
                suggestValue = '';
            }
        }
        return suggestValue;
    };
    Formula.prototype.getRelateToElem = function () {
        var eventArgs = { action: 'getElement' };
        if (this.isFormulaBar) {
            this.parent.notify(formulaBarOperation, eventArgs);
        }
        else {
            this.parent.notify(editOperation, eventArgs);
        }
        return eventArgs.element;
    };
    Formula.prototype.getEditingValue = function () {
        var eventArgs = { action: 'getCurrentEditValue', editedValue: '' };
        this.parent.notify(editOperation, eventArgs);
        return eventArgs.editedValue;
    };
    Formula.prototype.triggerKeyDownEvent = function (keyCode) {
        var autoCompleteElem = this.autocompleteInstance.element;
        autoCompleteElem.dispatchEvent(new Event('input'));
        var eventArg = new Event('keydown');
        eventArg['keyCode'] = keyCode;
        eventArg['which'] = keyCode;
        eventArg['altKey'] = false;
        eventArg['shiftKey'] = false;
        eventArg['ctrlKey'] = false;
        /* eslint-enable @typescript-eslint/dot-notation */
        autoCompleteElem.dispatchEvent(eventArg);
    };
    Formula.prototype.getNames = function (sheetName) {
        var names = this.parent.definedNames.filter(function (name) { return name.scope === 'Workbook' || name.scope === '' || name.scope === sheetName; });
        return names;
    };
    Formula.prototype.getNameFromRange = function (range) {
        var singleRange = range.slice(0, range.indexOf(':'));
        var sRange = range.substring(range.lastIndexOf('!') + 1).split(':');
        var isSingleCell = sRange.length > 1 && sRange[0] === sRange[1];
        var sheetName;
        var referRange;
        var name = this.parent.definedNames.filter(function (name) {
            sheetName = name.refersTo.substring(0, name.refersTo.lastIndexOf('!'));
            referRange = name.refersTo.substring(name.refersTo.lastIndexOf('!') + 1);
            if (sheetName.includes('\'') && sheetName.match(/^='.*'$/)) {
                sheetName = '=' + sheetName.slice(2, -1);
            }
            var referValue = sheetName + '!' + referRange.split('$').join('');
            if (isSingleCell && referValue === '=' + singleRange) {
                return true;
            }
            return referValue === '=' + range;
        });
        return name && name[0];
    };
    Formula.prototype.addDefinedName = function (definedName) {
        var _this = this;
        var name = definedName.name;
        var isAdded = false;
        if (name && isCellReference(name.toUpperCase())) {
            this.parent.goTo(name);
            return isAdded;
        }
        if (!definedName.refersTo) {
            var sheet = getSheet(this.parent, this.parent.activeSheetIndex);
            var sheetName = getSheetName(this.parent);
            sheetName = sheetName.indexOf(' ') !== -1 ? '\'' + sheetName + '\'' : sheetName;
            var selectRange = sheet.selectedRange;
            if (!isNullOrUndefined(selectRange)) {
                var colIndex = selectRange.indexOf(':');
                var left = selectRange.substr(0, colIndex);
                var right = selectRange.substr(colIndex + 1, selectRange.length);
                if (parseInt(right.replace(/\D/g, ''), 10) === sheet.rowCount && parseInt(left.replace(/\D/g, ''), 10) === 1) {
                    right = right.replace(/[0-9]/g, '');
                    left = left.replace(/[0-9]/g, '');
                    selectRange = '$' + left + ':$' + right;
                }
                else if (getCellIndexes(right)[1] === sheet.colCount - 1 && getCellIndexes(left)[1] === 0) {
                    right = right.replace(/\D/g, '');
                    left = left.replace(/\D/g, '');
                    selectRange = '$' + left + ':$' + right;
                }
                else {
                    selectRange = left === right ? left : selectRange;
                }
            }
            definedName.refersTo = sheetName + '!' + selectRange;
            definedName.scope = 'Workbook';
        }
        if (name.length > 0 && (/^([a-zA-Z_0-9.]){0,255}$/.test(name))) {
            var eventArgs = {
                action: 'addDefinedName', definedName: definedName, isAdded: false
            };
            this.parent.notify(workbookFormulaOperation, eventArgs);
            isAdded = eventArgs.isAdded;
            if (!eventArgs.isAdded) {
                this.parent.serviceLocator.getService(dialog).show({
                    content: this.parent.serviceLocator.getService(locale).getConstant('DefineNameExists'),
                    width: '300',
                    beforeOpen: function (args) {
                        var dlgArgs = {
                            dialogName: 'DefineNameExistsDialog',
                            element: args.element, target: args.target, cancel: args.cancel
                        };
                        _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                        if (dlgArgs.cancel) {
                            args.cancel = true;
                        }
                    }
                });
            }
        }
        else {
            this.parent.serviceLocator.getService(dialog).show({
                content: this.parent.serviceLocator.getService(locale).getConstant('DefineNameInValid'),
                width: '300',
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'DefineNameInValidDialog',
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                }
            });
        }
        return isAdded;
    };
    return Formula;
}());

/**
 * Represents SheetTabs for Spreadsheet.
 */
var SheetTabs = /** @class */ (function () {
    function SheetTabs(parent) {
        this.aggregateContent = '';
        this.selaggregateCnt = 'Sum';
        this.parent = parent;
        this.addEventListener();
    }
    SheetTabs.prototype.getModuleName = function () {
        return 'sheetTabs';
    };
    SheetTabs.prototype.createSheetTabs = function () {
        var _this = this;
        if (!this.parent.showSheetTabs && this.tabInstance) {
            this.destroy();
            return;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var panel = this.parent.createElement('div', {
            className: 'e-sheet-tab-panel', id: this.parent.element.id + '_sheet_tab_panel'
        });
        var addBtn = this.parent.createElement('button', {
            className: 'e-add-sheet-tab e-btn e-css e-flat e-icon-btn' + (this.parent.allowInsert ? '' : ' e-disabled'),
            attrs: { 'title': l10n.getConstant('AddSheet'), 'type': 'button' }
        });
        addBtn.appendChild(this.parent.createElement('span', { className: 'e-btn-icon e-icons e-add-icon' }));
        addBtn.addEventListener('click', this.addSheetTab.bind(this));
        addBtn.disabled = !this.parent.allowInsert;
        panel.appendChild(addBtn);
        this.addBtnRipple = rippleEffect(panel, { selector: '.e-add-sheet-tab' });
        var ddb = this.parent.createElement('button', { attrs: { 'title': l10n.getConstant('ListAllSheets'), 'type': 'button' } });
        panel.appendChild(ddb);
        this.parent.element.appendChild(panel);
        var items = this.getSheetTabItems();
        this.dropDownInstance = new DropDownButton({
            iconCss: 'e-icons',
            items: items.ddbItems,
            createPopupOnClick: true,
            beforeItemRender: function (args) {
                var sheet = _this.parent.sheets[_this.dropDownInstance.items.indexOf(args.item)];
                if (sheet.state === 'Hidden') {
                    args.element.classList.add('e-hide');
                }
                else if (sheet.state === 'VeryHidden') {
                    args.element.style.display = 'none';
                }
            },
            select: function (args) { return _this.updateSheetTab({ idx: _this.dropDownInstance.items.indexOf(args.item) }); },
            beforeOpen: function (args) { return _this.beforeOpenHandler(_this.dropDownInstance, args.element, l10n.getConstant('ListAllSheets')); },
            open: function (args) { return _this.openHandler(_this.dropDownInstance, args.element, 'left'); },
            cssClass: 'e-sheets-list e-flat e-caret-hide',
            close: function () { return _this.focusTab(_this.tabInstance.element); }
        });
        this.dropDownInstance.createElement = this.parent.createElement;
        this.dropDownInstance.appendTo(ddb);
        var sheetTab = this.parent.createElement('div', { className: 'e-sheet-tab' });
        var cancelSelect;
        this.tabInstance = new Tab({
            selectedItem: this.parent.activeSheetIndex,
            overflowMode: 'Scrollable',
            items: items.tabItems,
            scrollStep: 250,
            selecting: function (args) {
                if (args.selectingIndex === args.selectedIndex) {
                    return;
                }
                if (cancelSelect) {
                    cancelSelect = false;
                }
                else {
                    var beginEventArgs = { currentSheetIndex: args.selectingIndex, previousSheetIndex: args.selectedIndex, cancel: false };
                    _this.parent.notify(beginAction, { eventArgs: beginEventArgs, action: 'gotoSheet' });
                    cancelSelect = beginEventArgs.cancel;
                }
            },
            selected: function (args) {
                if (!args.isInteracted) {
                    args.preventFocus = true;
                }
                _this.goToSheet(args, cancelSelect, true);
            },
            created: function () {
                var tBarItems = _this.tabInstance.element.querySelector('.e-toolbar-items');
                tBarItems.classList.add('e-sheet-tabs-items');
                EventHandler.add(tBarItems, 'dblclick', _this.renameSheetTab, _this);
            }
        });
        panel.appendChild(sheetTab);
        this.tabInstance.createElement = this.parent.createElement;
        this.tabInstance.appendTo(sheetTab);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        EventHandler.remove(this.tabInstance.element, 'keydown', this.tabInstance.spaceKeyDown);
        var sheetCount = items.tabItems.length;
        var sheet;
        for (var i = 0; i < sheetCount; i++) {
            sheet = getSheet(this.parent, i);
            var arg = { action: 'addSheet', sheetName: 'Sheet' + sheet.id, sheetId: sheet.id, visibleName: sheet.name };
            this.parent.notify(workbookFormulaOperation, arg);
        }
        this.parent.notify(workbookFormulaOperation, { action: 'initiateDefinedNames' });
        this.parent.notify(protectSheet, null);
    };
    SheetTabs.prototype.goToSheet = function (args, cancelSelect, triggerEvent) {
        var _this = this;
        if (args.selectedIndex === args.previousIndex) {
            return;
        }
        if (cancelSelect) {
            this.tabInstance.selectedItem = args.previousIndex;
            this.tabInstance.dataBind();
            focus(this.parent.element);
            return;
        }
        this.parent.notify(removeDesignChart, {});
        if (this.parent.isEdit) {
            var selection = window.getSelection();
            var editArgs = { action: 'getCurrentEditValue', editedValue: '' };
            this.parent.notify(editOperation, editArgs);
            var formula = editArgs.editedValue ? checkIsFormula(editArgs.editedValue, true) : false;
            if (!formula && selection && selection.focusNode && selection.focusNode.classList &&
                selection.focusNode.classList.contains('e-formula-bar-panel')) {
                formula = checkIsFormula(this.parent.element.querySelector('.e-formula-bar').value, true);
            }
            if (!formula) {
                this.parent.endEdit();
            }
        }
        this.parent.activeSheetIndex = args.selectedIndex;
        this.parent.dataBind();
        this.updateDropDownItems(args.selectedIndex, args.previousIndex);
        var eventArgs = {
            action: 'registerGridInCalc',
            sheetID: (args.selectedIndex + 1).toString()
        };
        this.parent.notify(workbookFormulaOperation, eventArgs);
        if (triggerEvent) {
            this.parent.notify(completeAction, {
                eventArgs: { previousSheetIndex: args.previousIndex, currentSheetIndex: args.selectedIndex }, action: 'gotoSheet'
            });
            getUpdateUsingRaf(function () { return focus(_this.parent.element); });
        }
    };
    SheetTabs.prototype.updateDropDownItems = function (curIdx, prevIdx) {
        if (prevIdx > -1) {
            this.dropDownInstance.items[prevIdx].iconCss = '';
        }
        this.dropDownInstance.items[curIdx].iconCss = 'e-selected-icon e-icons';
        this.dropDownInstance.setProperties({ 'items': this.dropDownInstance.items }, true);
    };
    SheetTabs.prototype.beforeOpenHandler = function (instance, element, localeText) {
        var viewportHeight = this.parent.viewport.height;
        var actualHeight = (parseInt(getComputedStyle(element.firstElementChild).height, 10) *
            instance.items.length) + (parseInt(getComputedStyle(element).paddingTop, 10) * 2);
        if (actualHeight > viewportHeight) {
            element.style.height = viewportHeight + "px";
            element.style.overflowY = 'auto';
        }
        element.parentElement.style.visibility = 'hidden';
        if (localeText) {
            element.setAttribute('aria-label', localeText);
        }
    };
    SheetTabs.prototype.openHandler = function (instance, element, positionX) {
        var wrapper = element.parentElement;
        var height;
        var collide = isCollide(wrapper);
        if (collide.indexOf('bottom') === -1) {
            height = element.style.overflowY === 'auto' ? this.parent.viewport.height : wrapper.getBoundingClientRect().height;
            var offset = calculatePosition(instance.element, positionX, 'top');
            if (positionX === 'right') {
                offset.left -= wrapper.getBoundingClientRect().width;
            }
            wrapper.style.left = offset.left + "px";
            wrapper.style.top = offset.top - height + "px";
        }
        wrapper.style.visibility = '';
        focus(element);
    };
    SheetTabs.prototype.getSheetTabItems = function () {
        var _this = this;
        var tabItems = [];
        var ddbItems = [];
        var sheetName;
        this.parent.sheets.forEach(function (sheet, index) {
            sheetName = getSheetName(_this.parent, index).replace(/</g, '&lt;').replace(/>/g, '&gt;');
            tabItems.push({ header: { 'text': sheetName }, visible: sheet.state === 'Visible' });
            ddbItems.push({ text: sheetName, iconCss: index === _this.parent.activeSheetIndex ? 'e-selected-icon e-icons' : '' });
        });
        return { tabItems: tabItems, ddbItems: ddbItems };
    };
    SheetTabs.prototype.refreshSheetTab = function () {
        var items = this.getSheetTabItems();
        this.dropDownInstance.items = items.ddbItems;
        this.dropDownInstance.setProperties({ 'items': this.dropDownInstance.items }, true);
        this.tabInstance.items = items.tabItems;
        this.tabInstance.selectedItem = this.parent.activeSheetIndex;
        this.tabInstance.dataBind();
    };
    SheetTabs.prototype.addSheetTab = function () {
        this.parent.notify(insertModel, { model: this.parent, start: this.parent.activeSheetIndex + 1, end: this.parent.activeSheetIndex + 1, modelType: 'Sheet', isAction: true, activeSheetIndex: this.parent.activeSheetIndex + 1 });
    };
    SheetTabs.prototype.insertSheetTab = function (args) {
        this.parent.notify(removeDesignChart, {});
        if (!args.preventUpdate || args.startIdx === this.tabInstance.selectedItem) {
            this.dropDownInstance.items[this.tabInstance.selectedItem].iconCss = '';
        }
        for (var i = args.startIdx; i <= args.endIdx; i++) {
            var sheetName = this.parent.sheets[i].name.replace(/</g, '&lt;').replace(/>/g, '&gt;');
            this.dropDownInstance.items.splice(i, 0, { text: sheetName });
            this.tabInstance.addTab([{ header: { text: sheetName }, content: '' }], i);
        }
        if (!args.preventUpdate || args.startIdx === this.tabInstance.selectedItem) {
            this.dropDownInstance.items[args.startIdx].iconCss = 'e-selected-icon e-icons';
        }
        this.dropDownInstance.setProperties({ 'items': this.dropDownInstance.items }, true);
        if (args.preventUpdate) {
            if (args.startIdx !== this.tabInstance.selectedItem) {
                this.refreshSheetTab();
            }
            else {
                this.parent.notify(protectSheet, null);
            }
        }
        else {
            this.updateSheetTab({ idx: args.startIdx, preventDataBind: true });
        }
    };
    SheetTabs.prototype.updateSheetTab = function (args) {
        if (args.name === 'activeSheetChanged') {
            args.idx = this.parent.skipHiddenSheets(args.idx);
        }
        else {
            if (this.parent.sheets[args.idx].state === 'Hidden') {
                if (this.parent.isProtected) {
                    return;
                }
                this.showSheet({ sheetIndex: args.idx, triggerEvent: true });
            }
        }
        this.tabInstance.selectedItem = args.idx;
        if (!args.preventDataBind) {
            this.tabInstance.dataBind();
        }
        this.parent.notify(protectSheet, null);
    };
    SheetTabs.prototype.showSheet = function (args) {
        this.parent.setSheetPropertyOnMute(this.parent.sheets[args.sheetIndex], 'state', 'Visible');
        this.tabInstance.hideTab(args.sheetIndex, false);
        if (args.triggerEvent) {
            this.parent.notify(completeAction, { action: 'showSheet', eventArgs: { sheetIndex: args.sheetIndex } });
        }
    };
    SheetTabs.prototype.switchSheetTab = function (args) {
        var target = closest(args.event.target, '.e-toolbar-item');
        if (!target) {
            return;
        }
        var name = target.querySelector('.e-tab-text').textContent;
        var disableItems = [];
        var id = this.parent.element.id + "_cmenu";
        for (var i = 0, len = this.parent.sheets.length; i < len; i++) {
            if (this.parent.sheets[i].name === name) {
                if (this.parent.activeSheetIndex !== i) {
                    this.updateSheetTab({ idx: i });
                }
                break;
            }
        }
        if (args.element.classList.contains('e-contextmenu') && args.items[0] &&
            args.items[0].id === this.parent.element.id + "_cmenu_insert_sheet") {
            if (this.skipHiddenSheets() === 1) {
                //let id: string = `${this.parent.element.id}_cmenu`;
                //this.parent.enableFileMenuItems([`${id}_hide_sheet`, `${id}_delete_sheet`], false, true);
                disableItems.push(id + "_hide_sheet", id + "_delete_sheet");
            }
            if (!this.parent.allowInsert || this.parent.isProtected) {
                disableItems.push(id + "_insert_sheet");
            }
            if (!this.parent.allowDelete && disableItems.indexOf(id + "_delete_sheet") > -1) {
                disableItems.push(id + "_delete_sheet");
            }
        }
        if (this.parent.password.length > 0 || this.parent.isProtected) {
            if (disableItems.indexOf(id + "_insert_sheet") > -1) {
                disableItems.push(id + "_insert_sheet");
            }
            if (disableItems.indexOf(id + "_delete_sheet") > -1) {
                disableItems.push(id + "_delete_sheet");
            }
            disableItems.push(id + "_duplicate", id + "_rename", id + "_hide_sheet", id + "_delete_sheet", id + "_insert_sheet", id + "_move_left", id + "_move_right");
        }
        this.parent.enableContextMenuItems(disableItems, false, true);
    };
    SheetTabs.prototype.skipHiddenSheets = function () {
        var count = this.parent.sheets.length;
        this.parent.sheets.forEach(function (sheet) {
            if (sheet.state !== 'Visible') {
                --count;
            }
        });
        return count;
    };
    SheetTabs.prototype.renameSheetTab = function () {
        var target = this.tabInstance.element.querySelector('.e-toolbar-item.e-active');
        if (target) {
            target = target.querySelector('.e-text-wrap');
            var value = target.querySelector('.e-tab-text').textContent;
            var args = {
                eventArgs: {
                    name: value, index: this.parent.getActiveSheet().id
                },
                action: 'renameSheet', cancel: false
            };
            this.parent.trigger('actionBegin', args);
            if (args.cancel || this.parent.isProtected) {
                return;
            }
            var input = this.parent.createElement('input', {
                id: this.parent.element.id + '_rename_input',
                className: 'e-input e-sheet-rename', styles: "width: " + target.getBoundingClientRect().width + "px", attrs: {
                    'type': 'text', 'name': 'Rename', 'required': '', 'value': value, 'spellcheck': 'false', 'maxlength': '31'
                }
            });
            target.firstElementChild.style.display = 'none';
            target.appendChild(input);
            EventHandler.add(document, 'mousedown touchstart', this.renameInputFocusOut, this);
            EventHandler.add(input, 'keydown', this.renameKeyDown, this);
            EventHandler.add(input, 'input', this.updateWidth, this);
            input.focus();
            input.setSelectionRange(0, value.length);
            EventHandler.remove(closest(target, '.e-toolbar-items'), 'dblclick', this.renameSheetTab);
        }
    };
    SheetTabs.prototype.updateWidth = function (e) {
        var target = e.target;
        var len = target.value.length;
        var value = target.value.split(' ');
        if (value.length) {
            var spaceLen = value.length - 1;
            len -= spaceLen;
            len += (spaceLen * 0.5);
        }
        target.style.width = len + "ch";
    };
    SheetTabs.prototype.renameKeyDown = function (e) {
        if (e.keyCode === 32) {
            e.stopPropagation();
        }
        else if (e.keyCode === 27) {
            this.removeRenameInput(e.target);
            this.focusTab(this.tabInstance.element);
        }
        else if (e.keyCode === 13) {
            this.renameInputFocusOut(e);
        }
    };
    SheetTabs.prototype.renameInputFocusOut = function (e) {
        var target = e.target;
        if ((e.type === 'mousedown' || e.type === 'touchstart') && (target.classList.contains('e-sheet-rename') ||
            closest(target, '.e-dlg-container'))) {
            return;
        }
        target = document.getElementById(this.parent.element.id + '_rename_input');
        var value = target.value;
        var l10n = this.parent.serviceLocator.getService(locale);
        if (value) {
            var idx = this.tabInstance.selectedItem;
            // eslint-disable-next-line no-useless-escape
            if (!value.match(new RegExp('.*[\\[\\]\\*\\\\\/\\?].*'))) {
                if (this.parent.sheets[idx].name !== value) {
                    for (var i = 0, len = this.parent.sheets.length; i < len; i++) {
                        if (i !== this.parent.activeSheetIndex && this.parent.sheets[i].name.toLowerCase() ===
                            value.toLowerCase()) {
                            this.showRenameDialog(target, l10n.getConstant('SheetRenameAlreadyExistsAlert'));
                            return;
                        }
                    }
                }
                var items = this.removeRenameInput(target);
                if (this.parent.sheets[idx].name !== value) {
                    this.parent.setSheetPropertyOnMute(this.parent.sheets[idx], 'name', value);
                    this.updateSheetName({ value: value, idx: idx, items: items });
                }
                if (e.type === 'keydown') {
                    this.focusTab(items);
                }
                else if ((closest(e.target, '.e-spreadsheet'))) {
                    focus(this.parent.element);
                }
            }
            else {
                this.showRenameDialog(target, l10n.getConstant('SheetRenameInvalidAlert'));
            }
        }
        else {
            this.showRenameDialog(target, l10n.getConstant('SheetRenameEmptyAlert'));
        }
        this.parent.notify(completeAction, { eventArgs: { index: this.parent.getActiveSheet().id, value: value }, action: 'renameSheet' });
    };
    SheetTabs.prototype.focusTab = function (context) {
        focus(select('.e-toolbar-item.e-active .e-tab-wrap', context));
    };
    SheetTabs.prototype.updateSheetName = function (args) {
        var pName = this.tabInstance.items[args.idx].header.text.replace(/&lt;/g, '<').replace(/&gt;/g, '>');
        var name = args.value.replace(/</g, '&lt;').replace(/>/g, '&gt;');
        this.tabInstance.items[args.idx].header.text = name;
        this.dropDownInstance.items[args.idx].text = name;
        this.dropDownInstance.setProperties({ 'items': this.dropDownInstance.items }, true);
        var sheetTabText = args.items.querySelectorAll('.e-toolbar-item')[args.idx].querySelector('.e-tab-text');
        sheetTabText.textContent = '';
        sheetTabText.appendChild(document.createTextNode(args.value));
        if (args.value.indexOf('  ') > -1) {
            this.tabInstance.setProperties({ 'items': this.tabInstance.items }, true);
        }
        else {
            this.tabInstance.dataBind();
        }
        this.parent.notify(sheetRenameUpdate, { value: args.value, pName: pName });
        if (this.parent.allowChart) {
            var range_1 = [];
            var lastIndex_1;
            this.parent.chartColl.forEach(function (chart) {
                if (chart.range.includes('!')) {
                    lastIndex_1 = chart.range.lastIndexOf('!');
                    range_1[0] = chart.range.substring(0, lastIndex_1);
                    range_1[1] = chart.range.substring(lastIndex_1 + 1);
                    if (range_1[0].toLowerCase() === pName.toLowerCase()) {
                        range_1[0] = args.value;
                        chart.range = range_1.join('!');
                    }
                }
            });
        }
    };
    SheetTabs.prototype.hideSheet = function (args) {
        var actionArgs = {
            action: 'hideSheet', eventArgs: { sheetIndex: args.sheetIndex, cancel: false }
        };
        if (args.triggerEvent) {
            this.parent.notify(beginAction, actionArgs);
            if (actionArgs.eventArgs.cancel) {
                return;
            }
        }
        this.parent.setSheetPropertyOnMute(getSheet(this.parent, args.sheetIndex), 'state', 'Hidden');
        this.tabInstance.hideTab(args.sheetIndex);
        if (args.triggerEvent) {
            delete actionArgs.eventArgs.cancel;
            this.parent.notify(completeAction, actionArgs);
        }
    };
    SheetTabs.prototype.removeRenameInput = function (target) {
        var textEle = target.parentElement.querySelector('.e-tab-text');
        var sheetItems = closest(target, '.e-toolbar-items');
        EventHandler.add(sheetItems, 'dblclick', this.renameSheetTab, this);
        EventHandler.remove(document, 'mousedown touchstart', this.renameInputFocusOut);
        EventHandler.remove(target, 'keydown', this.renameKeyDown);
        EventHandler.remove(target, 'input', this.updateWidth);
        remove(target);
        textEle.style.display = '';
        return sheetItems;
    };
    SheetTabs.prototype.showRenameDialog = function (target, content) {
        var _this = this;
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var isCancelled;
        dialogInst.show({
            height: 180, width: 400, isModal: true, showCloseIcon: true,
            content: content,
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'SheetRenameDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    isCancelled = args.preventFocus = args.cancel = true;
                }
                else {
                    args.element.querySelector('.e-footer-content .e-primary').setAttribute('aria-label', content + " " + _this.parent.serviceLocator.getService(locale).getConstant('Ok'));
                    focus(target);
                }
            },
            close: function () {
                if (isCancelled) {
                    getUpdateUsingRaf(function () {
                        var curPosition = [target.selectionStart, target.selectionEnd];
                        focus(target);
                        target.setSelectionRange(curPosition[0], curPosition[1]);
                    });
                }
                else {
                    target.setSelectionRange(0, target.value.length);
                }
            }
        });
    };
    SheetTabs.prototype.focusRenameInput = function () {
        var input = document.getElementById(this.parent.element.id + '_rename_input');
        if (input) {
            input.focus();
        }
    };
    SheetTabs.prototype.removeSheetTab = function (args) {
        var _this = this;
        if (args.count && (args.count === this.parent.sheets.length)) {
            return;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        if (this.skipHiddenSheets() > 1) {
            var sheet = args.sheetName ?
                getSheet(this.parent, getSheetIndex(this.parent, args.sheetName)) :
                this.parent.getActiveSheet();
            var sheetIndex_1 = isNullOrUndefined(args.index) ? getSheetIndex(this.parent, sheet.name) : args.index;
            var eventArgs_1 = {
                index: sheetIndex_1,
                sheetCount: this.parent.sheets.length,
                sheetName: sheet.name
            };
            var isDataAvail = sheet.rows && sheet.rows.length ?
                (sheet.rows.length === 1 ? (sheet.rows[0].cells && sheet.rows[0].cells.length ? true : false) : true) : false;
            if (isDataAvail) {
                var dialogInst_1 = this.parent.serviceLocator.getService(dialog);
                if (args.clicked) {
                    this.forceDelete(sheetIndex_1);
                }
                else {
                    dialogInst_1.show({
                        height: 200, width: 400, isModal: true, showCloseIcon: true, cssClass: 'e-delete-sheet-dlg',
                        content: l10n.getConstant('DeleteSheetAlert'),
                        beforeOpen: function (args) {
                            var dlgArgs = {
                                dialogName: 'DeleteSheetDialog',
                                element: args.element, target: args.target, cancel: args.cancel
                            };
                            _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                            if (dlgArgs.cancel) {
                                args.cancel = true;
                            }
                            else {
                                args.element.querySelector('.e-footer-content .e-primary').setAttribute('aria-label', l10n.getConstant('DeleteSheetAlert') + " " + l10n.getConstant('Ok'));
                                focus(_this.parent.element);
                            }
                        },
                        buttons: [{
                                buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true },
                                click: function () {
                                    dialogInst_1.hide();
                                    _this.forceDelete(sheetIndex_1);
                                    _this.parent.notify(clearUndoRedoCollection, null);
                                    if (args && !args.isAction) {
                                        eventArgs_1.sheetCount = _this.parent.sheets.length;
                                        _this.parent.notify(completeAction, { eventArgs: eventArgs_1, action: 'removeSheet' });
                                    }
                                }
                            }]
                    });
                }
            }
            else {
                this.parent.notify(refreshInsertDelete, { startIndex: sheetIndex_1, endIndex: sheetIndex_1, modelType: 'Sheet', isDelete: true });
                this.parent.notify(workbookFormulaOperation, { action: 'deleteSheetTab', sheetId: getSheet(this.parent, sheetIndex_1).id });
                this.destroySheet(sheetIndex_1);
                this.parent.notify(clearUndoRedoCollection, null);
                if (args && !args.isAction) {
                    eventArgs_1.sheetCount = this.parent.sheets.length;
                    this.parent.notify(completeAction, { eventArgs: eventArgs_1, action: 'removeSheet' });
                }
            }
        }
        else {
            this.parent.serviceLocator.getService(dialog).show({
                height: 180, width: 400, isModal: true, showCloseIcon: true,
                content: l10n.getConstant('DeleteSingleLastSheetAlert'),
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: 'DeleteSingleSheetDialog',
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                }
            });
        }
    };
    SheetTabs.prototype.forceDelete = function (sheetIndex) {
        this.parent.notify(removeDesignChart, {});
        this.parent.notify(refreshInsertDelete, { startIndex: sheetIndex, endIndex: sheetIndex, modelType: 'Sheet', isDelete: true });
        this.parent.notify(workbookFormulaOperation, { action: 'deleteSheetTab', sheetId: getSheet(this.parent, sheetIndex).id });
        this.destroySheet(sheetIndex);
    };
    SheetTabs.prototype.destroySheet = function (sheetIndex) {
        var activeSheetIdx = isNullOrUndefined(sheetIndex) ? this.parent.activeSheetIndex : sheetIndex;
        this.parent.removeSheet(activeSheetIdx);
        this.parent.notify(sheetsDestroyed, { sheetIndex: activeSheetIdx });
        this.dropDownInstance.items.splice(activeSheetIdx, 1);
        this.dropDownInstance.setProperties({ 'items': this.dropDownInstance.items }, true);
        this.tabInstance.removeTab(activeSheetIdx);
        var activeIndex = this.parent.skipHiddenSheets(this.tabInstance.selectedItem);
        this.parent.activeSheetIndex = activeIndex;
        this.parent.setProperties({ activeSheetIndex: activeIndex }, true);
        this.parent.renderModule.refreshSheet();
        this.tabInstance.selectedItem = activeIndex;
        this.tabInstance.dataBind();
        this.updateDropDownItems(activeIndex);
        this.parent.notify(protectSheet, null);
    };
    SheetTabs.prototype.showAggregate = function (args) {
        var _this = this;
        if (isSingleCell(getRangeIndexes(this.parent.getActiveSheet().selectedRange)) || (args && args.remove)) {
            this.removeAggregate();
            return;
        }
        var eventArgs = { Count: 0, Sum: '0', Avg: '0', Min: '0', Max: '0', countOnly: true };
        this.parent.notify(aggregateComputation, eventArgs);
        if (eventArgs.Count > 1) {
            this.aggregateContent = eventArgs.countOnly ? 'Count' : this.selaggregateCnt;
            if (eventArgs.countOnly) {
                this.aggregateContent = 'Count';
                delete eventArgs.Sum;
                delete eventArgs.Avg;
                delete eventArgs.Min;
                delete eventArgs.Max;
            }
            var btnClass = eventArgs.countOnly ? 'e-aggregate-list e-flat e-aggregate-list-countonly e-caret-hide'
                : 'e-aggregate-list e-flat';
            delete eventArgs.countOnly;
            var key = this.aggregateContent;
            var content = key + ": " + eventArgs[key.toString()];
            if (!this.aggregateDropDown) {
                var aggregateEle = this.parent.createElement('button', { id: this.parent.element.id + '_aggregate', attrs: { 'type': 'button' } });
                document.getElementById(this.parent.element.id + "_sheet_tab_panel").appendChild(aggregateEle);
                this.aggregateDropDown = new DropDownButton({
                    content: content,
                    items: this.getAggregateItems(eventArgs),
                    createPopupOnClick: true,
                    select: function (args) {
                        _this.parent.notify(aggregateComputation, eventArgs);
                        _this.updateAggregateContent(args.item.text, { Count: eventArgs.Count, Sum: eventArgs.Sum, Avg: eventArgs.Avg, Min: eventArgs.Min,
                            Max: eventArgs.Max }, true);
                    },
                    beforeOpen: function (args) {
                        return _this.beforeOpenHandler(_this.aggregateDropDown, args.element);
                    },
                    open: function (args) { return _this.openHandler(_this.aggregateDropDown, args.element, 'right'); },
                    close: function () { return focus(_this.parent.element); },
                    cssClass: btnClass
                });
                this.aggregateDropDown.createElement = this.parent.createElement;
                this.aggregateDropDown.appendTo(aggregateEle);
            }
            else {
                this.updateAggregateContent(content, eventArgs);
            }
        }
        else {
            this.removeAggregate();
        }
    };
    SheetTabs.prototype.getAggregateItems = function (args) {
        var _this = this;
        var items = [];
        var text;
        var iconCss;
        var argsKey;
        Object.keys(args).forEach(function (key) {
            argsKey = args["" + key];
            if (argsKey !== aggregateComputation) {
                text = key + ": " + argsKey;
                iconCss = key === _this.aggregateContent ? 'e-selected-icon e-icons' : '';
                items.push({ text: text, iconCss: iconCss });
            }
        });
        return items;
    };
    SheetTabs.prototype.updateAggregateContent = function (text, eventArgs, isSelect) {
        this.aggregateContent = text.split(': ')[0];
        if (isSelect) {
            this.selaggregateCnt = text.split(': ')[0];
        }
        this.aggregateDropDown.content = text;
        this.aggregateDropDown.dataBind();
        this.aggregateDropDown.setProperties({ 'items': this.getAggregateItems(eventArgs) }, true);
    };
    SheetTabs.prototype.removeAggregate = function () {
        if (!isNullOrUndefined(this.aggregateDropDown)) {
            this.aggregateDropDown.destroy();
            remove(this.aggregateDropDown.element);
            this.aggregateDropDown = null;
        }
    };
    SheetTabs.prototype.addEventListener = function () {
        this.parent.on(sheetTabs, this.createSheetTabs, this);
        this.parent.on(refreshSheetTabs, this.refreshSheetTab, this);
        this.parent.on(insertSheetTab, this.insertSheetTab, this);
        this.parent.on(removeSheetTab, this.removeSheetTab, this);
        this.parent.on(renameSheetTab, this.renameSheetTab, this);
        this.parent.on(cMenuBeforeOpen, this.switchSheetTab, this);
        this.parent.on(activeSheetChanged, this.updateSheetTab, this);
        this.parent.on(activeCellChanged, this.removeAggregate, this);
        this.parent.on(focusRenameInput, this.focusRenameInput, this);
        this.parent.on(sheetNameUpdate, this.updateSheetName, this);
        this.parent.on(hideSheet, this.hideSheet, this);
        this.parent.on(showAggregate, this.showAggregate, this);
        this.parent.on(goToSheet, this.goToSheet, this);
        this.parent.on(showSheet, this.showSheet, this);
    };
    SheetTabs.prototype.destroy = function () {
        this.removeEventListener();
        if (this.dropDownInstance) {
            this.dropDownInstance.destroy();
        }
        this.dropDownInstance = null;
        if (this.tabInstance) {
            this.tabInstance.destroy();
        }
        this.tabInstance = null;
        this.removeAggregate();
        this.aggregateContent = null;
        if (this.addBtnRipple) {
            this.addBtnRipple();
        }
        this.addBtnRipple = null;
        EventHandler.remove(document, 'mousedown touchstart', this.renameInputFocusOut);
        var ele = document.getElementById(this.parent.element.id + '_sheet_tab_panel');
        if (ele) {
            remove(ele);
        }
        if (this.selaggregateCnt) {
            this.selaggregateCnt = null;
        }
        this.parent = null;
    };
    SheetTabs.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(sheetTabs, this.createSheetTabs);
            this.parent.off(refreshSheetTabs, this.refreshSheetTab);
            this.parent.off(insertSheetTab, this.insertSheetTab);
            this.parent.off(removeSheetTab, this.removeSheetTab);
            this.parent.off(renameSheetTab, this.renameSheetTab);
            this.parent.off(cMenuBeforeOpen, this.switchSheetTab);
            this.parent.off(activeSheetChanged, this.updateSheetTab);
            this.parent.off(activeCellChanged, this.removeAggregate);
            this.parent.off(focusRenameInput, this.focusRenameInput);
            this.parent.off(sheetNameUpdate, this.updateSheetName);
            this.parent.off(hideSheet, this.hideSheet);
            this.parent.off(showAggregate, this.showAggregate);
            this.parent.off(goToSheet, this.goToSheet);
            this.parent.off(showSheet, this.showSheet);
        }
    };
    return SheetTabs;
}());

var Open = /** @class */ (function () {
    function Open(parent) {
        this.isImportedFile = false;
        this.unProtectSheetIdx = [];
        this.parent = parent;
        this.addEventListener();
        this.renderFileUpload();
        //Spreadsheet.Inject(WorkbookOpen);
    }
    /**
     * Adding event listener for success and failure
     *
     * @returns {void} - Adding event listener for success and failure
     */
    Open.prototype.addEventListener = function () {
        this.parent.on(openSuccess, this.openSuccess, this);
        this.parent.on(openFailure, this.openFailed, this);
        this.parent.on(sheetsDestroyed, this.sheetsDestroyHandler, this);
    };
    /**
     * Removing event listener for success and failure
     *
     * @returns {void} - Removing event listener for success and failure
     */
    Open.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(openSuccess, this.openSuccess);
            this.parent.off(openFailure, this.openFailed);
            this.parent.off(sheetsDestroyed, this.sheetsDestroyHandler);
        }
    };
    /**
     * Rendering upload component for importing files.
     *
     * @returns {void} - Rendering upload component for importing files.
     */
    Open.prototype.renderFileUpload = function () {
        var uploadBox = this.parent.element.appendChild(this.parent.createElement('input', {
            id: this.parent.element.id + '_fileUpload',
            attrs: { type: 'file', accept: '.xls, .xlsx, .csv, .xlsm, .xlsb', name: 'fileUpload' }
        }));
        uploadBox.onchange = this.fileSelect.bind(this);
        uploadBox.onerror = this.openFailed.bind(this);
        uploadBox.style.display = 'none';
    };
    /**
     * Process after select the excel and image file.
     *
     * @param {Event} args - File select native event.
     * @returns {void} - Process after select the excel and image file.
     */
    Open.prototype.fileSelect = function (args) {
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        var filesData = args.target.files[0];
        if (filesData && filesData.length < 1) {
            return;
        }
        var impArgs = {
            file: filesData
        };
        this.parent.open(impArgs);
        select('#' + this.parent.element.id + '_fileUpload', this.parent.element).value = '';
    };
    /**
     * File open success event declaration.
     *
     * @param {string} response - File open success response text.
     * @returns {void} - File open success event declaration.
     */
    Open.prototype.openSuccess = function (response) {
        var _this = this;
        var openError = ['UnsupportedFile', 'InvalidUrl', 'NeedPassword', 'InCorrectPassword', 'InCorrectSheetPassword',
            'CorrectSheetPassword', 'DataLimitExceeded', 'FileSizeLimitExceeded', 'ExternalWorkbook'];
        var openCancelFn = function (action) {
            _this.parent.serviceLocator.getService(dialog).hide(true);
            var file = new File([], response.guid, { type: action.toLowerCase() });
            _this.parent.open({ file: file, guid: response.guid, password: response.eventArgs.password, orginalFile: response.eventArgs.file });
        };
        if (openError.indexOf(response.data) > -1) {
            var l10n = this.parent.serviceLocator.getService(locale);
            if (openError[2] === response.data) {
                if (!this.parent.element.querySelector('.e-importprotectworkbook-dlg')) {
                    this.parent.notify(importProtectWorkbook, response.eventArgs);
                }
            }
            else if (openError[3] === response.data) {
                var alertSpan = this.parent.createElement('span', { className: 'e-importprotectpwd-alert-span' });
                alertSpan.innerText = l10n.getConstant('IncorrectPassword');
                (this.parent.element.querySelector('.e-importprotectworkbook-dlg').querySelector('.e-dlg-content')).appendChild(alertSpan);
            }
            else if (openError[4] === response.data) {
                var alertSpan = this.parent.createElement('span', { className: 'e-unprotectsheetpwd-alert-span' });
                alertSpan.innerText = l10n.getConstant('IncorrectPassword');
                (this.parent.element.querySelector('.e-unprotectworksheet-dlg').querySelector('.e-dlg-content')).appendChild(alertSpan);
            }
            else if (openError[5] === response.data) {
                this.parent.isOpen = false;
                this.parent.notify(unProtectSheetPassword, null);
                var dialogInst = this.parent.serviceLocator.getService(dialog);
                dialogInst.hide();
                this.parent.hideSpinner();
            }
            else if (openError[8] === response.data) {
                var dialogInst = this.parent.serviceLocator.getService(dialog);
                dialogInst.hide(true);
                var externalWorkbook = response.data.includes('ExternalWorkbook');
                this.parent.serviceLocator.getService(dialog).show({
                    content: this.parent.serviceLocator.getService('spreadsheetLocale').getConstant('ExternalWorkbook'),
                    width: '350', buttons: externalWorkbook ? [
                        {
                            click: openCancelFn.bind(this, response.data + "Yes"),
                            buttonModel: { content: l10n.getConstant('Yes'), isPrimary: true }
                        },
                        {
                            click: openCancelFn.bind(this, response.data + "No"),
                            buttonModel: { content: l10n.getConstant('No') }
                        }
                    ] : [],
                    beforeOpen: function (args) {
                        var dlgArgs = {
                            dialogName: 'OpenDialog',
                            element: args.element, target: args.target, cancel: args.cancel
                        };
                        _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                        if (dlgArgs.cancel) {
                            args.cancel = true;
                        }
                    }
                }, externalWorkbook ? true : null);
                this.parent.hideSpinner();
                return;
            }
            else {
                var dialogInst = this.parent.serviceLocator.getService(dialog);
                dialogInst.hide(true);
                var sizeLimitAlert = response.data.includes('LimitExceeded');
                this.parent.serviceLocator.getService(dialog).show({
                    content: this.parent.serviceLocator.getService('spreadsheetLocale')
                        .getConstant(response.data),
                    width: '300', buttons: sizeLimitAlert ? [
                        { click: openCancelFn.bind(this, response.data + "Open"),
                            buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true } },
                        { click: openCancelFn.bind(this, response.data + "Cancel"),
                            buttonModel: { content: l10n.getConstant('Cancel') } }
                    ] : [],
                    beforeOpen: function (args) {
                        var dlgArgs = {
                            dialogName: 'OpenDialog',
                            element: args.element, target: args.target, cancel: args.cancel
                        };
                        _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                        if (dlgArgs.cancel) {
                            args.cancel = true;
                        }
                    }
                }, sizeLimitAlert ? true : null);
                this.parent.hideSpinner();
                return;
            }
        }
        else {
            var dialogInst = this.parent.serviceLocator.getService(dialog);
            dialogInst.hide();
            this.parent.showSpinner();
        }
        if (!this.parent.element) {
            return;
        }
        if (openError[5] !== response.data) {
            this.parent.notify(clearFormulaDependentCells, { cellRef: null, isOpen: true });
            if (!response.isOpenFromJson) {
                this.parent.trigger('openComplete', { response: response });
                this.parent.notify(completeAction, { response: response, action: 'import' });
            }
            if (this.parent.isProtected && this.parent.showSheetTabs && response.isOpenFromJson) {
                this.parent.element.querySelector('.e-add-sheet-tab').setAttribute('disabled', 'true');
                this.parent.element.querySelector('.e-add-sheet-tab').classList.add('e-disabled');
            }
            this.parent.renderModule.refreshSheet(response.isOpenFromJson, false, false, false, response);
            this.parent.notify(refreshSheetTabs, null);
            this.isImportedFile = true;
            response.context.preventFormatCheck = response.eventArgs && response.eventArgs.file && response.eventArgs.file.name &&
                !response.eventArgs.file.name.includes('.csv');
            this.unProtectSheetIdx = [];
            this.parent.hideSpinner();
        }
    };
    /**
     * File open failure event declaration.
     *
     * @param {object} args - Open failure arguments.
     * @returns {void} - File open failure event declaration.
     */
    Open.prototype.openFailed = function (args) {
        this.parent.trigger('openFailure', args);
        this.parent.hideSpinner();
        /* Need to Implement */
    };
    Open.prototype.sheetsDestroyHandler = function (args) {
        if (isNullOrUndefined(args.sheetIndex)) {
            this.isImportedFile = false;
            this.unProtectSheetIdx = [];
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    Open.prototype.destroy = function () {
        this.removeEventListener();
        var uploadBox = select('#' + this.parent.element.id + '_fileUpload', this.parent.element);
        if (uploadBox) {
            detach(uploadBox);
        }
        this.isImportedFile = null;
        this.unProtectSheetIdx = null;
        this.parent = null;
    };
    /**
     * Get the sheet open module name.
     *
     * @returns {string} - Get the sheet open module name.
     */
    Open.prototype.getModuleName = function () {
        return 'open';
    };
    return Open;
}());

/**
 * `Save` module is used to handle the save action in Spreadsheet.
 */
var Save = /** @class */ (function () {
    /**
     * Constructor for Save module in Spreadsheet.
     *
     * @private
     * @param {Spreadsheet} parent - Specifies the Spreadsheet instance.
     */
    function Save(parent) {
        this.parent = parent;
        this.addEventListener();
        //Spreadsheet.Inject(WorkbookSave);
    }
    /**
     * To destroy the Save module.
     *
     * @returns {void}
     * @hidden
     */
    Save.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Save.prototype.addEventListener = function () {
        this.parent.on(beginSave, this.initiateSave, this);
        this.parent.on(saveCompleted, this.saveCompleted, this);
        this.parent.on(saveError, this.showErrorDialog, this);
        this.parent.on(exportDialog, this.exportDialog, this);
    };
    Save.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(beginSave, this.initiateSave);
            this.parent.off(saveCompleted, this.saveCompleted);
            this.parent.off(saveError, this.showErrorDialog);
            this.parent.off(exportDialog, this.exportDialog);
        }
    };
    /**
     * Get the module name.
     *
     * @returns {string} - Get the module name.
     * @private
     */
    Save.prototype.getModuleName = function () {
        return 'save';
    };
    /**
     * Initiate save process.
     *
     * @hidden
     * @returns {void} - Initiate save process.
     */
    Save.prototype.initiateSave = function () {
        this.parent.showSpinner();
    };
    /**
     * Save action completed.
     *
     * @hidden
     * @returns {void} - Save action completed.
     */
    Save.prototype.saveCompleted = function () {
        this.parent.hideSpinner();
    };
    Save.prototype.showErrorDialog = function (args) {
        var _this = this;
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            isModal: true, showCloseIcon: true, height: 180, width: 400, content: args.content,
            beforeOpen: function () { return focus(_this.parent.element); }
        });
    };
    Save.prototype.exportDialog = function (args) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var type = args ? args.item.id.split(this.parent.element.id + '_')[1] : 'xlsx';
        if (isNullOrUndefined(this.parent.element.querySelector('.e-open-dlg'))) {
            var dlg = {
                isModal: true, showCloseIcon: true, cssClass: 'e-open-dlg',
                header: l10n.getConstant('SaveAs'),
                beforeOpen: function (args) {
                    var dlgArgs = {
                        dialogName: l10n.getConstant('SaveAs'),
                        element: args.element, target: args.target, cancel: args.cancel
                    };
                    _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                    if (dlgArgs.cancel) {
                        args.cancel = true;
                    }
                    else {
                        dialogInst.dialogInstance.content = _this.OpenContent(type);
                        dialogInst.dialogInstance.dataBind();
                        _this.parent.element.querySelector('.e-text-open').setSelectionRange(0, _this.parent.element.querySelector('.e-text-open').value.length);
                        focus(_this.parent.element);
                    }
                },
                buttons: [{
                        buttonModel: {
                            content: l10n.getConstant('Save'), isPrimary: true, cssClass: 'e-btn-open-ok'
                        },
                        click: function () {
                            var name = _this.parent.element.querySelector('.e-text-open').value;
                            if (_this.checkValidName(name)) {
                                dialogInst.hide();
                                var type_1 = args ? args.item.id.split(_this.parent.element.id + "_")[1] : 'Xlsx';
                                _this.parent.save({ saveType: type_1, fileName: name });
                            }
                            else {
                                var saveButton = _this.parent.element.querySelector('.e-btn-open-ok');
                                var saveButtonObj = getComponent(saveButton, 'btn');
                                saveButtonObj.disabled = true;
                                var l10n_1 = _this.parent.serviceLocator.getService(locale);
                                var error = name.length === 0 ? l10n_1.getConstant('EmptyFileName') :
                                    (name.length > 218 ? l10n_1.getConstant('LargeName') : l10n_1.getConstant('FileNameError'));
                                var fileSpan = _this.parent.createElement('span', { className: 'e-file-alert-span' });
                                fileSpan.innerText = error;
                                if (_this.parent.element.querySelector('.e-file-alert-span')) {
                                    _this.parent.element.querySelector('.e-file-alert-span').remove();
                                }
                                (_this.parent.element.querySelector('.e-open-dlg').querySelector('.e-dlg-content')).appendChild(fileSpan);
                            }
                        }
                    }]
            };
            dialogInst.show(dlg);
        }
        else {
            dialogInst.hide();
        }
    };
    Save.prototype.checkValidName = function (name) {
        var isValidName = true;
        if (name.match(new RegExp('.*[\\[\\]\\*\\\\/\\?\\:\\<\\>\\|\\"].*')) || name.length < 1 || name.length > 218) {
            isValidName = false;
        }
        return isValidName;
    };
    Save.prototype.OpenContent = function (type) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogElem = this.parent.createElement('div', { className: 'e-open-dialog' });
        var openTextHeader = this.parent.createElement('div', { className: 'e-open-head' });
        var openTextE = this.parent.createElement('div', { className: 'e-input-group' });
        dialogElem.appendChild(openTextHeader);
        dialogElem.appendChild(openTextE);
        var header = l10n.getConstant('FileName');
        var id = this.parent.element.id + "_filename";
        var openTextH = this.parent.createElement('p', { className: 'e-header', id: id, attrs: { 'aria-label': l10n.getConstant('SaveAs') + " " + header } });
        openTextH.innerText = header;
        var openTextIp = this.parent.createElement('input', { className: 'e-input e-text-open', attrs: { 'type': 'Text', 'aria-labelledby': id } });
        var openTextSpan = this.parent.createElement('span', { className: 'e-input-group-icon' });
        openTextIp.onkeyup = function (e) {
            if (_this.parent.element.querySelector('.e-file-alert-span') && e.keyCode !== 13) {
                var saveButton = _this.parent.element.querySelector('.e-btn-open-ok');
                var buttonObj = getComponent(saveButton, 'btn');
                buttonObj.disabled = false;
                _this.parent.element.querySelector('.e-file-alert-span').remove();
            }
        };
        openTextHeader.appendChild(openTextH);
        openTextSpan.textContent = '.' + type.toLowerCase();
        openTextE.appendChild(openTextIp);
        openTextIp.setAttribute('value', 'Sample');
        openTextE.appendChild(openTextSpan);
        return dialogElem;
    };
    return Save;
}());

/**
 * Represents context menu for Spreadsheet.
 */
var ContextMenu = /** @class */ (function () {
    /**
     * Constructor for ContextMenu module.
     *
     * @param {Spreadsheet} parent - Constructor for ContextMenu module.
     */
    function ContextMenu(parent) {
        this.parent = parent;
        this.init();
    }
    ContextMenu.prototype.init = function () {
        this.initContextMenu();
        this.addEventListener();
    };
    ContextMenu.prototype.initContextMenu = function () {
        var ul = document.createElement('ul');
        ul.id = this.parent.element.id + '_contextmenu';
        this.parent.element.appendChild(ul);
        this.contextMenuInstance = new ContextMenu$1({
            cssClass: 'e-spreadsheet-contextmenu',
            target: '#' + this.parent.element.id,
            select: this.selectHandler.bind(this),
            beforeOpen: this.beforeOpenHandler.bind(this),
            beforeClose: this.beforeCloseHandler.bind(this),
            beforeItemRender: function (args) {
                args.element.setAttribute('aria-label', args.item.text);
            }
        }, ul);
        ul.setAttribute('role', 'menu');
    };
    /**
     * Before close event handler.
     *
     * @param {BeforeOpenCloseMenuEventArgs} args - Specify the args
     * @returns {void} - Before close event handler.
     */
    ContextMenu.prototype.beforeCloseHandler = function (args) {
        var _this = this;
        this.parent.trigger('contextMenuBeforeClose', args);
        if (this.parent.enableKeyboardShortcut && args.event && args.event.keyCode === 27) { // Esc key
            getUpdateUsingRaf(function () { return focus(_this.parent.element); });
        }
    };
    /**
     * Select event handler.
     *
     * @param {MenuEventArgs} args - Specify the args
     * @returns {void} - Select event handler.
     */
    ContextMenu.prototype.selectHandler = function (args) {
        var selectArgs = extend({ cancel: false }, args);
        this.parent.trigger('contextMenuItemSelect', selectArgs);
        var id = this.parent.element.id + '_cmenu';
        var range = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
        var prevSort = [];
        if ((args.item.id === id + '_ascending' || args.item.id === id + '_descending') && this.parent.sortCollection) {
            for (var i = this.parent.sortCollection.length - 1; i >= 0; i--) {
                if (this.parent.sortCollection[i] &&
                    this.parent.sortCollection[i].sheetIndex === this.parent.activeSheetIndex) {
                    prevSort.push(this.parent.sortCollection[i]);
                    this.parent.sortCollection.splice(i, 1);
                }
            }
        }
        if (args.item.id === id + '_delete_row' || args.item.id === id + '_delete_column' ||
            args.item.id === id + '_insert_column_before' || args.item.id === id + '_insert_column_after' ||
            args.item.id === id + '_insert_row_above' || args.item.id === id + '_insert_row_below') {
            var row = getRow(this.parent.getActiveSheet(), range[0]);
            var column = getColumn(this.parent.getActiveSheet(), range[1]);
            if ((row && !row.isReadOnly) && (column && !column.isReadOnly)) {
                if (isReadOnlyCells(this.parent, range)) {
                    this.parent.notify(readonlyAlert, null);
                    return;
                }
            }
        }
        if (args.item.id === id + '_ascending' || args.item.id === id + '_descending' || args.item.id === id + '_customsort') {
            var sortRange = getDataRange(range[0], range[1], this.parent.getActiveSheet());
            if (isReadOnlyCells(this.parent, sortRange)) {
                this.parent.notify(readonlyAlert, null);
                return;
            }
        }
        var field;
        if (!selectArgs.cancel) {
            var indexes = void 0;
            switch (args.item.id) {
                case id + '_cut':
                    this.parent.notify(cut, { invokeCopy: true, promise: Promise });
                    break;
                case id + '_copy':
                    this.parent.notify(copy, { invokeCopy: true, promise: Promise });
                    break;
                case id + '_paste':
                    this.parent.notify(paste, { isAction: true, isInternal: true, focus: true });
                    break;
                case id + '_pastevalues':
                    this.parent.notify(paste, { type: 'Values', isAction: true, isInternal: true, focus: true });
                    break;
                case id + '_pasteformats':
                    this.parent.notify(paste, { type: 'Formats', isAction: true, isInternal: true, focus: true });
                    break;
                case id + '_rename':
                    this.parent.notify(renameSheetTab, {});
                    break;
                case id + '_delete_sheet':
                    this.parent.notify(removeSheetTab, {});
                    focus(this.parent.element);
                    break;
                case id + '_insert_sheet':
                    this.parent.notify(insertModel, { model: this.parent, start: this.parent.activeSheetIndex,
                        end: this.parent.activeSheetIndex, modelType: 'Sheet', isAction: true, activeSheetIndex: this.parent.activeSheetIndex });
                    break;
                case id + '_hide_sheet':
                    this.parent.notify(hideSheet, { sheetIndex: this.parent.activeSheetIndex, triggerEvent: true });
                    break;
                case id + '_duplicate':
                    duplicateSheet(this.parent, undefined, true);
                    focus(this.parent.element);
                    break;
                case id + '_move_right':
                    moveSheet(this.parent, this.parent.activeSheetIndex + 1, null, true);
                    focus(this.parent.element);
                    break;
                case id + '_move_left':
                    moveSheet(this.parent, this.parent.activeSheetIndex - 1, null, true);
                    focus(this.parent.element);
                    break;
                case id + '_ascending':
                    this.parent.notify(updateSortCollection, { sortOptions: { sortDescriptors: { order: 'Ascending' } } });
                    this.parent.notify(applySort, { sortOptions: { sortDescriptors: { order: 'Ascending' } }, previousSort: prevSort });
                    break;
                case id + '_descending':
                    this.parent.notify(updateSortCollection, { sortOptions: { sortDescriptors: { order: 'Descending' } } });
                    this.parent.notify(applySort, { sortOptions: { sortDescriptors: { order: 'Descending' } }, previousSort: prevSort });
                    break;
                case id + '_customsort':
                    this.parent.notify(initiateCustomSort, null);
                    break;
                case id + '_filtercellvalue':
                    this.parent.notify(filterByCellValue, null);
                    break;
                case id + '_clearfilter':
                    field = getColumnHeaderText(getCellIndexes(this.parent.getActiveSheet().activeCell)[1] + 1);
                    this.parent.notify(clearFilter, { field: field });
                    break;
                case id + '_reapplyfilter':
                    this.parent.notify(reapplyFilter, null);
                    break;
                case id + '_hide_row':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(hideShow, {
                        startIndex: indexes[0], endIndex: indexes[2], hide: true, isCol: false, actionUpdate: true
                    });
                    break;
                case id + '_unhide_row':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(hideShow, {
                        startIndex: indexes[0], endIndex: indexes[2], hide: false, isCol: false, actionUpdate: true
                    });
                    break;
                case id + '_hide_column':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(hideShow, {
                        startIndex: indexes[1], endIndex: indexes[3], hide: true, isCol: true, actionUpdate: true
                    });
                    break;
                case id + '_unhide_column':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(hideShow, {
                        startIndex: indexes[1], endIndex: indexes[3], hide: false, isCol: true, actionUpdate: true
                    });
                    break;
                case id + '_insert_row_above':
                case id + '_delete_row':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(args.item.id.substr(id.length + 1, 6) + "Model", { model: this.parent.getActiveSheet(), start: indexes[0], end: indexes[2], modelType: 'Row', isAction: true,
                        insertType: 'above' });
                    break;
                case id + '_insert_row_below':
                    indexes = getSwapRange(getRangeIndexes(this.parent.getActiveSheet().selectedRange));
                    this.parent.notify(insertModel, { model: this.parent.getActiveSheet(), start: indexes[2] + 1, end: indexes[2] + 1 + (indexes[2] - indexes[0]), modelType: 'Row', isAction: true,
                        insertType: 'below' });
                    break;
                case id + '_insert_column_before':
                case id + '_delete_column':
                    indexes = getRangeIndexes(this.parent.getActiveSheet().selectedRange);
                    this.parent.notify(args.item.id.substr(id.length + 1, 6) + "Model", { model: this.parent.getActiveSheet(), start: indexes[1], end: indexes[3], modelType: 'Column', isAction: true,
                        insertType: 'before' });
                    break;
                case id + '_insert_column_after':
                    indexes = getSwapRange(getRangeIndexes(this.parent.getActiveSheet().selectedRange));
                    this.parent.notify(insertModel, { model: this.parent.getActiveSheet(), start: indexes[3] + 1, end: indexes[3] + 1 + (indexes[3] - indexes[1]), modelType: 'Column', isAction: true,
                        insertType: 'after' });
                    break;
                case id + '_addNote':
                    this.parent.notify(addNote, null);
                    break;
                case id + '_editNote':
                    this.parent.notify(editNote, null);
                    break;
                case id + '_deleteNote':
                    this.parent.notify(deleteNote, { rowIndex: null, columnIndex: null, isDeleteFromMenu: true });
                    break;
                case id + '_hyperlink':
                    this.parent.notify(initiateHyperlink, null);
                    break;
                case id + '_editHyperlink':
                    this.parent.notify(editHyperlink, null);
                    break;
                case id + '_openHyperlink':
                    this.parent.notify(openHyperlink, null);
                    break;
                case id + '_removeHyperlink':
                    this.parent.notify(removeHyperlink, { range: this.parent.getActiveSheet().selectedRange });
                    break;
                case id + '_protect':
                    this.parent.notify(toggleProtect, {});
                    break;
            }
        }
    };
    ContextMenu.prototype.getInsertModel = function (startIndex, endIndex) {
        var model = [];
        for (var i = startIndex; i <= endIndex; i++) {
            if (i === startIndex) {
                model.push({ index: i });
            }
            else {
                model.push({});
            }
        }
        return model;
    };
    /**
     * Before open event handler.
     *
     * @param {BeforeOpenCloseMenuEventArgs} args - Specify the args.
     * @returns {void} - Before open event handler.
     */
    ContextMenu.prototype.beforeOpenHandler = function (args) {
        var trgt = args.event.target;
        var canOpen;
        var filter = ['e-numericcontainer', 'e-active-cell', 'e-selection', 'e-row', 'e-header-row',
            'e-select-all-cell', 'e-sheet-tabs-items', 'e-spreadsheet-contextmenu'];
        var target;
        var items;
        for (var i = 0, len = filter.length; i < len; i++) {
            if (closest(trgt, '.' + filter[i])) {
                canOpen = true;
                break;
            }
        }
        if (canOpen) {
            target = this.getTarget(trgt);
        }
        else {
            var classesToCheck = ['e-header-cell', 'e-rowhdr-table', 'e-selectall-table', 'e-main-panel'];
            canOpen = classesToCheck.some(function (cls) { return trgt.classList.contains(cls); });
            if (canOpen && (parseInt(trgt.parentElement.style.zIndex, 10) > 1 ||
                parseInt(trgt.parentElement.parentElement.style.zIndex, 10) > 1)) {
                var event_1 = args.event;
                var rowObj = {
                    clientY: event_1.clientY, isImage: false, target: trgt
                };
                var colObj = {
                    clientX: event_1.clientX, isImage: false, target: trgt
                };
                this.parent.notify(getRowIdxFromClientY, rowObj);
                this.parent.notify(getColIdxFromClientX, colObj);
                target = rowObj.size <= 0 ? 'ColumnHeader' : colObj.size <= 0 ? 'RowHeader' : 'Content';
            }
            else {
                canOpen = false;
            }
        }
        if (!canOpen) {
            args.cancel = true;
            return;
        }
        if (args.element.classList.contains('e-contextmenu')) {
            var sheet = this.parent.getActiveSheet();
            if (args.event.target && (trgt.classList.contains('e-rowresize') || trgt.classList.contains('e-colresize'))) {
                var range = getRangeIndexes(sheet.selectedRange);
                if (!(trgt.classList.contains('e-rowresize') ? range[1] === 0 && range[3] === sheet.colCount - 1 :
                    range[0] === 0 && range[2] === sheet.rowCount - 1)) {
                    args.cancel = true;
                    return;
                }
                if (trgt.classList.contains('e-rowresize') ? this.parent.hiddenCount(range[0], range[2]) !== Math.abs(range[2] - range[0]) +
                    1 : this.parent.hiddenCount(range[1], range[3], 'columns') !== Math.abs(range[3] - range[1]) + 1) {
                    items = this.getDataSource(target);
                }
                else {
                    items = this.getDataSource(target, trgt);
                }
            }
            else {
                if (target === 'Content') {
                    var range = getRangeIndexes(sheet.selectedRange);
                    var rowSelect = range[1] === 0 && range[3] === sheet.colCount - 1;
                    var colSelect = range[0] === 0 && range[2] === sheet.rowCount - 1;
                    target = rowSelect && colSelect ? 'SelectAll' : (rowSelect ? 'RowHeader' : (colSelect ? 'ColumnHeader' : 'Content'));
                }
                items = this.getDataSource(target, target === 'Footer' ? trgt : undefined);
            }
            this.contextMenuInstance.items = items;
            this.contextMenuInstance.dataBind();
        }
        else {
            items = args.items;
        }
        if (this.parent.selectionSettings.mode === 'None') {
            if (target === 'Content') {
                this.parent.enableContextMenuItems(['Filter'], false, false);
            }
        }
        if (target === 'ColumnHeader' || target === 'RowHeader') {
            if (args.element && args.element.childElementCount > 0) {
                var insertEle = target === 'ColumnHeader' ? args.element.querySelector('#' + this.parent.element.id + '_cmenu_insert_column') :
                    args.element.querySelector('#' + this.parent.element.id + '_cmenu_insert_row');
                var deleteEle = target ===
                    'ColumnHeader' ? args.element.querySelector('#' + this.parent.element.id + '_cmenu_delete_column') :
                    args.element.querySelector('#' + this.parent.element.id + '_cmenu_delete_row');
                if (this.parent.allowInsert && insertEle.classList.contains('e-disabled')) {
                    insertEle.classList.remove('e-disabled');
                }
                else if ((!this.parent.allowInsert || !!this.parent.element.querySelector('.e-selectall.e-highlight')) &&
                    !insertEle.classList.contains('e-disabled')) {
                    insertEle.classList.add('e-disabled');
                }
                if (this.parent.allowDelete && deleteEle.classList.contains('e-disabled')) {
                    deleteEle.classList.remove('e-disabled');
                }
                else if (!this.parent.allowDelete && !deleteEle.classList.contains('e-disabled')) {
                    deleteEle.classList.add('e-disabled');
                }
                if (this.parent.selectionSettings.mode === 'None') {
                    if (target === 'ColumnHeader') {
                        this.parent.enableContextMenuItems(['Insert Column', 'Delete Column', 'Hide Column'], false, false);
                    }
                    if (target === 'RowHeader') {
                        this.parent.enableContextMenuItems(['Insert Row', 'Delete Row', 'Hide Row'], false, false);
                    }
                }
            }
        }
        else if (target === 'Footer') {
            var sheetIdx = getSheetIndex(this.parent, trgt.textContent);
            if (sheetIdx === 0) {
                args.element.querySelector('#' + this.parent.element.id + '_cmenu_move_left').classList.add('e-disabled');
            }
            if (sheetIdx === this.parent.sheets.length - 1) {
                args.element.querySelector('#' + this.parent.element.id + '_cmenu_move_right').classList.add('e-disabled');
            }
            if (this.parent.selectionSettings.mode === 'None') {
                this.parent.enableContextMenuItems(['Insert'], false, false);
            }
        }
        this.parent.trigger('contextMenuBeforeOpen', args);
        this.parent.notify(cMenuBeforeOpen, extend(args, { target: target, items: items }));
    };
    /**
     * To get target area based on right click.
     *
     * @param {Element} target - Specify the target
     * @returns {string} - To get target area based on right click.
     */
    ContextMenu.prototype.getTarget = function (target) {
        if (closest(target, '.e-sheet-content')) {
            return 'Content';
        }
        else if (closest(target, '.e-column-header')) {
            return target.classList.contains('e-header-cell') ? 'ColumnHeader' : 'Content';
        }
        else if (closest(target, '.e-row-header')) {
            return target.classList.contains('e-header-cell') ? 'RowHeader' : 'Content';
        }
        else if (closest(target, '.e-sheet-tabs-items')) {
            return 'Footer';
        }
        else if (closest(target, '.e-selectall-container')) {
            if (target.classList.contains('e-header-cell')) {
                return closest(target, '.e-header-row') ? 'ColumnHeader' : 'RowHeader';
            }
            return closest(target, '.e-select-all-cell') ? 'SelectAll' : 'Content';
        }
        else {
            return '';
        }
    };
    /**
     * To populate context menu items based on target area.
     *
     * @param {string} target - Specify the target
     * @param {Element} targetEle - Specify the target element
     * @returns {MenuItemModel[]} - To populate context menu items based on target area.
     */
    ContextMenu.prototype.getDataSource = function (target, targetEle) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var items = [];
        var id = this.parent.element.id + '_cmenu';
        if (target === 'Content') {
            this.setClipboardData(items, l10n, id);
            items.push({ separator: true });
            //push filter and sort items here
            this.setFilterItems(items, id);
            this.setSortItems(items, id);
            items.push({ separator: true });
            if (this.parent.enableNotes) {
                this.setNotesMenu(items, id);
                items.push({ separator: true });
            }
            this.setHyperLink(items, id);
        }
        else if (target === 'RowHeader') {
            this.setClipboardData(items, l10n, id);
            var sheet = this.parent.getActiveSheet();
            var indexes = getRangeIndexes(sheet.selectedRange);
            this.setInsertDeleteItems(items, l10n, 'Row', id, [indexes[0], indexes[2]], ['Above', 'Below']);
            if (!targetEle || targetEle.classList.contains('e-rowresize') || !targetEle.parentElement ||
                !targetEle.parentElement.classList.value.includes('e-hide')) {
                this.setHideShowItems(items, l10n, 'Row', id, [indexes[0], indexes[2]]);
            }
        }
        else if (target === 'ColumnHeader') {
            this.setClipboardData(items, l10n, id);
            var sheet = this.parent.getActiveSheet();
            var indexes = getRangeIndexes(sheet.selectedRange);
            this.setInsertDeleteItems(items, l10n, 'Column', id, [indexes[1], indexes[3]], ['Before', 'After']);
            if (!targetEle || !targetEle.classList.value.includes('e-hide')) {
                this.setHideShowItems(items, l10n, 'Column', id, [indexes[1], indexes[3]]);
            }
        }
        else if (target === 'SelectAll') {
            this.setClipboardData(items, l10n, id);
            this.setFilterItems(items, id);
            this.setSortItems(items, id);
        }
        else if (target === 'Footer') {
            items.push({
                text: l10n.getConstant('Insert'), id: id + '_insert_sheet'
            });
            items.push({
                text: l10n.getConstant('Delete'), iconCss: 'e-icons e-delete', id: id + '_delete_sheet'
            });
            items.push({
                text: l10n.getConstant('DuplicateSheet'), id: id + '_duplicate'
            });
            items.push({
                text: l10n.getConstant('Rename'), id: id + '_rename'
            });
            items.push({
                text: l10n.getConstant('Hide'), id: id + '_hide_sheet'
            });
            this.setProtectSheetItems(items, id, targetEle);
            items.push({
                text: l10n.getConstant('MoveRight'), id: id + '_move_right'
            });
            items.push({
                text: l10n.getConstant('MoveLeft'), id: id + '_move_left'
            });
        }
        return items;
    };
    ContextMenu.prototype.setProtectSheetItems = function (items, id, targetEle) {
        var l10n = this.parent.serviceLocator.getService(locale);
        if (getSheet(this.parent, getSheetIndex(this.parent, targetEle.textContent)).isProtected) {
            items.push({
                text: l10n.getConstant('UnprotectSheet'), id: id + '_protect', iconCss: 'e-icons e-protect-icon'
            });
        }
        else {
            items.push({
                text: l10n.getConstant('ProtectSheet'), id: id + '_protect', iconCss: 'e-icons e-protect-icon'
            });
        }
    };
    /**
     * Sets sorting related items to the context menu.
     *
     * @param {MenuItemModel[]} items - Specifies the item
     * @param {string} id - Specify the id.
     * @returns {void} - Sets sorting related items to the context menu.
     */
    ContextMenu.prototype.setFilterItems = function (items, id) {
        if (this.parent.allowFiltering) {
            var l10n = this.parent.serviceLocator.getService(locale);
            var args = { clearFilterText: null, isFiltered: false };
            this.parent.notify(getFilteredColumn, args);
            items.push({
                text: l10n.getConstant('Filter'), id: id + '_filter',
                iconCss: '',
                items: [
                    { text: args.clearFilterText, iconCss: 'e-icons e-filter-clear', id: id + '_clearfilter' },
                    { text: l10n.getConstant('ReapplyFilter'), iconCss: 'e-icons e-filter-reapply', id: id + '_reapplyfilter' },
                    { separator: true },
                    { text: l10n.getConstant('FilterCellValue'), iconCss: '', id: id + '_filtercellvalue' }
                ]
            });
        }
    };
    /**
     * Sets sorting related items to the context menu.
     *
     * @param {MenuItemModel[]} items - Specifies the item
     * @param {string} id - Specify the id.
     * @returns {void} - Sets sorting related items to the context menu.
     */
    ContextMenu.prototype.setSortItems = function (items, id) {
        var l10n = this.parent.serviceLocator.getService(locale);
        if (this.parent.allowSorting) {
            items.push({
                text: l10n.getConstant('Sort'), id: id + '_sort',
                iconCss: 'e-icons e-sort-icon',
                items: [
                    { text: l10n.getConstant('SortAscending'), iconCss: 'e-icons e-sort-asc', id: id + '_ascending' },
                    { text: l10n.getConstant('SortDescending'), iconCss: 'e-icons e-sort-desc', id: id + '_descending' },
                    { text: l10n.getConstant('CustomSort') + '...', iconCss: 'e-icons e-sort-custom', id: id + '_customsort' }
                ]
            });
        }
    };
    ContextMenu.prototype.setHyperLink = function (items, id) {
        if (this.parent.allowHyperlink) {
            var l10n = this.parent.serviceLocator.getService(locale);
            var sheet = this.parent.getActiveSheet();
            var indexes = getCellIndexes(sheet.activeCell);
            var td = this.parent.getCell(indexes[0], indexes[1]);
            if (isNullOrUndefined(td)) {
                items.push({
                    text: l10n.getConstant('Hyperlink'), iconCss: 'e-icons e-hyperlink-icon', id: id + '_hyperlink'
                });
            }
            else if (!td.getElementsByClassName('e-hyperlink')[0] &&
                !td.classList.contains('e-hyperlink')) {
                items.push({
                    text: l10n.getConstant('Hyperlink'), iconCss: 'e-icons e-hyperlink-icon', id: id + '_hyperlink'
                });
            }
            else {
                items.push({ text: l10n.getConstant('EditHyperlink'), iconCss: 'e-icons e-edithyperlink-icon', id: id + '_editHyperlink' }, { text: l10n.getConstant('OpenHyperlink'), iconCss: 'e-icons e-openhyperlink-icon', id: id + '_openHyperlink' }, { text: l10n.getConstant('RemoveHyperlink'), iconCss: 'e-icons e-removehyperlink-icon', id: id + '_removeHyperlink' });
            }
        }
    };
    ContextMenu.prototype.setNotesMenu = function (items, id) {
        if (this.parent.enableNotes) {
            var l10n = this.parent.serviceLocator.getService(locale);
            var cellIndexes = getCellIndexes(this.parent.getActiveSheet().activeCell);
            var targetElement = this.parent.getCell(cellIndexes[0], cellIndexes[1]);
            if (!isNullOrUndefined(targetElement) && targetElement.children.length > 0 && targetElement.children[(targetElement.children.length - 1)].className.indexOf('addNoteIndicator') > -1) {
                items.push({ text: l10n.getConstant('EditNote'), iconCss: 'e-icons e-edit-notes', id: id + '_editNote' }, { text: l10n.getConstant('DeleteNote'), iconCss: 'e-icons e-delete-notes', id: id + '_deleteNote' });
            }
            else {
                items.push({
                    text: l10n.getConstant('AddNote'), iconCss: 'e-icons e-add-notes', id: id + '_addNote'
                });
            }
        }
    };
    ContextMenu.prototype.setClipboardData = function (items, l10n, id) {
        if (this.parent.enableClipboard) {
            items.push({
                text: l10n.getConstant('Cut'),
                iconCss: 'e-icons e-cut-icon', id: id + '_cut'
            });
            items.push({
                text: l10n.getConstant('Copy'),
                iconCss: 'e-icons e-copy-icon', id: id + '_copy'
            });
            items.push({
                text: l10n.getConstant('Paste'),
                iconCss: 'e-icons e-paste-icon', id: id + '_paste'
            });
            items.push({
                text: l10n.getConstant('PasteSpecial'), id: id + '_pastespecial',
                items: [
                    { text: l10n.getConstant('Values'), id: id + '_pastevalues' },
                    { text: l10n.getConstant('Formats'), id: id + '_pasteformats' }
                ]
            });
        }
    };
    ContextMenu.prototype.setInsertDeleteItems = function (items, l10n, layout, id, indexes, subItems) {
        items.push({ separator: true });
        ['Insert', 'Delete'].forEach(function (action) {
            if (indexes[0] === indexes[1]) {
                items.push({ text: l10n.getConstant("" + action + layout), id: id + ("_" + action.toLowerCase() + "_" + layout.toLowerCase()) });
            }
            else {
                items.push({ text: l10n.getConstant("" + action + layout + "s"), id: id + ("_" + action.toLowerCase() + "_" + layout.toLowerCase()) });
            }
            if (action === 'Insert') {
                items[items.length - 1].items = [];
                subItems.forEach(function (item) {
                    items[items.length - 1].items.push({
                        text: l10n.getConstant(item), id: items[items.length - 1].id + "_" + item.toLowerCase()
                    });
                });
            }
        });
    };
    ContextMenu.prototype.setHideShowItems = function (items, l10n, layout, id, indexes) {
        if (indexes[0] === indexes[1]) {
            items.push({ text: l10n.getConstant("Hide" + layout), id: id + ("_hide_" + layout.toLowerCase()) });
        }
        else {
            var StartIdx = indexes[0];
            indexes[0] = indexes[0] > indexes[1] ? indexes[1] : indexes[0];
            indexes[1] = indexes[1] > StartIdx ? indexes[1] : StartIdx;
            items.push({ text: l10n.getConstant("Hide" + layout + "s"), id: id + ("_hide_" + layout.toLowerCase()) });
        }
        if (this.parent.hiddenCount(indexes[0], indexes[1], layout.toLowerCase() + "s")) {
            items.push({ text: l10n.getConstant("Unhide" + layout + "s"), id: id + ("_unhide_" + layout.toLowerCase()) });
        }
    };
    /**
     * To add event listener.
     *
     * @returns {void} - To add event listener.
     */
    ContextMenu.prototype.addEventListener = function () {
        this.parent.on(addContextMenuItems, this.addItemsHandler, this);
        this.parent.on(removeContextMenuItems, this.removeItemsHandler, this);
        this.parent.on(enableContextMenuItems, this.enableItemsHandler, this);
    };
    /**
     * To add context menu items before / after particular item.
     *
     * @param {InsertArgs} args - Specify the add item handler
     * @returns {void} - To add context menu items before / after particular item.
     */
    ContextMenu.prototype.addItemsHandler = function (args) {
        if (args.insertAfter) {
            this.contextMenuInstance.insertAfter(args.items, args.text, args.isUniqueId);
        }
        else {
            this.contextMenuInstance.insertBefore(args.items, args.text, args.isUniqueId);
        }
    };
    /**
     * To remove context menu items.
     *
     * @param {RemoveArgs} args - Specifies the args
     * @returns {void} - To remove context menu items.
     */
    ContextMenu.prototype.removeItemsHandler = function (args) {
        this.contextMenuInstance.removeItems(args.items, args.isUniqueId);
    };
    /**
     * To enable / disable context menu items.
     *
     * @param {EnableDisableArgs} args - Specifies the args
     * @returns {void} - To enable / disable context menu items.
     */
    ContextMenu.prototype.enableItemsHandler = function (args) {
        this.contextMenuInstance.enableItems(args.items, args.enable, args.isUniqueId);
    };
    /**
     * To remove event listener.
     *
     * @returns {void} - To remove event listener.
     */
    ContextMenu.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(addContextMenuItems, this.addItemsHandler);
            this.parent.off(removeContextMenuItems, this.removeItemsHandler);
            this.parent.off(enableContextMenuItems, this.enableItemsHandler);
        }
    };
    /**
     * To get module name.
     *
     * @returns {string} - To get module name.
     */
    ContextMenu.prototype.getModuleName = function () {
        return 'contextMenu';
    };
    /**
     * Destroy method.
     *
     * @returns {void} - Destroy method.
     */
    ContextMenu.prototype.destroy = function () {
        this.removeEventListener();
        this.contextMenuInstance.destroy();
        var ele = document.getElementById(this.parent.element.id + '_contextmenu');
        if (ele) {
            detach(ele);
        }
        this.contextMenuInstance = null;
        this.parent = null;
    };
    return ContextMenu;
}());

/**
 * Specifies number format.
 */
var NumberFormat = /** @class */ (function () {
    function NumberFormat(parent) {
        this.parent = parent;
        this.addEventListener();
        //Spreadsheet.Inject(WorkbookNumberFormat);
    }
    NumberFormat.prototype.refreshCellElement = function (args) {
        this.parent.refreshNode(args.td, args);
    };
    NumberFormat.prototype.getTextSpace = function (args) {
        args.width = getTextWidth(args.char, args.cell.style, this.parent.cellStyle);
    };
    NumberFormat.prototype.rowFillHandler = function (args) {
        var cellElem = args.cellEle;
        if (cellElem) {
            var repeatCharSpan = void 0;
            var endCol = args.colIdx;
            if (args.cell.colSpan > 1) {
                var mergeArgs = { range: [args.rowIdx, args.colIdx, args.rowIdx, args.colIdx] };
                this.parent.notify(activeCellMergedRange, mergeArgs);
                endCol = mergeArgs.range[3];
            }
            var cellWidth = getExcludedColumnWidth(this.parent.getActiveSheet(), args.rowIdx, args.colIdx, endCol);
            var iconSetSpan = args.iconSetSpan || cellElem.querySelector('.e-iconsetspan');
            if (iconSetSpan) {
                cellWidth -= iconSetSpan.getBoundingClientRect().width;
            }
            if (args.updateFillSize) {
                repeatCharSpan = cellElem.querySelector('.e-fill');
                if (!repeatCharSpan || !repeatCharSpan.textContent) {
                    return;
                }
                args.repeatChar = repeatCharSpan.textContent[0];
                var beforeSpan = cellElem.querySelector('.e-fill-before');
                if (beforeSpan) {
                    cellWidth -= getTextWidth(beforeSpan.textContent, args.cell.style, this.parent.cellStyle);
                }
                var textSpan = cellElem.querySelector('.e-fill-sec');
                if (textSpan) {
                    cellWidth -= getTextWidth(textSpan.textContent, args.cell.style, this.parent.cellStyle);
                }
            }
            else {
                var noteIndicator = cellElem.querySelector('.e-addNoteIndicator');
                cellElem.innerText = '';
                if (args.beforeFillText) {
                    var beforeSpan = this.parent.createElement('span', { className: 'e-fill-before', styles: "float: " + (this.parent.enableRtl ? 'right' : 'left') });
                    beforeSpan.innerText = args.beforeFillText;
                    cellElem.appendChild(beforeSpan);
                    cellWidth -= getTextWidth(args.beforeFillText, args.cell.style, this.parent.cellStyle);
                }
                repeatCharSpan = this.parent.createElement('span', { className: 'e-fill' });
                cellElem.appendChild(repeatCharSpan);
                if (args.afterFillText) {
                    var textSpan = this.parent.createElement('span', { className: 'e-fill-sec' });
                    textSpan.innerText = args.afterFillText;
                    cellElem.appendChild(textSpan);
                    cellWidth -= getTextWidth(args.afterFillText, args.cell.style, this.parent.cellStyle);
                }
                if (iconSetSpan) {
                    cellElem.insertBefore(iconSetSpan, cellElem.childNodes[0]);
                }
                if (noteIndicator) {
                    cellElem.appendChild(noteIndicator);
                }
            }
            var repeatCharWidth = getTextWidth(args.repeatChar, args.cell.style, this.parent.cellStyle);
            var repeatCount = parseInt((cellWidth / repeatCharWidth).toString(), 10);
            args.formattedText = repeatCount > 0 ? args.repeatChar.repeat(repeatCount) : '';
            repeatCharSpan.textContent = args.formattedText;
        }
    };
    /**
     * Adding event listener for number format.
     *
     * @hidden
     * @returns {void} - Adding event listener for number format.
     */
    NumberFormat.prototype.addEventListener = function () {
        this.parent.on(refreshCellElement, this.refreshCellElement, this);
        this.parent.on(rowFillHandler, this.rowFillHandler, this);
        this.parent.on(getTextSpace, this.getTextSpace, this);
    };
    /**
     * Removing event listener for number format.
     *
     * @hidden
     * @returns {void} - Removing event listener for number format.
     */
    NumberFormat.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(refreshCellElement, this.refreshCellElement);
            this.parent.off(rowFillHandler, this.rowFillHandler);
            this.parent.off(getTextSpace, this.getTextSpace);
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    NumberFormat.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the workbook import module name.
     *
     * @returns {string} - Get the workbook import module name.
     */
    NumberFormat.prototype.getModuleName = function () {
        return 'numberFormat';
    };
    return NumberFormat;
}());

/**
 * `Sort` module is used to handle the sort action in Spreadsheet.
 */
var Sort = /** @class */ (function () {
    /**
     * Constructor for sort module.
     *
     * @param {Spreadsheet} parent - Specifies the Spreadsheet instance.
     */
    function Sort(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * To destroy the sort module.
     *
     * @returns {void}
     */
    Sort.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    Sort.prototype.addEventListener = function () {
        this.parent.on(applySort, this.applySortHandler, this);
        this.parent.on(sortComplete, this.sortCompleteHandler, this);
        this.parent.on(initiateCustomSort, this.initiateCustomSortHandler, this);
        this.parent.on(sortImport, this.sortImport, this);
    };
    Sort.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(applySort, this.applySortHandler);
            this.parent.off(sortComplete, this.sortCompleteHandler);
            this.parent.off(initiateCustomSort, this.initiateCustomSortHandler);
            this.parent.off(sortImport, this.sortImport);
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    Sort.prototype.getModuleName = function () {
        return 'sort';
    };
    /**
     * Validates the range and returns false when invalid.
     *
     * @returns {boolean} - Validates the range and returns false when invalid.
     */
    Sort.prototype.isValidSortRange = function () {
        var sheet = this.parent.getActiveSheet();
        var range = getSwapRange(getIndexesFromAddress(sheet.selectedRange));
        if (range[0] > sheet.usedRange.rowIndex || range[1] > sheet.usedRange.colIndex) {
            return false;
        }
        return true;
    };
    /**
     * sort while importing.
     *
     * @param {any} args - Specifies the args
     * @param {number} args.sheetIdx - Specifies the sheet index
     * @returns {void}
     */
    Sort.prototype.sortImport = function (args) {
        var sort = this.parent.sortCollection;
        var cell;
        var rowId = this.parent.getActiveSheet().usedRange.rowIndex - 1;
        var sheetIdx = args ? args.sheetIdx : this.parent.activeSheetIndex;
        for (var j = 0; j < sort.length; j++) {
            if (sort[j].sheetIndex === sheetIdx) {
                for (var i = 0; i < rowId; i++) {
                    cell = this.parent.getCell(i, sort[j].columnIndex);
                    if (cell && cell.querySelector('.e-filter-icon')) {
                        if (sort[j].order === 'Ascending' || sort[j].order === 'OnTop') {
                            if (!cell.querySelector('.e-filter-icon').classList.contains('e-sortasc-filter')) {
                                cell.querySelector('.e-filter-icon').classList.add('e-sortasc-filter');
                            }
                        }
                        else {
                            if (!cell.querySelector('.e-filter-icon').classList.contains('e-sortdesc-filter')) {
                                cell.querySelector('.e-filter-icon').classList.add('e-sortdesc-filter');
                            }
                        }
                        return;
                    }
                }
            }
        }
    };
    /**
     * Shows the range error alert dialog.
     *
     * @param {object} args - specify the args
     * @param {string} args.error - range error string.
     * @returns {void}
     */
    Sort.prototype.sortRangeAlertHandler = function (args) {
        var _this = this;
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var l10n = this.parent.serviceLocator.getService(locale);
        dialogInst.show({
            height: 180, width: 400, isModal: true, showCloseIcon: true,
            content: args.error,
            beforeOpen: function (openArgs) {
                var dlgArgs = {
                    dialogName: args.error === l10n.getConstant('MultiRangeSortError') ? 'MultiRangeSortDialog' : 'SortRangeDialog',
                    content: args.error,
                    element: openArgs.element, target: openArgs.target, cancel: openArgs.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    openArgs.cancel = true;
                }
                else {
                    dialogInst.dialogInstance.content = dlgArgs.content;
                    focus(_this.parent.element);
                }
            }
        });
        this.parent.hideSpinner();
    };
    /**
     * Initiates the custom sort dialog.
     *
     * @returns {void}
     */
    Sort.prototype.initiateCustomSortHandler = function () {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var sheet = this.parent.getActiveSheet();
        if (!this.isValidSortRange() || sheet.rows.length === 0) {
            this.sortRangeAlertHandler({ error: l10n.getConstant('SortOutOfRangeError') });
            return;
        }
        if (isDiscontinuousRange(sheet.selectedRange)) {
            this.sortRangeAlertHandler({ error: l10n.getConstant('MultiRangeSortError') });
            return;
        }
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        var sortOptions;
        dialogInst.show({
            height: 400, width: 560, isModal: true, showCloseIcon: true, cssClass: 'e-customsort-dlg',
            header: l10n.getConstant('CustomSort'),
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'CustomSortDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                else {
                    dialogInst.dialogInstance.content = _this.customSortContent();
                    dialogInst.dialogInstance.dataBind();
                    focus(_this.parent.element);
                }
            },
            buttons: [{
                    buttonModel: { content: l10n.getConstant('Ok'), isPrimary: true },
                    click: function () {
                        var element = dialogInst.dialogInstance.content;
                        var listview = getComponent(element.getElementsByClassName('e-list-sort e-listview e-lib')[0], 'listview');
                        var data = listview.dataSource;
                        _this.clearError();
                        var errorElem = element.getElementsByClassName('e-sort-error')[0];
                        errorElem.style.display = 'block';
                        if (!_this.validateError(data, element, errorElem)) {
                            sortOptions = { sortDescriptors: data, containsHeader: element.getElementsByClassName('e-sort-checkheader')[0].checked,
                                caseSensitive: element.getElementsByClassName('e-sort-checkcase')[0].checked };
                            dialogInst.hide();
                        }
                    }
                }],
            close: function () {
                if (sortOptions) {
                    getUpdateUsingRaf(function () { return _this.applySortHandler({ sortOptions: sortOptions }); });
                }
            }
        });
    };
    /**
     * Validates the errors of the sort criteria and displays the error.
     *
     * @param {Object} json - listview datasource.
     * @param {HTMLElement} dialogElem - dialog content element.
     * @param {HTMLElement} errorElem - element to display error.
     * @returns {boolean} - Return boolean value.
     */
    Sort.prototype.validateError = function (json, dialogElem, errorElem) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var hasEmpty = json.some(function (element) { return element.field.toString() === ''; });
        if (hasEmpty) {
            Array.prototype.some.call(dialogElem.getElementsByClassName('e-sort-field'), function (dropDown) {
                var hasError = !getComponent(dropDown, 'dropdownlist').value;
                if (hasError) {
                    dropDown.parentElement.classList.add('e-error');
                }
                return hasError; //breaks the loop if only one error added.
            });
            errorElem.innerText = l10n.getConstant('SortEmptyFieldError');
            return true;
        }
        var temp = new Set();
        var duplicateField = '';
        var hasDuplicate = json.some(function (element) {
            duplicateField = element.field.toString();
            return temp.size === temp.add(element.field).size;
        });
        var errorField = '';
        if (hasDuplicate) {
            var count_1 = 0;
            Array.prototype.some.call(dialogElem.getElementsByClassName('e-sort-field'), function (dropDown) {
                var dropDownList = getComponent(dropDown, 'dropdownlist');
                if (dropDownList.value === duplicateField) {
                    dropDown.parentElement.classList.add('e-error');
                    errorField = dropDownList.text;
                    count_1++;
                }
                return count_1 === 2; //breaks the loop when 2 errors added.
            });
            errorElem.innerText = '';
            var errorFieldEle = this.parent.createElement('strong');
            errorFieldEle.innerText = errorField;
            errorElem.appendChild(errorFieldEle);
            errorElem.appendChild(document.createTextNode(l10n.getConstant('SortDuplicateFieldError')));
            return true;
        }
        return false;
    };
    /**
     * Creates all the elements and generates the dialog content element.
     *
     * @returns {HTMLElement} - Returns the dialog element.
     */
    Sort.prototype.customSortContent = function () {
        var dialogElem = this.parent.createElement('div', { className: 'e-sort-dialog' });
        var fields = this.getFields();
        var listId = getUniqueID('customSort');
        var listviewObj = this.getCustomListview(listId);
        this.setHeaderTab(dialogElem, listviewObj, fields);
        var contentElem = this.parent.createElement('div', {
            className: 'e-sort-listsection',
            styles: ''
        });
        dialogElem.appendChild(contentElem);
        var listview = this.parent.createElement('div', { className: 'e-list-sort', styles: '' });
        contentElem.appendChild(listview);
        listviewObj.createElement = this.parent.createElement;
        listviewObj.appendTo(listview);
        listview.removeAttribute('tabindex');
        this.renderListItem(listId, listviewObj, true, fields);
        var errorElem = this.parent.createElement('div', { className: 'e-sort-error' });
        dialogElem.appendChild(errorElem);
        return dialogElem;
    };
    /**
     * Gets the fields data from the selected range.
     *
     * @returns {Object} - Gets the fields data from the selected range.
     */
    Sort.prototype.getFields = function () {
        var sheet = this.parent.getActiveSheet();
        var range = getSwapRange(getIndexesFromAddress(sheet.selectedRange));
        if (range[0] === range[2] && (range[2] - range[0]) === 0) { //for entire range
            range[0] = 0;
            range[1] = 0;
            range[3] = sheet.usedRange.colIndex;
            var args = { filterRange: [], hasFilter: false };
            this.parent.notify(getFilterRange, args);
            if (args.hasFilter && args.filterRange) {
                range[0] = args.filterRange[0];
            }
        }
        var fields = [];
        var text;
        var value;
        for (range[1]; range[1] <= range[3]; range[1]++) {
            var cell = getCell(range[0], range[1], sheet);
            value = 'Column ' + getColumnHeaderText(range[1] + 1);
            if (cell && cell.value) {
                text = cell.value;
                if (cell.format) {
                    var eventArgs = { formattedText: text, value: text, format: cell.format, rowIndex: range[0],
                        colIndex: range[1] };
                    this.parent.notify(getFormattedCellObject, eventArgs);
                    text = eventArgs.formattedText;
                }
            }
            else {
                text = value;
            }
            fields.push({ text: text, value: value });
        }
        return fields;
    };
    /**
     * Creates the header tab for the custom sort dialog.
     *
     * @param {HTMLElement} dialogElem - dialog content element.
     * @param {ListView} listviewObj - listview instance.
     * @param {Object} fields - fields data.
     * @returns {void} - set header tab.
     */
    Sort.prototype.setHeaderTab = function (dialogElem, listviewObj, fields) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var headerTabElement = this.parent.createElement('div', { className: 'e-sort-header' });
        dialogElem.appendChild(headerTabElement);
        var addButton = this.parent.createElement('button', { className: 'e-btn e-sort-addbtn e-flat', attrs: { 'type': 'button' } });
        addButton.innerText = l10n.getConstant('AddColumn');
        var footer = this.parent.element.querySelector('.e-customsort-dlg .e-footer-content');
        footer.insertBefore(addButton, footer.firstElementChild);
        addButton.addEventListener('click', function () {
            if (listviewObj) {
                var listId = getUniqueID('customSort');
                listviewObj.addItem([{ id: listId, text: l10n.getConstant('ThenBy'), field: '', order: 'ascending' }]);
                _this.renderListItem(listId, listviewObj, checkHeaderObj.checked, fields, true);
            }
        });
        var checkHeaderObj = new CheckBox({
            label: l10n.getConstant('ContainsHeader'),
            checked: true,
            change: function (args) {
                var fieldsMap = args.checked ? { text: 'text', value: 'value' } : { text: 'value' };
                Array.prototype.forEach.call(dialogElem.getElementsByClassName('e-sort-field e-dropdownlist e-lib'), function (dropDown) {
                    var dropDownListObj = getComponent(dropDown, 'dropdownlist');
                    dropDownListObj.dataSource = null; //reset datasource.
                    dropDownListObj.dataSource = fields;
                    dropDownListObj.fields = fieldsMap;
                    dropDownListObj.dataBind();
                });
            },
            cssClass: 'e-sort-headercheckbox'
        });
        var headerCheckbox = this.parent.createElement('input', {
            className: 'e-sort-checkheader', attrs: { type: 'checkbox' }
        });
        headerTabElement.appendChild(headerCheckbox);
        checkHeaderObj.createElement = this.parent.createElement;
        checkHeaderObj.appendTo(headerCheckbox);
        var checkCaseObj = new CheckBox({
            label: l10n.getConstant('CaseSensitive'),
            checked: false,
            cssClass: 'e-sort-casecheckbox'
        });
        var caseCheckbox = this.parent.createElement('input', {
            className: 'e-sort-checkcase', attrs: { type: 'checkbox' }
        });
        headerTabElement.appendChild(caseCheckbox);
        checkCaseObj.createElement = this.parent.createElement;
        checkCaseObj.appendTo(caseCheckbox);
    };
    /**
     * Creates a listview instance.
     *
     * @param {string} listId - unique id of the list item.
     * @returns {void}
     */
    Sort.prototype.getCustomListview = function (listId) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var data = [{ id: listId, text: l10n.getConstant('SortBy'), field: '', order: 'ascending' }];
        enableRipple(false);
        var listviewObj = new ListView({
            dataSource: data,
            fields: { id: 'id' },
            height: '100%',
            /* eslint-disable */
            template: initializeCSPTemplate(function (data) {
                return ('<div class="e-sort-listwrapper">' +
                    ("<span class=\"text\">" + data.text + "</span>") +
                    '<div class="e-sort-row"><div class="e-sort-field"></div>' +
                    '<div class="e-sort-order">' +
                    ("<span class=\"e-sort-ordertxt\" style=\"display:none;\">" + data.order + "</span></div>") +
                    '<span class="e-icons e-sort-delete" tabindex="0"></span></div>');
            }),
            /* eslint-enable */
            cssClass: 'e-sort-template'
        });
        return listviewObj;
    };
    /**
     * Triggers the click event for delete icon.
     *
     * @param {Element} element - current list item element.
     * @param {ListView} listviewObj - listview instance.
     * @returns {void}
     */
    Sort.prototype.deleteHandler = function (element, listviewObj) {
        var iconEle = element.getElementsByClassName('e-sort-delete')[0];
        //Event handler to bind the click event for delete icon
        iconEle.addEventListener('click', function () {
            if (element) {
                listviewObj.removeItem(element);
            }
        });
    };
    /**
     * Renders the dropdown and radio button components inside list item.
     *
     * @param {string} id - unique id of the list item.
     * @param {ListView} lvObj - listview instance.
     * @param {boolean} containsHeader - data contains header.
     * @param {string} fields - fields data.
     * @param {boolean} btn - boolean value.
     * @returns {void}
     */
    Sort.prototype.renderListItem = function (id, lvObj, containsHeader, fields, btn) {
        var _this = this;
        var l10n = this.parent.serviceLocator.getService(locale);
        var element = lvObj.element.querySelector('li[data-uid=' + id + ']');
        var fieldsMap = containsHeader ? { text: 'text', value: 'value' } : { text: 'value' };
        var dropDown = element.getElementsByClassName('e-sort-field')[0];
        var dropDownListObj = new DropDownList({
            dataSource: fields,
            width: 'auto',
            cssClass: 'e-sort-field-ddl',
            fields: fieldsMap,
            placeholder: l10n.getConstant('SelectAColumn'),
            change: function (args) {
                if (!args.value) {
                    return;
                }
                Array.prototype.some.call(lvObj.dataSource, function (item) {
                    if (item.id === id) {
                        item.field = args.value.toString().replace('Column ', '');
                    }
                    return item.id === id; //breaks the loop when proper id found
                });
                _this.clearError();
            }
        });
        dropDownListObj.createElement = this.parent.createElement;
        dropDownListObj.appendTo(dropDown);
        if (!btn) {
            dropDownListObj.index = 0;
        }
        /* sort ascending radio button */
        var orderRadio = element.getElementsByClassName('e-sort-order')[0];
        var ordertxtElem = orderRadio.getElementsByClassName('e-sort-ordertxt')[0];
        var isAscending = ordertxtElem.innerText.toLocaleLowerCase() === 'ascending';
        var radiobutton = new RadioButton({
            label: l10n.getConstant('SortAscending'),
            name: 'sortAZ_' + id, value: 'ascending', checked: isAscending, cssClass: 'e-sort-radiobutton',
            change: function (args) { _this.setRadioBtnValue(lvObj, id, args.value); }
        });
        var radio = this.parent.createElement('input', {
            id: 'orderAsc_' + id, className: 'e-sort-radioasc', styles: '', attrs: { type: 'radio' }
        });
        orderRadio.appendChild(radio);
        radiobutton.createElement = this.parent.createElement;
        radiobutton.appendTo(radio);
        /* sort descending radio button */
        var radiobutton2 = new RadioButton({
            label: l10n.getConstant('SortDescending'),
            name: 'sortAZ_' + id, value: 'descending', checked: !isAscending, cssClass: 'e-sort-radiobutton',
            change: function (args) { _this.setRadioBtnValue(lvObj, id, args.value); }
        });
        var radio2 = this.parent.createElement('input', {
            id: 'orderDesc_' + id, className: 'e-sort-radiodesc', styles: '', attrs: { type: 'radio' }
        });
        orderRadio.appendChild(radio2);
        radiobutton2.createElement = this.parent.createElement;
        radiobutton2.appendTo(radio2);
        this.deleteHandler(element, lvObj);
    };
    /**
     * Sets the new value of the radio button.
     *
     * @param {ListView} listviewObj - listview instance.
     * @param {string} id - unique id of the list item.
     * @param {string} value - new value.
     * @returns {void}
     */
    Sort.prototype.setRadioBtnValue = function (listviewObj, id, value) {
        if (!value) {
            return;
        }
        Array.prototype.some.call(listviewObj.dataSource, function (item) {
            if (item.id === id) {
                item.order = value;
            }
            return item.id === id; //breaks the loop when proper id found
        });
    };
    /**
     *
     * Clears the error from the dialog.
     *
     * @returns {void}
     */
    Sort.prototype.clearError = function () {
        var dialogElem = document.getElementsByClassName('e-sort-dialog')[0];
        var errorElem = dialogElem.getElementsByClassName('e-sort-error')[0];
        if (errorElem.style.display !== 'none' && errorElem.innerHTML !== '') {
            errorElem.style.display = 'none';
            Array.prototype.forEach.call(dialogElem.getElementsByClassName('e-error'), function (element) {
                element.classList.remove('e-error');
            });
        }
    };
    /**
     * Triggers sort events and applies sorting.
     *
     * @param {Object} args - Specifies the args.
     * @param {SortOptions} args.sortOptions - Specifies the sort options.
     * @param {string} args.range - Specifies the range.
     * @param {SortCollectionModel} args.previousSort - Specifies the previous sort collection.
     * @returns {void}
     */
    Sort.prototype.applySortHandler = function (args) {
        var _this = this;
        var sheet = this.parent.getActiveSheet();
        var address = args && args.range || sheet.selectedRange;
        var range = getSwapRange(getIndexesFromAddress(address));
        var sortOptions = args && args.sortOptions || { sortDescriptors: {} };
        var isSingle = range[0] === range[2];
        var eventArgs = { filterRange: [], hasFilter: false, sheetIdx: this.parent.activeSheetIndex };
        this.parent.notify(getFilterRange, eventArgs);
        if (eventArgs.hasFilter && (isSingle ? inRange(eventArgs.filterRange, range[0], range[1]) : (eventArgs.filterRange[0] ===
            range[0] && (this.parent.element.querySelector('.e-selectall.e-highlight') || (range[1] >= eventArgs.filterRange[1] && range[1]
            <= eventArgs.filterRange[3]) || (range[3] >= eventArgs.filterRange[1] && range[3] <= eventArgs.filterRange[3]))))) {
            range[0] = eventArgs.filterRange[0];
            range[1] = eventArgs.filterRange[1];
            range[2] = sheet.usedRange.rowIndex;
            range[3] = sheet.usedRange.colIndex;
            sortOptions.containsHeader = !eventArgs.allowHeaderFilter;
            isSingle = false;
        }
        address = getRangeAddress(range);
        var beforeArgs = { range: address, sortOptions: sortOptions, cancel: false };
        this.parent.trigger(beforeSort, beforeArgs);
        if (beforeArgs.cancel) {
            return;
        }
        this.parent.notify(beginAction, { eventArgs: beforeArgs, action: 'beforeSort' });
        this.parent.showSpinner();
        var promise = new Promise(function (resolve) { resolve((function () { })()); });
        var sortArgs = { args: { range: beforeArgs.range, sortOptions: beforeArgs.sortOptions, checkForHeader: isSingle && address !== beforeArgs.range }, promise: promise, previousSort: args && args.previousSort };
        this.parent.notify(initiateSort, sortArgs);
        sortArgs.promise.then(function (sortArgs) {
            _this.sortCompleteHandler(sortArgs);
            _this.parent.trigger(sortComplete, sortArgs);
            _this.parent.notify(completeAction, { eventArgs: sortArgs, action: 'sorting' });
            if (document.activeElement.tagName === 'BODY') {
                focus(_this.parent.element);
            }
            return Promise.resolve(sortArgs);
        }).catch(function (error) {
            _this.sortRangeAlertHandler({ error: error });
            return Promise.reject(error);
        });
    };
    /**
     *
     * Invoked when the sort action is completed.
     *
     * @param {SortEventArgs} args - Specifies the range and sort options.
     * @returns {void}
     */
    Sort.prototype.sortCompleteHandler = function (args) {
        var sheet;
        var range;
        var sheetIdx = this.parent.activeSheetIndex;
        if (args.range.includes('!')) {
            var lastIndex = args.range.lastIndexOf('!');
            sheetIdx = getSheetIndex(this.parent, args.range.substring(0, lastIndex));
            sheet = getSheet(this.parent, sheetIdx);
            range = getRangeIndexes(args.range.substring(lastIndex + 1));
        }
        else {
            sheet = this.parent.getActiveSheet();
            range = getRangeIndexes(args.range);
        }
        for (var i = range[0]; i <= range[2]; i++) {
            for (var j = range[1]; j <= range[3]; j++) {
                this.parent.notify(workbookFormulaOperation, { action: 'refreshCalculate', rowIndex: i, colIndex: j });
            }
        }
        this.parent.serviceLocator.getService('cell').refreshRange(range, true, true, false, false, isImported(this.parent), undefined, undefined, undefined, true);
        if (sheetIdx === this.parent.activeSheetIndex && sheet.conditionalFormats && sheet.conditionalFormats.length) {
            this.parent.notify(applyCF, { indexes: range });
        }
        this.parent.hideSpinner();
        this.parent.notify(refreshFilterRange, null);
    };
    return Sort;
}());

/**
 * `Filter` module is used to handle the filter action in Spreadsheet.
 */
var Filter = /** @class */ (function () {
    /**
     * Constructor for filter module.
     *
     * @param {Spreadsheet} parent - Specifies the Spreadsheet.
     */
    function Filter(parent) {
        this.parent = parent;
        this.filterCollection = new Map();
        this.filterRange = new Map();
        this.filterBtn = parent.createElement('div', { className: 'e-filter-btn e-control e-btn e-lib e-filter-iconbtn e-icon-btn' });
        this.filterBtn.appendChild(parent.createElement('span', { className: 'e-btn-icon e-icons e-filter-icon' }));
        this.addEventListener();
    }
    /**
     * To destroy the filter module.
     *
     * @returns {void} - To destroy the filter module.
     */
    Filter.prototype.destroy = function () {
        var _this = this;
        this.removeEventListener();
        if (this.parent.refreshing && this.filterRange.size) {
            this.parent.filterCollection = [];
            this.filterRange.forEach(function (_value, sheetIdx) {
                _this.setFilteredCollection({ sheetIdx: sheetIdx, saveJson: { filterCollection: _this.parent.filterCollection } });
            });
        }
        this.filterRange = null;
        this.filterCollection = null;
        if (this.filterBtn) {
            this.filterBtn.remove();
        }
        this.filterBtn = null;
        if (this.treeViewObj) {
            this.treeViewObj.destroy();
        }
        this.treeViewObj = null;
        if (this.treeViewEle) {
            this.treeViewEle.remove();
        }
        this.treeViewEle = null;
        if (this.cBox) {
            this.cBox.remove();
            this.cBox = null;
        }
        var filterPopupElement = document.querySelectorAll('.e-filter-popup');
        if (filterPopupElement) {
            filterPopupElement.forEach(function (element) {
                element.remove();
            });
        }
        this.parent = null;
    };
    Filter.prototype.addEventListener = function () {
        this.parent.on(filterRangeAlert, this.filterRangeAlertHandler, this);
        this.parent.on(initiateFilterUI, this.initiateFilterUIHandler, this);
        this.parent.on(mouseDown, this.filterMouseDownHandler, this);
        this.parent.on(renderFilterCell, this.renderFilterCellHandler, this);
        this.parent.on(refreshFilterRange, this.refreshFilterRange, this);
        this.parent.on(updateSortCollection, this.updateSortCollectionHandler, this);
        this.parent.on(beforeFltrcMenuOpen, this.beforeFilterMenuOpenHandler, this);
        this.parent.on(filterCmenuSelect, this.closeDialog, this);
        this.parent.on(reapplyFilter, this.reapplyFilterHandler, this);
        this.parent.on(filterByCellValue, this.filterByCellValueHandler, this);
        this.parent.on(clearFilter, this.clearFilterHandler, this);
        this.parent.on(getFilteredColumn, this.getFilteredColumnHandler, this);
        this.parent.on(cMenuBeforeOpen, this.cMenuBeforeOpenHandler, this);
        this.parent.on(filterCboxValue, this.filterCboxValueHandler, this);
        this.parent.on(getFilterRange, this.getFilterRangeHandler, this);
        this.parent.on(filterCellKeyDown, this.filterCellKeyDownHandler, this);
        this.parent.on(setFilteredCollection, this.setFilteredCollection, this);
        this.parent.on(contentLoaded, this.updateFilter, this);
        this.parent.on(beforeInsert, this.beforeInsertHandler, this);
        this.parent.on(beforeDelete, this.beforeDeleteHandler, this);
        this.parent.on(sheetsDestroyed, this.deleteSheetHandler, this);
        this.parent.on(clear, this.clearHandler, this);
        this.parent.on(filterDialogCreated, this.filterDialogCreatedHandler, this);
        this.parent.on(filterDialogClose, this.removeFilterClass, this);
        this.parent.on(duplicateSheetFilterHandler, this.duplicateSheetFilterHandler, this);
        this.parent.on(fltrPrevent, this.beforeFilteringHandler, this);
        this.parent.on(beforeCustomFilterOpen, this.customFilterOpen, this);
        this.parent.on(moveSheetHandler, this.moveSheetHandler, this);
        this.parent.on(refreshFilterCellsOnResize, this.refreshFilterCellsOnResize, this);
    };
    Filter.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(filterRangeAlert, this.filterRangeAlertHandler);
            this.parent.off(initiateFilterUI, this.initiateFilterUIHandler);
            this.parent.off(mouseDown, this.filterMouseDownHandler);
            this.parent.off(renderFilterCell, this.renderFilterCellHandler);
            this.parent.off(refreshFilterRange, this.refreshFilterRange);
            this.parent.off(updateSortCollection, this.updateSortCollectionHandler);
            this.parent.off(beforeFltrcMenuOpen, this.beforeFilterMenuOpenHandler);
            this.parent.off(filterCmenuSelect, this.closeDialog);
            this.parent.off(reapplyFilter, this.reapplyFilterHandler);
            this.parent.off(filterByCellValue, this.filterByCellValueHandler);
            this.parent.off(clearFilter, this.clearFilterHandler);
            this.parent.off(getFilteredColumn, this.getFilteredColumnHandler);
            this.parent.off(cMenuBeforeOpen, this.cMenuBeforeOpenHandler);
            this.parent.off(filterCboxValue, this.filterCboxValueHandler);
            this.parent.off(getFilterRange, this.getFilterRangeHandler);
            this.parent.off(filterCellKeyDown, this.filterCellKeyDownHandler);
            this.parent.off(setFilteredCollection, this.setFilteredCollection);
            this.parent.off(contentLoaded, this.updateFilter);
            this.parent.off(beforeInsert, this.beforeInsertHandler);
            this.parent.off(beforeDelete, this.beforeDeleteHandler);
            this.parent.off(sheetsDestroyed, this.deleteSheetHandler);
            this.parent.off(clear, this.clearHandler);
            this.parent.off(filterDialogCreated, this.filterDialogCreatedHandler);
            this.parent.off(filterDialogClose, this.removeFilterClass);
            this.parent.off(duplicateSheetFilterHandler, this.duplicateSheetFilterHandler);
            this.parent.off(fltrPrevent, this.beforeFilteringHandler);
            this.parent.off(beforeCustomFilterOpen, this.customFilterOpen);
            this.parent.off(moveSheetHandler, this.moveSheetHandler);
            this.parent.off(refreshFilterCellsOnResize, this.refreshFilterCellsOnResize);
        }
    };
    /**
     * Gets the module name.
     *
     * @returns {string} - Gets the module name.
     */
    Filter.prototype.getModuleName = function () {
        return 'filter';
    };
    /**
     * Validates the range and returns false when invalid.
     *
     * @param {SheetModel} sheet - Specify the sheet.
     * @param {string} range - Specify the range.
     * @returns {void} - Validates the range and returns false when invalid.
     */
    Filter.prototype.isInValidFilterRange = function (sheet, range) {
        var selectedRange = range ? getSwapRange(getIndexesFromAddress(range)) :
            getSwapRange(getIndexesFromAddress(sheet.selectedRange));
        var isEmptySheet = false;
        if (sheet.usedRange.colIndex === 0 && sheet.usedRange.rowIndex === 0 && isNullOrUndefined(sheet.rows[sheet.usedRange.rowIndex])) {
            isEmptySheet = true; // For Filtering Empty sheet's A1 cell.
        }
        return selectedRange[0] > sheet.usedRange.rowIndex || selectedRange[1] > sheet.usedRange.colIndex || isEmptySheet;
    };
    /**
     * Shows the range error alert dialog.
     *
     * @param {any} args - Specifies the args
     * @param {string} args.error - range error string.
     * @returns {void} - Shows the range error alert dialog.
     */
    Filter.prototype.filterRangeAlertHandler = function (args) {
        var _this = this;
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            content: args.error, isModal: true,
            height: 180, width: 400, showCloseIcon: true,
            beforeOpen: function (args) {
                var dlgArgs = {
                    dialogName: 'FilterRangeDialog',
                    element: args.element, target: args.target, cancel: args.cancel
                };
                _this.parent.trigger('dialogBeforeOpen', dlgArgs);
                if (dlgArgs.cancel) {
                    args.cancel = true;
                }
                else {
                    focus(_this.parent.element);
                }
            }
        });
        this.parent.hideSpinner();
    };
    /**
     * Triggers before filter context menu opened and used to add sorting items.
     *
     * @param {any} args - Specifies the args
     * @param {HTMLElement} args.element - Specify the element
     * @returns {void} - Triggers before filter context menu opened and used to add sorting items.
     */
    Filter.prototype.beforeFilterMenuOpenHandler = function (args) {
        var l10n = this.parent.serviceLocator.getService(locale);
        args.element.classList.add('e-spreadsheet-contextmenu'); // to show sort icons
        var ul = args.element.querySelector('ul');
        this.addMenuItem(ul, l10n.getConstant('SortDescending'), 'e-filter-sortdesc', 'e-sort-desc');
        this.addMenuItem(ul, l10n.getConstant('SortAscending'), 'e-filter-sortasc', 'e-sort-asc');
        args.element.appendChild(ul);
    };
    /**
     * Creates new menu item element
     *
     * @param {Element} ul - Specify the element.
     * @param {string} text - Specify the text.
     * @param {string} className - Specify the className
     * @param {string} iconCss - Specify the iconCss
     * @returns {void} - Creates new menu item element
     */
    Filter.prototype.addMenuItem = function (ul, text, className, iconCss) {
        var li = this.parent.createElement('li', { className: className + ' e-menu-item' });
        if (!this.parent.allowSorting) {
            li.classList.add('e-disabled');
        }
        li.innerText = text;
        li.insertBefore(this.parent.createElement('span', { className: 'e-menu-icon e-icons ' + iconCss }), li.firstChild);
        ul.insertBefore(li, ul.firstChild);
    };
    /**
     * Initiates the filter UI for the selected range.
     *
     * @param {any} args - Specifies the args
     * @param {PredicateModel[]} args.predicates - Specify the predicates.
     * @param {number} args.range - Specify the range.
     * @param {Promise<FilterEventArgs>} args.promise - Spefify the promise.
     * @param {number} args.sIdx - Specify the sIdx
     * @param {boolean} args.isCut - Specify the bool value
     * @param {boolean} args.isUndoRedo - Specify the bool value
     * @param {boolean} args.isInternal - Specify the isInternal.
     * @param {boolean} args.useFilterRange - Specify the use Filter Range.
     * @param {boolean} args.isOpen - Specify the isOpen.
     * @param {boolean} args.allowHeaderFilter - Specify the allow header filter.
     * @returns {void} - Initiates the filter UI for the selected range.
     */
    Filter.prototype.initiateFilterUIHandler = function (args) {
        var _this = this;
        var predicates = args ? args.predicates : null;
        var sheetIdx = args.sIdx;
        if (!sheetIdx && sheetIdx !== 0) {
            sheetIdx = args.isOpen ? 0 : this.parent.activeSheetIndex;
        }
        var deferred;
        if (args.promise) {
            deferred = new Deferred();
            args.promise = deferred.promise;
        }
        var resolveFn = function () {
            if (deferred) {
                deferred.resolve();
            }
        };
        var isInternal = args.isInternal || args.isCut;
        if (this.filterRange.size > 0 && this.filterRange.has(sheetIdx) && !this.parent.isOpen && !predicates) { //disable filter
            this.removeFilter(sheetIdx, isInternal, false);
            resolveFn();
            return;
        }
        var sheet = getSheet(this.parent, sheetIdx);
        if (this.isInValidFilterRange(sheet, args.range)) {
            var l10n = this.parent.serviceLocator.getService(locale);
            this.filterRangeAlertHandler({ error: l10n.getConstant('FilterOutOfRangeError') });
            resolveFn();
            return;
        }
        var selectedRange = args.range || sheet.selectedRange;
        var eventArgs;
        var actionArgs;
        if (!isInternal) {
            eventArgs = { range: selectedRange, sheetIndex: sheetIdx, cancel: false, allowHeaderFilter: false };
            if (args.predicates) {
                eventArgs.predicates = args.predicates;
                eventArgs.previousPredicates = this.filterCollection.get(sheetIdx) && [].slice.call(this.filterCollection.get(sheetIdx));
            }
            else {
                eventArgs.filterOptions = { predicates: args.predicates };
            }
            eventArgs.useFilterRange = false;
            actionArgs = { action: 'filter', eventArgs: eventArgs };
            this.parent.notify(beginAction, actionArgs);
            if (eventArgs.cancel) {
                resolveFn();
                return;
            }
            delete eventArgs.cancel;
            args.useFilterRange = eventArgs.useFilterRange;
            args.allowHeaderFilter = eventArgs.allowHeaderFilter;
        }
        if (!args.range && (isInternal || selectedRange === eventArgs.range)) {
            var rangeIdx = getRangeIndexes(selectedRange);
            if (rangeIdx[0] === rangeIdx[2] && rangeIdx[1] === rangeIdx[3]) {
                rangeIdx = getDataRange(rangeIdx[0], rangeIdx[1], sheet);
                selectedRange = getRangeAddress(rangeIdx);
                if (!isInternal) {
                    eventArgs.range = selectedRange;
                }
            }
        }
        else if (!isInternal) {
            selectedRange = eventArgs.range;
        }
        if (predicates) {
            if (predicates.length) {
                var filterRange = this.filterRange.get(sheetIdx);
                if (filterRange) {
                    args.useFilterRange = filterRange.useFilterRange;
                    args.allowHeaderFilter = filterRange.allowHeaderFilter;
                }
                this.processRange(sheet, sheetIdx, selectedRange, true, args.useFilterRange, args.allowHeaderFilter);
                var range = this.filterRange.get(sheetIdx).range.slice();
                if (!args.allowHeaderFilter) {
                    range[0] = range[0] + 1; // to skip first row.
                }
                if (!args.useFilterRange) {
                    range[2] = sheet.usedRange.rowIndex; //filter range should be till used range.
                }
                range[1] = range[3] = getColIndex(predicates[0].field);
                var addr = sheet.name + "!" + this.getPredicateRange(range, predicates.slice(1, predicates.length));
                var fullAddr = getRangeAddress(range);
                getData(this.parent, addr, true, true, null, true, null, null, false, fullAddr).then(function (jsonData) {
                    _this.filterSuccessHandler(new DataManager(jsonData), { action: 'filtering', filterCollection: predicates, field: predicates[0].field, sIdx: args.sIdx,
                        isInternal: isInternal, isOpen: args.isOpen, prevPredicates: eventArgs && eventArgs.previousPredicates });
                    resolveFn();
                });
                return;
            }
            else {
                this.clearFilterHandler({ sheetIndex: sheetIdx });
                resolveFn();
            }
        }
        else {
            this.processRange(sheet, sheetIdx, selectedRange, false, args.useFilterRange, args.allowHeaderFilter);
            resolveFn();
        }
        if (!isInternal) {
            this.parent.notify(completeAction, actionArgs);
            focus(this.parent.element);
        }
    };
    /**
     * Processes the range if no filter applied.
     *
     * @param {SheetModel} sheet - Specify the sheet.
     * @param {number} sheetIdx - Specify the sheet index.
     * @param {string} filterRange - Specify the filterRange.
     * @param {boolean} preventRefresh - To prevent refreshing the filter buttons.
     * @param {boolean} useFilterRange - Specifies whether to consider filtering range or used range during filering.
     * @param {boolean} allowHeaderFilter - Specifies whether to consider first row during filtering.
     * @returns {void} - Processes the range if no filter applied.
     */
    Filter.prototype.processRange = function (sheet, sheetIdx, filterRange, preventRefresh, useFilterRange, allowHeaderFilter) {
        var range = getSwapRange(getIndexesFromAddress(filterRange || sheet.selectedRange));
        if (range[0] === range[2] && range[1] === range[3]) { //if selected range is a single cell
            range[0] = 0;
            range[1] = 0;
            range[2] = sheet.usedRange.rowIndex;
            range[3] = sheet.usedRange.colIndex;
        }
        else if (range[3] > sheet.usedRange.colIndex) {
            range[3] = sheet.usedRange.colIndex;
        }
        var filterOption = { useFilterRange: useFilterRange,
            range: range };
        if (allowHeaderFilter) {
            filterOption.allowHeaderFilter = allowHeaderFilter;
        }
        this.filterRange.set(sheetIdx, filterOption);
        this.filterCollection.set(sheetIdx, []);
        if (!preventRefresh) {
            this.refreshFilterRange(range, false, sheetIdx);
        }
    };
    /**
     * Removes all the filter related collections for the active sheet.
     *
     * @param {number} sheetIdx - Specify the sheet index.
     * @param {boolean} isCut - Specify the bool value.
     * @param {boolean} preventRefresh - Specify the preventRefresh.
     * @param {boolean} clearAction - Specify the current action is clear or not.
     * @returns {void} - Removes all the filter related collections for the active sheet.
     */
    Filter.prototype.removeFilter = function (sheetIdx, isCut, preventRefresh, clearAction) {
        var filterOption = this.filterRange.get(sheetIdx);
        var range = filterOption.range.slice();
        var allowHeaderFilter = filterOption.allowHeaderFilter;
        var rangeAddr = getRangeAddress(range);
        var args;
        if (!isCut) {
            args = { action: 'filter', eventArgs: { range: rangeAddr, sheetIndex: sheetIdx, cancel: false }, isClearAction: clearAction };
            this.parent.notify(beginAction, args);
            if (args.eventArgs.cancel) {
                return;
            }
            delete args.eventArgs.cancel;
        }
        if (this.filterCollection.get(sheetIdx).length || preventRefresh) {
            if (this.filterCollection.get(sheetIdx).length && clearAction) {
                var newArgs = {
                    action: 'filter',
                    eventArgs: {
                        range: rangeAddr, sheetIndex: sheetIdx, predicates: [], previousPredicates: this.filterCollection.get(sheetIdx)
                    }, isClearAction: clearAction
                };
                this.parent.notify(completeAction, newArgs);
            }
            this.clearFilterHandler({ preventRefresh: preventRefresh, sheetIndex: sheetIdx });
        }
        this.filterRange.delete(sheetIdx);
        this.filterCollection.delete(sheetIdx);
        this.refreshFilterRange(range, true, sheetIdx, allowHeaderFilter);
        if (!isCut) {
            this.parent.notify(completeAction, args);
        }
    };
    /**
     * Handles filtering cell value based on context menu.
     *
     * @returns {void} - Handles filtering cell value based on context menu.
     */
    Filter.prototype.filterByCellValueHandler = function () {
        var _this = this;
        var sheetIdx = this.parent.activeSheetIndex;
        var sheet = this.parent.getActiveSheet();
        if (this.isInValidFilterRange(sheet)) {
            var l10n = this.parent.serviceLocator.getService(locale);
            this.filterRangeAlertHandler({ error: l10n.getConstant('FilterOutOfRangeError') });
            return;
        }
        var cell = getRangeIndexes(sheet.activeCell);
        var isNotFilterRange;
        if (!this.isFilterRange(sheetIdx, cell[0], cell[1])) {
            isNotFilterRange = true;
            this.processRange(sheet, sheetIdx);
        }
        var filterOption = this.filterRange.get(sheetIdx);
        var range = filterOption.range.slice();
        var filterRange = getRangeAddress(range);
        range[0] = range[0] + 1; // to skip first row.
        range[2] = sheet.usedRange.rowIndex; //filter range should be till used range.
        range[1] = range[3] = cell[1];
        var field = getColumnHeaderText(cell[1] + 1);
        var selectedCell = getCell(cell[0], cell[1], sheet);
        var cellVal = getValueFromFormat(this.parent, selectedCell, cell[0], cell[1]);
        var predicates = [{ field: field, operator: 'equal', type: this.getColumnType(sheet, cell[1], cell).type,
                matchCase: false, value: cellVal }];
        var prevPredicates = [].slice.call(this.filterCollection.get(sheetIdx));
        if (!prevPredicates.length) {
            prevPredicates = undefined;
        }
        var eventArgs = { range: filterRange, predicates: predicates,
            previousPredicates: prevPredicates, sheetIndex: sheetIdx, cancel: false, allowHeaderFilter: false };
        this.parent.notify(beginAction, { action: 'filter', eventArgs: eventArgs });
        if (eventArgs.cancel) {
            if (isNotFilterRange) {
                this.removeFilter(sheetIdx, true);
            }
            return;
        }
        if (eventArgs.allowHeaderFilter) {
            filterOption.allowHeaderFilter = eventArgs.allowHeaderFilter;
            range[0]--;
        }
        var addr = sheet.name + "!" + this.getPredicateRange(range, this.filterCollection.get(sheetIdx));
        var fullAddr = getRangeAddress(range);
        getData(this.parent, addr, true, true, null, true, null, null, false, fullAddr).then(function (jsonData) {
            _this.filterSuccessHandler(new DataManager(jsonData), { action: 'filtering', filterCollection: predicates, field: field, isFilterByValue: true });
        });
    };
    /**
     * Creates filter buttons and renders the filter applied cells.
     *
     * @param { any} args - Specifies the args
     * @param { HTMLElement} args.td - specify the element
     * @param { number} args.rowIndex - specify the rowIndex
     * @param { number} args.colIndex - specify the colIndex
     * @param { number} args.sIdx - specify the sIdx
     * @param { boolean} args.isAction - specify the apply filter action.
     * @returns {void} - Creates filter buttons and renders the filter applied cells.
     */
    Filter.prototype.renderFilterCellHandler = function (args) {
        var sheetIdx = !isNullOrUndefined(args.sIdx) ? args.sIdx : this.parent.activeSheetIndex;
        if (sheetIdx === this.parent.activeSheetIndex) {
            var option = this.filterRange.get(sheetIdx) &&
                this.filterRange.get(sheetIdx);
            var range = option && option.range;
            if (range && (range[0] === args.rowIndex || option.allowHeaderFilter) && range[1] <= args.colIndex &&
                range[3] >= args.colIndex) {
                if (!args.td || args.td.classList.contains(option.allowHeaderFilter ? 'e-cell' : 'e-header-cell')) {
                    return;
                }
                var filterButton = args.td.querySelector('.e-filter-icon');
                var filterSortCls = '';
                var sortCollection = this.parent.sortCollection;
                var field = getColumnHeaderText(args.colIndex + 1);
                var predicates = this.filterCollection.get(sheetIdx);
                for (var i = 0; i < predicates.length; i++) {
                    if (predicates[i].field === field) {
                        filterSortCls = ' e-filtered';
                        break;
                    }
                }
                if (sortCollection) {
                    for (var i = 0; i < sortCollection.length; i++) {
                        if (sortCollection[i].sheetIndex === sheetIdx &&
                            sortCollection[i].columnIndex === args.colIndex) {
                            filterSortCls += sortCollection[i].order === 'Ascending' ? ' e-sortasc-filter' : ' e-sortdesc-filter';
                            break;
                        }
                    }
                }
                if (filterButton) {
                    filterButton.className = "e-btn-icon e-icons e-filter-icon" + filterSortCls;
                }
                else {
                    var isNoteAvailable = false;
                    filterButton = this.filterBtn.cloneNode(true);
                    if (args.td.children.length > 0 && args.td.children[args.td.childElementCount - 1].className.indexOf('e-addNoteIndicator') > -1) {
                        args.td.removeChild(args.td.children[args.td.childElementCount - 1]);
                        isNoteAvailable = true;
                    }
                    filterButton.firstElementChild.className = "e-btn-icon e-icons e-filter-icon" + filterSortCls;
                    args.td.insertBefore(filterButton, args.td.firstChild);
                    if (args.isAction) {
                        var sheet = getSheet(this.parent, sheetIdx);
                        if (getCell(args.rowIndex, args.colIndex, sheet, false, true).wrap) {
                            this.parent.notify(updateWrapCell, { rowIdx: args.rowIndex, colIdx: args.colIndex, sheet: sheet, ele: args.td });
                        }
                    }
                    if (isNoteAvailable) {
                        this.parent.notify(createNoteIndicator, { targetElement: args.td, rowIndex: args.rowIndex, columnIndex: args.colIndex });
                    }
                }
            }
        }
    };
    /**
     * Refreshes the filter header range.
     *
     * @param {number[]} filterRange - Specify the filterRange.
     * @param {boolean} remove - Specify the bool value
     * @param {number} sIdx - Specify the index.
     * @param {boolean} allowHeaderFilter - Specifies whether to consider first row during filtering.
     * @returns {void} - Refreshes the filter header range.
     */
    Filter.prototype.refreshFilterRange = function (filterRange, remove, sIdx, allowHeaderFilter) {
        var sheetIdx = sIdx;
        if (!sheetIdx && sheetIdx !== 0) {
            sheetIdx = this.parent.activeSheetIndex;
        }
        var filterOption = this.filterRange && this.filterRange.get(sheetIdx);
        if (!filterOption) {
            if (!filterRange) {
                filterRange = [0, 0, 0, 0];
            }
        }
        else {
            filterRange = filterRange || filterOption.range.slice();
            allowHeaderFilter = filterOption.allowHeaderFilter;
        }
        var range = filterRange;
        var cell;
        var sheet = getSheet(this.parent, sheetIdx);
        var frozenCol = this.parent.frozenColCount(sheet);
        for (var index = range[1]; index <= range[3]; index++) {
            if (allowHeaderFilter) {
                var table = index < frozenCol ? this.parent.sheetModule.getSelectAllTable() :
                    this.parent.getColHeaderTable();
                var headerRow = table && this.parent.getRow(0, table);
                cell = headerRow && this.parent.getCell(0, index, headerRow);
            }
            else {
                if (!isHiddenRow(sheet, range[0])) {
                    cell = this.parent.getCell(range[0], index);
                }
                else {
                    cell = null;
                }
            }
            if (remove) {
                if (cell) {
                    var filterBtn = cell.querySelector('.e-filter-btn');
                    if (filterBtn) {
                        var isNoteAvailable = false;
                        if (cell.children.length > 0 && cell.children[cell.childElementCount - 1].className.indexOf('e-addNoteIndicator') > -1) {
                            cell.removeChild(cell.children[cell.childElementCount - 1]);
                            isNoteAvailable = true;
                        }
                        filterBtn.parentElement.removeChild(filterBtn);
                        if (isNoteAvailable) {
                            this.parent.notify(createNoteIndicator, { targetElement: cell, rowIndex: range[0], columnIndex: index });
                        }
                    }
                }
            }
            else {
                this.renderFilterCellHandler({ td: cell, rowIndex: range[0], colIndex: index, sIdx: sheetIdx, isAction: true });
            }
        }
        if (this.parent.sortCollection) {
            this.parent.notify(sortImport, null);
        }
    };
    /**
     * Checks whether the provided cell is a filter cell.
     *
     * @param {number} sheetIdx - Specify the sheet index.
     * @param {number} rowIndex - Specify the row index
     * @param {number} colIndex - Specify the col index.
     * @returns {boolean} - Checks whether the provided cell is a filter cell.
     */
    Filter.prototype.isFilterCell = function (sheetIdx, rowIndex, colIndex) {
        var range = this.filterRange.has(sheetIdx) && this.filterRange.get(sheetIdx).range;
        return (range && range[0] === rowIndex && range[1] <= colIndex && range[3] >= colIndex);
    };
    /**
     * Checks whether the provided cell is in a filter range
     *
     * @param {number} sheetIdx - Specify the sheet index.
     * @param {number} rowIndex - Specify the row index
     * @param {number} colIndex - Specify the col index.
     * @returns {boolean} - Checks whether the provided cell is in a filter range
     */
    Filter.prototype.isFilterRange = function (sheetIdx, rowIndex, colIndex) {
        var range = this.filterRange.get(sheetIdx) && this.filterRange.get(sheetIdx).range;
        return (range && range[0] <= rowIndex && range[2] >= rowIndex && range[1] <= colIndex && range[3] >= colIndex);
    };
    /**
     * Gets the filter information from active cell
     *
     * @param {any} args - Specifies the args
     * @param {string} args.field - Specify the field
     * @param {string} args.clearFilterText - Specify the clearFilterText
     * @param {boolean} args.isFiltered - Specify the isFiltered
     * @param {boolean} args.isClearAll - Specify the isClearAll
     * @param {number} args.sheetIndex - Specify the sheet index value.
     * @returns {void} - Triggers before context menu created to enable or disable items.
     */
    Filter.prototype.getFilteredColumnHandler = function (args) {
        var sheetIdx = isUndefined$1(args.sheetIndex) ? this.parent.activeSheetIndex : args.sheetIndex;
        var l10n = this.parent.serviceLocator.getService(locale);
        args.clearFilterText = l10n.getConstant('ClearFilter');
        if (this.filterRange.has(sheetIdx)) {
            var filterCollection = this.filterCollection.get(sheetIdx);
            if (args.isClearAll) {
                args.isFiltered = filterCollection && filterCollection.length > 0;
                return;
            }
            var range = this.filterRange.get(sheetIdx).range.slice();
            var sheet = getSheet(this.parent, sheetIdx);
            var cell = getCellIndexes(sheet.activeCell);
            if (this.isFilterRange(sheetIdx, cell[0], cell[1])) {
                args.field = getColumnHeaderText(cell[1] + 1);
                var headerCell = getCell(range[0], cell[1], sheet);
                var cellValue = this.parent.getDisplayText(headerCell);
                args.clearFilterText = l10n.getConstant('ClearFilterFrom') + '"'
                    + (cellValue ? cellValue.toString() : 'Column ' + args.field) + '"';
                filterCollection.some(function (value) {
                    args.isFiltered = value.field === args.field;
                    return args.isFiltered;
                });
            }
        }
    };
    /**
     * Triggers before context menu created to enable or disable items.
     *
     * @param {any} e - Specifies the args
     * @param {HTMLElement} e.element - Specify the element
     * @param {MenuItemModel[]} e.items - Specify the items
     * @param {MenuItemModel} e.parentItem - Specify the parentItem
     * @param {string} e.target - Specify the target
     * @returns {void} - Triggers before context menu created to enable or disable items.
     */
    Filter.prototype.cMenuBeforeOpenHandler = function (e) {
        var id = this.parent.element.id + '_cmenu';
        if (e.parentItem && e.parentItem.id === id + '_filter' && e.target === '') {
            var args = { isFiltered: false };
            this.getFilteredColumnHandler(args);
            this.parent.enableContextMenuItems([id + '_clearfilter', id + '_reapplyfilter'], !!args.isFiltered, true);
        }
    };
    /**
     * Closes the filter popup.
     *
     * @returns {void} - Closes the filter popup.
     */
    Filter.prototype.closeDialog = function () {
        var filterPopup = document.querySelector('.e-filter-popup');
        if (filterPopup && filterPopup.id.includes(this.parent.element.id)) {
            var excelFilter = getComponent(filterPopup, 'dialog');
            EventHandler.remove(filterPopup, getStartEvent(), this.filterMouseDownHandler);
            if (excelFilter) {
                excelFilter.hide();
            }
            this.parent.notify(filterDialogClose, null);
        }
    };
    Filter.prototype.removeFilterClass = function () {
        if (this.parent.element.style.position === 'relative') {
            this.parent.element.style.position = '';
        }
        if (this.parent.element.classList.contains('e-filter-open')) {
            this.parent.element.classList.remove('e-filter-open');
        }
    };
    /**
     * Returns true if the filter popup is opened.
     *
     * @returns {boolean} - Returns true if the filter popup is opened.
     */
    Filter.prototype.isPopupOpened = function () {
        var filterPopup = document.getElementsByClassName('e-filter-popup')[0];
        return filterPopup && filterPopup.id.includes(this.parent.element.id) && filterPopup.style.display !== 'none';
    };
    Filter.prototype.filterCellKeyDownHandler = function (args) {
        var sheet = this.parent.getActiveSheet();
        var indexes = getCellIndexes(sheet.activeCell);
        if (this.isFilterCell(this.parent.activeSheetIndex, indexes[0], indexes[1])) {
            if (args.closePopup) {
                this.closeDialog();
            }
            else {
                args.isFilterCell = true;
                if (!this.isPopupOpened()) {
                    var target = this.parent.getCell(indexes[0], indexes[1]);
                    if (target) {
                        this.openDialog(target);
                    }
                }
            }
        }
    };
    Filter.prototype.filterMouseDownHandler = function (e) {
        if ((Browser.isDevice && e.type === 'mousedown') || this.parent.getActiveSheet().isProtected) {
            return;
        }
        var target = e.target;
        if (target.classList.contains('e-filter-icon') || target.classList.contains('e-filter-btn')) {
            if (this.isPopupOpened()) {
                this.closeDialog();
            }
            this.openDialog((parentsUntil(target, 'e-cell') || parentsUntil(target, 'e-header-cell')));
        }
        else if (this.isPopupOpened()) {
            var offsetEle = target.offsetParent;
            if (!target.classList.contains('e-searchinput') && !target.classList.contains('e-searchclear') && (offsetEle &&
                !offsetEle.classList.contains('e-filter-popup') && !offsetEle.classList.contains('e-text-content') &&
                !offsetEle.classList.contains('e-checkboxtree') && !offsetEle.classList.contains('e-checkbox-wrapper'))) {
                this.closeDialog();
            }
            else {
                this.selectSortItemHandler(target);
            }
        }
    };
    Filter.prototype.cboxListSelected = function (args, selectedList, listCount, e, searched) {
        var wrapper = parentsUntil(e.target, 'e-ftrchk');
        if (wrapper) {
            var addCurCbox = searched && wrapper.querySelector('.e-add-current');
            if (addCurCbox) {
                if (addCurCbox.classList.contains('e-check')) {
                    classList(addCurCbox, ['e-uncheck'], ['e-check']);
                    if (!selectedList.length) {
                        args.btnObj.element.disabled = true;
                    }
                    return false;
                }
                else {
                    classList(addCurCbox, ['e-check'], ['e-uncheck']);
                    args.btnObj.element.disabled = false;
                    return true;
                }
            }
            var selectAll = wrapper.querySelector('.e-selectall');
            if (selectAll) {
                wrapper.querySelector('.e-chk-hidden').indeterminate = false;
                var uncheck = wrapper.querySelector('.e-frame').classList.contains('e-check');
                var checkBoxFrame = void 0;
                var text = void 0;
                for (var idx = searched ? 2 : 1, len = args.element.childElementCount; idx < len; idx++) {
                    checkBoxFrame = args.element.children[idx].querySelector('.e-frame');
                    removeClass([checkBoxFrame], ['e-check', 'e-stop', 'e-uncheck']);
                    if (uncheck) {
                        args.element.children[idx].querySelector('.e-chk-hidden').checked = false;
                        checkBoxFrame.classList.add('e-uncheck');
                        selectedList.splice(0, 1);
                    }
                    else {
                        args.element.children[idx].querySelector('.e-chk-hidden').checked = true;
                        checkBoxFrame.classList.add('e-check');
                        text = args.element.children[idx].querySelector('.e-checkboxfiltertext').textContent;
                        if (selectedList.indexOf(text) === -1) {
                            selectedList.push(text);
                        }
                    }
                }
            }
            else {
                var text = wrapper.querySelector('.e-checkboxfiltertext').textContent;
                if (wrapper.querySelector('.e-frame').classList.contains('e-check')) {
                    selectedList.splice(selectedList.indexOf(text), 1);
                }
                else {
                    selectedList.push(text);
                }
                toogleCheckbox(wrapper);
                selectAll = args.element.querySelector('.e-selectall');
            }
            this.updateState(args, selectAll, selectAll.parentElement.querySelector('.e-chk-hidden'), selectedList.length !== listCount, selectedList.length);
        }
        return null;
    };
    Filter.prototype.initCboxList = function (args, excelFilter, filterData) {
        var _this = this;
        var field = args.column.field;
        var sortedData = new DataManager(args.dataSource).executeLocal(new Query().sortBy(field + '_value', 'ascending'));
        var listData = [];
        var sheet = this.parent.getActiveSheet();
        var l10n = this.parent.serviceLocator.getService(locale);
        var cBoxFrag = document.createDocumentFragment();
        var selectAll = this.createSelectAll(args, excelFilter);
        cBoxFrag.appendChild(selectAll);
        var idCol = {};
        var hidden;
        var initSelectedList = [];
        var selectedList = [];
        var dataVal;
        sortedData.forEach(function (data) {
            if (data[field] === '') {
                if (!idCol['isBlank']) {
                    idCol['isBlank'] = true;
                    var blankObj = {};
                    blankObj[field] = l10n.getConstant('Blanks');
                    hidden = isFilterHidden(sheet, Number(data['__rowIndex']) - 1);
                    var blankCbox = createCboxWithWrap(
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    getUid('cbox'), excelFilter.createCheckbox(blankObj[field], !hidden, blankObj), 'e-ftrchk');
                    if (cBoxFrag.childElementCount === 1) {
                        cBoxFrag.appendChild(blankCbox);
                    }
                    else {
                        cBoxFrag.insertBefore(blankCbox, cBoxFrag.children[1]);
                    }
                    listData.splice(0, 0, blankObj[field]);
                    if (!hidden) {
                        initSelectedList.push(blankObj[field]);
                        selectedList.push(blankObj[field]);
                    }
                }
            }
            else if (!idCol[data[field]]) {
                idCol[data[field]] = true;
                hidden = isFilterHidden(sheet, Number(data['__rowIndex']) - 1);
                dataVal = data[field];
                cBoxFrag.appendChild(
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                createCboxWithWrap(getUid('cbox'), excelFilter.createCheckbox(dataVal, !hidden, data), 'e-ftrchk'));
                listData.push(dataVal);
                if (!hidden) {
                    initSelectedList.push(dataVal);
                    selectedList.push(dataVal);
                }
            }
        });
        args.element.appendChild(cBoxFrag);
        var cBoxFrame = selectAll.querySelector('.e-frame');
        cBoxFrame.classList.add('e-selectall');
        var cBox = selectAll.querySelector('.e-chk-hidden');
        this.updateState(args, cBoxFrame, cBox, selectedList.length !== listData.length, selectedList.length);
        var mainCboxList = [].slice.call(args.element.childNodes);
        var searchedSelectedList;
        var searchedList;
        var addCurCboxSelected;
        args.element.addEventListener('click', function (e) {
            if (searchedSelectedList) {
                var isCurSelect = _this.cboxListSelected(args, searchedSelectedList, args.element.childElementCount - 2, e, true);
                if (isCurSelect !== null) {
                    addCurCboxSelected = isCurSelect;
                }
            }
            else {
                _this.cboxListSelected(args, selectedList, listData.length, e);
            }
        });
        var sortedFullData;
        var searchValue;
        var updateSearchedList = function (val) {
            if (val.toLowerCase().includes(searchValue)) {
                var obj = {};
                obj[args.column.field] = val;
                cBoxFrag.appendChild(
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                createCboxWithWrap(getUid('cbox'), excelFilter.createCheckbox(val, true, obj), 'e-ftrchk'));
                searchedList.push(val);
                searchedSelectedList.push(val);
            }
        };
        var performSearchOnData;
        var filterDataCount = args.dataSource.length > 1000 ? args.dataSource.length : 1000;
        var fullListData = listData;
        if (filterData.length <= filterDataCount) {
            performSearchOnData = function () {
                listData.forEach(function (val) {
                    updateSearchedList(val);
                });
            };
        }
        else {
            performSearchOnData = function () {
                if (!sortedFullData) {
                    fullListData = [];
                    initSelectedList = [];
                    selectedList = [];
                    sortedFullData = new DataManager(filterData).executeLocal(new Query().sortBy(field + '_value', 'ascending'));
                    idCol = {};
                    sortedFullData.forEach(function (data) {
                        if (data[field] === '') {
                            if (!idCol['isBlank']) {
                                idCol['isBlank'] = true;
                                dataVal = l10n.getConstant('Blanks');
                                fullListData.splice(0, 0, dataVal);
                                if (!isFilterHidden(sheet, Number(data['__rowIndex']) - 1)) {
                                    initSelectedList.push(dataVal);
                                    selectedList.push(dataVal);
                                }
                            }
                        }
                        else if (!idCol[data[field]]) {
                            dataVal = data[field];
                            idCol[dataVal] = true;
                            fullListData.push(data[field]);
                            if (!isFilterHidden(sheet, Number(data['__rowIndex']) - 1)) {
                                selectedList.push(dataVal);
                                initSelectedList.push(dataVal);
                            }
                        }
                    });
                }
                for (var filterIdx = 0, len = fullListData.length; filterIdx < len; filterIdx++) {
                    if (searchedList.length < filterDataCount) {
                        updateSearchedList(fullListData[filterIdx]);
                    }
                    else {
                        break;
                    }
                }
            };
        }
        var refreshCheckbox = function (e) {
            if (e.event.type === 'keyup') {
                searchValue = e.event.target.value.toLowerCase();
            }
            else if (e.event.target.classList.contains('e-search-icon')) {
                return;
            }
            cBoxFrag = document.createDocumentFragment();
            cBoxFrag.appendChild(selectAll);
            if (searchValue) {
                searchedList = [];
                searchedSelectedList = [];
                performSearchOnData();
                if (searchedSelectedList.length) {
                    _this.updateState(args, cBoxFrame, cBox, false, 0);
                    selectAll.classList.remove('e-hide');
                    var obj = {};
                    obj[field] = l10n.getConstant('AddCurrentSelection');
                    var addCurrentCbox = createCboxWithWrap(
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    getUid('cbox'), excelFilter.createCheckbox(obj[field], false, obj), 'e-ftrchk');
                    cBoxFrag.insertBefore(addCurrentCbox, cBoxFrag.children[1]);
                    addCurrentCbox.querySelector('.e-frame').classList.add('e-add-current');
                }
                else {
                    selectAll.classList.add('e-hide');
                    var noRecordEle = _this.parent.createElement('div', { className: 'e-checkfltrnmdiv' });
                    var noRecordText = _this.parent.createElement('span');
                    noRecordText.innerText = l10n.getConstant('NoResult');
                    noRecordEle.appendChild(noRecordText);
                    cBoxFrag.appendChild(noRecordEle);
                    args.btnObj.element.disabled = true;
                }
            }
            else if (mainCboxList) {
                searchedSelectedList = null;
                searchedList = null;
                _this.updateState(args, cBoxFrame, cBox, selectedList.length !== listData.length, selectedList.length);
                selectAll.classList.remove('e-hide');
                mainCboxList.forEach(function (element) {
                    cBoxFrag.appendChild(element);
                });
            }
            args.element.innerHTML = '';
            args.element.appendChild(cBoxFrag);
        };
        var applyBtnClickHandler = function () {
            if (searchedList) {
                if (addCurCboxSelected) {
                    var text = void 0;
                    var index = void 0;
                    selectedList = initSelectedList;
                    for (var idx = 0, len = searchedList.length; idx < len; idx++) {
                        text = searchedList[idx];
                        if (searchedList.length === searchedSelectedList.length || searchedSelectedList.indexOf(text) > -1) {
                            if (selectedList.indexOf(text) === -1) {
                                selectedList.push(text);
                            }
                        }
                        else {
                            index = selectedList.indexOf(text);
                            if (index > -1) {
                                selectedList.splice(index, 1);
                            }
                        }
                    }
                }
                else {
                    selectedList = searchedSelectedList;
                }
            }
            var checkedLength = selectedList.length;
            if (checkedLength === listData.length && (!searchedSelectedList || filterData.length <= filterDataCount)) {
                _this.filterSuccessHandler(new DataManager(args.dataSource), { action: 'clear-filter', field: args.column.field });
            }
            else {
                var predicates_1 = [];
                var model_1 = { field: field, ignoreAccent: false, matchCase: false, isFilterByMenu: true };
                var localeObj_1 = getNumericObject(_this.parent.locale);
                var updatePredicate = function (val) {
                    var type = args.type;
                    if (type === 'number') {
                        if (val === l10n.getConstant('Blanks')) {
                            val = '';
                            type = 'string';
                        }
                        else if (!isNumber(parseLocaleNumber([val], _this.parent, localeObj_1)[0])) {
                            type = 'string';
                        }
                    }
                    predicates_1.push(Object.assign({ value: val, type: type }, model_1));
                };
                if (checkedLength > fullListData.length / 2) {
                    model_1.operator = 'notequal';
                    model_1.predicate = 'and';
                    for (var idx = 0, len = fullListData.length; idx < len; idx++) {
                        if (selectedList.indexOf(fullListData[idx]) === -1) {
                            updatePredicate(fullListData[idx]);
                        }
                    }
                }
                else {
                    model_1.operator = 'equal';
                    model_1.predicate = 'or';
                    for (var idx = 0, len = checkedLength; idx < len; idx++) {
                        updatePredicate(selectedList[idx]);
                    }
                }
                excelFilter.initiateFilter(predicates_1);
            }
        };
        this.wireFilterEvents(args, applyBtnClickHandler, refreshCheckbox.bind(this));
    };
    Filter.prototype.createSelectAll = function (args, excelFilter) {
        var selectAllObj = {};
        selectAllObj[args.column.field] = this.parent.serviceLocator.getService(locale).getConstant('SelectAll');
        var selectAll = createCboxWithWrap(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        getUid('cbox'), excelFilter.createCheckbox(selectAllObj[args.column.field], false, selectAllObj), 'e-ftrchk');
        return selectAll;
    };
    Filter.prototype.updateState = function (args, cBoxFrame, cBox, indeterminate, checkedCount) {
        removeClass([cBoxFrame], ['e-check', 'e-stop', 'e-uncheck']);
        if (args.btnObj.element.disabled) {
            args.btnObj.element.disabled = false;
        }
        if (indeterminate) {
            if (checkedCount) {
                cBoxFrame.classList.add('e-stop');
            }
            else {
                cBoxFrame.classList.add('e-uncheck');
                var addCurCbox = args.element.querySelector('.e-add-current');
                args.btnObj.element.disabled = !addCurCbox || !addCurCbox.classList.contains('e-check');
            }
        }
        else {
            cBoxFrame.classList.add('e-check');
        }
        cBox.indeterminate = indeterminate;
        cBox.checked = !indeterminate;
    };
    Filter.prototype.beforeFilteringHandler = function (evt) {
        var _this = this;
        if (evt.instance && evt.instance.options) {
            if (evt.isOpen && evt.instance.options.type === 'string') {
                var localeObj = getNumericObject(this.parent.locale);
                if (localeObj.decimal !== '.') {
                    var valArr = evt.arg3.toString().split('.');
                    if (valArr.length === 2) {
                        var parsedNumVal = valArr.join(localeObj.decimal);
                        if (isNumber(new Internationalization(this.parent.locale).parseNumber(parsedNumVal, { format: 'n' }))) {
                            evt.arg3 = parsedNumVal;
                        }
                    }
                }
            }
            var parseValue_1 = function (val, operator) {
                if (operator && (operator === 'notequal' || _this.isCustomNumFilter(operator))) {
                    if (val) {
                        if (isNumber(val)) {
                            val = parseFloat(val.toString());
                        }
                        else if (typeof val === 'string') {
                            var localeObj = getNumericObject(_this.parent.locale);
                            var intl = new Internationalization(_this.parent.locale);
                            var numArgs = {};
                            if (val.includes(localeObj.percentSign)) {
                                var valArr = val.trim().split('%');
                                if (valArr[0] !== '' && !valArr[1]) {
                                    numArgs = checkIsNumberAndGetNumber({ value: valArr[0] }, _this.parent.locale, localeObj.group, localeObj.decimal);
                                }
                            }
                            if (numArgs.isNumber) {
                                val = Number(numArgs.value) / 100;
                            }
                            else {
                                var parsedNumVal = intl.parseNumber(val.trim(), { format: 'n' });
                                if (isNumber(parsedNumVal)) {
                                    if (/^(\(\d+\)|\d+)$/.test(val.trim())) {
                                        val = -parsedNumVal;
                                    }
                                    else {
                                        val = parsedNumVal;
                                    }
                                }
                                else {
                                    var checkVal = val.trim();
                                    var dateEventArgs = { value: checkVal, cell: { value: checkVal } };
                                    _this.parent.notify(checkDateFormat, dateEventArgs);
                                    if (dateEventArgs.isTime || dateEventArgs.isDate) {
                                        val = parseFloat(dateEventArgs.updatedVal);
                                    }
                                }
                            }
                        }
                    }
                    else if (operator === 'notequal' && val === null) {
                        val = '';
                    }
                }
                else if (operator === 'equal') {
                    if (isNumber(val)) {
                        val = val.toString();
                    }
                    else if (typeof val === 'string' && isNumber(parseValue_1(val, 'notequal'))) {
                        val = val.trim();
                    }
                    else if (val === null) {
                        val = '';
                    }
                }
                return val;
            };
            if (evt.instance.options.type !== 'date') {
                evt.arg3 = parseValue_1(evt.arg3, evt.arg2);
                evt.arg8 = parseValue_1(evt.arg8, evt.arg7);
            }
            else if (evt.instance.options.format === 'yMd') {
                var parseDateTime = function (val, operator) {
                    if (val) {
                        if (typeof val === 'string') {
                            var checkVal = val.trim();
                            var dateEventArgs = { value: checkVal, cell: { value: checkVal } };
                            _this.parent.notify(checkDateFormat, dateEventArgs);
                            if (dateEventArgs.isDate) {
                                val = operator === 'equal' ? dateEventArgs.dateObj : parseFloat(dateEventArgs.updatedVal);
                            }
                            else {
                                if (operator === 'equal' || operator === 'notequal') {
                                    var parsedNumVal = parseValue_1(val, 'notequal');
                                    if (isNumber(parsedNumVal)) {
                                        evt.instance.options.type = 'number';
                                        if (operator === 'notequal') {
                                            val = parsedNumVal;
                                        }
                                    }
                                    else {
                                        evt.instance.options.type = 'string';
                                    }
                                }
                            }
                        }
                        else if (isDateTime(val) && operator !== 'equal') {
                            val = dateToInt(val, true);
                        }
                    }
                    return val;
                };
                var filterDateInputs = document.querySelectorAll('.e-xlfl-valuediv input.e-datepicker');
                if (filterDateInputs.length === 2) {
                    evt.arg3 = parseDateTime(evt.arg3 || filterDateInputs[0].value, evt.arg2);
                    evt.arg8 = parseDateTime(evt.arg8 || filterDateInputs[1].value, evt.arg7);
                }
                else if (evt.arg3) {
                    evt.arg3 = parseDateTime(evt.arg3, evt.arg2);
                }
            }
        }
    };
    Filter.prototype.customFilterOpen = function (args) {
        var filterOptDiv = document.querySelectorAll('.e-xlfl-optrdiv input.e-dropdownlist');
        var criterias = [];
        for (var idx = 0; idx < filterOptDiv.length; idx++) {
            var dropDownList = getComponent(filterOptDiv[idx], 'dropdownlist');
            if (dropDownList) {
                criterias.push(dropDownList.value);
            }
        }
        var customFilterValues = [];
        if (criterias.length === 2) {
            var predicates = this.filterCollection.get(this.parent.activeSheetIndex);
            var criteriaIdx = void 0;
            for (var idx = 0; idx < predicates.length; idx++) {
                if (predicates[idx].field === args.column && predicates[idx].value !== null) {
                    criteriaIdx = criterias.indexOf(predicates[idx].operator);
                    if (criteriaIdx > -1) {
                        if (predicates[idx].operator === 'equal' && isDateTime(predicates[idx].value)) {
                            customFilterValues[criteriaIdx] = dateToInt(predicates[idx].value, true).toString();
                        }
                        else {
                            customFilterValues[criteriaIdx] = predicates[idx].value.toString();
                        }
                        criterias[criteriaIdx] = '';
                    }
                }
            }
        }
        var localeNumObj = getNumericObject(this.parent.locale);
        var getParsedVal = function (val) {
            if (localeNumObj.decimal !== '.' && isNumber(val)) {
                var parsedVal = val.toString();
                if (parsedVal.includes('.')) {
                    return parsedVal.replace('.', localeNumObj.decimal);
                }
            }
            return val;
        };
        var filterValInputs = document.querySelectorAll('.e-xlfl-valuediv input.e-ss-filter-input');
        if (filterValInputs.length) {
            for (var idx = 0; idx < filterValInputs.length; idx++) {
                var textObj = new TextBox({ placeholder: this.parent.serviceLocator.getService(locale).getConstant('CustomFilterPlaceHolder') });
                if (customFilterValues[idx]) {
                    textObj.value = getParsedVal(customFilterValues[idx]);
                }
                textObj.appendTo(filterValInputs[idx]);
            }
        }
        else {
            var filterValInputs_1 = document.querySelectorAll('.e-xlfl-valuediv input.e-datepicker');
            var datePickerObj = void 0;
            var val = void 0;
            for (var idx = 0; idx < filterValInputs_1.length; idx++) {
                if (isNumber(customFilterValues[idx])) {
                    val = this.parent.getDisplayText({ value: customFilterValues[idx], format: getFormatFromType('ShortDate') +
                            (customFilterValues[idx].includes('.') ? " " + getFormatFromType('Time') : '') });
                }
                else {
                    val = getParsedVal(customFilterValues[idx]);
                }
                datePickerObj = getComponent(filterValInputs_1[idx], 'datepicker');
                if (datePickerObj) {
                    datePickerObj.value = val;
                    filterValInputs_1[idx].value = val;
                }
            }
        }
    };
    Filter.prototype.wireFilterEvents = function (args, applyBtnClickHandler, refreshCheckboxes) {
        var _this = this;
        args.btnObj.element.addEventListener('click', applyBtnClickHandler.bind(this));
        args.searchBox.addEventListener('keydown', function (e) {
            if (e.keyCode === 13) {
                applyBtnClickHandler();
            }
        });
        var filterDlgCloseHandler = function () {
            _this.parent.off(refreshCheckbox, refreshCheckboxes);
            _this.parent.off(filterDialogClose, filterDlgCloseHandler);
            focus(_this.parent.element);
        };
        this.parent.on(filterDialogClose, filterDlgCloseHandler, this);
        this.parent.on(refreshCheckbox, refreshCheckboxes, this);
    };
    Filter.prototype.initTreeView = function (args, excelFilter) {
        var _this = this;
        var checkedNodes = [];
        var allNodes = [];
        var idColl = {};
        var groupedYears = [];
        var groupedMonths = [];
        var groupedData = [];
        var otherData = [];
        var value;
        var month;
        var day;
        var date;
        var mId;
        var dId;
        var monthNum;
        var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October',
            'November', 'December'];
        if (this.parent.locale !== 'en-US') {
            var formats = IntlBase.getDependables(cldrData, this.parent.locale, null).dateObject;
            var monthObj_1 = formats.months['stand-alone'] ? formats.months['stand-alone'].wide : {};
            if (Object.keys(monthObj_1).length === 12) {
                months = Object.keys(monthObj_1).map(Number).map(function (key) { return monthObj_1[key]; });
            }
        }
        var grpObj;
        var indeterminate = false;
        var sheet = this.parent.getActiveSheet();
        var addNodes = function (data) {
            idColl["" + dId] = true;
            if (isFilterHidden(sheet, Number(data['__rowIndex']) - 1)) {
                indeterminate = true;
            }
            else {
                checkedNodes.push(dId);
            }
            allNodes.push(dId);
        };
        args.dataSource.forEach(function (data) {
            date = data[args.column.field];
            if (typeof date === 'object' && !!Date.parse(date.toString())) {
                value = date.getFullYear().toString();
                if (!idColl["" + value]) {
                    grpObj = { __rowIndex: value, hasChild: true };
                    grpObj[args.column.field] = value;
                    groupedYears.push(grpObj);
                    idColl["" + value] = true;
                }
                monthNum = date.getMonth();
                month = months[monthNum];
                mId = value + ' ' + month;
                if (!idColl["" + mId]) {
                    grpObj = { __rowIndex: mId, pId: value, hasChild: true, month: monthNum };
                    grpObj[args.column.field] = month;
                    groupedMonths.push(grpObj);
                    idColl["" + mId] = true;
                }
                day = date.getDate();
                dId = mId + ' ' + day.toString();
                if (!idColl["" + dId]) {
                    grpObj = { __rowIndex: dId, pId: mId };
                    grpObj[args.column.field] = day;
                    groupedData.push(grpObj);
                    addNodes(data);
                }
            }
            else {
                if (!data[args.column.field] && data[args.column.field] !== 0) {
                    dId = 'blanks';
                    value = _this.parent.serviceLocator.getService(locale).getConstant('Blanks');
                }
                else {
                    dId = 'text ' + data[args.column.field].toString().toLowerCase();
                    value = data[args.column.field];
                }
                if (!idColl["" + dId]) {
                    grpObj = { __rowIndex: dId };
                    grpObj[args.column.field] = value;
                    otherData.push(grpObj);
                    addNodes(data);
                }
            }
        });
        groupedYears = new DataManager(groupedYears).executeLocal(new Query().sortBy(args.column.field, 'decending'));
        groupedMonths = new DataManager(groupedMonths).executeLocal(new Query().sortBy('month', 'ascending'));
        groupedData = new DataManager(groupedData).executeLocal(new Query().sortBy(args.column.field, 'ascending'));
        groupedData = groupedYears.concat(groupedMonths.concat(groupedData));
        if (otherData.length) {
            otherData = new DataManager(otherData).executeLocal(new Query().sortBy(args.column.field, 'ascending'));
            groupedData = groupedData.concat(otherData);
        }
        var nodeClick = function (args) {
            var checkedNode = [args.node];
            if (args.event.target.classList.contains('e-fullrow') || args.event.key === 'Enter') {
                var getNodeDetails = treeViewObj.getNode(args.node);
                if (getNodeDetails.isChecked === 'true') {
                    treeViewObj.uncheckAll(checkedNode);
                }
                else {
                    treeViewObj.checkAll(checkedNode);
                }
            }
        };
        var selectAllClick = function () {
            cBox.indeterminate = false;
            if (cBoxFrame.classList.contains('e-check')) {
                treeViewObj.uncheckAll();
                cBoxFrame.classList.add('e-uncheck');
                cBox.checked = false;
            }
            else {
                treeViewObj.checkAll();
                cBoxFrame.classList.add('e-check');
                cBox.checked = true;
            }
        };
        var selectAll = this.createSelectAll(args, excelFilter);
        selectAll.addEventListener('click', selectAllClick.bind(this));
        selectAll.classList.add('e-spreadsheet-ftrchk');
        var cBoxFrame = selectAll.querySelector('.e-frame');
        cBoxFrame.classList.add('e-selectall');
        args.element.appendChild(selectAll);
        var cBox = selectAll.querySelector('.e-chk-hidden');
        var treeViewEle = this.parent.createElement('div');
        var treeViewObj = new TreeView({
            fields: { dataSource: groupedData, id: '__rowIndex', parentID: 'pId', text: args.column.field, hasChildren: 'hasChild' },
            enableRtl: this.parent.enableRtl, showCheckBox: true, cssClass: 'e-checkboxtree', checkedNodes: checkedNodes,
            nodeClicked: nodeClick.bind(this),
            keyPress: nodeClick.bind(this),
            nodeChecked: function (e) {
                if (e.action !== 'indeterminate') {
                    indeterminate = treeViewObj.checkedNodes.length !== treeViewObj.fields.dataSource.length;
                    _this.updateState(args, cBoxFrame, cBox, indeterminate, treeViewObj.checkedNodes.length);
                }
            }
        });
        treeViewObj.createElement = this.parent.createElement;
        treeViewObj.appendTo(treeViewEle);
        args.element.appendChild(treeViewEle);
        checkedNodes = treeViewObj.checkedNodes;
        this.updateState(args, cBoxFrame, cBox, indeterminate, treeViewObj.checkedNodes.length);
        var applyBtnClickHandler = function () {
            if (treeViewObj.checkedNodes.length === groupedData.length) {
                _this.filterSuccessHandler(new DataManager(args.dataSource), { action: 'clear-filter', field: args.column.field });
            }
            else {
                _this.generatePredicate(treeViewObj.checkedNodes, otherData.length ? 'string' : args.type, args.column.field, excelFilter, allNodes, treeViewObj.checkedNodes.length > groupedData.length / 2);
            }
        };
        this.treeViewObj = treeViewObj;
        this.treeViewEle = treeViewEle;
        this.cBox = cBox;
        this.wireFilterEvents(args, applyBtnClickHandler, this.refreshCheckbox.bind(this, groupedData, treeViewObj, checkedNodes));
    };
    Filter.prototype.generatePredicate = function (checkedNodes, type, field, excelFilter, allNodes, isNotEqual) {
        var predicates = [];
        var predicate;
        var months = { 'January': 0, 'February': 1, 'March': 2, 'April': 3, 'May': 4, 'June': 5, 'July': 6,
            'August': 7, 'September': 8, 'October': 9, 'November': 10, 'December': 11 };
        var valArr;
        var date;
        var val;
        var otherType;
        var updateOtherPredicate = function () {
            if (valArr[0] === 'blanks') {
                predicates.push(Object.assign({ value: '', type: type }, predicate));
            }
            else if (valArr[0] === 'text') {
                valArr.splice(0, 1);
                val = valArr.join(' ');
                if (isNaN(Number(val))) {
                    otherType = 'string';
                }
                else {
                    val = Number(val);
                    otherType = 'number';
                }
                predicates.push(Object.assign({ value: val, type: otherType }, predicate));
            }
        };
        var setDate = function () {
            date = new Date(Number(valArr[0]), months[valArr[1]], Number(valArr[2]));
            if (date.getDate()) {
                predicates.push(Object.assign({ value: date, type: type }, predicate));
            }
            else {
                updateOtherPredicate();
            }
        };
        if (isNotEqual) {
            predicate = { field: field, ignoreAccent: false, matchCase: false, predicate: 'and', operator: 'notequal',
                isFilterByMenu: true };
            for (var i = 0, len = allNodes.length; i < len; i++) {
                if (checkedNodes.indexOf(allNodes[i]) === -1) {
                    valArr = allNodes[i].split(' ');
                    setDate();
                }
            }
        }
        else {
            predicate = { field: field, ignoreAccent: false, matchCase: false, predicate: 'or', operator: 'equal', isFilterByMenu: true };
            for (var i = 0, len = checkedNodes.length; i < len; i++) {
                valArr = checkedNodes[i].split(' ');
                if (valArr.length === 3) {
                    setDate();
                }
                else {
                    updateOtherPredicate();
                }
            }
        }
        excelFilter.initiateFilter(predicates);
    };
    Filter.prototype.refreshCheckbox = function (groupedData, treeViewObj, checkedNodes, args) {
        var searchValue;
        if (args.event.type === 'keyup') {
            searchValue = args.event.target.value;
        }
        else if (args.event.target.classList.contains('e-search-icon')) {
            return;
        }
        var filteredList;
        var changeData = function () {
            if (filteredList.length && !treeViewObj.fields.dataSource.length) {
                var wrapper = treeViewObj.element.parentElement;
                wrapper.getElementsByClassName('e-spreadsheet-ftrchk')[0].classList.remove('e-hide');
                detach(wrapper.getElementsByClassName('e-checkfltrnmdiv')[0]);
            }
            treeViewObj.fields.dataSource = filteredList;
            treeViewObj.dataBind();
        };
        if (searchValue) {
            filteredList = new DataManager(groupedData).executeLocal(new Query().where(new Predicate(treeViewObj.fields.text, 'contains', searchValue, true)));
            var filterId = {};
            var predicates = [];
            var key = void 0;
            var initList = void 0;
            var strFilter = isNaN(Number(searchValue));
            var expandId = void 0;
            var level = void 0;
            if (strFilter) {
                for (var i = 0; i < filteredList.length; i++) {
                    if (!filteredList[i]['hasChild']) {
                        continue;
                    }
                    predicates.push(new Predicate('pId', 'equal', filteredList[i]['__rowIndex'], false));
                    key = filteredList[i]['pId'];
                    if (!filterId["" + key]) {
                        predicates.push(new Predicate('__rowIndex', 'equal', key, false));
                        filterId["" + key] = true;
                    }
                }
                initList = filteredList;
                level = 1;
            }
            else {
                var year = void 0;
                var filterParentId = {};
                expandId = [];
                for (var i = 0; i < filteredList.length; i++) {
                    key = filteredList[i]['pId'];
                    if (key) {
                        year = key.split(' ')[0];
                        if (!filterId["" + key]) {
                            predicates.push(new Predicate('__rowIndex', 'equal', key, false));
                            filterId["" + key] = true;
                            expandId.push(year);
                            expandId.push(key);
                        }
                        if (!filterParentId["" + year]) {
                            if (!filterId["" + year]) {
                                predicates.push(new Predicate('__rowIndex', 'equal', year, false));
                                filterId["" + year] = true;
                            }
                            predicates.push(new Predicate('__rowIndex', 'equal', filteredList[i]['__rowIndex'], false));
                        }
                    }
                    else {
                        key = filteredList[i]['__rowIndex'];
                        if (!filterParentId["" + key]) {
                            predicates.push(new Predicate('__rowIndex', 'contains', key, false));
                            filterParentId["" + key] = true;
                        }
                    }
                }
                initList = [];
            }
            if (filteredList.length) {
                if (predicates.length) {
                    filteredList = initList.concat(new DataManager(groupedData).executeLocal(new Query().where(Predicate.or(predicates))));
                }
                changeData();
                treeViewObj.checkAll();
                var duration = treeViewObj.animation.expand.duration;
                treeViewObj.animation.expand.duration = 0;
                treeViewObj.expandAll(expandId, level);
                treeViewObj.animation.expand.duration = duration;
            }
            else if (treeViewObj.fields.dataSource.length) {
                changeData();
                var wrapper = treeViewObj.element.parentElement;
                wrapper.getElementsByClassName('e-spreadsheet-ftrchk')[0].classList.add('e-hide');
                var noRecordEle = this.parent.createElement('div', { className: 'e-checkfltrnmdiv' });
                var noRecordText = this.parent.createElement('span');
                noRecordText.innerText = this.parent.serviceLocator.getService(locale).getConstant('NoResult');
                noRecordEle.appendChild(noRecordText);
                wrapper.appendChild(noRecordEle);
            }
        }
        else {
            filteredList = groupedData;
            changeData();
            treeViewObj.checkedNodes = checkedNodes;
            treeViewObj.refresh();
        }
    };
    Filter.prototype.openDialog = function (cell) {
        var _this = this;
        var colIndex = parseInt(cell.getAttribute('aria-colindex'), 10);
        var field = getColumnHeaderText(colIndex);
        this.parent.showSpinner();
        var sheetIdx = this.parent.activeSheetIndex;
        var filterRange = this.filterRange.get(sheetIdx);
        var range = filterRange.range.slice();
        var sheet = this.parent.getActiveSheet();
        var filterCell = getCell(range[0], colIndex - 1, sheet);
        var displayName = this.parent.getDisplayText(filterCell);
        if (!filterRange.allowHeaderFilter) {
            range[0] = range[0] + 1; // to skip first row.
        }
        if (!filterRange.useFilterRange) {
            range[2] = sheet.usedRange.rowIndex; //filter range should be till used range.
        }
        var fullRange = [range[0], colIndex - 1, range[2], colIndex - 1];
        var totalRange = this.getPredicateRange(fullRange, this.filterCollection.get(sheetIdx), colIndex - 1);
        var otherColPredicate = totalRange.otherColPredicate;
        var curColPredicates;
        var curPredicate = totalRange.curPredicate;
        if (curPredicate.length) {
            curColPredicates = {};
            curColPredicates[field] = curPredicate;
        }
        var addr = sheet.name + "!" + totalRange.address;
        var fullAddr = getRangeAddress(fullRange);
        var col = this.getColumnType(sheet, colIndex - 1, range, true);
        var type = col.type;
        var templateColData;
        var isDateCol = type === 'date' || col.isDateAvail;
        var isNumCol = type === 'number';
        var templateFilter = isDateCol || isNumCol;
        var isMultiFormattedCol = col.isMultiFormattedCol;
        if (templateFilter && !totalRange.filteredCol) {
            templateColData = [];
        }
        getData(this.parent, addr, true, true, null, true, null, null, true, fullAddr, null, templateColData).then(function (jsonData) {
            var checkBoxData;
            _this.parent.element.style.position = 'relative';
            _this.parent.element.classList.add('e-filter-open');
            var filterCollection;
            if (templateFilter) {
                if (templateColData || !otherColPredicate.length) {
                    checkBoxData = new DataManager(templateColData || jsonData);
                }
                else {
                    var options_1 = _this.getPredicates(otherColPredicate);
                    var data = applyPredicates(new DataManager(jsonData), options_1.predicates, options_1.equalOrPredicates);
                    checkBoxData = new DataManager(data);
                }
                var beforeCboxRender_1 = function (args) {
                    _this.parent.off(beforeCheckboxRender, beforeCboxRender_1);
                    args.isCheckboxFilterTemplate = true;
                    if (isDateCol) {
                        _this.initTreeView(args, excelFilter);
                    }
                    else {
                        _this.initCboxList(args, excelFilter, jsonData);
                    }
                };
                _this.parent.on(beforeCheckboxRender, beforeCboxRender_1, _this);
                filterCollection = [];
            }
            else {
                if (otherColPredicate.length) {
                    var options_2 = _this.getPredicates(otherColPredicate);
                    var data = applyPredicates(new DataManager(jsonData), options_2.predicates, options_2.equalOrPredicates);
                    checkBoxData = new DataManager(data);
                }
                else {
                    checkBoxData = new DataManager(jsonData);
                }
                filterCollection = _this.getClonedPredicates(curPredicate);
            }
            var target = cell.querySelector('.e-filter-btn');
            var filterCol = {
                field: field, filter: {}
            };
            if (isNumCol) {
                var parent_1 = _this.parent;
                filterCol.filterTemplate = function (element) {
                    if (parent_1.isReact && element) {
                        element.appendChild(parent_1.createElement('input', { className: 'e-ss-filter-input' }));
                    }
                    else {
                        return [parent_1.createElement('input', { className: 'e-ss-filter-input' })];
                    }
                };
                var filterTemplateCallback_1 = function (template) {
                    return function (_data, _parent, _prop, _id, _isStringTemplate, _index, element) {
                        return template(element);
                    };
                };
                filterCol.getFilterTemplate = function () { return filterTemplateCallback_1(filterCol.filterTemplate); };
                if (parent_1.isReact && !parent_1.renderTemplates) {
                    parent_1.renderTemplates = function (callback) { return callback(); };
                }
            }
            var options = {
                type: type, field: field, format: (type === 'date' ? 'yMd' : null), displayName: displayName || 'Column ' + field,
                dataSource: checkBoxData || [], height: _this.parent.element.classList.contains('e-bigger') ? 800 : 500, columns: [],
                hideSearchbox: false, filteredColumns: filterCollection, column: filterCol,
                handler: _this.filterSuccessHandler.bind(_this, new DataManager(jsonData)), target: target,
                position: { X: 0, Y: 0 }, localeObj: _this.parent.serviceLocator.getService(locale), actualPredicate: curColPredicates,
                isFormatted: templateFilter && !isDateCol, isMultiFormattedCol: isMultiFormattedCol
            };
            var excelFilter = new ExcelFilterBase(_this.parent, _this.getLocalizedCustomOperators());
            excelFilter.openDialog(options);
            var filterPopup = document.querySelector('.e-filter-popup');
            if (filterPopup && filterPopup.id.includes(_this.parent.element.id)) {
                EventHandler.add(filterPopup, getStartEvent(), _this.filterMouseDownHandler, _this);
                var parentOff = _this.parent.element.getBoundingClientRect();
                var cellOff = target.getBoundingClientRect();
                var popupOff = filterPopup.getBoundingClientRect();
                var left = (cellOff.right - parentOff.left) - popupOff.width;
                if (left < 0) { // Left collision wrt spreadsheet left
                    left = cellOff.left - parentOff.left;
                }
                filterPopup.style.left = left * _this.parent.viewport.scaleX + "px";
                filterPopup.style.top = '0px';
                filterPopup.style.visibility = 'hidden';
                if (filterPopup.classList.contains('e-hide')) {
                    filterPopup.classList.remove('e-hide');
                }
                var top_1 = cellOff.bottom - parentOff.top;
                if (popupOff.height - (parentOff.bottom - cellOff.bottom) > 0) { // Bottom collision wrt spreadsheet bottom
                    top_1 -= popupOff.height - (parentOff.bottom - cellOff.bottom);
                    if (top_1 < 0) {
                        top_1 = 0;
                    }
                }
                filterPopup.style.top = top_1 * _this.parent.viewport.scaleY + "px";
                filterPopup.style.visibility = '';
            }
            _this.parent.hideSpinner();
        });
    };
    Filter.prototype.getPredicateRange = function (range, predicates, col) {
        var addr = getRangeAddress(range);
        var filteredCol;
        var otherColPredicate = [];
        var curPredicate = [];
        if (predicates && predicates.length) {
            var predicateRange_1;
            var colIdx_1;
            predicates.forEach(function (predicate) {
                if (predicate.field) {
                    predicateRange_1 = "" + predicate.field + (range[0] + 1) + ":" + predicate.field + (range[2] + 1);
                    colIdx_1 = getColIndex(predicate.field);
                    if (!addr.includes(predicateRange_1)) {
                        addr += "," + predicateRange_1;
                        if (colIdx_1 < range[1]) {
                            range[1] = colIdx_1;
                        }
                        if (colIdx_1 > range[3]) {
                            range[3] = colIdx_1;
                        }
                    }
                    if (col !== undefined) {
                        if (colIdx_1 === col) {
                            filteredCol = true;
                            curPredicate.push(predicate);
                        }
                        else {
                            otherColPredicate.push(predicate);
                        }
                    }
                }
            });
        }
        else {
            filteredCol = true;
        }
        return col === undefined ? addr :
            { address: addr, filteredCol: filteredCol, otherColPredicate: otherColPredicate, curPredicate: curPredicate };
    };
    Filter.prototype.filterDialogCreatedHandler = function () {
        var filterPopup = document.querySelector('.e-filter-popup');
        if (filterPopup && filterPopup.id.includes(this.parent.element.id) && filterPopup.classList.contains('e-popup-close')) {
            filterPopup.classList.add('e-hide');
        }
    };
    /**
     * Formats cell value for listing it in filter popup.
     *
     * @param {any} args - Specifies the args
     * @param {string | number} args.value - Specify the value
     * @param {object} args.column - Specify the column
     * @param {object} args.data - Specify the data
     * @returns {void} - Formats cell value for listing it in filter popup.
     */
    Filter.prototype.filterCboxValueHandler = function (args) {
        if (args.column && args.data) {
            var field = args.column.field;
            if (args.value) {
                var indexes = getCellIndexes(field + args.data['dataObj']['__rowIndex']);
                var cell = getCell(indexes[0], indexes[1], this.parent.getActiveSheet());
                if (cell && cell.format) {
                    args.value = this.parent.getDisplayText(cell);
                }
            }
        }
    };
    /**
     * Triggers when sorting items are chosen on context menu of filter popup.
     *
     * @param {HTMLElement} target - Specify the element.
     * @returns {void} - Triggers when sorting items are chosen on context menu of filter popup.
     */
    Filter.prototype.selectSortItemHandler = function (target) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var sortOrder = target.classList.contains('e-filter-sortasc') ? 'Ascending'
            : target.classList.contains('e-filter-sortdesc') ? 'Descending' : null;
        if (sortOrder === 'Ascending') {
            target.setAttribute('aria-label', l10n.getConstant('SortAscending'));
        }
        else {
            target.setAttribute('aria-label', l10n.getConstant('SortDescending'));
        }
        if (!sortOrder) {
            return;
        }
        var sheet = this.parent.getActiveSheet();
        var sheetIdx = this.parent.activeSheetIndex;
        var filterRange = this.filterRange.get(sheetIdx);
        var range = filterRange.range.slice();
        if (!filterRange.allowHeaderFilter) {
            range[0] = range[0] + 1; // to skip first row.
        }
        if (!filterRange.useFilterRange) {
            range[2] = sheet.usedRange.rowIndex; //filter range should be till used range.
        }
        if (isReadOnlyCells(this.parent, range)) {
            this.closeDialog();
            this.parent.notify(readonlyAlert, null);
            return;
        }
        this.parent.sortCollection = this.parent.sortCollection ? this.parent.sortCollection : [];
        var prevSort = [];
        for (var i = this.parent.sortCollection.length - 1; i >= 0; i--) {
            if (this.parent.sortCollection[i] && this.parent.sortCollection[i].sheetIndex === sheetIdx) {
                prevSort.push(this.parent.sortCollection[i]);
                this.parent.sortCollection.splice(i, 1);
            }
        }
        this.parent.sortCollection.push({ sortRange: getRangeAddress(range), columnIndex: getIndexesFromAddress(sheet.activeCell)[1], order: sortOrder,
            sheetIndex: sheetIdx });
        this.parent.notify(applySort, { sortOptions: { sortDescriptors: { order: sortOrder }, containsHeader: false }, previousSort: prevSort, range: getRangeAddress(range) });
        this.refreshFilterRange();
        this.closeDialog();
    };
    /**
     * Triggers when OK button or clear filter item is selected
     *
     * @param {DataManager} dataSource - Specify the data source
     * @param {Object} args - Specify the data source
     * @param {string} args.action - Specify the action
     * @param {PredicateModel[]} args.filterCollection - Specify the filter collection.
     * @param {string} args.field - Specify the field.
     * @param {number} args.sIdx - Specify the index.
     * @param {boolean} args.isInternal - Specify the isInternal.
     * @param {boolean} args.isFilterByValue - Specify the isFilterByValue.
     * @param {PredicateModel[]} args.prevPredicates - Specify the prevPredicates.
     * @param {boolean} args.isOpen - Specify the filtering action is after importing.
     * @returns {void} - Triggers when OK button or clear filter item is selected
     */
    Filter.prototype.filterSuccessHandler = function (dataSource, args) {
        var sheetIdx = args.sIdx;
        if (!sheetIdx && sheetIdx !== 0) {
            sheetIdx = args.isOpen ? 0 : this.parent.activeSheetIndex;
        }
        var prevPredicates = args.prevPredicates || [].slice.call(this.filterCollection.get(sheetIdx));
        if (args.isFilterByValue && !prevPredicates.length) {
            prevPredicates = undefined;
        }
        var predicates = this.filterCollection.get(sheetIdx);
        this.updatePredicate(predicates, args.field);
        if (args.action === 'clear-filter' && predicates.length === prevPredicates.length) {
            return;
        }
        if (args.action === 'filtering') {
            var processWildcards = function (filterCollection) {
                return filterCollection.map(function (predicate) {
                    if (predicate && typeof predicate.value === 'string' && predicate.value.includes('*')) {
                        if (predicate.value.startsWith('*') && predicate.value.endsWith('*')) {
                            predicate.value = predicate.value.split('*').join('');
                            predicate.operator = 'contains';
                        }
                        else if (predicate.value.endsWith('*')) {
                            predicate.value = predicate.value.split('*').join('');
                            predicate.operator = 'startswith';
                        }
                        else if (predicate.value.startsWith('*')) {
                            predicate.value = predicate.value.split('*').join('');
                            predicate.operator = 'endswith';
                        }
                    }
                    return predicate;
                });
            };
            predicates = predicates.concat(processWildcards(args.filterCollection));
        }
        this.filterCollection.set(sheetIdx, predicates);
        var options = this.getPredicates(predicates);
        var filterOptions = { datasource: dataSource, predicates: options.predicates,
            equalOrPredicates: options.equalOrPredicates };
        var filterRange = this.filterRange.get(sheetIdx);
        if (!filterRange.useFilterRange) {
            filterRange.range[2] = getSheet(this.parent, sheetIdx).usedRange.rowIndex; //extend the range if filtered
        }
        this.applyFilter(filterOptions, getRangeAddress(filterRange.range), sheetIdx, prevPredicates, false, args.isInternal, args.isFilterByValue);
    };
    Filter.prototype.isCustomNumFilter = function (operator) {
        return operator.includes('greaterthan') || operator.includes('lessthan') || operator === 'between';
    };
    Filter.prototype.getClonedPredicates = function (predicates, equalOrFields) {
        if (equalOrFields === void 0) { equalOrFields = []; }
        var predicateCol = [];
        var predicate;
        var isNumCustomPredicate;
        for (var i = 0; i < predicates.length; i++) {
            predicate = predicates[i];
            if ((this.isCustomNumFilter(predicate.operator) || (!predicate.isFilterByMenu && predicate.operator === 'notequal')) &&
                isNumber(predicate.value)) {
                predicateCol.push(Object.assign({}, predicate, { field: predicate.field + "_value", type: 'number' }));
                isNumCustomPredicate = true;
            }
            else {
                if (!predicate.isFilterByMenu && predicate.operator === 'equal' && predicate.predicate === 'or') {
                    equalOrFields.push(predicate.field);
                }
                predicateCol.push(predicate);
            }
        }
        if (!isNumCustomPredicate && equalOrFields.length) {
            equalOrFields.splice(0);
        }
        return predicateCol;
    };
    Filter.prototype.updatePredicate = function (predicates, field) {
        var dataManager = new DataManager(predicates);
        var query = new Query();
        var fields = dataManager.executeLocal(query.where('field', 'equal', field));
        for (var index = 0; index < fields.length; index++) {
            var sameIndex = -1;
            for (var filterIndex = 0; filterIndex < predicates.length; filterIndex++) {
                if (predicates[filterIndex].field === fields[index].field) {
                    sameIndex = filterIndex;
                    break;
                }
            }
            if (sameIndex !== -1) {
                predicates.splice(sameIndex, 1);
            }
        }
    };
    /**
     * Triggers events for filtering and applies filter.
     *
     * @param {FilterOptions} filterOptions - Specify the filteroptions.
     * @param {string} range - Specify the range.
     * @param {number} sheetIdx - Specify the sheet index.
     * @param {PredicateModel[]} prevPredicates - Specify the predicates.
     * @param {boolean} refresh - Spefify the refresh.
     * @param {boolean} isInternal - Specify the isInternal.
     * @param {boolean} isFilterByValue - Specify the it is filter by value or not.
     * @returns {void} - Triggers events for filtering and applies filter.
     */
    Filter.prototype.applyFilter = function (filterOptions, range, sheetIdx, prevPredicates, refresh, isInternal, isFilterByValue) {
        var _this = this;
        var eventArgs = { range: range, predicates: [].slice.call(this.filterCollection.get(sheetIdx)),
            previousPredicates: prevPredicates, sheetIndex: sheetIdx, cancel: false };
        if (!isInternal && !isFilterByValue) {
            this.parent.notify(beginAction, { action: 'filter', eventArgs: eventArgs });
            if (eventArgs.cancel) {
                return;
            }
        }
        if (range.indexOf('!') < 0) {
            range = this.parent.sheets[sheetIdx].name + '!' + range;
        }
        this.parent.showSpinner();
        var promise = new Promise(function (resolve) { resolve((function () { })()); });
        var filterArgs = { args: { range: range,
                filterOptions: filterOptions }, promise: promise, refresh: refresh };
        var prevChartIndexes = getChartsIndexes(this.parent);
        this.parent.notify(initiateFilter, filterArgs);
        var currentChartIndexes = getChartsIndexes(this.parent);
        this.parent.notify(refreshChartCellModel, { prevChartIndexes: prevChartIndexes, currentChartIndexes: currentChartIndexes });
        filterArgs.promise.then(function (args) {
            _this.refreshFilterRange();
            _this.parent.hideSpinner();
            if (!isInternal) {
                delete eventArgs.cancel;
                _this.parent.notify(completeAction, { action: 'filter', eventArgs: eventArgs });
                if (document.activeElement.id !== _this.parent.element.id + "_SearchBox") {
                    focus(_this.parent.element);
                }
            }
            return Promise.resolve(args);
        }).catch(function (error) {
            _this.filterRangeAlertHandler({ error: error });
            return Promise.reject(error);
        });
    };
    /**
     * Gets the predicates for the sheet
     *
     * @param {PredicateModel[]} predicateModel - Specifies the predicate collection.
     * @returns {Predicate[]} - Gets the predicates for the sheet
     */
    Filter.prototype.getPredicates = function (predicateModel) {
        var equalOrPredicates;
        var equalOrFields = [];
        var predicateCol = this.getClonedPredicates(predicateModel, equalOrFields);
        if (equalOrFields.length) {
            var field = void 0;
            var predicate = void 0;
            var equalOrPredicatesModel = new Map();
            for (var idx = 0; idx < predicateCol.length; idx++) {
                field = predicateCol[idx].field.replace('_value', '');
                if (equalOrFields.indexOf(field) > -1) {
                    predicate = predicateCol.splice(idx, 1)[0];
                    idx--;
                    if (equalOrPredicatesModel.has(field)) {
                        equalOrPredicatesModel.get(field).push(predicate);
                    }
                    else {
                        equalOrPredicatesModel.set(field, [predicate]);
                    }
                }
            }
            equalOrPredicates = [];
            var predicateList_1;
            equalOrPredicatesModel.forEach(function (predicates) {
                predicateList_1 = [];
                var excelPredicate = CheckBoxFilterBase.getPredicate(predicates);
                for (var _i = 0, _a = Object.keys(excelPredicate); _i < _a.length; _i++) {
                    var prop = _a[_i];
                    predicateList_1.push(excelPredicate["" + prop]);
                }
                equalOrPredicates.push(predicateList_1);
            });
        }
        var predicateList = [];
        var excelPredicate = CheckBoxFilterBase.getPredicate(predicateCol);
        for (var _i = 0, _a = Object.keys(excelPredicate); _i < _a.length; _i++) {
            var prop = _a[_i];
            predicateList.push(excelPredicate["" + prop]);
        }
        return { predicates: predicateList, equalOrPredicates: equalOrPredicates };
    };
    /**
     * Gets the column type to pass it into the excel filter options.
     *
     * @param {SheetModel} sheet - Specify the sheet.
     * @param {number} colIndex - Specify the colindex
     * @param {number[]} range - Specify the range.
     * @param {boolean} isFilterDialog - Indicates whether the filter dialog UI is open.
     * @returns {string} - Gets the column type to pass it into the excel filter options.
     */
    Filter.prototype.getColumnType = function (sheet, colIndex, range, isFilterDialog) {
        var num = 0;
        var str = 0;
        var date = 0;
        var time = 0;
        var cell;
        var formatOption;
        var format;
        var isMultiFormattedCol;
        for (var i = range[0]; i <= range[2]; i++) {
            cell = getCell(i, colIndex, sheet);
            if (cell && !(isFilterDialog && !(cell.value || Number(cell.value) === 0))) {
                if (cell.format && cell.format !== 'General') {
                    var type = getTypeFromFormat(cell.format).toLowerCase();
                    switch (type) {
                        case 'number':
                        case 'currency':
                        case 'accounting':
                        case 'percentage':
                            num++;
                            break;
                        case 'shortdate':
                        case 'longdate':
                            date++;
                            break;
                        case 'time':
                            num++;
                            break;
                        case 'text':
                            str++;
                            break;
                        default:
                            formatOption = {};
                            if (isCustomDateTime(cell.format, true, formatOption)) {
                                if (formatOption.type === 'date') {
                                    date++;
                                }
                                else {
                                    num++;
                                }
                            }
                            else if (isNumber(cell.value)) {
                                num++;
                            }
                            else if (cell.value) {
                                str++;
                            }
                            break;
                    }
                    if (!format) {
                        format = cell.format;
                    }
                }
                else if (isNumber(cell.value)) {
                    num++;
                }
                else if (cell.value) {
                    str++;
                }
                if (format && format !== cell.format) {
                    isMultiFormattedCol = true;
                }
            }
        }
        return { type: (num > str && num > date && num > time) ? 'number' : (str >= num && str >= date && str >= time) ? 'string'
                : (date > num && date > str && date > time) ? 'date' : 'datetime', isDateAvail: !!date, isMultiFormattedCol: isMultiFormattedCol };
    };
    /**
     * Clear filter from the field.
     *
     * @param {any} args - Specifies the args
     * @param {{ field: string }} args.field - Specify the args
     * @param {boolean} args.isAction - Specify the isAction.
     * @param {boolean} args.preventRefresh - Specify the preventRefresh.
     * @param {number} args.sheetIndex - Specify the sheet index value.
     * @returns {void} - Clear filter from the field.
     */
    Filter.prototype.clearFilterHandler = function (args) {
        var sheetIndex = args && !isNullOrUndefined(args.sheetIndex) ? args.sheetIndex : this.parent.activeSheetIndex;
        if (args && args.field) {
            var predicates = [].slice.call(this.filterCollection.get(sheetIndex));
            if (predicates && predicates.length) {
                this.updatePredicate(predicates, args.field);
                this.initiateFilterUIHandler({ predicates: predicates, range: getRangeAddress(this.filterRange.get(sheetIndex).range), sIdx: sheetIndex });
            }
        }
        else {
            var isAction = args && args.isAction;
            var filterArgs = { isFiltered: false, isClearAll: true, sheetIndex: sheetIndex };
            this.getFilteredColumnHandler(filterArgs);
            if (filterArgs.isFiltered || (args && args.preventRefresh)) {
                var eventArgs = void 0;
                var sheet = getSheet(this.parent, sheetIndex);
                var filterRange = this.filterRange.get(sheetIndex);
                var range = filterRange.range;
                if (isAction) {
                    eventArgs = { range: getRangeAddress(range), predicates: [], previousPredicates: this.filterCollection.get(sheetIndex), sheetIndex: sheetIndex, cancel: false };
                    this.parent.notify(beginAction, { action: 'filter', eventArgs: eventArgs });
                    if (eventArgs.cancel) {
                        return;
                    }
                }
                this.filterCollection.set(sheetIndex, []);
                var len = filterRange.useFilterRange ? range[2] : sheet.usedRange.rowIndex;
                if (this.parent.scrollSettings.enableVirtualization && ((len - range[0]) + 1 > (this.parent.viewport.rowCount +
                    (this.parent.getThreshold('row') * 2)))) {
                    for (var i = 0; i <= len; i++) {
                        setRow(sheet, i, { hidden: false, isFiltered: false });
                    }
                    if (!args || !args.preventRefresh) {
                        this.parent.renderModule.refreshSheet(false, false, true);
                    }
                }
                else {
                    this.refreshFilterRange(null, null, sheetIndex);
                    var evtArgs = { startIndex: range[0], hide: false, isFiltering: true, refreshUI: false, endIndex: filterRange.useFilterRange ? range[2] : sheet.usedRange.rowIndex, sheetIndex: sheetIndex };
                    this.parent.notify(hideShow, evtArgs);
                    if (evtArgs.refreshUI && (!args || !args.preventRefresh)) {
                        this.parent.renderModule.refreshSheet(false, false, true);
                    }
                }
                if (isAction) {
                    delete eventArgs.cancel;
                    this.parent.notify(completeAction, { action: 'filter', eventArgs: eventArgs });
                    focus(this.parent.element);
                }
            }
        }
    };
    /**
     * Reapplies the filter.
     *
     * @param {boolean} isInternal - Specifies the isInternal.
     * @param {boolean} refresh - Specifies the refresh.
     * @returns {void} - Reapplies the filter.
     */
    Filter.prototype.reapplyFilterHandler = function (isInternal, refresh) {
        var _this = this;
        var sheetIdx = this.parent.activeSheetIndex;
        if (this.filterRange.has(sheetIdx)) {
            var predicates_2 = this.filterCollection.get(sheetIdx);
            if (predicates_2 && predicates_2.length) {
                var sheet = getSheet(this.parent, sheetIdx);
                var filterRange_1 = this.filterRange.get(sheetIdx);
                var range = filterRange_1.range.slice();
                if (!filterRange_1.allowHeaderFilter) {
                    range[0] = range[0] + 1;
                }
                if (!filterRange_1.useFilterRange) {
                    range[2] = sheet.usedRange.rowIndex;
                }
                range[1] = range[3] = getColIndex(predicates_2[0].field);
                var addr = sheet.name + "!" + this.getPredicateRange(range, predicates_2.slice(1, predicates_2.length));
                getData(this.parent, addr, true, true, null, true, null, null, false, getRangeAddress(range)).then(function (jsonData) {
                    var options = _this.getPredicates(_this.filterCollection.get(sheetIdx));
                    _this.applyFilter({ predicates: options.predicates, datasource: new DataManager(jsonData),
                        equalOrPredicates: options.equalOrPredicates }, getRangeAddress(filterRange_1.range), sheetIdx, [].slice.call(predicates_2), refresh, isInternal);
                });
            }
        }
    };
    /**
     * Gets the filter information of the sheet.
     *
     * @param {FilterInfoArgs} args - Specify the args
     * @returns {void} - Gets the filter information of the sheet.
     */
    Filter.prototype.getFilterRangeHandler = function (args) {
        var sheetIdx = isNullOrUndefined(args.sheetIdx) ? this.parent.activeSheetIndex : args.sheetIdx;
        var filterOption = this.filterRange && this.filterRange.get(sheetIdx);
        if (filterOption) {
            args.hasFilter = true;
            args.filterRange = filterOption.range;
            args.allowHeaderFilter = filterOption.allowHeaderFilter;
            args.isFiltered = this.filterCollection && this.filterCollection.get(sheetIdx) &&
                this.filterCollection.get(sheetIdx).length > 0;
        }
        else {
            args.hasFilter = false;
            args.filterRange = null;
        }
    };
    /**
     * Returns the custom operators for filter items.
     *
     * @returns {Object} - Returns the custom operators for filter items.
     */
    Filter.prototype.getLocalizedCustomOperators = function () {
        var l10n = this.parent.serviceLocator.getService(locale);
        var numOptr = [
            { value: 'equal', text: l10n.getConstant('Equal') },
            { value: 'greaterthan', text: l10n.getConstant('GreaterThan') },
            { value: 'greaterthanorequal', text: l10n.getConstant('GreaterThanOrEqual') },
            { value: 'lessthan', text: l10n.getConstant('LessThan') },
            { value: 'lessthanorequal', text: l10n.getConstant('LessThanOrEqual') },
            { value: 'notequal', text: l10n.getConstant('NotEqual') }
        ];
        var customOperators = {
            stringOperator: [
                { value: 'startswith', text: l10n.getConstant('StartsWith') },
                { value: 'endswith', text: l10n.getConstant('EndsWith') },
                { value: 'contains', text: l10n.getConstant('Contains') },
                { value: 'equal', text: l10n.getConstant('Equal') },
                { value: 'isempty', text: l10n.getConstant('IsEmpty') },
                { value: 'doesnotstartwith', text: l10n.getConstant('NotStartsWith') },
                { value: 'doesnotendwith', text: l10n.getConstant('NotEndsWith') },
                { value: 'doesnotcontain', text: l10n.getConstant('NotContains') },
                { value: 'notequal', text: l10n.getConstant('NotEqual') },
                { value: 'isnotempty', text: l10n.getConstant('IsNotEmpty') }
            ],
            numberOperator: numOptr,
            dateOperator: numOptr,
            datetimeOperator: numOptr,
            booleanOperator: [
                { value: 'equal', text: l10n.getConstant('Equal') },
                { value: 'notequal', text: l10n.getConstant('NotEqual') }
            ]
        };
        return customOperators;
    };
    /**
     * To set the filtered range and predicates collections in the save JSON object.
     *
     * @param {any} args - Specifies the args
     * @param {number} args.sheetIdx - Specifies the sheet index value.
     * @param {boolean} args.isSaveAction - Specifies the Save action.
     * @param {any} args.saveJson - Specifies save as Json.
     * @param {FilterCollectionModel[]} args.saveJson.filterCollection - Specifies the filter collection values.
     * @returns {void}
     */
    Filter.prototype.setFilteredCollection = function (args) {
        var _this = this;
        var filterArgs = { sheetIdx: args.sheetIdx };
        this.getFilterRangeHandler(filterArgs);
        if (filterArgs.hasFilter) {
            var filterModel_1 = { sheetIndex: args.sheetIdx, filterRange: getRangeAddress(filterArgs.filterRange),
                hasFilter: true, column: [], criteria: [], value: [], dataType: [], predicates: [] };
            args.saveJson.filterCollection.push(filterModel_1);
            var predicates = this.filterCollection.get(args.sheetIdx);
            var predicateMap = new Map();
            var predicate = void 0;
            var type_1;
            var getPredicateValue_1 = function (val) {
                if (isNullOrUndefined(val)) {
                    return '';
                }
                else if (args.isSaveAction && type_1 === 'date') {
                    var dateVal = val;
                    val = dateVal.getMonth() + 1 + "/" + dateVal.getDate() + "/" + dateVal.getFullYear() + " " + dateVal.getHours() + ":" + dateVal.getMinutes() + ":" + dateVal.getSeconds();
                }
                return val;
            };
            for (var idx = 0; idx < predicates.length; idx++) {
                predicate = predicates[idx];
                if (args.isSaveAction && predicate.operator === 'notequal' && predicate.isFilterByMenu) {
                    if (predicateMap.has(predicate.field)) {
                        predicateMap.get(predicate.field).push(predicate);
                    }
                    else {
                        predicateMap.set(predicate.field, [predicate]);
                    }
                }
                else {
                    filterModel_1.column.push(getColIndex(predicate.field));
                    filterModel_1.criteria.push(predicate.operator);
                    if (args.isSaveAction) {
                        if (predicate.operator === 'equal') {
                            type_1 = isDateTime(predicate.value) ? 'date' : 'string';
                            filterModel_1.value.push(getPredicateValue_1(predicate.value));
                            filterModel_1.dataType.push(type_1);
                        }
                        else {
                            filterModel_1.value.push(predicate.value);
                            filterModel_1.dataType.push('custom');
                        }
                    }
                    else {
                        filterModel_1.value.push(predicate.value);
                        filterModel_1.dataType.push(predicate.type);
                    }
                    filterModel_1.predicates.push(predicate.predicate);
                }
            }
            var colDataMap_1 = new Map();
            var colIdx_2;
            predicateMap.forEach(function (predicate, field) {
                colIdx_2 = getColIndex(field);
                if (!colDataMap_1.has(field)) {
                    colDataMap_1.set(field, _this.getColData(colIdx_2, field, args.sheetIdx));
                }
                var colData = colDataMap_1.get(field);
                var predicateCol = _this.getPredicates(predicate).predicates;
                var filteredData = new DataManager(colData).executeLocal(new Query().where(Predicate.and(predicateCol)));
                for (var idx = 0; idx < filteredData.length; idx++) {
                    filterModel_1.column.push(colIdx_2);
                    filterModel_1.criteria.push('equal');
                    type_1 = isDateTime(filteredData[idx][field]) ? 'date' : 'string';
                    filterModel_1.value.push(getPredicateValue_1(filteredData[idx][field]));
                    filterModel_1.dataType.push(type_1);
                    filterModel_1.predicates.push('or');
                }
            });
        }
    };
    Filter.prototype.updateFilter = function (args) {
        if (this.parent.filterCollection && (args.initLoad || args.isOpen)) {
            var datePredicate = void 0;
            var predicates = void 0;
            var filterCol = void 0;
            var dateColData = {};
            var filteredData = void 0;
            var predicateCol = void 0;
            var filterOption = void 0;
            for (var i = 0; i < this.parent.filterCollection.length; i++) {
                filterCol = this.parent.filterCollection[i];
                var sIdx = filterCol.sheetIndex;
                if (i === 0 && !this.parent.isOpen && !args.isOpen) {
                    sIdx = 0;
                }
                predicates = [];
                if (filterCol.column) {
                    for (var j = 0; j < filterCol.column.length; j++) {
                        predicateCol = {
                            field: getColumnHeaderText(filterCol.column[j] + 1),
                            operator: this.getFilterOperator(filterCol.criteria[j]), value: typeof filterCol.value[j]
                                === 'string' ? filterCol.value[j].split('*').join('') : filterCol.value[j],
                            predicate: filterCol.predicates && filterCol.predicates[j],
                            type: filterCol.dataType && filterCol.dataType[j]
                        };
                        if (['year', 'month', 'day'].indexOf(predicateCol.type) > -1) {
                            var dateEventArgs = { value: predicateCol.value,
                                cell: { value: predicateCol.value } };
                            this.parent.notify(checkDateFormat, dateEventArgs);
                            if (dateEventArgs.isDate) {
                                var predicateVal = dateEventArgs.dateObj;
                                predicateCol.value = predicateVal;
                                if (predicateCol.type === 'day') {
                                    predicateCol.type = 'date';
                                    predicateCol.predicate = 'or';
                                    predicates.push(predicateCol);
                                }
                                else {
                                    predicateCol.operator = 'greaterthanorequal';
                                    predicateCol.predicate = 'and';
                                    var type = predicateCol.type;
                                    predicateCol.type = 'date';
                                    datePredicate = this.getPredicates([predicateCol, { field: predicateCol.field, operator: 'lessthanorequal', predicate: 'and',
                                            type: 'date', value: new Date(predicateVal.getFullYear(), type === 'year' ? 12 :
                                                predicateVal.getMonth() + 1, 0, 0, 0, 0) }]).predicates;
                                    if (!dateColData[predicateCol.field]) {
                                        dateColData[predicateCol.field] = this.getColData(filterCol.column[j], predicateCol.field, i);
                                    }
                                    filteredData = new DataManager(dateColData[predicateCol.field]).executeLocal(new Query().where(Predicate.and(datePredicate)));
                                    for (var k = 0; k < filteredData.length; k++) {
                                        predicates.push({ field: predicateCol.field, operator: 'equal', predicate: 'or', type: 'date',
                                            value: filteredData[k][predicateCol.field] });
                                    }
                                }
                            }
                        }
                        else {
                            filterOption = { isOpen: true, instance: { options: { type: predicateCol.type } },
                                arg3: predicateCol.value, arg2: predicateCol.operator };
                            this.beforeFilteringHandler(filterOption);
                            predicateCol.value = filterOption.arg3;
                            if (predicateCol.type === 'string' || predicateCol.type === 'custom') {
                                if (this.isCustomNumFilter(predicateCol.operator) && isNumber(predicateCol.value)) {
                                    predicateCol.type = 'number';
                                }
                            }
                            else if (predicateCol.type === 'date' && predicateCol.operator === 'equal' &&
                                typeof predicateCol.value === 'string' && predicateCol.value.includes('/') &&
                                predicateCol.value.includes(':')) {
                                var dateTimeStr = predicateCol.value.split(' ');
                                if (dateTimeStr.length === 2) {
                                    var dateArr = dateTimeStr[0].split('/');
                                    var timeArr = dateTimeStr[1].split(':');
                                    if (dateArr.length === 3 && timeArr.length === 3) {
                                        predicateCol.value = new Date(Number(dateArr[2]), Number(dateArr[0]) - 1, Number(dateArr[1]), Number(timeArr[0]), Number(timeArr[1]), Number(timeArr[2]));
                                    }
                                }
                            }
                            predicates.push(predicateCol);
                        }
                    }
                }
                if (!args.isOpen) {
                    for (var i_1 = 0; i_1 < predicates.length - 1; i_1++) {
                        if (predicates[i_1].field === predicates[i_1 + 1].field) {
                            if (!predicates[i_1].predicate) {
                                predicates[i_1].predicate = 'or';
                            }
                            if (!predicates[i_1 + 1].predicate) {
                                predicates[i_1 + 1].predicate = 'or';
                            }
                        }
                    }
                }
                this.parent.notify(initiateFilterUI, { predicates: predicates.length ? predicates : undefined, range: filterCol.filterRange, sIdx: sIdx, isInternal: true, isOpen: args.isOpen });
            }
            if (this.parent.sortCollection) {
                this.parent.notify(sortImport, null);
            }
            this.parent.setProperties({ filterCollection: null }, true);
        }
    };
    Filter.prototype.getColData = function (colIdx, field, sheetIdx) {
        var sheet = getSheet(this.parent, sheetIdx);
        if (!sheet.rows || !sheet.rows.length) {
            return [];
        }
        var rows = [];
        var row;
        var cell;
        for (var rowIdx = 1, rowLen = sheet.rows.length; rowIdx < rowLen; rowIdx++) {
            if (sheet.rows[rowIdx]) {
                cell = getCell(rowIdx, colIdx, sheet, false, true);
                if (cell && cell.value) {
                    row = {};
                    row[field] = getValueFromFormat(this.parent, cell, rowIdx, colIdx);
                    rows.push(row);
                }
            }
        }
        return rows;
    };
    Filter.prototype.getFilterOperator = function (value) {
        switch (value) {
            case 'BeginsWith':
                value = 'startswith';
                break;
            case 'Less':
                value = 'lessthan';
                break;
            case 'EndsWith':
                value = 'endswith';
                break;
            case 'Equal':
                value = 'equal';
                break;
            case 'Notequal':
                value = 'notEqual';
                break;
            case 'Greater':
                value = 'greaterthan';
                break;
            case 'Contains':
                value = 'contains';
                break;
            case 'LessOrEqual':
                value = 'lessthanorequal';
                break;
            case 'GreaterOrEqual':
                value = 'greaterthanorequal';
                break;
            case 'NotContains':
                value = 'doesnotcontain';
                break;
            case 'NotBeginsWith':
                value = 'doesnotstartwith';
                break;
            case 'NotEndsWith':
                value = 'doesnotendwith';
                break;
            case 'Empty':
                value = 'isempty';
                break;
            case 'NotEmpty':
                value = 'isnotempty';
                break;
        }
        return value;
    };
    Filter.prototype.beforeInsertHandler = function (args) {
        if (args.modelType === 'Column') {
            var sheetIdx_1 = isUndefined$1(args.activeSheetIndex) ? this.parent.activeSheetIndex : args.activeSheetIndex;
            if (this.filterRange.size && this.filterRange.has(sheetIdx_1)) {
                var range = this.filterRange.get(sheetIdx_1).range;
                if (this.isFilterCell(sheetIdx_1, range[0], args.index) || args.index < range[1]) {
                    range[3] += args.model.length;
                    if (args.index <= range[1]) {
                        range[1] += args.model.length;
                    }
                    this.filterCollection.get(sheetIdx_1).forEach(function (predicate) {
                        var colIdx = getColIndex(predicate.field);
                        if (args.index <= colIdx) {
                            predicate.field = getColumnHeaderText(colIdx + args.model.length + 1);
                        }
                    });
                    if (this.parent.sortCollection) {
                        this.parent.sortCollection.forEach(function (sortCollection) {
                            if (sortCollection.sheetIndex === sheetIdx_1 && args.index <= sortCollection.columnIndex) {
                                sortCollection.columnIndex += args.model.length;
                            }
                        });
                    }
                }
            }
        }
        else if (args.modelType === 'Sheet') {
            for (var _i = 0, _a = Array.from(this.filterRange.keys()).sort().reverse(); _i < _a.length; _i++) {
                var key = _a[_i];
                if (args.index <= key) {
                    this.filterRange.set(key + args.model.length, this.filterRange.get(key));
                    this.filterRange.delete(key);
                    this.filterCollection.set(key + args.model.length, this.filterCollection.get(key));
                    this.filterCollection.delete(key);
                }
            }
            if (this.parent.sortCollection) {
                this.parent.sortCollection.forEach(function (sortCollection) {
                    if (args.index <= sortCollection.sheetIndex) {
                        sortCollection.sheetIndex += args.model.length;
                    }
                });
            }
        }
    };
    Filter.prototype.beforeDeleteHandler = function (args) {
        if (args.modelType === 'Column') {
            var sheetIdx = this.parent.activeSheetIndex;
            if (this.filterRange.size && this.filterRange.has(sheetIdx)) {
                var isChanged = true;
                var range = this.filterRange.get(sheetIdx).range;
                if (args.start >= range[1] && args.end <= range[3]) { // in between
                    range[3] -= args.end - args.start + 1;
                }
                else if (args.start < range[1] && args.end < range[1]) { // before
                    range[1] -= args.end - args.start + 1;
                    range[3] -= args.end - args.start + 1;
                }
                else if (args.start < range[1] && args.end > range[1] && args.end < range[3]) { // from before to inbetween
                    range[1] = args.start;
                    range[3] -= args.end - args.start + 1;
                }
                else {
                    isChanged = false;
                }
                if (isChanged) {
                    var filterCollection = this.filterCollection.get(sheetIdx);
                    var isPredicateRemoved = void 0;
                    for (var i = filterCollection.length - 1; i >= 0; i--) {
                        var colIdx = getColIndex(filterCollection[i].field);
                        if (args.end < colIdx) {
                            filterCollection[i].field = getColumnHeaderText(colIdx - (args.end - args.start + 1) + 1);
                        }
                        else if (args.start <= colIdx && args.end >= colIdx) {
                            isPredicateRemoved = true;
                            filterCollection.splice(i, 1);
                        }
                    }
                    var sortColl = this.parent.sortCollection;
                    if (sortColl) {
                        for (var i = 0; i < sortColl.length; i++) {
                            if (sortColl[i].sheetIndex === sheetIdx) {
                                if (args.end < sortColl[i].columnIndex) {
                                    sortColl[i].columnIndex = sortColl[i].columnIndex - (args.end - args.start + 1);
                                    break;
                                }
                                else if (args.start <= sortColl[i].columnIndex && args.end >= sortColl[i].columnIndex) {
                                    sortColl.splice(i, 1);
                                    break;
                                }
                            }
                        }
                    }
                    if (range.some(function (value) { return value < 0; })) {
                        this.removeFilter(sheetIdx, true, true);
                        args.refreshSheet = true;
                    }
                    else if (isPredicateRemoved) {
                        if (filterCollection && filterCollection.length) {
                            this.reapplyFilterHandler(true, true);
                            args.refreshSheet = false;
                        }
                        else {
                            this.clearFilterHandler({ preventRefresh: true });
                            args.refreshSheet = true;
                        }
                    }
                }
            }
        }
    };
    Filter.prototype.deleteSheetHandler = function (args) {
        if (!isUndefined$1(args.sheetIndex)) {
            for (var _i = 0, _a = Array.from(this.filterRange.keys()).sort().reverse(); _i < _a.length; _i++) {
                var key = _a[_i];
                if (args.sheetIndex === key) {
                    this.filterRange.delete(key);
                    this.filterCollection.delete(key);
                }
                else if (args.sheetIndex < key) {
                    this.filterRange.set(key - 1, this.filterRange.get(key));
                    this.filterRange.delete(key);
                    this.filterCollection.set(key - 1, this.filterCollection.get(key));
                    this.filterCollection.delete(key);
                }
            }
            var sortColl = this.parent.sortCollection;
            if (sortColl) {
                for (var i = sortColl.length - 1; i >= 0; i--) {
                    if (args.sheetIndex === sortColl[i].sheetIndex) {
                        sortColl.splice(i, 1);
                    }
                    else if (args.sheetIndex < sortColl[i].sheetIndex) {
                        sortColl[i].sheetIndex -= 1;
                    }
                }
            }
        }
        else if (this.filterRange.get(this.parent.activeSheetIndex)) {
            this.filterRange.delete(this.parent.activeSheetIndex);
            this.filterCollection.delete(this.parent.activeSheetIndex);
        }
    };
    Filter.prototype.clearHandler = function (args) {
        var info = this.parent.getAddressInfo(args.range);
        if (this.filterRange.has(info.sheetIndex)) {
            var indexes = this.filterRange.get(info.sheetIndex).range.slice();
            if (inRange(info.indices, indexes[0], indexes[1]) && inRange(info.indices, indexes[0], indexes[3])) {
                this.removeFilter(info.sheetIndex, null, null, true);
            }
        }
    };
    Filter.prototype.duplicateSheetFilterHandler = function (args) {
        for (var _i = 0, _a = Array.from(this.filterRange.keys()).sort().reverse(); _i < _a.length; _i++) {
            var key = _a[_i];
            if (args.newSheetIndex <= key) {
                this.filterRange.set(key + 1, this.filterRange.get(key));
                this.filterRange.delete(key);
                this.filterCollection.set(key + 1, this.filterCollection.get(key));
                this.filterCollection.delete(key);
            }
            else {
                break;
            }
        }
        if (this.filterCollection.has(args.sheetIndex)) {
            this.filterCollection.set(args.newSheetIndex, this.filterCollection.get(args.sheetIndex).slice());
        }
        if (this.filterRange.has(args.sheetIndex)) {
            var filterRange = this.filterRange.get(args.sheetIndex);
            this.filterRange.set(args.newSheetIndex, {
                useFilterRange: filterRange.useFilterRange, range: filterRange.range.slice(),
                allowHeaderFilter: filterRange.allowHeaderFilter
            });
        }
    };
    Filter.prototype.updateSortCollectionHandler = function (args) {
        var _a;
        if (args.isDuplicate) {
            if (this.parent.sortCollection && this.parent.sortCollection.length > 0) {
                var newSortCollection = [];
                for (var j = 0; j < this.parent.sortCollection.length; j++) {
                    var sortCol = this.parent.sortCollection[j];
                    if (sortCol.sheetIndex === args.curSheetIndex) {
                        var updatedSortCol = Object.assign({}, sortCol);
                        updatedSortCol.sheetIndex = args.newSheetIndex;
                        newSortCollection.push(updatedSortCol);
                    }
                }
                (_a = this.parent.sortCollection).push.apply(_a, newSortCollection);
            }
            return;
        }
        var sheet = this.parent.getActiveSheet();
        var sheetIdx = this.parent.activeSheetIndex;
        var filterRange = this.filterRange.get(sheetIdx);
        if (filterRange) {
            var range = filterRange.range.slice();
            if (!filterRange.allowHeaderFilter) {
                range[0] = range[0] + 1; // to skip first row.
            }
            if (!filterRange.useFilterRange) {
                range[2] = sheet.usedRange.rowIndex; //filter range should be till used range.
            }
            var sortDescriptors = args.sortOptions.sortDescriptors;
            this.parent.sortCollection = this.parent.sortCollection ? this.parent.sortCollection : [];
            if (Array.isArray(sortDescriptors)) {
                for (var i = 0; i < sortDescriptors.length; i++) {
                    this.parent.sortCollection.push({
                        sortRange: getRangeAddress(range), columnIndex: getColIndex(sortDescriptors[i].field),
                        order: sortDescriptors[i].order, sheetIndex: sheetIdx
                    });
                }
            }
            else {
                this.parent.sortCollection.push({
                    sortRange: getRangeAddress(range), columnIndex: getIndexesFromAddress(sheet.activeCell)[1],
                    order: sortDescriptors.order, sheetIndex: sheetIdx
                });
            }
        }
    };
    Filter.prototype.moveSheetHandler = function (args) {
        var prevSheetFilterRange;
        var currentSheetFilterRange;
        var prevSheetFilterCollection;
        var currentSheetFilterCollection;
        if (this.filterRange.has(args.prevIndex)) {
            prevSheetFilterRange = this.filterRange.get(args.prevIndex);
            prevSheetFilterCollection = this.filterCollection.get(args.prevIndex);
        }
        if (this.filterRange.has(args.currentIndex)) {
            currentSheetFilterRange = this.filterRange.get(args.currentIndex);
            currentSheetFilterCollection = this.filterCollection.get(args.currentIndex);
        }
        if (prevSheetFilterRange && currentSheetFilterRange) {
            this.filterRange.set(args.currentIndex, prevSheetFilterRange);
            this.filterRange.set(args.prevIndex, currentSheetFilterRange);
            this.filterCollection.set(args.currentIndex, prevSheetFilterCollection);
            this.filterCollection.set(args.prevIndex, currentSheetFilterCollection);
        }
        else if (prevSheetFilterRange) {
            this.filterRange.set(args.currentIndex, prevSheetFilterRange);
            this.filterRange.delete(args.prevIndex);
            this.filterCollection.set(args.currentIndex, prevSheetFilterCollection);
            this.filterCollection.delete(args.prevIndex);
        }
        else if (currentSheetFilterRange) {
            this.filterRange.set(args.prevIndex, currentSheetFilterRange);
            this.filterRange.delete(args.currentIndex);
            this.filterCollection.set(args.prevIndex, currentSheetFilterCollection);
            this.filterCollection.delete(args.currentIndex);
        }
    };
    Filter.prototype.refreshFilterCellsOnResize = function (args) {
        var range = this.filterRange.has(this.parent.activeSheetIndex) &&
            this.filterRange.get(this.parent.activeSheetIndex).range;
        if (range && range[0] === args.rowIndex) {
            var sheet = this.parent.getActiveSheet();
            for (var colIdx = range[1]; colIdx <= range[3]; colIdx++) {
                if (getCell(args.rowIndex, colIdx, sheet, false, true).notes) {
                    var cellEle = this.parent.getCell(args.rowIndex, colIdx);
                    if (cellEle) {
                        this.parent.serviceLocator.getService('cell').refresh(args.rowIndex, colIdx, false, cellEle, false, false, true);
                    }
                }
            }
        }
    };
    return Filter;
}());

var SpreadsheetImage = /** @class */ (function () {
    function SpreadsheetImage(parent) {
        this.parent = parent;
        this.addEventListener();
        this.renderImageUpload();
    }
    /**
     * Adding event listener for success and failure
     *
     * @returns {void} - Adding event listener for success and failure
     */
    SpreadsheetImage.prototype.addEventListener = function () {
        this.parent.on(insertImage, this.insertImage, this);
        this.parent.on(refreshImgCellObj, this.refreshImgCellObj, this);
        this.parent.on(createImageElement, this.createImageElement, this);
        this.parent.on(deleteImage, this.deleteImage, this);
        this.parent.on(refreshImagePosition, this.refreshInsDelImagePosition, this);
    };
    /**
     * Rendering upload component for importing images.
     *
     * @returns {void} - Rendering upload component for importing images.
     */
    SpreadsheetImage.prototype.renderImageUpload = function () {
        var uploadBox = this.parent.createElement('input', {
            id: this.parent.element.id + '_imageUpload',
            attrs: { type: 'file', accept: '.image, .jpg, .png, .gif ,jpeg', name: 'fileUpload' }
        });
        uploadBox.style.display = 'none';
        this.parent.element.appendChild(uploadBox);
        uploadBox.onchange = this.imageSelect.bind(this);
    };
    /**
     * Process after select the excel and image file.
     *
     * @param {Event} args - File select native event.
     * @returns {void} - Process after select the excel and image file.
     */
    SpreadsheetImage.prototype.imageSelect = function (args) {
        var file = args.target.files[0];
        if (!file) {
            return;
        }
        if (file.type.includes('image')) {
            this.insertImage({ file: file, isAction: true });
        }
        else {
            this.parent.serviceLocator.getService(dialog).show({ content: this.parent.serviceLocator.getService('spreadsheetLocale').getConstant('UnsupportedFile'),
                width: '300' });
        }
        args.target.value = '';
    };
    /**
     * Removing event listener for success and failure
     *
     * @returns {void} - Removing event listener for success and failure
     */
    SpreadsheetImage.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(insertImage, this.insertImage);
            this.parent.off(refreshImgCellObj, this.refreshImgCellObj);
            this.parent.off(createImageElement, this.createImageElement);
            this.parent.off(deleteImage, this.deleteImage);
            this.parent.off(refreshImagePosition, this.refreshInsDelImagePosition);
        }
    };
    /* eslint-disable */
    SpreadsheetImage.prototype.insertImage = function (args, range) {
        var _this = this;
        this.binaryStringVal(args).then(function (src) { return _this.createImageElement({ options: { src: src }, range: range, isPublic: true, isAction: args.isAction }); });
    };
    SpreadsheetImage.prototype.binaryStringVal = function (args) {
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            reader.readAsDataURL(args.file);
            reader.onload = function () { return resolve(reader.result); };
            reader.onerror = function (error) { return reject(error); };
        });
    };
    /* eslint-enable */
    SpreadsheetImage.prototype.createImageElement = function (args) {
        var lastIndex = args.range ? args.range.lastIndexOf('!') : 0;
        var range = args.range ? (lastIndex > 0) ? args.range.substring(lastIndex + 1) : args.range
            : this.parent.getActiveSheet().selectedRange;
        var sheetIndex = (args.range && lastIndex > 0) ?
            getSheetIndex(this.parent, args.range.substring(0, lastIndex)) : this.parent.activeSheetIndex;
        var overlayObj = this.parent.serviceLocator.getService(overlay);
        var id = args.options.id ? args.options.id : getUniqueID(this.parent.element.id + '_overlay_picture_');
        var indexes = getRangeIndexes(range);
        var sheet = isUndefined$1(sheetIndex) && !args.isUndoRedo ? this.parent.getActiveSheet() :
            this.parent.sheets[sheetIndex];
        if (!sheet || this.parent.element.querySelector("#" + id)) {
            return;
        }
        if (args.isPublic && isReadOnlyCells(this.parent, indexes)) {
            if (args.isAction) {
                this.parent.notify(readonlyAlert, null);
            }
            return;
        }
        var eventArgs = { requestType: 'beforeInsertImage', range: sheet.name + '!' + range, imageData: args.options.src,
            sheetIndex: sheetIndex };
        if (args.isPublic) {
            this.parent.notify('actionBegin', { eventArgs: eventArgs, action: 'beforeInsertImage' });
        }
        if (eventArgs.cancel) {
            return;
        }
        var overlayProps = overlayObj.insertOverlayElement(id, range, sheetIndex);
        overlayProps.element.style.backgroundImage = 'url(\'' + args.options.src + '\')';
        if (args.options.height || args.options.left) {
            overlayProps.element.style.height = args.options.height + 'px';
            overlayProps.element.style.width = args.options.width + 'px';
            if (!isNullOrUndefined(args.options.top)) {
                overlayProps.element.style.top = Number(addDPRValue(args.options.top).toFixed(2)) + 'px';
            }
            if (!isNullOrUndefined(args.options.left)) {
                overlayProps.element.style.left = Number(addDPRValue(args.options.left).toFixed(2)) + 'px';
            }
        }
        if (sheet.frozenRows || sheet.frozenColumns) {
            overlayObj.adjustFreezePaneSize(args.options, overlayProps.element, range);
        }
        var imgData = {
            src: args.options.src, id: id, height: parseFloat(overlayProps.element.style.height.replace('px', '')),
            width: parseFloat(overlayProps.element.style.width.replace('px', '')),
            top: sheet.frozenRows || sheet.frozenColumns ? (indexes[0] ? getRowsHeight(sheet, 0, indexes[0] - 1) : 0) : overlayProps.top,
            left: sheet.frozenRows || sheet.frozenColumns ? (indexes[1] ? getColumnsWidth(sheet, 0, indexes[1] - 1) : 0) : overlayProps.left
        };
        this.parent.setUsedRange(indexes[0], indexes[1]);
        var isPositionChanged = false;
        var isElementRemoved = false;
        if (!args.isPublic && !args.isUndoRedo && (imgData.top !== args.options.top || imgData.left !== args.options.left)) {
            args.options.top = imgData.top;
            args.options.left = imgData.left;
            isPositionChanged = true;
        }
        var setImageEventArgs = {
            options: [imgData], range: sheet.name + '!' + range, isPositionChanged: isPositionChanged, isElementRemoved: isElementRemoved
        };
        if (args.isPublic || args.isUndoRedo || isPositionChanged) {
            this.parent.notify(setImage, setImageEventArgs);
        }
        if (isPositionChanged && setImageEventArgs.isElementRemoved) {
            overlayProps = overlayObj.insertOverlayElement(id, range, sheetIndex);
            overlayProps.element.style.backgroundImage = 'url(\'' + args.options.src + '\')';
        }
        var currCell = getCell(indexes[0], indexes[1], sheet);
        if (!currCell.image[currCell.image.length - 1].id) {
            currCell.image[currCell.image.length - 1].id = imgData.id;
        }
        if (!args.isUndoRedo && args.isPublic) {
            eventArgs = { requestType: 'insertImage', range: sheet.name + '!' + range, imageHeight: args.options.height ?
                    args.options.height : 300, imageWidth: args.options.width ? args.options.width : 400, imageData: args.options.src, id: id,
                sheetIndex: sheetIndex };
            this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'insertImage' });
        }
    };
    SpreadsheetImage.prototype.refreshInsDelImagePosition = function (args) {
        var count = args.count;
        var sheetIdx = args.sheetIdx;
        var sheet = this.parent.sheets[sheetIdx];
        var pictureElements;
        var currCellObj = getCell(args.rowIdx, args.colIdx, sheet);
        var imageLen = currCellObj.image.length;
        var top;
        var left;
        for (var i = 0; i < imageLen; i++) {
            pictureElements = document.getElementById(currCellObj.image[i].id);
            top = (args.type === 'Row') ? (args.status === 'insert') ? currCellObj.image[i].top + (count * 20) :
                currCellObj.image[i].top - (count * 20) : currCellObj.image[i].top;
            left = (args.type === 'Column') ? (args.status === 'insert') ? currCellObj.image[i].left + (count * 64) :
                currCellObj.image[i].left - (count * 64) : currCellObj.image[i].left;
            currCellObj.image[i].top = top;
            currCellObj.image[i].left = left;
            if (pictureElements) {
                pictureElements.style.top = top + 'px';
                pictureElements.style.left = left + 'px';
            }
        }
    };
    SpreadsheetImage.prototype.refreshImgCellObj = function (args) {
        var sheetIndex = isUndefined$1(args.sheetIdx) ? this.parent.activeSheetIndex : args.sheetIdx;
        var sheet = getSheet(this.parent, sheetIndex);
        var prevCellObj = getCell(args.prevRowIdx, args.prevColIdx, sheet);
        var currCellObj = getCell(args.currentRowIdx, args.currentColIdx, sheet);
        var prevCellImg = prevCellObj ? prevCellObj.image : [];
        var prevImgObj;
        var currImgObj;
        var prevCellImgLen = (prevCellImg && prevCellImg.length) ? prevCellImg.length : 0;
        if (prevCellObj && prevCellObj.image && prevCellImg.length > 0) {
            for (var i = 0; i < prevCellImgLen; i++) {
                if (prevCellImg[i] && prevCellImg[i].id === args.id) {
                    prevImgObj = prevCellImg[i];
                    prevImgObj.height = args.currentHeight;
                    prevImgObj.width = args.currentWidth;
                    prevImgObj.top = args.currentTop;
                    prevImgObj.left = args.currentLeft;
                    prevCellImg.splice(i, 1);
                }
            }
            if (currCellObj && currCellObj.image) {
                currImgObj = currCellObj.image;
                if (prevImgObj) {
                    currImgObj.push(prevImgObj);
                }
            }
            if (currImgObj) {
                setCell(args.currentRowIdx, args.currentColIdx, sheet, { image: currImgObj }, true);
            }
            else {
                setCell(args.currentRowIdx, args.currentColIdx, sheet, { image: [prevImgObj] }, true);
            }
            if (args.requestType === 'imageRefresh' && !args.isUndoRedo) {
                var eventArgs = {
                    requestType: 'imageRefresh', currentRowIdx: args.currentRowIdx, currentColIdx: args.currentColIdx,
                    prevRowIdx: args.prevRowIdx, prevColIdx: args.prevColIdx, prevTop: args.prevTop, prevLeft: args.prevLeft,
                    currentTop: args.currentTop, currentLeft: args.currentLeft, currentHeight: args.currentHeight,
                    currentWidth: args.currentWidth, prevHeight: args.prevHeight, prevWidth: args.prevWidth,
                    id: args.id, sheetIdx: this.parent.activeSheetIndex
                };
                this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'imageRefresh' });
            }
        }
    };
    SpreadsheetImage.prototype.deleteImage = function (args) {
        var sheet = args.sheet || this.parent.getActiveSheet();
        var pictureElements = document.getElementById(args.id);
        var rowIdx = args.rowIdx;
        var colIdx = args.colIdx;
        var address;
        if (pictureElements) {
            if (args.rowIdx === undefined && args.colIdx === undefined) {
                var imgTop = void 0;
                var imgleft = void 0;
                if (sheet.frozenRows || sheet.frozenColumns) {
                    var clientRect = pictureElements.getBoundingClientRect();
                    imgTop = { clientY: clientRect.top };
                    imgleft = { clientX: clientRect.left };
                    if (clientRect.top < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {
                        imgTop.target = this.parent.getColumnHeaderContent();
                    }
                    if (clientRect.left < this.parent.getRowHeaderContent().getBoundingClientRect().right) {
                        imgleft.target = this.parent.getRowHeaderTable();
                    }
                }
                else {
                    imgTop = { clientY: parseFloat(pictureElements.style.top), isImage: true };
                    imgleft = { clientX: parseFloat(pictureElements.style.left), isImage: true };
                }
                this.parent.notify(getRowIdxFromClientY, imgTop);
                this.parent.notify(getColIdxFromClientX, imgleft);
                rowIdx = imgTop.clientY;
                colIdx = imgleft.clientX;
            }
            address = sheet.name + '!' + getCellAddress(rowIdx, colIdx);
            if (!args.preventEventTrigger) {
                var eventArgs = { address: address, cancel: false };
                this.parent.notify(beginAction, { action: 'deleteImage', eventArgs: eventArgs });
                if (eventArgs.cancel) {
                    return;
                }
            }
            document.getElementById(args.id).remove();
        }
        else if (!args.sheet) {
            var rangeVal = args.range ? args.range.lastIndexOf('!') > 0 ? args.range.substring(args.range.lastIndexOf('!') + 1)
                : args.range : this.parent.getActiveSheet().selectedRange;
            var sheetIndex = args.range && args.range.lastIndexOf('!') > 0 ?
                getSheetIndex(this.parent, args.range.substring(0, args.range.lastIndexOf('!'))) :
                this.parent.activeSheetIndex;
            var index = getRangeIndexes(rangeVal);
            rowIdx = index[0];
            colIdx = index[1];
            sheet = this.parent.sheets[sheetIndex];
        }
        var image = {};
        if (sheet) {
            var cellObj = getCell(rowIdx, colIdx, sheet);
            var prevCellImg = (cellObj && cellObj.image) ? cellObj.image : [];
            var imgLength = prevCellImg.length;
            for (var i = imgLength - 1; i >= 0; i--) {
                if (prevCellImg[i].id === args.id) {
                    image = prevCellImg.splice(i, 1)[0];
                }
            }
            setCell(rowIdx, colIdx, sheet, { image: prevCellImg }, true);
        }
        if (!args.preventEventTrigger) {
            this.parent.notify(completeAction, { action: 'deleteImage', eventArgs: { address: address, id: image.id, imageData: image.src, imageWidth: image.width, imageHeight: image.height, cancel: false }, preventAction: args.isUndoRedo, isClearAction: args.clearAction });
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    SpreadsheetImage.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
    };
    /**
     * Get the sheet picture module name.
     *
     * @returns {string} - Get the sheet picture module name.
     */
    SpreadsheetImage.prototype.getModuleName = function () {
        return 'spreadsheetImage';
    };
    return SpreadsheetImage;
}());

Chart$1.Inject(ColumnSeries, LineSeries, BarSeries, AreaSeries, StackingColumnSeries, StackingLineSeries, StackingBarSeries, ScatterSeries);
Chart$1.Inject(StackingAreaSeries, Category, Legend, Tooltip$1, DataLabel);
AccumulationChart.Inject(PieSeries, AccumulationTooltip, AccumulationDataLabel, AccumulationLegend);
/**
 * Represents Chart support for Spreadsheet.
 */
var SpreadsheetChart = /** @class */ (function () {
    /**
     * Constructor for the Spreadsheet Chart module.
     *
     * @param {Spreadsheet} parent - Constructor for the Spreadsheet Chart module.
     */
    function SpreadsheetChart(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * Adding event listener for success and failure
     *
     * @returns {void} - Adding event listener for success and failure
     */
    SpreadsheetChart.prototype.addEventListener = function () {
        this.parent.on(initiateChart, this.initiateChartHandler, this);
        this.parent.on(refreshChartCellObj, this.refreshChartCellObj, this);
        this.parent.on(refreshChartCellModel, this.refreshChartCellModel, this);
        this.parent.on(refreshChartCellOnInit, this.refreshChartCellObj, this);
        this.parent.on(deleteChart, this.deleteChart, this);
        this.parent.on(clearChartBorder, this.clearBorder, this);
        this.parent.on(insertChart, this.insertChartHandler, this);
        this.parent.on(chartRangeSelection, this.chartRangeHandler, this);
        this.parent.on(chartDesignTab, this.chartDesignTabHandler, this);
        this.parent.on(addChartEle, this.updateChartElement, this);
        this.parent.on(undoRedoForChartDesign, this.undoRedoForChartDesign, this);
        this.parent.on(refreshChart, this.refreshChartData, this);
    };
    SpreadsheetChart.prototype.insertChartHandler = function (args) {
        var _this = this;
        var chartType = 'Column';
        var markerVisible = false;
        switch (args.id) {
            case 'clusteredColumn':
                chartType = 'Column';
                break;
            case 'stackedColumn':
                chartType = 'StackingColumn';
                break;
            case 'stackedColumn100':
                chartType = 'StackingColumn100';
                break;
            case 'clusteredBar':
                chartType = 'Bar';
                break;
            case 'stackedBar':
                chartType = 'StackingBar';
                break;
            case 'stackedBar100':
                chartType = 'StackingBar100';
                break;
            case 'area':
                chartType = 'Area';
                break;
            case 'stackedArea':
                chartType = 'StackingArea';
                break;
            case 'stackedArea100':
                chartType = 'StackingArea100';
                break;
            case 'line':
                chartType = 'Line';
                break;
            case 'lineMarker':
                chartType = 'Line';
                markerVisible = true;
                break;
            case 'stackedLine':
                chartType = 'StackingLine';
                break;
            case 'stackedLineMarker':
                chartType = 'StackingLine';
                markerVisible = true;
                break;
            case 'stackedLine100':
                chartType = 'StackingLine100';
                break;
            case 'stackedLine100Marker':
                chartType = 'StackingLine100';
                markerVisible = true;
                break;
            case 'pie':
                chartType = 'Pie';
                break;
            case 'doughnut':
                chartType = 'Doughnut';
                break;
            //  case 'radar':
            //     chartType = ;
            //     break;
            //  case 'radar_markers':
            //     chartType = 'Column';
            //     break;
            case 'scatter':
                chartType = 'Scatter';
                break;
        }
        var chart = [{ type: chartType, markerSettings: { visible: markerVisible, isFilled: true } }];
        if (args.isChart) {
            this.parent.notify(setChart, { chart: chart });
            getUpdateUsingRaf(function () { return focus(_this.parent.element); });
        }
        else {
            this.parent.notify(chartDesignTab, { chartType: chartType, triggerEvent: true, markerVisible: markerVisible });
        }
    };
    SpreadsheetChart.prototype.chartRangeHandler = function () {
        var overlayEle = document.querySelector('.e-datavisualization-chart.e-ss-overlay-active');
        if (overlayEle) {
            var chartId = overlayEle.getElementsByClassName('e-control')[0].id;
            var chartColl = this.parent.chartColl;
            var chartCollLen = chartColl.length;
            for (var idx = 0; idx < chartCollLen; idx++) {
                var chartEle = document.getElementById(chartColl[idx].id);
                if (overlayEle && chartEle && chartColl[idx].id === chartId) {
                    this.initiateChartHandler({ option: chartColl[idx], isRefresh: true });
                }
            }
        }
    };
    SpreadsheetChart.prototype.refreshChartData = function (args) {
        if (!this.parent.chartColl || !this.parent.chartColl.length) {
            return;
        }
        var chart;
        var sheetName;
        var range;
        var insideRange;
        var chartEle;
        var chartObj;
        for (var i = 0, len = this.parent.chartColl.length; i < len; i++) {
            chart = this.parent.chartColl[i];
            if (chart.range.includes('!')) {
                sheetName = chart.range.substring(0, chart.range.lastIndexOf('!'));
                if (this.parent.activeSheetIndex !== getSheetIndex(this.parent, sheetName)) {
                    continue;
                }
                range = chart.range.substring(chart.range.lastIndexOf('!') + 1);
            }
            else {
                range = chart.range;
            }
            if (args.viewportIndexes) {
                for (var idx = 0; idx < args.viewportIndexes.length; idx++) {
                    if (checkRange([args.viewportIndexes[idx]], range)) {
                        insideRange = true;
                        break;
                    }
                }
            }
            else {
                insideRange = args.range ? checkRange([args.range], range) : (args.showHide ? this.inRowColumnRange(getRangeIndexes(range), args.rIdx, args.showHide) : inRange(getRangeIndexes(range), args.rIdx, args.cIdx));
            }
            if (insideRange || (args.isSelectAll && !args.isRefreshChart)) {
                chartEle = this.parent.element.querySelector('.' + chart.id);
                if (chartEle) {
                    chartObj = getComponent(chartEle, 'chart') || getComponent(chartEle, 'accumulationchart');
                    if (chartObj) {
                        chartObj.series = this.initiateChartHandler({ option: chart, isRefresh: true });
                        chartObj.refresh();
                    }
                }
            }
        }
    };
    SpreadsheetChart.prototype.inRowColumnRange = function (range, index, showHide) {
        return showHide === 'rows' ? index >= range[0] && index <= range[2] : index >= range[1] && index <= range[3];
    };
    SpreadsheetChart.prototype.refreshChartCellModel = function (args) {
        for (var i = 0, len = args.prevChartIndexes.length; i < len; i++) {
            var chart = args.prevChartIndexes[i].chart;
            var prevRowIdx = args.prevChartIndexes[i].chartRowIdx;
            var prevColIdx = args.prevChartIndexes[i].chartColIdx;
            var currentRowIdx = args.currentChartIndexes[i].chartRowIdx;
            var currentColIdx = args.currentChartIndexes[i].chartColIdx;
            var eventArgs = {
                prevTop: chart.top, prevLeft: chart.left, prevRowIdx: prevRowIdx, prevColIdx: prevColIdx,
                prevHeight: chart.height, prevWidth: chart.width, currentTop: chart.top, currentLeft: chart.left,
                currentRowIdx: currentRowIdx, currentColIdx: currentColIdx, currentHeight: chart.height,
                currentWidth: chart.width, id: chart.id, requestType: 'chartRefreshOnFilter'
            };
            this.parent.notify(refreshChartCellObj, eventArgs);
        }
    };
    SpreadsheetChart.prototype.refreshChartCellObj = function (args) {
        var sheetIndex = isUndefined$1(args.sheetIdx) ? this.parent.activeSheetIndex : args.sheetIdx;
        var sheet = getSheet(this.parent, sheetIndex);
        var prevCellObj = getCell(args.prevRowIdx, args.prevColIdx, sheet);
        var currCellObj = getCell(args.currentRowIdx, args.currentColIdx, sheet);
        var prevCellChart = prevCellObj ? prevCellObj.chart : [];
        var prevChartObj;
        var currChartObj;
        var prevCellChartLen = (prevCellChart && prevCellChart.length) ? prevCellChart.length : 0;
        if (prevCellChartLen) {
            for (var i = 0; i < prevCellChartLen; i++) {
                if (prevCellChart[i].id === args.id.split('_overlay')[0]) {
                    prevChartObj = prevCellChart[i];
                    prevChartObj.height = args.currentHeight;
                    prevChartObj.width = args.currentWidth;
                    prevChartObj.top = args.currentTop;
                    prevChartObj.left = args.currentLeft;
                    prevCellChart.splice(i, 1);
                    i--;
                    prevCellChartLen--;
                    for (var idx = 0, chartCollLen = this.parent.chartColl.length; idx < chartCollLen; idx++) {
                        if (prevChartObj.id === this.parent.chartColl[idx].id) {
                            prevChartObj.height = args.currentHeight;
                            this.parent.chartColl[idx].width = args.currentWidth;
                            this.parent.chartColl[idx].top = args.currentTop;
                            this.parent.chartColl[idx].left = args.currentLeft;
                        }
                    }
                }
            }
            if (currCellObj && currCellObj.chart) {
                currChartObj = currCellObj.chart;
                if (prevChartObj) {
                    currChartObj.push(prevChartObj);
                }
            }
            if (currChartObj) {
                setCell(args.currentRowIdx, args.currentColIdx, sheet, { chart: currChartObj }, true);
            }
            else {
                setCell(args.currentRowIdx, args.currentColIdx, sheet, { chart: [prevChartObj] }, true);
            }
            if (args.requestType === 'chartRefresh' && !args.isUndoRedo) {
                var eventArgs = {
                    requestType: 'chartRefresh', currentRowIdx: args.currentRowIdx, currentColIdx: args.currentColIdx,
                    currentWidth: args.currentWidth, prevHeight: args.prevHeight, prevWidth: args.prevWidth,
                    prevRowIdx: args.prevRowIdx, prevColIdx: args.prevColIdx, prevTop: args.prevTop, prevLeft: args.prevLeft,
                    currentTop: args.currentTop, currentLeft: args.currentLeft, currentHeight: args.currentHeight,
                    id: args.id, sheetIdx: sheetIndex
                };
                this.parent.notify('actionComplete', { eventArgs: eventArgs, action: 'chartRefresh' });
            }
        }
    };
    SpreadsheetChart.prototype.processChartRange = function (range, dataSheetIdx, opt) {
        var _this = this;
        var xRange;
        var yRange;
        var lRange;
        var minr = range[0];
        var minc = range[1];
        var isStringSeries = false;
        var maxr = range[2];
        var maxc = range[3];
        var isSingleRow = minr === maxr;
        var isSingleCol = minc === maxc;
        var isDateTimeFormat;
        var isDateTime;
        var sheet = getSheet(this.parent, dataSheetIdx);
        var autoDetectFormatFn = getAutoDetectFormatParser(this.parent);
        var getPropertyValue = function (rIdx, cIdx, isFirstCol, checkDateTime) {
            var cell = getCell(rIdx, cIdx, sheet);
            if (cell) {
                if (cell.formula && isNullOrUndefined(cell.value)) {
                    _this.parent.notify(calculateFormula, { cell: cell, rowIdx: rIdx, colIdx: cIdx, sheetIndex: dataSheetIdx });
                }
                var value = void 0;
                if (cell.format) {
                    var formatObj = { value: cell.value, format: cell.format, formattedText: cell.value, cell: cell,
                        rowIndex: rIdx, colIndex: cIdx };
                    _this.parent.notify(getFormattedCellObject, formatObj);
                    var isNum = isNumber(cell.value);
                    if (isNum && !isCustomDateTime(cell.format, true, null, true)) {
                        value = Number(cell.value);
                    }
                    else {
                        if (checkDateTime && isNum) {
                            isDateTimeFormat = true;
                        }
                        else if (isFirstCol && isNum) {
                            isDateTime = true;
                        }
                        value = formatObj.formattedText && formatObj.formattedText.toString();
                    }
                }
                else {
                    autoDetectFormatFn(cell);
                    value = cell.value;
                }
                return isNullOrUndefined(value) ? '' : value;
            }
            else {
                return '';
            }
        };
        var trVal = sheet ? getPropertyValue(minr, maxc, false, true) : '';
        var blVal = sheet ? getPropertyValue(maxr, minc, true) : '';
        var tlVal = sheet ? getPropertyValue(minr, minc, true) : '';
        if (!isNumber(blVal) || !tlVal) {
            isStringSeries = true;
        }
        if ((isNullOrUndefined(tlVal) || (opt.type === 'Scatter' && !opt.isSeriesInRows)) && !isSingleRow && !isSingleCol) {
            xRange = [minr + 1, minc, maxr, minc];
            yRange = [minr + 1, minc + 1, maxr, maxc];
            lRange = [minr, minc + 1, minr, maxc];
        }
        else if (!isNullOrUndefined(blVal) && isStringSeries && !isSingleRow && !isSingleCol && !isDateTimeFormat) {
            if (!isNullOrUndefined(trVal) && (!isNumber(trVal) || !tlVal)) {
                xRange = [minr + 1, minc, maxr, minc];
                yRange = [minr + 1, minc + 1, maxr, maxc];
                lRange = [minr, minc + 1, minr, maxc];
            }
            else {
                xRange = [minr, minc, maxr, minc];
                yRange = [minr, minc + 1, maxr, maxc];
            }
        }
        else {
            yRange = [minr, minc, maxr, maxc];
            if ((!isNullOrUndefined(trVal) && !isNumber(trVal) && !isDateTimeFormat)) {
                lRange = [minr, minc, minr, maxc];
                if (!isSingleRow) {
                    yRange[0] = yRange[0] + 1;
                }
            }
            else if ((isSingleRow || isSingleCol) && isNullOrUndefined(tlVal)) {
                lRange = [minr, minc, minr, maxc];
                if (isSingleRow) {
                    yRange[1] = yRange[1] + 1;
                    lRange[3] = lRange[1];
                }
                else {
                    yRange[0] = yRange[0] + 1;
                }
            }
        }
        return { xRange: xRange, yRange: yRange, lRange: lRange, isStringSeries: isStringSeries, isDateTime: isDateTime };
    };
    SpreadsheetChart.prototype.getRangeData = function (options) {
        var sheet = options.sheet;
        if (!options.range) {
            options.range = getRangeIndexes(sheet.selectedRange);
        }
        else if (typeof (options.range) === 'string') {
            options.range = getRangeIndexes(options.range);
        }
        var rangeData = [];
        var rObj;
        var cIdx;
        var formatArgs;
        var rIdx = options.range[0];
        var autoDetectFormatFn = options.isYvalue && getAutoDetectFormatParser(this.parent);
        while (rIdx <= options.range[2]) {
            if (isHiddenRow(sheet, rIdx)) {
                rIdx++;
                continue;
            }
            cIdx = options.range[1];
            while (cIdx <= options.range[3]) {
                if (isHiddenCol(sheet, cIdx)) {
                    cIdx++;
                    continue;
                }
                var cell = getCell(rIdx, cIdx, sheet, false, true);
                if (cell.formula && isNullOrUndefined(cell.value)) {
                    this.parent.notify(calculateFormula, { cell: cell, rowIdx: rIdx, colIdx: cIdx, sheetIndex: options.sheetIdx });
                }
                if (options.isYvalue) {
                    autoDetectFormatFn(cell);
                }
                rObj = { value: cell.value || (cell.value === 0 ? 0 : null) };
                if (cell.format) {
                    formatArgs = { formattedText: cell.value, value: cell.value, format: cell.format, cell: cell, skipFormatCheck: true };
                    this.parent.notify(getFormattedCellObject, formatArgs);
                    if (options.isYvalue) {
                        if (isNumber(cell.value)) {
                            rObj.value = Number(cell.value);
                            rObj.displayText = formatArgs.formattedText ? formatArgs.formattedText.toString() : '';
                        }
                        else {
                            rObj.displayText = rObj.value === null ? '' : this.parent.getDisplayText({ format: cell.format, value: '0' });
                            rObj.value = 0;
                        }
                    }
                    else {
                        if (options.isScatter && !options.isDateTime && isNumber(cell.value)) {
                            rObj.value = Number(cell.value);
                        }
                        else {
                            rObj.value = formatArgs.formattedText ? formatArgs.formattedText.toString() : null;
                        }
                    }
                }
                else if (options.isYvalue) {
                    if (isNumber(rObj.value)) {
                        rObj.displayText = rObj.value.toString();
                        rObj.value = Number(rObj.value);
                    }
                    else {
                        rObj.displayText = rObj.value === null ? '' : '0';
                        rObj.value = 0;
                    }
                }
                rangeData.push(rObj);
                cIdx++;
            }
            rIdx++;
        }
        return rangeData;
    };
    SpreadsheetChart.prototype.toArrayData = function (args) {
        var prop = 'value';
        var obj;
        var i = 0;
        var temp = [];
        var len = args.length;
        while (i < len) {
            obj = args[i];
            if (Object.keys(obj).length) {
                if (prop in obj) {
                    temp.push(obj["" + prop]);
                }
            }
            else {
                temp.push('');
            }
            i++;
        }
        return temp;
    };
    SpreadsheetChart.prototype.getVirtualXValues = function (limit) {
        var i = 1;
        var arr = [];
        while (i < limit) {
            arr.push(i.toString());
            i++;
        }
        return arr;
    };
    SpreadsheetChart.prototype.processChartSeries = function (options, sheetIndex, xRange, yRange, lRange, isDateTime) {
        options = options || {};
        var seriesName;
        var dataLabel = { name: 'displayText' };
        var xValue;
        var lValue;
        var diff;
        var pArr;
        var pObj = {};
        var j;
        var i = 0;
        var yInc = 0;
        var isPrint = this.parent.isPrintingProcessing;
        var sArr = [];
        sheetIndex = isNullOrUndefined(sheetIndex) ? this.parent.activeSheetIndex : sheetIndex;
        var sheet = getSheet(this.parent, sheetIndex);
        var isScatter = options && options.type === 'Scatter';
        var yValue = this.getRangeData({ range: yRange, sheet: sheet, isYvalue: true, sheetIdx: sheetIndex });
        var rDiff = ((yRange[2] - yRange[0]) + 1) - this.parent.hiddenCount(yRange[0], yRange[2], 'rows', sheet);
        var cDiff = ((yRange[3] - yRange[1]) + 1) - this.parent.hiddenCount(yRange[1], yRange[3], 'columns', sheet);
        if (options.isSeriesInRows) {
            xValue = lRange ? this.toArrayData(this.getRangeData({ range: lRange, sheet: sheet, isScatter: isScatter,
                isDateTime: isDateTime })) : this.getVirtualXValues(cDiff + 1);
            if (xRange) {
                lValue = this.toArrayData(this.getRangeData({ range: xRange, sheet: sheet }));
            }
            diff = rDiff;
        }
        else {
            xValue = xRange ? this.toArrayData(this.getRangeData({ range: xRange, sheet: sheet, isScatter: isScatter,
                isDateTime: isDateTime })) : this.getVirtualXValues(rDiff + 1);
            if (lRange) {
                lValue = this.toArrayData(this.getRangeData({ range: lRange, sheet: sheet }));
            }
            diff = cDiff;
        }
        var len = xValue.length;
        var inc = options.isSeriesInRows ? 1 : diff;
        if (!isNullOrUndefined(options.dataLabelSettings)) {
            dataLabel.visible = options.dataLabelSettings.visible;
            dataLabel.position = options.dataLabelSettings.position;
        }
        while (i < diff) {
            j = 0;
            pArr = [];
            yInc = options.isSeriesInRows ? yInc : i;
            while (j < len) {
                if (isNullOrUndefined(xValue[j])) {
                    xValue[j] = getUniqueID('spread-chart-empty-label-');
                }
                pArr.push({ x: xValue[j], y: yValue[yInc].value, displayText: yValue[yInc].displayText });
                yInc += inc;
                j++;
            }
            if (lValue && lValue.length > 0) {
                seriesName = lValue[i];
            }
            else {
                seriesName = options.type === 'Scatter' ? ('series' + (i + 1)) : ('series' + i);
            }
            seriesName = isNullOrUndefined(seriesName) ? '' : seriesName.toString();
            if (options.type) {
                var type = options.type;
                if (type === 'Line' || type === 'StackingLine' || type === 'StackingLine100') {
                    pObj = {
                        dataSource: pArr, type: options.type, xName: 'x', yName: 'y', name: seriesName,
                        animation: { enable: !isPrint }, tooltipMappingName: 'displayText',
                        marker: options.markerSettings ? { visible: options.markerSettings.visible, width: options.markerSettings.size,
                            height: options.markerSettings.size, shape: options.markerSettings.shape, dataLabel: dataLabel,
                            isFilled: options.markerSettings.isFilled, border: options.markerSettings.border,
                            fill: options.markerSettings.isFilled ? options.markerSettings.fill : null } : { dataLabel: dataLabel }
                    };
                }
                else if (type === 'Scatter') {
                    pObj = {
                        dataSource: pArr, type: options.type, xName: 'x', yName: 'y', name: seriesName,
                        tooltipMappingName: 'displayText', animation: { enable: !isPrint },
                        marker: { visible: false, width: 12, height: 12, shape: 'Circle', dataLabel: dataLabel }
                    };
                }
                else if (type === 'Pie' || type === 'Doughnut') {
                    pObj = {
                        dataSource: pArr, radius: '100%', xName: 'x', yName: 'y', innerRadius: options.type === 'Pie' ? '0%' : '40%',
                        dataLabel: { visible: !!dataLabel.visible, position: dataLabel.position === 'Outer' ? 'Outside' : 'Inside',
                            name: 'displayText', font: { fontWeight: '600' } },
                        animation: { enable: !isPrint }, tooltipMappingName: 'displayText'
                    };
                }
                else {
                    pObj = {
                        dataSource: pArr, type: options.type, xName: 'x', yName: 'y', animation: { enable: !isPrint },
                        name: seriesName, marker: { dataLabel: dataLabel }, tooltipMappingName: 'displayText'
                    };
                }
            }
            sArr.push(pObj);
            i++;
        }
        var retVal;
        if (options.type) {
            retVal = {
                series: sArr, xRange: options.isSeriesInRows ? lRange : xRange,
                yRange: yRange, lRange: options.isSeriesInRows ? xRange : lRange
            };
        }
        return retVal;
    };
    SpreadsheetChart.prototype.getAxisFormat = function (yRange) {
        var format = '';
        if (!isNullOrUndefined(yRange)) {
            var cell = getCell(yRange[0], yRange[1], this.parent.getActiveSheet());
            if (cell && cell.format) {
                format = cell.format;
            }
        }
        return format;
    };
    SpreadsheetChart.prototype.focusChartRange = function (xRange, yRange, lRange) {
        var border = ['e-rcborderright', 'e-rcborderbottom', 'e-vcborderright', 'e-vcborderbottom', 'e-bcborderright', 'e-bcborderbottom'];
        this.clearBorder();
        var range;
        var sheet = this.parent.getActiveSheet();
        var isFreezePane = !!(sheet.frozenRows || sheet.frozenColumns);
        if (lRange) {
            if (isFreezePane) {
                range = lRange;
            }
            else {
                this.parent.notify(focusBorder, {
                    startcell: { rowIndex: lRange[0], colIndex: lRange[1] },
                    endcell: { rowIndex: lRange[2], colIndex: lRange[3] }, classes: [border[0], border[1]]
                });
            }
        }
        if (xRange) {
            if (isFreezePane) {
                if (range) {
                    range[0] = Math.min(lRange[0], xRange[0]);
                    range[1] = Math.min(lRange[1], xRange[1]);
                    range[2] = Math.max(lRange[2], xRange[2]);
                    range[3] = Math.max(lRange[3], xRange[3]);
                }
                else {
                    range = xRange;
                }
            }
            else {
                this.parent.notify(focusBorder, {
                    startcell: { rowIndex: xRange[0], colIndex: xRange[1] },
                    endcell: { rowIndex: xRange[2], colIndex: xRange[3] }, classes: [border[2], border[3]]
                });
            }
        }
        if (isFreezePane && range) {
            this.parent.notify(focusBorder, {
                startcell: { rowIndex: Math.min(range[0], yRange[0]), colIndex: Math.min(range[1], yRange[1]) },
                endcell: {
                    rowIndex: Math.max(range[2], yRange[2]), colIndex: Math.max(range[3], yRange[3])
                }, classes: [border[4], border[5]]
            });
        }
        else {
            this.parent.notify(focusBorder, {
                startcell: { rowIndex: yRange[0], colIndex: yRange[1] },
                endcell: { rowIndex: yRange[2], colIndex: yRange[3] }, classes: [border[4], border[5]]
            });
        }
    };
    SpreadsheetChart.prototype.clearBorder = function () {
        var sheet = this.parent.getActiveSheet();
        if (sheet.frozenColumns || sheet.frozenRows) {
            var chartIndicator = [].slice.call(this.parent.element.getElementsByClassName('e-chart-range'));
            chartIndicator.forEach(function (indicator) { detach(indicator); });
            return;
        }
        var mainCont = this.parent.getMainContent();
        var border = ['e-rcborderright', 'e-rcborderbottom', 'e-vcborderright', 'e-vcborderbottom', 'e-bcborderright', 'e-bcborderbottom'];
        for (var borderIdx = 0, borderLen = border.length; borderIdx < borderLen; borderIdx++) {
            var eleColl = mainCont.querySelectorAll('.' + border[borderIdx]);
            for (var tdIdx = 0, eleCollLen = eleColl.length; tdIdx < eleCollLen; tdIdx++) {
                var td = eleColl[tdIdx];
                td.classList.remove(border[borderIdx]);
            }
        }
    };
    SpreadsheetChart.prototype.initiateChartHandler = function (argsOpt) {
        var _this = this;
        var chart = argsOpt.option;
        var isRangeSelect = true;
        isRangeSelect = isNullOrUndefined(argsOpt.isInitCell) ? true : !argsOpt.isInitCell;
        argsOpt.triggerEvent = isNullOrUndefined(argsOpt.triggerEvent) ? true : argsOpt.triggerEvent;
        var seriesModel;
        argsOpt.isRefresh = isNullOrUndefined(argsOpt.isRefresh) ? false : argsOpt.isRefresh;
        var sheetIdx = (chart.range && chart.range.lastIndexOf('!') > 0) ?
            getSheetIndex(this.parent, chart.range.substring(0, chart.range.lastIndexOf('!'))) : this.parent.activeSheetIndex;
        var sheet = getSheet(this.parent, sheetIdx);
        var range = chart.range ? chart.range : this.parent.getActiveSheet().selectedRange;
        var rangeIdx = getRangeIndexes(range);
        var options = {};
        var isRowLesser;
        var eventArgs;
        if (!this.parent.allowChart && sheet.isProtected) {
            return seriesModel;
        }
        var args = {
            sheetIndex: sheetIdx, reqType: 'shape', type: 'actionBegin', shapeType: 'chart',
            action: 'create', options: chart, range: range, operation: 'create'
        };
        options = args.options;
        range = args.range;
        options = options || {};
        if (rangeIdx.length > 0 && !argsOpt.isRefresh && isRangeSelect) {
            var rDiff = rangeIdx[2] - rangeIdx[0];
            var cDiff = rangeIdx[3] - rangeIdx[1];
            if (rDiff < cDiff) {
                isRowLesser = true;
            }
        }
        options.isSeriesInRows = isRowLesser ? true : options.isSeriesInRows ? options.isSeriesInRows : false;
        argsOpt.dataSheetIdx = isNullOrUndefined(argsOpt.dataSheetIdx) ? sheetIdx : argsOpt.dataSheetIdx;
        var chartRange = this.processChartRange(rangeIdx, argsOpt.dataSheetIdx, options);
        var xRange = chartRange.xRange;
        var yRange = chartRange.yRange;
        var lRange = chartRange.lRange;
        if (sheetIdx === this.parent.activeSheetIndex && isRangeSelect) {
            this.focusChartRange(xRange, yRange, lRange);
        }
        if (argsOpt.triggerEvent && !argsOpt.isRefresh) {
            eventArgs = {
                type: chart.type, theme: chart.theme, isSeriesInRows: chart.isSeriesInRows, range: chart.range,
                markerSettings: options.markerSettings, dataLabelSettings: options.dataLabelSettings, title: options.title,
                legendSettings: options.legendSettings, primaryXAxis: options.primaryXAxis, primaryYAxis: options.primaryYAxis,
                id: chart.id, height: chart.height, width: chart.width, posRange: argsOpt.range, isInitCell: argsOpt.isInitCell,
                cancel: false, top: chart.top, left: chart.left
            };
            this.parent.notify(beginAction, { eventArgs: eventArgs, action: 'beforeInsertChart' });
            if (eventArgs.cancel) {
                return [];
            }
            chart.type = eventArgs.type;
            chart.theme = eventArgs.theme;
            chart.isSeriesInRows = eventArgs.isSeriesInRows;
            chart.markerSettings = eventArgs.markerSettings;
            chart.range = eventArgs.range;
            chart.id = eventArgs.id;
            chart.height = eventArgs.height;
            chart.width = eventArgs.width;
        }
        var chartOptions = this.processChartSeries(options, argsOpt.dataSheetIdx, xRange, yRange, lRange, chartRange.isDateTime);
        var primaryXAxis = {
            majorGridLines: chart.primaryXAxis && chart.primaryXAxis.majorGridLines &&
                !isNullOrUndefined(chart.primaryXAxis.majorGridLines.width) ?
                { width: chart.primaryXAxis.majorGridLines.width } : { width: 0 },
            minorGridLines: chart.primaryXAxis && chart.primaryXAxis.minorGridLines &&
                !isNullOrUndefined(chart.primaryXAxis.minorGridLines.width) ?
                { width: chart.primaryXAxis.minorGridLines.width } : { width: 0 },
            minorTicksPerInterval: chart.primaryXAxis && chart.primaryXAxis.minorGridLines && chart.primaryXAxis.minorGridLines.width > 0 ?
                5 : 0,
            lineStyle: { width: 0 },
            valueType: chart.type === 'Scatter' && !chartRange.isStringSeries && !chart.isSeriesInRows ? 'Double' : 'Category',
            rangePadding: chart.type === 'Scatter' && !chartRange.isStringSeries && !chart.isSeriesInRows ? 'Round' : 'Auto',
            visible: chart.primaryXAxis ? chart.primaryXAxis.visible : true,
            title: chart.primaryXAxis ? chart.primaryXAxis.title : '',
            edgeLabelPlacement: 'Shift'
        };
        var primaryYAxis = {
            lineStyle: { width: 0 },
            majorGridLines: chart.primaryYAxis && chart.primaryYAxis.majorGridLines &&
                !isNullOrUndefined(chart.primaryYAxis.majorGridLines.width) ?
                { width: chart.primaryYAxis.majorGridLines.width } : { width: 1 },
            minorGridLines: chart.primaryYAxis && chart.primaryYAxis.minorGridLines &&
                !isNullOrUndefined(chart.primaryYAxis.minorGridLines.width) ?
                { width: chart.primaryYAxis.minorGridLines.width } : { width: 0 },
            minorTicksPerInterval: chart.primaryYAxis && chart.primaryYAxis.minorGridLines && chart.primaryYAxis.minorGridLines.width > 0 ?
                5 : 0,
            visible: chart.primaryYAxis ? chart.primaryYAxis.visible : true,
            title: chart.primaryYAxis ? chart.primaryYAxis.title : '',
            edgeLabelPlacement: 'Shift'
        };
        if (argsOpt.isRefresh) {
            if (argsOpt.isSwitchRowColumn && chart.type === 'Scatter') {
                var chartObj = this.parent.element.querySelector('.' + chart.id);
                if (chartObj) {
                    var chartComp = getComponent(chartObj, 'chart');
                    chartComp.primaryXAxis.valueType = !chartRange.isStringSeries && !chart.isSeriesInRows ? 'Double' : 'Category';
                }
            }
            return chartOptions.series;
        }
        var id = chart.id + '_overlay';
        var overlayObj = this.parent.serviceLocator.getService(overlay);
        var eleRange = !isNullOrUndefined(argsOpt.isInitCell) && argsOpt.isInitCell ? argsOpt.range : range;
        var overlayProps = overlayObj.insertOverlayElement(id, eleRange, argsOpt.isChangeChartType ?
            this.parent.activeSheetIndex : getSheetIndexFromAddress(this.parent, eleRange));
        overlayProps.element.classList.add('e-datavisualization-chart');
        overlayProps.element.style.width = chart.width + 'px';
        overlayProps.element.style.height = chart.height + 'px';
        if (sheet && (sheet.frozenRows || sheet.frozenColumns)) {
            overlayObj.adjustFreezePaneSize(chart, overlayProps.element, eleRange);
        }
        else {
            if (isNullOrUndefined(chart.top)) {
                chart.top = overlayProps.top;
            }
            else {
                overlayProps.element.style.top = Number(addDPRValue(chart.top).toFixed(2)) + 'px';
            }
            if (isNullOrUndefined(chart.left)) {
                chart.left = overlayProps.left;
            }
            else {
                overlayProps.element.style.left = Number(addDPRValue(chart.left).toFixed(2)) + 'px';
            }
        }
        this.parent.notify(overlayEleSize, { height: chart.height, width: chart.width });
        var legendSettings = (chart.type === 'Pie' || chart.type === 'Doughnut') ? { position: 'Bottom', visible: true } : {};
        if (!isNullOrUndefined(chart.legendSettings)) {
            legendSettings.visible = chart.legendSettings.visible;
            legendSettings.position = chart.legendSettings.position;
        }
        var chartContent = this.parent.createElement('div', {
            id: chart.id, className: chart.id
        });
        var theme = chart.theme || 'Material';
        var primaryYAxisFormat = this.getAxisFormat(yRange);
        var primaryXAxisFormat = this.getAxisFormat(xRange);
        var borderWidth = Math.round(parseFloat(getComputedStyle(overlayProps.element).borderWidth)) * 2;
        var height = (parseFloat(overlayProps.element.style.height) - (isNaN(borderWidth) ? 0 : borderWidth)) + 'px';
        if (chart.type !== 'Pie' && chart.type !== 'Doughnut') {
            this.chart = new Chart$1({
                primaryXAxis: primaryXAxis,
                primaryYAxis: primaryYAxis,
                background: this.getThemeBgColor(theme),
                chartArea: { border: { width: 0 } },
                title: chart.title,
                legendSettings: legendSettings,
                theme: theme,
                series: chartOptions.series,
                tooltip: { enable: true, format: '${point.x} : <b>${point.tooltip}</b>' },
                width: overlayProps.element.style.width,
                height: height,
                enableRtl: this.parent.enableRtl,
                load: function (args) {
                    args.chart.theme = chart.theme || 'Material';
                },
                beforeResize: function (args) {
                    args.cancelResizedEvent = true; // This is for cancel the resized event.
                },
                axisLabelRender: function (args) {
                    if (args.axis.name === 'primaryYAxis' && primaryYAxisFormat && !chart.type.includes('100') &&
                        !isNullOrUndefined(args.value) && _this.parent) {
                        args.text = _this.parent.getDisplayText({ format: primaryYAxisFormat, value: args.value.toString() });
                    }
                    else if (args.axis.name === 'primaryXAxis' && args.text.startsWith('spread-chart-empty-label-')) {
                        args.text = '';
                    }
                    if (args.axis.name === 'primaryXAxis' && chart.type === 'Scatter' && !chartRange.isDateTime) {
                        if (args.axis.labels.length > 0 && !isNumber(args.text)) {
                            args.text = (args.axis.labels.indexOf(args.text) + 1).toString();
                        }
                        else if (primaryXAxisFormat && !isNullOrUndefined(args.value)) {
                            args.text = _this.parent.getDisplayText({ format: primaryXAxisFormat, value: args.value.toString() });
                        }
                    }
                }
            });
            this.chart.appendTo(chartContent);
        }
        else {
            this.chart = new AccumulationChart({
                title: chart.title,
                legendSettings: legendSettings,
                theme: theme,
                background: this.getThemeBgColor(theme),
                series: chartOptions.series,
                width: overlayProps.element.style.width,
                height: height,
                center: { x: '50%', y: '50%' },
                tooltip: { enable: true, format: '${point.x} : <b>${point.tooltip}</b>' },
                enableSmartLabels: true,
                enableAnimation: true,
                enableRtl: this.parent.enableRtl,
                load: function (args) {
                    args.chart.theme = chart.theme || 'Material';
                },
                beforeResize: function (args) {
                    args.cancelResizedEvent = true; // This is for cancel the resized event.
                }
            });
            this.chart.appendTo(chartContent);
        }
        overlayProps.element.appendChild(chartContent);
        if (overlayProps.element.classList.contains('e-ss-overlay-active') && !this.parent.isPrintingProcessing) {
            this.parent.notify(insertDesignChart, { id: overlayProps.element.id });
        }
        if (argsOpt.triggerEvent) {
            this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'insertChart' });
        }
        return seriesModel;
    };
    SpreadsheetChart.prototype.deleteChart = function (args) {
        this.clearBorder();
        var chartElements = null;
        var sheet = this.parent.getActiveSheet();
        if (isNullOrUndefined(args.id)) {
            chartElements = document.querySelector('.e-datavisualization-chart.e-ss-overlay-active');
            args.id = chartElements ? chartElements.getElementsByClassName('e-control')[0].id : null;
        }
        else {
            args.id = args.id.includes('overlay') ? args.id : args.id + '_overlay';
            chartElements = document.getElementById(args.id);
        }
        if (isNullOrUndefined(args.id)) {
            return;
        }
        else {
            args.id = args.id.includes('overlay') ? args.id : args.id + '_overlay';
        }
        var rowIdx;
        var colIdx;
        var prevCellChart;
        var isRemoveEle = false;
        var chartObj;
        for (var i = 0, chartCollLen = this.parent.chartColl.length; i < chartCollLen; i++) {
            if (this.parent.chartColl[i].id === args.id.split('_overlay')[0]) {
                chartObj = this.parent.chartColl[i];
                break;
            }
        }
        var eventArgs = {
            id: chartObj.id, range: chartObj.range, type: chartObj.type, markerSettings: chartObj.markerSettings,
            dataLabelSettings: chartObj.dataLabelSettings, title: chartObj.title, legendSettings: chartObj.legendSettings,
            primaryXAxis: chartObj.primaryXAxis, primaryYAxis: chartObj.primaryYAxis, theme: chartObj.theme,
            height: chartObj.height, width: chartObj.width, isSeriesInRows: chartObj.isSeriesInRows,
            isInitCell: true, posRange: null, top: chartObj.top, left: chartObj.left, cancel: false
        };
        if (chartElements) {
            var chartTop = void 0;
            var chartleft = void 0;
            if (sheet.frozenRows || sheet.frozenColumns) {
                var clientRect = chartElements.getBoundingClientRect();
                chartTop = { clientY: clientRect.top };
                chartleft = { clientX: clientRect.left };
                if (clientRect.top < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {
                    chartTop.target = this.parent.getColumnHeaderContent();
                }
                if (clientRect.left < this.parent.getRowHeaderContent().getBoundingClientRect().right) {
                    chartleft.target = this.parent.getRowHeaderTable();
                }
            }
            else {
                chartTop = { clientY: parseFloat(chartElements.style.top), isImage: true };
                chartleft = { clientX: parseFloat(chartElements.style.left), isImage: true };
            }
            this.parent.notify(deleteChartColl, { id: args.id });
            this.parent.notify(getRowIdxFromClientY, chartTop);
            this.parent.notify(getColIdxFromClientX, chartleft);
            isRemoveEle = true;
            rowIdx = chartTop.clientY;
            colIdx = chartleft.clientX;
            sheet = this.parent.sheets[this.parent.activeSheetIndex];
        }
        else {
            this.parent.notify(deleteChartColl, { id: args.id });
            var lastIndex = args.range ? args.range.lastIndexOf('!') : 0;
            var sheetIndex = args.range && lastIndex > 0 ?
                getSheetIndex(this.parent, args.range.substring(0, lastIndex)) : this.parent.activeSheetIndex;
            var rangeVal = args.range ? lastIndex > 0 ? args.range.substring(lastIndex + 1) : args.range :
                this.parent.getActiveSheet().selectedRange;
            var index = getRangeIndexes(rangeVal);
            rowIdx = index[0];
            colIdx = index[1];
            sheet = this.parent.sheets[sheetIndex];
        }
        var cellObj = getCell(rowIdx, colIdx, sheet);
        if (cellObj) {
            prevCellChart = cellObj.chart;
        }
        var chartLength = prevCellChart ? prevCellChart.length : null;
        for (var i = 0; i < chartLength; i++) {
            if (args.id === prevCellChart[i].id + '_overlay') {
                prevCellChart.splice(i, 1);
                chartLength = prevCellChart.length;
            }
        }
        if (isRemoveEle) {
            document.getElementById(args.id).remove();
            this.parent.notify(removeDesignChart, {});
        }
        setCell(rowIdx, colIdx, sheet, { chart: prevCellChart }, true);
        eventArgs.posRange = sheet.name + '!' + getCellAddress(rowIdx, colIdx);
        if (!args.isUndoRedo) {
            this.parent.notify(completeAction, { eventArgs: eventArgs, action: 'deleteChart', isClearAction: args.clearAction });
        }
    };
    SpreadsheetChart.prototype.updateChartModel = function (eleId, chartComp, currCellObj, chartCollId, isAccumulationChart) {
        var accumulationChartComp = chartComp;
        chartComp = chartComp;
        var chartId = this.parent.chartColl[chartCollId].id;
        if (isAccumulationChart &&
            ['PHAxes', 'PVAxes', 'PHAxisTitle', 'PVAxisTitle', 'GLMajorHorizontal',
                'GLMajorVertical', 'GLMinorHorizontal', 'GLMinorVertical'].indexOf(eleId) > -1) {
            return;
        }
        for (var idx = 0, chartsCount = currCellObj.chart.length; idx < chartsCount; idx++) {
            if (currCellObj.chart[idx].id === chartId) {
                switch (eleId) {
                    case 'PHAxes':
                    case 'PHAxisTitle':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryXAxis)) {
                            currCellObj.chart[idx].primaryXAxis = {};
                            this.parent.chartColl[chartCollId].primaryXAxis = {};
                        }
                        if (eleId === 'PHAxes') {
                            currCellObj.chart[idx].primaryXAxis.visible = chartComp.primaryXAxis.visible;
                            this.parent.chartColl[chartCollId].primaryXAxis.visible = chartComp.primaryXAxis.visible;
                        }
                        else if (eleId === 'PHAxisTitle') {
                            currCellObj.chart[idx].primaryXAxis.title = chartComp.primaryXAxis.title;
                            this.parent.chartColl[chartCollId].primaryXAxis.title = chartComp.primaryXAxis.title;
                        }
                        break;
                    case 'PVAxes':
                    case 'PVAxisTitle':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryYAxis)) {
                            currCellObj.chart[idx].primaryYAxis = {};
                            this.parent.chartColl[chartCollId].primaryYAxis = {};
                        }
                        if (eleId === 'PVAxes') {
                            currCellObj.chart[idx].primaryYAxis.visible = chartComp.primaryYAxis.visible;
                            this.parent.chartColl[chartCollId].primaryYAxis.visible = chartComp.primaryYAxis.visible;
                        }
                        else if (eleId === 'PVAxisTitle') {
                            currCellObj.chart[idx].primaryYAxis.title = chartComp.primaryYAxis.title;
                            this.parent.chartColl[chartCollId].primaryYAxis.title = chartComp.primaryYAxis.title;
                        }
                        break;
                    case 'ChartTitleNone':
                    case 'ChartTitleAbove':
                        currCellObj.chart[idx].title = chartComp.title;
                        this.parent.chartColl[chartCollId].title = chartComp.title;
                        break;
                    case 'DLNone':
                    case 'DLCenter':
                    case 'DLInsideend':
                    case 'DLInsidebase':
                    case 'DLOutsideend':
                        if (isNullOrUndefined(currCellObj.chart[idx].dataLabelSettings)) {
                            currCellObj.chart[idx].dataLabelSettings = {};
                            this.parent.chartColl[chartCollId].dataLabelSettings = {};
                        }
                        if (eleId === 'DLNone') {
                            currCellObj.chart[idx].dataLabelSettings.visible = false;
                            this.parent.chartColl[chartCollId].dataLabelSettings.visible = false;
                        }
                        else {
                            currCellObj.chart[idx].dataLabelSettings.visible = true;
                            this.parent.chartColl[chartCollId].dataLabelSettings.visible = true;
                            var position = void 0;
                            if (isAccumulationChart) {
                                position = accumulationChartComp.series[0].dataLabel.position === 'Outside' ? 'Outer' : 'Middle';
                            }
                            else {
                                position = chartComp.series[0].marker.dataLabel.position;
                            }
                            currCellObj.chart[idx].dataLabelSettings.position = position;
                            this.parent.chartColl[chartCollId].dataLabelSettings.position = position;
                        }
                        break;
                    case 'GLMajorHorizontal':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryYAxis)) {
                            currCellObj.chart[idx].primaryYAxis = {};
                            this.parent.chartColl[chartCollId].primaryYAxis = {};
                        }
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryYAxis.majorGridLines)) {
                            currCellObj.chart[idx].primaryYAxis.majorGridLines = {};
                            this.parent.chartColl[chartCollId].primaryYAxis.majorGridLines = {};
                        }
                        currCellObj.chart[idx].primaryYAxis.majorGridLines.width = chartComp.primaryYAxis.majorGridLines.width;
                        this.parent.chartColl[chartCollId].primaryYAxis.majorGridLines.width =
                            chartComp.primaryYAxis.majorGridLines.width;
                        break;
                    case 'GLMajorVertical':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryXAxis)) {
                            currCellObj.chart[idx].primaryXAxis = {};
                            this.parent.chartColl[chartCollId].primaryXAxis = {};
                        }
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryXAxis.majorGridLines)) {
                            currCellObj.chart[idx].primaryXAxis.majorGridLines = {};
                            this.parent.chartColl[chartCollId].primaryXAxis.majorGridLines = {};
                        }
                        currCellObj.chart[idx].primaryXAxis.majorGridLines.width = chartComp.primaryXAxis.majorGridLines.width;
                        this.parent.chartColl[chartCollId].primaryXAxis.majorGridLines.width =
                            chartComp.primaryXAxis.majorGridLines.width;
                        break;
                    case 'GLMinorHorizontal':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryYAxis)) {
                            currCellObj.chart[idx].primaryYAxis = {};
                            this.parent.chartColl[chartCollId].primaryYAxis = {};
                        }
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryYAxis.minorGridLines)) {
                            currCellObj.chart[idx].primaryYAxis.minorGridLines = {};
                            this.parent.chartColl[chartCollId].primaryYAxis.minorGridLines = {};
                        }
                        currCellObj.chart[idx].primaryYAxis.minorGridLines.width = chartComp.primaryYAxis.minorGridLines.width;
                        this.parent.chartColl[chartCollId].primaryYAxis.minorGridLines.width =
                            chartComp.primaryYAxis.minorGridLines.width;
                        break;
                    case 'GLMinorVertical':
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryXAxis)) {
                            currCellObj.chart[idx].primaryXAxis = {};
                            this.parent.chartColl[chartCollId].primaryXAxis = {};
                        }
                        if (isNullOrUndefined(currCellObj.chart[idx].primaryXAxis.minorGridLines)) {
                            currCellObj.chart[idx].primaryXAxis.minorGridLines = {};
                            this.parent.chartColl[chartCollId].primaryXAxis.minorGridLines = {};
                        }
                        currCellObj.chart[idx].primaryXAxis.minorGridLines.width = chartComp.primaryXAxis.minorGridLines.width;
                        this.parent.chartColl[chartCollId].primaryXAxis.minorGridLines.width =
                            chartComp.primaryXAxis.minorGridLines.width;
                        break;
                    case 'LegendNone':
                    case 'LegendsRight':
                    case 'LegendsLeft':
                    case 'LegendsBottom':
                    case 'LegendsTop':
                        if (isNullOrUndefined(currCellObj.chart[idx].legendSettings)) {
                            currCellObj.chart[idx].legendSettings = {};
                            this.parent.chartColl[chartCollId].legendSettings = {};
                        }
                        currCellObj.chart[idx].legendSettings.visible = chartComp.legendSettings.visible;
                        this.parent.chartColl[chartCollId].legendSettings.visible = chartComp.legendSettings.visible;
                        if (eleId !== 'LegendNone') {
                            currCellObj.chart[idx].legendSettings.position = chartComp.legendSettings.position;
                            this.parent.chartColl[chartCollId].legendSettings.position =
                                chartComp.legendSettings.position;
                            break;
                        }
                }
            }
        }
    };
    SpreadsheetChart.prototype.updateChartElement = function (value, chartComp, currCellObj, chartCollId, title, isAccumulationChart, address, triggerEvent) {
        if (isAccumulationChart &&
            ['PHAxes', 'PVAxes', 'PHAxisTitle', 'PVAxisTitle', 'GLMajorHorizontal',
                'GLMajorVertical', 'GLMinorHorizontal', 'GLMinorVertical'].indexOf(value) > -1) {
            return;
        }
        var chartSeries;
        switch (value) {
            case 'PHAxes':
                chartComp = chartComp;
                chartComp.primaryXAxis.visible = !chartComp.primaryXAxis.visible;
                break;
            case 'PVAxes':
                chartComp = chartComp;
                chartComp.primaryYAxis.visible = !chartComp.primaryYAxis.visible;
                break;
            case 'PHAxisTitle':
                chartComp = chartComp;
                chartComp.primaryXAxis.title = title;
                break;
            case 'PVAxisTitle':
                chartComp = chartComp;
                chartComp.primaryYAxis.title = title;
                break;
            case 'ChartTitleNone':
                chartComp.title = '';
                break;
            case 'ChartTitleAbove':
                chartComp.title = title;
                break;
            case 'DLNone':
            case 'DLCenter':
            case 'DLInsideend':
            case 'DLInsidebase':
            case 'DLOutsideend':
                chartComp = isAccumulationChart ? chartComp : chartComp;
                chartSeries = chartComp.series;
                if (value === 'DLNone') {
                    for (var idx = 0, len = chartSeries.length; idx < len; idx++) {
                        if (isAccumulationChart) {
                            chartSeries[idx].dataLabel.visible = false;
                        }
                        else {
                            chartSeries[idx].marker.dataLabel.visible = false;
                        }
                    }
                }
                else {
                    for (var idx = 0, len = chartSeries.length; idx < len; idx++) {
                        if (isAccumulationChart) {
                            var position = value === 'DLOutsideend' ? 'Outside' : 'Inside';
                            chartSeries[idx].dataLabel.visible = true;
                            chartSeries[idx].dataLabel.position = position;
                        }
                        else {
                            var position = value === 'DLCenter' ? 'Middle' : value === 'DLInsideend' ? 'Top' : value === 'DLInsidebase' ?
                                'Bottom' : value === 'DLOutsideend' ? 'Outer' : chartSeries[0].marker.dataLabel.position;
                            chartSeries[idx].marker.dataLabel.visible = true;
                            chartSeries[idx].marker.dataLabel.position = position;
                        }
                    }
                }
                chartComp.series = chartSeries;
                if (isAccumulationChart) {
                    chartComp.refresh();
                }
                break;
            case 'GLMajorHorizontal':
                chartComp = chartComp;
                chartComp.primaryYAxis.majorGridLines.width = chartComp.primaryYAxis.majorGridLines.width === 0 ? 1 : 0;
                break;
            case 'GLMajorVertical':
                chartComp = chartComp;
                chartComp.primaryXAxis.majorGridLines.width = chartComp.primaryXAxis.majorGridLines.width === 0 ? 1 : 0;
                break;
            case 'GLMinorHorizontal':
                chartComp = chartComp;
                chartComp.primaryYAxis.minorTicksPerInterval = chartComp.primaryYAxis.minorGridLines.width === 0 ? 5 : 0;
                chartComp.primaryYAxis.minorGridLines.width = chartComp.primaryYAxis.minorGridLines.width === 0 ? 1 : 0;
                break;
            case 'GLMinorVertical':
                chartComp = chartComp;
                chartComp.primaryXAxis.minorTicksPerInterval = chartComp.primaryXAxis.minorGridLines.width === 0 ? 5 : 0;
                chartComp.primaryXAxis.minorGridLines.width = chartComp.primaryXAxis.minorGridLines.width === 0 ? 1 : 0;
                break;
            case 'LegendNone':
                chartComp.legendSettings.visible = false;
                break;
            case 'LegendsRight':
            case 'LegendsLeft':
            case 'LegendsBottom':
            case 'LegendsTop':
                chartComp.legendSettings.visible = true;
                chartComp.legendSettings.position = value === 'LegendsRight' ? 'Right' : value === 'LegendsLeft' ? 'Left' : value ===
                    'LegendsBottom' ? 'Bottom' : value === 'LegendsTop' ? 'Top' : chartComp.legendSettings.position;
                break;
        }
        this.updateChartModel(value, chartComp, currCellObj, chartCollId, isAccumulationChart);
        if (triggerEvent) {
            var eventArgs = { addChartEle: value, id: chartComp.element.id + '_overlay', title: title, address: address };
            this.parent.notify(completeAction, { action: 'chartDesign', eventArgs: eventArgs });
        }
    };
    SpreadsheetChart.prototype.undoRedoForChartDesign = function (args) {
        var overlayElem = document.getElementById(args.id);
        if (!overlayElem) {
            return;
        }
        var chartElem = this.getChartElement(overlayElem);
        var chartComp = getComponent(chartElem, 'chart');
        if (isNullOrUndefined(chartComp)) {
            chartComp = getComponent(chartElem, 'accumulationchart');
        }
        var addressInfo = this.parent.getAddressInfo(args.address);
        var cell = getCell(addressInfo.indices[0], addressInfo.indices[1], getSheet(this.parent, addressInfo.sheetIndex));
        var chartCollectionId = this.getChartCollectionId(chartElem.id);
        var chart;
        var property = args.addChartEle;
        var title = args.title;
        for (var i = 0; i < args.beforeActionData.cellDetails[0].chart.length; i++) {
            if (chartElem.id === args.beforeActionData.cellDetails[0].chart[i].id) {
                chart = args.beforeActionData.cellDetails[0].chart[i];
                break;
            }
        }
        var isMarkerEnabled = isNullOrUndefined(chart.markerSettings) ? false : chart.markerSettings.visible;
        if (args.switchRowColumn) {
            this.switchRowColumn(chartCollectionId, chartElem.id, chartComp, cell);
        }
        else if (args.chartTheme) {
            this.switchChartTheme(chartCollectionId, chartElem.id, args.isUndo ? chart.theme : args.chartTheme, chartComp, cell);
        }
        else if (args.chartType) {
            this.switchChartType(chartCollectionId, chartElem.id, args.isUndo ? chart.type : args.chartType, chartComp, cell, false, args.isUndo ? isMarkerEnabled : args.chartMarker, 'undoRedo');
        }
        else if (args.addChartEle) {
            if (args.isUndo) {
                var position = void 0;
                switch (property) {
                    case 'DLNone':
                    case 'DLCenter':
                    case 'DLInsideend':
                    case 'DLInsidebase':
                    case 'DLOutsideend':
                        position = chart.dataLabelSettings && chart.dataLabelSettings.position;
                        property = position === 'Middle' ? 'DLCenter' : position === 'Top' ? 'DLInsideend' : position === 'Bottom' ?
                            'DLInsidebase' : position === 'Outer' ? 'DLOutsideend' : 'DLNone';
                        break;
                    case 'LegendNone':
                    case 'LegendsRight':
                    case 'LegendsLeft':
                    case 'LegendsBottom':
                    case 'LegendsTop':
                        if (chart.legendSettings && !chart.legendSettings.visible) {
                            position = 'LegendNone';
                        }
                        else {
                            position = chart.legendSettings && chart.legendSettings.position;
                            property = position === 'Right' ? 'LegendsRight' : position === 'Left' ? 'LegendsLeft' : position ===
                                'Bottom' ? 'LegendsBottom' : position === 'Top' ? 'LegendsTop' : 'LegendsBottom';
                        }
                        break;
                    case 'PVAxisTitle':
                        title = chart.primaryYAxis && chart.primaryYAxis.title;
                        break;
                    case 'PHAxisTitle':
                        title = chart.primaryXAxis && chart.primaryXAxis.title;
                        break;
                    case 'ChartTitleNone':
                    case 'ChartTitleAbove':
                        title = chart.title;
                        break;
                }
            }
            this.updateChartElement(property, chartComp, cell, chartCollectionId, title, null, args.address);
        }
    };
    SpreadsheetChart.prototype.chartDesignTabHandler = function (args) {
        var isAccumulationChart = false;
        var sheet = this.parent.sheets[this.parent.activeSheetIndex];
        var switchRowColumn = args.switchRowColumn;
        var chartType = args.chartType;
        var chartTheme = args.chartTheme;
        var addChartEle = args.addChartEle;
        var chartComp = null;
        var overlayElem = args.id ? document.getElementById(args.id) : document.querySelector('.e-datavisualization-chart.e-ss-overlay-active');
        if (!overlayElem) {
            return;
        }
        var opensTitleDialog = addChartEle === 'ChartTitleAbove' || addChartEle === 'PHAxisTitle' || addChartEle === 'PVAxisTitle';
        var chartTop;
        var chartleft;
        if (sheet.frozenRows || sheet.frozenColumns) {
            var clientRect = overlayElem.getBoundingClientRect();
            chartTop = { clientY: clientRect.top };
            chartleft = { clientX: clientRect.left };
            if (clientRect.top < this.parent.getColumnHeaderContent().getBoundingClientRect().bottom) {
                chartTop.target = this.parent.getColumnHeaderContent();
            }
            if (clientRect.left < this.parent.getRowHeaderContent().getBoundingClientRect().right) {
                chartleft.target = this.parent.getRowHeaderTable();
            }
        }
        else {
            chartTop = { clientY: overlayElem.offsetTop, isImage: true };
            chartleft = { clientX: overlayElem.offsetLeft, isImage: true };
        }
        this.parent.notify(getRowIdxFromClientY, chartTop);
        this.parent.notify(getColIdxFromClientX, chartleft);
        var currCellObj = getCell(chartTop.clientY, chartleft.clientX, sheet);
        var address = sheet.name + '!' + getCellAddress(chartTop.clientY, chartleft.clientX);
        if (args.triggerEvent) {
            var eventArgs = {
                switchRowColumn: args.switchRowColumn, chartType: args.chartType, chartTheme: args.chartTheme,
                addChartEle: args.addChartEle, id: overlayElem.id, address: address, cancel: false
            };
            this.parent.notify(beginAction, { action: 'chartDesign', eventArgs: eventArgs });
            if (eventArgs.cancel) {
                return;
            }
        }
        var chartObj = this.getChartElement(overlayElem);
        var chartId = chartObj.getAttribute('id');
        var chartCollId = this.getChartCollectionId(chartId);
        if (chartObj) {
            chartComp = getComponent(chartObj, 'chart');
            if (isNullOrUndefined(chartComp)) {
                chartComp = getComponent(chartObj, 'accumulationchart');
                isAccumulationChart = true;
            }
        }
        if (switchRowColumn) {
            this.switchRowColumn(chartCollId, chartId, chartComp, currCellObj);
        }
        if (chartType) {
            this.switchChartType(chartCollId, chartId, chartType, chartComp, currCellObj, args.markerVisible);
        }
        if (chartTheme) {
            this.switchChartTheme(chartCollId, chartId, chartTheme, chartComp, currCellObj);
        }
        if (addChartEle) {
            if (opensTitleDialog && !args.title) {
                if (this.parent.element.getElementsByClassName('e-title-dlg').length > 0) {
                    return;
                }
                else {
                    this.titleDlgHandler(addChartEle, chartComp, currCellObj, chartCollId, isAccumulationChart, address, args.triggerEvent);
                }
            }
            else {
                this.updateChartElement(addChartEle, chartComp, currCellObj, chartCollId, args.title, isAccumulationChart);
            }
        }
        if (args.triggerEvent && !opensTitleDialog) {
            var eventArgs = {
                switchRowColumn: args.switchRowColumn, chartType: args.chartType, chartMarker: args.markerVisible,
                chartTheme: args.chartTheme, addChartEle: args.addChartEle, id: overlayElem.id, address: address
            };
            this.parent.notify(completeAction, { action: 'chartDesign', eventArgs: eventArgs });
        }
    };
    SpreadsheetChart.prototype.switchRowColumn = function (chartCollId, chartId, chartComp, cell) {
        var chart = this.parent.chartColl[chartCollId];
        chart.isSeriesInRows = isNullOrUndefined(chart.isSeriesInRows) ? true : !chart.isSeriesInRows;
        for (var idx = 0, chartCount = cell.chart.length; idx < chartCount; idx++) {
            if (cell.chart[idx].id === chartId) {
                cell.chart[idx].isSeriesInRows = chart.isSeriesInRows;
            }
        }
        var chartSeries = this.initiateChartHandler({ option: chart, isRefresh: true, isSwitchRowColumn: true });
        chartComp.series = chartSeries;
    };
    SpreadsheetChart.prototype.switchChartTheme = function (chartCollId, chartId, theme, chartComp, cell) {
        this.parent.chartColl[chartCollId].theme = theme;
        for (var idx = 0, chartCount = cell.chart.length; idx < chartCount; idx++) {
            if (cell.chart[idx].id === chartId) {
                cell.chart[idx].theme = theme;
            }
        }
        chartComp.setProperties({ theme: theme, background: this.getThemeBgColor(theme) }, true);
        chartComp.refresh();
    };
    SpreadsheetChart.prototype.getThemeBgColor = function (theme) {
        var bg;
        if (theme.includes('Dark')) {
            switch (theme) {
                case 'MaterialDark':
                    bg = '#383838';
                    break;
                case 'FabricDark':
                    bg = '#242424';
                    break;
                case 'BootstrapDark':
                    bg = '#1b1b1b';
                    break;
                case 'Bootstrap5Dark':
                    bg = '#212529';
                    break;
                case 'TailwindDark':
                    bg = '#1f2937';
                    break;
                case 'Tailwind3Dark':
                    bg = '#111827';
                    break;
                case 'FluentDark':
                    bg = '#1b1a19';
                    break;
                case 'Fluent2Dark':
                    bg = '#292929';
                    break;
                case 'Material3Dark':
                    bg = '#1C1B1F';
                    break;
            }
        }
        else if (theme.includes('HighContrast')) {
            bg = '#000000';
        }
        else {
            bg = '#FFFFFF';
        }
        return bg;
    };
    SpreadsheetChart.prototype.switchChartType = function (chartCollId, chartId, chartType, chartComp, cell, markerVisible, enableMarker, action) {
        var type = this.parent.chartColl[chartCollId].type;
        this.parent.chartColl[chartCollId].type = chartType;
        for (var idx = 0, chartCount = cell.chart.length; idx < chartCount; idx++) {
            if (cell.chart[idx].id === chartId) {
                cell.chart[idx].type = chartType;
                if (!isNullOrUndefined(cell.chart[idx].markerSettings)) {
                    cell.chart[idx].markerSettings.visible = markerVisible;
                }
            }
        }
        if (chartType !== 'Pie' && chartType !== 'Doughnut') {
            if (type === 'Pie' || type === 'Doughnut') {
                if (!isNullOrUndefined(this.parent.chartColl[chartCollId].markerSettings)) {
                    if (markerVisible) {
                        this.parent.chartColl[chartCollId].markerSettings.visible = markerVisible;
                    }
                    else if (action === 'undoRedo') {
                        this.parent.chartColl[chartCollId].markerSettings.visible = enableMarker;
                    }
                    else {
                        this.parent.chartColl[chartCollId].markerSettings.visible = false;
                    }
                }
                else if (markerVisible && (chartType === 'Line' || chartType === 'StackingLine' || chartType === 'StackingLine100')) {
                    this.parent.chartColl[chartCollId].markerSettings = { shape: 'Circle', visible: true, isFilled: false };
                }
                this.changeCharType(chartCollId);
            }
            else {
                if (type !== chartType) {
                    if (chartType === 'Scatter') {
                        var labels = chartComp.primaryXAxis['labels'];
                        if (labels && labels.length > 0 && isNumber(labels[labels.length - 1])) {
                            chartComp.primaryXAxis.valueType = 'Double';
                        }
                    }
                    else if (chartComp.primaryXAxis.valueType === 'Double') {
                        chartComp.primaryXAxis.valueType = 'Category';
                    }
                }
                var chartSeries = chartComp.series;
                var isLineChart = chartType === 'Line' || chartType === 'StackingLine' || chartType === 'StackingLine100';
                for (var idx = 0, len = chartSeries.length; idx < len; idx++) {
                    chartSeries[idx].type = chartType;
                    if (isLineChart) {
                        chartSeries[idx].marker.visible = markerVisible;
                        chartSeries[idx].marker.shape = isNullOrUndefined(chartSeries[idx].marker.shape) ? 'Circle' : chartSeries[idx].marker.shape;
                        if (action === 'undoRedo') {
                            chartSeries[idx].marker.visible = enableMarker;
                        }
                    }
                    else {
                        chartSeries[idx].marker.visible = false;
                    }
                }
                chartComp.series = chartSeries;
                chartComp.refresh();
            }
        }
        else {
            if (type === 'Pie' || type === 'Doughnut') {
                var chartSeries = chartComp.series;
                for (var idx = 0, len = chartSeries.length; idx < len; idx++) {
                    chartSeries[idx].innerRadius = chartType === 'Pie' ? '0%' : '40%';
                }
                chartComp.series = chartSeries;
                chartComp.refresh();
            }
            else {
                this.changeCharType(chartCollId);
            }
        }
    };
    SpreadsheetChart.prototype.getChartElement = function (overlayElem) {
        var chartObj = overlayElem.querySelector('.e-chart');
        if (isNullOrUndefined(chartObj)) {
            chartObj = overlayElem.querySelector('.e-accumulationchart');
        }
        return chartObj;
    };
    SpreadsheetChart.prototype.getChartCollectionId = function (id) {
        var chartCollectionId;
        for (var i = 0, len = this.parent.chartColl.length; i < len; i++) {
            if (id === this.parent.chartColl[i].id) {
                chartCollectionId = i;
            }
        }
        return chartCollectionId;
    };
    SpreadsheetChart.prototype.changeCharType = function (chartCollId) {
        var chartEle = document.getElementById(this.parent.chartColl[chartCollId].id);
        var chartParEle = closest(chartEle, '.e-datavisualization-chart');
        chartParEle.remove();
        this.initiateChartHandler({
            option: this.parent.chartColl[chartCollId], isInitCell: false, triggerEvent: false, isPaste: false,
            isChangeChartType: true
        });
        chartEle = document.getElementById(this.parent.chartColl[chartCollId].id);
        chartParEle = closest(chartEle, '.e-datavisualization-chart');
        if (!chartParEle.classList.contains('e-ss-overlay-active')) {
            chartParEle.classList.add('e-ss-overlay-active');
        }
    };
    SpreadsheetChart.prototype.titleDlgHandler = function (addChartEle, chartComp, currCellObj, chartCollId, isAccumulationChart, address, triggerEvent) {
        var _this = this;
        var title = '';
        if (isAccumulationChart && (addChartEle === 'PHAxisTitle' || addChartEle === 'PVAxisTitle')) {
            return;
        }
        var l10n = this.parent.serviceLocator.getService(locale);
        var dialogInst = this.parent.serviceLocator.getService(dialog);
        dialogInst.show({
            width: 375, showCloseIcon: true, isModal: true, cssClass: 'e-title-dlg',
            header: addChartEle === 'chart_abovechart' ? l10n.getConstant('ChartTitle') : addChartEle ===
                'PHAxisTitle' ? l10n.getConstant('HorizontalAxisTitle') : l10n.getConstant('VerticalAxisTitle'),
            beforeOpen: function () {
                dialogInst.dialogInstance.content = _this.titleDlgContent(addChartEle, chartComp);
                dialogInst.dialogInstance.dataBind();
                _this.parent.element.focus();
            },
            buttons: [{
                    buttonModel: {
                        content: l10n.getConstant('Ok'),
                        isPrimary: true,
                        cssClass: 'e-btn e-clearall-btn e-flat'
                    },
                    click: function () {
                        var dlgCont = _this.parent.element.querySelector('.e-title-dlg').
                            getElementsByClassName('e-title-dlg-content')[0];
                        title = dlgCont.getElementsByTagName('input')[0].value;
                        dialogInst.hide();
                        _this.updateChartElement(addChartEle, chartComp, currCellObj, chartCollId, title, null, address, triggerEvent);
                    }
                }]
        });
        dialogInst.dialogInstance.refresh();
    };
    SpreadsheetChart.prototype.titleDlgContent = function (addChartEle, chartComp) {
        var l10n = this.parent.serviceLocator.getService(locale);
        var dlgContent = this.parent.createElement('div', { className: 'e-title-dlg-content' });
        var value1Text = this.parent.createElement('span', { className: 'e-header e-top-header' });
        value1Text.innerText = l10n.getConstant('EnterTitle');
        var value1Inp = this.parent.createElement('input', { className: 'e-input', id: 'titleInput', attrs: { type: 'text' } });
        dlgContent.appendChild(value1Text);
        dlgContent.appendChild(value1Inp);
        if (chartComp) {
            if (addChartEle === 'PHAxisTitle') {
                value1Inp.value = chartComp.primaryXAxis.title ? chartComp.primaryXAxis.title : value1Inp.value;
            }
            else if (addChartEle === 'PVAxisTitle') {
                value1Inp.value = chartComp.primaryYAxis.title ? chartComp.primaryYAxis.title : value1Inp.value;
            }
            else {
                value1Inp.value = chartComp.title ? chartComp.title : value1Inp.value;
            }
        }
        return dlgContent;
    };
    /**
     * Removing event listener for success and failure
     *
     * @returns {void} - Removing event listener for success and failure
     */
    SpreadsheetChart.prototype.removeEventListener = function () {
        if (!this.parent.isDestroyed) {
            this.parent.off(initiateChart, this.initiateChartHandler);
            this.parent.off(refreshChartCellObj, this.refreshChartCellObj);
            this.parent.off(refreshChartCellOnInit, this.refreshChartCellModel);
            this.parent.off(refreshChartCellModel, this.refreshChartCellModel);
            this.parent.off(deleteChart, this.deleteChart);
            this.parent.off(clearChartBorder, this.clearBorder);
            this.parent.off(insertChart, this.insertChartHandler);
            this.parent.off(chartRangeSelection, this.chartRangeHandler);
            this.parent.off(chartDesignTab, this.chartDesignTabHandler);
            this.parent.off(addChartEle, this.updateChartElement);
            this.parent.off(undoRedoForChartDesign, this.undoRedoForChartDesign);
            this.parent.off(refreshChart, this.refreshChartData);
        }
    };
    /**
     * To Remove the event listeners.
     *
     * @returns {void} - To Remove the event listeners.
     */
    SpreadsheetChart.prototype.destroy = function () {
        this.removeEventListener();
        this.parent = null;
        var chartEle = null;
        if (this.chart) {
            chartEle = this.chart.element;
            this.chart.destroy();
        }
        if (chartEle) {
            detach(chartEle);
        }
        this.chart = null;
    };
    /**
     * Get the sheet chart module name.
     *
     * @returns {string} - Get the module name.
     */
    SpreadsheetChart.prototype.getModuleName = function () {
        return 'spreadsheetChart';
    };
    return SpreadsheetChart;
}());

/**
 * This class supports the printing functionality in Spreadsheet.
 */
var Print = /** @class */ (function () {
    /**
     * Constructor for Print module
     *
     * @param {Spreadsheet} parent - Specifies the spreadsheet instance.
     */
    function Print(parent) {
        this.totalSheetCount = [];
        this.workbookActiveSheetCount = 0;
        this.defaultCellWidth = 64;
        this.defaultCellHeight = 19;
        this.pageCounts = [];
        this.initialRowCount = 0;
        this.chartHeight = 0;
        this.columnIndex = 0;
        this.rowIndex = 0;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.multipleCanvasDataURL = [];
        this.chartElements = [];
        this.totalCharts = 0;
        this.isChartLoaded = false;
        this.chartLoadedCount = 0;
        this.isImageLoaded = false;
        this.totalImages = 0;
        this.imageLoadedCount = 0;
        this.endRow = 0;
        this.isColumn = true;
        this.startNewPageCount = 0;
        this.allowTimer = false;
        this.parent = parent;
    }
    /**
     * To create the print module.
     *
     * @param {Spreadsheet} spreadsheet - Specifies the spreadsheet instance.
     * @param {PrintOptions} printOptions - Specifies the print options.
     * @returns {void} - To create the print module.
     * @private
     */
    Print.prototype.print = function (spreadsheet, printOptions) {
        var _this = this;
        spreadsheet.isPrintingProcessing = true;
        this.multipleCanvasDataURL = [];
        this.chartElements = [];
        if (printOptions.type === 'ActiveSheet') {
            var sheet = spreadsheet.sheets[spreadsheet.activeSheetIndex];
            this.activeSheetPrint(spreadsheet, sheet, printOptions, spreadsheet.activeSheetIndex);
        }
        else {
            this.totalSheetCount = [];
            this.workbookActiveSheetCount = 1;
            for (var i = 0; i < spreadsheet.sheets.length; i++) {
                if (spreadsheet.sheets[i].state === 'Visible') {
                    this.totalSheetCount.push(i);
                    if (this.totalSheetCount.length > 1 && this.parent.sheets[i].ranges.length > 0) {
                        var isDatasourceAvailable = this.parent.sheets[i].ranges.some(function (range) {
                            return !isNullOrUndefined(range.dataSource);
                        });
                        if (isDatasourceAvailable) {
                            this.allowTimer = true;
                            var sheet = spreadsheet.sheets[i];
                            var address = getCellAddress(0, 0) + ':' + getCellAddress(sheet.rowCount - 1, sheet.colCount - 1);
                            var cellIndexes = getIndexesFromAddress(address);
                            this.parent.notify(updateSheetFromDataSource, { sheet: sheet, indexes: cellIndexes });
                        }
                    }
                }
            }
            if (this.allowTimer) {
                this.allowTimer = false;
                setTimeout(function () {
                    _this.activeSheetPrint(spreadsheet, spreadsheet.sheets[_this.totalSheetCount[0]], printOptions, _this.totalSheetCount[0]);
                }, 2000);
            }
            else {
                this.activeSheetPrint(spreadsheet, spreadsheet.sheets[this.totalSheetCount[0]], printOptions, this.totalSheetCount[0]);
            }
        }
    };
    Print.prototype.updateChartRowAndColumnIndices = function (spreadsheet, sheetIndex) {
        var sheet = spreadsheet.sheets[sheetIndex];
        this.rowIndex = sheet.usedRange.rowIndex;
        this.columnIndex = sheet.usedRange.colIndex;
        if (spreadsheet.chartColl.length > 0) {
            for (var i = 0; i < spreadsheet.chartColl.length; i++) {
                var chart = spreadsheet.chartColl[i];
                var sheetIdx = getSheetIndex(spreadsheet, chart.range.substring(0, chart.range.lastIndexOf('!')));
                if (sheetIndex === sheetIdx) {
                    var chartleft = { clientX: chart.left, isImage: true };
                    var chartTop = { clientY: chart.top, isImage: true };
                    spreadsheet.notify(getRowIdxFromClientY, chartTop);
                    spreadsheet.notify(getColIdxFromClientX, chartleft);
                    if (chartTop.clientY > sheet.usedRange.rowIndex) {
                        this.rowIndex = Math.max(this.rowIndex, chartTop.clientY);
                    }
                    if (chartleft.clientX > sheet.usedRange.colIndex) {
                        this.columnIndex = Math.max(this.columnIndex, chartleft.clientX);
                    }
                }
            }
        }
    };
    Print.prototype.activeSheetPrint = function (spreadsheet, sheet, printOptions, sheetIndex) {
        this.updateChartRowAndColumnIndices(spreadsheet, sheetIndex);
        this.pageCounts = this.calculatePageCount(sheet, 1000, printOptions.allowRowColumnHeader);
        var canvas;
        var context;
        this.initialRowCount = 0;
        this.parent.currentPrintSheetIndex = sheetIndex;
        this.endRow = this.rowIndex + 1;
        this.processCell(0, 0, this.endRow, 2, [], context, canvas, sheet, this, 0, 0, true, sheetIndex, printOptions);
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Print.prototype.processCell = function (page, rowsCount, rowCount, currentX, currentY, context, canvas, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    sheet, printInstance, pageHeight, height, isCanvasDataUrl, sheetIndex, printOptions) {
        var _this = this;
        if (pageHeight === void 0) { pageHeight = 0; }
        if (height === void 0) { height = 0; }
        if (isCanvasDataUrl === void 0) { isCanvasDataUrl = true; }
        var defaultCellSpace = 0;
        var allowColumnAndRow = printOptions.allowRowColumnHeader;
        var headerWidth = 37;
        var lineHeight = 0;
        this.chartHeight = 0;
        var isExtraLine = false;
        for (var i = page; i < this.pageCounts.length; i++) {
            this.chartLoadedCount = 0;
            this.totalCharts = 0;
            this.imageLoadedCount = 0;
            this.totalImages = 0;
            pageHeight += (i === 0 ? 0 : 1100);
            // Create canvas element
            canvas = document.createElement('canvas');
            context = canvas.getContext('2d');
            canvas.width = 1000;
            canvas.height = 1100;
            context.font = '11pt Calibri';
            context.textBaseline = 'bottom';
            context['index'] = i;
            context['width'] = 1000;
            if (isCanvasDataUrl || (!this.isImageLoaded && !this.isChartLoaded)) {
                currentY = [];
                currentX = 0;
                height = 0;
            }
            // Loop through rows
            for (var j = rowsCount; j < this.endRow; j++) {
                isCanvasDataUrl = true;
                var borderOfHeaderText = false;
                this.isColumn = this.isColumn ? this.isColumn : (j === 0);
                var bottomStyle = { borderBottom: '1px solid black' };
                var rowHeight = (sheet.rows[j] && sheet.rows[j].height || this.defaultCellHeight);
                this.initialRowCount = j;
                currentX = defaultCellSpace;
                var start = i === 0 ? 0 : this.pageCounts[i - 1] + 1;
                var end = this.pageCounts[i];
                height += (isNullOrUndefined(sheet.rows[j]) ? this.defaultCellHeight : rowHeight + (j === 0 && allowColumnAndRow
                    ? this.defaultCellHeight : 0));
                var cellHeight = isNullOrUndefined(sheet.rows[j]) ? this.defaultCellHeight :
                    sheet.rows[j] && sheet.rows[j].height || this.defaultCellHeight;
                if (height > 1080) {
                    this.startNewPageCount = j;
                    lineHeight = allowColumnAndRow ? rowHeight + (j === 0 && allowColumnAndRow ? this.defaultCellHeight : 0) : 0;
                    borderOfHeaderText = false;
                    this.isColumn = true;
                    if (this.isImageLoaded || this.isChartLoaded) {
                        break;
                    }
                    pageHeight += 1100;
                    if (isCanvasDataUrl) {
                        this.multipleCanvasDataURL.push(canvas.toDataURL());
                    }
                    isCanvasDataUrl = true;
                    canvas = document.createElement('canvas');
                    context = canvas.getContext('2d');
                    canvas.width = 1000;
                    canvas.height = 1100;
                    context.font = '11pt Calibri';
                    context.textBaseline = 'bottom';
                    context['index'] = i;
                    context['width'] = 1000;
                    for (var m = 0; m < currentY.length; m++) {
                        if (currentY[m] !== undefined) {
                            currentY[m] -= height - cellHeight;
                        }
                    }
                    height = (allowColumnAndRow || printOptions.allowGridLines) ?
                        rowHeight + (allowColumnAndRow ? this.defaultCellHeight : 0) : rowHeight;
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var style = { borderBottom: '1px solid black', borderTop: '1px solid black', borderLeft: '1px solid black', borderRight: '1px solid black' };
                var rightStyle = { borderRight: '1px solid black' };
                if (allowColumnAndRow && this.isColumn) {
                    for (var k = start; k <= end; k++) {
                        var columnText = getColumnHeaderText(k + 1);
                        var columnIndex = k === start ? 2 : 1;
                        context.font = '11pt Calibri';
                        for (var m = 0; m < columnIndex; m++) {
                            var titleWidth = (m === 0 && columnIndex === 2) ? headerWidth : (sheet.columns[k] &&
                                sheet.columns[k].hidden ? 0 : ((sheet.columns[k] &&
                                sheet.columns[k].width) || this.defaultCellWidth));
                            titleWidth = currentX + titleWidth > 1000 ? titleWidth - 1 - (currentX + titleWidth - 1000) :
                                titleWidth;
                            if (titleWidth !== 0) {
                                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                var textMetrics = context.measureText(columnText);
                                var textWidth = textMetrics.width;
                                var locationX = printInstance.calculateTextPosition(textWidth, titleWidth, currentX, 'Center');
                                var locationY = this.defaultCellHeight;
                                context.fillText(k === start && m === 0 ? '' : columnText, locationX, locationY);
                                printInstance.drawBorder(context, style, currentX, 0, titleWidth, this.defaultCellHeight);
                                currentX += titleWidth;
                                currentY[k] = this.defaultCellHeight;
                                if (k === end && (columnIndex === 2 ? m === 1 : m === 0)) {
                                    this.isColumn = !(k === end);
                                    currentX = 0;
                                }
                            }
                            else if (k === end) {
                                this.isColumn = false;
                                currentX = 0;
                            }
                        }
                    }
                }
                if (!isNullOrUndefined(sheet.rows[j]) && (isNullOrUndefined(sheet.rows[j].hidden) ||
                    !sheet.rows[j].hidden)) {
                    borderOfHeaderText = this.endRow === sheet.rows.length ? ((height + (sheet.rows[j + 1] ?
                        (sheet.rows[j + 1].height || this.defaultCellHeight) : this.defaultCellHeight)) +
                        (j === 0 && allowColumnAndRow ? this.defaultCellHeight : 0) > 1080) || (j === sheet.rows.length - 1) : false;
                    var _loop_1 = function (k) {
                        var cell = sheet.rows[j] && !isNullOrUndefined(sheet.rows[j].cells) &&
                            sheet.rows[j].cells[k];
                        if (!isNullOrUndefined(cell) && !isNullOrUndefined(cell.style)) {
                            style = this_1.setBorderStyle(cell, style);
                        }
                        if (isNullOrUndefined(sheet.columns[k]) || isNullOrUndefined(sheet.columns[k].hidden) ||
                            !sheet.columns[k].hidden) {
                            var isColumnSpan = !isNullOrUndefined(sheet.rows[j].cells) &&
                                !isNullOrUndefined(sheet.rows[j].cells[k]) &&
                                !isNaN(sheet.rows[j].cells[k].colSpan) &&
                                start > k + sheet.rows[j].cells[k].colSpan;
                            var isRowSpan = !isNullOrUndefined(sheet.rows[j].cells) &&
                                !isNullOrUndefined(sheet.rows[j].cells[k]) &&
                                !isNaN(sheet.rows[j].cells[k].rowSpan) &&
                                !(j + sheet.rows[j].cells[k].rowSpan > this_1.startNewPageCount) &&
                                this_1.startNewPageCount !== 0;
                            var cellText_1 = '';
                            var cellWidthSpan_1;
                            var cellWidth_1;
                            var cellRowSpan = !isNullOrUndefined(cell) ? (isNaN(cell.rowSpan) || isColumnSpan || isRowSpan) ? 1 :
                                Math.max(cell.rowSpan, 0) : 1;
                            currentY[k] = (isNaN(currentY[k]) ? defaultCellSpace : currentY[k]);
                            if (allowColumnAndRow && k === start) {
                                context.font = '11pt Calibri';
                                var rowHeaderHeight = currentY[k];
                                if (cellRowSpan > 0) {
                                    for (var o = 0; o < (cellRowSpan === 0 ? 1 : cellRowSpan); o++) {
                                        currentX = 0;
                                        rowHeaderHeight += (o === 0 ? 0 : (sheet.rows[j + o] && sheet.rows[j + o - 1].height ||
                                            this_1.defaultCellHeight));
                                        printInstance.rowHeaderText((j + 1 + o).toString(), context, printInstance, headerWidth, currentX, style, rowHeaderHeight, sheet.rows[j + o].height || this_1.defaultCellHeight);
                                        currentX += headerWidth;
                                    }
                                }
                                else {
                                    currentX = 0;
                                    currentX += headerWidth;
                                }
                            }
                            if (!isNullOrUndefined(cell) && cell) {
                                var fontSize = (cell.style ? cell.style.fontSize || '11pt' : '11pt');
                                var color_1 = (cell.style ? cell.style.color || '#000000' : '#000000');
                                if (!isNaN(sheet.rows[j].cells[k].rowSpan) &&
                                    sheet.rows[j].cells[k].rowSpan > 1) {
                                    if (isNaN(sheet.rows[j + 1].cells[k].rowSpan)) {
                                        this_1.parent.merge("" + getColumnHeaderText(k + 1) + (j + 1) + ":" + getColumnHeaderText(k + 1) + (j + sheet.rows[j].cells[k].rowSpan - 1));
                                    }
                                }
                                if (!isNaN(sheet.rows[j].cells[k].colSpan) &&
                                    sheet.rows[j].cells[k].colSpan > 1) {
                                    if (!isNullOrUndefined(sheet.rows[j + 1]) && !isNullOrUndefined(sheet.rows[j + 1].cells) &&
                                        sheet.rows[j + 1].cells.length > 0 && (!isNullOrUndefined(sheet.rows[j + 1].cells[k]) &&
                                        isNaN(sheet.rows[j + 1].cells[k].colSpan))) {
                                        this_1.parent.merge('' + getColumnHeaderText(k + 1) + (j + 1) + ':' +
                                            getColumnHeaderText(k + 1 + sheet.rows[j].cells[k].colSpan - 1) + (j + 1));
                                    }
                                    else if (isNullOrUndefined(sheet.rows[j].cells[k + 1].colSpan)) {
                                        for (var m = 1; m < sheet.rows[j].cells[k].colSpan; m++) {
                                            sheet.rows[j].cells[k + m]['colSpan'] = -m;
                                        }
                                    }
                                }
                                cellWidthSpan_1 = (isNaN(sheet.rows[j].cells[k].colSpan) || isColumnSpan) ? 1 :
                                    Math.max(sheet.rows[j].cells[k].colSpan, 0);
                                if (sheet.rows[j].cells[k].rowSpan && !isColumnSpan &&
                                    sheet.rows[j].cells[k].rowSpan < 0) {
                                    // eslint-disable-next-line max-len
                                    var colSpan = sheet.rows[j + sheet.rows[j].cells[k].rowSpan].cells[k].colSpan;
                                    cellWidthSpan_1 = colSpan ? colSpan : cellWidthSpan_1;
                                }
                                if ((k === start || (k > 0 && sheet.columns && sheet.columns[k - 1] &&
                                    sheet.columns[k - 1].hidden && (sheet.rows[j].cells[k - 1] &&
                                    sheet.rows[j].cells[k - 1].colSpan > 1))) &&
                                    cellWidthSpan_1 <= 0) {
                                    cellWidthSpan_1 = 1;
                                }
                                var backgroundColor = (cell.style ? cell.style.backgroundColor || '#ffffff' : '#ffffff');
                                var textAlign = cell.style ? cell.style['textAlign'] : '';
                                context.font = fontSize;
                                context.fillStyle = color_1;
                                var cellWidthSpanArray_1 = [];
                                if (cellWidthSpan_1 > 1) {
                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                    var widthColumn = sheet.columns.slice(k, k + cellWidthSpan_1);
                                    for (var o = 0; o < widthColumn.length; o++) {
                                        cellWidthSpanArray_1.push(widthColumn['hidden'] ? 0 : ((widthColumn[o] && widthColumn[o]['width']) ||
                                            this_1.defaultCellWidth));
                                    }
                                    if (cellWidthSpanArray_1.length === 0) {
                                        cellWidthSpanArray_1.push((this_1.defaultCellWidth * cellWidthSpan_1));
                                    }
                                    else if (cellWidthSpanArray_1.length !== cellWidthSpan_1) {
                                        cellWidthSpanArray_1 = cellWidthSpanArray_1.map(function (value) { return value +
                                            (_this.defaultCellWidth * (cellWidthSpan_1 - 1 - cellWidthSpanArray_1.length)); });
                                    }
                                }
                                cellWidth_1 = cellWidthSpan_1 > 1 ? cellWidthSpanArray_1.reduce(function (acc, width) { return acc + width; }, 0) :
                                    cellWidthSpan_1 === 1 ? (sheet.columns[k] && sheet.columns[k].width ||
                                        this_1.defaultCellWidth) : 0;
                                cellWidth_1 = currentX + cellWidth_1 > 1000 ? cellWidth_1 - 1 - (currentX + cellWidth_1 - 1000) : cellWidth_1;
                                cellHeight = cellRowSpan > 1 ? sheet.rows.slice(j, j + cellRowSpan).map(function (row) { return row.height ||
                                    _this.defaultCellHeight; }).reduce(function (accumulator, currentValue) { return accumulator +
                                    (currentValue || _this.defaultCellHeight); }, 0) : cellRowSpan === 1 ? rowHeight : 0;
                                var verticalAlign = (cell.style ? cell.style['verticalAlign'] || 'Bottom' : 'Bottom').toLowerCase();
                                if (!isNullOrUndefined(cell.image) && cell.image.length > 0) {
                                    this_1.processImages(i, j, cell, canvas, context, height, this_1.endRow, rowHeight, lineHeight, allowColumnAndRow, printOptions, sheet, printInstance, currentX, currentY, pageHeight, sheetIndex);
                                }
                                if (!isNullOrUndefined(cell.chart) && cell.chart.length > 0) {
                                    this_1.handleCharts(i, j, cell, context, canvas, height, this_1.endRow, this_1.initialRowCount, lineHeight, rowHeight, allowColumnAndRow, printOptions, sheet, printInstance, this_1.multipleCanvasDataURL, currentX, currentY, pageHeight, sheetIndex);
                                }
                                if (!isNullOrUndefined(cell.value) || !isNullOrUndefined(cell.formula) ||
                                    !isNullOrUndefined(cell.hyperlink)) {
                                    var position_1;
                                    if (cell.formula && cell.format) {
                                        if (this_1.parent.calculationMode === 'Automatic') {
                                            this_1.parent.notify(workbookFormulaOperation, {
                                                action: 'refreshCalculate', rowIndex: j, colIndex: k,
                                                value: cell.formula, isFormula: checkIsFormula(cell.formula), sheetIndex: sheetIndex
                                            });
                                        }
                                        var numberFormatArgs = {
                                            value: cell.value, format: cell.format,
                                            rowIndex: j, colIndex: k, sheetIndex: this_1.parent.activeSheetIndex,
                                            cell: cell, refresh: true
                                        };
                                        cellText_1 = this_1.parent.workbookNumberFormatModule.getFormattedCell(numberFormatArgs);
                                        position_1 = "" + (textAlign ? textAlign : numberFormatArgs.isRightAlign ? 'Right' : 'Left');
                                    }
                                    else if (cell.format) {
                                        var numberFormatArgs = {
                                            value: cell.value, format: cell.format,
                                            rowIndex: j, colIndex: k, sheetIndex: this_1.parent.activeSheetIndex,
                                            cell: cell, refresh: true
                                        };
                                        cellText_1 = this_1.parent.workbookNumberFormatModule.getFormattedCell(numberFormatArgs);
                                        position_1 = "" + (textAlign ? textAlign : numberFormatArgs.isRightAlign ? 'Right' : 'Left');
                                    }
                                    else if (cell.formula) {
                                        if (this_1.parent.calculationMode === 'Automatic') {
                                            this_1.parent.notify(workbookFormulaOperation, {
                                                action: 'refreshCalculate', rowIndex: j, colIndex: k,
                                                value: cell.formula, isFormula: checkIsFormula(cell.formula), sheetIndex: sheetIndex
                                            });
                                        }
                                        cellText_1 = cell.value;
                                        position_1 = "" + (textAlign ? textAlign : 'Left');
                                    }
                                    else {
                                        if (!isNullOrUndefined(cell.hyperlink)) {
                                            if (isNullOrUndefined(cell.value)) {
                                                cell.value = (!isNullOrUndefined(cell.hyperlink) && typeof cell.hyperlink === 'object') ? cell.hyperlink['address'] : cell.hyperlink || cell.hyperlink['address'];
                                            }
                                            else if (isNullOrUndefined(cell.value) || cell.value === '') {
                                                cell.value = typeof cell.hyperlink === 'object' ? cell.hyperlink['address'] : cell.hyperlink;
                                            }
                                            color_1 = cell.style ? cell.style.color || '#00e' : '#00e';
                                        }
                                        cellText_1 = cell.value;
                                        var isNumber = !isNullOrUndefined(cell.value) && cell.value !== '' ? new RegExp('^[^\\p{L}]*$', 'u').test(cell.value) : false;
                                        position_1 = '' + (textAlign ? textAlign : isNumber ? 'Right' : 'Left');
                                    }
                                    var textSize = (cell.style ? cell.style.fontSize || '11pt' : '11pt');
                                    var fontFamily = (cell.style ? cell.style.fontFamily || 'Calibri' : 'Calibri');
                                    var fontstyle = (cell.style ? cell.style.fontStyle || '' : '');
                                    var fontWeight = (cell.style ? cell.style.fontWeight || 'normal' : 'normal');
                                    context.font = fontstyle + " " + fontWeight + " " + textSize + " " + fontFamily;
                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                    var textMetrics_1 = context.measureText(cellText_1);
                                    var textWidth_1 = textMetrics_1.width;
                                    // eslint-disable-next-line
                                    var textHeight = textMetrics_1.actualBoundingBoxAscent + textMetrics_1.actualBoundingBoxDescent;
                                    if (cell.wrap) {
                                        var cellLineHeight_1 = this_1.defaultCellHeight < cellHeight ? ((parseInt(textSize.replace('pt', ''), 10) / 72) * 96) : cellHeight;
                                        var endColIdx = cell.colSpan > 1 ? k + cell.colSpan - 1 : k;
                                        var colWidth = getDPRValue(getColumnsWidth(sheet, k, endColIdx) - (4 + (getBorderWidth(j, k, sheet) || 1)), true);
                                        var textLines = this_1.wrapText(cellText_1, colWidth, cell.style, this_1.parent.cellStyle);
                                        var space = (textLines.length === 1) ? cellHeight :
                                            (textLines.length * cellLineHeight_1 === cellHeight) ? cellLineHeight_1 :
                                                (textLines.length * cellLineHeight_1 < cellHeight) ?
                                                    cellHeight - ((textLines.length - 1) * cellLineHeight_1) : cellLineHeight_1;
                                        var startY_1 = currentY[k] + (verticalAlign === 'top' ? cellLineHeight_1 : verticalAlign === 'middle' ?
                                            space > cellLineHeight_1 + (space / 4) ? cellLineHeight_1 + (space / 4) : space : space);
                                        context.save();
                                        context.beginPath();
                                        context.rect(currentX, currentY[k], cellWidth_1, cellHeight);
                                        context.clip();
                                        context.fillStyle = backgroundColor;
                                        context.fillRect(currentX, currentY[k], cellWidth_1, (cellHeight + (verticalAlign === 'top' ? cellLineHeight_1 : 0)));
                                        textLines.forEach(function (line, index) {
                                            context.fillStyle = color_1;
                                            textMetrics_1 = context.measureText(line);
                                            textWidth_1 = textMetrics_1.width;
                                            var locationX = printInstance.calculateTextPosition(textWidth_1, cellWidth_1, currentX, position_1, true);
                                            var locationY = startY_1 + index * cellLineHeight_1;
                                            if (position_1.toLowerCase() === 'right') {
                                                context.textAlign = 'right';
                                                context.fillText(line.trim(), locationX, locationY);
                                            }
                                            else {
                                                context.fillText(line, locationX, locationY);
                                            }
                                            printInstance.textDecoration(cell, context, locationX, locationY, color_1, textMetrics_1, cellText_1, cellWidth_1);
                                        });
                                        context.restore();
                                    }
                                    else {
                                        context.save();
                                        context.beginPath();
                                        context.rect(currentX, currentY[k], cellWidth_1, cellHeight);
                                        context.clip();
                                        context.fillStyle = backgroundColor;
                                        context.fillRect(currentX, currentY[k], cellWidth_1, cellHeight);
                                        context.fillStyle = color_1;
                                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                                        var locationX = printInstance.calculateTextPosition(textWidth_1, cellWidth_1, currentX, position_1);
                                        var locationY = currentY[k];
                                        var midValue = (cellHeight / 2) + (textHeight / 2);
                                        if (verticalAlign === 'top') {
                                            context.textBaseline = 'top'; // Set baseline to the top to ensure consistent vertical placement. Baseline at top means no additional offset needed
                                        }
                                        else if (verticalAlign === 'middle' && cellHeight > midValue) {
                                            locationY += midValue; // Center text vertically
                                        }
                                        else {
                                            locationY += cellHeight; // Align text in default or bottom
                                        }
                                        if (!isNullOrUndefined(cell.style)) {
                                            locationY = (!isNullOrUndefined(cell.style.borderBottom) && cell.style.borderBottom.indexOf('double') > -1) || (!isNullOrUndefined(cell.style.borderTop) && cell.style.borderTop.indexOf('double') > -1) ? locationY - 2 : locationY;
                                            locationX = (!isNullOrUndefined(cell.style.borderLeft) && cell.style.borderLeft.indexOf('double') > -1) || (!isNullOrUndefined(cell.style.borderRight) && cell.style.borderRight.indexOf('double') > -1) ? locationX + (position_1 === 'Left' ? 2 : -3) : locationX;
                                        }
                                        context.fillText(cellText_1, locationX, locationY);
                                        context.restore();
                                        printInstance.textDecoration(cell, context, locationX, locationY, color_1, textMetrics_1, cellText_1, cellWidth_1);
                                    }
                                }
                                else {
                                    printInstance.rowHeaderRect(context, currentX, currentY[k], cellWidth_1, cellHeight, backgroundColor);
                                }
                                if (cell.style && (cellWidth_1 > 0 || cellHeight > 0) && (cell.style.borderBottom || cell.style.borderTop
                                    || cell.style.borderLeft || cell.style.borderRight && ((isNullOrUndefined(cell.rowSpan) &&
                                    isNullOrUndefined(cell.colSpan)) || (!isNullOrUndefined(cell.rowSpan) && cell.rowSpan > 0) ||
                                    (!isNullOrUndefined(cell.colSpan) && cell.colSpan > 0)))) {
                                    printInstance.drawBorder(context, cell.style, currentX, (currentY[k] <= 0 ? 2 : currentY[k]), cellWidth_1, cellHeight);
                                }
                            }
                            var currentWidth = (cellWidthSpan_1 <= 0 ? cellWidth_1 : (cellWidth_1 ||
                                (sheet.columns[k] && sheet.columns[k].width) || this_1.defaultCellWidth));
                            if (printOptions.allowGridLines) {
                                style.borderRight = k === end && allowColumnAndRow ? undefined : '1px solid black';
                                printInstance.drawBorder(context, style, currentX, currentY[k], currentWidth, cellHeight);
                            }
                            currentX += currentWidth;
                            var currentYValue = 0;
                            if (cellRowSpan > 1) {
                                currentYValue = currentY[k];
                                for (var m = k; m < k + cellWidthSpan_1; m++) {
                                    var cell_1 = sheet.rows[j] && !isNullOrUndefined(sheet.rows[j].cells) &&
                                        sheet.rows[j].cells[m];
                                    if (cell_1 && !isNullOrUndefined(cell_1.image)) {
                                        this_1.processImages(i, j, cell_1, canvas, context, height, this_1.endRow, rowHeight, lineHeight, allowColumnAndRow, printOptions, sheet, printInstance, currentX, currentY, pageHeight, sheetIndex);
                                    }
                                    else if (cell_1 && !isNullOrUndefined(cell_1.chart)) {
                                        this_1.handleCharts(i, j, cell_1, context, canvas, height, this_1.endRow, this_1.initialRowCount, lineHeight, rowHeight, allowColumnAndRow, printOptions, sheet, printInstance, this_1.multipleCanvasDataURL, currentX, currentY, pageHeight, sheetIndex);
                                    }
                                    if (cell_1.style && m === k && cellHeight > 0 && (cell_1.style.borderBottom || cell_1.style.borderTop ||
                                        cell_1.style.borderLeft || cell_1.style.borderRight)) {
                                        printInstance.drawBorder(context, cell_1.style, currentX, currentY[k], 2, cellHeight);
                                    }
                                    currentY[m] = (isNaN(currentY[m]) ? defaultCellSpace :
                                        currentY[m]) + cellHeight;
                                }
                                k += cellWidthSpan_1 - 1;
                            }
                            if (k === end && allowColumnAndRow) {
                                printInstance.drawBorder(context, rightStyle, currentX - 2, currentY[k] - currentYValue, 2, cellHeight);
                            }
                            if (k === end && allowColumnAndRow && borderOfHeaderText && !isExtraLine) {
                                printInstance.drawBorder(context, bottomStyle, 0, currentY[k] - currentYValue, currentX, cellHeight);
                                borderOfHeaderText = false;
                            }
                            if (cellRowSpan <= 1) {
                                currentY[k] += cellHeight;
                            }
                        }
                        else if (allowColumnAndRow && k === start) {
                            var cellRowSpan = !isNullOrUndefined(cell) ?
                                isNaN(sheet.rows[j].cells[k].rowSpan) ? 1 :
                                    Math.max(sheet.rows[j].cells[k].rowSpan, 0) : 1;
                            currentY[k] = (isNaN(currentY[k]) ? defaultCellSpace : currentY[k]);
                            var rowHeaderHeight = currentY[k];
                            context.font = '11pt Calibri';
                            for (var o = 0; o < cellRowSpan; o++) {
                                currentX = 0;
                                rowHeaderHeight += (o === 0 ? 0 : (sheet.rows[j + o] && sheet.rows[j + o - 1].height ||
                                    this_1.defaultCellHeight));
                                printInstance.rowHeaderText((j + 1 + o).toString(), context, printInstance, headerWidth, currentX, style, rowHeaderHeight, sheet.rows[j + o].height || this_1.defaultCellHeight);
                                currentX += headerWidth;
                            }
                            currentY[k] += cellHeight;
                        }
                        out_k_1 = k;
                    };
                    var this_1 = this, out_k_1;
                    // Loop through cells in a row
                    for (var k = start; k <= end; k++) {
                        _loop_1(k);
                        k = out_k_1;
                    }
                }
                else if ( isNullOrUndefined(sheet.rows[j])) {
                    var style_1 = { borderBottom: '1px solid black', borderTop: '1px solid black', borderLeft: '1px solid black', borderRight: '1px solid black' };
                    borderOfHeaderText = ((height + cellHeight) + (j === 0 && allowColumnAndRow ?
                        this.defaultCellHeight : 0) > 1080) || (j === sheet.rows.length - 1) || (j === this.endRow - 1);
                    for (var k = start; k <= end; k++) {
                        var cell = sheet.rows[j] && !isNullOrUndefined(sheet.rows[j].cells) &&
                            sheet.rows[j].cells[k];
                        if (!isNullOrUndefined(cell) && !isNullOrUndefined(cell.style)) {
                            style_1 = this.setBorderStyle(cell, style_1);
                        }
                        if (allowColumnAndRow && k === start) {
                            printInstance.rowHeaderText((j + 1).toString(), context, printInstance, headerWidth, currentX, style_1, currentY[k], this.defaultCellHeight);
                            currentX += headerWidth;
                        }
                        var cellWidth = (sheet.columns[k] && sheet.columns[k].width || this.defaultCellWidth);
                        cellWidth = currentX + cellWidth > 1000 ? cellWidth - 1 - (currentX + cellWidth - 1000) : cellWidth;
                        currentY[k] = (isNaN(currentY[k]) ? defaultCellSpace : currentY[k]);
                        if (printOptions.allowGridLines) {
                            printInstance.drawBorder(context, style_1, currentX, currentY[k], cellWidth, cellHeight);
                        }
                        else if (allowColumnAndRow && !printOptions.allowGridLines && k === end) {
                            printInstance.drawBorder(context, { borderRight: '1px solid black' }, currentX, currentY[k], cellWidth, cellHeight);
                        }
                        currentX += cellWidth;
                        if (k === end && allowColumnAndRow && borderOfHeaderText) {
                            printInstance.drawBorder(context, bottomStyle, 0, currentY[k], currentX, cellHeight);
                            borderOfHeaderText = false;
                        }
                        currentY[k] += cellHeight;
                    }
                }
            }
            if (!this.isImageLoaded && !this.isChartLoaded) {
                if (isCanvasDataUrl && this.endRow > 0) {
                    this.multipleCanvasDataURL.push(canvas.toDataURL());
                }
                rowsCount = 0;
                if (this.pageCounts.length - 1 === i) {
                    printInstance.canvasPrint(this.parent, sheetIndex, printOptions);
                }
            }
            else if (this.isImageLoaded || this.isChartLoaded) {
                break;
            }
        }
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Print.prototype.setBorderStyle = function (cell, style) {
        style.borderBottom = !isNullOrUndefined(cell.style.borderBottom) ? cell.style.borderBottom : style.borderBottom;
        style.borderTop = !isNullOrUndefined(cell.style.borderTop) ? cell.style.borderTop : style.borderTop;
        style.borderRight = !isNullOrUndefined(cell.style.borderRight) ? cell.style.borderRight : style.borderRight;
        style.borderLeft = !isNullOrUndefined(cell.style.borderLeft) ? cell.style.borderLeft : style.borderLeft;
        return style;
    };
    Print.prototype.setToDefault = function () {
        this.parent.currentPrintSheetIndex = 0;
        this.initialRowCount = 0;
        this.chartHeight = 0;
        this.totalCharts = 0;
        this.totalImages = 0;
        this.chartLoadedCount = 0;
        this.imageLoadedCount = 0;
        this.endRow = 0;
        this.pageCounts = [];
        this.multipleCanvasDataURL = [];
        this.chartElements = [];
        this.isChartLoaded = false;
        this.isImageLoaded = false;
        this.startNewPageCount = 0;
    };
    Print.prototype.handleCharts = function (i, j, cell, context, canvas, height, rowCount, initialRowCount, lineHeight, rowHeight, allowColumnAndRow, printOptions, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    sheet, printInstance, multipleCanvasDataURL, currentX, currentY, pageHeight, sheetIndex) {
        var _this = this;
        if (!isNullOrUndefined(cell.chart)) {
            var _loop_2 = function (chart) {
                this_2.totalCharts += 1;
                var image = new Image();
                chart.left = !isNullOrUndefined(chart.left) ? chart.left : 0;
                chart.top = !isNullOrUndefined(chart.top) ? chart.top : 0;
                var chartElement = document.getElementById(chart.id);
                if (isNullOrUndefined(chartElement)) {
                    this_2.parent.insertChart([chart]);
                    chartElement = document.getElementById(chart.id);
                    this_2.chartElements.push(chart.id + '_overlay');
                }
                if (!isNullOrUndefined(chartElement)) {
                    this_2.chartHeight = chart.height;
                    var isExtraLine = (this_2.initialRowCount + Math.ceil(chart.height / 19) > this_2.endRow) &&
                        (printOptions.allowRowColumnHeader || printOptions.allowGridLines);
                    if (isExtraLine) {
                        if (sheet.rows.length - 1 === j) {
                            var extraSpace = rowHeight + (allowColumnAndRow ? this_2.defaultCellHeight : 0);
                            if (canvas.height > height + (this_2.chartHeight - extraSpace)) {
                                this_2.endRow += Math.ceil((this_2.chartHeight - extraSpace) / 19);
                            }
                            else {
                                this_2.endRow += Math.ceil((canvas.height - (height + extraSpace)) / 19);
                            }
                        }
                    }
                    var svgElement = chartElement.cloneNode(true);
                    var url = window.URL.createObjectURL(new Blob([(new XMLSerializer()).serializeToString(svgElement.childNodes[1])], { type: 'image/svg+xml' }));
                    image.onload = function () {
                        var chartLeftIndex = Math.ceil(chart.left / 1000) - 1;
                        var chartTopIndex = Math.ceil(chart.top / 1080) - 1;
                        var left = chart.left + (allowColumnAndRow ? 37 : 0);
                        var top = chart.top + (allowColumnAndRow ? 19 : 0) + (chartTopIndex > 0 ? lineHeight : 0);
                        context.drawImage(image, chartLeftIndex <= 0 ? left : left - (chartLeftIndex * 1000), chartTopIndex <= 0 ? top : top - (chartTopIndex * 1160), chart.width, chart.height);
                        _this.chartLoadedCount++;
                        if (_this.chartLoadedCount === _this.totalCharts) {
                            currentX += chart.width;
                            _this.isChartLoaded = false;
                            if (!_this.isImageLoaded) {
                                multipleCanvasDataURL.push(canvas.toDataURL());
                                var startValue = (_this.initialRowCount === sheet.rows.length - 1 && height < 1080) ?
                                    sheet.rows.length : _this.initialRowCount;
                                var endValue = _this.endRow;
                                _this.processCell(i, (startValue + 1 === endValue ? endValue : startValue), endValue, currentX, currentY, context, canvas, sheet, printInstance, pageHeight, height, false, sheetIndex, printOptions);
                            }
                        }
                    };
                    image.src = url;
                    this_2.isChartLoaded = true;
                }
            };
            var this_2 = this;
            for (var _i = 0, _a = cell.chart; _i < _a.length; _i++) {
                var chart = _a[_i];
                _loop_2(chart);
            }
        }
    };
    Print.prototype.processImages = function (i, j, cell, canvas, context, height, rowCount, rowHeight, lineHeight, allowColumnAndRow, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    printOptions, sheet, printInstance, currentX, currentY, pageHeight, sheetIndex) {
        var _this = this;
        if (!isNullOrUndefined(cell.image)) {
            var _loop_3 = function (image) {
                this_3.totalImages += 1;
                var img = new Image();
                img.src = image.src;
                image.left = !isNullOrUndefined(image.left) ? image.left : 0;
                image.top = !isNullOrUndefined(image.top) ? image.top : 0;
                this_3.chartHeight = image.height;
                var isExtraLine = (this_3.initialRowCount + Math.ceil(image.height / 19) > this_3.endRow) &&
                    (printOptions.allowRowColumnHeader || printOptions.allowGridLines);
                if (isExtraLine) {
                    if (j === sheet.rows.length - 1) {
                        var extraSpace = (rowHeight + (allowColumnAndRow ? this_3.defaultCellHeight : 0));
                        if (canvas.height > (height + (this_3.chartHeight - extraSpace))) {
                            this_3.endRow += Math.ceil((this_3.chartHeight - extraSpace) / 19);
                        }
                        else {
                            this_3.endRow += Math.ceil((canvas.height - (height + extraSpace)) / 19);
                        }
                    }
                }
                img.onload = function () {
                    var imageLeftIndex = Math.ceil(image.left / 1000) - 1;
                    var imageTopIndex = Math.ceil(image.top / 1080) - 1;
                    var left = image.left + (allowColumnAndRow ? 37 : 0);
                    var top = image.top + (allowColumnAndRow ? 19 : 0) + (imageTopIndex > 0 ? lineHeight : 0);
                    context.drawImage(img, (imageLeftIndex <= 0 ? left : left - (imageLeftIndex * 1000)), (imageTopIndex <= 0 ? top : top - (imageTopIndex * 1160)), image.width, image.height);
                    _this.imageLoadedCount++;
                    if (_this.imageLoadedCount === _this.totalImages) {
                        _this.isImageLoaded = false;
                        currentX += image.width;
                        if (!_this.isChartLoaded) {
                            _this.multipleCanvasDataURL.push(canvas.toDataURL());
                            var startValue = (_this.initialRowCount === sheet.rows.length - 1 &&
                                height < 1080) ? sheet.rows.length : _this.initialRowCount;
                            var endValue = _this.endRow;
                            _this.processCell(i, (startValue + 1 === endValue ? endValue : startValue), endValue, currentX, currentY, context, canvas, sheet, printInstance, pageHeight, height, false, sheetIndex, printOptions);
                        }
                    }
                };
                img.onerror = function () {
                    _this.imageLoadedCount++; // Increment count to prevent indefinite waiting
                    if (_this.imageLoadedCount === _this.totalImages) {
                        _this.isImageLoaded = false;
                        if (!_this.isChartLoaded) {
                            _this.multipleCanvasDataURL.push(canvas.toDataURL());
                            var startValue = (_this.initialRowCount === sheet.rows.length - 1 &&
                                height < 1080) ? sheet.rows.length : _this.initialRowCount;
                            var endValue = _this.endRow;
                            _this.processCell(i, (startValue + 1 === endValue ? endValue : startValue), endValue, currentX, currentY, context, canvas, sheet, printInstance, pageHeight, height, false, sheetIndex, printOptions);
                        }
                    }
                };
            };
            var this_3 = this;
            for (var _i = 0, _a = cell.image; _i < _a.length; _i++) {
                var image = _a[_i];
                _loop_3(image);
            }
            this.isImageLoaded = true;
        }
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Print.prototype.textDecoration = function (cell, context, locationX, locationY, color, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    textMetrics, cellText, cellWidth) {
        if (cellText !== '' && (!isNullOrUndefined(cell.style) && !isNullOrUndefined(cell.style.textDecoration) &&
            cell.style.textDecoration.toLowerCase().indexOf('underline') > -1 || !isNullOrUndefined(cell.hyperlink))) {
            context.beginPath();
            context.moveTo(locationX, locationY - 3);
            context.lineTo(locationX + (textMetrics.width > cellWidth ? cellWidth :
                textMetrics.width), locationY - 3);
            context.strokeStyle = color;
            context.lineWidth = 1;
            context.stroke();
        }
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Print.prototype.rowHeaderRect = function (context, currentX, currentY, cellWidth, cellHeight, backgroundColor) {
        if (backgroundColor === void 0) { backgroundColor = '#ffffff'; }
        context.save();
        context.beginPath();
        context.rect(currentX, currentY, cellWidth, cellHeight);
        context.clip();
        context.fillStyle = backgroundColor;
        context.fillRect(currentX, currentY, cellWidth, cellHeight);
        context.restore();
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Print.prototype.rowHeaderText = function (rowText, context, printInstance, headerWidth, currentX, style, currentY, height) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var textMetrics = context.measureText(rowText);
        var textWidth = textMetrics.width;
        var locationX = printInstance.calculateTextPosition(textWidth, headerWidth, currentX, 'Center');
        var locationY = currentY;
        context.save();
        context.beginPath();
        context.rect(currentX, currentY, headerWidth, height);
        context.clip();
        context.fillStyle = '#000000';
        context.fillText(rowText, locationX, (locationY + height));
        printInstance.drawBorder(context, style, currentX, (currentY || 0), headerWidth, height);
        context.restore();
    };
    Print.prototype.canvasPrint = function (spreadSheet, sheetIndex, printOptions) {
        var _this = this;
        if (printOptions.type === 'Workbook' && (this.totalSheetCount.length - 1) >= this.workbookActiveSheetCount) {
            var currentSheetIndex = this.totalSheetCount[this.workbookActiveSheetCount];
            var sheet = spreadSheet.sheets[currentSheetIndex];
            this.workbookActiveSheetCount++;
            this.activeSheetPrint(spreadSheet, sheet, printOptions, currentSheetIndex);
        }
        else {
            for (var i = 0; i < this.chartElements.length; i++) {
                var chartElement = document.getElementById(this.chartElements[i]);
                if (!isNullOrUndefined(chartElement)) {
                    chartElement.remove();
                }
            }
            if (this.multipleCanvasDataURL.length > 0) {
                var browserUserAgent = navigator.userAgent;
                var printWindow_1 = window.open(' ', '_blank', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');
                printWindow_1.document.write('<html><head><title></title></head><body>');
                var canvasWidth_1 = 1000; // Adjust as needed
                var canvasHeight_1 = 1400; // Adjust as needed
                if ((browserUserAgent.indexOf('Chrome') !== -1) || (browserUserAgent.indexOf('Safari') !== -1) ||
                    (browserUserAgent.indexOf('Firefox')) !== -1) {
                    printWindow_1.document.write('<!DOCTYPE html>');
                    printWindow_1.document.write('<html><head><style>html, body {  }'
                        + ' img { height: 100%; width: 100%; display: block; }@media print { body {  }'
                        + ' img { width:100%; width:100%; box-sizing: border-box; }br, button { display: none; }'
                        + ' div{ page-break-inside: avoid; }} @page{ size:' + canvasWidth_1.toString() + 'px ' + canvasHeight_1.toString() + 'px; }</style></head><body>');
                }
                else {
                    printWindow_1.document.write('<!DOCTYPE html>');
                    printWindow_1.document.write('<html><head>'
                        + '<style>html, body {  } img { height: 100%; width: 100%; }@media print { body {  }'
                        + 'img { width:100%; width:100%; box-sizing: border-box; }br, button { display: none; } '
                        + 'div{ page-break-inside: avoid; }} @page{ size:' + canvasWidth_1.toString() + 'px ' + canvasHeight_1.toString() + 'px; }</style></head><body>');
                }
                this.multipleCanvasDataURL.forEach(function (dataURL, index) {
                    var canvas = printWindow_1.document.createElement('canvas');
                    canvas.width = canvasWidth_1;
                    canvas.height = canvasHeight_1;
                    var context = canvas.getContext('2d');
                    var image = new Image();
                    image.onload = function () {
                        context.drawImage(image, 0, 0, canvasWidth_1, canvasHeight_1);
                        if (index === _this.multipleCanvasDataURL.length - 1) {
                            spreadSheet.isPrintingProcessing = false;
                            printWindow_1.print();
                            printWindow_1.document.close();
                            printWindow_1.close();
                            spreadSheet.printModule.setToDefault();
                        }
                    };
                    image.src = dataURL;
                    printWindow_1.document.body.appendChild(canvas);
                });
            }
        }
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Print.prototype.drawBorder = function (context, borderStyles, locationX, locationY, cellWidth, cellHeight) {
        var borderBottom = borderStyles.borderBottom, borderLeft = borderStyles.borderLeft, borderRight = borderStyles.borderRight, borderTop = borderStyles.borderTop, borderColor = borderStyles.borderColor;
        context.strokeStyle = borderColor || 'black';
        if (!isNullOrUndefined(borderBottom) && borderBottom.indexOf('#FFFFFF') === -1) {
            context.strokeStyle = borderBottom.split(' ')[2];
            this.drawPath(locationX, (locationY === 2 ? -2 : locationY) + cellHeight, locationX + cellWidth, (locationY === 2 ? -2 : locationY) + cellHeight, context, borderBottom, false, borderStyles, 'bottom');
        }
        if (!isNullOrUndefined(borderLeft) && borderLeft.indexOf('#FFFFFF') === -1) {
            context.strokeStyle = borderLeft.split(' ')[2];
            this.drawPath(locationX, locationY, locationX, (locationY === 2 ? -2 : locationY) + cellHeight, context, borderLeft, true, borderStyles, 'left');
        }
        if (!isNullOrUndefined(borderRight) && borderRight.indexOf('#FFFFFF') === -1) {
            context.strokeStyle = borderRight.split(' ')[2];
            this.drawPath(locationX + cellWidth, locationY, locationX + cellWidth, (locationY === 2 ? -2 : locationY) + cellHeight, context, borderRight, false, borderStyles, 'right');
        }
        if (!isNullOrUndefined(borderTop) && borderTop.indexOf('#FFFFFF') === -1) {
            context.strokeStyle = borderTop.split(' ')[2];
            this.drawPath(locationX, locationY, locationX + cellWidth, locationY, context, borderTop, true, borderStyles, 'top');
        }
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Print.prototype.drawPath = function (startX, startY, endX, endY, context, border, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    isLeftOrTop, borderStyles, position) {
        context.beginPath();
        if (border.indexOf('dashed') > -1) {
            context.setLineDash([3, 2]);
            context.lineWidth = border.split(' ')[0].split('')[0];
        }
        else if (border.indexOf('dotted') > -1) {
            context.setLineDash([1, 1]);
            context.lineWidth = border.split(' ')[0].split('')[0];
        }
        else if (border.indexOf('double') > -1) {
            context.setLineDash([]);
            var isAllBorder = !isNullOrUndefined(borderStyles.borderBottom) && !isNullOrUndefined(borderStyles.borderLeft) &&
                !isNullOrUndefined(borderStyles.borderRight) && !isNullOrUndefined(borderStyles.borderTop);
            var isLeftBottom = !isNullOrUndefined(borderStyles.borderBottom) && !isNullOrUndefined(borderStyles.borderLeft) &&
                isNullOrUndefined(borderStyles.borderRight) && isNullOrUndefined(borderStyles.borderTop);
            var isLeftTop = isNullOrUndefined(borderStyles.borderBottom) && !isNullOrUndefined(borderStyles.borderLeft) &&
                isNullOrUndefined(borderStyles.borderRight) && !isNullOrUndefined(borderStyles.borderTop);
            var isLeftTopBotom = !isNullOrUndefined(borderStyles.borderBottom) && !isNullOrUndefined(borderStyles.borderLeft) &&
                isNullOrUndefined(borderStyles.borderRight) && !isNullOrUndefined(borderStyles.borderTop);
            var isRightBottom = !isNullOrUndefined(borderStyles.borderBottom) && isNullOrUndefined(borderStyles.borderLeft) &&
                !isNullOrUndefined(borderStyles.borderRight) && isNullOrUndefined(borderStyles.borderTop);
            var isRightTop = isNullOrUndefined(borderStyles.borderBottom) && isNullOrUndefined(borderStyles.borderLeft) &&
                !isNullOrUndefined(borderStyles.borderRight) && !isNullOrUndefined(borderStyles.borderTop);
            var isRightTopBottom = !isNullOrUndefined(borderStyles.borderBottom) && isNullOrUndefined(borderStyles.borderLeft) &&
                !isNullOrUndefined(borderStyles.borderRight) && !isNullOrUndefined(borderStyles.borderTop);
            var isLeftTopRight = isNullOrUndefined(borderStyles.borderBottom) && !isNullOrUndefined(borderStyles.borderLeft) &&
                !isNullOrUndefined(borderStyles.borderRight) && !isNullOrUndefined(borderStyles.borderTop);
            var isLeftBottomRight = !isNullOrUndefined(borderStyles.borderBottom) && !isNullOrUndefined(borderStyles.borderLeft)
                && !isNullOrUndefined(borderStyles.borderRight) && isNullOrUndefined(borderStyles.borderTop);
            context.lineWidth = 1;
            var extraSpace = 3;
            if (isAllBorder) {
                if (startX === endX) {
                    if (isLeftOrTop) {
                        this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY + extraSpace, endX + extraSpace, endY - (extraSpace - 1));
                    }
                    else {
                        this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY + extraSpace, endX - extraSpace, endY - (extraSpace - 1));
                    }
                }
                else if (startY === endY) {
                    if (isLeftOrTop) {
                        this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY + extraSpace, endX - (extraSpace - 1), endY + extraSpace);
                    }
                    else {
                        this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY - extraSpace, endX - (extraSpace - 1), endY - extraSpace);
                    }
                }
            }
            else if (isLeftBottom) {
                if (position === 'left') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY, endX + extraSpace, endY - (extraSpace - 1));
                }
                else {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY - extraSpace, endX, endY - extraSpace);
                }
            }
            else if (isLeftTop) {
                if (position === 'left') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY + (extraSpace - 1), endX + extraSpace, endY);
                }
                else {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY + extraSpace, endX, endY + extraSpace);
                }
            }
            else if (isLeftTopBotom) {
                if (position === 'left') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY + extraSpace, endX + extraSpace, endY - (extraSpace - 1));
                }
                else if (position === 'top') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY + extraSpace, endX, endY + extraSpace);
                }
                else {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY - extraSpace, endX, endY - extraSpace);
                }
            }
            else if (isRightBottom) {
                if (position === 'right') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY, endX - extraSpace, endY - (extraSpace - 1));
                }
                else {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX, startY - extraSpace, endX - (extraSpace - 1), endY - extraSpace);
                }
            }
            else if (isRightTop) {
                if (position === 'right') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY + extraSpace, endX - extraSpace, endY);
                }
                else {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX, startY + extraSpace, endX - (extraSpace - 1), endY + extraSpace);
                }
            }
            else if (isRightTopBottom) {
                if (position === 'right') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY + extraSpace, endX - extraSpace, endY - (extraSpace - 1));
                }
                else if (position === 'top') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX, startY + extraSpace, endX - (extraSpace - 1), endY + extraSpace);
                }
                else {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX, startY - extraSpace, endX - (extraSpace - 1), endY - extraSpace);
                }
            }
            else if (isLeftTopRight) {
                if (position === 'right') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY + extraSpace, endX - extraSpace, endY);
                }
                else if (position === 'top') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY + extraSpace, endX - (extraSpace - 1), endY + extraSpace);
                }
                else {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY + extraSpace, endX + extraSpace, endY);
                }
            }
            else if (isLeftBottomRight) {
                if (position === 'right') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX - extraSpace, startY, endX - extraSpace, endY - (extraSpace - 1));
                }
                else if (position === 'bottom') {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (extraSpace - 1), startY - extraSpace, endX - (extraSpace - 1), endY - extraSpace);
                }
                else {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + extraSpace, startY, endX + extraSpace, endY - (extraSpace - 1));
                }
            }
            else {
                if (startX === endX) {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX + (position === 'left' ? extraSpace : -extraSpace), startY, endX + (position === 'left' ? extraSpace : -extraSpace), endY);
                }
                else if (startY === endY) {
                    this.drawDoubleBorder(context, startX, startY, endX, endY, startX, startY +
                        (position === 'top' ? extraSpace : -extraSpace), endX, endY + (position === 'top' ? extraSpace : -extraSpace));
                }
            }
            context.stroke();
            return;
        }
        else {
            context.setLineDash([]);
            context.lineWidth = border.split(' ')[0].split('')[0];
        }
        context.moveTo(startX, startY);
        context.lineTo(endX, endY);
        context.stroke();
    };
    Print.prototype.drawDoubleBorder = function (context, startX1, startY1, endX1, endY1, startX2, startY2, endX2, endY2) {
        context.moveTo(startX1, startY1);
        context.lineTo(endX1, endY1);
        context.moveTo(startX2, startY2);
        context.lineTo(endX2, endY2);
    };
    Print.prototype.calculateTextPosition = function (textWidth, totalWidth, currentX, position, isWrap) {
        var x;
        var space = 3;
        var availableSpace = totalWidth;
        if (availableSpace >= textWidth) {
            switch (position.toLowerCase()) {
                case 'left':
                    x = currentX + space;
                    break;
                case 'center':
                    x = currentX + (availableSpace - textWidth) / 2;
                    break;
                case 'right':
                    if (isWrap) {
                        x = currentX + (availableSpace - space);
                    }
                    else {
                        x = currentX + (availableSpace - space) - textWidth;
                    }
                    break;
            }
        }
        else if (textWidth < totalWidth) {
            x = position.toLowerCase() === 'left' ? currentX + space : position.toLowerCase() === 'center' ? currentX + (totalWidth - textWidth) / 2
                : currentX + totalWidth - textWidth;
        }
        else {
            x = currentX + space;
        }
        return x;
    };
    Print.prototype.calculatePageCount = function (sheet, columnHeaderWidth, allowColumnAndRow) {
        var allowHeader = allowColumnAndRow;
        var colIndex = this.columnIndex;
        if (sheet.columns.length === 0) {
            var columnCount = Math.floor(columnHeaderWidth / this.defaultCellWidth) - (allowHeader ? 1 : 0);
            return Array(Math.max(1, Math.ceil(colIndex / columnCount))).fill(columnCount);
        }
        var pageWidthCount = 0;
        var pageCount = [];
        for (var i = 0; i <= colIndex; i++) {
            var column = sheet.columns && sheet.columns[i];
            var columnWidth = (allowHeader ? 27 : 0) + ((column && column.hidden) ? 0 :
                (column && !isNullOrUndefined(column.width)) ? column.width : this.defaultCellWidth);
            pageWidthCount += columnWidth;
            allowHeader = false;
            if (pageWidthCount > columnHeaderWidth) {
                pageCount.push(i - 1);
                allowHeader = true;
                pageWidthCount = columnWidth;
            }
        }
        if (pageCount.length === 0 || colIndex > pageCount[pageCount.length - 1]) {
            pageCount.push(colIndex);
        }
        return pageCount;
    };
    Print.prototype.wrapText = function (text, colwidth, style, parentStyle) {
        if (isNullOrUndefined(text)) {
            return [''];
        }
        var displayText = [];
        var width;
        var splitTextArr;
        var lWidth;
        var cWidth;
        var prevChars;
        var prevWidth = 0;
        var textArr = text.toString().split(' ');
        var spaceWidth = getTextWidth(' ', style, parentStyle, true);
        var hypenWidth;
        var lines;
        var lineText = '';
        var lineCnt = 0;
        var maxCnt = 0;
        var calculateCount = function (txt) {
            if (prevWidth) {
                displayText.push(lineText);
            }
            if (getDPRValue(width / colwidth, true) > 1) {
                txt.split('').forEach(function (val) {
                    cWidth = getTextWidth(val, style, parentStyle, true);
                    lWidth += cWidth;
                    prevChars += val;
                    if (getDPRValue(lWidth, true) > colwidth) {
                        displayText.push(prevChars);
                        lWidth = cWidth;
                        prevChars = val;
                    }
                });
                width = lWidth;
                txt = prevChars;
            }
            lineText = txt;
            prevWidth = width;
        };
        var lastTextLen = textArr.length - 1;
        var addSpace = function (size, textIdx) {
            if (getDPRValue(size + spaceWidth, true) / colwidth >= 1) {
                width += 0;
            }
            else {
                width += spaceWidth;
                if (textIdx !== lastTextLen) {
                    lineText += ' ';
                }
            }
        };
        textArr.forEach(function (txt, textIdx) {
            lWidth = 0;
            cWidth = 0;
            prevChars = '';
            width = getTextWidth(txt, style, parentStyle, true);
            lines = getDPRValue(prevWidth + width, true) / colwidth;
            if (lines > 1) {
                splitTextArr = txt.split('-');
                if (splitTextArr.length > 1) {
                    var lastIdx_1 = splitTextArr.length - 1;
                    splitTextArr.forEach(function (splitText, index) {
                        lWidth = 0;
                        cWidth = 0;
                        prevChars = '';
                        if (!hypenWidth) {
                            hypenWidth = getTextWidth('-', style, parentStyle, true);
                        }
                        width = getTextWidth(splitText, style, parentStyle, true);
                        if (index < lastIdx_1) {
                            width += hypenWidth;
                            splitText += '-';
                        }
                        lines = getDPRValue(prevWidth + width, true) / colwidth;
                        if (lines > 1) {
                            calculateCount(splitText);
                            if (index === lastIdx_1) {
                                addSpace(width, textIdx);
                            }
                        }
                        else {
                            lineText += splitText;
                            if (index === lastIdx_1 && textArr[textArr.length - 1] !== txt) {
                                addSpace(prevWidth + width, textIdx);
                            }
                            prevWidth += width;
                        }
                    });
                }
                else {
                    calculateCount(txt);
                    addSpace(width, textIdx);
                }
            }
            else {
                lineText += txt;
                addSpace(prevWidth + width, textIdx);
                prevWidth += width;
            }
        });
        if (prevWidth) {
            lineCnt = getDPRValue(prevWidth - spaceWidth, true) / colwidth;
            maxCnt = parseFloat((lineCnt).toString().split('.')[0]);
            displayText.push(lineText);
        }
        return displayText;
    };
    /**
     * Get module name.
     *
     * @returns {string} - Returns the module name.
     */
    Print.prototype.getModuleName = function () {
        return 'print';
    };
    /**
     * To destroy the print.
     *
     * @returns {void}
     * @private
     */
    Print.prototype.destroy = function () {
        this.setToDefault();
        this.totalSheetCount = [];
        this.parent = null;
    };
    return Print;
}());

var __extends$a = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate$9 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the Spreadsheet component.
 *
 * ```html
 * <div id='spreadsheet'></div>
 * <script>
 *  let spreadsheetObj = new Spreadsheet();
 *  spreadsheetObj.appendTo('#spreadsheet');
 * </script>
 * ```
 */
var Spreadsheet = /** @class */ (function (_super) {
    __extends$a(Spreadsheet, _super);
    /**
     * Constructor for creating the widget.
     *
     * @param  {SpreadsheetModel} options - Configures Spreadsheet options.
     * @param  {string|HTMLElement} element - Element to render Spreadsheet.
     */
    function Spreadsheet(options, element) {
        var _this = _super.call(this, options) || this;
        /** @hidden */
        _this.viewport = {
            rowCount: 0, colCount: 0, height: 0, topIndex: 0, leftIndex: 0, width: 0,
            bottomIndex: 0, rightIndex: 0, beforeFreezeHeight: 0, beforeFreezeWidth: 0, scaleX: 1, scaleY: 1
        };
        _this.needsID = true;
        Spreadsheet_1.Inject(Ribbon$1, FormulaBar, SheetTabs, Selection, Edit, KeyboardNavigation, KeyboardShortcut, Clipboard, DataBind, Open, ContextMenu, Save, NumberFormat, CellFormat, Formula, WrapText, WorkbookEdit, WorkbookOpen, WorkbookSave, WorkbookCellFormat, WorkbookNumberFormat, WorkbookFormula, Sort, WorkbookSort, Resize, UndoRedo, WorkbookFilter, Filter, SpreadsheetHyperlink, WorkbookHyperlink, Insert, Delete, WorkbookInsert, WorkbookDelete, DataValidation, WorkbookDataValidation, Print, ProtectSheet, WorkbookProtectSheet, FindAndReplace, WorkbookFindAndReplace, Merge, WorkbookMerge, SpreadsheetImage, ConditionalFormatting, WorkbookImage, WorkbookConditionalFormat, SpreadsheetChart, WorkbookChart, AutoFill, WorkbookAutoFill, SpreadsheetNote);
        if (element) {
            _this.appendTo(element);
        }
        return _this;
    }
    Spreadsheet_1 = Spreadsheet;
    /**
     * To get cell element.
     *
     * @param {number} rowIndex - specify the rowIndex.
     * @param {number} colIndex - specify the colIndex.
     * @param {HTMLTableElement} row - specify the row.
     * @returns {HTMLElement} - Get cell element
     * @hidden
     */
    Spreadsheet.prototype.getCell = function (rowIndex, colIndex, row) {
        var td;
        if (this.insideViewport(rowIndex, colIndex)) {
            if (!row) {
                row = this.getRow(rowIndex, null, colIndex);
            }
            colIndex = this.getViewportIndex(colIndex, true);
            td = row ? row.cells[colIndex] : row;
        }
        return td;
    };
    /**
     * Get cell element.
     *
     * @param {number} index - specify the index.
     * @param {HTMLTableElement} table - specify the table.
     * @param {number} colIdx - specify the column index.
     * @returns {HTMLTableRowElement} - Get cell element
     * @hidden
     */
    Spreadsheet.prototype.getRow = function (index, table, colIdx) {
        if (!table) {
            var sheet = this.getActiveSheet();
            var frozenRow = this.frozenRowCount(sheet);
            var frozenCol = this.frozenColCount(sheet);
            if (isNullOrUndefined(colIdx) || index > frozenRow - 1 && colIdx > frozenCol - 1) {
                table = this.getContentTable();
            }
            else {
                table = index < frozenRow && colIdx < frozenCol ? this.sheetModule.getSelectAllTable() : (index < frozenRow ?
                    this.getColHeaderTable() : this.getRowHeaderTable());
            }
        }
        index = this.getViewportIndex(index);
        return table ? table.rows[index] : null;
    };
    /**
     * To get hidden row/column count between two specified index.
     *
     * Set `layout` as `columns` if you want to get column hidden count.
     *
     * @param {number} startIndex - specify the startIndex.
     * @param {number} endIndex - specify the endIndex.
     * @param {string} layout - specify the layout.
     * @param {SheetModel} sheet - specify the sheet.
     * @returns {number} - To get hidden row/column count between two specified index.
     * @hidden
     */
    Spreadsheet.prototype.hiddenCount = function (startIndex, endIndex, layout, sheet) {
        if (layout === void 0) { layout = 'rows'; }
        if (sheet === void 0) { sheet = this.getActiveSheet(); }
        var count = 0;
        var rowColModel;
        for (var i = startIndex; i <= endIndex; i++) {
            rowColModel = sheet["" + layout][i];
            if (rowColModel && rowColModel.hidden) {
                count++;
            }
        }
        return count;
    };
    /**
     * To get row/column viewport index.
     *
     * @param {number} index - specify the index.
     * @param {boolean} isCol - specify the bool value.
     * @returns {number} - To get row/column viewport index.
     * @hidden
     */
    Spreadsheet.prototype.getViewportIndex = function (index, isCol) {
        var sheet = this.getActiveSheet();
        var frozenCol = this.frozenColCount(sheet);
        var frozenRow = this.frozenRowCount(sheet);
        if (isCol) {
            if (frozenCol) {
                var leftIndex = getCellIndexes(sheet.topLeftCell)[1];
                if (index < frozenCol) {
                    index -= this.hiddenCount(leftIndex, index, 'columns');
                    index -= leftIndex;
                    return index + 1;
                }
                else {
                    index -= this.hiddenCount(this.viewport.leftIndex + frozenCol, index, 'columns');
                    index -= (this.viewport.leftIndex + frozenCol);
                    return index;
                }
            }
            else {
                index -= this.hiddenCount(this.viewport.leftIndex, index, 'columns');
                index -= this.viewport.leftIndex;
            }
        }
        else {
            if (frozenRow) {
                var topIndex = getCellIndexes(sheet.topLeftCell)[0];
                if (index < frozenRow) {
                    index -= this.hiddenCount(topIndex, index);
                    index -= topIndex;
                    return index + 1;
                }
                else {
                    index -= this.hiddenCount(this.viewport.topIndex + frozenRow, index);
                    index -= (this.viewport.topIndex + frozenRow);
                    return index;
                }
            }
            else {
                index -= this.hiddenCount(this.viewport.topIndex, index);
                index -= this.viewport.topIndex;
            }
        }
        return index;
    };
    /**
     * To initialize the services;
     *
     * @returns {void} - To initialize the services.
     * @hidden
     */
    Spreadsheet.prototype.preRender = function () {
        _super.prototype.preRender.call(this);
        this.serviceLocator = new ServiceLocator;
        this.initServices();
    };
    Spreadsheet.prototype.initServices = function () {
        this.serviceLocator.register(locale, new L10n(this.getModuleName(), defaultLocale, this.locale));
        this.serviceLocator.register(dialog, new Dialog(this));
        this.serviceLocator.register(actionEvents, new ActionEvents(this));
        this.serviceLocator.register(overlay, new Overlay(this));
    };
    /**
     * To Initialize the component rendering.
     *
     * @returns {void} - To Initialize the component rendering.
     * @hidden
     */
    Spreadsheet.prototype.render = function () {
        _super.prototype.render.call(this);
        this.element.setAttribute('tabindex', '0');
        this.renderModule = new Render(this);
        this.renderSpreadsheet();
        this.wireEvents();
        if (this.created && !this.refreshing) {
            if (this.created.observers) {
                if (this.created.observers.length > 0) {
                    var observerObject = { observers: this.created.observers };
                    if (this.isAngular) {
                        observerObject = { observers: this.created.observers,
                            currentObservers: this.created.observers };
                        this.created.currentObservers = [];
                    }
                    this.createdHandler = observerObject;
                    this.created.observers = [];
                }
            }
            else {
                this.createdHandler = this.created;
                this.setProperties({ created: undefined }, true);
            }
        }
    };
    Spreadsheet.prototype.renderSpreadsheet = function () {
        if (this.cssClass) {
            addClass([this.element], this.cssClass.split(' '));
        }
        this.setHeight();
        this.setWidth();
        createSpinner({ target: this.element }, this.createElement);
        if (this.cssClass && this.cssClass.indexOf('e-mobile-view') === -1 && this.isMobileView()) {
            this.element.classList.add('e-mobile-view');
        }
        if (Browser.isDevice) {
            this.element.classList.add('e-device');
        }
        this.sheetModule = this.serviceLocator.getService('sheet');
        if (this.allowScrolling) {
            this.scrollModule = new Scroll(this);
        }
        if (this.scrollSettings.enableVirtualization) {
            new VirtualScroll(this);
        }
        this.renderModule.render();
        new ShowHide(this);
    };
    /**
     * By default, Spreadsheet shows the spinner for all its actions. To manually show spinner you this method at your needed time.
     *
     * {% codeBlock src='spreadsheet/showSpinner/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - shows spinner
     */
    Spreadsheet.prototype.showSpinner = function () {
        showSpinner(this.element);
    };
    /**
     * To hide showed spinner manually.
     *
     * {% codeBlock src='spreadsheet/hideSpinner/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - To hide showed spinner manually.
     */
    Spreadsheet.prototype.hideSpinner = function () {
        hideSpinner(this.element);
    };
    /**
     * To protect the particular sheet.
     *
     * {% codeBlock src='spreadsheet/protectSheet/index.md' %}{% endcodeBlock %}
     *
     * @param {number | string} sheet - Specifies the sheet to protect.
     * @param {ProtectSettingsModel} protectSettings - Specifies the protect sheet options.
     * @default { selectCells: 'false', formatCells: 'false', formatRows: 'false', formatColumns:'false', insertLink:'false' }
     * @param {string} password - Specifies the password to protect.
     * @returns {void} - To protect the particular sheet.
     */
    Spreadsheet.prototype.protectSheet = function (sheet, protectSettings, password) {
        _super.prototype.protectSheet.call(this, sheet, protectSettings, password);
    };
    /**
     * To unprotect the particular sheet.
     *
     * {% codeBlock src='spreadsheet/unprotectSheet/index.md' %}{% endcodeBlock %}
     *
     * @param {number | string} sheet - Specifies the sheet name or index to Unprotect.
     * @returns {void} - To unprotect the particular sheet.
     */
    Spreadsheet.prototype.unprotectSheet = function (sheet) {
        _super.prototype.unprotectSheet.call(this, sheet);
    };
    /**
     * To find the specified cell value.
     *
     * {% codeBlock src='spreadsheet/find/index.md' %}{% endcodeBlock %}
     *
     * @param {FindOptions} args - Specifies the replace value with find args to replace specified cell value.
     * @param {string} args.value - Specifies the value to be find.
     * @param {string} args.mode - Specifies the value to be find within sheet or workbook.
     * @param {string} args.searchBy - Specifies the value to be find by row or column.
     * @param {boolean} args.isCSen - Specifies the find match with case sensitive or not.
     * @param {boolean} args.isEMatch - Specifies the find match with entire match or not.
     * @param {string} args.findOpt - Specifies the next or previous find match.
     * @param {number} args.sheetIndex - Specifies the current sheet to find.
     * @default { mode: 'Sheet', searchBy: 'By Row', isCSen: 'false', isEMatch:'false' }
     * @returns {void} - To find the specified cell value.
     */
    Spreadsheet.prototype.find = function (args) {
        var activeCell = this.getActiveSheet().activeCell;
        _super.prototype.findHandler.call(this, args);
        if (!args.isAction) {
            if (activeCell !== this.getActiveSheet().activeCell) {
                return this.getActiveSheet().name + '!' + this.getActiveSheet().activeCell;
            }
            else {
                return null;
            }
        }
    };
    /**
     * To replace the specified cell value.
     *
     * {% codeBlock src='spreadsheet/replace/index.md' %}{% endcodeBlock %}
     *
     * @param {FindOptions} args - Specifies the replace value with find args to replace specified cell value.
     * @param {string} args.replaceValue - Specifies the replacing value.
     * @param {string} args.replaceBy - Specifies the value to be replaced for one or all.
     * @param {string} args.value - Specifies the value to be replaced
     * @returns {void} - To replace the specified cell value.
     */
    Spreadsheet.prototype.replace = function (args) {
        args = {
            value: args.value, mode: args.mode ? args.mode : 'Sheet', isCSen: args.isCSen ? args.isCSen : false,
            isEMatch: args.isEMatch ? args.isEMatch : false, searchBy: args.searchBy ? args.searchBy : 'By Row',
            replaceValue: args.replaceValue, replaceBy: args.replaceBy,
            sheetIndex: isUndefined$1(args.sheetIndex) ? this.activeSheetIndex : args.sheetIndex, findOpt: args.findOpt ? args.findOpt : ''
        };
        _super.prototype.replaceHandler.call(this, args);
    };
    /**
     * To Find All the Match values Address within Sheet or Workbook.
     *
     * {% codeBlock src='spreadsheet/findAll/index.md' %}{% endcodeBlock %}
     *
     * @param {string} value - Specifies the value to find.
     * @param {string} mode - Specifies the value to be find within Sheet/Workbook.
     * @param {boolean} isCSen - Specifies the find match with case sensitive or not.
     * @param {boolean} isEMatch - Specifies the find match with entire match or not.
     * @param {number} sheetIndex - Specifies the sheetIndex. If not specified, it will consider the active sheet.
     * @returns {string[]} - To Find All the Match values Address within Sheet or Workbook.
     */
    Spreadsheet.prototype.findAll = function (value, mode, isCSen, isEMatch, sheetIndex) {
        mode = mode ? mode : 'Sheet';
        sheetIndex = sheetIndex < this.sheets.length ? sheetIndex : this.activeSheetIndex;
        isCSen = isCSen ? isCSen : false;
        isEMatch = isEMatch ? isEMatch : false;
        var findCollection = [];
        var findAllArguments = {
            value: value, mode: mode, sheetIndex: sheetIndex, isCSen: isCSen,
            isEMatch: isEMatch, findCollection: findCollection
        };
        this.notify(findAllValues, findAllArguments);
        return findCollection;
    };
    /**
     * Used to navigate to cell address within workbook.
     *
     * {% codeBlock src='spreadsheet/goTo/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the cell address you need to navigate.
     * You can specify the address in two formats,
     * `{sheet name}!{cell address}` - Switch to specified sheet and navigate to specified cell address.
     * `{cell address}` - Navigate to specified cell address with in the active sheet.
     * @returns {void} - Used to navigate to cell address within workbook.
     */
    Spreadsheet.prototype.goTo = function (address) {
        if (address.includes('!')) {
            var idx = getSheetIndex(this, getSheetNameFromAddress(address));
            if (idx === undefined) {
                return;
            }
            if (idx !== this.activeSheetIndex) {
                var selectRange_1 = address.substring(address.lastIndexOf('!') + 1);
                var activeCell = selectRange_1.split(':')[0];
                var sheet_1 = this.sheets[idx];
                this.setSheetPropertyOnMute(sheet_1, 'activeCell', activeCell);
                this.setSheetPropertyOnMute(sheet_1, 'selectedRange', selectRange_1);
                var cellIndex = getCellIndexes(activeCell);
                if (sheet_1.frozenColumns || sheet_1.frozenRows) {
                    var topLeftCell = getCellIndexes(sheet_1.topLeftCell);
                    if (!((sheet_1.frozenRows && cellIndex[0] < topLeftCell[0]) || (sheet_1.frozenColumns && cellIndex[1] < topLeftCell[1]))) {
                        var frozenRow_1 = this.frozenRowCount(sheet_1);
                        var frozenCol_1 = this.frozenColCount(sheet_1);
                        var curCell = [];
                        var paneCell = [];
                        var paneTopLeftCell = getCellIndexes(sheet_1.paneTopLeftCell);
                        if (frozenRow_1) {
                            curCell.push(topLeftCell[0]);
                            if (cellIndex[0] >= frozenRow_1) {
                                paneCell.push(cellIndex[0]);
                            }
                            else {
                                paneCell.push(paneTopLeftCell[0]);
                            }
                        }
                        else {
                            curCell.push(cellIndex[0]);
                            paneCell.push(cellIndex[0]);
                        }
                        if (frozenCol_1) {
                            curCell.push(topLeftCell[1]);
                            if (cellIndex[1] >= frozenCol_1) {
                                paneCell.push(cellIndex[1]);
                            }
                            else {
                                paneCell.push(paneTopLeftCell[1]);
                            }
                        }
                        else {
                            curCell.push(cellIndex[1]);
                            paneCell.push(cellIndex[1]);
                        }
                        this.setSheetPropertyOnMute(sheet_1, 'topLeftCell', getCellAddress(curCell[0], curCell[1]));
                        this.setSheetPropertyOnMute(sheet_1, 'paneTopLeftCell', getCellAddress(paneCell[0], paneCell[1]));
                    }
                }
                else {
                    if (cellIndex[0] < this.viewport.rowCount) {
                        cellIndex[0] = 0;
                    }
                    if (cellIndex[1] < this.viewport.colCount) {
                        cellIndex[1] = 0;
                    }
                    this.updateTopLeftCell(cellIndex[0], cellIndex[1], null, sheet_1);
                }
                this.activeSheetIndex = idx;
                this.dataBind();
                return;
            }
        }
        var indexes = getRangeIndexes(address);
        var sheet = this.getActiveSheet();
        var frozenRow = this.frozenRowCount(sheet);
        var frozenCol = this.frozenColCount(sheet);
        var insideDomCount = this.insideViewport(indexes[0], indexes[1]);
        if (insideDomCount) {
            this.selectRange(address);
            var viewportIndexes = getCellIndexes(sheet.paneTopLeftCell);
            var viewportSize = this.viewport.height;
            if (this.allowScrolling) {
                viewportSize -= this.getScrollElement().parentElement.getBoundingClientRect().height;
            }
            var threshold = 0;
            var lastRowIdx = 0;
            if (frozenRow) {
                var topLeftIndexes = getCellIndexes(sheet.topLeftCell);
                for (var i = topLeftIndexes[0]; i < frozenRow; i++) {
                    threshold += getRowHeight(sheet, i);
                    if (threshold > viewportSize) {
                        lastRowIdx = i;
                        break;
                    }
                }
            }
            if (lastRowIdx === 0) {
                for (var i = viewportIndexes[0]; i <= this.viewport.bottomIndex; i++) {
                    threshold += getRowHeight(sheet, i);
                    if (threshold > viewportSize) {
                        lastRowIdx = i;
                        break;
                    }
                    else if (i === this.viewport.bottomIndex) {
                        lastRowIdx = this.viewport.bottomIndex;
                    }
                }
            }
            viewportIndexes[2] = lastRowIdx;
            var lastColIdx = 0;
            threshold = 0;
            viewportSize = this.viewport.width - this.sheetModule.getScrollSize();
            if (frozenCol) {
                var topLeftIndexes = getCellIndexes(sheet.topLeftCell);
                for (var i = topLeftIndexes[1]; i < frozenCol; i++) {
                    threshold += getColumnWidth(sheet, i);
                    if (threshold > viewportSize) {
                        lastColIdx = i;
                        break;
                    }
                }
            }
            if (lastColIdx === 0) {
                for (var i = viewportIndexes[1]; i <= this.viewport.rightIndex; i++) {
                    threshold += getColumnWidth(sheet, i);
                    if (threshold > viewportSize) {
                        lastColIdx = i;
                        break;
                    }
                    else if (i === this.viewport.rightIndex) {
                        lastColIdx = this.viewport.rightIndex;
                    }
                }
            }
            viewportIndexes[3] = lastColIdx;
            if (indexes[0] >= viewportIndexes[0] && indexes[0] < viewportIndexes[2] && indexes[1] >= viewportIndexes[1] &&
                indexes[1] < viewportIndexes[3]) {
                return;
            }
            if (frozenRow || frozenCol) {
                viewportIndexes = [].concat(getCellIndexes(sheet.topLeftCell), [frozenRow, viewportIndexes[3]]);
                if (indexes[0] >= viewportIndexes[0] && indexes[0] < viewportIndexes[2] && indexes[1] >= viewportIndexes[1] &&
                    indexes[1] < viewportIndexes[3]) {
                    return;
                }
                viewportIndexes[2] = lastRowIdx;
                viewportIndexes[3] = frozenCol;
                if (indexes[0] >= viewportIndexes[0] && indexes[0] < viewportIndexes[2] && indexes[1] >= viewportIndexes[1] &&
                    indexes[1] < viewportIndexes[3]) {
                    return;
                }
            }
        }
        var content = this.getMainContent().parentElement;
        var vTrack;
        var cVTrack;
        var offset;
        var vWidth;
        var vHeight;
        var scrollableSize;
        if (indexes[0] === frozenRow) {
            offset = 0;
        }
        else {
            offset = getRowsHeight(sheet, frozenRow, indexes[0] - 1, true);
            if (this.scrollSettings.enableVirtualization) {
                scrollableSize = offset + this.getContentTable().getBoundingClientRect().height;
                vHeight = parseFloat(content.querySelector('.e-virtualtrack').style.height);
                if (scrollableSize > vHeight) {
                    scrollableSize += 10;
                    vTrack = content.querySelector('.e-virtualtrack');
                    vTrack.style.height = scrollableSize + "px";
                    getUpdateUsingRaf(function () { vTrack.style.height = vHeight + "px"; });
                }
            }
        }
        content.scrollTop = offset;
        content = this.element.getElementsByClassName('e-scroller')[0];
        if (indexes[1] === frozenCol) {
            offset = 0;
        }
        else {
            offset = getColumnsWidth(sheet, frozenCol, indexes[1] - 1, true);
            if (this.scrollSettings.enableVirtualization) {
                scrollableSize = offset + this.getContentTable().getBoundingClientRect().width;
                vWidth = parseFloat(content.querySelector('.e-virtualtrack').style.width);
                if (scrollableSize > vWidth) {
                    scrollableSize += 10;
                    vTrack = content.querySelector('.e-virtualtrack');
                    vTrack.style.width = scrollableSize + "px";
                    cVTrack = this.getColumnHeaderContent().querySelector('.e-virtualtrack');
                    cVTrack.style.width = scrollableSize + "px";
                    vTrack = this.getMainContent().querySelector('.e-virtualtrack');
                    vTrack.style.width = scrollableSize + "px";
                    getUpdateUsingRaf(function () {
                        vTrack.style.width = vWidth + "px";
                        cVTrack.style.width = vWidth + "px";
                    });
                }
            }
        }
        content.scrollLeft = offset;
        if (!insideDomCount) {
            this.selectRange(address);
        }
    };
    /**
     * @hidden
     * @param {number} rowIndex - Specifies the row index.
     * @param {number} colIndex - Specifies the column index.
     * @returns {boolean} - Specifies the boolean value.
     */
    Spreadsheet.prototype.insideViewport = function (rowIndex, colIndex) {
        var sheet = this.getActiveSheet();
        if (sheet.frozenRows || sheet.frozenColumns) {
            var frozenRow = this.frozenRowCount(sheet);
            var frozenCol = this.frozenColCount(sheet);
            var indexes = getCellIndexes(sheet.topLeftCell);
            return ((rowIndex >= indexes[0] && rowIndex < frozenRow) || (rowIndex >= this.viewport.topIndex + frozenRow && rowIndex <=
                this.viewport.bottomIndex)) && ((colIndex >= indexes[1] && colIndex < frozenCol) || (colIndex >= this.viewport.leftIndex +
                frozenCol && colIndex <= this.viewport.rightIndex));
        }
        else {
            return rowIndex >= this.viewport.topIndex && rowIndex <= this.viewport.bottomIndex && colIndex >= this.viewport.leftIndex &&
                colIndex <= this.viewport.rightIndex;
        }
    };
    /**
     * Used to resize the Spreadsheet.
     *
     * {% codeBlock src='spreadsheet/resize/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - Used to resize the Spreadsheet.
     */
    Spreadsheet.prototype.resize = function () {
        this.renderModule.setSheetPanelSize();
        if (this.scrollSettings.enableVirtualization) {
            this.renderModule.refreshSheet(false, true);
        }
    };
    /**
     * To cut the specified cell or cells properties such as value, format, style etc...
     *
     * {% codeBlock src='spreadsheet/cut/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the range address to cut.
     * @returns {Promise<Object>} - To cut the specified cell or cells properties such as value, format, style etc...
     */
    Spreadsheet.prototype.cut = function (address) {
        var promise = new Promise(function (resolve) { resolve((function () { })()); });
        this.notify(cut, address ? {
            range: getIndexesFromAddress(address),
            sId: this.sheets[getSheetIndex(this, getSheetNameFromAddress(address))] ?
                this.sheets[getSheetIndex(this, getSheetNameFromAddress(address))].id : this.getActiveSheet().id,
            promise: promise, invokeCopy: true, isPublic: true
        } : { promise: promise, invokeCopy: true, isPublic: true });
        return promise;
    };
    /**
     * To copy the specified cell or cells properties such as value, format, style etc...
     *
     * {% codeBlock src='spreadsheet/copy/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the range address.
     * @returns {Promise<Object>} - To copy the specified cell or cells properties such as value, format, style etc...
     */
    Spreadsheet.prototype.copy = function (address) {
        var promise = new Promise(function (resolve) { resolve((function () { })()); });
        this.notify(copy, address ? {
            range: getIndexesFromAddress(address),
            sId: this.sheets[getSheetIndex(this, getSheetNameFromAddress(address))] ?
                this.sheets[getSheetIndex(this, getSheetNameFromAddress(address))].id : this.getActiveSheet().id,
            promise: promise, invokeCopy: true, isPublic: true
        } : { promise: promise, invokeCopy: true, isPublic: true });
        return promise;
    };
    /**
     * This method is used to paste the cut or copied cells in to specified address.
     *
     * {% codeBlock src='spreadsheet/paste/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the cell or range address.
     * @param {PasteSpecialType} type - Specifies the type of paste.
     * @returns {void} - used to paste the cut or copied cells in to specified address.
     */
    Spreadsheet.prototype.paste = function (address, type) {
        this.notify(paste, {
            range: address ? getIndexesFromAddress(address) : address,
            sIdx: address ? getSheetIndex(this, getSheetNameFromAddress(address)) : address,
            type: type, isAction: true, isInternal: true
        });
    };
    /**
     * To update the action which need to perform.
     *
     * {% codeBlock src='spreadsheet/updateAction/index.md' %}{% endcodeBlock %}
     *
     * @param {string} options - It describes an action and event args to perform.
     * @param {string} options.action - specifies an action.
     * @param {string} options.eventArgs - specifies an args to perform an action.
     * @returns {void} - To update the action which need to perform.
     */
    Spreadsheet.prototype.updateAction = function (options) {
        updateAction(options, this);
    };
    Spreadsheet.prototype.setHeight = function () {
        if (this.height) {
            if (this.height.toString().indexOf('%') > -1) {
                this.element.style.minHeight = '400px';
            }
            this.element.style.height = formatUnit(this.height);
        }
    };
    Spreadsheet.prototype.setWidth = function () {
        if (this.width) {
            if (this.width.toString().indexOf('%') > -1 || this.width === 'auto') {
                this.element.style.minWidth = '300px';
            }
            this.element.style.width = formatUnit(this.width);
        }
    };
    /**
     * Set the width of column.
     *
     * {% codeBlock src='spreadsheet/setColWidth/index.md' %}{% endcodeBlock %}
     *
     * @param {number} width - To specify the width
     * @param {number} colIndex - To specify the colIndex
     * @param {number} sheetIndex - To specify the sheetIndex
     * @returns {void} - Set the width of column.
     */
    Spreadsheet.prototype.setColWidth = function (width, colIndex, sheetIndex) {
        if (width === void 0) { width = 64; }
        if (colIndex === void 0) { colIndex = 0; }
        var sheet = isNullOrUndefined(sheetIndex) ? this.getActiveSheet() : this.sheets[sheetIndex];
        if (sheet && (!sheet.isProtected || sheet.protectSettings.formatColumns)) {
            var mIndex_1 = colIndex;
            var colWidth_1 = (typeof width === 'number') ? width + 'px' : width;
            colIndex = isNullOrUndefined(colIndex) ? getCellIndexes(sheet.activeCell)[1] : colIndex;
            var setColModel = function () {
                getColumn(sheet, mIndex_1).width = parseInt(colWidth_1, 10) > 0 ? parseInt(colWidth_1, 10) : 0;
                sheet.columns[mIndex_1].customWidth = true;
            };
            var frozenCol = this.frozenColCount(sheet);
            if (sheet.id === this.getActiveSheet().id) {
                if ((colIndex >= this.viewport.leftIndex + frozenCol && colIndex <= this.viewport.rightIndex) ||
                    (frozenCol && colIndex < frozenCol)) {
                    colIndex = this.getViewportIndex(colIndex, true);
                    var eleWidth = getColumnWidth(sheet, mIndex_1, null, true);
                    var threshold = getDPRValue(parseInt(colWidth_1, 10)) - eleWidth;
                    if (threshold < 0 && eleWidth < -(threshold)) {
                        threshold = -eleWidth;
                    }
                    setColModel();
                    this.notify(colWidthChanged, { threshold: threshold, colIdx: mIndex_1, checkWrapCell: true });
                    setResize(mIndex_1, colIndex, colWidth_1, true, this);
                }
                else {
                    var oldWidth = getColumnWidth(sheet, colIndex);
                    var threshold = void 0;
                    if (parseInt(colWidth_1, 10) > 0) {
                        threshold = -(oldWidth - parseInt(colWidth_1, 10));
                    }
                    else {
                        threshold = -oldWidth;
                    }
                    setColModel();
                    this.notify(colWidthChanged, { threshold: threshold, colIdx: colIndex });
                }
                this.notify(positionAutoFillElement, null);
            }
            else {
                setColModel();
            }
        }
    };
    /**
     * Set the height of row.
     *
     * {% codeBlock src='spreadsheet/setRowHeight/index.md' %}{% endcodeBlock %}
     *
     * @param {number} height - Specifies height needs to be updated. If not specified, it will set the default height 20.
     * @param {number} rowIndex - Specifies the row index. If not specified, it will consider the first row.
     * @param {number} sheetIndex - Specifies the sheetIndex. If not specified, it will consider the active sheet.
     * @param {boolean} edited - Specifies the boolean value.
     * @param {boolean} skipCustomRow - When this parameter is enabled, the method will skip updating the row height if it has already been modified and its 'customHeight' property is set to true.
     * @returns {void} - Set the height of row.
     */
    Spreadsheet.prototype.setRowHeight = function (height, rowIndex, sheetIndex, edited, skipCustomRow) {
        if (height === void 0) { height = 20; }
        if (rowIndex === void 0) { rowIndex = 0; }
        var sheet = isNullOrUndefined(sheetIndex) ? this.getActiveSheet() : this.sheets[sheetIndex];
        if (sheet) {
            var mIndex_2 = rowIndex;
            rowIndex = isNullOrUndefined(rowIndex) ? getCellIndexes(sheet.activeCell)[0] : rowIndex;
            if (skipCustomRow && sheet.rows[rowIndex] && sheet.rows[rowIndex].customHeight) {
                return;
            }
            var rowHeight_1 = (typeof height === 'number') ? height + 'px' : height;
            var setRowModel = function () {
                setRowHeight(sheet, mIndex_2, parseInt(rowHeight_1, 10) > 0 ? parseInt(rowHeight_1, 10) : 0);
                sheet.rows[mIndex_2].customHeight = true;
            };
            if (sheet.id === this.getActiveSheet().id) {
                var frozenRow = this.frozenRowCount(sheet);
                if ((rowIndex >= this.viewport.topIndex + frozenRow && rowIndex <= this.viewport.bottomIndex) ||
                    (frozenRow && rowIndex < frozenRow)) {
                    rowIndex = this.getViewportIndex(mIndex_2);
                    var eleHeight = getRowHeight(sheet, mIndex_2, true);
                    var threshold = getDPRValue(parseInt(rowHeight_1, 10)) - eleHeight;
                    if (threshold < 0 && eleHeight < -(threshold)) {
                        threshold = -eleHeight;
                    }
                    setRowModel();
                    this.notify(rowHeightChanged, { threshold: threshold, rowIdx: mIndex_2, isCustomHgt: true });
                    if (isNullOrUndefined(edited)) {
                        edited = false;
                    }
                    if (!edited) {
                        setResize(mIndex_2, rowIndex, rowHeight_1, false, this);
                        edited = false;
                    }
                }
                else {
                    var oldHeight = getRowHeight(sheet, rowIndex);
                    var threshold = void 0;
                    if (parseInt(rowHeight_1, 10) > 0) {
                        threshold = -(oldHeight - parseInt(rowHeight_1, 10));
                    }
                    else {
                        threshold = -oldHeight;
                    }
                    setRowModel();
                    this.notify(rowHeightChanged, { threshold: threshold, rowIdx: mIndex_2 });
                }
                this.notify(positionAutoFillElement, null);
            }
            else {
                setRowModel();
            }
        }
    };
    /**
     * Allows you to set the height to the single or multiple rows.
     *
     * @param {number} height - Specifies the height for row.
     * @param {string[]} ranges - Specifies the row range to set the height. If the sheet name is not specified then height will apply to
     * the rows in the active sheet. Possible values are
     * * Single row range: ['2'] or ['2:2']
     * * Multiple rows range: ['1:100']
     * * Multiple rows with discontinuous range - ['1:10', '15:25', '30:40']
     * * Multiple rows with different sheets - ['Sheet1!1:50', 'Sheet2!1:50', 'Sheet3!1:50'].
     * @param {boolean} skipCustomRows - When this parameter is enabled, it will skip updating the heights of rows where the height has already been modified, and its 'customHeight' property is set to true.
     * @returns {void}
     */
    Spreadsheet.prototype.setRowsHeight = function (height, ranges, skipCustomRows) {
        if (height === void 0) { height = 20; }
        if (!ranges) {
            ranges = [1 + ":" + (this.getActiveSheet().usedRange.rowIndex + 1)];
        }
        this.setSize(height, ranges, function (idx) { return Number(idx) - 1; }, this.setRowHeight.bind(this), skipCustomRows);
    };
    /**
     * Allows you to set the width to the single or multiple columns.
     *
     * @param {number} width - Specifies the width for column.
     * @param {string[]} ranges - Specifies the column range to set the width. If the sheet name is not specified then width will apply to
     * the column in the active sheet. Possible values are
     * * Single column range: ['F'] or ['F:F']
     * * Multiple columns range: ['A:F']
     * * Multiple columns with discontinuous range - ['A:C', 'G:I', 'K:M']
     * * Multiple columns with different sheets - ['Sheet1!A:H', 'Sheet2!A:H', 'Sheet3!A:H'].
     * @returns {void}
     */
    Spreadsheet.prototype.setColumnsWidth = function (width, ranges) {
        if (width === void 0) { width = 64; }
        if (!ranges) {
            ranges = ["A:" + getColumnHeaderText(this.getActiveSheet().usedRange.colIndex + 1)];
        }
        this.setSize(width, ranges, function (headerText) { return getColIndex(headerText); }, this.setColWidth.bind(this));
    };
    Spreadsheet.prototype.setSize = function (width, ranges, getIndex, updateSize, skipCustomRows) {
        var _this = this;
        var sheetIdx;
        var rangeArr;
        var sheetName;
        var startIdx;
        var endIdx;
        ranges.forEach(function (range) {
            if (range.includes('!')) {
                sheetName = range.substring(0, range.lastIndexOf('!'));
                sheetIdx = getSheetIndex(_this, sheetName);
                range = range.substring(range.lastIndexOf('!') + 1);
            }
            else {
                sheetIdx = _this.activeSheetIndex;
            }
            if (range.includes(':')) {
                rangeArr = range.split(':');
                startIdx = getIndex(rangeArr[0]);
                endIdx = getIndex(rangeArr[1]);
            }
            else {
                startIdx = endIdx = getIndex(range);
            }
            for (var idx = startIdx; idx <= endIdx; idx++) {
                updateSize(width, idx, sheetIdx, false, skipCustomRows);
            }
        });
    };
    /**
     * This method is used to autofit the range of rows or columns
     *
     * {% codeBlock src='spreadsheet/autoFit/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - range of rows or columns that needs to be autofit.
     *
     * @returns {void} - used to autofit the range of rows or columns
     * ```html
     * <div id='Spreadsheet'></div>
     * ```
     * ```typescript
     * let spreadsheet = new Spreadsheet({
     *      allowResizing: true
     * ...
     * }, '#Spreadsheet');
     * spreadsheet.autoFit('A:D'); // Auto fit from A to D columns
     * Spreadsheet.autoFit('1:4'); // Auto fit from 1 to 4 rows
     *
     * ```
     */
    Spreadsheet.prototype.autoFit = function (range) {
        var sheetIdx;
        if (range.indexOf('!') !== -1) {
            sheetIdx = getSheetIndex(this, range.substring(0, range.lastIndexOf('!')));
            range = range.substring(range.lastIndexOf('!') + 1);
        }
        var values = this.getIndexes(range);
        var startIdx = values.startIdx;
        var endIdx = values.endIdx;
        var isCol = values.isCol;
        var maximumColInx = isCol ? getColIndex('XFD') : 1048576;
        if (startIdx <= maximumColInx) {
            if (endIdx > maximumColInx) {
                endIdx = maximumColInx;
            }
        }
        else {
            return;
        }
        for (startIdx; startIdx <= endIdx; startIdx++) {
            this.notify(setAutoFit, { idx: startIdx, isCol: isCol, sheetIdx: sheetIdx });
        }
    };
    /**
     * @hidden
     * @param {string} range - specify the range.
     * @returns {number | boolean} - to get the index.
     *
     */
    Spreadsheet.prototype.getIndexes = function (range) {
        var startIsCol;
        var endIsCol;
        var start;
        var end;
        if (range.indexOf(':') !== -1) {
            var starttoend = range.split(':');
            start = starttoend[0];
            end = starttoend[1];
        }
        else {
            start = range;
            end = range;
        }
        if (!isNullOrUndefined(start)) {
            var startValues = this.getAddress(start);
            start = startValues.address;
            startIsCol = startValues.isCol;
        }
        if (!isNullOrUndefined(end)) {
            var endValues = this.getAddress(end);
            end = endValues.address;
            endIsCol = endValues.isCol;
        }
        var isCol = startIsCol === true && endIsCol === true ? true : false;
        var startIdx = isCol ? getColIndex(start.toUpperCase()) : parseInt(start, 10);
        var endIdx = isCol ? getColIndex(end.toUpperCase()) : parseInt(end, 10);
        return { startIdx: startIdx, endIdx: endIdx, isCol: isCol };
    };
    Spreadsheet.prototype.getAddress = function (address) {
        var isCol;
        if (address.substring(0, 1).match(/\D/g)) {
            isCol = true;
            address = address.replace(/[0-9]/g, '');
            return { address: address, isCol: isCol };
        }
        else if (address.substring(0, 1).match(/[0-9]/g) && address.match(/\D/g)) {
            return { address: '', isCol: false };
        }
        else {
            address = (parseInt(address, 10) - 1).toString();
            return { address: address, isCol: isCol };
        }
    };
    /**
     * To add the hyperlink in the cell
     *
     * {% codeBlock src='spreadsheet/addHyperlink/index.md' %}{% endcodeBlock %}
     *
     * @param {string | HyperlinkModel} hyperlink - to specify the hyperlink
     * @param {string} address - to specify the address
     * @param {string} displayText - to specify the text to be displayed, by default value of the cell will be displayed.
     * @returns {void} - To add the hyperlink in the cell
     */
    Spreadsheet.prototype.addHyperlink = function (hyperlink, address, displayText) {
        this.insertHyperlink(hyperlink, address, displayText, true);
    };
    /**
     * To remove the hyperlink in the cell
     *
     * {% codeBlock src='spreadsheet/removeHyperlink/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - To specify the range
     * @returns {void} - To remove the hyperlink in the cell
     */
    Spreadsheet.prototype.removeHyperlink = function (range) {
        this.notify(removeHyperlink, { range: range, preventEventTrigger: true });
    };
    /**
     * @hidden
     * @param {string | HyperlinkModel} hyperlink - specify the hyperlink
     * @param {string} address - To specify the address
     * @param {string} displayText - To specify the displayText
     * @param {boolean} isMethod - To specify the bool value
     * @returns {void} - to insert the hyperlink
     */
    Spreadsheet.prototype.insertHyperlink = function (hyperlink, address, displayText, isMethod) {
        if (this.allowHyperlink) {
            var sheetName = void 0;
            var sheetIdx = void 0;
            var cellIdx = void 0;
            var sheet = this.getActiveSheet();
            address = address ? address : sheet.name + '!' + sheet.activeCell;
            cellIdx = getRangeIndexes(address);
            if (isReadOnlyCells(this, cellIdx)) {
                this.notify(readonlyAlert, null);
                return;
            }
            var prevELem = this.getCell(cellIdx[0], cellIdx[1]);
            var classList = [];
            for (var i = 0; prevELem && i < prevELem.classList.length; i++) {
                classList.push(prevELem.classList[i]);
            }
            var befArgs = { hyperlink: hyperlink, address: address, displayText: displayText, cancel: false };
            var aftArgs = { hyperlink: hyperlink, address: address, displayText: displayText };
            if (!isMethod) {
                this.trigger(beforeHyperlinkCreate, befArgs);
                this.notify(beginAction, { action: 'hyperlink', eventArgs: befArgs });
            }
            if (!befArgs.cancel) {
                hyperlink = befArgs.hyperlink;
                address = befArgs.address;
                var args = {
                    hyperlink: hyperlink, cell: address, displayText: displayText, triggerEvt: !isMethod
                };
                this.notify(setLinkModel, args);
                if (address && address.lastIndexOf('!') !== -1) {
                    var lastIndex = address.lastIndexOf('!');
                    sheetName = address.substring(0, lastIndex);
                    var sheets = this.sheets;
                    for (var idx = 0; idx < sheets.length; idx++) {
                        if (sheets[idx].name === sheetName) {
                            sheetIdx = idx;
                        }
                    }
                    sheet = this.sheets[sheetIdx];
                    address = address.substring(lastIndex + 1);
                }
                if (!sheet) {
                    return;
                }
                address = address ? address : this.getActiveSheet().activeCell;
                cellIdx = getRangeIndexes(address);
                if (!isMethod) {
                    this.trigger(afterHyperlinkCreate, aftArgs);
                    this.notify(completeAction, { action: 'hyperlink', eventArgs: befArgs });
                }
                if (sheet === this.getActiveSheet()) {
                    this.serviceLocator.getService('cell').refreshRange(cellIdx, false, false, false, true, isImported(this));
                    for (var i = 0; i < classList.length; i++) {
                        if (!this.getCell(cellIdx[0], cellIdx[1]).classList.contains(classList[i])) {
                            this.getCell(cellIdx[0], cellIdx[1]).classList.add(classList[i]);
                        }
                    }
                    this.notify(refreshRibbonIcons, null);
                }
            }
        }
    };
    /**
     * This method is used to add data validation.
     *
     * {% codeBlock src='spreadsheet/addDataValidation/index.md' %}{% endcodeBlock %}
     *
     * @param {ValidationModel} rules - specifies the validation rules like type, operator, value1, value2, ignoreBlank, inCellDropDown, isHighlighted arguments.
     * @param {string} range - range that needs to be add validation.
     * @returns {void} - used to add data validation.
     */
    Spreadsheet.prototype.addDataValidation = function (rules, range) {
        _super.prototype.addDataValidation.call(this, rules, range);
    };
    /**
     * This method is used for remove validation.
     *
     * {% codeBlock src='spreadsheet/removeDataValidation/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - range that needs to be remove validation.
     * @returns {void} - This method is used for remove validation.
     */
    Spreadsheet.prototype.removeDataValidation = function (range) {
        _super.prototype.removeDataValidation.call(this, range);
    };
    /**
     * This method is used to highlight the invalid data.
     *
     * {% codeBlock src='spreadsheet/addInvalidHighlight/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - range that needs to be highlight the invalid data.
     * @returns {void} - This method is used to highlight the invalid data.
     */
    Spreadsheet.prototype.addInvalidHighlight = function (range) {
        _super.prototype.addInvalidHighlight.call(this, range);
    };
    /**
     * This method is used for remove highlight from invalid data.
     *
     * {% codeBlock src='spreadsheet/removeInvalidHighlight/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - range that needs to be remove invalid highlight.
     * @returns {void} - This method is used for remove highlight from invalid data.
     */
    Spreadsheet.prototype.removeInvalidHighlight = function (range) {
        _super.prototype.removeInvalidHighlight.call(this, range);
    };
    /**
     * This method is used to add conditional formatting.
     *
     * {% codeBlock src='spreadsheet/conditionalFormat/index.md' %}{% endcodeBlock %}
     *
     * @param {ConditionalFormatModel} conditionalFormat - Specify the conditionalFormat.
     * @returns {void} - used to add conditional formatting.
     */
    Spreadsheet.prototype.conditionalFormat = function (conditionalFormat) {
        _super.prototype.conditionalFormat.call(this, conditionalFormat);
    };
    /**
     * This method is used for remove conditional formatting.
     *
     * {% codeBlock src='spreadsheet/clearConditionalFormat/index.md' %}{% endcodeBlock %}
     *
     * @param {string} range - range that needs to be remove conditional formatting.
     * @returns {void} - used for remove conditional formatting.
     */
    Spreadsheet.prototype.clearConditionalFormat = function (range) {
        range = range || this.getActiveSheet().selectedRange;
        _super.prototype.clearConditionalFormat.call(this, range);
    };
    /**
     * @hidden
     * @returns {void} - set Panel Size.
     */
    Spreadsheet.prototype.setPanelSize = function () {
        if (this.height !== 'auto') {
            var panel = document.getElementById(this.element.id + '_sheet_panel');
            panel.style.height = (this.element.getBoundingClientRect().height * this.viewport.scaleY) -
                getSiblingsHeight(panel, null, this.viewport.scaleY) + "px";
        }
    };
    /**
     * Opens the Excel file.
     *
     * {% codeBlock src='spreadsheet/open/index.md' %}{% endcodeBlock %}
     *
     * @param {OpenOptions} options - Options for opening the excel file.
     * @returns {void} - Open the Excel file.
     */
    Spreadsheet.prototype.open = function (options) {
        this.isOpen = true;
        _super.prototype.open.call(this, options);
        if (this.isOpen) {
            this.showSpinner();
        }
    };
    /**
     * Used to hide/show the rows in spreadsheet.
     *
     * @param {number} startIndex - Specifies the start row index.
     * @param {number} endIndex - Specifies the end row index.
     * @param {boolean} hide - To hide/show the rows in specified range.
     * @returns {void} - To hide/show the rows in spreadsheet.
     */
    Spreadsheet.prototype.hideRow = function (startIndex, endIndex, hide) {
        if (endIndex === void 0) { endIndex = startIndex; }
        if (hide === void 0) { hide = true; }
        if (this.renderModule) {
            this.notify(hideShow, { startIndex: startIndex, endIndex: endIndex, hide: hide, actionUpdate: false });
        }
        else {
            _super.prototype.hideRow.call(this, startIndex, endIndex, hide);
        }
    };
    /**
     * Used to hide/show the columns in spreadsheet.
     *
     * @param {number} startIndex - Specifies the start column index.
     * @param {number} endIndex - Specifies the end column index.
     * @param {boolean} hide - Set `true` / `false` to hide / show the columns.
     * @returns {void} - To hide/show the columns in spreadsheet.
     */
    Spreadsheet.prototype.hideColumn = function (startIndex, endIndex, hide) {
        if (endIndex === void 0) { endIndex = startIndex; }
        if (hide === void 0) { hide = true; }
        if (this.renderModule) {
            this.notify(hideShow, { startIndex: startIndex, endIndex: endIndex, hide: hide, isCol: true, actionUpdate: false });
        }
        else {
            _super.prototype.hideColumn.call(this, startIndex, endIndex, hide);
        }
    };
    /**
     * This method is used to Clear contents, formats and hyperlinks in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/clear/index.md' %}{% endcodeBlock %}
     *
     * @param {ClearOptions} options - Options for clearing the content, formats and hyperlinks in spreadsheet.
     * @returns {void} -  Used to Clear contents, formats and hyperlinks in spreadsheet
     */
    Spreadsheet.prototype.clear = function (options) {
        this.notify(clearViewer, { options: options });
    };
    /**
     * Used to refresh the spreadsheet in UI level.
     *
     * {% codeBlock src='spreadsheet/refresh/index.md' %}{% endcodeBlock %}
     *
     * @param {boolean} isNew - Specifies `true` / `false` to create new workbook in spreadsheet.
     * @returns {void} -  Used to refresh the spreadsheet.
     */
    Spreadsheet.prototype.refresh = function (isNew) {
        var _this = this;
        if (this.isReact) {
            this['clearTemplate']();
        }
        if (isNew) {
            this.notify(clearCopy, null);
            this.sheets.length = 0;
            this.sheetNameCount = 1;
            this.notify(sheetsDestroyed, {});
            this.notify(clearUndoRedoCollection, null);
            this.createSheet();
            this.activeSheetIndex = this.sheets.length - 1;
            this.notify(refreshSheetTabs, null);
            this.notify(workbookFormulaOperation, { action: 'initSheetInfo' });
            this.renderModule.refreshSheet();
        }
        else {
            if (this.createdHandler) {
                var refreshFn_1 = function () {
                    _this.off(spreadsheetCreated, refreshFn_1);
                    _this.refresh();
                };
                this.on(spreadsheetCreated, refreshFn_1, this);
            }
            else {
                this.notify(deInitProperties, {});
                _super.prototype.refresh.call(this);
            }
        }
    };
    /**
     * Used to set the image in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/insertImage/index.md' %}{% endcodeBlock %}
     *
     * @param {ImageModel} images - Specifies the options to insert image in spreadsheet.
     * @param {string} range - Specifies the range in spreadsheet.
     * @returns {void} -  Used to set the image in spreadsheet.
     */
    Spreadsheet.prototype.insertImage = function (images, range) {
        var i;
        for (i = 0; i < images.length; i++) {
            this.notify(createImageElement, {
                options: images[i],
                range: range ? range : this.getActiveSheet().selectedRange, isPublic: true
            });
        }
    };
    /**
     * Used to delete the image in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/deleteImage/index.md' %}{% endcodeBlock %}
     *
     * @param {string} id - Specifies the id of the image element to be deleted.
     * @param {string} range - Specifies the range in spreadsheet.
     * @returns {void} - Used to delete the image in spreadsheet.
     */
    Spreadsheet.prototype.deleteImage = function (id, range) {
        this.notify(deleteImage, { id: id, range: range ? range : this.getActiveSheet().selectedRange });
    };
    /**
     * Gets the row header div of the Spreadsheet.
     *
     * @returns {Element} - Gets the row header div of the Spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getRowHeaderContent = function () {
        return this.sheetModule.getRowHeaderPanel();
    };
    /**
     * Gets the column header div of the Spreadsheet.
     *
     * @returns {HTMLElement} - Gets the column header div of the Spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getColumnHeaderContent = function () {
        return this.sheetModule.getColHeaderPanel();
    };
    /**
     * Gets the main content div of the Spreadsheet.
     *
     * @returns {HTMLElement} - Gets the main content div of the Spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getMainContent = function () {
        return this.sheetModule.getContentPanel();
    };
    /**
     * Get the select all div of spreadsheet
     *
     * @returns {HTMLElement} - Get the select all div of spreadsheet
     */
    Spreadsheet.prototype.getSelectAllContent = function () {
        return this.sheetModule.getSelectAllContent();
    };
    /**
     * Gets the horizontal scroll element of the Spreadsheet.
     *
     * @returns {HTMLElement} - Gets the column header div of the Spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getScrollElement = function () {
        return this.sheetModule.getScrollElement();
    };
    /**
     * Get the main content table element of spreadsheet.
     *
     * @returns {HTMLTableElement} -Get the main content table element of spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getContentTable = function () {
        return this.sheetModule.getContentTable();
    };
    /**
     * Get the row header table element of spreadsheet.
     *
     * @returns {HTMLTableElement} - Get the row header table element of spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getRowHeaderTable = function () {
        return this.sheetModule.getRowHeaderTable();
    };
    /**
     * Get the column header table element of spreadsheet.
     *
     * @returns {HTMLTableElement} - Get the column header table element of spreadsheet.
     * @hidden
     */
    Spreadsheet.prototype.getColHeaderTable = function () {
        return this.sheetModule.getColHeaderTable();
    };
    /**
     * To get the backup element count for row and column virtualization.
     *
     * @param {'row' | 'col'} layout -  specify the layout.
     * @returns {number} - To get the backup element count for row and column virtualization.
     * @hidden
     */
    Spreadsheet.prototype.getThreshold = function (layout) {
        var threshold = Math.round((this.viewport[layout + 'Count'] + 1) / 2);
        return threshold < 15 ? 15 : threshold;
    };
    /**
     * @hidden
     * @returns {boolean} - Returns the bool value.
     */
    Spreadsheet.prototype.isMobileView = function () {
        return (!isNullOrUndefined(this.cssClass) && (this.cssClass.indexOf('e-mobile-view') > -1 || Browser.isDevice) && this.cssClass.indexOf('e-desktop-view') === -1)
            && false;
    };
    /**
     * @hidden
     * @param {number} sheetId - Specifies the sheet id.
     * @param {number} rowIndex - specify the row index.
     * @param {number} colIndex - specify the col index.
     * @param {string} formulaCellReference - specify the col index.
     * @param {boolean} refresh - specify the col index.
     * @param {boolean} isUnique - specifies the unique formula.
     * @param {boolean} isSubtotal - specifies the subtotal formula.
     * @returns {string | number} - to get Value Row Col.
     */
    Spreadsheet.prototype.getValueRowCol = function (sheetId, rowIndex, colIndex, formulaCellReference, refresh, isUnique, isSubtotal) {
        return _super.prototype.getValueRowCol.call(this, sheetId, rowIndex, colIndex, formulaCellReference, refresh, isUnique, isSubtotal);
    };
    /**
     * Updates the properties of a specified cell.
     *
     * {% codeBlock src='spreadsheet/updateCell/index.md' %}{% endcodeBlock %}
     *
     * @param {CellModel} cell - The properties to update for the specified cell.
     * @param {string} address - The address of the cell to update. If not provided, the active cell's address will be used.
     * @param {boolean} enableDependentCellUpdate - Specifies whether dependent cells should also be updated. Default value is <c>true</c>.
     * @returns {void} - This method does not return a value.
     */
    Spreadsheet.prototype.updateCell = function (cell, address, enableDependentCellUpdate) {
        if (isNullOrUndefined(enableDependentCellUpdate)) {
            enableDependentCellUpdate = true;
        }
        this.updateCellInfo(cell, address, enableDependentCellUpdate, undefined, undefined, true);
    };
    /**
     * Updates the properties of a specified cell.
     *
     * @param {CellModel} cell - The properties to update for the specified cell.
     * @param {string} address - The address of the cell to update. If not provided, the active cell's address will be used.
     * @param {boolean} isDependentUpdate - Specifies whether dependent cells should also be updated.
     * @param {UndoRedoEventArgs} cellInformation - It holds the undoRedoCollections.
     * @param {boolean} isRedo - It holds the undo redo information.
     * @param {boolean} isPublic - It holds whether updateCell public method is used.
     * @returns {void} - This method does not return a value.
     *
     * @hidden
     */
    Spreadsheet.prototype.updateCellInfo = function (cell, address, isDependentUpdate, cellInformation, isRedo, isPublic) {
        address = address || this.getActiveSheet().activeCell;
        if (isReadOnlyCells(this, getRangeIndexes(address))) {
            return;
        }
        var isFinite = this.scrollSettings.isFinite;
        _super.prototype.updateCellDetails.call(this, cell, address, cellInformation, isRedo, isDependentUpdate, isFinite, isPublic);
    };
    /**
     * Used to get a row data from the data source with updated cell value.
     *
     * {% codeBlock src='spreadsheet/getRowData/index.md' %}{% endcodeBlock %}
     *
     * @param {number} index - Specifies the row index.
     * @param {number} sheetIndex - Specifies the sheet index. By default, it consider the active sheet index.
     * @returns {Object[]} - Return row data.
     */
    Spreadsheet.prototype.getRowData = function (index, sheetIndex) {
        return _super.prototype.getRowData.call(this, index, sheetIndex);
    };
    /**
     * Sorts the range of cells in the active sheet.
     *
     * {% codeBlock src='spreadsheet/sort/index.md' %}{% endcodeBlock %}
     *
     * @param {SortOptions} sortOptions - options for sorting.
     * @param {string} range - address of the data range.
     * @returns {Promise<SortEventArgs>} - Sorts the range of cells in the active sheet.
     */
    Spreadsheet.prototype.sort = function (sortOptions, range) {
        var _this = this;
        if (!this.allowSorting) {
            return Promise.reject();
        }
        var prevSort = [];
        if (this.sortCollection) {
            for (var i = this.sortCollection.length - 1; i >= 0; i--) {
                if (this.sortCollection[i] && this.sortCollection[i].sheetIndex === this.activeSheetIndex) {
                    prevSort.push(this.sortCollection[i]);
                    this.sortCollection.splice(i, 1);
                }
            }
        }
        this.notify(updateSortCollection, { sortOptions: sortOptions });
        return _super.prototype.sort.call(this, sortOptions, range, prevSort).then(function (args) {
            _this.notify(sortComplete, args);
            return Promise.resolve(args);
        });
    };
    /**
     * @hidden
     * @param {number} sheetId - specify the sheet id.
     * @param {string | number} value - Specify the value.
     * @param {number} rowIndex - Specify the row index.
     * @param {number} colIndex - Specify the col index.
     * @param {string} formula - Specify the col index.
     * @param {boolean} isRandomFormula - Specify the random formula.
     * @returns {void} - To set value for row and col.
     */
    Spreadsheet.prototype.setValueRowCol = function (sheetId, value, rowIndex, colIndex, formula, isRandomFormula) {
        if (!this.isEdit && value === '#CIRCULARREF!') {
            var sheet = getSheet(this, getSheetIndexFromId(this, sheetId));
            var circularArgs = { action: 'isCircularReference', argValue: value,
                address: sheet.name + "!" + getColumnHeaderText(colIndex) + rowIndex };
            this.notify(formulaOperation, circularArgs);
            value = circularArgs.argValue;
        }
        _super.prototype.setValueRowCol.call(this, sheetId, value, rowIndex, colIndex, formula, isRandomFormula);
        if (this.allowEditing) {
            this.notify(editOperation, {
                action: 'refreshDependentCellValue', rowIdx: rowIndex, colIdx: colIndex,
                sheetIdx: getSheetIndexFromId(this, sheetId)
            });
        }
        else {
            var sheetIdx = getSheetIndexFromId(this, sheetId);
            rowIndex--;
            colIndex--;
            if (this.activeSheetIndex === sheetIdx) {
                var sheet = getSheet(this, sheetIdx);
                var td = void 0;
                if (!isHiddenRow(sheet, rowIndex) && !isHiddenCol(sheet, colIndex)) {
                    td = this.getCell(rowIndex, colIndex);
                }
                if (td) {
                    if (td.parentElement) {
                        var curRowIdx = td.parentElement.getAttribute('aria-rowindex');
                        if (curRowIdx && Number(curRowIdx) - 1 !== rowIndex) {
                            return;
                        }
                    }
                    var cell = getCell(rowIndex, colIndex, sheet);
                    var nodeEventArgs = {
                        value: cell.value, format: cell.format, onLoad: true,
                        formattedText: cell.value, isRightAlign: false, type: 'General', cell: cell,
                        rowIndex: rowIndex, colIndex: colIndex, isRowFill: false
                    };
                    this.notify(getFormattedCellObject, nodeEventArgs);
                    this.refreshNode(td, nodeEventArgs);
                }
            }
        }
    };
    /**
     * Get component name.
     *
     * @returns {string} - Get component name.
     * @hidden
     */
    Spreadsheet.prototype.getModuleName = function () {
        return 'spreadsheet';
    };
    /**
     * The `calculateNow` method is used to calculate any uncalculated formulas in a spreadsheet.
     * This method accepts an option to specify whether the calculation should be performed for the entire workbook or a specific sheet.
     *
     * @param {string} [scope] - Specifies the scope of the calculation. Acceptable values are `Sheet` or `Workbook`.
     * If not provided, the default scope is `Sheet`.
     * * `Sheet`: Calculates formulas only on the current sheet or a specified sheet.
     * * `Workbook`: Calculates formulas across the entire workbook.
     * @param {number | string} [sheet] - The index or name of the sheet to calculate if the scope is set to `Sheet`.
     * If not provided and the scope is `Sheet`, the current active sheet will be used.
     * @returns {Promise<void>} - A promise that resolves when the calculation is complete.
     * The promise does not return a specific value, but it can be used to perform actions after the calculation has finished.
     */
    Spreadsheet.prototype.calculateNow = function (scope, sheet) {
        return _super.prototype.calculateNow.call(this, scope, sheet);
    };
    /**
     * @hidden
     * @param {Element} td - Specify the element.
     * @param {NumberFormatArgs} args - specify the args.
     * @returns {void} - to refresh the node.
     */
    Spreadsheet.prototype.refreshNode = function (td, args) {
        var value;
        if (td) {
            if (args) {
                args.result = isNullOrUndefined(args.formattedText) ? (isNullOrUndefined(args.result) ? '' : args.result) :
                    args.formattedText.toString();
                if (!args.isRowFill) {
                    var beforeFillSpan = td.querySelector('.e-fill-before');
                    if (beforeFillSpan) {
                        detach(beforeFillSpan);
                    }
                    var spanFillElem = select('.' + 'e-fill', td);
                    if (spanFillElem) {
                        detach(spanFillElem);
                        td.style.display = 'table-cell';
                    }
                    var spanFillSecElem = select('.' + 'e-fill-sec', td);
                    if (spanFillSecElem) {
                        detach(spanFillSecElem);
                    }
                }
                var spanElem = select('#' + this.element.id + '_currency', td);
                if (spanElem) {
                    detach(spanElem);
                }
                if (args.type === 'Accounting' && isNumber(args.value) && args.result.includes(args.curSymbol)) {
                    var curSymbol = void 0;
                    var result = void 0;
                    var setVal = void 0;
                    if (args.result.trim().endsWith(args.curSymbol)) {
                        result = args.result;
                    }
                    else {
                        curSymbol = args.result.includes(' ' + args.curSymbol) ? ' ' + args.curSymbol : args.curSymbol;
                        result = args.result.split(curSymbol).join('');
                    }
                    var dataBarVal = td.querySelector('.e-databar-value');
                    var iconSetSpan = td.querySelector('.e-iconsetspan');
                    var tdContainer = td;
                    var nodeElement = void 0;
                    if (td.children.length > 0 && td.children[td.childElementCount - 1].className.indexOf('e-addNoteIndicator') > -1) {
                        nodeElement = document.getElementsByClassName('e-addNoteIndicator')[0];
                    }
                    if (dataBarVal) {
                        this.refreshNode(dataBarVal, { result: result });
                        tdContainer = td.querySelector('.e-cf-databar') || td;
                    }
                    else if (td.querySelector('a')) {
                        td.querySelector('a').textContent = result;
                    }
                    else {
                        setVal = true;
                        td.innerText = '';
                    }
                    if (iconSetSpan) {
                        td.insertBefore(iconSetSpan, td.firstElementChild);
                    }
                    if (curSymbol) {
                        var curr = this.createElement('span', { id: this.element.id + '_currency', styles: 'float: left' });
                        curr.innerText = curSymbol;
                        tdContainer.appendChild(curr);
                        if (!isNullOrUndefined(nodeElement)) {
                            tdContainer.appendChild(nodeElement);
                        }
                    }
                    if (setVal) {
                        td.innerHTML += result;
                    }
                    td.classList.add('e-right-align');
                    return;
                }
                else {
                    var alignClass = void 0;
                    if (args.result && (args.result.toLowerCase() === 'true' || args.result.toLowerCase() === 'false')) {
                        args.result = args.result.toUpperCase();
                        alignClass = 'e-center-align';
                        args.isRightAlign = true; // Re-use this to center align the cell.
                    }
                    else {
                        alignClass = 'e-right-align';
                    }
                    value = args.result;
                    if (!this.allowWrap) {
                        if (value.toString().includes('\n')) {
                            value = value.replace(/\n/g, '');
                        }
                    }
                    if (args.isRightAlign) {
                        td.classList.add(alignClass);
                    }
                    else {
                        td.classList.remove(alignClass);
                    }
                }
            }
            value = !isNullOrUndefined(value) ? value : '';
            if (!isNullOrUndefined(args.rowIndex) && !isNullOrUndefined(args.colIndex)) {
                attributes(td, { 'aria-label': (value ? value + ' ' : '') + getCellAddress(args.rowIndex, args.colIndex) });
            }
            var node_1 = td.lastChild;
            if (node_1 && node_1.nodeName === 'SPAN' && node_1.classList.contains('e-iconsetspan')) {
                node_1 = null;
            }
            var nodeIndicator = td.querySelector('.e-addNoteIndicator');
            if (nodeIndicator) {
                node_1 = nodeIndicator.previousSibling;
            }
            if (td.querySelector('.e-databar-value')) {
                node_1 = td.querySelector('.e-databar-value').lastChild;
            }
            if (td.querySelector('.e-hyperlink')) {
                if (args.cell && args.cell.wrap && value && value.toString().indexOf('\n')) {
                    td.querySelector('.e-hyperlink').textContent = value;
                }
                node_1 = td.querySelector('.e-hyperlink').lastChild;
            }
            var wrapContent = td.querySelector('.e-wrap-content');
            if (wrapContent && !(td.querySelector('.e-hyperlink') || td.querySelector('.e-databar-value'))) {
                if (!wrapContent.lastChild) {
                    wrapContent.appendChild(document.createTextNode(''));
                }
                node_1 = wrapContent.lastChild;
            }
            if ((this.isAngular || this.isVue) &&
                td.classList.contains('e-cell-template') && node_1 && (node_1.nodeType === 8 || node_1.nodeType === 3)) {
                if (node_1.nodeType === 3 || value !== '') {
                    var checkNodeFn = function () {
                        if (!td.childElementCount) {
                            if (node_1.nodeType === 3) {
                                if (!args.isRowFill) {
                                    node_1.nodeValue = value;
                                }
                            }
                            else {
                                td.appendChild(document.createTextNode(value));
                            }
                        }
                    };
                    if (this.isAngular) {
                        getUpdateUsingRaf(checkNodeFn);
                    }
                    else {
                        checkNodeFn();
                    }
                }
            }
            else if (node_1 && (node_1.nodeType === 3 || node_1.nodeType === 1)) {
                if (!args.isRowFill) {
                    if (!isNullOrUndefined(node_1.className) &&
                        node_1.className.indexOf('e-addNoteIndicator') > -1) {
                        node_1 = td.lastChild;
                        node_1.nodeValue = value;
                    }
                    else {
                        node_1.nodeValue = value;
                    }
                }
            }
            else {
                td.appendChild(document.createTextNode(value));
            }
        }
    };
    /**
     * @hidden
     * @param {CellStyleModel} style - specify the style.
     * @param {number} lines - Specify the lines.
     * @param {number} borderWidth - Specify the borderWidth.
     * @returns {number} - To calculate Height
     */
    Spreadsheet.prototype.calculateHeight = function (style, lines, borderWidth) {
        if (lines === void 0) { lines = 1; }
        if (borderWidth === void 0) { borderWidth = 1; }
        var fontSize = (style && style.fontSize) || this.cellStyle.fontSize;
        var threshold = style.fontFamily === 'Arial Black' ? 1.44 : 1.24;
        return ((fontSize.indexOf('pt') > -1 ? parseInt(fontSize, 10) * 1.33 : parseInt(fontSize, 10)) * threshold * lines) +
            (borderWidth * threshold);
    };
    /**
     * @hidden
     * @param {number} startIdx - specify the start index.
     * @param {number} endIdx - Specify the end index.
     * @param {string} layout - Specify the rows.
     * @param {boolean} finite - Specifies the scroll mode.
     * @returns {number[]} - To skip the hidden rows.
     */
    Spreadsheet.prototype.skipHidden = function (startIdx, endIdx, layout, finite) {
        if (layout === void 0) { layout = 'rows'; }
        if (finite === void 0) { finite = this.scrollSettings.isFinite; }
        var sheet = this.getActiveSheet();
        var totalCount;
        if (this.scrollSettings.isFinite) {
            totalCount = (layout === 'rows' ? sheet.rowCount : sheet.colCount) - 1;
        }
        for (var i = startIdx; i <= endIdx; i++) {
            if ((sheet["" + layout])[i] && (sheet["" + layout])[i].hidden) {
                if (startIdx === i) {
                    startIdx++;
                }
                endIdx++;
                if (finite && endIdx > totalCount) {
                    endIdx = totalCount;
                    break;
                }
            }
            else if (!finite && this.scrollSettings.isFinite && endIdx > totalCount) {
                if ((sheet["" + layout])[i - 1] && (sheet["" + layout])[i - 1].hidden) {
                    endIdx--;
                    break;
                }
            }
        }
        return [startIdx, endIdx];
    };
    /**
     * @hidden
     * @param {HTMLElement} nextTab - Specify the element.
     * @param {string} selector - Specify the selector
     * @returns {void} - To update the active border.
     */
    Spreadsheet.prototype.updateActiveBorder = function (nextTab, selector) {
        if (selector === void 0) { selector = '.e-ribbon'; }
        var indicator = select(selector + " .e-tab-header .e-indicator", this.element);
        indicator.style.display = 'none';
        setStyleAttribute$1(indicator, { 'left': '', 'right': '' });
        setStyleAttribute$1(indicator, {
            'left': nextTab.offsetLeft + 'px', 'right': nextTab.parentElement.offsetWidth - (nextTab.offsetLeft + nextTab.offsetWidth) + 'px'
        });
        indicator.style.display = '';
    };
    /**
     * To perform the undo operation in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/undo/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - To perform the undo operation in spreadsheet.
     */
    Spreadsheet.prototype.undo = function () {
        this.notify(performUndoRedo, { isUndo: true, isPublic: true });
    };
    /**
     * To perform the redo operation in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/redo/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - To perform the redo operation in spreadsheet.
     */
    Spreadsheet.prototype.redo = function () {
        this.notify(performUndoRedo, { isUndo: false, isPublic: true });
    };
    /**
     * To update the undo redo collection in spreadsheet.
     *
     * {% codeBlock src='spreadsheet/updateUndoRedoCollection/index.md' %}{% endcodeBlock %}
     *
     * @param {object} args - options for undo redo.
     * @returns {void} - To update the undo redo collection in spreadsheet.
     */
    Spreadsheet.prototype.updateUndoRedoCollection = function (args) {
        this.notify(updateUndoRedoCollection, { args: args, isPublic: true });
    };
    /**
     * Adds the defined name to the Spreadsheet.
     *
     * {% codeBlock src='spreadsheet/addDefinedName/index.md' %}{% endcodeBlock %}
     *
     * @param {DefineNameModel} definedName - Specifies the name, scope, comment, refersTo.
     * @returns {boolean} - Return the added status of the defined name.
     */
    Spreadsheet.prototype.addDefinedName = function (definedName) {
        var eventArgs = {
            action: 'addDefinedName',
            isAdded: false,
            definedName: definedName
        };
        this.notify(formulaOperation, eventArgs);
        return eventArgs.isAdded;
    };
    /**
     * Removes the defined name from the Spreadsheet.
     *
     * {% codeBlock src='spreadsheet/removeDefinedName/index.md' %}{% endcodeBlock %}
     *
     * @param {string} definedName - Specifies the name.
     * @param {string} scope - Specifies the scope of the defined name.
     * @returns {boolean} - Return the removed status of the defined name.
     */
    Spreadsheet.prototype.removeDefinedName = function (definedName, scope) {
        return _super.prototype.removeDefinedName.call(this, definedName, scope);
    };
    Spreadsheet.prototype.mouseClickHandler = function (e) {
        this.notify(click, e);
    };
    Spreadsheet.prototype.mouseDownHandler = function (e) {
        this.notify(mouseDown, e);
    };
    Spreadsheet.prototype.keyUpHandler = function (e) {
        if (closest(e.target, '.e-find-dlg')) {
            this.notify(findKeyUp, e);
        }
        else {
            this.notify(keyUp, e);
        }
    };
    Spreadsheet.prototype.keyDownHandler = function (e) {
        var findToolDlg = closest(e.target, '.e-findtool-dlg');
        if (findToolDlg) {
            if (e.keyCode === 9) {
                var target = e.target;
                if (e.shiftKey) {
                    if (target.classList.contains('e-text-findNext-short')) {
                        var focusEle = findToolDlg.querySelector('.e-findRib-close .e-tbar-btn');
                        if (focusEle) {
                            e.preventDefault();
                            focusEle.focus();
                        }
                    }
                }
                else if (target.classList.contains('e-tbar-btn') && target.parentElement.classList.contains('e-findRib-close')) {
                    focus(findToolDlg);
                }
            }
        }
        else {
            this.notify(keyDown, e);
            var dialogbox = closest(e.target, '.e-dialog');
            if (!this.enableKeyboardNavigation && (document.activeElement.classList.contains('e-cell') || dialogbox)) {
                if ([38, 40, 33, 34, 35, 36, 9].indexOf(e.keyCode) > -1) {
                    e.preventDefault();
                }
            }
        }
    };
    Spreadsheet.prototype.freeze = function (e) {
        if (!this.allowFreezePane || e.row < 0 || e.column < 0) {
            return;
        }
        if (e.triggerEvent) {
            var args = {
                row: e.row, column: e.column,
                cancel: false, sheetIndex: this.activeSheetIndex
            };
            this.notify(beginAction, { eventArgs: args, action: 'freezePanes' });
            if (args.cancel) {
                return;
            }
        }
        this.on(contentLoaded, this.freezePaneUpdated, this);
        this.freezePanes(e.row, e.column);
        this.notify(refreshRibbonIcons, null);
    };
    Spreadsheet.prototype.freezePaneUpdated = function () {
        this.off(contentLoaded, this.freezePaneUpdated);
        var sheet = this.getActiveSheet();
        focus(this.element);
        this.notify(completeAction, { eventArgs: { row: sheet.frozenRows, column: sheet.frozenColumns,
                sheetIndex: this.activeSheetIndex }, action: 'freezePanes' });
    };
    /**
     * Binding events to the element while component creation.
     *
     * @returns {void} - Binding events to the element while component creation.
     */
    Spreadsheet.prototype.wireEvents = function () {
        EventHandler.add(this.element, 'click', this.mouseClickHandler, this);
        EventHandler.add(this.element, getStartEvent(), this.mouseDownHandler, this);
        EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);
        EventHandler.add(this.element, 'keydown', this.keyDownHandler, this);
        this.on(freeze, this.freeze, this);
        this.on(refreshInsertDelete, this.refreshInsertDelete, this);
    };
    /**
     * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).
     *
     * {% codeBlock src='spreadsheet/destroy/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - Destroys the component.
     */
    Spreadsheet.prototype.destroy = function () {
        if (this.isReact) {
            this['clearTemplate']();
        }
        this.unwireEvents();
        this.notify(spreadsheetDestroyed, null);
        _super.prototype.destroy.call(this);
        this.element.innerHTML = '';
        this.element.removeAttribute('tabindex');
        this.element.removeAttribute('role');
        this.element.style.removeProperty('height');
        this.element.style.removeProperty('width');
        this.element.style.removeProperty('min-height');
        this.element.style.removeProperty('min-width');
        if (this.sheetModule) {
            this.sheetModule.destroy();
        }
    };
    /**
     * Unbinding events from the element while component destroy.
     *
     * @returns {void} - Unbinding events from the element while component destroy.
     */
    Spreadsheet.prototype.unwireEvents = function () {
        EventHandler.remove(this.element, 'click', this.mouseClickHandler);
        EventHandler.remove(this.element, getStartEvent(), this.mouseDownHandler);
        EventHandler.remove(this.element, 'keyup', this.keyUpHandler);
        EventHandler.remove(this.element, 'keydown', this.keyDownHandler);
        this.off(freeze, this.freeze);
        this.off(refreshInsertDelete, this.refreshInsertDelete);
    };
    Spreadsheet.prototype.refreshInsertDelete = function (args) {
        var _this = this;
        if (args.modelType === 'Sheet') {
            return;
        }
        var updated;
        var indexes;
        args.sheet.ranges.forEach(function (range) {
            if (range.template && range.address) {
                indexes = getRangeIndexes(range.address);
                updated = _this.updateRangeOnInsertDelete(args, indexes);
                if (updated) {
                    range.address = getRangeAddress(indexes);
                }
            }
        });
        this.setSheetPropertyOnMute(args.sheet, 'ranges', args.sheet.ranges);
    };
    /**
     * To add context menu items.
     *
     * {% codeBlock src='spreadsheet/addContextMenu/index.md' %}{% endcodeBlock %}
     *
     * @param {MenuItemModel[]} items - Items that needs to be added.
     * @param {string} text - Item before / after that the element to be inserted.
     * @param {boolean} insertAfter - Set `false` if the `items` need to be inserted before the `text`.
     * By default, `items` are added after the `text`.
     * @param {boolean} isUniqueId - Set `true` if the given `text` is a unique id.
     * @returns {void} - To add context menu items.
     */
    Spreadsheet.prototype.addContextMenuItems = function (items, text, insertAfter, isUniqueId) {
        if (insertAfter === void 0) { insertAfter = true; }
        this.notify(addContextMenuItems, { items: items, text: text, insertAfter: insertAfter, isUniqueId: isUniqueId });
    };
    /**
     * To remove existing context menu items.
     *
     * {% codeBlock src='spreadsheet/removeContextMenuItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} items - Items that needs to be removed.
     * @param {boolean} isUniqueId - Set `true` if the given `text` is a unique id.
     * @returns {void} - To remove existing context menu items.
     */
    Spreadsheet.prototype.removeContextMenuItems = function (items, isUniqueId) {
        this.notify(removeContextMenuItems, { items: items, isUniqueId: isUniqueId });
    };
    /**
     * To enable / disable context menu items.
     *
     * {% codeBlock src='spreadsheet/enableContextMenuItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} items - Items that needs to be enabled / disabled.
     * @param {boolean} enable - Set `true` / `false` to enable / disable the menu items.
     * @param {boolean} isUniqueId - Set `true` if the given `text` is a unique id.
     * @returns {void} - To enable / disable context menu items.
     */
    Spreadsheet.prototype.enableContextMenuItems = function (items, enable, isUniqueId) {
        if (enable === void 0) { enable = true; }
        this.notify(enableContextMenuItems, { items: items, enable: enable, isUniqueId: isUniqueId });
    };
    /**
     * To enable / disable file menu items.
     *
     * {% codeBlock src='spreadsheet/enableFileMenuItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} items - Items that needs to be enabled / disabled.
     * @param {boolean} enable - Set `true` / `false` to enable / disable the menu items.
     * @param {boolean} isUniqueId - Set `true` if the given file menu items `text` is a unique id.
     * @returns {void} - To enable / disable file menu items.
     */
    Spreadsheet.prototype.enableFileMenuItems = function (items, enable, isUniqueId) {
        if (enable === void 0) { enable = true; }
        this.notify(enableFileMenuItems, { items: items, enable: enable, isUniqueId: isUniqueId });
    };
    /**
     * To show/hide the file menu items in Spreadsheet ribbon.
     *
     * {% codeBlock src='spreadsheet/hideFileMenuItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} items - Specifies the file menu items text which is to be show/hide.
     * @param {boolean} hide - Set `true` / `false` to hide / show the file menu items.
     * @param {boolean} isUniqueId - Set `true` if the given file menu items `text` is a unique id.
     * @returns {void} - To show/hide the file menu items in Spreadsheet ribbon.
     */
    Spreadsheet.prototype.hideFileMenuItems = function (items, hide, isUniqueId) {
        if (hide === void 0) { hide = true; }
        this.notify(hideFileMenuItems, { items: items, hide: hide, isUniqueId: isUniqueId });
    };
    /**
     * To add custom file menu items.
     *
     * {% codeBlock src='spreadsheet/addFileMenuItems/index.md' %}{% endcodeBlock %}
     *
     * @param {MenuItemModel[]} items - Specifies the ribbon file menu items to be inserted.
     * @param {string} text - Specifies the existing file menu item text before / after which the new file menu items to be inserted.
     * @param {boolean} insertAfter - Set `false` if the `items` need to be inserted before the `text`.
     * By default, `items` are added after the `text`.
     * @param {boolean} isUniqueId - Set `true` if the given file menu items `text` is a unique id.
     * @returns {void} - To add custom file menu items.
     */
    Spreadsheet.prototype.addFileMenuItems = function (items, text, insertAfter, isUniqueId) {
        if (insertAfter === void 0) { insertAfter = true; }
        this.notify(addFileMenuItems, { items: items, text: text, insertAfter: insertAfter, isUniqueId: isUniqueId });
    };
    /**
     * To show/hide the existing ribbon tabs.
     *
     * {% codeBlock src='spreadsheet/hideRibbonTabs/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} tabs - Specifies the tab header text which needs to be shown/hidden.
     * @param {boolean} hide - Set `true` / `false` to hide / show the ribbon tabs.
     * @returns {void} - To show/hide the existing ribbon tabs.
     */
    Spreadsheet.prototype.hideRibbonTabs = function (tabs, hide) {
        if (hide === void 0) { hide = true; }
        this.notify(hideRibbonTabs, { tabs: tabs, hide: hide });
    };
    /**
     * To enable / disable the existing ribbon tabs.
     *
     * {% codeBlock src='spreadsheet/enableRibbonTabs/index.md' %}{% endcodeBlock %}
     *
     * @param {string[]} tabs - Specifies the tab header text which needs to be enabled / disabled.
     * @param {boolean} enable - Set `true` / `false` to enable / disable the ribbon tabs.
     * @returns {void} - To enable / disable the existing ribbon tabs.
     */
    Spreadsheet.prototype.enableRibbonTabs = function (tabs, enable) {
        if (enable === void 0) { enable = true; }
        this.notify(enableRibbonTabs, { tabs: tabs, enable: enable });
    };
    /**
     * To add custom ribbon tabs.
     *
     * {% codeBlock src='spreadsheet/addRibbonTabs/index.md' %}{% endcodeBlock %}
     *
     * @param {RibbonItemModel[]} items - Specifies the ribbon tab items to be inserted.
     * @param {string} insertBefore - Specifies the existing ribbon header text before which the new tabs will be inserted.
     * If not specified, the new tabs will be inserted at the end.
     * @returns {void} - To add custom ribbon tabs.
     */
    Spreadsheet.prototype.addRibbonTabs = function (items, insertBefore) {
        this.notify(addRibbonTabs, { items: items, insertBefore: insertBefore });
    };
    /**
     * Enables or disables the specified ribbon toolbar items or all ribbon items.
     *
     * {% codeBlock src='spreadsheet/enableToolbarItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the toolbar items need to be enabled / disabled.
     * @param {number[]} items - Specifies the toolbar item indexes / unique id's which needs to be enabled / disabled.
     * If it is not specified the entire toolbar items will be enabled / disabled.
     * @param  {boolean} enable - Boolean value that determines whether the toolbar items should be enabled or disabled.
     * @returns {void} - Enables or disables the specified ribbon toolbar items or all ribbon items.
     */
    Spreadsheet.prototype.enableToolbarItems = function (tab, items, enable) {
        this.notify(enableToolbarItems, [{ tab: tab, items: items, enable: enable === undefined ? true : enable }]);
    };
    /**
     * To show/hide the existing Spreadsheet ribbon toolbar items.
     *
     * {% codeBlock src='spreadsheet/hideToolbarItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the specified items needs to be hidden / shown.
     * @param {number[]} indexes - Specifies the toolbar indexes which needs to be shown/hidden from UI.
     * @param {boolean} hide - Set `true` / `false` to hide / show the toolbar items.
     * @returns {void} - To show/hide the existing Spreadsheet ribbon toolbar items.
     */
    Spreadsheet.prototype.hideToolbarItems = function (tab, indexes, hide) {
        if (hide === void 0) { hide = true; }
        this.notify(hideToolbarItems, { tab: tab, indexes: indexes, hide: hide });
    };
    /**
     * To add the custom items in Spreadsheet ribbon toolbar.
     *
     * {% codeBlock src='spreadsheet/addToolbarItems/index.md' %}{% endcodeBlock %}
     *
     * @param {string} tab - Specifies the ribbon tab header text under which the specified items will be inserted.
     * @param {ItemModel[]} items - Specifies the ribbon toolbar items that needs to be inserted.
     * @param {number} index - Specifies the index text before which the new items will be inserted.
     * If not specified, the new items will be inserted at the end of the toolbar.
     * @returns {void} - To add the custom items in Spreadsheet ribbon toolbar.
     */
    Spreadsheet.prototype.addToolbarItems = function (tab, items, index) {
        this.notify(addToolbarItems, { tab: tab, items: items, index: index });
    };
    /**
     * Selects the cell / range of cells with specified address.
     *
     * {% codeBlock src='spreadsheet/selectRange/index.md' %}{% endcodeBlock %}
     *
     * @param {string} address - Specifies the range address.
     * @returns {void} - To select the range.
     */
    Spreadsheet.prototype.selectRange = function (address) {
        if (this.isEdit) {
            this.notify(editOperation, { action: 'endEdit' });
        }
        this.notify(selectRange, { address: address });
    };
    /**
     * Allows you to select a chart from the active sheet. To select a specific chart from the active sheet, pass the chart `id`.
     * If you pass an empty argument, the chart present in the active cell will be selected. If the active cell does not have a chart,
     * the initially rendered chart will be selected from the active sheet.
     *
     * @param {string} id - Specifies the chart `id` to be selected.
     * @returns {void}
     */
    Spreadsheet.prototype.selectChart = function (id) {
        this.selectOverlay(id, true);
    };
    /**
     * Allows you to select an image from the active sheet. To select a specific image from the active sheet, pass the image `id`.
     * If you pass an empty argument, the image present in the active cell will be selected. If the active cell does not have an image,
     * the initially rendered image will be selected from the active sheet.
     *
     * @param {string} id - Specifies the image `id` to be selected.
     * @returns {void}
     */
    Spreadsheet.prototype.selectImage = function (id) {
        this.selectOverlay(id);
    };
    Spreadsheet.prototype.selectOverlay = function (id, isChart) {
        var sheet = this.getActiveSheet();
        if (sheet.isProtected || !this.allowEditing) {
            return;
        }
        if (!id) {
            var activeCell = getCellIndexes(sheet.activeCell);
            var cell = getCell(activeCell[0], activeCell[1], sheet, false, true);
            if (isChart) {
                if (cell.chart && cell.chart.length) {
                    id = cell.chart[cell.chart.length - 1].id;
                }
            }
            else if (cell.image && cell.image.length) {
                id = cell.image[cell.image.length - 1].id;
            }
        }
        var overlayEle;
        if (id) {
            overlayEle = this.element.querySelector("#" + id);
            if (!overlayEle.classList.contains('e-ss-overlay')) {
                overlayEle = overlayEle.parentElement;
            }
        }
        else {
            overlayEle = this.element.querySelector(".e-ss-overlay" + (isChart ? '.e-datavisualization-chart' : ':not(.e-datavisualization-chart)'));
        }
        if (overlayEle) {
            var isChartActive = void 0;
            var activeOverlay = this.element.getElementsByClassName('e-ss-overlay-active')[0];
            if (activeOverlay) {
                activeOverlay.classList.remove('e-ss-overlay-active');
                isChartActive = activeOverlay.classList.contains('e-datavisualization-chart');
                if (isChartActive) {
                    this.notify(clearChartBorder, null);
                }
            }
            overlayEle.classList.add('e-ss-overlay-active');
            if (overlayEle.classList.contains('e-datavisualization-chart')) {
                this.notify(focusChartBorder, { id: overlayEle.id });
                if (!isChartActive) {
                    this.notify(insertDesignChart, { id: overlayEle.id });
                }
            }
            else if (isChartActive) {
                this.notify(removeDesignChart, null);
            }
        }
    };
    /**
     * Allows you to remove a selection from the active chart.
     *
     * @returns {void}
     */
    Spreadsheet.prototype.deselectChart = function () {
        this.notify(refreshOverlayElem, { selector: '.e-datavisualization-chart' });
    };
    /**
     * Allows you to remove a selection from the active image.
     *
     * @returns {void}
     */
    Spreadsheet.prototype.deselectImage = function () {
        this.notify(refreshOverlayElem, { selector: ':not(.e-datavisualization-chart)' });
    };
    /**
     * Start edit the active cell.
     *
     * {% codeBlock src='spreadsheet/startEdit/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - Start edit the active cell.
     */
    Spreadsheet.prototype.startEdit = function () {
        this.notify(editOperation, { action: 'startEdit', isNewValueEdit: false });
    };
    /**
     * Cancels the edited state, this will not update any value in the cell.
     *
     * {% codeBlock src='spreadsheet/closeEdit/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - Cancels the edited state, this will not update any value in the cell.
     */
    Spreadsheet.prototype.closeEdit = function () {
        this.notify(editOperation, { action: 'cancelEdit' });
    };
    /**
     * If Spreadsheet is in editable state, you can save the cell by invoking endEdit.
     *
     * {% codeBlock src='spreadsheet/endEdit/index.md' %}{% endcodeBlock %}
     *
     * @returns {void} - If Spreadsheet is in editable state, you can save the cell by invoking endEdit.
     */
    Spreadsheet.prototype.endEdit = function () {
        this.notify(editOperation, { action: 'endEdit', isPublic: true });
    };
    /**
     * This method is used to print the active sheet or the entire workbook.
     *
     * @param {printOptions} printOptions - Represents the settings to customize the print type, row and column headers and gridlines in the printing operation.
     * @returns {void}
     */
    Spreadsheet.prototype.print = function (printOptions) {
        if (printOptions === void 0) { printOptions = { type: 'ActiveSheet', allowRowColumnHeader: false, allowGridLines: false }; }
        if (this.allowPrint && !isNullOrUndefined(this.printModule)) {
            this.printModule.print(this, printOptions);
        }
    };
    /**
     * Called internally if any of the property value changed.
     *
     * @param  {SpreadsheetModel} newProp - Specify the new properties
     * @param  {SpreadsheetModel} oldProp - Specify the old properties
     * @returns {void} - Called internally if any of the property value changed.
     * @hidden
     */
    Spreadsheet.prototype.onPropertyChanged = function (newProp, oldProp) {
        var _this = this;
        _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
        var sheetTabsRefreshed;
        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
            var prop = _a[_i];
            var header = void 0;
            var addBtn = void 0;
            var sheet = this.getActiveSheet();
            var horizontalScroll = this.getScrollElement();
            switch (prop) {
                case 'enableRtl':
                    if (newProp.locale || newProp.currencyCode) {
                        break;
                    }
                    header = this.getColumnHeaderContent();
                    if (header) {
                        header = header.parentElement;
                    }
                    if (!header) {
                        break;
                    }
                    if (newProp.enableRtl) {
                        header.style.marginRight = '';
                        document.getElementById(this.element.id + '_sheet_panel').classList.add('e-rtl');
                    }
                    else {
                        header.style.marginLeft = '';
                        document.getElementById(this.element.id + '_sheet_panel').classList.remove('e-rtl');
                    }
                    if (this.allowScrolling) {
                        this.scrollModule.setPadding(true);
                    }
                    if (this.allowAutoFill) {
                        var autofillEle = this.element.querySelector('.e-dragfill-ddb');
                        if (autofillEle) {
                            var autofillDdb = getComponent(autofillEle, 'dropdown-btn');
                            if (autofillDdb) {
                                autofillDdb.enableRtl = newProp.enableRtl;
                                autofillDdb.dataBind();
                            }
                        }
                    }
                    this.sheetModule.setPanelWidth(sheet, this.getRowHeaderContent(), true);
                    if (this.allowImage || this.allowChart) {
                        var overlays = this.element.getElementsByClassName('e-ss-overlay');
                        var chart = void 0;
                        var overlay_1 = void 0;
                        var chartEle = void 0;
                        for (var idx = 0, overlayLen = overlays.length - 1; idx <= overlayLen; idx++) {
                            overlay_1 = overlays[0];
                            if (overlay_1.classList.contains('e-datavisualization-chart')) {
                                chartEle = overlay_1.querySelector('.e-accumulationchart');
                                if (chartEle) {
                                    chart = getComponent(chartEle, 'accumulationchart');
                                }
                                else {
                                    chartEle = overlay_1.querySelector('.e-chart');
                                    chart = chartEle && getComponent(chartEle, 'chart');
                                }
                                if (chart) {
                                    chart.destroy();
                                }
                            }
                            detach(overlay_1);
                            if (idx === overlayLen) {
                                this.notify(updateView, {});
                            }
                        }
                    }
                    if (horizontalScroll) {
                        horizontalScroll.scrollLeft = 0;
                    }
                    this.selectRange(sheet.selectedRange);
                    break;
                case 'cssClass':
                    if (oldProp.cssClass) {
                        removeClass([this.element], oldProp.cssClass.split(' '));
                    }
                    if (newProp.cssClass) {
                        addClass([this.element], newProp.cssClass.split(' '));
                    }
                    break;
                case 'activeSheetIndex':
                    this.renderModule.refreshSheet();
                    this.notify(activeSheetChanged, { idx: newProp.activeSheetIndex });
                    break;
                case 'width':
                    this.setWidth();
                    this.resize();
                    break;
                case 'height':
                    this.setHeight();
                    this.resize();
                    break;
                case 'showRibbon':
                    this.notify(ribbon, { prop: 'showRibbon', onPropertyChange: true });
                    break;
                case 'showFormulaBar':
                    this.notify(formulaBar, { uiUpdate: true });
                    break;
                case 'showSheetTabs':
                    this.notify(sheetTabs, null);
                    break;
                case 'cellStyle':
                    this.renderModule.refreshSheet();
                    break;
                case 'allowEditing':
                    if (this.allowEditing) {
                        this.notify(editOperation, { action: 'renderEditor' });
                        if (this.enableKeyboardNavigation) {
                            // Remove and reassign the `keyDown` and `mouseDown` event in `KeyboardNavigation` and `Selection` module.
                            // To execute the respective event after editing operation.
                            this.enableKeyboardNavigation = false;
                            this.dataBind();
                            this.enableKeyboardNavigation = true;
                            this.dataBind();
                            var mode = this.selectionSettings.mode;
                            if (mode !== 'None') {
                                this.selectionSettings.mode = 'None';
                                this.dataBind();
                                this.selectionSettings.mode = mode;
                                this.dataBind();
                            }
                        }
                    }
                    else {
                        this.notify(refreshOverlayElem, null);
                    }
                    break;
                case 'allowInsert':
                    addBtn = this.element.getElementsByClassName('e-add-sheet-tab')[0];
                    if (addBtn) {
                        addBtn.disabled = !this.allowInsert;
                        if (this.allowInsert) {
                            if (addBtn.classList.contains('e-disabled')) {
                                addBtn.classList.remove('e-disabled');
                            }
                        }
                        else {
                            if (!addBtn.classList.contains('e-disabled')) {
                                addBtn.classList.add('e-disabled');
                            }
                        }
                    }
                    break;
                case 'sheets':
                    if (newProp.sheets === this.sheets) {
                        this.renderModule.refreshSheet();
                        this.notify(refreshSheetTabs, null);
                        this.notify(workbookFormulaOperation, { action: 'initSheetInfo' });
                        break;
                    }
                    Object.keys(newProp.sheets).forEach(function (sheetIndex, index) {
                        var sheetIdx = Number(sheetIndex);
                        var sheet = newProp.sheets[sheetIdx];
                        var curSheet = getSheet(_this, sheetIdx);
                        if (sheet.ranges && Object.keys(sheet.ranges).length) {
                            var ranges = Object.keys(sheet.ranges);
                            var newRangeIdx_1;
                            ranges.forEach(function (rangeIdx, idx) {
                                if (!sheet.ranges[Number(rangeIdx)].info) {
                                    newRangeIdx_1 = idx;
                                }
                            });
                            var rangeIdx_1;
                            var range_1;
                            var curRange_1;
                            var dataSource_1;
                            ranges.forEach(function (rangeIndex, idx) {
                                if (isUndefined$1(newRangeIdx_1) || newRangeIdx_1 === idx) {
                                    rangeIdx_1 = Number(rangeIndex);
                                    range_1 = sheet.ranges[rangeIdx_1];
                                    curRange_1 = curSheet.ranges[rangeIdx_1];
                                    dataSource_1 = range_1.dataSource;
                                    if (range_1.fieldsOrder && curRange_1.info && !dataSource_1 && curRange_1.dataSource) {
                                        dataSource_1 = curRange_1.dataSource;
                                    }
                                    if (dataSource_1) {
                                        _this.notify(dataSourceChanged, { sheetIdx: sheetIdx, rangeIdx: rangeIdx_1, changedData: dataSource_1 });
                                    }
                                }
                            });
                        }
                        else if (sheet.paneTopLeftCell && oldProp.sheets && oldProp.sheets["" + sheetIdx] &&
                            oldProp.sheets["" + sheetIdx].paneTopLeftCell) {
                            if (_this.activeSheetIndex !== Number(sheetIdx)) {
                                return;
                            }
                            var cIdx = getCellIndexes(sheet.paneTopLeftCell);
                            var pIdx = getCellIndexes(oldProp.sheets["" + sheetIdx].paneTopLeftCell);
                            if (cIdx[0] !== pIdx[0]) {
                                var frozenRow = _this.frozenRowCount(_this.getActiveSheet());
                                var top_1 = cIdx[0] > frozenRow ? getRowsHeight(_this.getActiveSheet(), frozenRow, cIdx[0] - 1) : 0;
                                _this.notify(updateScroll, { top: top_1 });
                            }
                            if (cIdx[1] !== pIdx[1]) {
                                var frozenCol = _this.frozenColCount(_this.getActiveSheet());
                                var left = cIdx[1] > frozenCol ? getColumnsWidth(_this.getActiveSheet(), frozenCol, cIdx[1] - 1) : 0;
                                _this.notify(updateScroll, { left: left });
                            }
                        }
                        else {
                            if (index === 0) {
                                _this.renderModule.refreshSheet();
                            }
                            if (_this.showSheetTabs && sheet.name && !sheetTabsRefreshed) {
                                var items = select('.e-sheet-tabs-items', _this.element);
                                var idx = Number(sheetIdx);
                                if (items.children[idx + 1]) {
                                    _this.notify(sheetNameUpdate, { items: items, value: sheet.name, idx: idx });
                                }
                                else {
                                    _this.notify(refreshSheetTabs, null);
                                    sheetTabsRefreshed = true;
                                }
                            }
                        }
                    });
                    break;
                case 'locale':
                    this.refresh();
                    break;
                case 'currencyCode':
                    if (!newProp.locale) {
                        this.refresh();
                    }
                    break;
                case 'password':
                    if (this.password.length > 0) {
                        if (this.showSheetTabs) {
                            this.element.querySelector('.e-add-sheet-tab').setAttribute('disabled', 'true');
                            this.element.querySelector('.e-add-sheet-tab').classList.add('e-disabled');
                        }
                    }
                    break;
                case 'isProtected':
                    if (this.isProtected) {
                        var addBtn_1 = this.element.getElementsByClassName('e-add-sheet-tab')[0];
                        if (addBtn_1) {
                            addBtn_1.disabled = this.isProtected;
                            if (this.isProtected) {
                                if (addBtn_1.classList.contains('e-disabled')) {
                                    addBtn_1.classList.add('e-disabled');
                                }
                            }
                            else {
                                if (!addBtn_1.classList.contains('e-disabled')) {
                                    addBtn_1.classList.remove('e-disabled');
                                }
                            }
                        }
                    }
                    break;
                case 'allowFreezePane':
                    this.notify(ribbon, { prop: 'allowFreezePane', onPropertyChange: true });
                    break;
                case 'allowImage':
                case 'allowChart':
                    this.renderModule.refreshSheet();
                    this.notify(ribbon, { prop: prop, onPropertyChange: true });
                    break;
                case 'calculationMode':
                    if (oldProp.calculationMode === 'Manual') {
                        this.notify(workbookFormulaOperation, { action: 'ClearDependentCellCollection' });
                    }
                    this.notify(ribbon, { prop: prop, onPropertyChange: true });
                    break;
                case 'allowResizing':
                    if (newProp.allowResizing) {
                        this.notify(propertyChange, { propertyName: prop });
                    }
                    break;
                case 'enableNotes':
                    if (newProp.enableNotes) {
                        this.notify(updateView, {});
                    }
                    break;
                case 'allowNumberFormatting':
                case 'allowWrap':
                case 'allowCellFormatting':
                    this.notify(ribbon, { prop: prop, onPropertyChange: true });
                    this.notify(updateView, {});
                    break;
                case 'showAggregate':
                    this.notify(showAggregate, { remove: !this.showAggregate });
                    break;
            }
        }
    };
    /**
     * To provide the array of modules needed for component rendering.
     *
     * @returns {ModuleDeclaration[]} - To provide the array of modules needed for component rendering.
     * @hidden
     */
    Spreadsheet.prototype.requiredModules = function () {
        return getRequiredModules(this);
    };
    /**
     * Appends the control within the given HTML Div element.
     *
     * {% codeBlock src='spreadsheet/appendTo/index.md' %}{% endcodeBlock %}
     *
     * @param {string | HTMLElement} selector - Target element where control needs to be appended.
     * @returns {void} - Appends the control within the given HTML Div element.
     */
    Spreadsheet.prototype.appendTo = function (selector) {
        _super.prototype.appendTo.call(this, selector);
    };
    /**
     * Filters the range of cells in the sheet.
     *
     * @hidden
     * @param {FilterOptions} filterOptions - specifiy the FilterOptions.
     * @param {string} range - Specify the range
     * @returns {Promise<FilterEventArgs>} - Filters the range of cells in the sheet.
     */
    Spreadsheet.prototype.filter = function (filterOptions, range) {
        if (!this.allowFiltering) {
            return Promise.reject();
        }
        range = range || this.getActiveSheet().selectedRange;
        return _super.prototype.filter.call(this, filterOptions, range);
    };
    /**
     * Clears the filter changes of the sheet.
     *
     * {% codeBlock src='spreadsheet/clearFilter/index.md' %}{% endcodeBlock %}
     *
     * @param {string} field - Specify the field.
     * @param {number} sheetIndex - Specify the index of the sheet.
     * @returns {void} - To clear the filter.
     */
    Spreadsheet.prototype.clearFilter = function (field, sheetIndex) {
        this.notify(clearFilter, { field: field, sheetIndex: sheetIndex });
    };
    /**
     * Applies the filter UI in the range of cells in the sheet.
     *
     * {% codeBlock src='spreadsheet/applyFilter/index.md' %}{% endcodeBlock %}
     *
     * @param {PredicateModel[]} predicates - Specifies the predicates.
     * @param {string} range - Specify the range.
     * @returns {Promise<void>} - to apply the filter.
     */
    Spreadsheet.prototype.applyFilter = function (predicates, range) {
        var _this = this;
        if (!this.allowFiltering) {
            return Promise.reject();
        }
        var promise = new Promise(function (resolve) { resolve((function () { })()); });
        if (predicates && predicates.length) {
            var eventArgs_1;
            predicates.forEach(function (predicate) {
                eventArgs_1 = { instance: { options: { type: predicate.type, format: predicate.type === 'date' && 'yMd' } },
                    arg3: predicate.value, arg2: predicate.operator };
                _this.notify(fltrPrevent, eventArgs_1);
                predicate.value = eventArgs_1.arg3;
            });
        }
        var sheetIdx = range ? getSheetIndexFromAddress(this, range) : this.activeSheetIndex;
        var filterArgs = { predicates: predicates, range: range, isInternal: true, promise: promise, sIdx: sheetIdx };
        this.notify(initiateFilterUI, filterArgs);
        return filterArgs.promise;
    };
    /**
     * To add custom library function.
     *
     *  {% codeBlock src='spreadsheet/addCustomFunction/index.md' %}{% endcodeBlock %}
     *
     * @param {string} functionHandler - Custom function handler name
     * @param {string} functionName - Custom function name
     * @param  {string} formulaDescription - Specifies formula description.
     * @returns {void} - To add custom function.
     */
    Spreadsheet.prototype.addCustomFunction = function (functionHandler, functionName, formulaDescription) {
        _super.prototype.addCustomFunction.call(this, functionHandler, functionName, formulaDescription);
        this.notify(refreshFormulaDatasource, null);
    };
    /**
     * Sets or releases the read-only status for a specified range in the given sheet.
     *
     * @param {boolean} readOnly - A boolean indicating whether the range should be set as read-only (true) or editable (false).
     * @param {string} range - The range to be set as read-only. It can be a single cell, a range of cells (e.g., "A1:B5"), a column (e.g., "C"), or a row (e.g., "10").
     * @param {number} sheetIndex - The index of the sheet where the range is located. If not provided, it defaults to the active sheet index.
     * @returns {void} - Sets the read-only status for a specified range in the given sheet.
     *
     */
    Spreadsheet.prototype.setRangeReadOnly = function (readOnly, range, sheetIndex) {
        range = range || this.getActiveSheet().selectedRange;
        var sheetIdx = sheetIndex || this.activeSheetIndex;
        var indexes = getSwapRange(getRangeIndexes(range));
        var sheet = getSheet(this, sheetIdx);
        if (isNullOrUndefined(sheet)) {
            return;
        }
        this.notify('actionBegin', { action: 'readonly', eventArgs: { readOnly: readOnly, range: range, sheetIdx: sheetIdx } });
        if (isColumnRange(range) || (indexes[0] === 0 && indexes[2] === sheet.rowCount - 1)) {
            for (var col = indexes[1]; col <= indexes[3]; col++) {
                if (!readOnly) {
                    var column = getColumn(sheet, col);
                    if (column && column.isReadOnly) {
                        delete column.isReadOnly;
                    }
                }
                else {
                    setColumn(sheet, col, { isReadOnly: readOnly });
                }
            }
        }
        else if (isRowRange(range) || (indexes[1] === 0 && indexes[3] === sheet.colCount - 1)) {
            for (var row = indexes[0]; row <= indexes[2]; row++) {
                if (!readOnly) {
                    var rowValue = getRow(sheet, row);
                    if (rowValue && rowValue.isReadOnly) {
                        delete rowValue.isReadOnly;
                    }
                }
                else {
                    setRow(sheet, row, { isReadOnly: readOnly });
                }
            }
        }
        else {
            for (var colIdx = indexes[1]; colIdx <= indexes[3]; colIdx++) {
                for (var rowIdx = indexes[0]; rowIdx <= indexes[2]; rowIdx++) {
                    if (!readOnly) {
                        var cell = getCell(rowIdx, colIdx, sheet);
                        if (cell && cell.isReadOnly) {
                            delete cell.isReadOnly;
                        }
                    }
                    else {
                        setCell(rowIdx, colIdx, sheet, { isReadOnly: readOnly }, true);
                    }
                }
            }
        }
        // Added the e-readonly class to cell range/column for providing the customization option from sample end to the readonly mode cells.
        for (var colIndex = indexes[1]; colIndex <= indexes[3]; colIndex++) {
            for (var rowIndex = indexes[0]; rowIndex <= indexes[2]; rowIndex++) {
                var cell = this.getCell(rowIndex, colIndex);
                if (!readOnly && cell && cell.classList.contains('e-readonly')) {
                    cell.classList.remove('e-readonly');
                }
                else if (cell && !cell.classList.contains('e-readonly')) {
                    cell.className += ' e-readonly';
                }
            }
        }
        this.notify('actionComplete', { action: 'readonly', eventArgs: { readOnly: readOnly, range: range, sheetIdx: sheetIdx } });
    };
    var Spreadsheet_1;
    __decorate$9([
        Property('')
    ], Spreadsheet.prototype, "cssClass", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "allowScrolling", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "allowResizing", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "showAggregate", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "enableClipboard", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "enableContextMenu", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "enableKeyboardNavigation", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "enableKeyboardShortcut", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "allowUndoRedo", void 0);
    __decorate$9([
        Property(true)
    ], Spreadsheet.prototype, "allowWrap", void 0);
    __decorate$9([
        Complex({}, SelectionSettings)
    ], Spreadsheet.prototype, "selectionSettings", void 0);
    __decorate$9([
        Complex({}, ScrollSettings)
    ], Spreadsheet.prototype, "scrollSettings", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeCellRender", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeSelect", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "select", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "contextMenuBeforeOpen", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "fileMenuBeforeOpen", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "contextMenuBeforeClose", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "dialogBeforeOpen", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "fileMenuBeforeClose", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "contextMenuItemSelect", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "fileMenuItemSelect", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeDataBound", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "dataBound", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "dataSourceChanged", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "cellEdit", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "cellEditing", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "cellEdited", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "cellSave", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeCellSave", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "created", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeSort", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeHyperlinkCreate", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "afterHyperlinkCreate", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeHyperlinkClick", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "afterHyperlinkClick", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "beforeConditionalFormat", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "actionBegin", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "actionComplete", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "openComplete", void 0);
    __decorate$9([
        Event$1()
    ], Spreadsheet.prototype, "sortComplete", void 0);
    __decorate$9([
        Property('USD')
    ], Spreadsheet.prototype, "currencyCode", void 0);
    Spreadsheet = Spreadsheet_1 = __decorate$9([
        NotifyPropertyChanges
    ], Spreadsheet);
    return Spreadsheet;
}(Workbook));

export { AutoFill, AutoFillSettings, Axis, BasicFormulas, Border, CalcSheetFamilyItem, Calculate, CalculateCommon, Cell, CellFormat, CellRenderer, CellStyle, Chart, Clipboard, Column, CommonErrors, ConditionalFormat, ConditionalFormatting, ContextMenu, DISABLED, DataBind, DataLabelSettings, DataValidation, DefineName, Delete, Edit, ExcelFileFormats, Filter, FilterCollection, FindAndReplace, Format, Formula, FormulaBar, FormulaError, FormulaInfo, FormulasErrorsStrings, Hyperlink, Image$1 as Image, Insert, KeyboardNavigation, KeyboardShortcut, LegendSettings, MajorGridLines, MarkerSettings, Merge, MinorGridLines, NumberFormat, Open, OpenSettings, Parser, ProtectSettings, ProtectSheet, Range, Render, Resize, Ribbon$1 as Ribbon, Row, RowRenderer, Save, Scroll, ScrollSettings, Selection, SelectionSettings, Sheet, SheetRender, SheetTabs, ShowHide, Sort, SortCollection, Spreadsheet, SpreadsheetChart, SpreadsheetHyperlink, SpreadsheetImage, SpreadsheetNote, UndoRedo, UsedRange, Validation, ValueChangedArgs, VirtualScroll, WRAPTEXT, Workbook, WorkbookAutoFill, WorkbookCellFormat, WorkbookChart, WorkbookConditionalFormat, WorkbookDataValidation, WorkbookDelete, WorkbookEdit, WorkbookFilter, WorkbookFindAndReplace, WorkbookFormula, WorkbookHyperlink, WorkbookImage, WorkbookInsert, WorkbookMerge, WorkbookNumberFormat, WorkbookOpen, WorkbookProtectSheet, WorkbookSave, WorkbookSort, WrapText, actionEvents, activeCellChanged, activeCellMergedRange, activeSheetChanged, addChartEle, addContextMenuItems, addDPRValue, addFileMenuItems, addHighlight, addHyperlink, addListValidationDropdown, addNote, addRibbonTabs, addToolbarItems, addressHandle, afterHyperlinkClick, afterHyperlinkCreate, aggregateComputation, applyCF, applyCellFormat, applyLockCells, applyMerge, applyNumberFormatting, applyPredicates, applyProtect, applySort, autoFill, autoFit, beforeCellUpdate, beforeCheckboxRender, beforeContentLoaded, beforeDataBound, beforeDelete, beforeFilter, beforeHyperlinkClick, beforeHyperlinkCreate, beforeInsert, beforeRibbonCreate, beforeSort, beforeVirtualContentLoaded, beginAction, beginSave, cMenuBeforeOpen, calculateFormula, cellNavigate, cellValidation, chartDesignTab, chartRangeSelection, checkColumnValidation, checkDateFormat, checkFormulaRef, checkIsFormula, checkMerge, checkNumberFormat, checkPrevMerge, checkRange, checkUniqueRange, clear, clearAllFilter, clearCF, clearCFRule, clearCellRef, clearChartBorder, clearCopy, clearFilter, clearFormulaDependentCells, clearInvalid, clearRange, clearUndoRedoCollection, clearViewer, click, colWidthChanged, collaborativeUpdate, columnIndex, commputeFormulaValue, completeAction, configureLocalizedFormat, contentLoaded, contextMenuOpen, convertToDefaultFormat, copy, count, createHyperlinkElement, createImageElement, createNoteIndicator, created, cut, dataBound, dataChanged, dataSourceChanged, dataValidate, dateToInt, deInitProperties, defaultLocale, deleteAction, deleteChart, deleteChartColl, deleteFormatRange, deleteHyperlink, deleteImage, deleteModel, deleteNote, destroyComponent, dialog, duplicateSheet, duplicateSheetFilterHandler, editAlert, editHyperlink, editNote, editOperation, editValue, enableContextMenuItems, enableFileMenuItems, enableFormulaInput, enableRibbonTabs, enableToolbarItems, evaluate, executeTaskAsync, exportDialog, fillColor, filterByCellValue, filterCellKeyDown, filterComplete, filterRangeAlert, find, findAllValues, findCount, findDlg, findHandler, findKeyUp, findMaxValue, findToolDlg, findWorkbookHandler, finiteAlert, focus, focusBorder, focusChartBorder, focusRenameInput, fontColor, forRefSelRender, formulaBar, formulaBarOperation, formulaBarUpdate, formulaInValidation, formulaKeyUp, formulaOperation, freeze, getAddressFromSelectedRange, getAddressInfo, getAlphalabel, getAutoDetectFormatParser, getBeforeActionData, getBorderHeight, getBorderWidth, getBottomOffset, getCell, getCellAddress, getCellIndexes, getCellPosition, getCellRefValue, getChartColIdxFromClientX, getChartRowIdxFromClientY, getChartsIndexes, getClientX, getClientY, getColGroupWidth, getColIdxFromClientX, getColIndex, getColorCode, getColumn, getColumnHeaderText, getColumnWidth, getColumnsWidth, getCustomColors, getDPRValue, getData, getDataRange, getEndEvent, getExcludedColumnWidth, getFillInfo, getFilterRange, getFilteredColumn, getFormatFromType, getFormattedBarText, getFormattedCellObject, getGcd, getIndexesFromAddress, getLeadingSpaces, getLineHeight, getLines, getMaxHgt, getMaxSheetId, getModel, getMoveEvent, getPageX, getPageY, getRangeAddress, getRangeFromAddress, getRangeIndexes, getRequiredModules, getRightIdx, getRow, getRowHeight, getRowIdxFromClientY, getRowsHeight, getScrollBarWidth, getSelectedRange, getSheet, getSheetIndex, getSheetIndexByName, getSheetIndexFromAddress, getSheetIndexFromId, getSheetName, getSheetNameCount, getSheetNameFromAddress, getSheetProperties, getSiblingsHeight, getSingleSelectedRange, getSkeletonVal, getSplittedAddressForColumn, getStandardHeight, getStartEvent, getSwapRange, getTextHeight, getTextHeightWithBorder, getTextSpace, getTextWidth, getTrailingSpaces, getTypeFromFormat, getUniqueRange, getUpdateUsingRaf, getUpdatedFormula, getUpdatedFormulaOnInsertDelete, getUpdatedRange, getUpdatedScrollPosition, getValueFromFormat, getViewportIndexes, getWorkbookRequiredModules, getautofillDDB, goToSheet, goto, gotoDlg, hasTemplate, hiddenMerge, hideAutoFillElement, hideAutoFillOptions, hideFileMenuItems, hideRibbonTabs, hideSheet, hideShow, hideToolbarItems, importProtectWorkbook, inRange, inView, initSheet, initiateChart, initiateChartModel, initiateCur, initiateCustomSort, initiateDataValidation, initiateEdit, initiateFilter, initiateFilterUI, initiateFormulaReference, initiateHyperlink, initiateSort, initiatelink, insert, insertChart, insertDesignChart, insertFormatRange, insertImage, insertMerge, insertModel, insertSheetTab, intToDate, invalidData, isCellReference, isChar, isColumnRange, isColumnSelected, isCustomDateTime, isDateTime, isDiscontinuousRange, isExternalFileLink, isFilterHidden, isFormulaBarEdit, isHeightCheckNeeded, isHiddenCol, isHiddenRow, isImported, isInMultipleRange, isInRange, isLocked, isLockedCells, isMouseDown, isMouseMove, isMouseUp, isNavigationKey, isNumber, isReadOnly, isReadOnlyCells, isRowRange, isRowSelected, isSingleCell, isTouchEnd, isTouchMove, isTouchStart, isUndefined, isValidCellReference, isValidation, keyCodes, keyDown, keyUp, locale, localeData, localizedFormatAction, locateElem, mergedRange, mouseDown, mouseUpAfterSelection, moveOrDuplicateSheet, moveSheet, moveSheetHandler, onContentScroll, onHorizontalScroll, onSave, onVerticalScroll, openFailure, openHyperlink, openSuccess, overlay, overlayEleSize, parseDecimalNumber, parseFormulaArgument, parseIntValue, parseLocaleNumber, paste, performAutoFill, performUndoRedo, positionAutoFillElement, processIdx, propertyChange, protectCellFormat, protectSelection, protectSheet, protectSheetWorkBook, protectWorkbook, protectsheetHandler, queryCellInfo, rangeSelectionByKeydown, reApplyFormula, readonlyAlert, reapplyFilter, refreshCell, refreshCellElement, refreshChart, refreshChartCellModel, refreshChartCellObj, refreshChartCellOnInit, refreshChartSize, refreshCheckbox, refreshClipboard, refreshFilterCellsOnResize, refreshFilterRange, refreshFormulaDatasource, refreshImagePosition, refreshImgCellObj, refreshInsertDelete, refreshOverlayElem, refreshRibbon, refreshRibbonIcons, refreshSheetTabs, removeAllChildren, removeContextMenuItems, removeDataValidation, removeDesignChart, removeElements, removeHighlight, removeHyperlink, removeNoteContainer, removeRangeEle, removeSheetTab, removeUniquecol, removeWorkbookProtection, renameSheetTab, renderCFDlg, renderFilterCell, renderInsertDlg, replace, replaceAll, replaceAllDialog, ribbon, ribbonClick, rowFillHandler, rowHeightChanged, saveCompleted, saveError, selectAutoFillRange, selectRange, selectionComplete, selectionStatus, setActionData, setAriaOptions, setAutoFill, setAutoFit, setCFRule, setCell, setCellFormat, setChart, setColMinWidth, setColumn, setFilteredCollection, setImage, setLinkModel, setLockCells, setMaxHgt, setMerge, setPosition, setProtectWorkbook, setResize, setRow, setRowEleHeight, setRowHeight, setStandardHeight, setStyleAttribute, setTextLineHeight, setUndoRedo, setVisibleMergeIndex, setWidthAndHeight, sheetCreated, sheetNameUpdate, sheetRenameUpdate, sheetTabs, sheetsDestroyed, showAggregate, showFindAlert, showNote, showSheet, skipDefaultValue, skipHiddenIdx, sortComplete, sortImport, sortRangeAlert, spreadsheetCreated, spreadsheetDestroyed, startEdit, tabSwitch, textDecorationUpdate, toDate, toFraction, toggleProtect, triggerDataChange, unMerge, unProtectSheetPassword, unProtectWorkbook, undoRedoForChartDesign, unprotectSheet, unprotectsheetHandler, updateAction, updateCFModel, updateCell, updateHighlight, updateMergeBorder, updateNoteContainer, updateRowColCount, updateScroll, updateScrollValue, updateSelectedRange, updateSheetFromDataSource, updateSortCollection, updateSortedDataOnCell, updateTableWidth, updateToggle, updateToggleItem, updateTranslate, updateUndoRedoCollection, updateUsedRange, updateView, updateWrapCell, validationError, virtualContentLoaded, workBookeditAlert, workbookDestroyed, workbookEditOperation, workbookFormulaOperation, workbookLocale, workbookOpen, workbookReadonlyAlert, wrap, wrapEvent };
//# sourceMappingURL=ej2-spreadsheet.es5.js.map
