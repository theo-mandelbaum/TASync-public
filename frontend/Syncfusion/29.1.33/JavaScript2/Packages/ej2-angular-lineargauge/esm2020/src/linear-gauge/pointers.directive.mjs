import { Directive, ContentChildren } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['animationDuration', 'border', 'color', 'description', 'enableDrag', 'height', 'imageUrl', 'linearGradient', 'markerType', 'offset', 'opacity', 'placement', 'position', 'radialGradient', 'roundedCornerRadius', 'text', 'textStyle', 'type', 'value', 'width'];
let outputs = [];
/**
 * Represents the directive to render and customize the pointers in an axis of linear gauge.
 * ```html
 * <e-pointers><e-pointer></e-pointer></e-pointers>
 * ```
 */
export class PointerDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
PointerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PointerDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
PointerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: PointerDirective, selector: "e-pointers>e-pointer", inputs: { animationDuration: "animationDuration", border: "border", color: "color", description: "description", enableDrag: "enableDrag", height: "height", imageUrl: "imageUrl", linearGradient: "linearGradient", markerType: "markerType", offset: "offset", opacity: "opacity", placement: "placement", position: "position", radialGradient: "radialGradient", roundedCornerRadius: "roundedCornerRadius", text: "text", textStyle: "textStyle", type: "type", value: "value", width: "width" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PointerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-pointers>e-pointer',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * Pointer Array Directive
 * @private
 */
export class PointersDirective extends ArrayBase {
    constructor() {
        super('pointers');
    }
}
PointersDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PointersDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
PointersDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: PointersDirective, selector: "ej-linear-gauge>e-axes>e-axis>e-pointers", queries: [{ propertyName: "children", predicate: PointerDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: PointersDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ej-linear-gauge>e-axes>e-axis>e-pointers',
                    queries: {
                        children: new ContentChildren(PointerDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlcnMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpbmVhci1nYXVnZS9wb2ludGVycy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBb0IsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLDhCQUE4QixDQUFDOztBQUloRixJQUFJLEtBQUssR0FBYSxDQUFDLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3hSLElBQUksT0FBTyxHQUFhLEVBQUUsQ0FBQztBQUMzQjs7Ozs7R0FLRztBQVNILE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxXQUE2QjtJQXlHL0QsWUFBb0IsZ0JBQWlDO1FBQ2pELEtBQUssRUFBRSxDQUFDO1FBRFEscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQUVqRCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztJQUNuQyxDQUFDOzs2R0E5R1EsZ0JBQWdCO2lHQUFoQixnQkFBZ0I7MkZBQWhCLGdCQUFnQjtrQkFSNUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxNQUFNLEVBQUUsS0FBSztvQkFDYixPQUFPLEVBQUUsT0FBTztvQkFDaEIsT0FBTyxFQUFFLEVBRVI7aUJBQ0o7O0FBa0hEOzs7R0FHRztBQU9ILE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxTQUE0QjtJQUMvRDtRQUNJLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0QixDQUFDOzs4R0FIUSxpQkFBaUI7a0dBQWpCLGlCQUFpQix5R0FIUSxnQkFBZ0I7MkZBR3pDLGlCQUFpQjtrQkFON0IsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsMENBQTBDO29CQUNwRCxPQUFPLEVBQUU7d0JBQ0wsUUFBUSxFQUFFLElBQUksZUFBZSxDQUFDLGdCQUFnQixDQUFDO3FCQUNsRDtpQkFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVmlld0NvbnRhaW5lclJlZiwgQ29udGVudENoaWxkcmVuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wbGV4QmFzZSwgQXJyYXlCYXNlLCBzZXRWYWx1ZSB9IGZyb20gJ0BzeW5jZnVzaW9uL2VqMi1hbmd1bGFyLWJhc2UnO1xuXG5cblxubGV0IGlucHV0OiBzdHJpbmdbXSA9IFsnYW5pbWF0aW9uRHVyYXRpb24nLCAnYm9yZGVyJywgJ2NvbG9yJywgJ2Rlc2NyaXB0aW9uJywgJ2VuYWJsZURyYWcnLCAnaGVpZ2h0JywgJ2ltYWdlVXJsJywgJ2xpbmVhckdyYWRpZW50JywgJ21hcmtlclR5cGUnLCAnb2Zmc2V0JywgJ29wYWNpdHknLCAncGxhY2VtZW50JywgJ3Bvc2l0aW9uJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JvdW5kZWRDb3JuZXJSYWRpdXMnLCAndGV4dCcsICd0ZXh0U3R5bGUnLCAndHlwZScsICd2YWx1ZScsICd3aWR0aCddO1xubGV0IG91dHB1dHM6IHN0cmluZ1tdID0gW107XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGRpcmVjdGl2ZSB0byByZW5kZXIgYW5kIGN1c3RvbWl6ZSB0aGUgcG9pbnRlcnMgaW4gYW4gYXhpcyBvZiBsaW5lYXIgZ2F1Z2UuXG4gKiBgYGBodG1sXG4gKiA8ZS1wb2ludGVycz48ZS1wb2ludGVyPjwvZS1wb2ludGVyPjwvZS1wb2ludGVycz5cbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2UtcG9pbnRlcnM+ZS1wb2ludGVyJyxcbiAgICBpbnB1dHM6IGlucHV0LFxuICAgIG91dHB1dHM6IG91dHB1dHMsICAgIFxuICAgIHF1ZXJpZXM6IHtcblxuICAgIH1cbn0pXG5leHBvcnQgY2xhc3MgUG9pbnRlckRpcmVjdGl2ZSBleHRlbmRzIENvbXBsZXhCYXNlPFBvaW50ZXJEaXJlY3RpdmU+IHtcbiAgICBwdWJsaWMgZGlyZWN0aXZlUHJvcExpc3Q6IGFueTtcblx0XG5cblxuICAgIC8qKiBcbiAgICAgKiBTZXRzIGFuZCBnZXRzIHRoZSB0eXBlIG9mIHBvaW50ZXIgaW4gYXhpcy4gVGhlcmUgYXJlIHR3byB0eXBlcyBvZiBwb2ludGVyczogTWFya2VyIGFuZCBCYXIuXG4gICAgICogQGRlZmF1bHQgTWFya2VyXG4gICAgICovXG4gICAgcHVibGljIHR5cGU6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgZHVyYXRpb24gb2YgYW5pbWF0aW9uIGluIHBvaW50ZXIuXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHB1YmxpYyBhbmltYXRpb25EdXJhdGlvbjogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTZXRzIGFuZCBnZXRzIHRoZSBvcHRpb25zIHRvIGN1c3RvbWl6ZSB0aGUgc3R5bGUgcHJvcGVydGllcyBvZiB0aGUgYm9yZGVyIGZvciBwb2ludGVycy5cbiAgICAgKi9cbiAgICBwdWJsaWMgYm9yZGVyOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNldHMgYW5kIGdldHMgdGhlIGNvbG9yIG9mIHRoZSBwb2ludGVyLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBwdWJsaWMgY29sb3I6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgZGVzY3JpcHRpb24gZm9yIHRoZSBwb2ludGVyLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBwdWJsaWMgZGVzY3JpcHRpb246IGFueTtcbiAgICAvKiogXG4gICAgICogRW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgZHJhZyBtb3ZlbWVudCBvZiBwb2ludGVyIHRvIHVwZGF0ZSB0aGUgcG9pbnRlciB2YWx1ZS5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHB1YmxpYyBlbmFibGVEcmFnOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNldHMgYW5kIGdldHMgdGhlIGhlaWdodCBvZiB0aGUgcG9pbnRlci5cbiAgICAgKiBAZGVmYXVsdCAyMFxuICAgICAqL1xuICAgIHB1YmxpYyBoZWlnaHQ6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgVVJMIHBhdGggZm9yIHRoZSBpbWFnZSBpbiBtYXJrZXIgd2hlbiB0aGUgbWFya2VyIHR5cGUgaXMgc2V0IGFzIGltYWdlLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBwdWJsaWMgaW1hZ2VVcmw6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgcHJvcGVydGllcyB0byByZW5kZXIgYSBsaW5lYXIgZ3JhZGllbnQgZm9yIHRoZSBwb2ludGVyLiBcbiAgICAgKiBJZiBib3RoIGxpbmVhciBhbmQgcmFkaWFsIGdyYWRpZW50IGlzIHNldCwgdGhlbiB0aGUgbGluZWFyIGdyYWRpZW50IHdpbGwgYmUgcmVuZGVyZWQgaW4gdGhlIHBvaW50ZXIuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyBsaW5lYXJHcmFkaWVudDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTZXRzIGFuZCBnZXRzIHRoZSB0eXBlIG9mIHRoZSBtYXJrZXIgZm9yIHBvaW50ZXJzIGluIGF4aXMuXG4gICAgICogQGRlZmF1bHQgSW52ZXJ0ZWRUcmlhbmdsZVxuICAgICAqL1xuICAgIHB1YmxpYyBtYXJrZXJUeXBlOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNldHMgYW5kIGdldHMgdGhlIHZhbHVlIHRvIHBvc2l0aW9uIHRoZSBwb2ludGVyIGZyb20gdGhlIGF4aXMuXG4gICAgICogQGRlZmF1bHQgJzAnXG4gICAgICovXG4gICAgcHVibGljIG9mZnNldDogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTZXRzIGFuZCBnZXRzIHRoZSBvcGFjaXR5IG9mIHBvaW50ZXIgaW4gbGluZWFyIGdhdWdlLlxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICBwdWJsaWMgb3BhY2l0eTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTZXRzIGFuZCBnZXRzIHRoZSBwbGFjZSBvZiB0aGUgcG9pbnRlci5cbiAgICAgKiBAZGVmYXVsdCBGYXJcbiAgICAgKi9cbiAgICBwdWJsaWMgcGxhY2VtZW50OiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNldHMgYW5kIGdldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb2ludGVyLlxuICAgICAqIEBkZWZhdWx0IEF1dG9cbiAgICAgKi9cbiAgICBwdWJsaWMgcG9zaXRpb246IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgcHJvcGVydGllcyB0byByZW5kZXIgYSByYWRpYWwgZ3JhZGllbnQgZm9yIHRoZSBwb2ludGVyLlxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBwdWJsaWMgcmFkaWFsR3JhZGllbnQ6IGFueTtcbiAgICAvKiogXG4gICAgICogU2V0cyBhbmQgZ2V0cyB0aGUgY29ybmVyIHJhZGl1cyBmb3IgcG9pbnRlci5cbiAgICAgKiBAZGVmYXVsdCAxMFxuICAgICAqL1xuICAgIHB1YmxpYyByb3VuZGVkQ29ybmVyUmFkaXVzOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNwZWNpZmllcyB0aGUgdGV4dCB0aGF0IHdpbGwgYmUgZGlzcGxheWVkIGFzIHRoZSBwb2ludGVyIGluIExpbmVhciBHYXVnZS4gVG8gZGlzcGxheSB0aGUgdGV4dCBwb2ludGVyLCB0aGUgYG1hcmtlclR5cGVgIHByb3BlcnR5IG11c3QgYmUgc2V0IHRvIGBUZXh0YC5cbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHB1YmxpYyB0ZXh0OiBhbnk7XG4gICAgLyoqIFxuICAgICAqIERlZmluZXMgdGhlIGZvbnQgcHJvcGVydGllcyBzdWNoIGFzIGZvbnQtc2l6ZSwgZm9udCBmYW1pbHkgYW5kIG90aGVycyBmb3IgdGhlIHRleHQgcG9pbnRlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgdGV4dFN0eWxlOiBhbnk7XG4gICAgLyoqIFxuICAgICAqIFNldHMgYW5kIGdldHMgdGhlIHZhbHVlIG9mIHRoZSBwb2ludGVyIGluIGF4aXMuXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHB1YmxpYyB2YWx1ZTogYW55O1xuICAgIC8qKiBcbiAgICAgKiBTZXRzIGFuZCBnZXRzIHRoZSB3aWR0aCBvZiB0aGUgcG9pbnRlci5cbiAgICAgKiBAZGVmYXVsdCAyMFxuICAgICAqL1xuICAgIHB1YmxpYyB3aWR0aDogYW55O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOlZpZXdDb250YWluZXJSZWYpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgc2V0VmFsdWUoJ2N1cnJlbnRJbnN0YW5jZScsIHRoaXMsIHRoaXMudmlld0NvbnRhaW5lclJlZik7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudHMob3V0cHV0cyk7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlUHJvcExpc3QgPSBpbnB1dDtcbiAgICB9XG59XG5cbi8qKlxuICogUG9pbnRlciBBcnJheSBEaXJlY3RpdmVcbiAqIEBwcml2YXRlXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnZWotbGluZWFyLWdhdWdlPmUtYXhlcz5lLWF4aXM+ZS1wb2ludGVycycsXG4gICAgcXVlcmllczoge1xuICAgICAgICBjaGlsZHJlbjogbmV3IENvbnRlbnRDaGlsZHJlbihQb2ludGVyRGlyZWN0aXZlKVxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFBvaW50ZXJzRGlyZWN0aXZlIGV4dGVuZHMgQXJyYXlCYXNlPFBvaW50ZXJzRGlyZWN0aXZlPiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdwb2ludGVycycpO1xuICAgIH1cbn0iXX0=