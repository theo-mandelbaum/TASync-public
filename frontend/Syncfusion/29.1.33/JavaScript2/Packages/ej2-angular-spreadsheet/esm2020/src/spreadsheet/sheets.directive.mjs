import { Directive, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { RowsDirective } from './rows.directive';
import { ColumnsDirective } from './columns.directive';
import { RangesDirective } from './ranges.directive';
import { ConditionalFormatsDirective } from './conditionalformats.directive';
import * as i0 from "@angular/core";
let input = ['activeCell', 'colCount', 'columns', 'conditionalFormats', 'frozenColumns', 'frozenRows', 'index', 'isProtected', 'name', 'paneTopLeftCell', 'password', 'protectSettings', 'ranges', 'rowCount', 'rows', 'selectedRange', 'showGridLines', 'showHeaders', 'standardHeight', 'state', 'topLeftCell', 'usedRange'];
let outputs = [];
/**
 * `e-sheet` directive represent a sheet of the Angular Spreadsheet.
 * It must be contained in a Spreadsheet component(`ejs-spreadsheet`).
 * ```html
 * <ejs-spreadsheet>
 *   <e-sheets>
 *    <e-sheet></e-sheet>
 *    <e-sheet></e-sheet>
 *   </e-sheets>
 * </ejs-spreadsheet>
 * ```
 */
export class SheetDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['rows', 'columns', 'ranges', 'conditionalFormats'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
SheetDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: SheetDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
SheetDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: SheetDirective, selector: "e-sheets>e-sheet", inputs: { activeCell: "activeCell", colCount: "colCount", columns: "columns", conditionalFormats: "conditionalFormats", frozenColumns: "frozenColumns", frozenRows: "frozenRows", index: "index", isProtected: "isProtected", name: "name", paneTopLeftCell: "paneTopLeftCell", password: "password", protectSettings: "protectSettings", ranges: "ranges", rowCount: "rowCount", rows: "rows", selectedRange: "selectedRange", showGridLines: "showGridLines", showHeaders: "showHeaders", standardHeight: "standardHeight", state: "state", topLeftCell: "topLeftCell", usedRange: "usedRange" }, queries: [{ propertyName: "childRows", first: true, predicate: RowsDirective, descendants: true }, { propertyName: "childColumns", first: true, predicate: ColumnsDirective, descendants: true }, { propertyName: "childRanges", first: true, predicate: RangesDirective, descendants: true }, { propertyName: "childConditionalFormats", first: true, predicate: ConditionalFormatsDirective, descendants: true }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: SheetDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-sheets>e-sheet',
                    inputs: input,
                    outputs: outputs,
                    queries: {
                        childRows: new ContentChild(RowsDirective),
                        childColumns: new ContentChild(ColumnsDirective),
                        childRanges: new ContentChild(RangesDirective),
                        childConditionalFormats: new ContentChild(ConditionalFormatsDirective)
                    }
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * Sheet Array Directive
 * @private
 */
export class SheetsDirective extends ArrayBase {
    constructor() {
        super('sheets');
    }
}
SheetsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: SheetsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
SheetsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: SheetsDirective, selector: "ejs-spreadsheet>e-sheets", queries: [{ propertyName: "children", predicate: SheetDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: SheetsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ejs-spreadsheet>e-sheets',
                    queries: {
                        children: new ContentChildren(SheetDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,