import { __decorate } from "tslib";
import { Directive, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { Template } from '@syncfusion/ej2-angular-base';
import * as i0 from "@angular/core";
let input = ['animationDelay', 'animationDuration', 'border', 'clusterSettings', 'colorValuePath', 'dashArray', 'dataSource', 'enableDrag', 'fill', 'height', 'heightValuePath', 'highlightSettings', 'imageUrl', 'imageUrlValuePath', 'initialMarkerSelection', 'latitudeValuePath', 'legendText', 'longitudeValuePath', 'offset', 'opacity', 'query', 'selectionSettings', 'shape', 'shapeValuePath', 'template', 'tooltipSettings', 'visible', 'width', 'widthValuePath'];
let outputs = [];
/**
 * Represents the directive to define the markers in the maps.
 * ```html
 * <e-layers>
 * <e-layer>
 * <e-markerSettings>
 * <e-markerSetting>
 * </e-markerSetting>
 * </e-markerSettings>
 * </e-layer>
 * </e-layers>
 * ```
 */
export class MarkerDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
MarkerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: MarkerDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
MarkerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: MarkerDirective, selector: "e-layer>e-markerSettings>e-markerSetting", inputs: { animationDelay: "animationDelay", animationDuration: "animationDuration", border: "border", clusterSettings: "clusterSettings", colorValuePath: "colorValuePath", dashArray: "dashArray", dataSource: "dataSource", enableDrag: "enableDrag", fill: "fill", height: "height", heightValuePath: "heightValuePath", highlightSettings: "highlightSettings", imageUrl: "imageUrl", imageUrlValuePath: "imageUrlValuePath", initialMarkerSelection: "initialMarkerSelection", latitudeValuePath: "latitudeValuePath", legendText: "legendText", longitudeValuePath: "longitudeValuePath", offset: "offset", opacity: "opacity", query: "query", selectionSettings: "selectionSettings", shape: "shape", shapeValuePath: "shapeValuePath", template: "template", tooltipSettings: "tooltipSettings", visible: "visible", width: "width", widthValuePath: "widthValuePath" }, queries: [{ propertyName: "template", first: true, predicate: ["template"], descendants: true }, { propertyName: "tooltipSettings_template", first: true, predicate: ["tooltipSettingsTemplate"], descendants: true }], usesInheritance: true, ngImport: i0 });
__decorate([
    Template()
], MarkerDirective.prototype, "template", void 0);
__decorate([
    Template()
], MarkerDirective.prototype, "tooltipSettings_template", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: MarkerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-layer>e-markerSettings>e-markerSetting',
                    inputs: input,
                    outputs: outputs,
                    queries: {}
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { template: [{
                type: ContentChild,
                args: ['template']
            }], tooltipSettings_template: [{
                type: ContentChild,
                args: ['tooltipSettingsTemplate']
            }] } });
/**
 * Marker Array Directive
 * @private
 */
export class MarkersDirective extends ArrayBase {
    constructor() {
        super('markersettings');
    }
}
MarkersDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: MarkersDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
MarkersDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: MarkersDirective, selector: "e-layer>e-markerSettings", queries: [{ propertyName: "children", predicate: MarkerDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: MarkersDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-layer>e-markerSettings',
                    queries: {
                        children: new ContentChildren(MarkerDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,