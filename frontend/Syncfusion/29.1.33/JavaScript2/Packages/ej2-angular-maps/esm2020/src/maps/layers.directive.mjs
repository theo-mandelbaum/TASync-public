import { Directive, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { InitialShapeSelectionsDirective } from './initialshapeselection.directive';
import { MarkersDirective } from './markersettings.directive';
import { BubblesDirective } from './bubblesettings.directive';
import { NavigationLinesDirective } from './navigationlinesettings.directive';
import * as i0 from "@angular/core";
let input = ['animationDuration', 'bubbleSettings', 'dataLabelSettings', 'dataSource', 'geometryType', 'highlightSettings', 'initialShapeSelection', 'markerClusterSettings', 'markerSettings', 'navigationLineSettings', 'polygonSettings', 'query', 'selectionSettings', 'shapeData', 'shapeDataPath', 'shapePropertyPath', 'shapeSettings', 'toggleLegendSettings', 'tooltipSettings', 'type', 'urlTemplate', 'visible'];
let outputs = [];
/**
 * Represents the directive to define the layer of the maps.
 * ```html
 * <e-layers>
 * <e-layer></e-layer>
 * </e-layers>
 * ```
 */
export class LayerDirective extends ComplexBase {
    constructor(viewContainerRef) {
        super();
        this.viewContainerRef = viewContainerRef;
        this.tags = ['initialShapeSelection', 'markerSettings', 'bubbleSettings', 'navigationLineSettings'];
        setValue('currentInstance', this, this.viewContainerRef);
        this.registerEvents(outputs);
        this.directivePropList = input;
    }
}
LayerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: LayerDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
LayerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: LayerDirective, selector: "e-layers>e-layer", inputs: { animationDuration: "animationDuration", bubbleSettings: "bubbleSettings", dataLabelSettings: "dataLabelSettings", dataSource: "dataSource", geometryType: "geometryType", highlightSettings: "highlightSettings", initialShapeSelection: "initialShapeSelection", markerClusterSettings: "markerClusterSettings", markerSettings: "markerSettings", navigationLineSettings: "navigationLineSettings", polygonSettings: "polygonSettings", query: "query", selectionSettings: "selectionSettings", shapeData: "shapeData", shapeDataPath: "shapeDataPath", shapePropertyPath: "shapePropertyPath", shapeSettings: "shapeSettings", toggleLegendSettings: "toggleLegendSettings", tooltipSettings: "tooltipSettings", type: "type", urlTemplate: "urlTemplate", visible: "visible" }, queries: [{ propertyName: "childInitialShapeSelection", first: true, predicate: InitialShapeSelectionsDirective, descendants: true }, { propertyName: "childMarkerSettings", first: true, predicate: MarkersDirective, descendants: true }, { propertyName: "childBubbleSettings", first: true, predicate: BubblesDirective, descendants: true }, { propertyName: "childNavigationLineSettings", first: true, predicate: NavigationLinesDirective, descendants: true }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: LayerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'e-layers>e-layer',
                    inputs: input,
                    outputs: outputs,
                    queries: {
                        childInitialShapeSelection: new ContentChild(InitialShapeSelectionsDirective),
                        childMarkerSettings: new ContentChild(MarkersDirective),
                        childBubbleSettings: new ContentChild(BubblesDirective),
                        childNavigationLineSettings: new ContentChild(NavigationLinesDirective)
                    }
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });
/**
 * Layer Array Directive
 * @private
 */
export class LayersDirective extends ArrayBase {
    constructor() {
        super('layers');
    }
}
LayersDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: LayersDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
LayersDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.0.3", type: LayersDirective, selector: "ej-maps>e-layers", queries: [{ propertyName: "children", predicate: LayerDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.3", ngImport: i0, type: LayersDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ej-maps>e-layers',
                    queries: {
                        children: new ContentChildren(LayerDirective)
                    },
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,