/**
 * Sched API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import QuestionCreateSchema from '../model/QuestionCreateSchema';
import QuestionSchema from '../model/QuestionSchema';
import ScheduleSchema from '../model/ScheduleSchema';
import ScheduleSchemaCreate from '../model/ScheduleSchemaCreate';
import SchoolSchema from '../model/SchoolSchema';
import ShiftSchema from '../model/ShiftSchema';
import ShiftSchemaCreate from '../model/ShiftSchemaCreate';
import SubjectCreateSchema from '../model/SubjectCreateSchema';
import SubjectSchema from '../model/SubjectSchema';
import SwapRequestSchema from '../model/SwapRequestSchema';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the backendSchedApiViewsAnswerQuestion operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsAnswerQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Answer Question
     * @param {String} questionId 
     * @param {module:api/DefaultApi~backendSchedApiViewsAnswerQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionSchema}
     */
    backendSchedApiViewsAnswerQuestion(questionId, callback) {
      let postBody = null;
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling backendSchedApiViewsAnswerQuestion");
      }

      let pathParams = {
        'question_id': questionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuestionSchema;
      return this.apiClient.callApi(
        '/sched_api/answer_question/{question_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCommentQuestion operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCommentQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Comment Question
     * @param {String} questionId 
     * @param {String} content 
     * @param {module:api/DefaultApi~backendSchedApiViewsCommentQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionSchema}
     */
    backendSchedApiViewsCommentQuestion(questionId, content, callback) {
      let postBody = null;
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling backendSchedApiViewsCommentQuestion");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling backendSchedApiViewsCommentQuestion");
      }

      let pathParams = {
        'question_id': questionId
      };
      let queryParams = {
        'content': content
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuestionSchema;
      return this.apiClient.callApi(
        '/sched_api/comment/{question_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCreateQuestion operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCreateQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Question
     * @param {String} subjectName 
     * @param {module:model/QuestionCreateSchema} questionCreateSchema 
     * @param {module:api/DefaultApi~backendSchedApiViewsCreateQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionSchema}
     */
    backendSchedApiViewsCreateQuestion(subjectName, questionCreateSchema, callback) {
      let postBody = questionCreateSchema;
      // verify the required parameter 'subjectName' is set
      if (subjectName === undefined || subjectName === null) {
        throw new Error("Missing the required parameter 'subjectName' when calling backendSchedApiViewsCreateQuestion");
      }
      // verify the required parameter 'questionCreateSchema' is set
      if (questionCreateSchema === undefined || questionCreateSchema === null) {
        throw new Error("Missing the required parameter 'questionCreateSchema' when calling backendSchedApiViewsCreateQuestion");
      }

      let pathParams = {
      };
      let queryParams = {
        'subject_name': subjectName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QuestionSchema;
      return this.apiClient.callApi(
        '/sched_api/question', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCreateSchedule operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCreateScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Schedule
     * @param {String} subjectName 
     * @param {module:model/ScheduleSchemaCreate} scheduleSchemaCreate 
     * @param {module:api/DefaultApi~backendSchedApiViewsCreateScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleSchema}
     */
    backendSchedApiViewsCreateSchedule(subjectName, scheduleSchemaCreate, callback) {
      let postBody = scheduleSchemaCreate;
      // verify the required parameter 'subjectName' is set
      if (subjectName === undefined || subjectName === null) {
        throw new Error("Missing the required parameter 'subjectName' when calling backendSchedApiViewsCreateSchedule");
      }
      // verify the required parameter 'scheduleSchemaCreate' is set
      if (scheduleSchemaCreate === undefined || scheduleSchemaCreate === null) {
        throw new Error("Missing the required parameter 'scheduleSchemaCreate' when calling backendSchedApiViewsCreateSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'subject_name': subjectName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScheduleSchema;
      return this.apiClient.callApi(
        '/sched_api/schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCreateSubject operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCreateSubjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubjectSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Subject
     * @param {module:model/SubjectCreateSchema} subjectCreateSchema 
     * @param {module:api/DefaultApi~backendSchedApiViewsCreateSubjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubjectSchema}
     */
    backendSchedApiViewsCreateSubject(subjectCreateSchema, callback) {
      let postBody = subjectCreateSchema;
      // verify the required parameter 'subjectCreateSchema' is set
      if (subjectCreateSchema === undefined || subjectCreateSchema === null) {
        throw new Error("Missing the required parameter 'subjectCreateSchema' when calling backendSchedApiViewsCreateSubject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubjectSchema;
      return this.apiClient.callApi(
        '/sched_api/subject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCreateSwapRequest operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCreateSwapRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwapRequestSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Swap Request
     * @param {String} fromShiftId 
     * @param {String} toShiftId 
     * @param {String} toUserId 
     * @param {module:api/DefaultApi~backendSchedApiViewsCreateSwapRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwapRequestSchema}
     */
    backendSchedApiViewsCreateSwapRequest(fromShiftId, toShiftId, toUserId, callback) {
      let postBody = null;
      // verify the required parameter 'fromShiftId' is set
      if (fromShiftId === undefined || fromShiftId === null) {
        throw new Error("Missing the required parameter 'fromShiftId' when calling backendSchedApiViewsCreateSwapRequest");
      }
      // verify the required parameter 'toShiftId' is set
      if (toShiftId === undefined || toShiftId === null) {
        throw new Error("Missing the required parameter 'toShiftId' when calling backendSchedApiViewsCreateSwapRequest");
      }
      // verify the required parameter 'toUserId' is set
      if (toUserId === undefined || toUserId === null) {
        throw new Error("Missing the required parameter 'toUserId' when calling backendSchedApiViewsCreateSwapRequest");
      }

      let pathParams = {
      };
      let queryParams = {
        'from_shift_id': fromShiftId,
        'to_shift_id': toShiftId,
        'to_user_id': toUserId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SwapRequestSchema;
      return this.apiClient.callApi(
        '/sched_api/create_swap_request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsCreateTaShift operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsCreateTaShiftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShiftSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Ta Shift
     * @param {String} subjectName 
     * @param {module:model/ShiftSchemaCreate} shiftSchemaCreate 
     * @param {module:api/DefaultApi~backendSchedApiViewsCreateTaShiftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShiftSchema}
     */
    backendSchedApiViewsCreateTaShift(subjectName, shiftSchemaCreate, callback) {
      let postBody = shiftSchemaCreate;
      // verify the required parameter 'subjectName' is set
      if (subjectName === undefined || subjectName === null) {
        throw new Error("Missing the required parameter 'subjectName' when calling backendSchedApiViewsCreateTaShift");
      }
      // verify the required parameter 'shiftSchemaCreate' is set
      if (shiftSchemaCreate === undefined || shiftSchemaCreate === null) {
        throw new Error("Missing the required parameter 'shiftSchemaCreate' when calling backendSchedApiViewsCreateTaShift");
      }

      let pathParams = {
      };
      let queryParams = {
        'subject_name': subjectName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShiftSchema;
      return this.apiClient.callApi(
        '/sched_api/ta_shift', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListQuestions operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListQuestionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Questions
     * @param {String} subjectName 
     * @param {module:api/DefaultApi~backendSchedApiViewsListQuestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionSchema>}
     */
    backendSchedApiViewsListQuestions(subjectName, callback) {
      let postBody = null;
      // verify the required parameter 'subjectName' is set
      if (subjectName === undefined || subjectName === null) {
        throw new Error("Missing the required parameter 'subjectName' when calling backendSchedApiViewsListQuestions");
      }

      let pathParams = {
      };
      let queryParams = {
        'subject_name': subjectName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [QuestionSchema];
      return this.apiClient.callApi(
        '/sched_api/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListSchools operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListSchoolsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SchoolSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Schools
     * @param {module:api/DefaultApi~backendSchedApiViewsListSchoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SchoolSchema>}
     */
    backendSchedApiViewsListSchools(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SchoolSchema];
      return this.apiClient.callApi(
        '/sched_api/schools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListSchoolsPaginated operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListSchoolsPaginatedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SchoolSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Schools Paginated
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [pageSize = 10)] 
     * @param {module:api/DefaultApi~backendSchedApiViewsListSchoolsPaginatedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SchoolSchema>}
     */
    backendSchedApiViewsListSchoolsPaginated(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SchoolSchema];
      return this.apiClient.callApi(
        '/sched_api/schools_paginated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backendSchedApiViewsListTaShifts operation.
     * @callback module:api/DefaultApi~backendSchedApiViewsListTaShiftsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShiftSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Ta Shifts
     * @param {String} subjectName 
     * @param {module:api/DefaultApi~backendSchedApiViewsListTaShiftsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShiftSchema>}
     */
    backendSchedApiViewsListTaShifts(subjectName, callback) {
      let postBody = null;
      // verify the required parameter 'subjectName' is set
      if (subjectName === undefined || subjectName === null) {
        throw new Error("Missing the required parameter 'subjectName' when calling backendSchedApiViewsListTaShifts");
      }

      let pathParams = {
      };
      let queryParams = {
        'subject_name': subjectName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ShiftSchema];
      return this.apiClient.callApi(
        '/sched_api/ta_shifts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
